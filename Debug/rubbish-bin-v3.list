
rubbish-bin-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dc70  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138d0  0801df40  0801df40  0001ef40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08031810  08031810  00032810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08031818  08031818  00032818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0803181c  0803181c  0003281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08031820  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008a0c  2400006c  0803188c  0003306c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24008a78  0803188c  00033a78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00043f71  00000000  00000000  0003309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008f6e  00000000  00000000  0007700b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002df8  00000000  00000000  0007ff80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023bb  00000000  00000000  00082d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010dc2  00000000  00000000  00085133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004608b  00000000  00000000  00095ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f098  00000000  00000000  000dbf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025b018  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c908  00000000  00000000  0025b05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00267964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801df28 	.word	0x0801df28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0801df28 	.word	0x0801df28

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <my_printf>:
}
*/
extern UART_HandleTypeDef hlpuart1;

static inline void my_printf(const char *format, ...)
{
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b0c2      	sub	sp, #264	@ 0x108
 80006f2:	af00      	add	r7, sp, #0
    char buffer[256];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80006f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80006f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	f01c fc16 	bl	801cf48 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdf5 	bl	8000310 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0108 	add.w	r1, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <my_printf+0x5c>)
 8000734:	f00d fff0 	bl	800e718 <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	240001fc 	.word	0x240001fc

0800074c <HAL_GPIO_EXTI_Callback>:
void tud_umount_cb(void) {
  //Do nothing for now
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b08      	cmp	r3, #8
 800075a:	d10d      	bne.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    	my_printf("hello from exti\r\n");
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x34>)
 800075e:	f7ff ffc5 	bl	80006ec <my_printf>
    	if (recording_state == READY)
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d103      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0x26>
    	{
    		recording_state = DO_RECORDING;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 800076c:	2202      	movs	r2, #2
 800076e:	701a      	strb	r2, [r3, #0]
    	} else {
    		my_printf("not ready for recording\r\n");
    	}
    }
}
 8000770:	e002      	b.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    		my_printf("not ready for recording\r\n");
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000774:	f7ff ffba 	bl	80006ec <my_printf>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0801df40 	.word	0x0801df40
 8000784:	24001e68 	.word	0x24001e68
 8000788:	0801df54 	.word	0x0801df54

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f003 fa3f 	bl	8003c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f8ab 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fbab 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f000 fb89 	bl	8000eb4 <MX_DMA_Init>
  MX_I2C1_Init();
 80007a2:	f000 f913 	bl	80009cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80007a6:	f000 f951 	bl	8000a4c <MX_I2C2_Init>
  MX_SPI4_Init();
 80007aa:	f000 fa79 	bl	8000ca0 <MX_SPI4_Init>
  MX_TIM2_Init();
 80007ae:	f000 facd 	bl	8000d4c <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80007b2:	f000 fa57 	bl	8000c64 <MX_SDMMC1_SD_Init>
  MX_I2S1_Init();
 80007b6:	f000 f989 	bl	8000acc <MX_I2S1_Init>
  MX_UART5_Init();
 80007ba:	f000 fa07 	bl	8000bcc <MX_UART5_Init>
  MX_FATFS_Init();
 80007be:	f010 fa9b 	bl	8010cf8 <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 80007c2:	f000 f9b7 	bl	8000b34 <MX_LPUART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007c6:	f000 fb43 	bl	8000e50 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  my_printf("test print\r\n");
 80007ca:	483b      	ldr	r0, [pc, #236]	@ (80008b8 <main+0x12c>)
 80007cc:	f7ff ff8e 	bl	80006ec <my_printf>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	483a      	ldr	r0, [pc, #232]	@ (80008bc <main+0x130>)
 80007d4:	f00c ff46 	bl	800d664 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007d8:	2104      	movs	r1, #4
 80007da:	4838      	ldr	r0, [pc, #224]	@ (80008bc <main+0x130>)
 80007dc:	f00c ff42 	bl	800d664 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e4:	f003 faa8 	bl	8003d38 <HAL_Delay>

  mfcc_q15_init();
 80007e8:	f000 fc84 	bl	80010f4 <mfcc_q15_init>

  st7920_init();
 80007ec:	f000 ffe0 	bl	80017b0 <st7920_init>
  st7920_clear();
 80007f0:	f001 f94a 	bl	8001a88 <st7920_clear>
  st7920_print(1, 1, "sd card mount failed");
 80007f4:	4a32      	ldr	r2, [pc, #200]	@ (80008c0 <main+0x134>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 f91f 	bl	8001a3c <st7920_print>
  st7920_sendBuffer();
 80007fe:	f001 f86f 	bl	80018e0 <st7920_sendBuffer>
  sd_init();
 8000802:	f000 fcfd 	bl	8001200 <sd_init>
  st7920_clear();
 8000806:	f001 f93f 	bl	8001a88 <st7920_clear>
  st7920_print(1, 1, "sd card mount success");
 800080a:	4a2e      	ldr	r2, [pc, #184]	@ (80008c4 <main+0x138>)
 800080c:	2101      	movs	r1, #1
 800080e:	2001      	movs	r0, #1
 8000810:	f001 f914 	bl	8001a3c <st7920_print>
  st7920_sendBuffer();
 8000814:	f001 f864 	bl	80018e0 <st7920_sendBuffer>
  recording_state = READY; // READY as sd card success, can write data to it
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <main+0x13c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]

  if(vl53l0x_init())
 800081e:	f003 f987 	bl	8003b30 <vl53l0x_init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d008      	beq.n	800083a <main+0xae>
  {
	  my_printf("init vl53l0x success\r\n");
 8000828:	4828      	ldr	r0, [pc, #160]	@ (80008cc <main+0x140>)
 800082a:	f7ff ff5f 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init success");
 800082e:	4a28      	ldr	r2, [pc, #160]	@ (80008d0 <main+0x144>)
 8000830:	2109      	movs	r1, #9
 8000832:	2001      	movs	r0, #1
 8000834:	f001 f902 	bl	8001a3c <st7920_print>
 8000838:	e007      	b.n	800084a <main+0xbe>
  } else {
	  my_printf("init vl53l0x failed\r\n");
 800083a:	4826      	ldr	r0, [pc, #152]	@ (80008d4 <main+0x148>)
 800083c:	f7ff ff56 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init failed");
 8000840:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <main+0x14c>)
 8000842:	2109      	movs	r1, #9
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f8f9 	bl	8001a3c <st7920_print>
  }
  my_printf("finish setup\r\n");
 800084a:	4824      	ldr	r0, [pc, #144]	@ (80008dc <main+0x150>)
 800084c:	f7ff ff4e 	bl	80006ec <my_printf>
  st7920_print(1, 17, "waiting for exti");
 8000850:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <main+0x154>)
 8000852:	2111      	movs	r1, #17
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f8f1 	bl	8001a3c <st7920_print>
  st7920_sendBuffer();
 800085a:	f001 f841 	bl	80018e0 <st7920_sendBuffer>

  servo360_init();
 800085e:	f000 ff0c 	bl	800167a <servo360_init>
  set_servo_speed(150);
 8000862:	2096      	movs	r0, #150	@ 0x96
 8000864:	f000 ff22 	bl	80016ac <set_servo_speed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (recording_state == DO_RECORDING) {
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <main+0x13c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d1fb      	bne.n	8000868 <main+0xdc>
		recording_state = RECORDING;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <main+0x13c>)
 8000872:	2203      	movs	r2, #3
 8000874:	701a      	strb	r2, [r3, #0]
		my_printf("recording started from exti\r\n");
 8000876:	481b      	ldr	r0, [pc, #108]	@ (80008e4 <main+0x158>)
 8000878:	f7ff ff38 	bl	80006ec <my_printf>
		st7920_clear();
 800087c:	f001 f904 	bl	8001a88 <st7920_clear>
		st7920_print(1, 17, "record start");
 8000880:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <main+0x15c>)
 8000882:	2111      	movs	r1, #17
 8000884:	2001      	movs	r0, #1
 8000886:	f001 f8d9 	bl	8001a3c <st7920_print>
		st7920_sendBuffer();
 800088a:	f001 f829 	bl	80018e0 <st7920_sendBuffer>
		int num_of_file = record_and_convert();
 800088e:	f000 fee7 	bl	8001660 <record_and_convert>
 8000892:	6278      	str	r0, [r7, #36]	@ 0x24
		char tx_buffer[30];
		sprintf(tx_buffer, "record saved to %d", num_of_file);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000898:	4914      	ldr	r1, [pc, #80]	@ (80008ec <main+0x160>)
 800089a:	4618      	mov	r0, r3
 800089c:	f01c fac0 	bl	801ce20 <siprintf>
		st7920_print(1, 25, tx_buffer);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	461a      	mov	r2, r3
 80008a4:	2119      	movs	r1, #25
 80008a6:	2001      	movs	r0, #1
 80008a8:	f001 f8c8 	bl	8001a3c <st7920_print>
		st7920_sendBuffer();
 80008ac:	f001 f818 	bl	80018e0 <st7920_sendBuffer>
		recording_state = READY;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <main+0x13c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	  if (recording_state == DO_RECORDING) {
 80008b6:	e7d7      	b.n	8000868 <main+0xdc>
 80008b8:	0801df70 	.word	0x0801df70
 80008bc:	24000428 	.word	0x24000428
 80008c0:	0801df80 	.word	0x0801df80
 80008c4:	0801df98 	.word	0x0801df98
 80008c8:	24001e68 	.word	0x24001e68
 80008cc:	0801dfb0 	.word	0x0801dfb0
 80008d0:	0801dfc8 	.word	0x0801dfc8
 80008d4:	0801dfe0 	.word	0x0801dfe0
 80008d8:	0801dff8 	.word	0x0801dff8
 80008dc:	0801e00c 	.word	0x0801e00c
 80008e0:	0801e01c 	.word	0x0801e01c
 80008e4:	0801e030 	.word	0x0801e030
 80008e8:	0801e050 	.word	0x0801e050
 80008ec:	0801e060 	.word	0x0801e060

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f01c fbc4 	bl	801d08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f01c fbbe 	bl	801d08c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f007 faab 	bl	8007e6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <SystemClock_Config+0xd8>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a2a      	ldr	r2, [pc, #168]	@ (80009c8 <SystemClock_Config+0xd8>)
 8000920:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <SystemClock_Config+0xd8>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000932:	bf00      	nop
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <SystemClock_Config+0xd8>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000940:	d1f8      	bne.n	8000934 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000942:	2301      	movs	r3, #1
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	2302      	movs	r3, #2
 8000952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000954:	2305      	movs	r3, #5
 8000956:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000958:	2330      	movs	r3, #48	@ 0x30
 800095a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800095c:	2301      	movs	r3, #1
 800095e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000960:	2305      	movs	r3, #5
 8000962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000968:	2308      	movs	r3, #8
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096c:	2300      	movs	r3, #0
 800096e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	4618      	mov	r0, r3
 800097a:	f007 fac1 	bl	8007f00 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000984:	f000 fb80 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	233f      	movs	r3, #63	@ 0x3f
 800098a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2303      	movs	r3, #3
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a6:	2340      	movs	r3, #64	@ 0x40
 80009a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2103      	movs	r1, #3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fe80 	bl	80086b4 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009ba:	f000 fb65 	bl	8001088 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3770      	adds	r7, #112	@ 0x70
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024800 	.word	0x58024800

080009cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <MX_I2C1_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a08:	f006 f898 	bl	8006b3c <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 fb39 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a1a:	f006 fddf 	bl	80075dc <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 fb30 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a2c:	f006 fe21 	bl	8007672 <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 fb27 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000088 	.word	0x24000088
 8000a44:	40005400 	.word	0x40005400
 8000a48:	307075b1 	.word	0x307075b1

08000a4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <MX_I2C2_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <MX_I2C2_Init+0x7c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a86:	480e      	ldr	r0, [pc, #56]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a88:	f006 f858 	bl	8006b3c <HAL_I2C_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a92:	f000 faf9 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a9a:	f006 fd9f 	bl	80075dc <HAL_I2CEx_ConfigAnalogFilter>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f000 faf0 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000aac:	f006 fde1 	bl	8007672 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 fae7 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	240000dc 	.word	0x240000dc
 8000ac4:	40005800 	.word	0x40005800
 8000ac8:	307075b1 	.word	0x307075b1

08000acc <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <MX_I2S1_Init+0x64>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ad8:	2206      	movs	r2, #6
 8000ada:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ae8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000af2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000af6:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b18:	f006 fdf8 	bl	800770c <HAL_I2S_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000b22:	f000 fab1 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000130 	.word	0x24000130
 8000b30:	40013000 	.word	0x40013000

08000b34 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <MX_LPUART1_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	f00d fd7b 	bl	800e678 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fa7e 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	f00e ff15 	bl	800f9be <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 fa75 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000ba2:	f00e ff4a 	bl	800fa3a <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fa6c 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000bb2:	f00e fecb 	bl	800f94c <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 fa64 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	240001fc 	.word	0x240001fc
 8000bc8:	58000c00 	.word	0x58000c00

08000bcc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_UART5_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c16:	f00d fd2f 	bl	800e678 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 fa32 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c28:	f00e fec9 	bl	800f9be <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 fa29 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c3a:	f00e fefe 	bl	800fa3a <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 fa20 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c4a:	f00e fe7f 	bl	800f94c <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 fa18 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24000290 	.word	0x24000290
 8000c60:	40005000 	.word	0x40005000

08000c64 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <MX_SDMMC1_SD_Init+0x38>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c80:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	24000324 	.word	0x24000324
 8000c9c:	52007000 	.word	0x52007000

08000ca0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ca6:	4a28      	ldr	r2, [pc, #160]	@ (8000d48 <MX_SPI4_Init+0xa8>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cb0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cba:	2207      	movs	r2, #7
 8000cbc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ccc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cd0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cd4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000cd8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d32:	f00b ffe3 	bl	800ccfc <HAL_SPI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d3c:	f000 f9a4 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240003a0 	.word	0x240003a0
 8000d48:	40013400 	.word	0x40013400

08000d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7e:	4b33      	ldr	r3, [pc, #204]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2750-1;
 8000d86:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d88:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8000d8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d96:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da8:	4828      	ldr	r0, [pc, #160]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000daa:	f00c fba2 	bl	800d4f2 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000db4:	f000 f968 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4821      	ldr	r0, [pc, #132]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000dc6:	f00c fe7d 	bl	800dac4 <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000dd0:	f000 f95a 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dd4:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000dd6:	f00c fbe3 	bl	800d5a0 <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000de0:	f000 f952 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4816      	ldr	r0, [pc, #88]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000df4:	f00d fba4 	bl	800e540 <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000dfe:	f000 f943 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	2360      	movs	r3, #96	@ 0x60
 8000e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000e1a:	f00c fd3f 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e24:	f000 f930 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000e30:	f00c fd34 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e3a:	f000 f925 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e3e:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000e40:	f001 f97e 	bl	8002140 <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	@ 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	24000428 	.word	0x24000428

08000e50 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e56:	4a16      	ldr	r2, [pc, #88]	@ (8000eb0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000e58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e5c:	2209      	movs	r2, #9
 8000e5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e98:	f006 feb8 	bl	8007c0c <HAL_PCD_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ea2:	f000 f8f1 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000474 	.word	0x24000474
 8000eb0:	40040000 	.word	0x40040000

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <MX_DMA_Init+0x3c>)
 8000ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <MX_DMA_Init+0x3c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_DMA_Init+0x3c>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	200b      	movs	r0, #11
 8000ede:	f003 f82a 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ee2:	200b      	movs	r0, #11
 8000ee4:	f003 f841 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	4a59      	ldr	r2, [pc, #356]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1a:	4b57      	ldr	r3, [pc, #348]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	623b      	str	r3, [r7, #32]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	4a52      	ldr	r2, [pc, #328]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f38:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f64:	4b44      	ldr	r3, [pc, #272]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a43      	ldr	r2, [pc, #268]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a34      	ldr	r2, [pc, #208]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin|lcd_rst_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2118      	movs	r1, #24
 8000ffe:	481f      	ldr	r0, [pc, #124]	@ (800107c <MX_GPIO_Init+0x188>)
 8001000:	f005 fd68 	bl	8006ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	21bc      	movs	r1, #188	@ 0xbc
 8001008:	481d      	ldr	r0, [pc, #116]	@ (8001080 <MX_GPIO_Init+0x18c>)
 800100a:	f005 fd63 	bl	8006ad4 <HAL_GPIO_WritePin>
                          |led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : lcd_cs_Pin lcd_rst_Pin */
  GPIO_InitStruct.Pin = lcd_cs_Pin|lcd_rst_Pin;
 800100e:	2318      	movs	r3, #24
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4815      	ldr	r0, [pc, #84]	@ (800107c <MX_GPIO_Init+0x188>)
 8001026:	f005 fbad 	bl	8006784 <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_sensor_Pin */
  GPIO_InitStruct.Pin = ir_sensor_Pin;
 800102a:	2308      	movs	r3, #8
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ir_sensor_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4811      	ldr	r0, [pc, #68]	@ (8001084 <MX_GPIO_Init+0x190>)
 8001040:	f005 fba0 	bl	8006784 <HAL_GPIO_Init>

  /*Configure GPIO pins : xshut4_Pin xshut3_Pin xshut2_Pin xshut1_Pin
                           led_Pin */
  GPIO_InitStruct.Pin = xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001044:	23bc      	movs	r3, #188	@ 0xbc
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
                          |led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <MX_GPIO_Init+0x18c>)
 800105c:	f005 fb92 	bl	8006784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(ir_sensor_EXTI_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2009      	movs	r0, #9
 8001066:	f002 ff66 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ir_sensor_EXTI_IRQn);
 800106a:	2009      	movs	r0, #9
 800106c:	f002 ff7d 	bl	8003f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	@ 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400
 800107c:	58021000 	.word	0x58021000
 8001080:	58021800 	.word	0x58021800
 8001084:	58020000 	.word	0x58020000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <my_printf>:
{
 8001094:	b40f      	push	{r0, r1, r2, r3}
 8001096:	b580      	push	{r7, lr}
 8001098:	b0c2      	sub	sp, #264	@ 0x108
 800109a:	af00      	add	r7, sp, #0
    va_start(args, format);
 800109c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010a8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010b2:	f107 0008 	add.w	r0, r7, #8
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80010bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c0:	f01b ff42 	bl	801cf48 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f921 	bl	8000310 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <my_printf+0x5c>)
 80010dc:	f00d fb1c 	bl	800e718 <HAL_UART_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80010e6:	46bd      	mov	sp, r7
 80010e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ec:	b004      	add	sp, #16
 80010ee:	4770      	bx	lr
 80010f0:	240001fc 	.word	0x240001fc

080010f4 <mfcc_q15_init>:
#include "dct_coefficients.h"
#include "filter_bank.h"

arm_mfcc_instance_q15 mfcc_inst;

void mfcc_q15_init() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af06      	add	r7, sp, #24
	arm_status status;

	status = arm_mfcc_init_q15(
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <mfcc_q15_init+0x4c>)
 80010fc:	9304      	str	r3, [sp, #16]
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <mfcc_q15_init+0x50>)
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <mfcc_q15_init+0x54>)
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <mfcc_q15_init+0x58>)
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <mfcc_q15_init+0x5c>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	230d      	movs	r3, #13
 8001110:	221a      	movs	r2, #26
 8001112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <mfcc_q15_init+0x60>)
 8001118:	f015 f99c 	bl	8016454 <arm_mfcc_init_q15>
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
	    mel_filter_lengths,          // filterLengths
	    mel_filter_coeffs,           // filterCoefs
	    hamming_window               // windowCoefs
	);

	if(status == ARM_MATH_SUCCESS)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <mfcc_q15_init+0x3c>
	{
		my_printf("mfcc init success\r\n");
 8001128:	480b      	ldr	r0, [pc, #44]	@ (8001158 <mfcc_q15_init+0x64>)
 800112a:	f7ff ffb3 	bl	8001094 <my_printf>
	} else {
		my_printf("mfcc init failed\r\n");
	}
}
 800112e:	e002      	b.n	8001136 <mfcc_q15_init+0x42>
		my_printf("mfcc init failed\r\n");
 8001130:	480a      	ldr	r0, [pc, #40]	@ (800115c <mfcc_q15_init+0x68>)
 8001132:	f7ff ffaf 	bl	8001094 <my_printf>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	0801eda0 	.word	0x0801eda0
 8001144:	0801e9dc 	.word	0x0801e9dc
 8001148:	0801e974 	.word	0x0801e974
 800114c:	0801e90c 	.word	0x0801e90c
 8001150:	0801e668 	.word	0x0801e668
 8001154:	24000958 	.word	0x24000958
 8001158:	0801e074 	.word	0x0801e074
 800115c:	0801e088 	.word	0x0801e088

08001160 <convert_mfcc>:
q15_t mfcc_output[26];
// input buffer is 512
q31_t tmp_buffer[512 * 2];

void convert_mfcc(q15_t * pcm_input)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	arm_status status;
	status = arm_mfcc_q15(&mfcc_inst, pcm_input, mfcc_output, tmp_buffer);
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <convert_mfcc+0x30>)
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <convert_mfcc+0x34>)
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <convert_mfcc+0x38>)
 8001170:	f015 f9a0 	bl	80164b4 <arm_mfcc_q15>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
	if (status != ARM_MATH_SUCCESS)
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <convert_mfcc+0x26>
	{
		my_printf("failed mfcc conversion\r\n");
 8001180:	4806      	ldr	r0, [pc, #24]	@ (800119c <convert_mfcc+0x3c>)
 8001182:	f7ff ff87 	bl	8001094 <my_printf>
	}
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	240009c4 	.word	0x240009c4
 8001194:	24000990 	.word	0x24000990
 8001198:	24000958 	.word	0x24000958
 800119c:	0801e09c 	.word	0x0801e09c

080011a0 <my_printf>:
{
 80011a0:	b40f      	push	{r0, r1, r2, r3}
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b0c2      	sub	sp, #264	@ 0x108
 80011a6:	af00      	add	r7, sp, #0
    va_start(args, format);
 80011a8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80011ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b4:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80011b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011be:	f107 0008 	add.w	r0, r7, #8
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011cc:	f01b febc 	bl	801cf48 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f89b 	bl	8000310 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f107 0108 	add.w	r1, r7, #8
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <my_printf+0x5c>)
 80011e8:	f00d fa96 	bl	800e718 <HAL_UART_Transmit>
}
 80011ec:	bf00      	nop
 80011ee:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80011f2:	46bd      	mov	sp, r7
 80011f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr
 80011fc:	240001fc 	.word	0x240001fc

08001200 <sd_init>:

FATFS fatfs;
FRESULT fresult;
extern SD_HandleTypeDef hsd1;

void sd_init() {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    if (BSP_SD_Init() == MSD_OK) {
 8001204:	f00f fd92 	bl	8010d2c <BSP_SD_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <sd_init+0x16>
        my_printf("SD card initialized successfully!\r\n");
 800120e:	4810      	ldr	r0, [pc, #64]	@ (8001250 <sd_init+0x50>)
 8001210:	f7ff ffc6 	bl	80011a0 <my_printf>
 8001214:	e002      	b.n	800121c <sd_init+0x1c>
    } else {
        my_printf("SD card initialization failed!\r\n");
 8001216:	480f      	ldr	r0, [pc, #60]	@ (8001254 <sd_init+0x54>)
 8001218:	f7ff ffc2 	bl	80011a0 <my_printf>
    }

    fresult = f_mount(&fatfs, "", 1);
 800121c:	2201      	movs	r2, #1
 800121e:	490e      	ldr	r1, [pc, #56]	@ (8001258 <sd_init+0x58>)
 8001220:	480e      	ldr	r0, [pc, #56]	@ (800125c <sd_init+0x5c>)
 8001222:	f01a fcb5 	bl	801bb90 <f_mount>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <sd_init+0x60>)
 800122c:	701a      	strb	r2, [r3, #0]
    if(fresult != FR_OK) {
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <sd_init+0x60>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <sd_init+0x4c>
        my_printf("f_mount failed, %d\r\n", fresult);
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <sd_init+0x60>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	@ (8001264 <sd_init+0x64>)
 800123e:	f7ff ffaf 	bl	80011a0 <my_printf>
        while(1){
            HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f002 fd77 	bl	8003d38 <HAL_Delay>
 800124a:	e7fa      	b.n	8001242 <sd_init+0x42>
        }
    }
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0801e0b8 	.word	0x0801e0b8
 8001254:	0801e0dc 	.word	0x0801e0dc
 8001258:	0801e100 	.word	0x0801e100
 800125c:	240019c4 	.word	0x240019c4
 8001260:	24001bf4 	.word	0x24001bf4
 8001264:	0801e104 	.word	0x0801e104

08001268 <get_next_audio_filename>:

#define AUDIO_FOLDER "AUDIO"
#define FILE_TEMPLATE "AUDIO%03d.WAV"
#define MFCC_TEMPLATE "MFCC%03d.BIN"

int get_next_audio_filename() {
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  DIR dir;
  FILINFO fno;
  int max_number = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (f_opendir(&dir, AUDIO_FOLDER) == FR_OK) {
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	492c      	ldr	r1, [pc, #176]	@ (8001328 <get_next_audio_filename+0xc0>)
 8001278:	4618      	mov	r0, r3
 800127a:	f01b faaf 	bl	801c7dc <f_opendir>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14a      	bne.n	800131a <get_next_audio_filename+0xb2>
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001284:	e01e      	b.n	80012c4 <get_next_audio_filename+0x5c>
      if (strstr(fno.fname, "AUDIO") && strstr(fno.fname, ".WAV")) {
 8001286:	463b      	mov	r3, r7
 8001288:	3309      	adds	r3, #9
 800128a:	4927      	ldr	r1, [pc, #156]	@ (8001328 <get_next_audio_filename+0xc0>)
 800128c:	4618      	mov	r0, r3
 800128e:	f01b ff05 	bl	801d09c <strstr>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d015      	beq.n	80012c4 <get_next_audio_filename+0x5c>
 8001298:	463b      	mov	r3, r7
 800129a:	3309      	adds	r3, #9
 800129c:	4923      	ldr	r1, [pc, #140]	@ (800132c <get_next_audio_filename+0xc4>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f01b fefc 	bl	801d09c <strstr>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00c      	beq.n	80012c4 <get_next_audio_filename+0x5c>
        int num = atoi(fno.fname + 5);
 80012aa:	463b      	mov	r3, r7
 80012ac:	3309      	adds	r3, #9
 80012ae:	3305      	adds	r3, #5
 80012b0:	4618      	mov	r0, r3
 80012b2:	f01b fbc4 	bl	801ca3e <atoi>
 80012b6:	64b8      	str	r0, [r7, #72]	@ 0x48
        if (num > max_number) {
 80012b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012bc:	429a      	cmp	r2, r3
 80012be:	dd01      	ble.n	80012c4 <get_next_audio_filename+0x5c>
          max_number = num;
 80012c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80012c4:	463a      	mov	r2, r7
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f01b fb1e 	bl	801c90e <f_readdir>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <get_next_audio_filename+0x76>
 80012d8:	7a7b      	ldrb	r3, [r7, #9]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1d3      	bne.n	8001286 <get_next_audio_filename+0x1e>
        }
      }
    }
    f_closedir(&dir);
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	4618      	mov	r0, r3
 80012e4:	f01b faed 	bl	801c8c2 <f_closedir>
  } else {
    return -1;
  }

  snprintf(latest_audio_filename, sizeof(latest_audio_filename), AUDIO_FOLDER "/" FILE_TEMPLATE, max_number + 1);
 80012e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <get_next_audio_filename+0xc8>)
 80012ee:	2120      	movs	r1, #32
 80012f0:	4810      	ldr	r0, [pc, #64]	@ (8001334 <get_next_audio_filename+0xcc>)
 80012f2:	f01b fd5f 	bl	801cdb4 <sniprintf>
  snprintf(latest_mfcc_filename, sizeof(latest_mfcc_filename), AUDIO_FOLDER "/" MFCC_TEMPLATE, max_number + 1);
 80012f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <get_next_audio_filename+0xd0>)
 80012fc:	2120      	movs	r1, #32
 80012fe:	480f      	ldr	r0, [pc, #60]	@ (800133c <get_next_audio_filename+0xd4>)
 8001300:	f01b fd58 	bl	801cdb4 <sniprintf>
  my_printf("new audio file name in pcm should be: %s\r\n", latest_audio_filename);
 8001304:	490b      	ldr	r1, [pc, #44]	@ (8001334 <get_next_audio_filename+0xcc>)
 8001306:	480e      	ldr	r0, [pc, #56]	@ (8001340 <get_next_audio_filename+0xd8>)
 8001308:	f7ff ff4a 	bl	80011a0 <my_printf>
  my_printf("new mfcc in f32 should be: %s\r\n", latest_mfcc_filename);
 800130c:	490b      	ldr	r1, [pc, #44]	@ (800133c <get_next_audio_filename+0xd4>)
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <get_next_audio_filename+0xdc>)
 8001310:	f7ff ff46 	bl	80011a0 <my_printf>
  return max_number + 1;
 8001314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001316:	3301      	adds	r3, #1
 8001318:	e001      	b.n	800131e <get_next_audio_filename+0xb6>
    return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800131e:	4618      	mov	r0, r3
 8001320:	3750      	adds	r7, #80	@ 0x50
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0801e11c 	.word	0x0801e11c
 800132c:	0801e124 	.word	0x0801e124
 8001330:	0801e12c 	.word	0x0801e12c
 8001334:	24001bf8 	.word	0x24001bf8
 8001338:	0801e140 	.word	0x0801e140
 800133c:	24001c18 	.word	0x24001c18
 8001340:	0801e154 	.word	0x0801e154
 8001344:	0801e180 	.word	0x0801e180

08001348 <HAL_I2S_RxHalfCpltCallback>:
UINT bytes_written;
int16_t left_pcm_buffer[BUFFER_SIZE / 4];
q15_t q15_buffer[BUFFER_SIZE / 4];

// Callback when half buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    buffer_ready = 1;
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	24005e6c 	.word	0x24005e6c

08001368 <HAL_I2S_RxCpltCallback>:

// Callback when full buffer is filled
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    buffer_ready = 2;
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_I2S_RxCpltCallback+0x1c>)
 8001372:	2202      	movs	r2, #2
 8001374:	701a      	strb	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	24005e6c 	.word	0x24005e6c

08001388 <write_wav_header>:

// Write WAV header for mono channel, 16-bit, 16kHz sampling rate
void write_wav_header(FIL *file, uint32_t data_size) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	@ 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    uint8_t wav_header[44] = {
 8001392:	2352      	movs	r3, #82	@ 0x52
 8001394:	733b      	strb	r3, [r7, #12]
 8001396:	2349      	movs	r3, #73	@ 0x49
 8001398:	737b      	strb	r3, [r7, #13]
 800139a:	2346      	movs	r3, #70	@ 0x46
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	2346      	movs	r3, #70	@ 0x46
 80013a0:	73fb      	strb	r3, [r7, #15]
        'R', 'I', 'F', 'F',
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	3324      	adds	r3, #36	@ 0x24
 80013a8:	b2db      	uxtb	r3, r3
    uint8_t wav_header[44] = {
 80013aa:	743b      	strb	r3, [r7, #16]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3324      	adds	r3, #36	@ 0x24
 80013b0:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	747b      	strb	r3, [r7, #17]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3324      	adds	r3, #36	@ 0x24
 80013ba:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	74bb      	strb	r3, [r7, #18]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3324      	adds	r3, #36	@ 0x24
 80013c4:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	74fb      	strb	r3, [r7, #19]
 80013ca:	2357      	movs	r3, #87	@ 0x57
 80013cc:	753b      	strb	r3, [r7, #20]
 80013ce:	2341      	movs	r3, #65	@ 0x41
 80013d0:	757b      	strb	r3, [r7, #21]
 80013d2:	2356      	movs	r3, #86	@ 0x56
 80013d4:	75bb      	strb	r3, [r7, #22]
 80013d6:	2345      	movs	r3, #69	@ 0x45
 80013d8:	75fb      	strb	r3, [r7, #23]
 80013da:	2366      	movs	r3, #102	@ 0x66
 80013dc:	763b      	strb	r3, [r7, #24]
 80013de:	236d      	movs	r3, #109	@ 0x6d
 80013e0:	767b      	strb	r3, [r7, #25]
 80013e2:	2374      	movs	r3, #116	@ 0x74
 80013e4:	76bb      	strb	r3, [r7, #26]
 80013e6:	2320      	movs	r3, #32
 80013e8:	76fb      	strb	r3, [r7, #27]
 80013ea:	2310      	movs	r3, #16
 80013ec:	773b      	strb	r3, [r7, #28]
 80013ee:	2300      	movs	r3, #0
 80013f0:	777b      	strb	r3, [r7, #29]
 80013f2:	2300      	movs	r3, #0
 80013f4:	77bb      	strb	r3, [r7, #30]
 80013f6:	2300      	movs	r3, #0
 80013f8:	77fb      	strb	r3, [r7, #31]
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 3020 	strb.w	r3, [r7, #32]
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001406:	2301      	movs	r3, #1
 8001408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001418:	233e      	movs	r3, #62	@ 0x3e
 800141a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800142a:	2300      	movs	r3, #0
 800142c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001430:	237d      	movs	r3, #125	@ 0x7d
 8001432:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001436:	2300      	movs	r3, #0
 8001438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800143c:	2300      	movs	r3, #0
 800143e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001442:	2302      	movs	r3, #2
 8001444:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001448:	2300      	movs	r3, #0
 800144a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800144e:	2310      	movs	r3, #16
 8001450:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001454:	2300      	movs	r3, #0
 8001456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001460:	2361      	movs	r3, #97	@ 0x61
 8001462:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001466:	2374      	movs	r3, #116	@ 0x74
 8001468:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800146c:	2361      	movs	r3, #97	@ 0x61
 800146e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        16, 0, 0, 0, 1, 0, 1, 0,  // PCM format, 1 channel (mono)
        0x00, 0x3E, 0x00, 0x00,  // 16000 Hz sample rate (0x3E80 = 16000)
        0x00, 0x7D, 0x00, 0x00,  // Byte rate = 16000 * 1 * 16/8 = 32000 (0x7D00)
        2, 0, 16, 0,  // Block align = 2 bytes, Bits per sample = 16
        'd', 'a', 't', 'a',
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    };
    UINT bytes_written;
    f_write(file, wav_header, 44, &bytes_written);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	f107 010c 	add.w	r1, r7, #12
 80014a0:	222c      	movs	r2, #44	@ 0x2c
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f01a fd74 	bl	801bf90 <f_write>
    f_sync(file);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f01a fee6 	bl	801c27a <f_sync>
}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	@ 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <start_audio_recording>:
}

extern I2S_HandleTypeDef hi2s1;

// Start audio recording (writing only left channel)
void start_audio_recording() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
	UINT bytes_written_mfcc;
    buffer_ready = 0;
 80014be:	4b55      	ldr	r3, [pc, #340]	@ (8001614 <start_audio_recording+0x15c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    my_printf("Starting audio recording...\r\n");
 80014c4:	4854      	ldr	r0, [pc, #336]	@ (8001618 <start_audio_recording+0x160>)
 80014c6:	f7ff fe6b 	bl	80011a0 <my_printf>

    if (f_open(&file, latest_audio_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80014ca:	220a      	movs	r2, #10
 80014cc:	4953      	ldr	r1, [pc, #332]	@ (800161c <start_audio_recording+0x164>)
 80014ce:	4854      	ldr	r0, [pc, #336]	@ (8001620 <start_audio_recording+0x168>)
 80014d0:	f01a fba4 	bl	801bc1c <f_open>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 8095 	bne.w	8001606 <start_audio_recording+0x14e>
        my_printf("File created successfully\r\n");
 80014dc:	4851      	ldr	r0, [pc, #324]	@ (8001624 <start_audio_recording+0x16c>)
 80014de:	f7ff fe5f 	bl	80011a0 <my_printf>

        // Write placeholder WAV header
        write_wav_header(&file, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	484e      	ldr	r0, [pc, #312]	@ (8001620 <start_audio_recording+0x168>)
 80014e6:	f7ff ff4f 	bl	8001388 <write_wav_header>

        if (f_open(&file_mfcc, latest_mfcc_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80014ea:	220a      	movs	r2, #10
 80014ec:	494e      	ldr	r1, [pc, #312]	@ (8001628 <start_audio_recording+0x170>)
 80014ee:	484f      	ldr	r0, [pc, #316]	@ (800162c <start_audio_recording+0x174>)
 80014f0:	f01a fb94 	bl	801bc1c <f_open>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <start_audio_recording+0x58>
        {
        	my_printf("start write mfcc failed, filename: %s, error: %d\r\n", latest_mfcc_filename, fresult);
 80014fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001630 <start_audio_recording+0x178>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4949      	ldr	r1, [pc, #292]	@ (8001628 <start_audio_recording+0x170>)
 8001502:	484c      	ldr	r0, [pc, #304]	@ (8001634 <start_audio_recording+0x17c>)
 8001504:	f7ff fe4c 	bl	80011a0 <my_printf>
        	f_close(&file_mfcc);
 8001508:	4848      	ldr	r0, [pc, #288]	@ (800162c <start_audio_recording+0x174>)
 800150a:	f01a ff34 	bl	801c376 <f_close>
 800150e:	e07d      	b.n	800160c <start_audio_recording+0x154>
        	return;
        }

        // Start I2S DMA
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)i2s_data, BUFFER_SIZE);
 8001510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001514:	4948      	ldr	r1, [pc, #288]	@ (8001638 <start_audio_recording+0x180>)
 8001516:	4849      	ldr	r0, [pc, #292]	@ (800163c <start_audio_recording+0x184>)
 8001518:	f006 fa28 	bl	800796c <HAL_I2S_Receive_DMA>

        uint32_t total_samples = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

        while (total_samples < SAMPLING_RATE * PERIOD) {
 8001520:	e053      	b.n	80015ca <start_audio_recording+0x112>
            if (buffer_ready) {
 8001522:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <start_audio_recording+0x15c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d04e      	beq.n	80015ca <start_audio_recording+0x112>
                int16_t *start_ptr = (buffer_ready == 1) ? i2s_data : &i2s_data[BUFFER_SIZE / 2];
 800152c:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <start_audio_recording+0x15c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <start_audio_recording+0x82>
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <start_audio_recording+0x180>)
 8001538:	e000      	b.n	800153c <start_audio_recording+0x84>
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <start_audio_recording+0x188>)
 800153c:	60bb      	str	r3, [r7, #8]

                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e013      	b.n	800156c <start_audio_recording+0xb4>
                {
                	left_pcm_buffer[i / 2] = start_ptr[i] * GAIN;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	4413      	add	r3, r2
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4413      	add	r3, r2
 8001558:	b29a      	uxth	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	b211      	sxth	r1, r2
 8001560:	4a38      	ldr	r2, [pc, #224]	@ (8001644 <start_audio_recording+0x18c>)
 8001562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	3302      	adds	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001572:	d3e7      	bcc.n	8001544 <start_audio_recording+0x8c>
                }

                // Write only left channel (even indices)

                f_write(&file, left_pcm_buffer, (BUFFER_SIZE / 4) * sizeof(int16_t), &bytes_written);
 8001574:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <start_audio_recording+0x190>)
 8001576:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800157a:	4932      	ldr	r1, [pc, #200]	@ (8001644 <start_audio_recording+0x18c>)
 800157c:	4828      	ldr	r0, [pc, #160]	@ (8001620 <start_audio_recording+0x168>)
 800157e:	f01a fd07 	bl	801bf90 <f_write>

                total_samples += (BUFFER_SIZE / 4); // Since we write only half the samples
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001588:	617b      	str	r3, [r7, #20]

                arm_copy_q15((q15_t*)left_pcm_buffer, q15_buffer, BUFFER_SIZE / 4);
 800158a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800158e:	492f      	ldr	r1, [pc, #188]	@ (800164c <start_audio_recording+0x194>)
 8001590:	482c      	ldr	r0, [pc, #176]	@ (8001644 <start_audio_recording+0x18c>)
 8001592:	f011 f9d1 	bl	8012938 <arm_copy_q15>

                for (uint8_t i = 0; i < 4; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e010      	b.n	80015be <start_audio_recording+0x106>
                {
                	convert_mfcc(&left_pcm_buffer[i * 512]);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <start_audio_recording+0x18c>)
 80015a4:	4413      	add	r3, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fdda 	bl	8001160 <convert_mfcc>
                	f_write(&file_mfcc, mfcc_output, 13 * sizeof(q15_t), &bytes_written_mfcc);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	221a      	movs	r2, #26
 80015b0:	4927      	ldr	r1, [pc, #156]	@ (8001650 <start_audio_recording+0x198>)
 80015b2:	481e      	ldr	r0, [pc, #120]	@ (800162c <start_audio_recording+0x174>)
 80015b4:	f01a fcec 	bl	801bf90 <f_write>
                for (uint8_t i = 0; i < 4; i++)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d9eb      	bls.n	800159c <start_audio_recording+0xe4>
                	// fixme unknown error, why after 13 is empty, so lets record until 13
                }

                buffer_ready = 0;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <start_audio_recording+0x15c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
        while (total_samples < SAMPLING_RATE * PERIOD) {
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80015d0:	d3a7      	bcc.n	8001522 <start_audio_recording+0x6a>
            }
        }

        // Stop DMA
        HAL_I2S_DMAStop(&hi2s1);
 80015d2:	481a      	ldr	r0, [pc, #104]	@ (800163c <start_audio_recording+0x184>)
 80015d4:	f006 fa6c 	bl	8007ab0 <HAL_I2S_DMAStop>

        // Update WAV header with actual data size
        f_lseek(&file, 0);
 80015d8:	2100      	movs	r1, #0
 80015da:	4811      	ldr	r0, [pc, #68]	@ (8001620 <start_audio_recording+0x168>)
 80015dc:	f01a fef5 	bl	801c3ca <f_lseek>
        write_wav_header(&file, total_samples * sizeof(int16_t));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4619      	mov	r1, r3
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <start_audio_recording+0x168>)
 80015e8:	f7ff fece 	bl	8001388 <write_wav_header>

        my_printf("recording stopped!\r\n");
 80015ec:	4819      	ldr	r0, [pc, #100]	@ (8001654 <start_audio_recording+0x19c>)
 80015ee:	f7ff fdd7 	bl	80011a0 <my_printf>

        // Close file
        f_close(&file);
 80015f2:	480b      	ldr	r0, [pc, #44]	@ (8001620 <start_audio_recording+0x168>)
 80015f4:	f01a febf 	bl	801c376 <f_close>
        f_close(&file_mfcc);
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <start_audio_recording+0x174>)
 80015fa:	f01a febc 	bl	801c376 <f_close>

        my_printf("Recording complete\r\n");
 80015fe:	4816      	ldr	r0, [pc, #88]	@ (8001658 <start_audio_recording+0x1a0>)
 8001600:	f7ff fdce 	bl	80011a0 <my_printf>
 8001604:	e002      	b.n	800160c <start_audio_recording+0x154>
    } else {
        my_printf("File open failed\r\n");
 8001606:	4815      	ldr	r0, [pc, #84]	@ (800165c <start_audio_recording+0x1a4>)
 8001608:	f7ff fdca 	bl	80011a0 <my_printf>
    }
}
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24005e6c 	.word	0x24005e6c
 8001618:	0801e1f0 	.word	0x0801e1f0
 800161c:	24001bf8 	.word	0x24001bf8
 8001620:	24001c38 	.word	0x24001c38
 8001624:	0801e210 	.word	0x0801e210
 8001628:	24001c18 	.word	0x24001c18
 800162c:	24007e74 	.word	0x24007e74
 8001630:	24001bf4 	.word	0x24001bf4
 8001634:	0801e22c 	.word	0x0801e22c
 8001638:	24001e6c 	.word	0x24001e6c
 800163c:	24000130 	.word	0x24000130
 8001640:	24003e6c 	.word	0x24003e6c
 8001644:	24005e74 	.word	0x24005e74
 8001648:	24005e70 	.word	0x24005e70
 800164c:	24006e74 	.word	0x24006e74
 8001650:	24000990 	.word	0x24000990
 8001654:	0801e260 	.word	0x0801e260
 8001658:	0801e278 	.word	0x0801e278
 800165c:	0801e290 	.word	0x0801e290

08001660 <record_and_convert>:

int record_and_convert()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	int num = get_next_audio_filename();
 8001666:	f7ff fdff 	bl	8001268 <get_next_audio_filename>
 800166a:	6078      	str	r0, [r7, #4]
	start_audio_recording();
 800166c:	f7ff ff24 	bl	80014b8 <start_audio_recording>
	return num;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <servo360_init>:
#include "stm32h7xx_hal.h"
#include <stdint.h>

extern TIM_HandleTypeDef htim2;

void servo360_init(void) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
    for (int i = 100; i < 200; i++) {
 8001680:	2364      	movs	r3, #100	@ 0x64
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	e00a      	b.n	800169c <servo360_init+0x22>
        set_servo_speed(i);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f80e 	bl	80016ac <set_servo_speed>
        HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f002 fb51 	bl	8003d38 <HAL_Delay>
    for (int i = 100; i < 200; i++) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2bc7      	cmp	r3, #199	@ 0xc7
 80016a0:	ddf1      	ble.n	8001686 <servo360_init+0xc>
    }
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <set_servo_speed>:
/**
* for 360 degree servo
* pwm_value=150, stop
* pwm_value < 150 anticlockwise, > 150 clockwise
 */
void set_servo_speed(uint16_t pwm_value) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value - 5); // Small pre-step
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	1f5a      	subs	r2, r3, #5
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <set_servo_speed+0x2c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(20); // Let the servo register a small change
 80016c0:	2014      	movs	r0, #20
 80016c2:	f002 fb39 	bl	8003d38 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value); // Set final speed
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <set_servo_speed+0x2c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	88fa      	ldrh	r2, [r7, #6]
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000428 	.word	0x24000428

080016dc <st7920_writeCmd>:
#include "font.h"

extern SPI_HandleTypeDef hspi4;

void st7920_writeCmd(uint8_t cmd)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2108      	movs	r1, #8
 80016ea:	480f      	ldr	r0, [pc, #60]	@ (8001728 <st7920_writeCmd+0x4c>)
 80016ec:	f005 f9f2 	bl	8006ad4 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xF8;
 80016f0:	23f8      	movs	r3, #248	@ 0xf8
 80016f2:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (cmd & 0xF0);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f023 030f 	bic.w	r3, r3, #15
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((cmd << 4) & 0xF0);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	b2db      	uxtb	r3, r3
 8001704:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 8001706:	f107 010c 	add.w	r1, r7, #12
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800170e:	2203      	movs	r2, #3
 8001710:	4806      	ldr	r0, [pc, #24]	@ (800172c <st7920_writeCmd+0x50>)
 8001712:	f00b fc17 	bl	800cf44 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2108      	movs	r1, #8
 800171a:	4803      	ldr	r0, [pc, #12]	@ (8001728 <st7920_writeCmd+0x4c>)
 800171c:	f005 f9da 	bl	8006ad4 <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58021000 	.word	0x58021000
 800172c:	240003a0 	.word	0x240003a0

08001730 <st7920_writeData>:

void st7920_writeData(uint8_t data)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2108      	movs	r1, #8
 800173e:	480f      	ldr	r0, [pc, #60]	@ (800177c <st7920_writeData+0x4c>)
 8001740:	f005 f9c8 	bl	8006ad4 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xFA;
 8001744:	23fa      	movs	r3, #250	@ 0xfa
 8001746:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (data & 0xF0);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f023 030f 	bic.w	r3, r3, #15
 800174e:	b2db      	uxtb	r3, r3
 8001750:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((data << 4) & 0xF0);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	b2db      	uxtb	r3, r3
 8001758:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 800175a:	f107 010c 	add.w	r1, r7, #12
 800175e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001762:	2203      	movs	r2, #3
 8001764:	4806      	ldr	r0, [pc, #24]	@ (8001780 <st7920_writeData+0x50>)
 8001766:	f00b fbed 	bl	800cf44 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2108      	movs	r1, #8
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <st7920_writeData+0x4c>)
 8001770:	f005 f9b0 	bl	8006ad4 <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	58021000 	.word	0x58021000
 8001780:	240003a0 	.word	0x240003a0

08001784 <st7920_gfx>:

void st7920_gfx()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	st7920_writeCmd(0x30);  // 8 bit mode
 8001788:	2030      	movs	r0, #48	@ 0x30
 800178a:	f7ff ffa7 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f002 fad2 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x34);  // switch to Extended instructions
 8001794:	2034      	movs	r0, #52	@ 0x34
 8001796:	f7ff ffa1 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f002 facc 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x36);  // enable graphics
 80017a0:	2036      	movs	r0, #54	@ 0x36
 80017a2:	f7ff ff9b 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f002 fac6 	bl	8003d38 <HAL_Delay>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <st7920_init>:

void st7920_init()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2110      	movs	r1, #16
 80017b8:	481d      	ldr	r0, [pc, #116]	@ (8001830 <st7920_init+0x80>)
 80017ba:	f005 f98b 	bl	8006ad4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017be:	200a      	movs	r0, #10
 80017c0:	f002 faba 	bl	8003d38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2110      	movs	r1, #16
 80017c8:	4819      	ldr	r0, [pc, #100]	@ (8001830 <st7920_init+0x80>)
 80017ca:	f005 f983 	bl	8006ad4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017ce:	2032      	movs	r0, #50	@ 0x32
 80017d0:	f002 fab2 	bl	8003d38 <HAL_Delay>

	st7920_writeCmd(0x30);
 80017d4:	2030      	movs	r0, #48	@ 0x30
 80017d6:	f7ff ff81 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f002 faac 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x30);
 80017e0:	2030      	movs	r0, #48	@ 0x30
 80017e2:	f7ff ff7b 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f002 faa6 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x08);
 80017ec:	2008      	movs	r0, #8
 80017ee:	f7ff ff75 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f002 faa0 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x01);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff ff6f 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f002 fa9a 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x06);
 8001804:	2006      	movs	r0, #6
 8001806:	f7ff ff69 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f002 fa94 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x0C);
 8001810:	200c      	movs	r0, #12
 8001812:	f7ff ff63 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f002 fa8e 	bl	8003d38 <HAL_Delay>
	st7920_writeCmd(0x02);
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff ff5d 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f002 fa88 	bl	8003d38 <HAL_Delay>
	st7920_gfx();
 8001828:	f7ff ffac 	bl	8001784 <st7920_gfx>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58021000 	.word	0x58021000

08001834 <st7920_drawPixel>:

uint8_t framebuffer[64][16];

void st7920_drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t color)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	460b      	mov	r3, r1
 8001840:	71bb      	strb	r3, [r7, #6]
 8001842:	4613      	mov	r3, r2
 8001844:	717b      	strb	r3, [r7, #5]
	if(color > 1) return;
 8001846:	797b      	ldrb	r3, [r7, #5]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d840      	bhi.n	80018ce <st7920_drawPixel+0x9a>
	uint8_t bit_position = 7 - (pos_x % 8);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	43db      	mvns	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	73fb      	strb	r3, [r7, #15]
	if (color)
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01a      	beq.n	8001894 <st7920_drawPixel+0x60>
	{
		framebuffer[pos_y][pos_x /8] |= (1 << bit_position);
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	08d2      	lsrs	r2, r2, #3
 8001864:	b2d0      	uxtb	r0, r2
 8001866:	4601      	mov	r1, r0
 8001868:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <st7920_drawPixel+0xa8>)
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	440b      	add	r3, r1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b25a      	sxtb	r2, r3
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b25a      	sxtb	r2, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b2d1      	uxtb	r1, r2
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <st7920_drawPixel+0xa8>)
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	4403      	add	r3, r0
 800188e:	460a      	mov	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e01d      	b.n	80018d0 <st7920_drawPixel+0x9c>
	} else {
		framebuffer[pos_y][pos_x /8] &= ~(1 << bit_position);
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	08d2      	lsrs	r2, r2, #3
 800189a:	b2d0      	uxtb	r0, r2
 800189c:	4601      	mov	r1, r0
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <st7920_drawPixel+0xa8>)
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25a      	sxtb	r2, r3
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	b25a      	sxtb	r2, r3
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	b2d1      	uxtb	r1, r2
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <st7920_drawPixel+0xa8>)
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4413      	add	r3, r2
 80018c6:	4403      	add	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e000      	b.n	80018d0 <st7920_drawPixel+0x9c>
	if(color > 1) return;
 80018ce:	bf00      	nop
	}
}
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	240080a4 	.word	0x240080a4

080018e0 <st7920_sendBuffer>:

void st7920_sendBuffer()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 64; y++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e044      	b.n	8001976 <st7920_sendBuffer+0x96>
	{
		if (y < 32)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b1f      	cmp	r3, #31
 80018f0:	d81d      	bhi.n	800192e <st7920_sendBuffer+0x4e>
		{
			st7920_writeCmd(0x80 | y);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff feee 	bl	80016dc <st7920_writeCmd>
			st7920_writeCmd(0x80);
 8001900:	2080      	movs	r0, #128	@ 0x80
 8001902:	f7ff feeb 	bl	80016dc <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 8001906:	2300      	movs	r3, #0
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	e00c      	b.n	8001926 <st7920_sendBuffer+0x46>
			{
				st7920_writeData(framebuffer[y][j]);
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	491d      	ldr	r1, [pc, #116]	@ (8001988 <st7920_sendBuffer+0xa8>)
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	440a      	add	r2, r1
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff08 	bl	8001730 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	3301      	adds	r3, #1
 8001924:	71bb      	strb	r3, [r7, #6]
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d9ef      	bls.n	800190c <st7920_sendBuffer+0x2c>
 800192c:	e020      	b.n	8001970 <st7920_sendBuffer+0x90>
			}
		} else {
			st7920_writeCmd(0x80 | (y-32));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	3b20      	subs	r3, #32
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b25b      	sxtb	r3, r3
 8001936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800193a:	b25b      	sxtb	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fecc 	bl	80016dc <st7920_writeCmd>
			st7920_writeCmd(0x88);
 8001944:	2088      	movs	r0, #136	@ 0x88
 8001946:	f7ff fec9 	bl	80016dc <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 800194a:	2300      	movs	r3, #0
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	e00c      	b.n	800196a <st7920_sendBuffer+0x8a>
			{
				st7920_writeData(framebuffer[y][j]);
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	797b      	ldrb	r3, [r7, #5]
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <st7920_sendBuffer+0xa8>)
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	440a      	add	r2, r1
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fee6 	bl	8001730 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	3301      	adds	r3, #1
 8001968:	717b      	strb	r3, [r7, #5]
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d9ef      	bls.n	8001950 <st7920_sendBuffer+0x70>
	for (uint8_t y = 0; y < 64; y++)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	3301      	adds	r3, #1
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b3f      	cmp	r3, #63	@ 0x3f
 800197a:	d9b7      	bls.n	80018ec <st7920_sendBuffer+0xc>
			}
		}
	}
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240080a4 	.word	0x240080a4

0800198c <st7920_drawChar>:

// more features

void st7920_drawChar(uint8_t x, uint8_t y, char c) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	460b      	mov	r3, r1
 8001998:	71bb      	strb	r3, [r7, #6]
 800199a:	4613      	mov	r3, r2
 800199c:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) return;
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	2b1f      	cmp	r3, #31
 80019a2:	d945      	bls.n	8001a30 <st7920_drawChar+0xa4>
 80019a4:	797b      	ldrb	r3, [r7, #5]
 80019a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80019a8:	d842      	bhi.n	8001a30 <st7920_drawChar+0xa4>
    uint8_t charIndex = (c - 32);
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	3b20      	subs	r3, #32
 80019ae:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 5; row++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e038      	b.n	8001a28 <st7920_drawChar+0x9c>
    {
        for (uint8_t col = 0; col < 7; col++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
 80019ba:	e02f      	b.n	8001a1c <st7920_drawChar+0x90>
        {
        	uint8_t fontByte = fontdata[charIndex][col];
 80019bc:	7b7a      	ldrb	r2, [r7, #13]
 80019be:	7bb9      	ldrb	r1, [r7, #14]
 80019c0:	481d      	ldr	r0, [pc, #116]	@ (8001a38 <st7920_drawChar+0xac>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	4403      	add	r3, r0
 80019ca:	440b      	add	r3, r1
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	733b      	strb	r3, [r7, #12]
        	if (fontByte & (1 << (4 - row)))
 80019d0:	7b3a      	ldrb	r2, [r7, #12]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f1c3 0304 	rsb	r3, r3, #4
 80019d8:	fa42 f303 	asr.w	r3, r2, r3
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00c      	beq.n	80019fe <st7920_drawChar+0x72>
            {
                st7920_drawPixel(x + row, y + col, 1);
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4413      	add	r3, r2
 80019ea:	b2d8      	uxtb	r0, r3
 80019ec:	79ba      	ldrb	r2, [r7, #6]
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	4413      	add	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff ff1c 	bl	8001834 <st7920_drawPixel>
 80019fc:	e00b      	b.n	8001a16 <st7920_drawChar+0x8a>
            } else {
            	st7920_drawPixel(x + row, y + col, 0);
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	4413      	add	r3, r2
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	79ba      	ldrb	r2, [r7, #6]
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff ff0f 	bl	8001834 <st7920_drawPixel>
        for (uint8_t col = 0; col < 7; col++)
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73bb      	strb	r3, [r7, #14]
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d9cc      	bls.n	80019bc <st7920_drawChar+0x30>
    for (uint8_t row = 0; row < 5; row++)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d9c3      	bls.n	80019b6 <st7920_drawChar+0x2a>
 8001a2e:	e000      	b.n	8001a32 <st7920_drawChar+0xa6>
	if (c < 32 || c > 126) return;
 8001a30:	bf00      	nop
            }
        }
    }
}
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	0801f1a0 	.word	0x0801f1a0

08001a3c <st7920_print>:

void st7920_print(uint8_t x, uint8_t y, const char* str)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	603a      	str	r2, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	71bb      	strb	r3, [r7, #6]
	while(*str)
 8001a4c:	e013      	b.n	8001a76 <st7920_print+0x3a>
	{
		st7920_drawChar(x, y, *str++);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	603a      	str	r2, [r7, #0]
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	79b9      	ldrb	r1, [r7, #6]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff96 	bl	800198c <st7920_drawChar>
		x+=6;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3306      	adds	r3, #6
 8001a64:	71fb      	strb	r3, [r7, #7]
		if(x > 122)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b7a      	cmp	r3, #122	@ 0x7a
 8001a6a:	d904      	bls.n	8001a76 <st7920_print+0x3a>
		{
			y+=8;
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	71bb      	strb	r3, [r7, #6]
			x=1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e7      	bne.n	8001a4e <st7920_print+0x12>
		}
	}
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <st7920_clear>:

void st7920_clear() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	memset(framebuffer, 0x00, sizeof(framebuffer));
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	2100      	movs	r1, #0
 8001a92:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <st7920_clear+0x14>)
 8001a94:	f01b fafa 	bl	801d08c <memset>
	//st7920_writeCmd(0x01);
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	240080a4 	.word	0x240080a4

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_MspInit+0x30>)
 8001aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aac:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_MspInit+0x30>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_MspInit+0x30>)
 8001ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	58024400 	.word	0x58024400

08001ad4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	22b8      	movs	r2, #184	@ 0xb8
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f01b fac9 	bl	801d08c <memset>
  if(hi2c->Instance==I2C1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <HAL_I2C_MspInit+0x15c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d146      	bne.n	8001b92 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b04:	f04f 0208 	mov.w	r2, #8
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f007 f956 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b26:	f7ff faaf 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b42      	ldr	r3, [pc, #264]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b30:	4a40      	ldr	r2, [pc, #256]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b60:	2304      	movs	r3, #4
 8001b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4832      	ldr	r0, [pc, #200]	@ (8001c38 <HAL_I2C_MspInit+0x164>)
 8001b6e:	f004 fe09 	bl	8006784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b72:	4b30      	ldr	r3, [pc, #192]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b78:	4a2e      	ldr	r2, [pc, #184]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b82:	4b2c      	ldr	r3, [pc, #176]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b90:	e04a      	b.n	8001c28 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	@ (8001c3c <HAL_I2C_MspInit+0x168>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d145      	bne.n	8001c28 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b9c:	f04f 0208 	mov.w	r2, #8
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 f90a 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001bbe:	f7ff fa63 	bl	8001088 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be6:	2312      	movs	r3, #18
 8001be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c02:	4619      	mov	r1, r3
 8001c04:	480e      	ldr	r0, [pc, #56]	@ (8001c40 <HAL_I2C_MspInit+0x16c>)
 8001c06:	f004 fdbd 	bl	8006784 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c10:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	37e8      	adds	r7, #232	@ 0xe8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58020400 	.word	0x58020400
 8001c3c:	40005800 	.word	0x40005800
 8001c40:	58021400 	.word	0x58021400

08001c44 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0b8      	sub	sp, #224	@ 0xe0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	22b8      	movs	r2, #184	@ 0xb8
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f01b fa11 	bl	801d08c <memset>
  if(hi2s->Instance==SPI1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_I2S_MspInit+0x148>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 8086 	bne.w	8001d82 <HAL_I2S_MspInit+0x13e>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001c86:	2310      	movs	r3, #16
 8001c88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c96:	23c0      	movs	r3, #192	@ 0xc0
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4618      	mov	r0, r3
 8001cae:	f007 f88d 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001cb8:	f7ff f9e6 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cbc:	4b34      	ldr	r3, [pc, #208]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc2:	4a33      	ldr	r2, [pc, #204]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cf8:	2370      	movs	r3, #112	@ 0x70
 8001cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d10:	2305      	movs	r3, #5
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <HAL_I2S_MspInit+0x150>)
 8001d1e:	f004 fd31 	bl	8006784 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d24:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <HAL_I2S_MspInit+0x158>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d2a:	2225      	movs	r2, #37	@ 0x25
 8001d2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d40:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d50:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d58:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d68:	f002 f91a 	bl	8003fa0 <HAL_DMA_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001d72:	f7ff f989 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d7a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d7c:	4a06      	ldr	r2, [pc, #24]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	37e0      	adds	r7, #224	@ 0xe0
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40013000 	.word	0x40013000
 8001d90:	58024400 	.word	0x58024400
 8001d94:	58020000 	.word	0x58020000
 8001d98:	24000184 	.word	0x24000184
 8001d9c:	40020010 	.word	0x40020010

08001da0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0ba      	sub	sp, #232	@ 0xe8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	22b8      	movs	r2, #184	@ 0xb8
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f01b f963 	bl	801d08c <memset>
  if(huart->Instance==LPUART1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a4d      	ldr	r2, [pc, #308]	@ (8001f00 <HAL_UART_MspInit+0x160>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d147      	bne.n	8001e60 <HAL_UART_MspInit+0xc0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dd0:	f04f 0204 	mov.w	r2, #4
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de2:	f107 0318 	add.w	r3, r7, #24
 8001de6:	4618      	mov	r0, r3
 8001de8:	f006 fff0 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001df2:	f7ff f949 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001df6:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dfc:	4a41      	ldr	r2, [pc, #260]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e06:	4b3f      	ldr	r3, [pc, #252]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e24:	4b37      	ldr	r3, [pc, #220]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e56:	4619      	mov	r1, r3
 8001e58:	482b      	ldr	r0, [pc, #172]	@ (8001f08 <HAL_UART_MspInit+0x168>)
 8001e5a:	f004 fc93 	bl	8006784 <HAL_GPIO_Init>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e5e:	e04b      	b.n	8001ef8 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==UART5)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_UART_MspInit+0x16c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d146      	bne.n	8001ef8 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e6a:	f04f 0202 	mov.w	r2, #2
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f006 ffa3 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001e8c:	f7ff f8fc 	bl	8001088 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e90:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e96:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb4:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ecc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001ee6:	230e      	movs	r3, #14
 8001ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <HAL_UART_MspInit+0x170>)
 8001ef4:	f004 fc46 	bl	8006784 <HAL_GPIO_Init>
}
 8001ef8:	bf00      	nop
 8001efa:	37e8      	adds	r7, #232	@ 0xe8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	58000c00 	.word	0x58000c00
 8001f04:	58024400 	.word	0x58024400
 8001f08:	58020000 	.word	0x58020000
 8001f0c:	40005000 	.word	0x40005000
 8001f10:	58020400 	.word	0x58020400

08001f14 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0ba      	sub	sp, #232	@ 0xe8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	22b8      	movs	r2, #184	@ 0xb8
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f01b f8a9 	bl	801d08c <memset>
  if(hsd->Instance==SDMMC1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a38      	ldr	r2, [pc, #224]	@ (8002020 <HAL_SD_MspInit+0x10c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d169      	bne.n	8002018 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f006 ff37 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001f64:	f7ff f890 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f68:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8c:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001faa:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fc2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480f      	ldr	r0, [pc, #60]	@ (8002028 <HAL_SD_MspInit+0x114>)
 8001fea:	f004 fbcb 	bl	8006784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002006:	230c      	movs	r3, #12
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <HAL_SD_MspInit+0x118>)
 8002014:	f004 fbb6 	bl	8006784 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	37e8      	adds	r7, #232	@ 0xe8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	52007000 	.word	0x52007000
 8002024:	58024400 	.word	0x58024400
 8002028:	58020800 	.word	0x58020800
 800202c:	58020c00 	.word	0x58020c00

08002030 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0b8      	sub	sp, #224	@ 0xe0
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	22b8      	movs	r2, #184	@ 0xb8
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f01b f81b 	bl	801d08c <memset>
  if(hspi->Instance==SPI4)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a26      	ldr	r2, [pc, #152]	@ (80020f4 <HAL_SPI_MspInit+0xc4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d144      	bne.n	80020ea <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4618      	mov	r0, r3
 8002076:	f006 fea9 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002080:	f7ff f802 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 8002086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208a:	4a1b      	ldr	r2, [pc, #108]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 800208c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002090:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 8002096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020d8:	2305      	movs	r3, #5
 80020da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020de:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	@ (80020fc <HAL_SPI_MspInit+0xcc>)
 80020e6:	f004 fb4d 	bl	8006784 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80020ea:	bf00      	nop
 80020ec:	37e0      	adds	r7, #224	@ 0xe0
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013400 	.word	0x40013400
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58021000 	.word	0x58021000

08002100 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_TIM_Base_MspInit+0x3c>)
 8002114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002118:	4a08      	ldr	r2, [pc, #32]	@ (800213c <HAL_TIM_Base_MspInit+0x3c>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_TIM_Base_MspInit+0x3c>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	58024400 	.word	0x58024400

08002140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d11e      	bne.n	80021a0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_TIM_MspPostInit+0x68>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <HAL_TIM_MspPostInit+0x68>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_TIM_MspPostInit+0x68>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002180:	2303      	movs	r3, #3
 8002182:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002190:	2301      	movs	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4619      	mov	r1, r3
 800219a:	4804      	ldr	r0, [pc, #16]	@ (80021ac <HAL_TIM_MspPostInit+0x6c>)
 800219c:	f004 faf2 	bl	8006784 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58020000 	.word	0x58020000

080021b0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0b2      	sub	sp, #200	@ 0xc8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	22b8      	movs	r2, #184	@ 0xb8
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f01a ff63 	bl	801d08c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <HAL_PCD_MspInit+0x84>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d12c      	bne.n	800222a <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f006 fdef 	bl	8008dcc <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80021f4:	f7fe ff48 	bl	8001088 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80021f8:	f005 fe72 	bl	8007ee0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_PCD_MspInit+0x88>)
 80021fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002202:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_PCD_MspInit+0x88>)
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002208:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_PCD_MspInit+0x88>)
 800220e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	204d      	movs	r0, #77	@ 0x4d
 8002220:	f001 fe89 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002224:	204d      	movs	r0, #77	@ 0x4d
 8002226:	f001 fea0 	bl	8003f6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800222a:	bf00      	nop
 800222c:	37c8      	adds	r7, #200	@ 0xc8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40040000 	.word	0x40040000
 8002238:	58024400 	.word	0x58024400

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002292:	f001 fd31 	bl	8003cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}

0800229a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ir_sensor_Pin);
 800229e:	2008      	movs	r0, #8
 80022a0:	f004 fc31 	bl	8006b06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <DMA1_Stream0_IRQHandler+0x10>)
 80022ae:	f002 ff57 	bl	8005160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	24000184 	.word	0x24000184

080022bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	tud_int_handler(0);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f017 fbbf 	bl	8019a44 <dcd_int_handler>
	return;
 80022c6:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00a      	b.n	80022f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022dc:	f3af 8000 	nop.w
 80022e0:	4601      	mov	r1, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	60ba      	str	r2, [r7, #8]
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf0      	blt.n	80022dc <_read+0x12>
  }

  return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e009      	b.n	800232a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	60ba      	str	r2, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	dbf1      	blt.n	8002316 <_write+0x12>
  }
  return len;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_close>:

int _close(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002364:	605a      	str	r2, [r3, #4]
  return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_isatty>:

int _isatty(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f01a febe 	bl	801d154 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	24050000 	.word	0x24050000
 8002404:	00004000 	.word	0x00004000
 8002408:	240084a4 	.word	0x240084a4
 800240c:	24008a78 	.word	0x24008a78

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002414:	4b3e      	ldr	r3, [pc, #248]	@ (8002510 <SystemInit+0x100>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	4a3d      	ldr	r2, [pc, #244]	@ (8002510 <SystemInit+0x100>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <SystemInit+0x104>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	2b06      	cmp	r3, #6
 800242e:	d807      	bhi.n	8002440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002430:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <SystemInit+0x104>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	4a36      	ldr	r2, [pc, #216]	@ (8002514 <SystemInit+0x104>)
 800243a:	f043 0307 	orr.w	r3, r3, #7
 800243e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002440:	4b35      	ldr	r3, [pc, #212]	@ (8002518 <SystemInit+0x108>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a34      	ldr	r2, [pc, #208]	@ (8002518 <SystemInit+0x108>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800244c:	4b32      	ldr	r3, [pc, #200]	@ (8002518 <SystemInit+0x108>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002452:	4b31      	ldr	r3, [pc, #196]	@ (8002518 <SystemInit+0x108>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4930      	ldr	r1, [pc, #192]	@ (8002518 <SystemInit+0x108>)
 8002458:	4b30      	ldr	r3, [pc, #192]	@ (800251c <SystemInit+0x10c>)
 800245a:	4013      	ands	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800245e:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <SystemInit+0x104>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <SystemInit+0x104>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 030f 	bic.w	r3, r3, #15
 8002472:	4a28      	ldr	r2, [pc, #160]	@ (8002514 <SystemInit+0x104>)
 8002474:	f043 0307 	orr.w	r3, r3, #7
 8002478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800247a:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <SystemInit+0x108>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <SystemInit+0x108>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <SystemInit+0x108>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800248c:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <SystemInit+0x108>)
 800248e:	4a24      	ldr	r2, [pc, #144]	@ (8002520 <SystemInit+0x110>)
 8002490:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002492:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <SystemInit+0x108>)
 8002494:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <SystemInit+0x114>)
 8002496:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <SystemInit+0x108>)
 800249a:	4a23      	ldr	r2, [pc, #140]	@ (8002528 <SystemInit+0x118>)
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <SystemInit+0x108>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002518 <SystemInit+0x108>)
 80024a6:	4a20      	ldr	r2, [pc, #128]	@ (8002528 <SystemInit+0x118>)
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <SystemInit+0x108>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <SystemInit+0x108>)
 80024b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <SystemInit+0x118>)
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <SystemInit+0x108>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024bc:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <SystemInit+0x108>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <SystemInit+0x108>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <SystemInit+0x108>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <SystemInit+0x108>)
 80024d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <SystemInit+0x108>)
 80024de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <SystemInit+0x108>)
 80024e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <SystemInit+0x11c>)
 80024ee:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024f2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <SystemInit+0x108>)
 80024f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024fa:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <SystemInit+0x108>)
 80024fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002500:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00
 8002514:	52002000 	.word	0x52002000
 8002518:	58024400 	.word	0x58024400
 800251c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002520:	02020200 	.word	0x02020200
 8002524:	01ff0000 	.word	0x01ff0000
 8002528:	01010280 	.word	0x01010280
 800252c:	52004000 	.word	0x52004000

08002530 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <ExitRun0Mode+0x2c>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a08      	ldr	r2, [pc, #32]	@ (800255c <ExitRun0Mode+0x2c>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002540:	bf00      	nop
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <ExitRun0Mode+0x2c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f9      	beq.n	8002542 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	58024800 	.word	0x58024800

08002560 <my_printf>:
{
 8002560:	b40f      	push	{r0, r1, r2, r3}
 8002562:	b580      	push	{r7, lr}
 8002564:	b0c2      	sub	sp, #264	@ 0x108
 8002566:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002568:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800256c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002574:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800257a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800257e:	f107 0008 	add.w	r0, r7, #8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800258c:	f01a fcdc 	bl	801cf48 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd febb 	bl	8000310 <strlen>
 800259a:	4603      	mov	r3, r0
 800259c:	b29a      	uxth	r2, r3
 800259e:	f107 0108 	add.w	r1, r7, #8
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025a6:	4805      	ldr	r0, [pc, #20]	@ (80025bc <my_printf+0x5c>)
 80025a8:	f00c f8b6 	bl	800e718 <HAL_UART_Transmit>
}
 80025ac:	bf00      	nop
 80025ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80025b2:	46bd      	mov	sp, r7
 80025b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025b8:	b004      	add	sp, #16
 80025ba:	4770      	bx	lr
 80025bc:	240001fc 	.word	0x240001fc

080025c0 <i2c_set_slave_address>:

extern I2C_HandleTypeDef hi2c1;

uint8_t i2c_addr = 0;

void i2c_set_slave_address(uint8_t addr) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
    i2c_addr = addr;
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <i2c_set_slave_address+0x1c>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	7013      	strb	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	240084a9 	.word	0x240084a9

080025e0 <i2c_read_addr8_data8>:

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <i2c_read_addr8_data8+0x70>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	b299      	uxth	r1, r3
 80025f4:	1dfa      	adds	r2, r7, #7
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	4815      	ldr	r0, [pc, #84]	@ (8002654 <i2c_read_addr8_data8+0x74>)
 8002600:	f004 fb38 	bl	8006c74 <HAL_I2C_Master_Transmit>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <i2c_read_addr8_data8+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4619      	mov	r1, r3
 800260e:	4812      	ldr	r0, [pc, #72]	@ (8002658 <i2c_read_addr8_data8+0x78>)
 8002610:	f7ff ffa6 	bl	8002560 <my_printf>
        return false;
 8002614:	2300      	movs	r3, #0
 8002616:	e016      	b.n	8002646 <i2c_read_addr8_data8+0x66>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <i2c_read_addr8_data8+0x70>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	b299      	uxth	r1, r3
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2301      	movs	r3, #1
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	480a      	ldr	r0, [pc, #40]	@ (8002654 <i2c_read_addr8_data8+0x74>)
 800262c:	f004 fc3a 	bl	8006ea4 <HAL_I2C_Master_Receive>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <i2c_read_addr8_data8+0x64>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4619      	mov	r1, r3
 800263a:	4808      	ldr	r0, [pc, #32]	@ (800265c <i2c_read_addr8_data8+0x7c>)
 800263c:	f7ff ff90 	bl	8002560 <my_printf>
        return false;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <i2c_read_addr8_data8+0x66>
    }
    return true;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	240084a9 	.word	0x240084a9
 8002654:	24000088 	.word	0x24000088
 8002658:	0801e2a4 	.word	0x0801e2a4
 800265c:	0801e2e8 	.word	0x0801e2e8

08002660 <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af02      	add	r7, sp, #8
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	4613      	mov	r3, r2
 800266e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	733b      	strb	r3, [r7, #12]
 8002674:	79bb      	ldrb	r3, [r7, #6]
 8002676:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <i2c_write_addr8_data8+0x54>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	b299      	uxth	r1, r3
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2302      	movs	r3, #2
 800268c:	480a      	ldr	r0, [pc, #40]	@ (80026b8 <i2c_write_addr8_data8+0x58>)
 800268e:	f004 faf1 	bl	8006c74 <HAL_I2C_Master_Transmit>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <i2c_write_addr8_data8+0x4a>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, i2c_addr);
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4a06      	ldr	r2, [pc, #24]	@ (80026b4 <i2c_write_addr8_data8+0x54>)
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4806      	ldr	r0, [pc, #24]	@ (80026bc <i2c_write_addr8_data8+0x5c>)
 80026a2:	f7ff ff5d 	bl	8002560 <my_printf>
        return false;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <i2c_write_addr8_data8+0x4c>
    }
    return true;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	240084a9 	.word	0x240084a9
 80026b8:	24000088 	.word	0x24000088
 80026bc:	0801e3b8 	.word	0x0801e3b8

080026c0 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80026cc:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <i2c_read_addr8_data32+0x8c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	b299      	uxth	r1, r3
 80026d4:	1dfa      	adds	r2, r7, #7
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	481c      	ldr	r0, [pc, #112]	@ (8002750 <i2c_read_addr8_data32+0x90>)
 80026e0:	f004 fac8 	bl	8006c74 <HAL_I2C_Master_Transmit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <i2c_read_addr8_data32+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4819      	ldr	r0, [pc, #100]	@ (8002754 <i2c_read_addr8_data32+0x94>)
 80026f0:	f7ff ff36 	bl	8002560 <my_printf>
        return false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e024      	b.n	8002742 <i2c_read_addr8_data32+0x82>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <i2c_read_addr8_data32+0x8c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	b299      	uxth	r1, r3
 8002700:	f107 020c 	add.w	r2, r7, #12
 8002704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2304      	movs	r3, #4
 800270c:	4810      	ldr	r0, [pc, #64]	@ (8002750 <i2c_read_addr8_data32+0x90>)
 800270e:	f004 fbc9 	bl	8006ea4 <HAL_I2C_Master_Receive>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <i2c_read_addr8_data32+0x66>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4619      	mov	r1, r3
 800271c:	480e      	ldr	r0, [pc, #56]	@ (8002758 <i2c_read_addr8_data32+0x98>)
 800271e:	f7ff ff1f 	bl	8002560 <my_printf>
        return false;
 8002722:	2300      	movs	r3, #0
 8002724:	e00d      	b.n	8002742 <i2c_read_addr8_data32+0x82>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	061a      	lsls	r2, r3, #24
 800272a:	7b7b      	ldrb	r3, [r7, #13]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	4313      	orrs	r3, r2
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	4313      	orrs	r3, r2
 800273a:	461a      	mov	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	601a      	str	r2, [r3, #0]
    return true;
 8002740:	2301      	movs	r3, #1
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	240084a9 	.word	0x240084a9
 8002750:	24000088 	.word	0x24000088
 8002754:	0801e40c 	.word	0x0801e40c
 8002758:	0801e454 	.word	0x0801e454

0800275c <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 800275c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002760:	b087      	sub	sp, #28
 8002762:	af02      	add	r7, sp, #8
 8002764:	4603      	mov	r3, r0
 8002766:	6039      	str	r1, [r7, #0]
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	4613      	mov	r3, r2
 800276c:	71bb      	strb	r3, [r7, #6]
 800276e:	466b      	mov	r3, sp
 8002770:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	1c59      	adds	r1, r3, #1
 8002776:	1e4b      	subs	r3, r1, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	460a      	mov	r2, r1
 800277c:	2300      	movs	r3, #0
 800277e:	4690      	mov	r8, r2
 8002780:	4699      	mov	r9, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	460a      	mov	r2, r1
 8002798:	2300      	movs	r3, #0
 800279a:	4614      	mov	r4, r2
 800279c:	461d      	mov	r5, r3
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	00eb      	lsls	r3, r5, #3
 80027a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ac:	00e2      	lsls	r2, r4, #3
 80027ae:	460b      	mov	r3, r1
 80027b0:	3307      	adds	r3, #7
 80027b2:	08db      	lsrs	r3, r3, #3
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	ebad 0d03 	sub.w	sp, sp, r3
 80027ba:	ab02      	add	r3, sp, #8
 80027bc:	3300      	adds	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	79fa      	ldrb	r2, [r7, #7]
 80027c4:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	79ba      	ldrb	r2, [r7, #6]
 80027cc:	6839      	ldr	r1, [r7, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f01a fced 	bl	801d1ae <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <i2c_write_addr8_bytes+0xb8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	b299      	uxth	r1, r3
 80027dc:	79bb      	ldrb	r3, [r7, #6]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027e8:	9200      	str	r2, [sp, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	480a      	ldr	r0, [pc, #40]	@ (8002818 <i2c_write_addr8_bytes+0xbc>)
 80027ee:	f004 fa41 	bl	8006c74 <HAL_I2C_Master_Transmit>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <i2c_write_addr8_bytes+0xaa>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4807      	ldr	r0, [pc, #28]	@ (800281c <i2c_write_addr8_bytes+0xc0>)
 80027fe:	f7ff feaf 	bl	8002560 <my_printf>
        return false;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <i2c_write_addr8_bytes+0xac>
    }
    return true;
 8002806:	2301      	movs	r3, #1
 8002808:	46b5      	mov	sp, r6
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002814:	240084a9 	.word	0x240084a9
 8002818:	24000088 	.word	0x24000088
 800281c:	0801e498 	.word	0x0801e498

08002820 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af02      	add	r7, sp, #8
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	4613      	mov	r3, r2
 800282e:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <i2c_read_addr8_bytes+0x74>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b299      	uxth	r1, r3
 8002838:	1dfa      	adds	r2, r7, #7
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2301      	movs	r3, #1
 8002842:	4815      	ldr	r0, [pc, #84]	@ (8002898 <i2c_read_addr8_bytes+0x78>)
 8002844:	f004 fa16 	bl	8006c74 <HAL_I2C_Master_Transmit>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <i2c_read_addr8_bytes+0x3c>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4619      	mov	r1, r3
 8002852:	4812      	ldr	r0, [pc, #72]	@ (800289c <i2c_read_addr8_bytes+0x7c>)
 8002854:	f7ff fe84 	bl	8002560 <my_printf>
        return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e017      	b.n	800288c <i2c_read_addr8_bytes+0x6c>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 800285c:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <i2c_read_addr8_bytes+0x74>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	b299      	uxth	r1, r3
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4809      	ldr	r0, [pc, #36]	@ (8002898 <i2c_read_addr8_bytes+0x78>)
 8002872:	f004 fb17 	bl	8006ea4 <HAL_I2C_Master_Receive>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <i2c_read_addr8_bytes+0x6a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	4619      	mov	r1, r3
 8002880:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <i2c_read_addr8_bytes+0x80>)
 8002882:	f7ff fe6d 	bl	8002560 <my_printf>
        return false;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <i2c_read_addr8_bytes+0x6c>
    }
    return true;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	240084a9 	.word	0x240084a9
 8002898:	24000088 	.word	0x24000088
 800289c:	0801e4dc 	.word	0x0801e4dc
 80028a0:	0801e520 	.word	0x0801e520

080028a4 <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 80028aa:	4813      	ldr	r0, [pc, #76]	@ (80028f8 <device_is_booted+0x54>)
 80028ac:	f01a fa7a 	bl	801cda4 <puts>
    uint8_t device_id = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	4619      	mov	r1, r3
 80028b8:	20c0      	movs	r0, #192	@ 0xc0
 80028ba:	f7ff fe91 	bl	80025e0 <i2c_read_addr8_data8>
 80028be:	4603      	mov	r3, r0
 80028c0:	f083 0301 	eor.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4619      	mov	r1, r3
 80028ce:	480b      	ldr	r0, [pc, #44]	@ (80028fc <device_is_booted+0x58>)
 80028d0:	f01a fa00 	bl	801ccd4 <iprintf>
        return false;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e00a      	b.n	80028ee <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4619      	mov	r1, r3
 80028dc:	4808      	ldr	r0, [pc, #32]	@ (8002900 <device_is_booted+0x5c>)
 80028de:	f01a f9f9 	bl	801ccd4 <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2bee      	cmp	r3, #238	@ 0xee
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0801e564 	.word	0x0801e564
 80028fc:	0801e57c 	.word	0x0801e57c
 8002900:	0801e594 	.word	0x0801e594

08002904 <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
    bool success = false;
 800290a:	2300      	movs	r3, #0
 800290c:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	4619      	mov	r1, r3
 8002916:	2089      	movs	r0, #137	@ 0x89
 8002918:	f7ff fe62 	bl	80025e0 <i2c_read_addr8_data8>
 800291c:	4603      	mov	r3, r0
 800291e:	f083 0301 	eor.w	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <data_init+0x28>
        return false;
 8002928:	2300      	movs	r3, #0
 800292a:	e073      	b.n	8002a14 <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 800292c:	79bb      	ldrb	r3, [r7, #6]
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 8002936:	79bb      	ldrb	r3, [r7, #6]
 8002938:	4619      	mov	r1, r3
 800293a:	2089      	movs	r0, #137	@ 0x89
 800293c:	f7ff fe90 	bl	8002660 <i2c_write_addr8_data8>
 8002940:	4603      	mov	r3, r0
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <data_init+0x4c>
        return false;
 800294c:	2300      	movs	r3, #0
 800294e:	e061      	b.n	8002a14 <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8002950:	2100      	movs	r1, #0
 8002952:	2088      	movs	r0, #136	@ 0x88
 8002954:	f7ff fe84 	bl	8002660 <i2c_write_addr8_data8>
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 800295c:	2101      	movs	r1, #1
 800295e:	2080      	movs	r0, #128	@ 0x80
 8002960:	f7ff fe7e 	bl	8002660 <i2c_write_addr8_data8>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002976:	2101      	movs	r1, #1
 8002978:	20ff      	movs	r0, #255	@ 0xff
 800297a:	f7ff fe71 	bl	8002660 <i2c_write_addr8_data8>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002990:	2100      	movs	r1, #0
 8002992:	2000      	movs	r0, #0
 8002994:	f7ff fe64 	bl	8002660 <i2c_write_addr8_data8>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 80029aa:	491c      	ldr	r1, [pc, #112]	@ (8002a1c <data_init+0x118>)
 80029ac:	2091      	movs	r0, #145	@ 0x91
 80029ae:	f7ff fe17 	bl	80025e0 <i2c_read_addr8_data8>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80029c4:	2101      	movs	r1, #1
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fe4a 	bl	8002660 <i2c_write_addr8_data8>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80029de:	2100      	movs	r1, #0
 80029e0:	20ff      	movs	r0, #255	@ 0xff
 80029e2:	f7ff fe3d 	bl	8002660 <i2c_write_addr8_data8>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 80029f8:	2100      	movs	r1, #0
 80029fa:	2080      	movs	r0, #128	@ 0x80
 80029fc:	f7ff fe30 	bl	8002660 <i2c_write_addr8_data8>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	71fb      	strb	r3, [r7, #7]

    return success;
 8002a12:	79fb      	ldrb	r3, [r7, #7]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	240084a8 	.word	0x240084a8

08002a20 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
    bool success = false;
 8002a26:	2300      	movs	r3, #0
 8002a28:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2083      	movs	r0, #131	@ 0x83
 8002a32:	f7ff fe15 	bl	8002660 <i2c_write_addr8_data8>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <read_strobe+0x26>
        return false;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e021      	b.n	8002a8a <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 8002a46:	1dbb      	adds	r3, r7, #6
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2083      	movs	r0, #131	@ 0x83
 8002a4c:	f7ff fdc8 	bl	80025e0 <i2c_read_addr8_data8>
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <read_strobe+0x40>
 8002a5a:	79bb      	ldrb	r3, [r7, #6]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f2      	beq.n	8002a46 <read_strobe+0x26>
    if (!success) {
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <read_strobe+0x50>
        return false;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e00c      	b.n	8002a8a <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8002a70:	2101      	movs	r1, #1
 8002a72:	2083      	movs	r0, #131	@ 0x83
 8002a74:	f7ff fdf4 	bl	8002660 <i2c_write_addr8_data8>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <read_strobe+0x68>
        return false;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <read_strobe+0x6a>
    }
    return true;
 8002a88:	2301      	movs	r3, #1
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
    bool success = false;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 8002aaa:	2101      	movs	r1, #1
 8002aac:	2080      	movs	r0, #128	@ 0x80
 8002aae:	f7ff fdd7 	bl	8002660 <i2c_write_addr8_data8>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	20ff      	movs	r0, #255	@ 0xff
 8002aba:	f7ff fdd1 	bl	8002660 <i2c_write_addr8_data8>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7ff fdc4 	bl	8002660 <i2c_write_addr8_data8>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 8002aea:	2106      	movs	r1, #6
 8002aec:	20ff      	movs	r0, #255	@ 0xff
 8002aee:	f7ff fdb7 	bl	8002660 <i2c_write_addr8_data8>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 8002b04:	f107 0316 	add.w	r3, r7, #22
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2083      	movs	r0, #131	@ 0x83
 8002b0c:	f7ff fd68 	bl	80025e0 <i2c_read_addr8_data8>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 8002b22:	7dbb      	ldrb	r3, [r7, #22]
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2083      	movs	r0, #131	@ 0x83
 8002b2e:	f7ff fd97 	bl	8002660 <i2c_write_addr8_data8>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 8002b44:	2107      	movs	r1, #7
 8002b46:	20ff      	movs	r0, #255	@ 0xff
 8002b48:	f7ff fd8a 	bl	8002660 <i2c_write_addr8_data8>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2081      	movs	r0, #129	@ 0x81
 8002b62:	f7ff fd7d 	bl	8002660 <i2c_write_addr8_data8>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2080      	movs	r0, #128	@ 0x80
 8002b7c:	f7ff fd70 	bl	8002660 <i2c_write_addr8_data8>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	f083 0301 	eor.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <get_spad_info_from_nvm+0x110>
      return false;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e0c1      	b.n	8002d26 <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 8002ba2:	216b      	movs	r1, #107	@ 0x6b
 8002ba4:	2094      	movs	r0, #148	@ 0x94
 8002ba6:	f7ff fd5b 	bl	8002660 <i2c_write_addr8_data8>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <get_spad_info_from_nvm+0x13a>
        return false;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e0ac      	b.n	8002d26 <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 8002bcc:	f7ff ff28 	bl	8002a20 <read_strobe>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <get_spad_info_from_nvm+0x14e>
        return false;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e0a2      	b.n	8002d26 <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4619      	mov	r1, r3
 8002be6:	2090      	movs	r0, #144	@ 0x90
 8002be8:	f7ff fd6a 	bl	80026c0 <i2c_read_addr8_data32>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	f083 0301 	eor.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <get_spad_info_from_nvm+0x17c>
        return false;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e08b      	b.n	8002d26 <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	0bdb      	lsrs	r3, r3, #15
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2081      	movs	r0, #129	@ 0x81
 8002c32:	f7ff fd15 	bl	8002660 <i2c_write_addr8_data8>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002c48:	2106      	movs	r1, #6
 8002c4a:	20ff      	movs	r0, #255	@ 0xff
 8002c4c:	f7ff fd08 	bl	8002660 <i2c_write_addr8_data8>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 8002c62:	f107 0316 	add.w	r3, r7, #22
 8002c66:	4619      	mov	r1, r3
 8002c68:	2083      	movs	r0, #131	@ 0x83
 8002c6a:	f7ff fcb9 	bl	80025e0 <i2c_read_addr8_data8>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8002c80:	7dbb      	ldrb	r3, [r7, #22]
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2083      	movs	r0, #131	@ 0x83
 8002c8c:	f7ff fce8 	bl	8002660 <i2c_write_addr8_data8>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	20ff      	movs	r0, #255	@ 0xff
 8002ca6:	f7ff fcdb 	bl	8002660 <i2c_write_addr8_data8>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7ff fcce 	bl	8002660 <i2c_write_addr8_data8>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	20ff      	movs	r0, #255	@ 0xff
 8002cda:	f7ff fcc1 	bl	8002660 <i2c_write_addr8_data8>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2080      	movs	r0, #128	@ 0x80
 8002cf4:	f7ff fcb4 	bl	8002660 <i2c_write_addr8_data8>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8002d0a:	2206      	movs	r2, #6
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	20b0      	movs	r0, #176	@ 0xb0
 8002d10:	f7ff fd86 	bl	8002820 <i2c_read_addr8_bytes>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <get_spad_info_from_nvm+0x292>
        return false;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <get_spad_info_from_nvm+0x294>
    }
    return success;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b08c      	sub	sp, #48	@ 0x30
 8002d32:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8002d5a:	f107 0208 	add.w	r2, r7, #8
 8002d5e:	1db9      	adds	r1, r7, #6
 8002d60:	1dfb      	adds	r3, r7, #7
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fe95 	bl	8002a92 <get_spad_info_from_nvm>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <set_spads_from_nvm+0x4a>
        return false;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e0c7      	b.n	8002f08 <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7c:	e00b      	b.n	8002d96 <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	3301      	adds	r3, #1
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	ddf0      	ble.n	8002d7e <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	20ff      	movs	r0, #255	@ 0xff
 8002da0:	f7ff fc5e 	bl	8002660 <i2c_write_addr8_data8>
 8002da4:	4603      	mov	r3, r0
 8002da6:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002da8:	2100      	movs	r1, #0
 8002daa:	204f      	movs	r0, #79	@ 0x4f
 8002dac:	f7ff fc58 	bl	8002660 <i2c_write_addr8_data8>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	7ffb      	ldrb	r3, [r7, #31]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002dc2:	212c      	movs	r1, #44	@ 0x2c
 8002dc4:	204e      	movs	r0, #78	@ 0x4e
 8002dc6:	f7ff fc4b 	bl	8002660 <i2c_write_addr8_data8>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	20ff      	movs	r0, #255	@ 0xff
 8002de0:	f7ff fc3e 	bl	8002660 <i2c_write_addr8_data8>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8002df6:	21b4      	movs	r1, #180	@ 0xb4
 8002df8:	20b6      	movs	r0, #182	@ 0xb6
 8002dfa:	f7ff fc31 	bl	8002660 <i2c_write_addr8_data8>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8002e10:	7ffb      	ldrb	r3, [r7, #31]
 8002e12:	f083 0301 	eor.w	r3, r3, #1
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <set_spads_from_nvm+0xf2>
        return false;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e073      	b.n	8002f08 <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8002e20:	79bb      	ldrb	r3, [r7, #6]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <set_spads_from_nvm+0xfc>
 8002e26:	230c      	movs	r3, #12
 8002e28:	e000      	b.n	8002e2c <set_spads_from_nvm+0xfe>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e32:	e04d      	b.n	8002ed0 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	e03d      	b.n	8002eb6 <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	6a3a      	ldr	r2, [r7, #32]
 8002e40:	4413      	add	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b2b      	cmp	r3, #43	@ 0x2b
 8002e48:	dd01      	ble.n	8002e4e <set_spads_from_nvm+0x120>
                return false;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e05c      	b.n	8002f08 <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d032      	beq.n	8002ebe <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8002e58:	7fbb      	ldrb	r3, [r7, #30]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	db26      	blt.n	8002eae <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8002e60:	f107 0208 	add.w	r2, r7, #8
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	fa42 f303 	asr.w	r3, r2, r3
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01a      	beq.n	8002eb0 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 8002e7a:	f107 0210 	add.w	r2, r7, #16
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b25a      	sxtb	r2, r3
 8002e86:	2101      	movs	r1, #1
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	b2d9      	uxtb	r1, r3
 8002e96:	f107 0210 	add.w	r2, r7, #16
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	4413      	add	r3, r2
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 8002ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002eac:	e000      	b.n	8002eb0 <set_spads_from_nvm+0x182>
                continue;
 8002eae:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	ddbe      	ble.n	8002e3a <set_spads_from_nvm+0x10c>
 8002ebc:	e000      	b.n	8002ec0 <set_spads_from_nvm+0x192>
                break;
 8002ebe:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d006      	beq.n	8002ed8 <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	3301      	adds	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	ddae      	ble.n	8002e34 <set_spads_from_nvm+0x106>
 8002ed6:	e000      	b.n	8002eda <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 8002ed8:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <set_spads_from_nvm+0x1ba>
        return false;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e00f      	b.n	8002f08 <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	2206      	movs	r2, #6
 8002eee:	4619      	mov	r1, r3
 8002ef0:	20b0      	movs	r0, #176	@ 0xb0
 8002ef2:	f7ff fc33 	bl	800275c <i2c_write_addr8_bytes>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <set_spads_from_nvm+0x1d8>
        return false;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <set_spads_from_nvm+0x1da>
    }

    return true;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3730      	adds	r7, #48	@ 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002f16:	2101      	movs	r1, #1
 8002f18:	20ff      	movs	r0, #255	@ 0xff
 8002f1a:	f7ff fba1 	bl	8002660 <i2c_write_addr8_data8>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002f22:	2100      	movs	r1, #0
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff fb9b 	bl	8002660 <i2c_write_addr8_data8>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	20ff      	movs	r0, #255	@ 0xff
 8002f40:	f7ff fb8e 	bl	8002660 <i2c_write_addr8_data8>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8002f56:	2100      	movs	r1, #0
 8002f58:	2009      	movs	r0, #9
 8002f5a:	f7ff fb81 	bl	8002660 <i2c_write_addr8_data8>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8002f70:	2100      	movs	r1, #0
 8002f72:	2010      	movs	r0, #16
 8002f74:	f7ff fb74 	bl	8002660 <i2c_write_addr8_data8>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	2011      	movs	r0, #17
 8002f8e:	f7ff fb67 	bl	8002660 <i2c_write_addr8_data8>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2024      	movs	r0, #36	@ 0x24
 8002fa8:	f7ff fb5a 	bl	8002660 <i2c_write_addr8_data8>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 8002fbe:	21ff      	movs	r1, #255	@ 0xff
 8002fc0:	2025      	movs	r0, #37	@ 0x25
 8002fc2:	f7ff fb4d 	bl	8002660 <i2c_write_addr8_data8>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2075      	movs	r0, #117	@ 0x75
 8002fdc:	f7ff fb40 	bl	8002660 <i2c_write_addr8_data8>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	20ff      	movs	r0, #255	@ 0xff
 8002ff6:	f7ff fb33 	bl	8002660 <i2c_write_addr8_data8>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 800300c:	212c      	movs	r1, #44	@ 0x2c
 800300e:	204e      	movs	r0, #78	@ 0x4e
 8003010:	f7ff fb26 	bl	8002660 <i2c_write_addr8_data8>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 8003026:	2100      	movs	r1, #0
 8003028:	2048      	movs	r0, #72	@ 0x48
 800302a:	f7ff fb19 	bl	8002660 <i2c_write_addr8_data8>
 800302e:	4603      	mov	r3, r0
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8003040:	2120      	movs	r1, #32
 8003042:	2030      	movs	r0, #48	@ 0x30
 8003044:	f7ff fb0c 	bl	8002660 <i2c_write_addr8_data8>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800305a:	2100      	movs	r1, #0
 800305c:	20ff      	movs	r0, #255	@ 0xff
 800305e:	f7ff faff 	bl	8002660 <i2c_write_addr8_data8>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 8003074:	2109      	movs	r1, #9
 8003076:	2030      	movs	r0, #48	@ 0x30
 8003078:	f7ff faf2 	bl	8002660 <i2c_write_addr8_data8>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 800308e:	2100      	movs	r1, #0
 8003090:	2054      	movs	r0, #84	@ 0x54
 8003092:	f7ff fae5 	bl	8002660 <i2c_write_addr8_data8>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80030a8:	2104      	movs	r1, #4
 80030aa:	2031      	movs	r0, #49	@ 0x31
 80030ac:	f7ff fad8 	bl	8002660 <i2c_write_addr8_data8>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 80030c2:	2103      	movs	r1, #3
 80030c4:	2032      	movs	r0, #50	@ 0x32
 80030c6:	f7ff facb 	bl	8002660 <i2c_write_addr8_data8>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 80030dc:	2183      	movs	r1, #131	@ 0x83
 80030de:	2040      	movs	r0, #64	@ 0x40
 80030e0:	f7ff fabe 	bl	8002660 <i2c_write_addr8_data8>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 80030f6:	2125      	movs	r1, #37	@ 0x25
 80030f8:	2046      	movs	r0, #70	@ 0x46
 80030fa:	f7ff fab1 	bl	8002660 <i2c_write_addr8_data8>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8003110:	2100      	movs	r1, #0
 8003112:	2060      	movs	r0, #96	@ 0x60
 8003114:	f7ff faa4 	bl	8002660 <i2c_write_addr8_data8>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 800312a:	2100      	movs	r1, #0
 800312c:	2027      	movs	r0, #39	@ 0x27
 800312e:	f7ff fa97 	bl	8002660 <i2c_write_addr8_data8>
 8003132:	4603      	mov	r3, r0
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8003144:	2106      	movs	r1, #6
 8003146:	2050      	movs	r0, #80	@ 0x50
 8003148:	f7ff fa8a 	bl	8002660 <i2c_write_addr8_data8>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 800315e:	2100      	movs	r1, #0
 8003160:	2051      	movs	r0, #81	@ 0x51
 8003162:	f7ff fa7d 	bl	8002660 <i2c_write_addr8_data8>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 8003178:	2196      	movs	r1, #150	@ 0x96
 800317a:	2052      	movs	r0, #82	@ 0x52
 800317c:	f7ff fa70 	bl	8002660 <i2c_write_addr8_data8>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 8003192:	2108      	movs	r1, #8
 8003194:	2056      	movs	r0, #86	@ 0x56
 8003196:	f7ff fa63 	bl	8002660 <i2c_write_addr8_data8>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 80031ac:	2130      	movs	r1, #48	@ 0x30
 80031ae:	2057      	movs	r0, #87	@ 0x57
 80031b0:	f7ff fa56 	bl	8002660 <i2c_write_addr8_data8>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 80031c6:	2100      	movs	r1, #0
 80031c8:	2061      	movs	r0, #97	@ 0x61
 80031ca:	f7ff fa49 	bl	8002660 <i2c_write_addr8_data8>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 80031e0:	2100      	movs	r1, #0
 80031e2:	2062      	movs	r0, #98	@ 0x62
 80031e4:	f7ff fa3c 	bl	8002660 <i2c_write_addr8_data8>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 80031fa:	2100      	movs	r1, #0
 80031fc:	2064      	movs	r0, #100	@ 0x64
 80031fe:	f7ff fa2f 	bl	8002660 <i2c_write_addr8_data8>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 8003214:	2100      	movs	r1, #0
 8003216:	2065      	movs	r0, #101	@ 0x65
 8003218:	f7ff fa22 	bl	8002660 <i2c_write_addr8_data8>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 800322e:	21a0      	movs	r1, #160	@ 0xa0
 8003230:	2066      	movs	r0, #102	@ 0x66
 8003232:	f7ff fa15 	bl	8002660 <i2c_write_addr8_data8>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003248:	2101      	movs	r1, #1
 800324a:	20ff      	movs	r0, #255	@ 0xff
 800324c:	f7ff fa08 	bl	8002660 <i2c_write_addr8_data8>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 8003262:	2132      	movs	r1, #50	@ 0x32
 8003264:	2022      	movs	r0, #34	@ 0x22
 8003266:	f7ff f9fb 	bl	8002660 <i2c_write_addr8_data8>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 800327c:	2114      	movs	r1, #20
 800327e:	2047      	movs	r0, #71	@ 0x47
 8003280:	f7ff f9ee 	bl	8002660 <i2c_write_addr8_data8>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 8003296:	21ff      	movs	r1, #255	@ 0xff
 8003298:	2049      	movs	r0, #73	@ 0x49
 800329a:	f7ff f9e1 	bl	8002660 <i2c_write_addr8_data8>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 80032b0:	2100      	movs	r1, #0
 80032b2:	204a      	movs	r0, #74	@ 0x4a
 80032b4:	f7ff f9d4 	bl	8002660 <i2c_write_addr8_data8>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80032ca:	2100      	movs	r1, #0
 80032cc:	20ff      	movs	r0, #255	@ 0xff
 80032ce:	f7ff f9c7 	bl	8002660 <i2c_write_addr8_data8>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 80032e4:	210a      	movs	r1, #10
 80032e6:	207a      	movs	r0, #122	@ 0x7a
 80032e8:	f7ff f9ba 	bl	8002660 <i2c_write_addr8_data8>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 80032fe:	2100      	movs	r1, #0
 8003300:	207b      	movs	r0, #123	@ 0x7b
 8003302:	f7ff f9ad 	bl	8002660 <i2c_write_addr8_data8>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 8003318:	2121      	movs	r1, #33	@ 0x21
 800331a:	2078      	movs	r0, #120	@ 0x78
 800331c:	f7ff f9a0 	bl	8002660 <i2c_write_addr8_data8>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003332:	2101      	movs	r1, #1
 8003334:	20ff      	movs	r0, #255	@ 0xff
 8003336:	f7ff f993 	bl	8002660 <i2c_write_addr8_data8>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 800334c:	2134      	movs	r1, #52	@ 0x34
 800334e:	2023      	movs	r0, #35	@ 0x23
 8003350:	f7ff f986 	bl	8002660 <i2c_write_addr8_data8>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 8003366:	2100      	movs	r1, #0
 8003368:	2042      	movs	r0, #66	@ 0x42
 800336a:	f7ff f979 	bl	8002660 <i2c_write_addr8_data8>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8003380:	21ff      	movs	r1, #255	@ 0xff
 8003382:	2044      	movs	r0, #68	@ 0x44
 8003384:	f7ff f96c 	bl	8002660 <i2c_write_addr8_data8>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 800339a:	2126      	movs	r1, #38	@ 0x26
 800339c:	2045      	movs	r0, #69	@ 0x45
 800339e:	f7ff f95f 	bl	8002660 <i2c_write_addr8_data8>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 80033b4:	2105      	movs	r1, #5
 80033b6:	2046      	movs	r0, #70	@ 0x46
 80033b8:	f7ff f952 	bl	8002660 <i2c_write_addr8_data8>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 80033ce:	2140      	movs	r1, #64	@ 0x40
 80033d0:	2040      	movs	r0, #64	@ 0x40
 80033d2:	f7ff f945 	bl	8002660 <i2c_write_addr8_data8>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 80033e8:	2106      	movs	r1, #6
 80033ea:	200e      	movs	r0, #14
 80033ec:	f7ff f938 	bl	8002660 <i2c_write_addr8_data8>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 8003402:	211a      	movs	r1, #26
 8003404:	2020      	movs	r0, #32
 8003406:	f7ff f92b 	bl	8002660 <i2c_write_addr8_data8>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 800341c:	2140      	movs	r1, #64	@ 0x40
 800341e:	2043      	movs	r0, #67	@ 0x43
 8003420:	f7ff f91e 	bl	8002660 <i2c_write_addr8_data8>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003436:	2100      	movs	r1, #0
 8003438:	20ff      	movs	r0, #255	@ 0xff
 800343a:	f7ff f911 	bl	8002660 <i2c_write_addr8_data8>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003450:	2103      	movs	r1, #3
 8003452:	2034      	movs	r0, #52	@ 0x34
 8003454:	f7ff f904 	bl	8002660 <i2c_write_addr8_data8>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 800346a:	2144      	movs	r1, #68	@ 0x44
 800346c:	2035      	movs	r0, #53	@ 0x35
 800346e:	f7ff f8f7 	bl	8002660 <i2c_write_addr8_data8>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003484:	2101      	movs	r1, #1
 8003486:	20ff      	movs	r0, #255	@ 0xff
 8003488:	f7ff f8ea 	bl	8002660 <i2c_write_addr8_data8>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 800349e:	2104      	movs	r1, #4
 80034a0:	2031      	movs	r0, #49	@ 0x31
 80034a2:	f7ff f8dd 	bl	8002660 <i2c_write_addr8_data8>
 80034a6:	4603      	mov	r3, r0
 80034a8:	461a      	mov	r2, r3
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 80034b8:	2109      	movs	r1, #9
 80034ba:	204b      	movs	r0, #75	@ 0x4b
 80034bc:	f7ff f8d0 	bl	8002660 <i2c_write_addr8_data8>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 80034d2:	2105      	movs	r1, #5
 80034d4:	204c      	movs	r0, #76	@ 0x4c
 80034d6:	f7ff f8c3 	bl	8002660 <i2c_write_addr8_data8>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 80034ec:	2104      	movs	r1, #4
 80034ee:	204d      	movs	r0, #77	@ 0x4d
 80034f0:	f7ff f8b6 	bl	8002660 <i2c_write_addr8_data8>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003506:	2100      	movs	r1, #0
 8003508:	20ff      	movs	r0, #255	@ 0xff
 800350a:	f7ff f8a9 	bl	8002660 <i2c_write_addr8_data8>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 8003520:	2100      	movs	r1, #0
 8003522:	2044      	movs	r0, #68	@ 0x44
 8003524:	f7ff f89c 	bl	8002660 <i2c_write_addr8_data8>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 800353a:	2120      	movs	r1, #32
 800353c:	2045      	movs	r0, #69	@ 0x45
 800353e:	f7ff f88f 	bl	8002660 <i2c_write_addr8_data8>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 8003554:	2108      	movs	r1, #8
 8003556:	2047      	movs	r0, #71	@ 0x47
 8003558:	f7ff f882 	bl	8002660 <i2c_write_addr8_data8>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 800356e:	2128      	movs	r1, #40	@ 0x28
 8003570:	2048      	movs	r0, #72	@ 0x48
 8003572:	f7ff f875 	bl	8002660 <i2c_write_addr8_data8>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 8003588:	2100      	movs	r1, #0
 800358a:	2067      	movs	r0, #103	@ 0x67
 800358c:	f7ff f868 	bl	8002660 <i2c_write_addr8_data8>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 80035a2:	2104      	movs	r1, #4
 80035a4:	2070      	movs	r0, #112	@ 0x70
 80035a6:	f7ff f85b 	bl	8002660 <i2c_write_addr8_data8>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 80035bc:	2101      	movs	r1, #1
 80035be:	2071      	movs	r0, #113	@ 0x71
 80035c0:	f7ff f84e 	bl	8002660 <i2c_write_addr8_data8>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 80035d6:	21fe      	movs	r1, #254	@ 0xfe
 80035d8:	2072      	movs	r0, #114	@ 0x72
 80035da:	f7ff f841 	bl	8002660 <i2c_write_addr8_data8>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 80035f0:	2100      	movs	r1, #0
 80035f2:	2076      	movs	r0, #118	@ 0x76
 80035f4:	f7ff f834 	bl	8002660 <i2c_write_addr8_data8>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 800360a:	2100      	movs	r1, #0
 800360c:	2077      	movs	r0, #119	@ 0x77
 800360e:	f7ff f827 	bl	8002660 <i2c_write_addr8_data8>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003624:	2101      	movs	r1, #1
 8003626:	20ff      	movs	r0, #255	@ 0xff
 8003628:	f7ff f81a 	bl	8002660 <i2c_write_addr8_data8>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 800363e:	2101      	movs	r1, #1
 8003640:	200d      	movs	r0, #13
 8003642:	f7ff f80d 	bl	8002660 <i2c_write_addr8_data8>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003658:	2100      	movs	r1, #0
 800365a:	20ff      	movs	r0, #255	@ 0xff
 800365c:	f7ff f800 	bl	8002660 <i2c_write_addr8_data8>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003672:	2101      	movs	r1, #1
 8003674:	2080      	movs	r0, #128	@ 0x80
 8003676:	f7fe fff3 	bl	8002660 <i2c_write_addr8_data8>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	4013      	ands	r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 800368c:	21f8      	movs	r1, #248	@ 0xf8
 800368e:	2001      	movs	r0, #1
 8003690:	f7fe ffe6 	bl	8002660 <i2c_write_addr8_data8>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80036a6:	2101      	movs	r1, #1
 80036a8:	20ff      	movs	r0, #255	@ 0xff
 80036aa:	f7fe ffd9 	bl	8002660 <i2c_write_addr8_data8>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 80036c0:	2101      	movs	r1, #1
 80036c2:	208e      	movs	r0, #142	@ 0x8e
 80036c4:	f7fe ffcc 	bl	8002660 <i2c_write_addr8_data8>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80036da:	2101      	movs	r1, #1
 80036dc:	2000      	movs	r0, #0
 80036de:	f7fe ffbf 	bl	8002660 <i2c_write_addr8_data8>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf14      	ite	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	2300      	moveq	r3, #0
 80036f2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80036f4:	2100      	movs	r1, #0
 80036f6:	20ff      	movs	r0, #255	@ 0xff
 80036f8:	f7fe ffb2 	bl	8002660 <i2c_write_addr8_data8>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 800370e:	2100      	movs	r1, #0
 8003710:	2080      	movs	r0, #128	@ 0x80
 8003712:	f7fe ffa5 	bl	8002660 <i2c_write_addr8_data8>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	71fb      	strb	r3, [r7, #7]
    return success;
 8003728:	79fb      	ldrb	r3, [r7, #7]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <configure_interrupt>:

static bool configure_interrupt()
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 8003738:	2104      	movs	r1, #4
 800373a:	200a      	movs	r0, #10
 800373c:	f7fe ff90 	bl	8002660 <i2c_write_addr8_data8>
 8003740:	4603      	mov	r3, r0
 8003742:	f083 0301 	eor.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <configure_interrupt+0x1e>
        return false;
 800374c:	2300      	movs	r3, #0
 800374e:	e02d      	b.n	80037ac <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	4619      	mov	r1, r3
 8003758:	2084      	movs	r0, #132	@ 0x84
 800375a:	f7fe ff41 	bl	80025e0 <i2c_read_addr8_data8>
 800375e:	4603      	mov	r3, r0
 8003760:	f083 0301 	eor.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <configure_interrupt+0x3c>
        return false;
 800376a:	2300      	movs	r3, #0
 800376c:	e01e      	b.n	80037ac <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f023 0310 	bic.w	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	4619      	mov	r1, r3
 800377c:	2084      	movs	r0, #132	@ 0x84
 800377e:	f7fe ff6f 	bl	8002660 <i2c_write_addr8_data8>
 8003782:	4603      	mov	r3, r0
 8003784:	f083 0301 	eor.w	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <configure_interrupt+0x60>
        return false;
 800378e:	2300      	movs	r3, #0
 8003790:	e00c      	b.n	80037ac <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 8003792:	2101      	movs	r1, #1
 8003794:	200b      	movs	r0, #11
 8003796:	f7fe ff63 	bl	8002660 <i2c_write_addr8_data8>
 800379a:	4603      	mov	r3, r0
 800379c:	f083 0301 	eor.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <configure_interrupt+0x78>
        return false;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <configure_interrupt+0x7a>
    }
    return true;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	4619      	mov	r1, r3
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7fe ff4c 	bl	8002660 <i2c_write_addr8_data8>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 80037d6:	f7ff faaa 	bl	8002d2e <set_spads_from_nvm>
 80037da:	4603      	mov	r3, r0
 80037dc:	f083 0301 	eor.w	r3, r3, #1
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <static_init+0x18>
        return false;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e01f      	b.n	800382a <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 80037ea:	f7ff fb91 	bl	8002f10 <load_default_tuning_settings>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f083 0301 	eor.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <static_init+0x2c>
        return false;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e015      	b.n	800382a <static_init+0x58>
    }

    if (!configure_interrupt()) {
 80037fe:	f7ff ff98 	bl	8003732 <configure_interrupt>
 8003802:	4603      	mov	r3, r0
 8003804:	f083 0301 	eor.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <static_init+0x40>
        return false;
 800380e:	2300      	movs	r3, #0
 8003810:	e00b      	b.n	800382a <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 8003812:	20e8      	movs	r0, #232	@ 0xe8
 8003814:	f7ff ffce 	bl	80037b4 <set_sequence_steps_enabled>
 8003818:	4603      	mov	r3, r0
 800381a:	f083 0301 	eor.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <static_init+0x58>
    }

    return true;
 8003828:	2301      	movs	r3, #1
}
 800382a:	4618      	mov	r0, r3
 800382c:	bd80      	pop	{r7, pc}

0800382e <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <perform_single_ref_calibration+0x1e>
 8003846:	2b01      	cmp	r3, #1
 8003848:	d005      	beq.n	8003856 <perform_single_ref_calibration+0x28>
 800384a:	e009      	b.n	8003860 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 800384c:	2301      	movs	r3, #1
 800384e:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003850:	2341      	movs	r3, #65	@ 0x41
 8003852:	73fb      	strb	r3, [r7, #15]
        break;
 8003854:	e004      	b.n	8003860 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8003856:	2302      	movs	r3, #2
 8003858:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
        break;
 800385e:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8003860:	7bbb      	ldrb	r3, [r7, #14]
 8003862:	4619      	mov	r1, r3
 8003864:	2001      	movs	r0, #1
 8003866:	f7fe fefb 	bl	8002660 <i2c_write_addr8_data8>
 800386a:	4603      	mov	r3, r0
 800386c:	f083 0301 	eor.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <perform_single_ref_calibration+0x4c>
        return false;
 8003876:	2300      	movs	r3, #0
 8003878:	e041      	b.n	80038fe <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	4619      	mov	r1, r3
 800387e:	2000      	movs	r0, #0
 8003880:	f7fe feee 	bl	8002660 <i2c_write_addr8_data8>
 8003884:	4603      	mov	r3, r0
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <perform_single_ref_calibration+0x66>
        return false;
 8003890:	2300      	movs	r3, #0
 8003892:	e034      	b.n	80038fe <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	733b      	strb	r3, [r7, #12]
    bool success = false;
 8003898:	2300      	movs	r3, #0
 800389a:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4619      	mov	r1, r3
 80038a2:	2013      	movs	r0, #19
 80038a4:	f7fe fe9c 	bl	80025e0 <i2c_read_addr8_data8>
 80038a8:	4603      	mov	r3, r0
 80038aa:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 80038ac:	7b7b      	ldrb	r3, [r7, #13]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <perform_single_ref_calibration+0x8e>
 80038b2:	7b3b      	ldrb	r3, [r7, #12]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <perform_single_ref_calibration+0x6e>
    if (!success) {
 80038bc:	7b7b      	ldrb	r3, [r7, #13]
 80038be:	f083 0301 	eor.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <perform_single_ref_calibration+0x9e>
        return false;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e018      	b.n	80038fe <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80038cc:	2101      	movs	r1, #1
 80038ce:	200b      	movs	r0, #11
 80038d0:	f7fe fec6 	bl	8002660 <i2c_write_addr8_data8>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f083 0301 	eor.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <perform_single_ref_calibration+0xb6>
        return false;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e00c      	b.n	80038fe <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 80038e4:	2100      	movs	r1, #0
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7fe feba 	bl	8002660 <i2c_write_addr8_data8>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <perform_single_ref_calibration+0xce>
        return false;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <perform_single_ref_calibration+0xd0>
    }
    return true;
 80038fc:	2301      	movs	r3, #1
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 8003906:	b580      	push	{r7, lr}
 8003908:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 800390a:	2000      	movs	r0, #0
 800390c:	f7ff ff8f 	bl	800382e <perform_single_ref_calibration>
 8003910:	4603      	mov	r3, r0
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <perform_ref_calibration+0x1a>
        return false;
 800391c:	2300      	movs	r3, #0
 800391e:	e016      	b.n	800394e <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 8003920:	2001      	movs	r0, #1
 8003922:	f7ff ff84 	bl	800382e <perform_single_ref_calibration>
 8003926:	4603      	mov	r3, r0
 8003928:	f083 0301 	eor.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <perform_ref_calibration+0x30>
        return false;
 8003932:	2300      	movs	r3, #0
 8003934:	e00b      	b.n	800394e <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 8003936:	20e8      	movs	r0, #232	@ 0xe8
 8003938:	f7ff ff3c 	bl	80037b4 <set_sequence_steps_enabled>
 800393c:	4603      	mov	r3, r0
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <perform_ref_calibration+0x48>
    }
    return true;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	bd80      	pop	{r7, pc}

08003952 <configure_address>:

static bool configure_address(uint8_t addr)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
    /* 7-bit address */
    return i2c_write_addr8_data8(REG_SLAVE_DEVICE_ADDRESS, addr & 0x7F);
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	208a      	movs	r0, #138	@ 0x8a
 8003968:	f7fe fe7a 	bl	8002660 <i2c_write_addr8_data8>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <set_hardware_standby>:

/**
 * Sets the sensor in hardware standby by flipping the XSHUT pin.
 */
static void set_hardware_standby(vl53l0x_idx_t idx, bool enable)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	460a      	mov	r2, r1
 8003982:	71fb      	strb	r3, [r7, #7]
 8003984:	4613      	mov	r3, r2
 8003986:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOG, vl53l0x_infos[idx].xshut_gpio, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <set_hardware_standby+0x34>)
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	8859      	ldrh	r1, [r3, #2]
 8003992:	79bb      	ldrb	r3, [r7, #6]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	4804      	ldr	r0, [pc, #16]	@ (80039b0 <set_hardware_standby+0x38>)
 800399e:	f003 f899 	bl	8006ad4 <HAL_GPIO_WritePin>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	0801f6f0 	.word	0x0801f6f0
 80039b0:	58021800 	.word	0x58021800

080039b4 <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
    gpio_init();
    gpio_set_output(GPIO_XSHUT_FIRST, false);
    gpio_set_output(GPIO_XSHUT_SECOND, false);
    gpio_set_output(GPIO_XSHUT_THIRD, false);
    */
    HAL_GPIO_WritePin(GPIOG, xshut1_Pin, GPIO_PIN_RESET);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2120      	movs	r1, #32
 80039bc:	4809      	ldr	r0, [pc, #36]	@ (80039e4 <configure_gpio+0x30>)
 80039be:	f003 f889 	bl	8006ad4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut2_Pin, GPIO_PIN_RESET);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2110      	movs	r1, #16
 80039c6:	4807      	ldr	r0, [pc, #28]	@ (80039e4 <configure_gpio+0x30>)
 80039c8:	f003 f884 	bl	8006ad4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut3_Pin, GPIO_PIN_RESET);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2108      	movs	r1, #8
 80039d0:	4804      	ldr	r0, [pc, #16]	@ (80039e4 <configure_gpio+0x30>)
 80039d2:	f003 f87f 	bl	8006ad4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut4_Pin, GPIO_PIN_RESET);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2104      	movs	r1, #4
 80039da:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <configure_gpio+0x30>)
 80039dc:	f003 f87a 	bl	8006ad4 <HAL_GPIO_WritePin>
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	58021800 	.word	0x58021800

080039e8 <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
    set_hardware_standby(idx, false);
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ffbe 	bl	8003978 <set_hardware_standby>
    i2c_set_slave_address(VL53L0X_DEFAULT_ADDRESS);
 80039fc:	2029      	movs	r0, #41	@ 0x29
 80039fe:	f7fe fddf 	bl	80025c0 <i2c_set_slave_address>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f000 f998 	bl	8003d38 <HAL_Delay>

    if (!device_is_booted()) {
 8003a08:	f7fe ff4c 	bl	80028a4 <device_is_booted>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <init_address+0x3a>
        my_printf("device is not booted\n");
 8003a18:	480d      	ldr	r0, [pc, #52]	@ (8003a50 <init_address+0x68>)
 8003a1a:	f7fe fda1 	bl	8002560 <my_printf>
        return false;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e012      	b.n	8003a48 <init_address+0x60>
    }

    if (!configure_address(vl53l0x_infos[idx].addr)) {
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	4a0b      	ldr	r2, [pc, #44]	@ (8003a54 <init_address+0x6c>)
 8003a26:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff91 	bl	8003952 <configure_address>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f083 0301 	eor.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <init_address+0x5e>
        my_printf("configure address failed\n");
 8003a3c:	4806      	ldr	r0, [pc, #24]	@ (8003a58 <init_address+0x70>)
 8003a3e:	f7fe fd8f 	bl	8002560 <my_printf>
        return false;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <init_address+0x60>
    }
    return true;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	0801e5a4 	.word	0x0801e5a4
 8003a54:	0801f6f0 	.word	0x0801f6f0
 8003a58:	0801e5bc 	.word	0x0801e5bc

08003a5c <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 8003a60:	f7ff ffa8 	bl	80039b4 <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 8003a64:	2000      	movs	r0, #0
 8003a66:	f7ff ffbf 	bl	80039e8 <init_address>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 8003a76:	4814      	ldr	r0, [pc, #80]	@ (8003ac8 <init_addresses+0x6c>)
 8003a78:	f7fe fd72 	bl	8002560 <my_printf>
        return false;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e021      	b.n	8003ac4 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7ff ffb1 	bl	80039e8 <init_address>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <init_addresses+0x3a>
        return false;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e016      	b.n	8003ac4 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_THIRD)) {
 8003a96:	2002      	movs	r0, #2
 8003a98:	f7ff ffa6 	bl	80039e8 <init_address>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <init_addresses+0x50>
        return false;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e00b      	b.n	8003ac4 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_FOURTH)) {
 8003aac:	2003      	movs	r0, #3
 8003aae:	f7ff ff9b 	bl	80039e8 <init_address>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <init_addresses+0x66>
        return false;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <init_addresses+0x68>
    }
    return true;
 8003ac2:	2301      	movs	r3, #1
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	0801e5d8 	.word	0x0801e5d8

08003acc <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
    i2c_set_slave_address(vl53l0x_infos[idx].addr);
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	4a14      	ldr	r2, [pc, #80]	@ (8003b2c <init_config+0x60>)
 8003ada:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fd6e 	bl	80025c0 <i2c_set_slave_address>
    if (!data_init()) {
 8003ae4:	f7fe ff0e 	bl	8002904 <data_init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <init_config+0x2c>
        return false;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e014      	b.n	8003b22 <init_config+0x56>
    }
    if (!static_init()) {
 8003af8:	f7ff fe6b 	bl	80037d2 <static_init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f083 0301 	eor.w	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <init_config+0x40>
        return false;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e00a      	b.n	8003b22 <init_config+0x56>
    }
    if (!perform_ref_calibration()) {
 8003b0c:	f7ff fefb 	bl	8003906 <perform_ref_calibration>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f083 0301 	eor.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <init_config+0x54>
        return false;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <init_config+0x56>
    }
    return true;
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	0801f6f0 	.word	0x0801f6f0

08003b30 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8003b34:	f7ff ff92 	bl	8003a5c <init_addresses>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8003b44:	481b      	ldr	r0, [pc, #108]	@ (8003bb4 <vl53l0x_init+0x84>)
 8003b46:	f7fe fd0b 	bl	8002560 <my_printf>
        return false;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e02f      	b.n	8003bae <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7ff ffbc 	bl	8003acc <init_config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f083 0301 	eor.w	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8003b60:	4815      	ldr	r0, [pc, #84]	@ (8003bb8 <vl53l0x_init+0x88>)
 8003b62:	f7fe fcfd 	bl	8002560 <my_printf>
        return false;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e021      	b.n	8003bae <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7ff ffae 	bl	8003acc <init_config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f083 0301 	eor.w	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <vl53l0x_init+0x50>
        return false;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e016      	b.n	8003bae <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_THIRD)) {
 8003b80:	2002      	movs	r0, #2
 8003b82:	f7ff ffa3 	bl	8003acc <init_config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <vl53l0x_init+0x66>
        return false;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e00b      	b.n	8003bae <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FOURTH)) {
 8003b96:	2003      	movs	r0, #3
 8003b98:	f7ff ff98 	bl	8003acc <init_config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <vl53l0x_init+0x7c>
        return false;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <vl53l0x_init+0x7e>
    }
    return true;
 8003bac:	2301      	movs	r3, #1
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0801e5fc 	.word	0x0801e5fc
 8003bb8:	0801e610 	.word	0x0801e610

08003bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003bbc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003bf8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003bc0:	f7fe fcb6 	bl	8002530 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bc4:	f7fe fc24 	bl	8002410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc8:	480c      	ldr	r0, [pc, #48]	@ (8003bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bca:	490d      	ldr	r1, [pc, #52]	@ (8003c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003be0:	4c0a      	ldr	r4, [pc, #40]	@ (8003c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bee:	f019 fab7 	bl	801d160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bf2:	f7fc fdcb 	bl	800078c <main>
  bx  lr
 8003bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bf8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003bfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c00:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003c04:	08031820 	.word	0x08031820
  ldr r2, =_sbss
 8003c08:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8003c0c:	24008a78 	.word	0x24008a78

08003c10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <ADC3_IRQHandler>
	...

08003c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f000 f980 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c20:	f004 fefe 	bl	8008a20 <HAL_RCC_GetSysClockFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_Init+0x68>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4913      	ldr	r1, [pc, #76]	@ (8003c80 <HAL_Init+0x6c>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <HAL_Init+0x68>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a0e      	ldr	r2, [pc, #56]	@ (8003c80 <HAL_Init+0x6c>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	4a0b      	ldr	r2, [pc, #44]	@ (8003c84 <HAL_Init+0x70>)
 8003c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c58:	4a0b      	ldr	r2, [pc, #44]	@ (8003c88 <HAL_Init+0x74>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5e:	200f      	movs	r0, #15
 8003c60:	f000 f814 	bl	8003c8c <HAL_InitTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e002      	b.n	8003c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c6e:	f7fd ff17 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	0801f6e0 	.word	0x0801f6e0
 8003c84:	24000004 	.word	0x24000004
 8003c88:	24000000 	.word	0x24000000

08003c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_InitTick+0x60>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e021      	b.n	8003ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ca0:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_InitTick+0x64>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_InitTick+0x60>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f965 	bl	8003f86 <HAL_SYSTICK_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00e      	b.n	8003ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0f      	cmp	r3, #15
 8003cca:	d80a      	bhi.n	8003ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cd4:	f000 f92f 	bl	8003f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cd8:	4a06      	ldr	r2, [pc, #24]	@ (8003cf4 <HAL_InitTick+0x68>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2400000c 	.word	0x2400000c
 8003cf0:	24000000 	.word	0x24000000
 8003cf4:	24000008 	.word	0x24000008

08003cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_IncTick+0x20>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_IncTick+0x24>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_IncTick+0x24>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2400000c 	.word	0x2400000c
 8003d1c:	240084ac 	.word	0x240084ac

08003d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_GetTick+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	240084ac 	.word	0x240084ac

08003d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff ffee 	bl	8003d20 <HAL_GetTick>
 8003d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d50:	d005      	beq.n	8003d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d52:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <HAL_Delay+0x44>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5e:	bf00      	nop
 8003d60:	f7ff ffde 	bl	8003d20 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d8f7      	bhi.n	8003d60 <HAL_Delay+0x28>
  {
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2400000c 	.word	0x2400000c

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00
 8003dc4:	05fa0000 	.word	0x05fa0000

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db0b      	blt.n	8003e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4907      	ldr	r1, [pc, #28]	@ (8003e1c <__NVIC_EnableIRQ+0x38>)
 8003dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	db0a      	blt.n	8003e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	490c      	ldr	r1, [pc, #48]	@ (8003e6c <__NVIC_SetPriority+0x4c>)
 8003e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e48:	e00a      	b.n	8003e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <__NVIC_SetPriority+0x50>)
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	3b04      	subs	r3, #4
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	761a      	strb	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf28      	it	cs
 8003e92:	2304      	movcs	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d902      	bls.n	8003ea4 <NVIC_EncodePriority+0x30>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <NVIC_EncodePriority+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	4313      	orrs	r3, r2
         );
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f00:	f7ff ff8e 	bl	8003e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff29 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff40 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff90 	bl	8003e74 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5f 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff33 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa4 	bl	8003edc <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff feba 	bl	8003d20 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e312      	b.n	80045de <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a66      	ldr	r2, [pc, #408]	@ (8004158 <HAL_DMA_Init+0x1b8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_DMA_Init+0x1bc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a63      	ldr	r2, [pc, #396]	@ (8004160 <HAL_DMA_Init+0x1c0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a62      	ldr	r2, [pc, #392]	@ (8004164 <HAL_DMA_Init+0x1c4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a60      	ldr	r2, [pc, #384]	@ (8004168 <HAL_DMA_Init+0x1c8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5f      	ldr	r2, [pc, #380]	@ (800416c <HAL_DMA_Init+0x1cc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5d      	ldr	r2, [pc, #372]	@ (8004170 <HAL_DMA_Init+0x1d0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5c      	ldr	r2, [pc, #368]	@ (8004174 <HAL_DMA_Init+0x1d4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5a      	ldr	r2, [pc, #360]	@ (8004178 <HAL_DMA_Init+0x1d8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a59      	ldr	r2, [pc, #356]	@ (800417c <HAL_DMA_Init+0x1dc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a57      	ldr	r2, [pc, #348]	@ (8004180 <HAL_DMA_Init+0x1e0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a56      	ldr	r2, [pc, #344]	@ (8004184 <HAL_DMA_Init+0x1e4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a54      	ldr	r2, [pc, #336]	@ (8004188 <HAL_DMA_Init+0x1e8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a53      	ldr	r2, [pc, #332]	@ (800418c <HAL_DMA_Init+0x1ec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a51      	ldr	r2, [pc, #324]	@ (8004190 <HAL_DMA_Init+0x1f0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a50      	ldr	r2, [pc, #320]	@ (8004194 <HAL_DMA_Init+0x1f4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_DMA_Init+0xbc>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_DMA_Init+0xbe>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 813c 	beq.w	80042dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a37      	ldr	r2, [pc, #220]	@ (8004158 <HAL_DMA_Init+0x1b8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04a      	beq.n	8004114 <HAL_DMA_Init+0x174>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a36      	ldr	r2, [pc, #216]	@ (800415c <HAL_DMA_Init+0x1bc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d045      	beq.n	8004114 <HAL_DMA_Init+0x174>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a34      	ldr	r2, [pc, #208]	@ (8004160 <HAL_DMA_Init+0x1c0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d040      	beq.n	8004114 <HAL_DMA_Init+0x174>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a33      	ldr	r2, [pc, #204]	@ (8004164 <HAL_DMA_Init+0x1c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d03b      	beq.n	8004114 <HAL_DMA_Init+0x174>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a31      	ldr	r2, [pc, #196]	@ (8004168 <HAL_DMA_Init+0x1c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d036      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a30      	ldr	r2, [pc, #192]	@ (800416c <HAL_DMA_Init+0x1cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d031      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004170 <HAL_DMA_Init+0x1d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d02c      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2d      	ldr	r2, [pc, #180]	@ (8004174 <HAL_DMA_Init+0x1d4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d027      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <HAL_DMA_Init+0x1d8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2a      	ldr	r2, [pc, #168]	@ (800417c <HAL_DMA_Init+0x1dc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d01d      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <HAL_DMA_Init+0x1e0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <HAL_DMA_Init+0x1e4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a25      	ldr	r2, [pc, #148]	@ (8004188 <HAL_DMA_Init+0x1e8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a24      	ldr	r2, [pc, #144]	@ (800418c <HAL_DMA_Init+0x1ec>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_DMA_Init+0x174>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a22      	ldr	r2, [pc, #136]	@ (8004190 <HAL_DMA_Init+0x1f0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_DMA_Init+0x174>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <HAL_DMA_Init+0x1f4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_DMA_Init+0x186>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e007      	b.n	8004136 <HAL_DMA_Init+0x196>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004136:	e02f      	b.n	8004198 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004138:	f7ff fdf2 	bl	8003d20 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b05      	cmp	r3, #5
 8004144:	d928      	bls.n	8004198 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e242      	b.n	80045de <HAL_DMA_Init+0x63e>
 8004158:	40020010 	.word	0x40020010
 800415c:	40020028 	.word	0x40020028
 8004160:	40020040 	.word	0x40020040
 8004164:	40020058 	.word	0x40020058
 8004168:	40020070 	.word	0x40020070
 800416c:	40020088 	.word	0x40020088
 8004170:	400200a0 	.word	0x400200a0
 8004174:	400200b8 	.word	0x400200b8
 8004178:	40020410 	.word	0x40020410
 800417c:	40020428 	.word	0x40020428
 8004180:	40020440 	.word	0x40020440
 8004184:	40020458 	.word	0x40020458
 8004188:	40020470 	.word	0x40020470
 800418c:	40020488 	.word	0x40020488
 8004190:	400204a0 	.word	0x400204a0
 8004194:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1c8      	bne.n	8004138 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4b83      	ldr	r3, [pc, #524]	@ (80043c0 <HAL_DMA_Init+0x420>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d107      	bne.n	80041fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	4313      	orrs	r3, r2
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b28      	cmp	r3, #40	@ 0x28
 8004202:	d903      	bls.n	800420c <HAL_DMA_Init+0x26c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b2e      	cmp	r3, #46	@ 0x2e
 800420a:	d91f      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b3e      	cmp	r3, #62	@ 0x3e
 8004212:	d903      	bls.n	800421c <HAL_DMA_Init+0x27c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b42      	cmp	r3, #66	@ 0x42
 800421a:	d917      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b46      	cmp	r3, #70	@ 0x46
 8004222:	d903      	bls.n	800422c <HAL_DMA_Init+0x28c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b48      	cmp	r3, #72	@ 0x48
 800422a:	d90f      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b4e      	cmp	r3, #78	@ 0x4e
 8004232:	d903      	bls.n	800423c <HAL_DMA_Init+0x29c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b52      	cmp	r3, #82	@ 0x52
 800423a:	d907      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b73      	cmp	r3, #115	@ 0x73
 8004242:	d905      	bls.n	8004250 <HAL_DMA_Init+0x2b0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b77      	cmp	r3, #119	@ 0x77
 800424a:	d801      	bhi.n	8004250 <HAL_DMA_Init+0x2b0>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_DMA_Init+0x2b2>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	2b04      	cmp	r3, #4
 8004286:	d117      	bne.n	80042b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00e      	beq.n	80042b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f002 f8e8 	bl	8006470 <DMA_CheckFifoParam>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e192      	b.n	80045de <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f002 f823 	bl	800630c <DMA_CalcBaseAndBitshift>
 80042c6:	4603      	mov	r3, r0
 80042c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	223f      	movs	r2, #63	@ 0x3f
 80042d4:	409a      	lsls	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	e0c8      	b.n	800446e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_DMA_Init+0x424>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_DMA_Init+0x38c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a37      	ldr	r2, [pc, #220]	@ (80043c8 <HAL_DMA_Init+0x428>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <HAL_DMA_Init+0x38c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a35      	ldr	r2, [pc, #212]	@ (80043cc <HAL_DMA_Init+0x42c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_DMA_Init+0x38c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a34      	ldr	r2, [pc, #208]	@ (80043d0 <HAL_DMA_Init+0x430>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_DMA_Init+0x38c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a32      	ldr	r2, [pc, #200]	@ (80043d4 <HAL_DMA_Init+0x434>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_DMA_Init+0x38c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a31      	ldr	r2, [pc, #196]	@ (80043d8 <HAL_DMA_Init+0x438>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_DMA_Init+0x38c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2f      	ldr	r2, [pc, #188]	@ (80043dc <HAL_DMA_Init+0x43c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_DMA_Init+0x38c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2e      	ldr	r2, [pc, #184]	@ (80043e0 <HAL_DMA_Init+0x440>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_DMA_Init+0x390>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_DMA_Init+0x392>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8092 	beq.w	800445c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a21      	ldr	r2, [pc, #132]	@ (80043c4 <HAL_DMA_Init+0x424>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d021      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <HAL_DMA_Init+0x428>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01c      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_DMA_Init+0x42c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <HAL_DMA_Init+0x430>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d012      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <HAL_DMA_Init+0x434>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00d      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1a      	ldr	r2, [pc, #104]	@ (80043d8 <HAL_DMA_Init+0x438>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d008      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <HAL_DMA_Init+0x43c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <HAL_DMA_Init+0x440>)
 8004384:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <HAL_DMA_Init+0x444>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b40      	cmp	r3, #64	@ 0x40
 80043ac:	d01c      	beq.n	80043e8 <HAL_DMA_Init+0x448>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d102      	bne.n	80043bc <HAL_DMA_Init+0x41c>
 80043b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043ba:	e016      	b.n	80043ea <HAL_DMA_Init+0x44a>
 80043bc:	2300      	movs	r3, #0
 80043be:	e014      	b.n	80043ea <HAL_DMA_Init+0x44a>
 80043c0:	fe10803f 	.word	0xfe10803f
 80043c4:	58025408 	.word	0x58025408
 80043c8:	5802541c 	.word	0x5802541c
 80043cc:	58025430 	.word	0x58025430
 80043d0:	58025444 	.word	0x58025444
 80043d4:	58025458 	.word	0x58025458
 80043d8:	5802546c 	.word	0x5802546c
 80043dc:	58025480 	.word	0x58025480
 80043e0:	58025494 	.word	0x58025494
 80043e4:	fffe000f 	.word	0xfffe000f
 80043e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68d2      	ldr	r2, [r2, #12]
 80043ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004418:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	4b6e      	ldr	r3, [pc, #440]	@ (80045e8 <HAL_DMA_Init+0x648>)
 8004430:	4413      	add	r3, r2
 8004432:	4a6e      	ldr	r2, [pc, #440]	@ (80045ec <HAL_DMA_Init+0x64c>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	009a      	lsls	r2, r3, #2
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 ff63 	bl	800630c <DMA_CalcBaseAndBitshift>
 8004446:	4603      	mov	r3, r0
 8004448:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2201      	movs	r2, #1
 8004454:	409a      	lsls	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e008      	b.n	800446e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2240      	movs	r2, #64	@ 0x40
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0b7      	b.n	80045de <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a5f      	ldr	r2, [pc, #380]	@ (80045f0 <HAL_DMA_Init+0x650>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d072      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5d      	ldr	r2, [pc, #372]	@ (80045f4 <HAL_DMA_Init+0x654>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d06d      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5c      	ldr	r2, [pc, #368]	@ (80045f8 <HAL_DMA_Init+0x658>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d068      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5a      	ldr	r2, [pc, #360]	@ (80045fc <HAL_DMA_Init+0x65c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d063      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a59      	ldr	r2, [pc, #356]	@ (8004600 <HAL_DMA_Init+0x660>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d05e      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a57      	ldr	r2, [pc, #348]	@ (8004604 <HAL_DMA_Init+0x664>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d059      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a56      	ldr	r2, [pc, #344]	@ (8004608 <HAL_DMA_Init+0x668>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d054      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a54      	ldr	r2, [pc, #336]	@ (800460c <HAL_DMA_Init+0x66c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04f      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a53      	ldr	r2, [pc, #332]	@ (8004610 <HAL_DMA_Init+0x670>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a51      	ldr	r2, [pc, #324]	@ (8004614 <HAL_DMA_Init+0x674>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a50      	ldr	r2, [pc, #320]	@ (8004618 <HAL_DMA_Init+0x678>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4e      	ldr	r2, [pc, #312]	@ (800461c <HAL_DMA_Init+0x67c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004620 <HAL_DMA_Init+0x680>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004624 <HAL_DMA_Init+0x684>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004628 <HAL_DMA_Init+0x688>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a48      	ldr	r2, [pc, #288]	@ (800462c <HAL_DMA_Init+0x68c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a47      	ldr	r2, [pc, #284]	@ (8004630 <HAL_DMA_Init+0x690>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a45      	ldr	r2, [pc, #276]	@ (8004634 <HAL_DMA_Init+0x694>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a44      	ldr	r2, [pc, #272]	@ (8004638 <HAL_DMA_Init+0x698>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a42      	ldr	r2, [pc, #264]	@ (800463c <HAL_DMA_Init+0x69c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a41      	ldr	r2, [pc, #260]	@ (8004640 <HAL_DMA_Init+0x6a0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <HAL_DMA_Init+0x6a4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3e      	ldr	r2, [pc, #248]	@ (8004648 <HAL_DMA_Init+0x6a8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3c      	ldr	r2, [pc, #240]	@ (800464c <HAL_DMA_Init+0x6ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_DMA_Init+0x5c2>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_DMA_Init+0x5c4>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d032      	beq.n	80045ce <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 fffd 	bl	8006568 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b80      	cmp	r3, #128	@ 0x80
 8004574:	d102      	bne.n	800457c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004590:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HAL_DMA_Init+0x61c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d80c      	bhi.n	80045bc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f002 f87a 	bl	800669c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	e008      	b.n	80045ce <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	a7fdabf8 	.word	0xa7fdabf8
 80045ec:	cccccccd 	.word	0xcccccccd
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	58025408 	.word	0x58025408
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025430 	.word	0x58025430
 800463c:	58025444 	.word	0x58025444
 8004640:	58025458 	.word	0x58025458
 8004644:	5802546c 	.word	0x5802546c
 8004648:	58025480 	.word	0x58025480
 800464c:	58025494 	.word	0x58025494

08004650 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e226      	b.n	8004aba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_DMA_Start_IT+0x2a>
 8004676:	2302      	movs	r3, #2
 8004678:	e21f      	b.n	8004aba <HAL_DMA_Start_IT+0x46a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	f040 820a 	bne.w	8004aa4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a68      	ldr	r2, [pc, #416]	@ (8004844 <HAL_DMA_Start_IT+0x1f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d04a      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a66      	ldr	r2, [pc, #408]	@ (8004848 <HAL_DMA_Start_IT+0x1f8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d045      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a65      	ldr	r2, [pc, #404]	@ (800484c <HAL_DMA_Start_IT+0x1fc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d040      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a63      	ldr	r2, [pc, #396]	@ (8004850 <HAL_DMA_Start_IT+0x200>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d03b      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a62      	ldr	r2, [pc, #392]	@ (8004854 <HAL_DMA_Start_IT+0x204>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d036      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a60      	ldr	r2, [pc, #384]	@ (8004858 <HAL_DMA_Start_IT+0x208>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d031      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5f      	ldr	r2, [pc, #380]	@ (800485c <HAL_DMA_Start_IT+0x20c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d02c      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004860 <HAL_DMA_Start_IT+0x210>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d027      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004864 <HAL_DMA_Start_IT+0x214>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004868 <HAL_DMA_Start_IT+0x218>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01d      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a59      	ldr	r2, [pc, #356]	@ (800486c <HAL_DMA_Start_IT+0x21c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a57      	ldr	r2, [pc, #348]	@ (8004870 <HAL_DMA_Start_IT+0x220>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a56      	ldr	r2, [pc, #344]	@ (8004874 <HAL_DMA_Start_IT+0x224>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a54      	ldr	r2, [pc, #336]	@ (8004878 <HAL_DMA_Start_IT+0x228>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a53      	ldr	r2, [pc, #332]	@ (800487c <HAL_DMA_Start_IT+0x22c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a51      	ldr	r2, [pc, #324]	@ (8004880 <HAL_DMA_Start_IT+0x230>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d108      	bne.n	8004750 <HAL_DMA_Start_IT+0x100>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e007      	b.n	8004760 <HAL_DMA_Start_IT+0x110>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f001 fc24 	bl	8005fb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a34      	ldr	r2, [pc, #208]	@ (8004844 <HAL_DMA_Start_IT+0x1f4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d04a      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a33      	ldr	r2, [pc, #204]	@ (8004848 <HAL_DMA_Start_IT+0x1f8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d045      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a31      	ldr	r2, [pc, #196]	@ (800484c <HAL_DMA_Start_IT+0x1fc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d040      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <HAL_DMA_Start_IT+0x200>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d03b      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <HAL_DMA_Start_IT+0x204>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d036      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004858 <HAL_DMA_Start_IT+0x208>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d031      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	@ (800485c <HAL_DMA_Start_IT+0x20c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02c      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004860 <HAL_DMA_Start_IT+0x210>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d027      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a28      	ldr	r2, [pc, #160]	@ (8004864 <HAL_DMA_Start_IT+0x214>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a27      	ldr	r2, [pc, #156]	@ (8004868 <HAL_DMA_Start_IT+0x218>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a25      	ldr	r2, [pc, #148]	@ (800486c <HAL_DMA_Start_IT+0x21c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_DMA_Start_IT+0x220>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <HAL_DMA_Start_IT+0x224>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_DMA_Start_IT+0x228>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <HAL_DMA_Start_IT+0x22c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <HAL_DMA_Start_IT+0x230>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Start_IT+0x1c0>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_DMA_Start_IT+0x1c2>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d036      	beq.n	8004884 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f023 021e 	bic.w	r2, r3, #30
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0216 	orr.w	r2, r2, #22
 8004828:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d03e      	beq.n	80048b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0208 	orr.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e035      	b.n	80048b0 <HAL_DMA_Start_IT+0x260>
 8004844:	40020010 	.word	0x40020010
 8004848:	40020028 	.word	0x40020028
 800484c:	40020040 	.word	0x40020040
 8004850:	40020058 	.word	0x40020058
 8004854:	40020070 	.word	0x40020070
 8004858:	40020088 	.word	0x40020088
 800485c:	400200a0 	.word	0x400200a0
 8004860:	400200b8 	.word	0x400200b8
 8004864:	40020410 	.word	0x40020410
 8004868:	40020428 	.word	0x40020428
 800486c:	40020440 	.word	0x40020440
 8004870:	40020458 	.word	0x40020458
 8004874:	40020470 	.word	0x40020470
 8004878:	40020488 	.word	0x40020488
 800487c:	400204a0 	.word	0x400204a0
 8004880:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 020e 	bic.w	r2, r3, #14
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 020a 	orr.w	r2, r2, #10
 8004896:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0204 	orr.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a83      	ldr	r2, [pc, #524]	@ (8004ac4 <HAL_DMA_Start_IT+0x474>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d072      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a82      	ldr	r2, [pc, #520]	@ (8004ac8 <HAL_DMA_Start_IT+0x478>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d06d      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a80      	ldr	r2, [pc, #512]	@ (8004acc <HAL_DMA_Start_IT+0x47c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d068      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad0 <HAL_DMA_Start_IT+0x480>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d063      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7d      	ldr	r2, [pc, #500]	@ (8004ad4 <HAL_DMA_Start_IT+0x484>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d05e      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ad8 <HAL_DMA_Start_IT+0x488>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d059      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7a      	ldr	r2, [pc, #488]	@ (8004adc <HAL_DMA_Start_IT+0x48c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d054      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a79      	ldr	r2, [pc, #484]	@ (8004ae0 <HAL_DMA_Start_IT+0x490>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04f      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a77      	ldr	r2, [pc, #476]	@ (8004ae4 <HAL_DMA_Start_IT+0x494>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04a      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a76      	ldr	r2, [pc, #472]	@ (8004ae8 <HAL_DMA_Start_IT+0x498>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d045      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_DMA_Start_IT+0x49c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d040      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a73      	ldr	r2, [pc, #460]	@ (8004af0 <HAL_DMA_Start_IT+0x4a0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d03b      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a71      	ldr	r2, [pc, #452]	@ (8004af4 <HAL_DMA_Start_IT+0x4a4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d036      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a70      	ldr	r2, [pc, #448]	@ (8004af8 <HAL_DMA_Start_IT+0x4a8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d031      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_DMA_Start_IT+0x4ac>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02c      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b00 <HAL_DMA_Start_IT+0x4b0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d027      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6b      	ldr	r2, [pc, #428]	@ (8004b04 <HAL_DMA_Start_IT+0x4b4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b08 <HAL_DMA_Start_IT+0x4b8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_DMA_Start_IT+0x4bc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a67      	ldr	r2, [pc, #412]	@ (8004b10 <HAL_DMA_Start_IT+0x4c0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a65      	ldr	r2, [pc, #404]	@ (8004b14 <HAL_DMA_Start_IT+0x4c4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a64      	ldr	r2, [pc, #400]	@ (8004b18 <HAL_DMA_Start_IT+0x4c8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a62      	ldr	r2, [pc, #392]	@ (8004b1c <HAL_DMA_Start_IT+0x4cc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a61      	ldr	r2, [pc, #388]	@ (8004b20 <HAL_DMA_Start_IT+0x4d0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_DMA_Start_IT+0x354>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_DMA_Start_IT+0x356>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01a      	beq.n	80049e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a37      	ldr	r2, [pc, #220]	@ (8004ac4 <HAL_DMA_Start_IT+0x474>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04a      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a36      	ldr	r2, [pc, #216]	@ (8004ac8 <HAL_DMA_Start_IT+0x478>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d045      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <HAL_DMA_Start_IT+0x47c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d040      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a33      	ldr	r2, [pc, #204]	@ (8004ad0 <HAL_DMA_Start_IT+0x480>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d03b      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a31      	ldr	r2, [pc, #196]	@ (8004ad4 <HAL_DMA_Start_IT+0x484>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d036      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a30      	ldr	r2, [pc, #192]	@ (8004ad8 <HAL_DMA_Start_IT+0x488>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d031      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2e      	ldr	r2, [pc, #184]	@ (8004adc <HAL_DMA_Start_IT+0x48c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02c      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_DMA_Start_IT+0x490>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d027      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <HAL_DMA_Start_IT+0x494>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae8 <HAL_DMA_Start_IT+0x498>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a28      	ldr	r2, [pc, #160]	@ (8004aec <HAL_DMA_Start_IT+0x49c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <HAL_DMA_Start_IT+0x4a0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a25      	ldr	r2, [pc, #148]	@ (8004af4 <HAL_DMA_Start_IT+0x4a4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a24      	ldr	r2, [pc, #144]	@ (8004af8 <HAL_DMA_Start_IT+0x4a8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a22      	ldr	r2, [pc, #136]	@ (8004afc <HAL_DMA_Start_IT+0x4ac>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	@ (8004b00 <HAL_DMA_Start_IT+0x4b0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <HAL_DMA_Start_IT+0x442>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e012      	b.n	8004ab8 <HAL_DMA_Start_IT+0x468>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e009      	b.n	8004ab8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40020010 	.word	0x40020010
 8004ac8:	40020028 	.word	0x40020028
 8004acc:	40020040 	.word	0x40020040
 8004ad0:	40020058 	.word	0x40020058
 8004ad4:	40020070 	.word	0x40020070
 8004ad8:	40020088 	.word	0x40020088
 8004adc:	400200a0 	.word	0x400200a0
 8004ae0:	400200b8 	.word	0x400200b8
 8004ae4:	40020410 	.word	0x40020410
 8004ae8:	40020428 	.word	0x40020428
 8004aec:	40020440 	.word	0x40020440
 8004af0:	40020458 	.word	0x40020458
 8004af4:	40020470 	.word	0x40020470
 8004af8:	40020488 	.word	0x40020488
 8004afc:	400204a0 	.word	0x400204a0
 8004b00:	400204b8 	.word	0x400204b8
 8004b04:	58025408 	.word	0x58025408
 8004b08:	5802541c 	.word	0x5802541c
 8004b0c:	58025430 	.word	0x58025430
 8004b10:	58025444 	.word	0x58025444
 8004b14:	58025458 	.word	0x58025458
 8004b18:	5802546c 	.word	0x5802546c
 8004b1c:	58025480 	.word	0x58025480
 8004b20:	58025494 	.word	0x58025494

08004b24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7ff f8f8 	bl	8003d20 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e2dc      	b.n	80050f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d008      	beq.n	8004b5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	@ 0x80
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e2cd      	b.n	80050f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a76      	ldr	r2, [pc, #472]	@ (8004d38 <HAL_DMA_Abort+0x214>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d04a      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a74      	ldr	r2, [pc, #464]	@ (8004d3c <HAL_DMA_Abort+0x218>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d045      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a73      	ldr	r2, [pc, #460]	@ (8004d40 <HAL_DMA_Abort+0x21c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d040      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a71      	ldr	r2, [pc, #452]	@ (8004d44 <HAL_DMA_Abort+0x220>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a70      	ldr	r2, [pc, #448]	@ (8004d48 <HAL_DMA_Abort+0x224>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d036      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a6e      	ldr	r2, [pc, #440]	@ (8004d4c <HAL_DMA_Abort+0x228>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8004d50 <HAL_DMA_Abort+0x22c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d02c      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d54 <HAL_DMA_Abort+0x230>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a6a      	ldr	r2, [pc, #424]	@ (8004d58 <HAL_DMA_Abort+0x234>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a68      	ldr	r2, [pc, #416]	@ (8004d5c <HAL_DMA_Abort+0x238>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a67      	ldr	r2, [pc, #412]	@ (8004d60 <HAL_DMA_Abort+0x23c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a65      	ldr	r2, [pc, #404]	@ (8004d64 <HAL_DMA_Abort+0x240>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a64      	ldr	r2, [pc, #400]	@ (8004d68 <HAL_DMA_Abort+0x244>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a62      	ldr	r2, [pc, #392]	@ (8004d6c <HAL_DMA_Abort+0x248>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a61      	ldr	r2, [pc, #388]	@ (8004d70 <HAL_DMA_Abort+0x24c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8004d74 <HAL_DMA_Abort+0x250>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_Abort+0xda>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_DMA_Abort+0xdc>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 021e 	bic.w	r2, r2, #30
 8004c12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e00a      	b.n	8004c42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 020e 	bic.w	r2, r2, #14
 8004c3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3c      	ldr	r2, [pc, #240]	@ (8004d38 <HAL_DMA_Abort+0x214>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d072      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3a      	ldr	r2, [pc, #232]	@ (8004d3c <HAL_DMA_Abort+0x218>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d06d      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a39      	ldr	r2, [pc, #228]	@ (8004d40 <HAL_DMA_Abort+0x21c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d068      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <HAL_DMA_Abort+0x220>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d063      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a36      	ldr	r2, [pc, #216]	@ (8004d48 <HAL_DMA_Abort+0x224>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d05e      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a34      	ldr	r2, [pc, #208]	@ (8004d4c <HAL_DMA_Abort+0x228>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d059      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <HAL_DMA_Abort+0x22c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d054      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a31      	ldr	r2, [pc, #196]	@ (8004d54 <HAL_DMA_Abort+0x230>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d04f      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a30      	ldr	r2, [pc, #192]	@ (8004d58 <HAL_DMA_Abort+0x234>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d04a      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d5c <HAL_DMA_Abort+0x238>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d045      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2d      	ldr	r2, [pc, #180]	@ (8004d60 <HAL_DMA_Abort+0x23c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d040      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d64 <HAL_DMA_Abort+0x240>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d03b      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004d68 <HAL_DMA_Abort+0x244>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d036      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a28      	ldr	r2, [pc, #160]	@ (8004d6c <HAL_DMA_Abort+0x248>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d031      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a27      	ldr	r2, [pc, #156]	@ (8004d70 <HAL_DMA_Abort+0x24c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d02c      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	@ (8004d74 <HAL_DMA_Abort+0x250>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d027      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a24      	ldr	r2, [pc, #144]	@ (8004d78 <HAL_DMA_Abort+0x254>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a22      	ldr	r2, [pc, #136]	@ (8004d7c <HAL_DMA_Abort+0x258>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01d      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a21      	ldr	r2, [pc, #132]	@ (8004d80 <HAL_DMA_Abort+0x25c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <HAL_DMA_Abort+0x260>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <HAL_DMA_Abort+0x264>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1c      	ldr	r2, [pc, #112]	@ (8004d8c <HAL_DMA_Abort+0x268>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1b      	ldr	r2, [pc, #108]	@ (8004d90 <HAL_DMA_Abort+0x26c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a19      	ldr	r2, [pc, #100]	@ (8004d94 <HAL_DMA_Abort+0x270>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d132      	bne.n	8004d98 <HAL_DMA_Abort+0x274>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e031      	b.n	8004d9a <HAL_DMA_Abort+0x276>
 8004d36:	bf00      	nop
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	40020040 	.word	0x40020040
 8004d44:	40020058 	.word	0x40020058
 8004d48:	40020070 	.word	0x40020070
 8004d4c:	40020088 	.word	0x40020088
 8004d50:	400200a0 	.word	0x400200a0
 8004d54:	400200b8 	.word	0x400200b8
 8004d58:	40020410 	.word	0x40020410
 8004d5c:	40020428 	.word	0x40020428
 8004d60:	40020440 	.word	0x40020440
 8004d64:	40020458 	.word	0x40020458
 8004d68:	40020470 	.word	0x40020470
 8004d6c:	40020488 	.word	0x40020488
 8004d70:	400204a0 	.word	0x400204a0
 8004d74:	400204b8 	.word	0x400204b8
 8004d78:	58025408 	.word	0x58025408
 8004d7c:	5802541c 	.word	0x5802541c
 8004d80:	58025430 	.word	0x58025430
 8004d84:	58025444 	.word	0x58025444
 8004d88:	58025458 	.word	0x58025458
 8004d8c:	5802546c 	.word	0x5802546c
 8004d90:	58025480 	.word	0x58025480
 8004d94:	58025494 	.word	0x58025494
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6d      	ldr	r2, [pc, #436]	@ (8004f68 <HAL_DMA_Abort+0x444>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f6c <HAL_DMA_Abort+0x448>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004f70 <HAL_DMA_Abort+0x44c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a68      	ldr	r2, [pc, #416]	@ (8004f74 <HAL_DMA_Abort+0x450>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <HAL_DMA_Abort+0x454>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	@ (8004f7c <HAL_DMA_Abort+0x458>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <HAL_DMA_Abort+0x45c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a62      	ldr	r2, [pc, #392]	@ (8004f84 <HAL_DMA_Abort+0x460>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a61      	ldr	r2, [pc, #388]	@ (8004f88 <HAL_DMA_Abort+0x464>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f8c <HAL_DMA_Abort+0x468>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5e      	ldr	r2, [pc, #376]	@ (8004f90 <HAL_DMA_Abort+0x46c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a5c      	ldr	r2, [pc, #368]	@ (8004f94 <HAL_DMA_Abort+0x470>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004f98 <HAL_DMA_Abort+0x474>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a59      	ldr	r2, [pc, #356]	@ (8004f9c <HAL_DMA_Abort+0x478>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a58      	ldr	r2, [pc, #352]	@ (8004fa0 <HAL_DMA_Abort+0x47c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a56      	ldr	r2, [pc, #344]	@ (8004fa4 <HAL_DMA_Abort+0x480>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <HAL_DMA_Abort+0x33c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e007      	b.n	8004e70 <HAL_DMA_Abort+0x34c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e70:	e013      	b.n	8004e9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e72:	f7fe ff55 	bl	8003d20 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d90c      	bls.n	8004e9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2203      	movs	r2, #3
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e12d      	b.n	80050f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8004f68 <HAL_DMA_Abort+0x444>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d04a      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f6c <HAL_DMA_Abort+0x448>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d045      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8004f70 <HAL_DMA_Abort+0x44c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d040      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f74 <HAL_DMA_Abort+0x450>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03b      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a29      	ldr	r2, [pc, #164]	@ (8004f78 <HAL_DMA_Abort+0x454>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d036      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <HAL_DMA_Abort+0x458>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d031      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a26      	ldr	r2, [pc, #152]	@ (8004f80 <HAL_DMA_Abort+0x45c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a24      	ldr	r2, [pc, #144]	@ (8004f84 <HAL_DMA_Abort+0x460>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a23      	ldr	r2, [pc, #140]	@ (8004f88 <HAL_DMA_Abort+0x464>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a21      	ldr	r2, [pc, #132]	@ (8004f8c <HAL_DMA_Abort+0x468>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a20      	ldr	r2, [pc, #128]	@ (8004f90 <HAL_DMA_Abort+0x46c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1e      	ldr	r2, [pc, #120]	@ (8004f94 <HAL_DMA_Abort+0x470>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <HAL_DMA_Abort+0x474>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f9c <HAL_DMA_Abort+0x478>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <HAL_DMA_Abort+0x47c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	@ (8004fa4 <HAL_DMA_Abort+0x480>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_DMA_Abort+0x426>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_DMA_Abort+0x428>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02b      	beq.n	8004fa8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	223f      	movs	r2, #63	@ 0x3f
 8004f60:	409a      	lsls	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	e02a      	b.n	8004fbe <HAL_DMA_Abort+0x49a>
 8004f68:	40020010 	.word	0x40020010
 8004f6c:	40020028 	.word	0x40020028
 8004f70:	40020040 	.word	0x40020040
 8004f74:	40020058 	.word	0x40020058
 8004f78:	40020070 	.word	0x40020070
 8004f7c:	40020088 	.word	0x40020088
 8004f80:	400200a0 	.word	0x400200a0
 8004f84:	400200b8 	.word	0x400200b8
 8004f88:	40020410 	.word	0x40020410
 8004f8c:	40020428 	.word	0x40020428
 8004f90:	40020440 	.word	0x40020440
 8004f94:	40020458 	.word	0x40020458
 8004f98:	40020470 	.word	0x40020470
 8004f9c:	40020488 	.word	0x40020488
 8004fa0:	400204a0 	.word	0x400204a0
 8004fa4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8005100 <HAL_DMA_Abort+0x5dc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d072      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8005104 <HAL_DMA_Abort+0x5e0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d06d      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4c      	ldr	r2, [pc, #304]	@ (8005108 <HAL_DMA_Abort+0x5e4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d068      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800510c <HAL_DMA_Abort+0x5e8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d063      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a49      	ldr	r2, [pc, #292]	@ (8005110 <HAL_DMA_Abort+0x5ec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d05e      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a47      	ldr	r2, [pc, #284]	@ (8005114 <HAL_DMA_Abort+0x5f0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d059      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a46      	ldr	r2, [pc, #280]	@ (8005118 <HAL_DMA_Abort+0x5f4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d054      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a44      	ldr	r2, [pc, #272]	@ (800511c <HAL_DMA_Abort+0x5f8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04f      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a43      	ldr	r2, [pc, #268]	@ (8005120 <HAL_DMA_Abort+0x5fc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d04a      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a41      	ldr	r2, [pc, #260]	@ (8005124 <HAL_DMA_Abort+0x600>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d045      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a40      	ldr	r2, [pc, #256]	@ (8005128 <HAL_DMA_Abort+0x604>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d040      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3e      	ldr	r2, [pc, #248]	@ (800512c <HAL_DMA_Abort+0x608>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d03b      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3d      	ldr	r2, [pc, #244]	@ (8005130 <HAL_DMA_Abort+0x60c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d036      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3b      	ldr	r2, [pc, #236]	@ (8005134 <HAL_DMA_Abort+0x610>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d031      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3a      	ldr	r2, [pc, #232]	@ (8005138 <HAL_DMA_Abort+0x614>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d02c      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a38      	ldr	r2, [pc, #224]	@ (800513c <HAL_DMA_Abort+0x618>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a37      	ldr	r2, [pc, #220]	@ (8005140 <HAL_DMA_Abort+0x61c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <HAL_DMA_Abort+0x620>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <HAL_DMA_Abort+0x624>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a32      	ldr	r2, [pc, #200]	@ (800514c <HAL_DMA_Abort+0x628>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a31      	ldr	r2, [pc, #196]	@ (8005150 <HAL_DMA_Abort+0x62c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2f      	ldr	r2, [pc, #188]	@ (8005154 <HAL_DMA_Abort+0x630>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2e      	ldr	r2, [pc, #184]	@ (8005158 <HAL_DMA_Abort+0x634>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2c      	ldr	r2, [pc, #176]	@ (800515c <HAL_DMA_Abort+0x638>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_DMA_Abort+0x58e>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_DMA_Abort+0x590>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8
 8005140:	58025408 	.word	0x58025408
 8005144:	5802541c 	.word	0x5802541c
 8005148:	58025430 	.word	0x58025430
 800514c:	58025444 	.word	0x58025444
 8005150:	58025458 	.word	0x58025458
 8005154:	5802546c 	.word	0x5802546c
 8005158:	58025480 	.word	0x58025480
 800515c:	58025494 	.word	0x58025494

08005160 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	@ 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800516c:	4b67      	ldr	r3, [pc, #412]	@ (800530c <HAL_DMA_IRQHandler+0x1ac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a67      	ldr	r2, [pc, #412]	@ (8005310 <HAL_DMA_IRQHandler+0x1b0>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	0a9b      	lsrs	r3, r3, #10
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5f      	ldr	r2, [pc, #380]	@ (8005314 <HAL_DMA_IRQHandler+0x1b4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d04a      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005318 <HAL_DMA_IRQHandler+0x1b8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d045      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5c      	ldr	r2, [pc, #368]	@ (800531c <HAL_DMA_IRQHandler+0x1bc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d040      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005320 <HAL_DMA_IRQHandler+0x1c0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d03b      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a59      	ldr	r2, [pc, #356]	@ (8005324 <HAL_DMA_IRQHandler+0x1c4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d036      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a57      	ldr	r2, [pc, #348]	@ (8005328 <HAL_DMA_IRQHandler+0x1c8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d031      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a56      	ldr	r2, [pc, #344]	@ (800532c <HAL_DMA_IRQHandler+0x1cc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d02c      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a54      	ldr	r2, [pc, #336]	@ (8005330 <HAL_DMA_IRQHandler+0x1d0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d027      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a53      	ldr	r2, [pc, #332]	@ (8005334 <HAL_DMA_IRQHandler+0x1d4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d022      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a51      	ldr	r2, [pc, #324]	@ (8005338 <HAL_DMA_IRQHandler+0x1d8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01d      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a50      	ldr	r2, [pc, #320]	@ (800533c <HAL_DMA_IRQHandler+0x1dc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d018      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a4e      	ldr	r2, [pc, #312]	@ (8005340 <HAL_DMA_IRQHandler+0x1e0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4d      	ldr	r2, [pc, #308]	@ (8005344 <HAL_DMA_IRQHandler+0x1e4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00e      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a4b      	ldr	r2, [pc, #300]	@ (8005348 <HAL_DMA_IRQHandler+0x1e8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d009      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a4a      	ldr	r2, [pc, #296]	@ (800534c <HAL_DMA_IRQHandler+0x1ec>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_DMA_IRQHandler+0xd2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a48      	ldr	r2, [pc, #288]	@ (8005350 <HAL_DMA_IRQHandler+0x1f0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_DMA_IRQHandler+0xd6>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_DMA_IRQHandler+0xd8>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 842b 	beq.w	8005a94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2208      	movs	r2, #8
 8005248:	409a      	lsls	r2, r3
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80a2 	beq.w	8005398 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2e      	ldr	r2, [pc, #184]	@ (8005314 <HAL_DMA_IRQHandler+0x1b4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04a      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2d      	ldr	r2, [pc, #180]	@ (8005318 <HAL_DMA_IRQHandler+0x1b8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d045      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2b      	ldr	r2, [pc, #172]	@ (800531c <HAL_DMA_IRQHandler+0x1bc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d040      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2a      	ldr	r2, [pc, #168]	@ (8005320 <HAL_DMA_IRQHandler+0x1c0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d03b      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a28      	ldr	r2, [pc, #160]	@ (8005324 <HAL_DMA_IRQHandler+0x1c4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d036      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a27      	ldr	r2, [pc, #156]	@ (8005328 <HAL_DMA_IRQHandler+0x1c8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d031      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a25      	ldr	r2, [pc, #148]	@ (800532c <HAL_DMA_IRQHandler+0x1cc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02c      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a24      	ldr	r2, [pc, #144]	@ (8005330 <HAL_DMA_IRQHandler+0x1d0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d027      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a22      	ldr	r2, [pc, #136]	@ (8005334 <HAL_DMA_IRQHandler+0x1d4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a21      	ldr	r2, [pc, #132]	@ (8005338 <HAL_DMA_IRQHandler+0x1d8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1f      	ldr	r2, [pc, #124]	@ (800533c <HAL_DMA_IRQHandler+0x1dc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005340 <HAL_DMA_IRQHandler+0x1e0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <HAL_DMA_IRQHandler+0x1e4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1b      	ldr	r2, [pc, #108]	@ (8005348 <HAL_DMA_IRQHandler+0x1e8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a19      	ldr	r2, [pc, #100]	@ (800534c <HAL_DMA_IRQHandler+0x1ec>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x194>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a18      	ldr	r2, [pc, #96]	@ (8005350 <HAL_DMA_IRQHandler+0x1f0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d12f      	bne.n	8005354 <HAL_DMA_IRQHandler+0x1f4>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf14      	ite	ne
 8005302:	2301      	movne	r3, #1
 8005304:	2300      	moveq	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e02e      	b.n	8005368 <HAL_DMA_IRQHandler+0x208>
 800530a:	bf00      	nop
 800530c:	24000000 	.word	0x24000000
 8005310:	1b4e81b5 	.word	0x1b4e81b5
 8005314:	40020010 	.word	0x40020010
 8005318:	40020028 	.word	0x40020028
 800531c:	40020040 	.word	0x40020040
 8005320:	40020058 	.word	0x40020058
 8005324:	40020070 	.word	0x40020070
 8005328:	40020088 	.word	0x40020088
 800532c:	400200a0 	.word	0x400200a0
 8005330:	400200b8 	.word	0x400200b8
 8005334:	40020410 	.word	0x40020410
 8005338:	40020428 	.word	0x40020428
 800533c:	40020440 	.word	0x40020440
 8005340:	40020458 	.word	0x40020458
 8005344:	40020470 	.word	0x40020470
 8005348:	40020488 	.word	0x40020488
 800534c:	400204a0 	.word	0x400204a0
 8005350:	400204b8 	.word	0x400204b8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0204 	bic.w	r2, r2, #4
 800537a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2208      	movs	r2, #8
 8005386:	409a      	lsls	r2, r3
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	f043 0201 	orr.w	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d06e      	beq.n	800548c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a69      	ldr	r2, [pc, #420]	@ (8005558 <HAL_DMA_IRQHandler+0x3f8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d04a      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a67      	ldr	r2, [pc, #412]	@ (800555c <HAL_DMA_IRQHandler+0x3fc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d045      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a66      	ldr	r2, [pc, #408]	@ (8005560 <HAL_DMA_IRQHandler+0x400>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d040      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a64      	ldr	r2, [pc, #400]	@ (8005564 <HAL_DMA_IRQHandler+0x404>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d03b      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a63      	ldr	r2, [pc, #396]	@ (8005568 <HAL_DMA_IRQHandler+0x408>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d036      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a61      	ldr	r2, [pc, #388]	@ (800556c <HAL_DMA_IRQHandler+0x40c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d031      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a60      	ldr	r2, [pc, #384]	@ (8005570 <HAL_DMA_IRQHandler+0x410>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d02c      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a5e      	ldr	r2, [pc, #376]	@ (8005574 <HAL_DMA_IRQHandler+0x414>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d027      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5d      	ldr	r2, [pc, #372]	@ (8005578 <HAL_DMA_IRQHandler+0x418>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d022      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5b      	ldr	r2, [pc, #364]	@ (800557c <HAL_DMA_IRQHandler+0x41c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01d      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a5a      	ldr	r2, [pc, #360]	@ (8005580 <HAL_DMA_IRQHandler+0x420>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a58      	ldr	r2, [pc, #352]	@ (8005584 <HAL_DMA_IRQHandler+0x424>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a57      	ldr	r2, [pc, #348]	@ (8005588 <HAL_DMA_IRQHandler+0x428>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a55      	ldr	r2, [pc, #340]	@ (800558c <HAL_DMA_IRQHandler+0x42c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a54      	ldr	r2, [pc, #336]	@ (8005590 <HAL_DMA_IRQHandler+0x430>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_DMA_IRQHandler+0x2ee>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a52      	ldr	r2, [pc, #328]	@ (8005594 <HAL_DMA_IRQHandler+0x434>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10a      	bne.n	8005464 <HAL_DMA_IRQHandler+0x304>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e003      	b.n	800546c <HAL_DMA_IRQHandler+0x30c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	2201      	movs	r2, #1
 800547a:	409a      	lsls	r2, r3
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005484:	f043 0202 	orr.w	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2204      	movs	r2, #4
 8005496:	409a      	lsls	r2, r3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 808f 	beq.w	80055c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <HAL_DMA_IRQHandler+0x3f8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d04a      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2a      	ldr	r2, [pc, #168]	@ (800555c <HAL_DMA_IRQHandler+0x3fc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d045      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a29      	ldr	r2, [pc, #164]	@ (8005560 <HAL_DMA_IRQHandler+0x400>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d040      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a27      	ldr	r2, [pc, #156]	@ (8005564 <HAL_DMA_IRQHandler+0x404>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d03b      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a26      	ldr	r2, [pc, #152]	@ (8005568 <HAL_DMA_IRQHandler+0x408>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d036      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a24      	ldr	r2, [pc, #144]	@ (800556c <HAL_DMA_IRQHandler+0x40c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d031      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a23      	ldr	r2, [pc, #140]	@ (8005570 <HAL_DMA_IRQHandler+0x410>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d02c      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a21      	ldr	r2, [pc, #132]	@ (8005574 <HAL_DMA_IRQHandler+0x414>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d027      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a20      	ldr	r2, [pc, #128]	@ (8005578 <HAL_DMA_IRQHandler+0x418>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1e      	ldr	r2, [pc, #120]	@ (800557c <HAL_DMA_IRQHandler+0x41c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01d      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <HAL_DMA_IRQHandler+0x420>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_DMA_IRQHandler+0x424>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1a      	ldr	r2, [pc, #104]	@ (8005588 <HAL_DMA_IRQHandler+0x428>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_DMA_IRQHandler+0x42c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	@ (8005590 <HAL_DMA_IRQHandler+0x430>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_DMA_IRQHandler+0x3e2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <HAL_DMA_IRQHandler+0x434>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d12a      	bne.n	8005598 <HAL_DMA_IRQHandler+0x438>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e023      	b.n	80055a0 <HAL_DMA_IRQHandler+0x440>
 8005558:	40020010 	.word	0x40020010
 800555c:	40020028 	.word	0x40020028
 8005560:	40020040 	.word	0x40020040
 8005564:	40020058 	.word	0x40020058
 8005568:	40020070 	.word	0x40020070
 800556c:	40020088 	.word	0x40020088
 8005570:	400200a0 	.word	0x400200a0
 8005574:	400200b8 	.word	0x400200b8
 8005578:	40020410 	.word	0x40020410
 800557c:	40020428 	.word	0x40020428
 8005580:	40020440 	.word	0x40020440
 8005584:	40020458 	.word	0x40020458
 8005588:	40020470 	.word	0x40020470
 800558c:	40020488 	.word	0x40020488
 8005590:	400204a0 	.word	0x400204a0
 8005594:	400204b8 	.word	0x400204b8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2204      	movs	r2, #4
 80055ae:	409a      	lsls	r2, r3
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	f043 0204 	orr.w	r2, r3, #4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2210      	movs	r2, #16
 80055ca:	409a      	lsls	r2, r3
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80a6 	beq.w	8005722 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a85      	ldr	r2, [pc, #532]	@ (80057f0 <HAL_DMA_IRQHandler+0x690>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04a      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a83      	ldr	r2, [pc, #524]	@ (80057f4 <HAL_DMA_IRQHandler+0x694>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d045      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a82      	ldr	r2, [pc, #520]	@ (80057f8 <HAL_DMA_IRQHandler+0x698>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d040      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a80      	ldr	r2, [pc, #512]	@ (80057fc <HAL_DMA_IRQHandler+0x69c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d03b      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7f      	ldr	r2, [pc, #508]	@ (8005800 <HAL_DMA_IRQHandler+0x6a0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d036      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7d      	ldr	r2, [pc, #500]	@ (8005804 <HAL_DMA_IRQHandler+0x6a4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d031      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7c      	ldr	r2, [pc, #496]	@ (8005808 <HAL_DMA_IRQHandler+0x6a8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d02c      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7a      	ldr	r2, [pc, #488]	@ (800580c <HAL_DMA_IRQHandler+0x6ac>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d027      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a79      	ldr	r2, [pc, #484]	@ (8005810 <HAL_DMA_IRQHandler+0x6b0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d022      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a77      	ldr	r2, [pc, #476]	@ (8005814 <HAL_DMA_IRQHandler+0x6b4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01d      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a76      	ldr	r2, [pc, #472]	@ (8005818 <HAL_DMA_IRQHandler+0x6b8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d018      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a74      	ldr	r2, [pc, #464]	@ (800581c <HAL_DMA_IRQHandler+0x6bc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a73      	ldr	r2, [pc, #460]	@ (8005820 <HAL_DMA_IRQHandler+0x6c0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a71      	ldr	r2, [pc, #452]	@ (8005824 <HAL_DMA_IRQHandler+0x6c4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a70      	ldr	r2, [pc, #448]	@ (8005828 <HAL_DMA_IRQHandler+0x6c8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_DMA_IRQHandler+0x516>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6e      	ldr	r2, [pc, #440]	@ (800582c <HAL_DMA_IRQHandler+0x6cc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d10a      	bne.n	800568c <HAL_DMA_IRQHandler+0x52c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e009      	b.n	80056a0 <HAL_DMA_IRQHandler+0x540>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf14      	ite	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2300      	moveq	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d03e      	beq.n	8005722 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2210      	movs	r2, #16
 80056ae:	409a      	lsls	r2, r3
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d018      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d024      	beq.n	8005722 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
 80056e0:	e01f      	b.n	8005722 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01b      	beq.n	8005722 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
 80056f2:	e016      	b.n	8005722 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0208 	bic.w	r2, r2, #8
 8005710:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2220      	movs	r2, #32
 800572c:	409a      	lsls	r2, r3
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8110 	beq.w	8005958 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2c      	ldr	r2, [pc, #176]	@ (80057f0 <HAL_DMA_IRQHandler+0x690>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04a      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2b      	ldr	r2, [pc, #172]	@ (80057f4 <HAL_DMA_IRQHandler+0x694>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d045      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a29      	ldr	r2, [pc, #164]	@ (80057f8 <HAL_DMA_IRQHandler+0x698>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d040      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a28      	ldr	r2, [pc, #160]	@ (80057fc <HAL_DMA_IRQHandler+0x69c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d03b      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a26      	ldr	r2, [pc, #152]	@ (8005800 <HAL_DMA_IRQHandler+0x6a0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d036      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a25      	ldr	r2, [pc, #148]	@ (8005804 <HAL_DMA_IRQHandler+0x6a4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d031      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a23      	ldr	r2, [pc, #140]	@ (8005808 <HAL_DMA_IRQHandler+0x6a8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02c      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a22      	ldr	r2, [pc, #136]	@ (800580c <HAL_DMA_IRQHandler+0x6ac>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d027      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a20      	ldr	r2, [pc, #128]	@ (8005810 <HAL_DMA_IRQHandler+0x6b0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1f      	ldr	r2, [pc, #124]	@ (8005814 <HAL_DMA_IRQHandler+0x6b4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <HAL_DMA_IRQHandler+0x6b8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	@ (800581c <HAL_DMA_IRQHandler+0x6bc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005820 <HAL_DMA_IRQHandler+0x6c0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a19      	ldr	r2, [pc, #100]	@ (8005824 <HAL_DMA_IRQHandler+0x6c4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <HAL_DMA_IRQHandler+0x6c8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x678>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a16      	ldr	r2, [pc, #88]	@ (800582c <HAL_DMA_IRQHandler+0x6cc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d12b      	bne.n	8005830 <HAL_DMA_IRQHandler+0x6d0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e02a      	b.n	8005844 <HAL_DMA_IRQHandler+0x6e4>
 80057ee:	bf00      	nop
 80057f0:	40020010 	.word	0x40020010
 80057f4:	40020028 	.word	0x40020028
 80057f8:	40020040 	.word	0x40020040
 80057fc:	40020058 	.word	0x40020058
 8005800:	40020070 	.word	0x40020070
 8005804:	40020088 	.word	0x40020088
 8005808:	400200a0 	.word	0x400200a0
 800580c:	400200b8 	.word	0x400200b8
 8005810:	40020410 	.word	0x40020410
 8005814:	40020428 	.word	0x40020428
 8005818:	40020440 	.word	0x40020440
 800581c:	40020458 	.word	0x40020458
 8005820:	40020470 	.word	0x40020470
 8005824:	40020488 	.word	0x40020488
 8005828:	400204a0 	.word	0x400204a0
 800582c:	400204b8 	.word	0x400204b8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8087 	beq.w	8005958 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2220      	movs	r2, #32
 8005854:	409a      	lsls	r2, r3
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b04      	cmp	r3, #4
 8005864:	d139      	bne.n	80058da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0216 	bic.w	r2, r2, #22
 8005874:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005884:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <HAL_DMA_IRQHandler+0x736>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0208 	bic.w	r2, r2, #8
 80058a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	223f      	movs	r2, #63	@ 0x3f
 80058b0:	409a      	lsls	r2, r3
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 834a 	beq.w	8005f64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
          }
          return;
 80058d8:	e344      	b.n	8005f64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d018      	beq.n	800591a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02c      	beq.n	8005958 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	e027      	b.n	8005958 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d023      	beq.n	8005958 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
 8005918:	e01e      	b.n	8005958 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10f      	bne.n	8005948 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0210 	bic.w	r2, r2, #16
 8005936:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8306 	beq.w	8005f6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8088 	beq.w	8005a80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a7a      	ldr	r2, [pc, #488]	@ (8005b68 <HAL_DMA_IRQHandler+0xa08>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d04a      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a79      	ldr	r2, [pc, #484]	@ (8005b6c <HAL_DMA_IRQHandler+0xa0c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d045      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a77      	ldr	r2, [pc, #476]	@ (8005b70 <HAL_DMA_IRQHandler+0xa10>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d040      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a76      	ldr	r2, [pc, #472]	@ (8005b74 <HAL_DMA_IRQHandler+0xa14>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d03b      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a74      	ldr	r2, [pc, #464]	@ (8005b78 <HAL_DMA_IRQHandler+0xa18>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d036      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a73      	ldr	r2, [pc, #460]	@ (8005b7c <HAL_DMA_IRQHandler+0xa1c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d031      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a71      	ldr	r2, [pc, #452]	@ (8005b80 <HAL_DMA_IRQHandler+0xa20>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d02c      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a70      	ldr	r2, [pc, #448]	@ (8005b84 <HAL_DMA_IRQHandler+0xa24>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d027      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005b88 <HAL_DMA_IRQHandler+0xa28>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d022      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a6d      	ldr	r2, [pc, #436]	@ (8005b8c <HAL_DMA_IRQHandler+0xa2c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d01d      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005b90 <HAL_DMA_IRQHandler+0xa30>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005b94 <HAL_DMA_IRQHandler+0xa34>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a68      	ldr	r2, [pc, #416]	@ (8005b98 <HAL_DMA_IRQHandler+0xa38>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a67      	ldr	r2, [pc, #412]	@ (8005b9c <HAL_DMA_IRQHandler+0xa3c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a65      	ldr	r2, [pc, #404]	@ (8005ba0 <HAL_DMA_IRQHandler+0xa40>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x8b8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a64      	ldr	r2, [pc, #400]	@ (8005ba4 <HAL_DMA_IRQHandler+0xa44>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <HAL_DMA_IRQHandler+0x8ca>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e007      	b.n	8005a3a <HAL_DMA_IRQHandler+0x8da>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d307      	bcc.n	8005a56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f2      	bne.n	8005a3a <HAL_DMA_IRQHandler+0x8da>
 8005a54:	e000      	b.n	8005a58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005a6e:	e003      	b.n	8005a78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8272 	beq.w	8005f6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
 8005a92:	e26c      	b.n	8005f6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a43      	ldr	r2, [pc, #268]	@ (8005ba8 <HAL_DMA_IRQHandler+0xa48>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a42      	ldr	r2, [pc, #264]	@ (8005bac <HAL_DMA_IRQHandler+0xa4c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01d      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a40      	ldr	r2, [pc, #256]	@ (8005bb0 <HAL_DMA_IRQHandler+0xa50>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8005bb4 <HAL_DMA_IRQHandler+0xa54>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8005bb8 <HAL_DMA_IRQHandler+0xa58>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a3c      	ldr	r2, [pc, #240]	@ (8005bbc <HAL_DMA_IRQHandler+0xa5c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8005bc0 <HAL_DMA_IRQHandler+0xa60>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x984>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a39      	ldr	r2, [pc, #228]	@ (8005bc4 <HAL_DMA_IRQHandler+0xa64>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <HAL_DMA_IRQHandler+0x988>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_DMA_IRQHandler+0x98a>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 823f 	beq.w	8005f6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	2204      	movs	r2, #4
 8005b02:	409a      	lsls	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80cd 	beq.w	8005ca8 <HAL_DMA_IRQHandler+0xb48>
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80c7 	beq.w	8005ca8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2204      	movs	r2, #4
 8005b24:	409a      	lsls	r2, r3
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d049      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8210 	beq.w	8005f68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b50:	e20a      	b.n	8005f68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8206 	beq.w	8005f68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b64:	e200      	b.n	8005f68 <HAL_DMA_IRQHandler+0xe08>
 8005b66:	bf00      	nop
 8005b68:	40020010 	.word	0x40020010
 8005b6c:	40020028 	.word	0x40020028
 8005b70:	40020040 	.word	0x40020040
 8005b74:	40020058 	.word	0x40020058
 8005b78:	40020070 	.word	0x40020070
 8005b7c:	40020088 	.word	0x40020088
 8005b80:	400200a0 	.word	0x400200a0
 8005b84:	400200b8 	.word	0x400200b8
 8005b88:	40020410 	.word	0x40020410
 8005b8c:	40020428 	.word	0x40020428
 8005b90:	40020440 	.word	0x40020440
 8005b94:	40020458 	.word	0x40020458
 8005b98:	40020470 	.word	0x40020470
 8005b9c:	40020488 	.word	0x40020488
 8005ba0:	400204a0 	.word	0x400204a0
 8005ba4:	400204b8 	.word	0x400204b8
 8005ba8:	58025408 	.word	0x58025408
 8005bac:	5802541c 	.word	0x5802541c
 8005bb0:	58025430 	.word	0x58025430
 8005bb4:	58025444 	.word	0x58025444
 8005bb8:	58025458 	.word	0x58025458
 8005bbc:	5802546c 	.word	0x5802546c
 8005bc0:	58025480 	.word	0x58025480
 8005bc4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d160      	bne.n	8005c94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7f      	ldr	r2, [pc, #508]	@ (8005dd4 <HAL_DMA_IRQHandler+0xc74>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d04a      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a7d      	ldr	r2, [pc, #500]	@ (8005dd8 <HAL_DMA_IRQHandler+0xc78>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d045      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a7c      	ldr	r2, [pc, #496]	@ (8005ddc <HAL_DMA_IRQHandler+0xc7c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d040      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7a      	ldr	r2, [pc, #488]	@ (8005de0 <HAL_DMA_IRQHandler+0xc80>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d03b      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a79      	ldr	r2, [pc, #484]	@ (8005de4 <HAL_DMA_IRQHandler+0xc84>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d036      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a77      	ldr	r2, [pc, #476]	@ (8005de8 <HAL_DMA_IRQHandler+0xc88>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d031      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a76      	ldr	r2, [pc, #472]	@ (8005dec <HAL_DMA_IRQHandler+0xc8c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d02c      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a74      	ldr	r2, [pc, #464]	@ (8005df0 <HAL_DMA_IRQHandler+0xc90>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d027      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a73      	ldr	r2, [pc, #460]	@ (8005df4 <HAL_DMA_IRQHandler+0xc94>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d022      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a71      	ldr	r2, [pc, #452]	@ (8005df8 <HAL_DMA_IRQHandler+0xc98>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01d      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a70      	ldr	r2, [pc, #448]	@ (8005dfc <HAL_DMA_IRQHandler+0xc9c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a6e      	ldr	r2, [pc, #440]	@ (8005e00 <HAL_DMA_IRQHandler+0xca0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005e04 <HAL_DMA_IRQHandler+0xca4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00e      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a6b      	ldr	r2, [pc, #428]	@ (8005e08 <HAL_DMA_IRQHandler+0xca8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6a      	ldr	r2, [pc, #424]	@ (8005e0c <HAL_DMA_IRQHandler+0xcac>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_DMA_IRQHandler+0xb12>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a68      	ldr	r2, [pc, #416]	@ (8005e10 <HAL_DMA_IRQHandler+0xcb0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <HAL_DMA_IRQHandler+0xb24>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0208 	bic.w	r2, r2, #8
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	e007      	b.n	8005c94 <HAL_DMA_IRQHandler+0xb34>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0204 	bic.w	r2, r2, #4
 8005c92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 8165 	beq.w	8005f68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ca6:	e15f      	b.n	8005f68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80c5 	beq.w	8005e48 <HAL_DMA_IRQHandler+0xce8>
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80bf 	beq.w	8005e48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	409a      	lsls	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d018      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 813a 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d00:	e134      	b.n	8005f6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8130 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d14:	e12a      	b.n	8005f6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 8089 	bne.w	8005e34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <HAL_DMA_IRQHandler+0xc74>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d04a      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a29      	ldr	r2, [pc, #164]	@ (8005dd8 <HAL_DMA_IRQHandler+0xc78>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d045      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a28      	ldr	r2, [pc, #160]	@ (8005ddc <HAL_DMA_IRQHandler+0xc7c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d040      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a26      	ldr	r2, [pc, #152]	@ (8005de0 <HAL_DMA_IRQHandler+0xc80>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d03b      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a25      	ldr	r2, [pc, #148]	@ (8005de4 <HAL_DMA_IRQHandler+0xc84>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d036      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a23      	ldr	r2, [pc, #140]	@ (8005de8 <HAL_DMA_IRQHandler+0xc88>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d031      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a22      	ldr	r2, [pc, #136]	@ (8005dec <HAL_DMA_IRQHandler+0xc8c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d02c      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a20      	ldr	r2, [pc, #128]	@ (8005df0 <HAL_DMA_IRQHandler+0xc90>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d027      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_DMA_IRQHandler+0xc94>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <HAL_DMA_IRQHandler+0xc98>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01d      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_DMA_IRQHandler+0xc9c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1a      	ldr	r2, [pc, #104]	@ (8005e00 <HAL_DMA_IRQHandler+0xca0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <HAL_DMA_IRQHandler+0xca4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a17      	ldr	r2, [pc, #92]	@ (8005e08 <HAL_DMA_IRQHandler+0xca8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a16      	ldr	r2, [pc, #88]	@ (8005e0c <HAL_DMA_IRQHandler+0xcac>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xc62>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a14      	ldr	r2, [pc, #80]	@ (8005e10 <HAL_DMA_IRQHandler+0xcb0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d128      	bne.n	8005e14 <HAL_DMA_IRQHandler+0xcb4>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0214 	bic.w	r2, r2, #20
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e027      	b.n	8005e24 <HAL_DMA_IRQHandler+0xcc4>
 8005dd4:	40020010 	.word	0x40020010
 8005dd8:	40020028 	.word	0x40020028
 8005ddc:	40020040 	.word	0x40020040
 8005de0:	40020058 	.word	0x40020058
 8005de4:	40020070 	.word	0x40020070
 8005de8:	40020088 	.word	0x40020088
 8005dec:	400200a0 	.word	0x400200a0
 8005df0:	400200b8 	.word	0x400200b8
 8005df4:	40020410 	.word	0x40020410
 8005df8:	40020428 	.word	0x40020428
 8005dfc:	40020440 	.word	0x40020440
 8005e00:	40020458 	.word	0x40020458
 8005e04:	40020470 	.word	0x40020470
 8005e08:	40020488 	.word	0x40020488
 8005e0c:	400204a0 	.word	0x400204a0
 8005e10:	400204b8 	.word	0x400204b8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 020a 	bic.w	r2, r2, #10
 8005e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8097 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e46:	e091      	b.n	8005f6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2208      	movs	r2, #8
 8005e52:	409a      	lsls	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8088 	beq.w	8005f6e <HAL_DMA_IRQHandler+0xe0e>
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8082 	beq.w	8005f6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a41      	ldr	r2, [pc, #260]	@ (8005f74 <HAL_DMA_IRQHandler+0xe14>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a3f      	ldr	r2, [pc, #252]	@ (8005f78 <HAL_DMA_IRQHandler+0xe18>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3e      	ldr	r2, [pc, #248]	@ (8005f7c <HAL_DMA_IRQHandler+0xe1c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f80 <HAL_DMA_IRQHandler+0xe20>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a3b      	ldr	r2, [pc, #236]	@ (8005f84 <HAL_DMA_IRQHandler+0xe24>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a39      	ldr	r2, [pc, #228]	@ (8005f88 <HAL_DMA_IRQHandler+0xe28>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a38      	ldr	r2, [pc, #224]	@ (8005f8c <HAL_DMA_IRQHandler+0xe2c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a36      	ldr	r2, [pc, #216]	@ (8005f90 <HAL_DMA_IRQHandler+0xe30>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a35      	ldr	r2, [pc, #212]	@ (8005f94 <HAL_DMA_IRQHandler+0xe34>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a33      	ldr	r2, [pc, #204]	@ (8005f98 <HAL_DMA_IRQHandler+0xe38>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a32      	ldr	r2, [pc, #200]	@ (8005f9c <HAL_DMA_IRQHandler+0xe3c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a30      	ldr	r2, [pc, #192]	@ (8005fa0 <HAL_DMA_IRQHandler+0xe40>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa4 <HAL_DMA_IRQHandler+0xe44>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa8 <HAL_DMA_IRQHandler+0xe48>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2c      	ldr	r2, [pc, #176]	@ (8005fac <HAL_DMA_IRQHandler+0xe4c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMA_IRQHandler+0xdaa>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb0 <HAL_DMA_IRQHandler+0xe50>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d108      	bne.n	8005f1c <HAL_DMA_IRQHandler+0xdbc>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 021c 	bic.w	r2, r2, #28
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e007      	b.n	8005f2c <HAL_DMA_IRQHandler+0xdcc>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 020e 	bic.w	r2, r2, #14
 8005f2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2201      	movs	r2, #1
 8005f36:	409a      	lsls	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
 8005f62:	e004      	b.n	8005f6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f64:	bf00      	nop
 8005f66:	e002      	b.n	8005f6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f6e:	3728      	adds	r7, #40	@ 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40020010 	.word	0x40020010
 8005f78:	40020028 	.word	0x40020028
 8005f7c:	40020040 	.word	0x40020040
 8005f80:	40020058 	.word	0x40020058
 8005f84:	40020070 	.word	0x40020070
 8005f88:	40020088 	.word	0x40020088
 8005f8c:	400200a0 	.word	0x400200a0
 8005f90:	400200b8 	.word	0x400200b8
 8005f94:	40020410 	.word	0x40020410
 8005f98:	40020428 	.word	0x40020428
 8005f9c:	40020440 	.word	0x40020440
 8005fa0:	40020458 	.word	0x40020458
 8005fa4:	40020470 	.word	0x40020470
 8005fa8:	40020488 	.word	0x40020488
 8005fac:	400204a0 	.word	0x400204a0
 8005fb0:	400204b8 	.word	0x400204b8

08005fb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fcc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a7f      	ldr	r2, [pc, #508]	@ (80061d0 <DMA_SetConfig+0x21c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d072      	beq.n	80060be <DMA_SetConfig+0x10a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a7d      	ldr	r2, [pc, #500]	@ (80061d4 <DMA_SetConfig+0x220>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d06d      	beq.n	80060be <DMA_SetConfig+0x10a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80061d8 <DMA_SetConfig+0x224>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d068      	beq.n	80060be <DMA_SetConfig+0x10a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a7a      	ldr	r2, [pc, #488]	@ (80061dc <DMA_SetConfig+0x228>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d063      	beq.n	80060be <DMA_SetConfig+0x10a>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a79      	ldr	r2, [pc, #484]	@ (80061e0 <DMA_SetConfig+0x22c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d05e      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a77      	ldr	r2, [pc, #476]	@ (80061e4 <DMA_SetConfig+0x230>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d059      	beq.n	80060be <DMA_SetConfig+0x10a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a76      	ldr	r2, [pc, #472]	@ (80061e8 <DMA_SetConfig+0x234>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d054      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a74      	ldr	r2, [pc, #464]	@ (80061ec <DMA_SetConfig+0x238>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d04f      	beq.n	80060be <DMA_SetConfig+0x10a>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a73      	ldr	r2, [pc, #460]	@ (80061f0 <DMA_SetConfig+0x23c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a71      	ldr	r2, [pc, #452]	@ (80061f4 <DMA_SetConfig+0x240>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a70      	ldr	r2, [pc, #448]	@ (80061f8 <DMA_SetConfig+0x244>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <DMA_SetConfig+0x10a>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a6e      	ldr	r2, [pc, #440]	@ (80061fc <DMA_SetConfig+0x248>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a6d      	ldr	r2, [pc, #436]	@ (8006200 <DMA_SetConfig+0x24c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a6b      	ldr	r2, [pc, #428]	@ (8006204 <DMA_SetConfig+0x250>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <DMA_SetConfig+0x10a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a6a      	ldr	r2, [pc, #424]	@ (8006208 <DMA_SetConfig+0x254>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a68      	ldr	r2, [pc, #416]	@ (800620c <DMA_SetConfig+0x258>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <DMA_SetConfig+0x10a>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a67      	ldr	r2, [pc, #412]	@ (8006210 <DMA_SetConfig+0x25c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a65      	ldr	r2, [pc, #404]	@ (8006214 <DMA_SetConfig+0x260>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a64      	ldr	r2, [pc, #400]	@ (8006218 <DMA_SetConfig+0x264>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <DMA_SetConfig+0x10a>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a62      	ldr	r2, [pc, #392]	@ (800621c <DMA_SetConfig+0x268>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <DMA_SetConfig+0x10a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a61      	ldr	r2, [pc, #388]	@ (8006220 <DMA_SetConfig+0x26c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <DMA_SetConfig+0x10a>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5f      	ldr	r2, [pc, #380]	@ (8006224 <DMA_SetConfig+0x270>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <DMA_SetConfig+0x10a>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006228 <DMA_SetConfig+0x274>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <DMA_SetConfig+0x10a>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5c      	ldr	r2, [pc, #368]	@ (800622c <DMA_SetConfig+0x278>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d101      	bne.n	80060c2 <DMA_SetConfig+0x10e>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <DMA_SetConfig+0x110>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80060d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a39      	ldr	r2, [pc, #228]	@ (80061d0 <DMA_SetConfig+0x21c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d04a      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a38      	ldr	r2, [pc, #224]	@ (80061d4 <DMA_SetConfig+0x220>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d045      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a36      	ldr	r2, [pc, #216]	@ (80061d8 <DMA_SetConfig+0x224>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d040      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a35      	ldr	r2, [pc, #212]	@ (80061dc <DMA_SetConfig+0x228>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d03b      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a33      	ldr	r2, [pc, #204]	@ (80061e0 <DMA_SetConfig+0x22c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d036      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a32      	ldr	r2, [pc, #200]	@ (80061e4 <DMA_SetConfig+0x230>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d031      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a30      	ldr	r2, [pc, #192]	@ (80061e8 <DMA_SetConfig+0x234>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02c      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2f      	ldr	r2, [pc, #188]	@ (80061ec <DMA_SetConfig+0x238>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d027      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2d      	ldr	r2, [pc, #180]	@ (80061f0 <DMA_SetConfig+0x23c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d022      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2c      	ldr	r2, [pc, #176]	@ (80061f4 <DMA_SetConfig+0x240>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d01d      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2a      	ldr	r2, [pc, #168]	@ (80061f8 <DMA_SetConfig+0x244>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d018      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a29      	ldr	r2, [pc, #164]	@ (80061fc <DMA_SetConfig+0x248>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a27      	ldr	r2, [pc, #156]	@ (8006200 <DMA_SetConfig+0x24c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00e      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a26      	ldr	r2, [pc, #152]	@ (8006204 <DMA_SetConfig+0x250>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d009      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a24      	ldr	r2, [pc, #144]	@ (8006208 <DMA_SetConfig+0x254>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <DMA_SetConfig+0x1d0>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a23      	ldr	r2, [pc, #140]	@ (800620c <DMA_SetConfig+0x258>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d101      	bne.n	8006188 <DMA_SetConfig+0x1d4>
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <DMA_SetConfig+0x1d6>
 8006188:	2300      	movs	r3, #0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d059      	beq.n	8006242 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	223f      	movs	r2, #63	@ 0x3f
 8006198:	409a      	lsls	r2, r3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d138      	bne.n	8006230 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061ce:	e086      	b.n	80062de <DMA_SetConfig+0x32a>
 80061d0:	40020010 	.word	0x40020010
 80061d4:	40020028 	.word	0x40020028
 80061d8:	40020040 	.word	0x40020040
 80061dc:	40020058 	.word	0x40020058
 80061e0:	40020070 	.word	0x40020070
 80061e4:	40020088 	.word	0x40020088
 80061e8:	400200a0 	.word	0x400200a0
 80061ec:	400200b8 	.word	0x400200b8
 80061f0:	40020410 	.word	0x40020410
 80061f4:	40020428 	.word	0x40020428
 80061f8:	40020440 	.word	0x40020440
 80061fc:	40020458 	.word	0x40020458
 8006200:	40020470 	.word	0x40020470
 8006204:	40020488 	.word	0x40020488
 8006208:	400204a0 	.word	0x400204a0
 800620c:	400204b8 	.word	0x400204b8
 8006210:	58025408 	.word	0x58025408
 8006214:	5802541c 	.word	0x5802541c
 8006218:	58025430 	.word	0x58025430
 800621c:	58025444 	.word	0x58025444
 8006220:	58025458 	.word	0x58025458
 8006224:	5802546c 	.word	0x5802546c
 8006228:	58025480 	.word	0x58025480
 800622c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	60da      	str	r2, [r3, #12]
}
 8006240:	e04d      	b.n	80062de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a29      	ldr	r2, [pc, #164]	@ (80062ec <DMA_SetConfig+0x338>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d022      	beq.n	8006292 <DMA_SetConfig+0x2de>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a27      	ldr	r2, [pc, #156]	@ (80062f0 <DMA_SetConfig+0x33c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01d      	beq.n	8006292 <DMA_SetConfig+0x2de>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a26      	ldr	r2, [pc, #152]	@ (80062f4 <DMA_SetConfig+0x340>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d018      	beq.n	8006292 <DMA_SetConfig+0x2de>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a24      	ldr	r2, [pc, #144]	@ (80062f8 <DMA_SetConfig+0x344>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <DMA_SetConfig+0x2de>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a23      	ldr	r2, [pc, #140]	@ (80062fc <DMA_SetConfig+0x348>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <DMA_SetConfig+0x2de>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a21      	ldr	r2, [pc, #132]	@ (8006300 <DMA_SetConfig+0x34c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <DMA_SetConfig+0x2de>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a20      	ldr	r2, [pc, #128]	@ (8006304 <DMA_SetConfig+0x350>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <DMA_SetConfig+0x2de>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1e      	ldr	r2, [pc, #120]	@ (8006308 <DMA_SetConfig+0x354>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <DMA_SetConfig+0x2e2>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <DMA_SetConfig+0x2e4>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d020      	beq.n	80062de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	d108      	bne.n	80062ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	60da      	str	r2, [r3, #12]
}
 80062cc:	e007      	b.n	80062de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	60da      	str	r2, [r3, #12]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	58025408 	.word	0x58025408
 80062f0:	5802541c 	.word	0x5802541c
 80062f4:	58025430 	.word	0x58025430
 80062f8:	58025444 	.word	0x58025444
 80062fc:	58025458 	.word	0x58025458
 8006300:	5802546c 	.word	0x5802546c
 8006304:	58025480 	.word	0x58025480
 8006308:	58025494 	.word	0x58025494

0800630c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a42      	ldr	r2, [pc, #264]	@ (8006424 <DMA_CalcBaseAndBitshift+0x118>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d04a      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a41      	ldr	r2, [pc, #260]	@ (8006428 <DMA_CalcBaseAndBitshift+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d045      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3f      	ldr	r2, [pc, #252]	@ (800642c <DMA_CalcBaseAndBitshift+0x120>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d040      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3e      	ldr	r2, [pc, #248]	@ (8006430 <DMA_CalcBaseAndBitshift+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d03b      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a3c      	ldr	r2, [pc, #240]	@ (8006434 <DMA_CalcBaseAndBitshift+0x128>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d036      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3b      	ldr	r2, [pc, #236]	@ (8006438 <DMA_CalcBaseAndBitshift+0x12c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d031      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a39      	ldr	r2, [pc, #228]	@ (800643c <DMA_CalcBaseAndBitshift+0x130>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02c      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a38      	ldr	r2, [pc, #224]	@ (8006440 <DMA_CalcBaseAndBitshift+0x134>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d027      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a36      	ldr	r2, [pc, #216]	@ (8006444 <DMA_CalcBaseAndBitshift+0x138>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d022      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a35      	ldr	r2, [pc, #212]	@ (8006448 <DMA_CalcBaseAndBitshift+0x13c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01d      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a33      	ldr	r2, [pc, #204]	@ (800644c <DMA_CalcBaseAndBitshift+0x140>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a32      	ldr	r2, [pc, #200]	@ (8006450 <DMA_CalcBaseAndBitshift+0x144>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a30      	ldr	r2, [pc, #192]	@ (8006454 <DMA_CalcBaseAndBitshift+0x148>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2f      	ldr	r2, [pc, #188]	@ (8006458 <DMA_CalcBaseAndBitshift+0x14c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2d      	ldr	r2, [pc, #180]	@ (800645c <DMA_CalcBaseAndBitshift+0x150>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <DMA_CalcBaseAndBitshift+0xa8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006460 <DMA_CalcBaseAndBitshift+0x154>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d101      	bne.n	80063b8 <DMA_CalcBaseAndBitshift+0xac>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <DMA_CalcBaseAndBitshift+0xae>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d024      	beq.n	8006408 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	3b10      	subs	r3, #16
 80063c6:	4a27      	ldr	r2, [pc, #156]	@ (8006464 <DMA_CalcBaseAndBitshift+0x158>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	4a24      	ldr	r2, [pc, #144]	@ (8006468 <DMA_CalcBaseAndBitshift+0x15c>)
 80063d8:	5cd3      	ldrb	r3, [r2, r3]
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d908      	bls.n	80063f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	4b1f      	ldr	r3, [pc, #124]	@ (800646c <DMA_CalcBaseAndBitshift+0x160>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	1d1a      	adds	r2, r3, #4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80063f6:	e00d      	b.n	8006414 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <DMA_CalcBaseAndBitshift+0x160>)
 8006400:	4013      	ands	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6593      	str	r3, [r2, #88]	@ 0x58
 8006406:	e005      	b.n	8006414 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40020010 	.word	0x40020010
 8006428:	40020028 	.word	0x40020028
 800642c:	40020040 	.word	0x40020040
 8006430:	40020058 	.word	0x40020058
 8006434:	40020070 	.word	0x40020070
 8006438:	40020088 	.word	0x40020088
 800643c:	400200a0 	.word	0x400200a0
 8006440:	400200b8 	.word	0x400200b8
 8006444:	40020410 	.word	0x40020410
 8006448:	40020428 	.word	0x40020428
 800644c:	40020440 	.word	0x40020440
 8006450:	40020458 	.word	0x40020458
 8006454:	40020470 	.word	0x40020470
 8006458:	40020488 	.word	0x40020488
 800645c:	400204a0 	.word	0x400204a0
 8006460:	400204b8 	.word	0x400204b8
 8006464:	aaaaaaab 	.word	0xaaaaaaab
 8006468:	0801f700 	.word	0x0801f700
 800646c:	fffffc00 	.word	0xfffffc00

08006470 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d120      	bne.n	80064c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006488:	2b03      	cmp	r3, #3
 800648a:	d858      	bhi.n	800653e <DMA_CheckFifoParam+0xce>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <DMA_CheckFifoParam+0x24>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064b7 	.word	0x080064b7
 800649c:	080064a5 	.word	0x080064a5
 80064a0:	0800653f 	.word	0x0800653f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d048      	beq.n	8006542 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064b4:	e045      	b.n	8006542 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064be:	d142      	bne.n	8006546 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064c4:	e03f      	b.n	8006546 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ce:	d123      	bne.n	8006518 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d838      	bhi.n	800654a <DMA_CheckFifoParam+0xda>
 80064d8:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <DMA_CheckFifoParam+0x70>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	080064f1 	.word	0x080064f1
 80064e4:	080064f7 	.word	0x080064f7
 80064e8:	080064f1 	.word	0x080064f1
 80064ec:	08006509 	.word	0x08006509
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
        break;
 80064f4:	e030      	b.n	8006558 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d025      	beq.n	800654e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006506:	e022      	b.n	800654e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006510:	d11f      	bne.n	8006552 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006516:	e01c      	b.n	8006552 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	2b02      	cmp	r3, #2
 800651e:	d902      	bls.n	8006526 <DMA_CheckFifoParam+0xb6>
 8006520:	2b03      	cmp	r3, #3
 8006522:	d003      	beq.n	800652c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006524:	e018      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
        break;
 800652a:	e015      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
    break;
 800653c:	e00b      	b.n	8006556 <DMA_CheckFifoParam+0xe6>
        break;
 800653e:	bf00      	nop
 8006540:	e00a      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        break;
 8006542:	bf00      	nop
 8006544:	e008      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        break;
 8006546:	bf00      	nop
 8006548:	e006      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        break;
 800654a:	bf00      	nop
 800654c:	e004      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        break;
 800654e:	bf00      	nop
 8006550:	e002      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
        break;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <DMA_CheckFifoParam+0xe8>
    break;
 8006556:	bf00      	nop
    }
  }

  return status;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop

08006568 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a38      	ldr	r2, [pc, #224]	@ (800665c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d022      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a36      	ldr	r2, [pc, #216]	@ (8006660 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01d      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a35      	ldr	r2, [pc, #212]	@ (8006664 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d018      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a33      	ldr	r2, [pc, #204]	@ (8006668 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a32      	ldr	r2, [pc, #200]	@ (800666c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a30      	ldr	r2, [pc, #192]	@ (8006670 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d009      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006678 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d101      	bne.n	80065ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	3b08      	subs	r3, #8
 80065d8:	4a28      	ldr	r2, [pc, #160]	@ (800667c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	091b      	lsrs	r3, r3, #4
 80065e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4b26      	ldr	r3, [pc, #152]	@ (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a24      	ldr	r2, [pc, #144]	@ (8006684 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2201      	movs	r2, #1
 80065fe:	409a      	lsls	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006604:	e024      	b.n	8006650 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	3b10      	subs	r3, #16
 800660e:	4a1e      	ldr	r2, [pc, #120]	@ (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006610:	fba2 2303 	umull	r2, r3, r2, r3
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a1c      	ldr	r2, [pc, #112]	@ (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d806      	bhi.n	800662e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a1b      	ldr	r2, [pc, #108]	@ (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d902      	bls.n	800662e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3308      	adds	r3, #8
 800662c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4b18      	ldr	r3, [pc, #96]	@ (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	461a      	mov	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006640:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2201      	movs	r2, #1
 800664a:	409a      	lsls	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	58025408 	.word	0x58025408
 8006660:	5802541c 	.word	0x5802541c
 8006664:	58025430 	.word	0x58025430
 8006668:	58025444 	.word	0x58025444
 800666c:	58025458 	.word	0x58025458
 8006670:	5802546c 	.word	0x5802546c
 8006674:	58025480 	.word	0x58025480
 8006678:	58025494 	.word	0x58025494
 800667c:	cccccccd 	.word	0xcccccccd
 8006680:	16009600 	.word	0x16009600
 8006684:	58025880 	.word	0x58025880
 8006688:	aaaaaaab 	.word	0xaaaaaaab
 800668c:	400204b8 	.word	0x400204b8
 8006690:	4002040f 	.word	0x4002040f
 8006694:	10008200 	.word	0x10008200
 8006698:	40020880 	.word	0x40020880

0800669c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d04a      	beq.n	8006748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d847      	bhi.n	8006748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a25      	ldr	r2, [pc, #148]	@ (8006754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d022      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a24      	ldr	r2, [pc, #144]	@ (8006758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d01d      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a22      	ldr	r2, [pc, #136]	@ (800675c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d018      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a21      	ldr	r2, [pc, #132]	@ (8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00e      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d009      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1c      	ldr	r2, [pc, #112]	@ (800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4b17      	ldr	r3, [pc, #92]	@ (8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006724:	671a      	str	r2, [r3, #112]	@ 0x70
 8006726:	e009      	b.n	800673c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4b14      	ldr	r3, [pc, #80]	@ (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a11      	ldr	r2, [pc, #68]	@ (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800673a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3b01      	subs	r3, #1
 8006740:	2201      	movs	r2, #1
 8006742:	409a      	lsls	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494
 8006774:	1600963f 	.word	0x1600963f
 8006778:	58025940 	.word	0x58025940
 800677c:	1000823f 	.word	0x1000823f
 8006780:	40020940 	.word	0x40020940

08006784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006784:	b480      	push	{r7}
 8006786:	b089      	sub	sp, #36	@ 0x24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006792:	4b86      	ldr	r3, [pc, #536]	@ (80069ac <HAL_GPIO_Init+0x228>)
 8006794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006796:	e18c      	b.n	8006ab2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	2101      	movs	r1, #1
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	fa01 f303 	lsl.w	r3, r1, r3
 80067a4:	4013      	ands	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 817e 	beq.w	8006aac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d005      	beq.n	80067c8 <HAL_GPIO_Init+0x44>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d130      	bne.n	800682a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	2203      	movs	r2, #3
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067fe:	2201      	movs	r2, #1
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	f003 0201 	and.w	r2, r3, #1
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4313      	orrs	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	2b03      	cmp	r3, #3
 8006834:	d017      	beq.n	8006866 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	2203      	movs	r2, #3
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d123      	bne.n	80068ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	08da      	lsrs	r2, r3, #3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3208      	adds	r2, #8
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	220f      	movs	r2, #15
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	08da      	lsrs	r2, r3, #3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3208      	adds	r2, #8
 80068b4:	69b9      	ldr	r1, [r7, #24]
 80068b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	2203      	movs	r2, #3
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	43db      	mvns	r3, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f003 0203 	and.w	r2, r3, #3
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80d8 	beq.w	8006aac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068fc:	4b2c      	ldr	r3, [pc, #176]	@ (80069b0 <HAL_GPIO_Init+0x22c>)
 80068fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006902:	4a2b      	ldr	r2, [pc, #172]	@ (80069b0 <HAL_GPIO_Init+0x22c>)
 8006904:	f043 0302 	orr.w	r3, r3, #2
 8006908:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800690c:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <HAL_GPIO_Init+0x22c>)
 800690e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800691a:	4a26      	ldr	r2, [pc, #152]	@ (80069b4 <HAL_GPIO_Init+0x230>)
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	089b      	lsrs	r3, r3, #2
 8006920:	3302      	adds	r3, #2
 8006922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	220f      	movs	r2, #15
 8006932:	fa02 f303 	lsl.w	r3, r2, r3
 8006936:	43db      	mvns	r3, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4013      	ands	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1d      	ldr	r2, [pc, #116]	@ (80069b8 <HAL_GPIO_Init+0x234>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d04a      	beq.n	80069dc <HAL_GPIO_Init+0x258>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <HAL_GPIO_Init+0x238>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d02b      	beq.n	80069a6 <HAL_GPIO_Init+0x222>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <HAL_GPIO_Init+0x23c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d025      	beq.n	80069a2 <HAL_GPIO_Init+0x21e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1a      	ldr	r2, [pc, #104]	@ (80069c4 <HAL_GPIO_Init+0x240>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01f      	beq.n	800699e <HAL_GPIO_Init+0x21a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a19      	ldr	r2, [pc, #100]	@ (80069c8 <HAL_GPIO_Init+0x244>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d019      	beq.n	800699a <HAL_GPIO_Init+0x216>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a18      	ldr	r2, [pc, #96]	@ (80069cc <HAL_GPIO_Init+0x248>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <HAL_GPIO_Init+0x212>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a17      	ldr	r2, [pc, #92]	@ (80069d0 <HAL_GPIO_Init+0x24c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00d      	beq.n	8006992 <HAL_GPIO_Init+0x20e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a16      	ldr	r2, [pc, #88]	@ (80069d4 <HAL_GPIO_Init+0x250>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d007      	beq.n	800698e <HAL_GPIO_Init+0x20a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a15      	ldr	r2, [pc, #84]	@ (80069d8 <HAL_GPIO_Init+0x254>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d101      	bne.n	800698a <HAL_GPIO_Init+0x206>
 8006986:	2309      	movs	r3, #9
 8006988:	e029      	b.n	80069de <HAL_GPIO_Init+0x25a>
 800698a:	230a      	movs	r3, #10
 800698c:	e027      	b.n	80069de <HAL_GPIO_Init+0x25a>
 800698e:	2307      	movs	r3, #7
 8006990:	e025      	b.n	80069de <HAL_GPIO_Init+0x25a>
 8006992:	2306      	movs	r3, #6
 8006994:	e023      	b.n	80069de <HAL_GPIO_Init+0x25a>
 8006996:	2305      	movs	r3, #5
 8006998:	e021      	b.n	80069de <HAL_GPIO_Init+0x25a>
 800699a:	2304      	movs	r3, #4
 800699c:	e01f      	b.n	80069de <HAL_GPIO_Init+0x25a>
 800699e:	2303      	movs	r3, #3
 80069a0:	e01d      	b.n	80069de <HAL_GPIO_Init+0x25a>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e01b      	b.n	80069de <HAL_GPIO_Init+0x25a>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e019      	b.n	80069de <HAL_GPIO_Init+0x25a>
 80069aa:	bf00      	nop
 80069ac:	58000080 	.word	0x58000080
 80069b0:	58024400 	.word	0x58024400
 80069b4:	58000400 	.word	0x58000400
 80069b8:	58020000 	.word	0x58020000
 80069bc:	58020400 	.word	0x58020400
 80069c0:	58020800 	.word	0x58020800
 80069c4:	58020c00 	.word	0x58020c00
 80069c8:	58021000 	.word	0x58021000
 80069cc:	58021400 	.word	0x58021400
 80069d0:	58021800 	.word	0x58021800
 80069d4:	58021c00 	.word	0x58021c00
 80069d8:	58022400 	.word	0x58022400
 80069dc:	2300      	movs	r3, #0
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	f002 0203 	and.w	r2, r2, #3
 80069e4:	0092      	lsls	r2, r2, #2
 80069e6:	4093      	lsls	r3, r2
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069ee:	4938      	ldr	r1, [pc, #224]	@ (8006ad0 <HAL_GPIO_Init+0x34c>)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	3302      	adds	r3, #2
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	43db      	mvns	r3, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f47f ae6b 	bne.w	8006798 <HAL_GPIO_Init+0x14>
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	3724      	adds	r7, #36	@ 0x24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	58000400 	.word	0x58000400

08006ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	807b      	strh	r3, [r7, #2]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ae4:	787b      	ldrb	r3, [r7, #1]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aea:	887a      	ldrh	r2, [r7, #2]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006af0:	e003      	b.n	8006afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006af2:	887b      	ldrh	r3, [r7, #2]
 8006af4:	041a      	lsls	r2, r3, #16
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	619a      	str	r2, [r3, #24]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b14:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b24:	88fb      	ldrh	r3, [r7, #6]
 8006b26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7f9 fe0d 	bl	800074c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e08b      	b.n	8006c66 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa ffb6 	bl	8001ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	@ 0x24
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0201 	bic.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d107      	bne.n	8006bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bb2:	609a      	str	r2, [r3, #8]
 8006bb4:	e006      	b.n	8006bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d108      	bne.n	8006bde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bda:	605a      	str	r2, [r3, #4]
 8006bdc:	e007      	b.n	8006bee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c70 <HAL_I2C_Init+0x134>)
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69d9      	ldr	r1, [r3, #28]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	02008000 	.word	0x02008000

08006c74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	460b      	mov	r3, r1
 8006c82:	817b      	strh	r3, [r7, #10]
 8006c84:	4613      	mov	r3, r2
 8006c86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	f040 80fd 	bne.w	8006e90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_I2C_Master_Transmit+0x30>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e0f6      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x21e>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cac:	f7fd f838 	bl	8003d20 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	2319      	movs	r3, #25
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fa0a 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0e1      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2221      	movs	r2, #33	@ 0x21
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2210      	movs	r2, #16
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	893a      	ldrh	r2, [r7, #8]
 8006cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2bff      	cmp	r3, #255	@ 0xff
 8006cfe:	d906      	bls.n	8006d0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	22ff      	movs	r2, #255	@ 0xff
 8006d04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006d06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e007      	b.n	8006d1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d024      	beq.n	8006d70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	8979      	ldrh	r1, [r7, #10]
 8006d62:	4b4e      	ldr	r3, [pc, #312]	@ (8006e9c <HAL_I2C_Master_Transmit+0x228>)
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fc05 	bl	8007578 <I2C_TransferConfig>
 8006d6e:	e066      	b.n	8006e3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	8979      	ldrh	r1, [r7, #10]
 8006d78:	4b48      	ldr	r3, [pc, #288]	@ (8006e9c <HAL_I2C_Master_Transmit+0x228>)
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fbfa 	bl	8007578 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006d84:	e05b      	b.n	8006e3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	6a39      	ldr	r1, [r7, #32]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f9fd 	bl	800718a <I2C_WaitOnTXISFlagUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e07b      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d034      	beq.n	8006e3e <HAL_I2C_Master_Transmit+0x1ca>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d130      	bne.n	8006e3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	2200      	movs	r2, #0
 8006de4:	2180      	movs	r1, #128	@ 0x80
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f976 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e04d      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2bff      	cmp	r3, #255	@ 0xff
 8006dfe:	d90e      	bls.n	8006e1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	22ff      	movs	r2, #255	@ 0xff
 8006e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	8979      	ldrh	r1, [r7, #10]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fbae 	bl	8007578 <I2C_TransferConfig>
 8006e1c:	e00f      	b.n	8006e3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	8979      	ldrh	r1, [r7, #10]
 8006e30:	2300      	movs	r3, #0
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fb9d 	bl	8007578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d19e      	bne.n	8006d86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	6a39      	ldr	r1, [r7, #32]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f9e3 	bl	8007218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e01a      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2220      	movs	r2, #32
 8006e62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea0 <HAL_I2C_Master_Transmit+0x22c>)
 8006e70:	400b      	ands	r3, r1
 8006e72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e000      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006e90:	2302      	movs	r3, #2
  }
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	80002000 	.word	0x80002000
 8006ea0:	fe00e800 	.word	0xfe00e800

08006ea4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	817b      	strh	r3, [r7, #10]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	f040 80db 	bne.w	800707c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_I2C_Master_Receive+0x30>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e0d4      	b.n	800707e <HAL_I2C_Master_Receive+0x1da>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006edc:	f7fc ff20 	bl	8003d20 <HAL_GetTick>
 8006ee0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	2319      	movs	r3, #25
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f8f2 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e0bf      	b.n	800707e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2222      	movs	r2, #34	@ 0x22
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2210      	movs	r2, #16
 8006f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	893a      	ldrh	r2, [r7, #8]
 8006f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2bff      	cmp	r3, #255	@ 0xff
 8006f2e:	d90e      	bls.n	8006f4e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	22ff      	movs	r2, #255	@ 0xff
 8006f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	8979      	ldrh	r1, [r7, #10]
 8006f3e:	4b52      	ldr	r3, [pc, #328]	@ (8007088 <HAL_I2C_Master_Receive+0x1e4>)
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fb16 	bl	8007578 <I2C_TransferConfig>
 8006f4c:	e06d      	b.n	800702a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	8979      	ldrh	r1, [r7, #10]
 8006f60:	4b49      	ldr	r3, [pc, #292]	@ (8007088 <HAL_I2C_Master_Receive+0x1e4>)
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fb05 	bl	8007578 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006f6e:	e05c      	b.n	800702a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	6a39      	ldr	r1, [r7, #32]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f993 	bl	80072a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e07c      	b.n	800707e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d034      	beq.n	800702a <HAL_I2C_Master_Receive+0x186>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d130      	bne.n	800702a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2180      	movs	r1, #128	@ 0x80
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f880 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e04d      	b.n	800707e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2bff      	cmp	r3, #255	@ 0xff
 8006fea:	d90e      	bls.n	800700a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	22ff      	movs	r2, #255	@ 0xff
 8006ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	8979      	ldrh	r1, [r7, #10]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fab8 	bl	8007578 <I2C_TransferConfig>
 8007008:	e00f      	b.n	800702a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007018:	b2da      	uxtb	r2, r3
 800701a:	8979      	ldrh	r1, [r7, #10]
 800701c:	2300      	movs	r3, #0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 faa7 	bl	8007578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d19d      	bne.n	8006f70 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	6a39      	ldr	r1, [r7, #32]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f8ed 	bl	8007218 <I2C_WaitOnSTOPFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e01a      	b.n	800707e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2220      	movs	r2, #32
 800704e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6859      	ldr	r1, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <HAL_I2C_Master_Receive+0x1e8>)
 800705c:	400b      	ands	r3, r1
 800705e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	e000      	b.n	800707e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800707c:	2302      	movs	r3, #2
  }
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	80002400 	.word	0x80002400
 800708c:	fe00e800 	.word	0xfe00e800

08007090 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d103      	bne.n	80070ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d007      	beq.n	80070cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	619a      	str	r2, [r3, #24]
  }
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4613      	mov	r3, r2
 80070e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e8:	e03b      	b.n	8007162 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f962 	bl	80073b8 <I2C_IsErrorOccurred>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e041      	b.n	8007182 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007104:	d02d      	beq.n	8007162 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fc fe0b 	bl	8003d20 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d122      	bne.n	8007162 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4013      	ands	r3, r2
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	429a      	cmp	r2, r3
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	429a      	cmp	r2, r3
 8007138:	d113      	bne.n	8007162 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713e:	f043 0220 	orr.w	r2, r3, #32
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e00f      	b.n	8007182 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4013      	ands	r3, r2
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	bf0c      	ite	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	2300      	movne	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	429a      	cmp	r2, r3
 800717e:	d0b4      	beq.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007196:	e033      	b.n	8007200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f90b 	bl	80073b8 <I2C_IsErrorOccurred>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e031      	b.n	8007210 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071b2:	d025      	beq.n	8007200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b4:	f7fc fdb4 	bl	8003d20 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11a      	bne.n	8007200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d013      	beq.n	8007200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e007      	b.n	8007210 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b02      	cmp	r3, #2
 800720c:	d1c4      	bne.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007224:	e02f      	b.n	8007286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f8c4 	bl	80073b8 <I2C_IsErrorOccurred>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e02d      	b.n	8007296 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723a:	f7fc fd71 	bl	8003d20 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d11a      	bne.n	8007286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d013      	beq.n	8007286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e007      	b.n	8007296 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d1c8      	bne.n	8007226 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80072b0:	e071      	b.n	8007396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f87e 	bl	80073b8 <I2C_IsErrorOccurred>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d13b      	bne.n	800734c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d138      	bne.n	800734c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d105      	bne.n	80072f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d121      	bne.n	8007346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2210      	movs	r2, #16
 8007308:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2204      	movs	r2, #4
 800730e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2220      	movs	r2, #32
 8007316:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	4b24      	ldr	r3, [pc, #144]	@ (80073b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007324:	400b      	ands	r3, r1
 8007326:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
 8007344:	e002      	b.n	800734c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800734c:	f7fc fce8 	bl	8003d20 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	429a      	cmp	r2, r3
 800735a:	d302      	bcc.n	8007362 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d119      	bne.n	8007396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d116      	bne.n	8007396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b04      	cmp	r3, #4
 8007374:	d00f      	beq.n	8007396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737a:	f043 0220 	orr.w	r2, r3, #32
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d002      	beq.n	80073aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d083      	beq.n	80072b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	fe00e800 	.word	0xfe00e800

080073b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	@ 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d068      	beq.n	80074b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2210      	movs	r2, #16
 80073ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073ec:	e049      	b.n	8007482 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f4:	d045      	beq.n	8007482 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073f6:	f7fc fc93 	bl	8003d20 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <I2C_IsErrorOccurred+0x54>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d13a      	bne.n	8007482 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007416:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800741e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800742e:	d121      	bne.n	8007474 <I2C_IsErrorOccurred+0xbc>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007436:	d01d      	beq.n	8007474 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	2b20      	cmp	r3, #32
 800743c:	d01a      	beq.n	8007474 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800744c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800744e:	f7fc fc67 	bl	8003d20 <HAL_GetTick>
 8007452:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007454:	e00e      	b.n	8007474 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007456:	f7fc fc63 	bl	8003d20 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b19      	cmp	r3, #25
 8007462:	d907      	bls.n	8007474 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	f043 0320 	orr.w	r3, r3, #32
 800746a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007472:	e006      	b.n	8007482 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b20      	cmp	r3, #32
 8007480:	d1e9      	bne.n	8007456 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b20      	cmp	r3, #32
 800748e:	d003      	beq.n	8007498 <I2C_IsErrorOccurred+0xe0>
 8007490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0aa      	beq.n	80073ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2220      	movs	r2, #32
 80074a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	f043 0304 	orr.w	r3, r3, #4
 80074ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f043 0308 	orr.w	r3, r3, #8
 80074f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	f043 0302 	orr.w	r3, r3, #2
 8007512:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800751c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01c      	beq.n	8007566 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fdaf 	bl	8007090 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6859      	ldr	r1, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <I2C_IsErrorOccurred+0x1bc>)
 800753e:	400b      	ands	r3, r1
 8007540:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	431a      	orrs	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007566:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800756a:	4618      	mov	r0, r3
 800756c:	3728      	adds	r7, #40	@ 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	fe00e800 	.word	0xfe00e800

08007578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	817b      	strh	r3, [r7, #10]
 8007586:	4613      	mov	r3, r2
 8007588:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800758a:	897b      	ldrh	r3, [r7, #10]
 800758c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007590:	7a7b      	ldrb	r3, [r7, #9]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007598:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075a6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	0d5b      	lsrs	r3, r3, #21
 80075b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80075b6:	4b08      	ldr	r3, [pc, #32]	@ (80075d8 <I2C_TransferConfig+0x60>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	43db      	mvns	r3, r3
 80075bc:	ea02 0103 	and.w	r1, r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075ca:	bf00      	nop
 80075cc:	371c      	adds	r7, #28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	03ff63ff 	.word	0x03ff63ff

080075dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d138      	bne.n	8007664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e032      	b.n	8007666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2224      	movs	r2, #36	@ 0x24
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800762e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6819      	ldr	r1, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b20      	cmp	r3, #32
 8007686:	d139      	bne.n	80076fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007692:	2302      	movs	r3, #2
 8007694:	e033      	b.n	80076fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2224      	movs	r2, #36	@ 0x24
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0201 	bic.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	e000      	b.n	80076fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076fc:	2302      	movs	r3, #2
  }
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e11a      	b.n	8007954 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fa fa86 	bl	8001c44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d107      	bne.n	800775e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0201 	bic.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2200      	movs	r2, #0
 8007764:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b04      	cmp	r3, #4
 800776c:	d008      	beq.n	8007780 <HAL_I2S_Init+0x74>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b06      	cmp	r3, #6
 8007774:	d004      	beq.n	8007780 <HAL_I2S_Init+0x74>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2b0a      	cmp	r3, #10
 800777c:	f040 8094 	bne.w	80078a8 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d067      	beq.n	8007858 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8007790:	2302      	movs	r3, #2
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	e001      	b.n	800779a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8007796:	2301      	movs	r3, #1
 8007798:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b30      	cmp	r3, #48	@ 0x30
 80077a0:	d003      	beq.n	80077aa <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80077a6:	2bb0      	cmp	r3, #176	@ 0xb0
 80077a8:	d102      	bne.n	80077b0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80077aa:	2301      	movs	r3, #1
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	e001      	b.n	80077b4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a68      	ldr	r2, [pc, #416]	@ (800795c <HAL_I2S_Init+0x250>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d107      	bne.n	80077ce <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80077be:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80077c2:	f04f 0100 	mov.w	r1, #0
 80077c6:	f002 fca1 	bl	800a10c <HAL_RCCEx_GetPeriphCLKFreq>
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	e006      	b.n	80077dc <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80077ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80077d2:	f04f 0100 	mov.w	r1, #0
 80077d6:	f002 fc99 	bl	800a10c <HAL_RCCEx_GetPeriphCLKFreq>
 80077da:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077e4:	d113      	bne.n	800780e <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80077e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	3305      	adds	r3, #5
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	e014      	b.n	8007838 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800780e:	2220      	movs	r2, #32
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	461a      	mov	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	fbb2 f3f3 	udiv	r3, r2, r3
 8007834:	3305      	adds	r3, #5
 8007836:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4a49      	ldr	r2, [pc, #292]	@ (8007960 <HAL_I2S_Init+0x254>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e003      	b.n	8007860 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8007858:	2302      	movs	r3, #2
 800785a:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800785c:	2300      	movs	r3, #0
 800785e:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d102      	bne.n	800786c <HAL_I2S_Init+0x160>
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d002      	beq.n	8007872 <HAL_I2S_Init+0x166>
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2bff      	cmp	r3, #255	@ 0xff
 8007870:	d907      	bls.n	8007882 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007876:	f043 0210 	orr.w	r2, r3, #16
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e068      	b.n	8007954 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8007888:	2301      	movs	r3, #1
 800788a:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007892:	4b34      	ldr	r3, [pc, #208]	@ (8007964 <HAL_I2S_Init+0x258>)
 8007894:	4013      	ands	r3, r2
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	0411      	lsls	r1, r2, #16
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	0612      	lsls	r2, r2, #24
 800789e:	4311      	orrs	r1, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	430b      	orrs	r3, r1
 80078a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007968 <HAL_I2S_Init+0x25c>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6851      	ldr	r1, [r2, #4]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6892      	ldr	r2, [r2, #8]
 80078ba:	4311      	orrs	r1, r2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	68d2      	ldr	r2, [r2, #12]
 80078c0:	4311      	orrs	r1, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6992      	ldr	r2, [r2, #24]
 80078c6:	4311      	orrs	r1, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6a12      	ldr	r2, [r2, #32]
 80078cc:	4311      	orrs	r1, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078d2:	4311      	orrs	r1, r2
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6912      	ldr	r2, [r2, #16]
 80078d8:	430a      	orrs	r2, r1
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80078ee:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80078fe:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b04      	cmp	r3, #4
 800791c:	d007      	beq.n	800792e <HAL_I2S_Init+0x222>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b06      	cmp	r3, #6
 8007924:	d003      	beq.n	800792e <HAL_I2S_Init+0x222>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b0a      	cmp	r3, #10
 800792c:	d10a      	bne.n	8007944 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	58001400 	.word	0x58001400
 8007960:	cccccccd 	.word	0xcccccccd
 8007964:	fe00ffff 	.word	0xfe00ffff
 8007968:	fdff9040 	.word	0xfdff9040

0800796c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_I2S_Receive_DMA+0x1e>
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e086      	b.n	8007a9c <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b01      	cmp	r3, #1
 8007998:	d001      	beq.n	800799e <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
 800799c:	e07e      	b.n	8007a9c <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <HAL_I2S_Receive_DMA+0x42>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e076      	b.n	8007a9c <HAL_I2S_Receive_DMA+0x130>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2204      	movs	r2, #4
 80079ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	88fa      	ldrh	r2, [r7, #6]
 80079d4:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ec:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa4 <HAL_I2S_Receive_DMA+0x138>)
 80079ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f4:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa8 <HAL_I2S_Receive_DMA+0x13c>)
 80079f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fc:	4a2b      	ldr	r2, [pc, #172]	@ (8007aac <HAL_I2S_Receive_DMA+0x140>)
 80079fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3330      	adds	r3, #48	@ 0x30
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a10:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007a16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007a18:	f7fc fe1a 	bl	8004650 <HAL_DMA_Start_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a26:	f043 0208 	orr.w	r2, r3, #8
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	e02a      	b.n	8007a9c <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d107      	bne.n	8007a64 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a62:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d107      	bne.n	8007a82 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a90:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	08007ba5 	.word	0x08007ba5
 8007aa8:	08007b63 	.word	0x08007b63
 8007aac:	08007bc1 	.word	0x08007bc1

08007ab0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007aca:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ada:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00f      	beq.n	8007b04 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fd f81b 	bl	8004b24 <HAL_DMA_Abort>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af8:	f043 0208 	orr.w	r2, r3, #8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00f      	beq.n	8007b2c <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fd f807 	bl	8004b24 <HAL_DMA_Abort>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b20:	f043 0208 	orr.w	r2, r3, #8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10e      	bne.n	8007b96 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b86:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7f9 fbe6 	bl	8001368 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7f9 fbc8 	bl	8001348 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007bdc:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf6:	f043 0208 	orr.w	r2, r3, #8
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff ffa5 	bl	8007b4e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e0fe      	b.n	8007e1c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7fa fabc 	bl	80021b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f008 fdc1 	bl	80107cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7c1a      	ldrb	r2, [r3, #16]
 8007c52:	f88d 2000 	strb.w	r2, [sp]
 8007c56:	3304      	adds	r3, #4
 8007c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c5a:	f008 fd45 	bl	80106e8 <USB_CoreInit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e0d5      	b.n	8007e1c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f008 fdb9 	bl	80107ee <USB_SetCurrentMode>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e0c6      	b.n	8007e1c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	e04a      	b.n	8007d2a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c94:	7bfa      	ldrb	r2, [r7, #15]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3315      	adds	r3, #21
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ca8:	7bfa      	ldrb	r2, [r7, #15]
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3314      	adds	r3, #20
 8007cb8:	7bfa      	ldrb	r2, [r7, #15]
 8007cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007cbc:	7bfa      	ldrb	r2, [r7, #15]
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	b298      	uxth	r0, r3
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	332e      	adds	r3, #46	@ 0x2e
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3318      	adds	r3, #24
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ce8:	7bfa      	ldrb	r2, [r7, #15]
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	331c      	adds	r3, #28
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007cfc:	7bfa      	ldrb	r2, [r7, #15]
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	3320      	adds	r3, #32
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	3324      	adds	r3, #36	@ 0x24
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	3301      	adds	r3, #1
 8007d28:	73fb      	strb	r3, [r7, #15]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	7bfa      	ldrb	r2, [r7, #15]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d3af      	bcc.n	8007c94 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
 8007d38:	e044      	b.n	8007dc4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d3a:	7bfa      	ldrb	r2, [r7, #15]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d50:	7bfa      	ldrb	r2, [r7, #15]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007d62:	7bfa      	ldrb	r2, [r7, #15]
 8007d64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d66:	7bfa      	ldrb	r2, [r7, #15]
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d7c:	7bfa      	ldrb	r2, [r7, #15]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	4613      	mov	r3, r2
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007da8:	7bfa      	ldrb	r2, [r7, #15]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	7bfa      	ldrb	r2, [r7, #15]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d3b5      	bcc.n	8007d3a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7c1a      	ldrb	r2, [r3, #16]
 8007dd6:	f88d 2000 	strb.w	r2, [sp]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dde:	f008 fd53 	bl	8010888 <USB_DevInit>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e013      	b.n	8007e1c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7b1b      	ldrb	r3, [r3, #12]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d102      	bne.n	8007e10 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f80a 	bl	8007e24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f008 ff0e 	bl	8010c36 <USB_DevDisconnect>

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e52:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <HAL_PCDEx_ActivateLPM+0x44>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	10000003 	.word	0x10000003

08007e6c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e74:	4b19      	ldr	r3, [pc, #100]	@ (8007edc <HAL_PWREx_ConfigSupply+0x70>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d00a      	beq.n	8007e96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e80:	4b16      	ldr	r3, [pc, #88]	@ (8007edc <HAL_PWREx_ConfigSupply+0x70>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d001      	beq.n	8007e92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e01f      	b.n	8007ed2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e01d      	b.n	8007ed2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e96:	4b11      	ldr	r3, [pc, #68]	@ (8007edc <HAL_PWREx_ConfigSupply+0x70>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f023 0207 	bic.w	r2, r3, #7
 8007e9e:	490f      	ldr	r1, [pc, #60]	@ (8007edc <HAL_PWREx_ConfigSupply+0x70>)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ea6:	f7fb ff3b 	bl	8003d20 <HAL_GetTick>
 8007eaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007eac:	e009      	b.n	8007ec2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007eae:	f7fb ff37 	bl	8003d20 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ebc:	d901      	bls.n	8007ec2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e007      	b.n	8007ed2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ec2:	4b06      	ldr	r3, [pc, #24]	@ (8007edc <HAL_PWREx_ConfigSupply+0x70>)
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ece:	d1ee      	bne.n	8007eae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	58024800 	.word	0x58024800

08007ee0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ee4:	4b05      	ldr	r3, [pc, #20]	@ (8007efc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4a04      	ldr	r2, [pc, #16]	@ (8007efc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eee:	60d3      	str	r3, [r2, #12]
}
 8007ef0:	bf00      	nop
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	58024800 	.word	0x58024800

08007f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08c      	sub	sp, #48	@ 0x30
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e3c8      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 8087 	beq.w	800802e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f20:	4b88      	ldr	r3, [pc, #544]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f2a:	4b86      	ldr	r3, [pc, #536]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d007      	beq.n	8007f46 <HAL_RCC_OscConfig+0x46>
 8007f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f38:	2b18      	cmp	r3, #24
 8007f3a:	d110      	bne.n	8007f5e <HAL_RCC_OscConfig+0x5e>
 8007f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d10b      	bne.n	8007f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f46:	4b7f      	ldr	r3, [pc, #508]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d06c      	beq.n	800802c <HAL_RCC_OscConfig+0x12c>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d168      	bne.n	800802c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e3a2      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f66:	d106      	bne.n	8007f76 <HAL_RCC_OscConfig+0x76>
 8007f68:	4b76      	ldr	r3, [pc, #472]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a75      	ldr	r2, [pc, #468]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e02e      	b.n	8007fd4 <HAL_RCC_OscConfig+0xd4>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCC_OscConfig+0x98>
 8007f7e:	4b71      	ldr	r3, [pc, #452]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a70      	ldr	r2, [pc, #448]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e01d      	b.n	8007fd4 <HAL_RCC_OscConfig+0xd4>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fa0:	d10c      	bne.n	8007fbc <HAL_RCC_OscConfig+0xbc>
 8007fa2:	4b68      	ldr	r3, [pc, #416]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a67      	ldr	r2, [pc, #412]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	4b65      	ldr	r3, [pc, #404]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a64      	ldr	r2, [pc, #400]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e00b      	b.n	8007fd4 <HAL_RCC_OscConfig+0xd4>
 8007fbc:	4b61      	ldr	r3, [pc, #388]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a60      	ldr	r2, [pc, #384]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d013      	beq.n	8008004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fb fea0 	bl	8003d20 <HAL_GetTick>
 8007fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fe4:	f7fb fe9c 	bl	8003d20 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b64      	cmp	r3, #100	@ 0x64
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e356      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ff6:	4b53      	ldr	r3, [pc, #332]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f0      	beq.n	8007fe4 <HAL_RCC_OscConfig+0xe4>
 8008002:	e014      	b.n	800802e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008004:	f7fb fe8c 	bl	8003d20 <HAL_GetTick>
 8008008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800800c:	f7fb fe88 	bl	8003d20 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b64      	cmp	r3, #100	@ 0x64
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e342      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800801e:	4b49      	ldr	r3, [pc, #292]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1f0      	bne.n	800800c <HAL_RCC_OscConfig+0x10c>
 800802a:	e000      	b.n	800802e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800802c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 808c 	beq.w	8008154 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800803c:	4b41      	ldr	r3, [pc, #260]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008044:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008046:	4b3f      	ldr	r3, [pc, #252]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <HAL_RCC_OscConfig+0x162>
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2b18      	cmp	r3, #24
 8008056:	d137      	bne.n	80080c8 <HAL_RCC_OscConfig+0x1c8>
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d132      	bne.n	80080c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008062:	4b38      	ldr	r3, [pc, #224]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d005      	beq.n	800807a <HAL_RCC_OscConfig+0x17a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e314      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800807a:	4b32      	ldr	r3, [pc, #200]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f023 0219 	bic.w	r2, r3, #25
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	492f      	ldr	r1, [pc, #188]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008088:	4313      	orrs	r3, r2
 800808a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7fb fe48 	bl	8003d20 <HAL_GetTick>
 8008090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008094:	f7fb fe44 	bl	8003d20 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e2fe      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080a6:	4b27      	ldr	r3, [pc, #156]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0304 	and.w	r3, r3, #4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f0      	beq.n	8008094 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b2:	4b24      	ldr	r3, [pc, #144]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	061b      	lsls	r3, r3, #24
 80080c0:	4920      	ldr	r1, [pc, #128]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c6:	e045      	b.n	8008154 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d026      	beq.n	800811e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f023 0219 	bic.w	r2, r3, #25
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4919      	ldr	r1, [pc, #100]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e2:	f7fb fe1d 	bl	8003d20 <HAL_GetTick>
 80080e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080ea:	f7fb fe19 	bl	8003d20 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e2d3      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080fc:	4b11      	ldr	r3, [pc, #68]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0f0      	beq.n	80080ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008108:	4b0e      	ldr	r3, [pc, #56]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	061b      	lsls	r3, r3, #24
 8008116:	490b      	ldr	r1, [pc, #44]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008118:	4313      	orrs	r3, r2
 800811a:	604b      	str	r3, [r1, #4]
 800811c:	e01a      	b.n	8008154 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800811e:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a08      	ldr	r2, [pc, #32]	@ (8008144 <HAL_RCC_OscConfig+0x244>)
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812a:	f7fb fdf9 	bl	8003d20 <HAL_GetTick>
 800812e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008130:	e00a      	b.n	8008148 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008132:	f7fb fdf5 	bl	8003d20 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d903      	bls.n	8008148 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e2af      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
 8008144:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008148:	4b96      	ldr	r3, [pc, #600]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1ee      	bne.n	8008132 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	d06a      	beq.n	8008236 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008160:	4b90      	ldr	r3, [pc, #576]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008168:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800816a:	4b8e      	ldr	r3, [pc, #568]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b08      	cmp	r3, #8
 8008174:	d007      	beq.n	8008186 <HAL_RCC_OscConfig+0x286>
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	2b18      	cmp	r3, #24
 800817a:	d11b      	bne.n	80081b4 <HAL_RCC_OscConfig+0x2b4>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b01      	cmp	r3, #1
 8008184:	d116      	bne.n	80081b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008186:	4b87      	ldr	r3, [pc, #540]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_RCC_OscConfig+0x29e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	2b80      	cmp	r3, #128	@ 0x80
 8008198:	d001      	beq.n	800819e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e282      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800819e:	4b81      	ldr	r3, [pc, #516]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	061b      	lsls	r3, r3, #24
 80081ac:	497d      	ldr	r1, [pc, #500]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081b2:	e040      	b.n	8008236 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d023      	beq.n	8008204 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081bc:	4b79      	ldr	r3, [pc, #484]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a78      	ldr	r2, [pc, #480]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7fb fdaa 	bl	8003d20 <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081d0:	f7fb fda6 	bl	8003d20 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e260      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081e2:	4b70      	ldr	r3, [pc, #448]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0f0      	beq.n	80081d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081ee:	4b6d      	ldr	r3, [pc, #436]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	061b      	lsls	r3, r3, #24
 80081fc:	4969      	ldr	r1, [pc, #420]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	60cb      	str	r3, [r1, #12]
 8008202:	e018      	b.n	8008236 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008204:	4b67      	ldr	r3, [pc, #412]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a66      	ldr	r2, [pc, #408]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800820a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800820e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fb fd86 	bl	8003d20 <HAL_GetTick>
 8008214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008218:	f7fb fd82 	bl	8003d20 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e23c      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800822a:	4b5e      	ldr	r3, [pc, #376]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d036      	beq.n	80082b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d019      	beq.n	800827e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800824a:	4b56      	ldr	r3, [pc, #344]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800824c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800824e:	4a55      	ldr	r2, [pc, #340]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008256:	f7fb fd63 	bl	8003d20 <HAL_GetTick>
 800825a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800825e:	f7fb fd5f 	bl	8003d20 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e219      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008270:	4b4c      	ldr	r3, [pc, #304]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f0      	beq.n	800825e <HAL_RCC_OscConfig+0x35e>
 800827c:	e018      	b.n	80082b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800827e:	4b49      	ldr	r3, [pc, #292]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008282:	4a48      	ldr	r2, [pc, #288]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828a:	f7fb fd49 	bl	8003d20 <HAL_GetTick>
 800828e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008290:	e008      	b.n	80082a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008292:	f7fb fd45 	bl	8003d20 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e1ff      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082a4:	4b3f      	ldr	r3, [pc, #252]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80082a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f0      	bne.n	8008292 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d036      	beq.n	800832a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d019      	beq.n	80082f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082c4:	4b37      	ldr	r3, [pc, #220]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a36      	ldr	r2, [pc, #216]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80082ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082d0:	f7fb fd26 	bl	8003d20 <HAL_GetTick>
 80082d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082d8:	f7fb fd22 	bl	8003d20 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e1dc      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082ea:	4b2e      	ldr	r3, [pc, #184]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0f0      	beq.n	80082d8 <HAL_RCC_OscConfig+0x3d8>
 80082f6:	e018      	b.n	800832a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082f8:	4b2a      	ldr	r3, [pc, #168]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a29      	ldr	r2, [pc, #164]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 80082fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008302:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008304:	f7fb fd0c 	bl	8003d20 <HAL_GetTick>
 8008308:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800830c:	f7fb fd08 	bl	8003d20 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e1c2      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800831e:	4b21      	ldr	r3, [pc, #132]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f0      	bne.n	800830c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8086 	beq.w	8008444 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008338:	4b1b      	ldr	r3, [pc, #108]	@ (80083a8 <HAL_RCC_OscConfig+0x4a8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a1a      	ldr	r2, [pc, #104]	@ (80083a8 <HAL_RCC_OscConfig+0x4a8>)
 800833e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008344:	f7fb fcec 	bl	8003d20 <HAL_GetTick>
 8008348:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800834c:	f7fb fce8 	bl	8003d20 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	@ 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e1a2      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800835e:	4b12      	ldr	r3, [pc, #72]	@ (80083a8 <HAL_RCC_OscConfig+0x4a8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f0      	beq.n	800834c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d106      	bne.n	8008380 <HAL_RCC_OscConfig+0x480>
 8008372:	4b0c      	ldr	r3, [pc, #48]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008376:	4a0b      	ldr	r2, [pc, #44]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	6713      	str	r3, [r2, #112]	@ 0x70
 800837e:	e032      	b.n	80083e6 <HAL_RCC_OscConfig+0x4e6>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d111      	bne.n	80083ac <HAL_RCC_OscConfig+0x4ac>
 8008388:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838c:	4a05      	ldr	r2, [pc, #20]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	6713      	str	r3, [r2, #112]	@ 0x70
 8008394:	4b03      	ldr	r3, [pc, #12]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008398:	4a02      	ldr	r2, [pc, #8]	@ (80083a4 <HAL_RCC_OscConfig+0x4a4>)
 800839a:	f023 0304 	bic.w	r3, r3, #4
 800839e:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a0:	e021      	b.n	80083e6 <HAL_RCC_OscConfig+0x4e6>
 80083a2:	bf00      	nop
 80083a4:	58024400 	.word	0x58024400
 80083a8:	58024800 	.word	0x58024800
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	d10c      	bne.n	80083ce <HAL_RCC_OscConfig+0x4ce>
 80083b4:	4b83      	ldr	r3, [pc, #524]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b8:	4a82      	ldr	r2, [pc, #520]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083ba:	f043 0304 	orr.w	r3, r3, #4
 80083be:	6713      	str	r3, [r2, #112]	@ 0x70
 80083c0:	4b80      	ldr	r3, [pc, #512]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c4:	4a7f      	ldr	r2, [pc, #508]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80083cc:	e00b      	b.n	80083e6 <HAL_RCC_OscConfig+0x4e6>
 80083ce:	4b7d      	ldr	r3, [pc, #500]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	4a7c      	ldr	r2, [pc, #496]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083d4:	f023 0301 	bic.w	r3, r3, #1
 80083d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083da:	4b7a      	ldr	r3, [pc, #488]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083de:	4a79      	ldr	r2, [pc, #484]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80083e0:	f023 0304 	bic.w	r3, r3, #4
 80083e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d015      	beq.n	800841a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ee:	f7fb fc97 	bl	8003d20 <HAL_GetTick>
 80083f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083f4:	e00a      	b.n	800840c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f6:	f7fb fc93 	bl	8003d20 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008404:	4293      	cmp	r3, r2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e14b      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800840c:	4b6d      	ldr	r3, [pc, #436]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800840e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0ee      	beq.n	80083f6 <HAL_RCC_OscConfig+0x4f6>
 8008418:	e014      	b.n	8008444 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841a:	f7fb fc81 	bl	8003d20 <HAL_GetTick>
 800841e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008420:	e00a      	b.n	8008438 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008422:	f7fb fc7d 	bl	8003d20 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008430:	4293      	cmp	r3, r2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e135      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008438:	4b62      	ldr	r3, [pc, #392]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1ee      	bne.n	8008422 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 812a 	beq.w	80086a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800844e:	4b5d      	ldr	r3, [pc, #372]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008456:	2b18      	cmp	r3, #24
 8008458:	f000 80ba 	beq.w	80085d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008460:	2b02      	cmp	r3, #2
 8008462:	f040 8095 	bne.w	8008590 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008466:	4b57      	ldr	r3, [pc, #348]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a56      	ldr	r2, [pc, #344]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800846c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008472:	f7fb fc55 	bl	8003d20 <HAL_GetTick>
 8008476:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800847a:	f7fb fc51 	bl	8003d20 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e10b      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800848c:	4b4d      	ldr	r3, [pc, #308]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f0      	bne.n	800847a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008498:	4b4a      	ldr	r3, [pc, #296]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800849a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800849c:	4b4a      	ldr	r3, [pc, #296]	@ (80085c8 <HAL_RCC_OscConfig+0x6c8>)
 800849e:	4013      	ands	r3, r2
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084a8:	0112      	lsls	r2, r2, #4
 80084aa:	430a      	orrs	r2, r1
 80084ac:	4945      	ldr	r1, [pc, #276]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b6:	3b01      	subs	r3, #1
 80084b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c0:	3b01      	subs	r3, #1
 80084c2:	025b      	lsls	r3, r3, #9
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	3b01      	subs	r3, #1
 80084ce:	041b      	lsls	r3, r3, #16
 80084d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084da:	3b01      	subs	r3, #1
 80084dc:	061b      	lsls	r3, r3, #24
 80084de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084e2:	4938      	ldr	r1, [pc, #224]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80084e8:	4b36      	ldr	r3, [pc, #216]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80084ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ec:	4a35      	ldr	r2, [pc, #212]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084f4:	4b33      	ldr	r3, [pc, #204]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80084f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084f8:	4b34      	ldr	r3, [pc, #208]	@ (80085cc <HAL_RCC_OscConfig+0x6cc>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008500:	00d2      	lsls	r2, r2, #3
 8008502:	4930      	ldr	r1, [pc, #192]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008504:	4313      	orrs	r3, r2
 8008506:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008508:	4b2e      	ldr	r3, [pc, #184]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	f023 020c 	bic.w	r2, r3, #12
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	492b      	ldr	r1, [pc, #172]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008516:	4313      	orrs	r3, r2
 8008518:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800851a:	4b2a      	ldr	r3, [pc, #168]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851e:	f023 0202 	bic.w	r2, r3, #2
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008526:	4927      	ldr	r1, [pc, #156]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008528:	4313      	orrs	r3, r2
 800852a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800852c:	4b25      	ldr	r3, [pc, #148]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	4a24      	ldr	r2, [pc, #144]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008538:	4b22      	ldr	r3, [pc, #136]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800853a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853c:	4a21      	ldr	r2, [pc, #132]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800853e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008544:	4b1f      	ldr	r3, [pc, #124]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008548:	4a1e      	ldr	r2, [pc, #120]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800854a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800854e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008550:	4b1c      	ldr	r3, [pc, #112]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	4a1b      	ldr	r2, [pc, #108]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800855c:	4b19      	ldr	r3, [pc, #100]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a18      	ldr	r2, [pc, #96]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fb fbda 	bl	8003d20 <HAL_GetTick>
 800856c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008570:	f7fb fbd6 	bl	8003d20 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e090      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008582:	4b10      	ldr	r3, [pc, #64]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f0      	beq.n	8008570 <HAL_RCC_OscConfig+0x670>
 800858e:	e088      	b.n	80086a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008590:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a0b      	ldr	r2, [pc, #44]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 8008596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800859a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859c:	f7fb fbc0 	bl	8003d20 <HAL_GetTick>
 80085a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085a4:	f7fb fbbc 	bl	8003d20 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e076      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085b6:	4b03      	ldr	r3, [pc, #12]	@ (80085c4 <HAL_RCC_OscConfig+0x6c4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0x6a4>
 80085c2:	e06e      	b.n	80086a2 <HAL_RCC_OscConfig+0x7a2>
 80085c4:	58024400 	.word	0x58024400
 80085c8:	fffffc0c 	.word	0xfffffc0c
 80085cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085d0:	4b36      	ldr	r3, [pc, #216]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 80085d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085d6:	4b35      	ldr	r3, [pc, #212]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d031      	beq.n	8008648 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f003 0203 	and.w	r2, r3, #3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d12a      	bne.n	8008648 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	091b      	lsrs	r3, r3, #4
 80085f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085fe:	429a      	cmp	r2, r3
 8008600:	d122      	bne.n	8008648 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800860e:	429a      	cmp	r2, r3
 8008610:	d11a      	bne.n	8008648 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	0a5b      	lsrs	r3, r3, #9
 8008616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008620:	429a      	cmp	r2, r3
 8008622:	d111      	bne.n	8008648 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	0c1b      	lsrs	r3, r3, #16
 8008628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008630:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008632:	429a      	cmp	r2, r3
 8008634:	d108      	bne.n	8008648 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	0e1b      	lsrs	r3, r3, #24
 800863a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008642:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008644:	429a      	cmp	r2, r3
 8008646:	d001      	beq.n	800864c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e02b      	b.n	80086a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800864c:	4b17      	ldr	r3, [pc, #92]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 800864e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008650:	08db      	lsrs	r3, r3, #3
 8008652:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008656:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	d01f      	beq.n	80086a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	4a11      	ldr	r2, [pc, #68]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800866e:	f7fb fb57 	bl	8003d20 <HAL_GetTick>
 8008672:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008674:	bf00      	nop
 8008676:	f7fb fb53 	bl	8003d20 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	4293      	cmp	r3, r2
 8008680:	d0f9      	beq.n	8008676 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008682:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 8008684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008686:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <HAL_RCC_OscConfig+0x7b0>)
 8008688:	4013      	ands	r3, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800868e:	00d2      	lsls	r2, r2, #3
 8008690:	4906      	ldr	r1, [pc, #24]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 8008692:	4313      	orrs	r3, r2
 8008694:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008696:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 8008698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869a:	4a04      	ldr	r2, [pc, #16]	@ (80086ac <HAL_RCC_OscConfig+0x7ac>)
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3730      	adds	r7, #48	@ 0x30
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	58024400 	.word	0x58024400
 80086b0:	ffff0007 	.word	0xffff0007

080086b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e19c      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086c8:	4b8a      	ldr	r3, [pc, #552]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d910      	bls.n	80086f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086d6:	4b87      	ldr	r3, [pc, #540]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f023 020f 	bic.w	r2, r3, #15
 80086de:	4985      	ldr	r1, [pc, #532]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086e6:	4b83      	ldr	r3, [pc, #524]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d001      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e184      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d010      	beq.n	8008726 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	4b7b      	ldr	r3, [pc, #492]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008710:	429a      	cmp	r2, r3
 8008712:	d908      	bls.n	8008726 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008714:	4b78      	ldr	r3, [pc, #480]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	4975      	ldr	r1, [pc, #468]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008722:	4313      	orrs	r3, r2
 8008724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b00      	cmp	r3, #0
 8008730:	d010      	beq.n	8008754 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695a      	ldr	r2, [r3, #20]
 8008736:	4b70      	ldr	r3, [pc, #448]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800873e:	429a      	cmp	r2, r3
 8008740:	d908      	bls.n	8008754 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008742:	4b6d      	ldr	r3, [pc, #436]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	496a      	ldr	r1, [pc, #424]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008750:	4313      	orrs	r3, r2
 8008752:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	d010      	beq.n	8008782 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	4b64      	ldr	r3, [pc, #400]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800876c:	429a      	cmp	r2, r3
 800876e:	d908      	bls.n	8008782 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008770:	4b61      	ldr	r3, [pc, #388]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	495e      	ldr	r1, [pc, #376]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 800877e:	4313      	orrs	r3, r2
 8008780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d010      	beq.n	80087b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	4b59      	ldr	r3, [pc, #356]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800879a:	429a      	cmp	r2, r3
 800879c:	d908      	bls.n	80087b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800879e:	4b56      	ldr	r3, [pc, #344]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	4953      	ldr	r1, [pc, #332]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d010      	beq.n	80087de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	4b4d      	ldr	r3, [pc, #308]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d908      	bls.n	80087de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087cc:	4b4a      	ldr	r3, [pc, #296]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f023 020f 	bic.w	r2, r3, #15
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4947      	ldr	r1, [pc, #284]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d055      	beq.n	8008896 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087ea:	4b43      	ldr	r3, [pc, #268]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	4940      	ldr	r1, [pc, #256]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d107      	bne.n	8008814 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008804:	4b3c      	ldr	r3, [pc, #240]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d121      	bne.n	8008854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e0f6      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d107      	bne.n	800882c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800881c:	4b36      	ldr	r3, [pc, #216]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d115      	bne.n	8008854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e0ea      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d107      	bne.n	8008844 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008834:	4b30      	ldr	r3, [pc, #192]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800883c:	2b00      	cmp	r3, #0
 800883e:	d109      	bne.n	8008854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e0de      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008844:	4b2c      	ldr	r3, [pc, #176]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e0d6      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008854:	4b28      	ldr	r3, [pc, #160]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f023 0207 	bic.w	r2, r3, #7
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4925      	ldr	r1, [pc, #148]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008862:	4313      	orrs	r3, r2
 8008864:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008866:	f7fb fa5b 	bl	8003d20 <HAL_GetTick>
 800886a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800886c:	e00a      	b.n	8008884 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800886e:	f7fb fa57 	bl	8003d20 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800887c:	4293      	cmp	r3, r2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e0be      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008884:	4b1c      	ldr	r3, [pc, #112]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	429a      	cmp	r2, r3
 8008894:	d1eb      	bne.n	800886e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d010      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	4b14      	ldr	r3, [pc, #80]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d208      	bcs.n	80088c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088b2:	4b11      	ldr	r3, [pc, #68]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f023 020f 	bic.w	r2, r3, #15
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	490e      	ldr	r1, [pc, #56]	@ (80088f8 <HAL_RCC_ClockConfig+0x244>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088c4:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d214      	bcs.n	80088fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d2:	4b08      	ldr	r3, [pc, #32]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f023 020f 	bic.w	r2, r3, #15
 80088da:	4906      	ldr	r1, [pc, #24]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	4313      	orrs	r3, r2
 80088e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e2:	4b04      	ldr	r3, [pc, #16]	@ (80088f4 <HAL_RCC_ClockConfig+0x240>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d005      	beq.n	80088fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e086      	b.n	8008a02 <HAL_RCC_ClockConfig+0x34e>
 80088f4:	52002000 	.word	0x52002000
 80088f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d010      	beq.n	800892a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008914:	429a      	cmp	r2, r3
 8008916:	d208      	bcs.n	800892a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008918:	4b3c      	ldr	r3, [pc, #240]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	4939      	ldr	r1, [pc, #228]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 8008926:	4313      	orrs	r3, r2
 8008928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d010      	beq.n	8008958 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	695a      	ldr	r2, [r3, #20]
 800893a:	4b34      	ldr	r3, [pc, #208]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008942:	429a      	cmp	r2, r3
 8008944:	d208      	bcs.n	8008958 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008946:	4b31      	ldr	r3, [pc, #196]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	492e      	ldr	r1, [pc, #184]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 8008954:	4313      	orrs	r3, r2
 8008956:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b00      	cmp	r3, #0
 8008962:	d010      	beq.n	8008986 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	4b28      	ldr	r3, [pc, #160]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008970:	429a      	cmp	r2, r3
 8008972:	d208      	bcs.n	8008986 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008974:	4b25      	ldr	r3, [pc, #148]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	4922      	ldr	r1, [pc, #136]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 8008982:	4313      	orrs	r3, r2
 8008984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d010      	beq.n	80089b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69da      	ldr	r2, [r3, #28]
 8008996:	4b1d      	ldr	r3, [pc, #116]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800899e:	429a      	cmp	r2, r3
 80089a0:	d208      	bcs.n	80089b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089a2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	4917      	ldr	r1, [pc, #92]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089b4:	f000 f834 	bl	8008a20 <HAL_RCC_GetSysClockFreq>
 80089b8:	4602      	mov	r2, r0
 80089ba:	4b14      	ldr	r3, [pc, #80]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	0a1b      	lsrs	r3, r3, #8
 80089c0:	f003 030f 	and.w	r3, r3, #15
 80089c4:	4912      	ldr	r1, [pc, #72]	@ (8008a10 <HAL_RCC_ClockConfig+0x35c>)
 80089c6:	5ccb      	ldrb	r3, [r1, r3]
 80089c8:	f003 031f 	and.w	r3, r3, #31
 80089cc:	fa22 f303 	lsr.w	r3, r2, r3
 80089d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089d2:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <HAL_RCC_ClockConfig+0x358>)
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	4a0d      	ldr	r2, [pc, #52]	@ (8008a10 <HAL_RCC_ClockConfig+0x35c>)
 80089dc:	5cd3      	ldrb	r3, [r2, r3]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008a14 <HAL_RCC_ClockConfig+0x360>)
 80089ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008a18 <HAL_RCC_ClockConfig+0x364>)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089f2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <HAL_RCC_ClockConfig+0x368>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fb f948 	bl	8003c8c <HAL_InitTick>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	0801f6e0 	.word	0x0801f6e0
 8008a14:	24000004 	.word	0x24000004
 8008a18:	24000000 	.word	0x24000000
 8008a1c:	24000008 	.word	0x24000008

08008a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	@ 0x24
 8008a24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a26:	4bb3      	ldr	r3, [pc, #716]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a2e:	2b18      	cmp	r3, #24
 8008a30:	f200 8155 	bhi.w	8008cde <HAL_RCC_GetSysClockFreq+0x2be>
 8008a34:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008aa1 	.word	0x08008aa1
 8008a40:	08008cdf 	.word	0x08008cdf
 8008a44:	08008cdf 	.word	0x08008cdf
 8008a48:	08008cdf 	.word	0x08008cdf
 8008a4c:	08008cdf 	.word	0x08008cdf
 8008a50:	08008cdf 	.word	0x08008cdf
 8008a54:	08008cdf 	.word	0x08008cdf
 8008a58:	08008cdf 	.word	0x08008cdf
 8008a5c:	08008ac7 	.word	0x08008ac7
 8008a60:	08008cdf 	.word	0x08008cdf
 8008a64:	08008cdf 	.word	0x08008cdf
 8008a68:	08008cdf 	.word	0x08008cdf
 8008a6c:	08008cdf 	.word	0x08008cdf
 8008a70:	08008cdf 	.word	0x08008cdf
 8008a74:	08008cdf 	.word	0x08008cdf
 8008a78:	08008cdf 	.word	0x08008cdf
 8008a7c:	08008acd 	.word	0x08008acd
 8008a80:	08008cdf 	.word	0x08008cdf
 8008a84:	08008cdf 	.word	0x08008cdf
 8008a88:	08008cdf 	.word	0x08008cdf
 8008a8c:	08008cdf 	.word	0x08008cdf
 8008a90:	08008cdf 	.word	0x08008cdf
 8008a94:	08008cdf 	.word	0x08008cdf
 8008a98:	08008cdf 	.word	0x08008cdf
 8008a9c:	08008ad3 	.word	0x08008ad3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa0:	4b94      	ldr	r3, [pc, #592]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aac:	4b91      	ldr	r3, [pc, #580]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	08db      	lsrs	r3, r3, #3
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	4a90      	ldr	r2, [pc, #576]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8008abc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008abe:	e111      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ac0:	4b8d      	ldr	r3, [pc, #564]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ac2:	61bb      	str	r3, [r7, #24]
      break;
 8008ac4:	e10e      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ac8:	61bb      	str	r3, [r7, #24]
      break;
 8008aca:	e10b      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008acc:	4b8c      	ldr	r3, [pc, #560]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ace:	61bb      	str	r3, [r7, #24]
      break;
 8008ad0:	e108      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ad2:	4b88      	ldr	r3, [pc, #544]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad6:	f003 0303 	and.w	r3, r3, #3
 8008ada:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008adc:	4b85      	ldr	r3, [pc, #532]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	091b      	lsrs	r3, r3, #4
 8008ae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ae6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ae8:	4b82      	ldr	r3, [pc, #520]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008af2:	4b80      	ldr	r3, [pc, #512]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af6:	08db      	lsrs	r3, r3, #3
 8008af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	fb02 f303 	mul.w	r3, r2, r3
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 80e1 	beq.w	8008cd8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	f000 8083 	beq.w	8008c24 <HAL_RCC_GetSysClockFreq+0x204>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	f200 80a1 	bhi.w	8008c68 <HAL_RCC_GetSysClockFreq+0x248>
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_RCC_GetSysClockFreq+0x114>
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d056      	beq.n	8008be0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b32:	e099      	b.n	8008c68 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b34:	4b6f      	ldr	r3, [pc, #444]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d02d      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b40:	4b6c      	ldr	r3, [pc, #432]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	08db      	lsrs	r3, r3, #3
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	4a6b      	ldr	r2, [pc, #428]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6a:	4b62      	ldr	r3, [pc, #392]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b9a:	e087      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008d08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bae:	4b51      	ldr	r3, [pc, #324]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bde:	e065      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf2:	4b40      	ldr	r3, [pc, #256]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c22:	e043      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c36:	4b2f      	ldr	r3, [pc, #188]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c66:	e021      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008caa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008cac:	4b11      	ldr	r3, [pc, #68]	@ (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb0:	0a5b      	lsrs	r3, r3, #9
 8008cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd0:	ee17 3a90 	vmov	r3, s15
 8008cd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008cd6:	e005      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61bb      	str	r3, [r7, #24]
      break;
 8008cdc:	e002      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008cde:	4b07      	ldr	r3, [pc, #28]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ce0:	61bb      	str	r3, [r7, #24]
      break;
 8008ce2:	bf00      	nop
  }

  return sysclockfreq;
 8008ce4:	69bb      	ldr	r3, [r7, #24]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3724      	adds	r7, #36	@ 0x24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	03d09000 	.word	0x03d09000
 8008cfc:	003d0900 	.word	0x003d0900
 8008d00:	017d7840 	.word	0x017d7840
 8008d04:	46000000 	.word	0x46000000
 8008d08:	4c742400 	.word	0x4c742400
 8008d0c:	4a742400 	.word	0x4a742400
 8008d10:	4bbebc20 	.word	0x4bbebc20

08008d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d1a:	f7ff fe81 	bl	8008a20 <HAL_RCC_GetSysClockFreq>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4b10      	ldr	r3, [pc, #64]	@ (8008d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	0a1b      	lsrs	r3, r3, #8
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	490f      	ldr	r1, [pc, #60]	@ (8008d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d2c:	5ccb      	ldrb	r3, [r1, r3]
 8008d2e:	f003 031f 	and.w	r3, r3, #31
 8008d32:	fa22 f303 	lsr.w	r3, r2, r3
 8008d36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d38:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	4a09      	ldr	r2, [pc, #36]	@ (8008d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d42:	5cd3      	ldrb	r3, [r2, r3]
 8008d44:	f003 031f 	and.w	r3, r3, #31
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4e:	4a07      	ldr	r2, [pc, #28]	@ (8008d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008d50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d52:	4a07      	ldr	r2, [pc, #28]	@ (8008d70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d58:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	58024400 	.word	0x58024400
 8008d68:	0801f6e0 	.word	0x0801f6e0
 8008d6c:	24000004 	.word	0x24000004
 8008d70:	24000000 	.word	0x24000000

08008d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d78:	f7ff ffcc 	bl	8008d14 <HAL_RCC_GetHCLKFreq>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	091b      	lsrs	r3, r3, #4
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	4904      	ldr	r1, [pc, #16]	@ (8008d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d8a:	5ccb      	ldrb	r3, [r1, r3]
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	0801f6e0 	.word	0x0801f6e0

08008da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008da4:	f7ff ffb6 	bl	8008d14 <HAL_RCC_GetHCLKFreq>
 8008da8:	4602      	mov	r2, r0
 8008daa:	4b06      	ldr	r3, [pc, #24]	@ (8008dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	4904      	ldr	r1, [pc, #16]	@ (8008dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008db6:	5ccb      	ldrb	r3, [r1, r3]
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	58024400 	.word	0x58024400
 8008dc8:	0801f6e0 	.word	0x0801f6e0

08008dcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dd0:	b0c6      	sub	sp, #280	@ 0x118
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dde:	2300      	movs	r3, #0
 8008de0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008df0:	2500      	movs	r5, #0
 8008df2:	ea54 0305 	orrs.w	r3, r4, r5
 8008df6:	d049      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e02:	d02f      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e08:	d828      	bhi.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e0e:	d01a      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e14:	d822      	bhi.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e1e:	d007      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e20:	e01c      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e22:	4bab      	ldr	r3, [pc, #684]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e26:	4aaa      	ldr	r2, [pc, #680]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e2e:	e01a      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e34:	3308      	adds	r3, #8
 8008e36:	2102      	movs	r1, #2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 fa49 	bl	800b2d0 <RCCEx_PLL2_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e44:	e00f      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4a:	3328      	adds	r3, #40	@ 0x28
 8008e4c:	2102      	movs	r1, #2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f002 faf0 	bl	800b434 <RCCEx_PLL3_Config>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e5a:	e004      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e62:	e000      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e6e:	4b98      	ldr	r3, [pc, #608]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e7c:	4a94      	ldr	r2, [pc, #592]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e82:	e003      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008e98:	f04f 0900 	mov.w	r9, #0
 8008e9c:	ea58 0309 	orrs.w	r3, r8, r9
 8008ea0:	d047      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d82a      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008eac:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008ec9 	.word	0x08008ec9
 8008eb8:	08008ed7 	.word	0x08008ed7
 8008ebc:	08008eed 	.word	0x08008eed
 8008ec0:	08008f0b 	.word	0x08008f0b
 8008ec4:	08008f0b 	.word	0x08008f0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b81      	ldr	r3, [pc, #516]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	4a80      	ldr	r2, [pc, #512]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ed4:	e01a      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eda:	3308      	adds	r3, #8
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f002 f9f6 	bl	800b2d0 <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eea:	e00f      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef0:	3328      	adds	r3, #40	@ 0x28
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f002 fa9d 	bl	800b434 <RCCEx_PLL3_Config>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f00:	e004      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f08:	e000      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f14:	4b6e      	ldr	r3, [pc, #440]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f18:	f023 0107 	bic.w	r1, r3, #7
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f22:	4a6b      	ldr	r2, [pc, #428]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f24:	430b      	orrs	r3, r1
 8008f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f28:	e003      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008f3e:	f04f 0b00 	mov.w	fp, #0
 8008f42:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f46:	d05b      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f50:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008f54:	d03b      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008f56:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008f5a:	d834      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f60:	d037      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f66:	d82e      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f6c:	d033      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008f6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f72:	d828      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f78:	d01a      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f7e:	d822      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f88:	d007      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008f8a:	e01c      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f8c:	4b50      	ldr	r3, [pc, #320]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f90:	4a4f      	ldr	r2, [pc, #316]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f98:	e01e      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f002 f994 	bl	800b2d0 <RCCEx_PLL2_Config>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008fae:	e013      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb4:	3328      	adds	r3, #40	@ 0x28
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f002 fa3b 	bl	800b434 <RCCEx_PLL3_Config>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fc4:	e008      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fcc:	e004      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008fce:	bf00      	nop
 8008fd0:	e002      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008fd2:	bf00      	nop
 8008fd4:	e000      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10b      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ff0:	4a37      	ldr	r2, [pc, #220]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ff6:	e003      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ffc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800900c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009010:	2300      	movs	r3, #0
 8009012:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009016:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800901a:	460b      	mov	r3, r1
 800901c:	4313      	orrs	r3, r2
 800901e:	d05d      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009024:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009028:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800902c:	d03b      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800902e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009032:	d834      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009034:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009038:	d037      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800903a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800903e:	d82e      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009040:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009044:	d033      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800904a:	d828      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800904c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009050:	d01a      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009056:	d822      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800905c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009060:	d007      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009062:	e01c      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009064:	4b1a      	ldr	r3, [pc, #104]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009068:	4a19      	ldr	r2, [pc, #100]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800906a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800906e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009070:	e01e      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009076:	3308      	adds	r3, #8
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f002 f928 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009080:	4603      	mov	r3, r0
 8009082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009086:	e013      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908c:	3328      	adds	r3, #40	@ 0x28
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f002 f9cf 	bl	800b434 <RCCEx_PLL3_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800909c:	e008      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090a4:	e004      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80090a6:	bf00      	nop
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80090ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10d      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80090b8:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090c8:	4a01      	ldr	r2, [pc, #4]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090ca:	430b      	orrs	r3, r1
 80090cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80090ce:	e005      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80090d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80090dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80090e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4313      	orrs	r3, r2
 80090fa:	d03a      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009102:	2b30      	cmp	r3, #48	@ 0x30
 8009104:	d01f      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009106:	2b30      	cmp	r3, #48	@ 0x30
 8009108:	d819      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800910a:	2b20      	cmp	r3, #32
 800910c:	d00c      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800910e:	2b20      	cmp	r3, #32
 8009110:	d815      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d019      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009116:	2b10      	cmp	r3, #16
 8009118:	d111      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800911a:	4baa      	ldr	r3, [pc, #680]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800911c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911e:	4aa9      	ldr	r2, [pc, #676]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009126:	e011      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912c:	3308      	adds	r3, #8
 800912e:	2102      	movs	r1, #2
 8009130:	4618      	mov	r0, r3
 8009132:	f002 f8cd 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800913c:	e006      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009144:	e002      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009146:	bf00      	nop
 8009148:	e000      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800914a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800914c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009154:	4b9b      	ldr	r3, [pc, #620]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009158:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009162:	4a98      	ldr	r2, [pc, #608]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009164:	430b      	orrs	r3, r1
 8009166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009168:	e003      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800916e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800917e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009182:	2300      	movs	r3, #0
 8009184:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009188:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800918c:	460b      	mov	r3, r1
 800918e:	4313      	orrs	r3, r2
 8009190:	d051      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800919c:	d035      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800919e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091a2:	d82e      	bhi.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80091a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091a8:	d031      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80091aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091ae:	d828      	bhi.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80091b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b4:	d01a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80091b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ba:	d822      	bhi.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80091c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c4:	d007      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80091c6:	e01c      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c8:	4b7e      	ldr	r3, [pc, #504]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091cc:	4a7d      	ldr	r2, [pc, #500]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091d4:	e01c      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091da:	3308      	adds	r3, #8
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 f876 	bl	800b2d0 <RCCEx_PLL2_Config>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091ea:	e011      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f0:	3328      	adds	r3, #40	@ 0x28
 80091f2:	2100      	movs	r1, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 f91d 	bl	800b434 <RCCEx_PLL3_Config>
 80091fa:	4603      	mov	r3, r0
 80091fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009200:	e006      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009208:	e002      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800920a:	bf00      	nop
 800920c:	e000      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800920e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009218:	4b6a      	ldr	r3, [pc, #424]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800921a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800921c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009226:	4a67      	ldr	r2, [pc, #412]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009228:	430b      	orrs	r3, r1
 800922a:	6513      	str	r3, [r2, #80]	@ 0x50
 800922c:	e003      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009232:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009242:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009246:	2300      	movs	r3, #0
 8009248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800924c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009250:	460b      	mov	r3, r1
 8009252:	4313      	orrs	r3, r2
 8009254:	d053      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800925c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009260:	d033      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009266:	d82c      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009268:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800926c:	d02f      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x502>
 800926e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009272:	d826      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009278:	d02b      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800927a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800927e:	d820      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009284:	d012      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800928a:	d81a      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d022      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009294:	d115      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929a:	3308      	adds	r3, #8
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f002 f816 	bl	800b2d0 <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092aa:	e015      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b0:	3328      	adds	r3, #40	@ 0x28
 80092b2:	2101      	movs	r1, #1
 80092b4:	4618      	mov	r0, r3
 80092b6:	f002 f8bd 	bl	800b434 <RCCEx_PLL3_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092c0:	e00a      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092c8:	e006      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092ca:	bf00      	nop
 80092cc:	e004      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092ce:	bf00      	nop
 80092d0:	e002      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092d2:	bf00      	nop
 80092d4:	e000      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092e0:	4b38      	ldr	r3, [pc, #224]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ee:	4a35      	ldr	r2, [pc, #212]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092f0:	430b      	orrs	r3, r1
 80092f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80092f4:	e003      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800930a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800930e:	2300      	movs	r3, #0
 8009310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009314:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009318:	460b      	mov	r3, r1
 800931a:	4313      	orrs	r3, r2
 800931c:	d058      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800931e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932a:	d033      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800932c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009330:	d82c      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009336:	d02f      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933c:	d826      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800933e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009342:	d02b      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009348:	d820      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800934e:	d012      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009354:	d81a      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d022      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800935a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800935e:	d115      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009364:	3308      	adds	r3, #8
 8009366:	2101      	movs	r1, #1
 8009368:	4618      	mov	r0, r3
 800936a:	f001 ffb1 	bl	800b2d0 <RCCEx_PLL2_Config>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009374:	e015      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800937a:	3328      	adds	r3, #40	@ 0x28
 800937c:	2101      	movs	r1, #1
 800937e:	4618      	mov	r0, r3
 8009380:	f002 f858 	bl	800b434 <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800938a:	e00a      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009392:	e006      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009394:	bf00      	nop
 8009396:	e004      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009398:	bf00      	nop
 800939a:	e002      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800939c:	bf00      	nop
 800939e:	e000      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80093a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10e      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093aa:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80093ba:	4a02      	ldr	r2, [pc, #8]	@ (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093bc:	430b      	orrs	r3, r1
 80093be:	6593      	str	r3, [r2, #88]	@ 0x58
 80093c0:	e006      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80093c2:	bf00      	nop
 80093c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80093dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80093e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4313      	orrs	r3, r2
 80093ee:	d037      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fa:	d00e      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80093fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009400:	d816      	bhi.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d018      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940a:	d111      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940c:	4bc4      	ldr	r3, [pc, #784]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	4ac3      	ldr	r2, [pc, #780]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009418:	e00f      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800941a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941e:	3308      	adds	r3, #8
 8009420:	2101      	movs	r1, #1
 8009422:	4618      	mov	r0, r3
 8009424:	f001 ff54 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800942e:	e004      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009436:	e000      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800943a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009442:	4bb7      	ldr	r3, [pc, #732]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009446:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800944e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009450:	4ab3      	ldr	r2, [pc, #716]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009452:	430b      	orrs	r3, r1
 8009454:	6513      	str	r3, [r2, #80]	@ 0x50
 8009456:	e003      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800945c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800946c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009470:	2300      	movs	r3, #0
 8009472:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009476:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800947a:	460b      	mov	r3, r1
 800947c:	4313      	orrs	r3, r2
 800947e:	d039      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009486:	2b03      	cmp	r3, #3
 8009488:	d81c      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800948a:	a201      	add	r2, pc, #4	@ (adr r2, 8009490 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094cd 	.word	0x080094cd
 8009494:	080094a1 	.word	0x080094a1
 8009498:	080094af 	.word	0x080094af
 800949c:	080094cd 	.word	0x080094cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a0:	4b9f      	ldr	r3, [pc, #636]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a4:	4a9e      	ldr	r2, [pc, #632]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094ac:	e00f      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b2:	3308      	adds	r3, #8
 80094b4:	2102      	movs	r1, #2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 ff0a 	bl	800b2d0 <RCCEx_PLL2_Config>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094c2:	e004      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094ca:	e000      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80094cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094d6:	4b92      	ldr	r3, [pc, #584]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094da:	f023 0103 	bic.w	r1, r3, #3
 80094de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094e6:	430b      	orrs	r3, r1
 80094e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094ea:	e003      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009504:	2300      	movs	r3, #0
 8009506:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800950a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800950e:	460b      	mov	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	f000 8099 	beq.w	8009648 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009516:	4b83      	ldr	r3, [pc, #524]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a82      	ldr	r2, [pc, #520]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800951c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009520:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009522:	f7fa fbfd 	bl	8003d20 <HAL_GetTick>
 8009526:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800952a:	e00b      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800952c:	f7fa fbf8 	bl	8003d20 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b64      	cmp	r3, #100	@ 0x64
 800953a:	d903      	bls.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009542:	e005      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009544:	4b77      	ldr	r3, [pc, #476]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0ed      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009554:	2b00      	cmp	r3, #0
 8009556:	d173      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009558:	4b71      	ldr	r3, [pc, #452]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800955a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800955c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009560:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009564:	4053      	eors	r3, r2
 8009566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800956a:	2b00      	cmp	r3, #0
 800956c:	d015      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800956e:	4b6c      	ldr	r3, [pc, #432]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009576:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800957a:	4b69      	ldr	r3, [pc, #420]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800957c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800957e:	4a68      	ldr	r2, [pc, #416]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009584:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009586:	4b66      	ldr	r3, [pc, #408]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800958a:	4a65      	ldr	r2, [pc, #404]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800958c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009590:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009592:	4a63      	ldr	r2, [pc, #396]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009598:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800959a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a6:	d118      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7fa fbba 	bl	8003d20 <HAL_GetTick>
 80095ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095b0:	e00d      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095b2:	f7fa fbb5 	bl	8003d20 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80095bc:	1ad2      	subs	r2, r2, r3
 80095be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d903      	bls.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80095cc:	e005      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095ce:	4b54      	ldr	r3, [pc, #336]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0eb      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80095da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d129      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095f2:	d10e      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80095f4:	4b4a      	ldr	r3, [pc, #296]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80095fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009604:	091a      	lsrs	r2, r3, #4
 8009606:	4b48      	ldr	r3, [pc, #288]	@ (8009728 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009608:	4013      	ands	r3, r2
 800960a:	4a45      	ldr	r2, [pc, #276]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800960c:	430b      	orrs	r3, r1
 800960e:	6113      	str	r3, [r2, #16]
 8009610:	e005      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009612:	4b43      	ldr	r3, [pc, #268]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	4a42      	ldr	r2, [pc, #264]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800961c:	6113      	str	r3, [r2, #16]
 800961e:	4b40      	ldr	r3, [pc, #256]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009620:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800962a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962e:	4a3c      	ldr	r2, [pc, #240]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009630:	430b      	orrs	r3, r1
 8009632:	6713      	str	r3, [r2, #112]	@ 0x70
 8009634:	e008      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800963a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800963e:	e003      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009644:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f002 0301 	and.w	r3, r2, #1
 8009654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009658:	2300      	movs	r3, #0
 800965a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800965e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009662:	460b      	mov	r3, r1
 8009664:	4313      	orrs	r3, r2
 8009666:	f000 808f 	beq.w	8009788 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009670:	2b28      	cmp	r3, #40	@ 0x28
 8009672:	d871      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009674:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	08009761 	.word	0x08009761
 8009680:	08009759 	.word	0x08009759
 8009684:	08009759 	.word	0x08009759
 8009688:	08009759 	.word	0x08009759
 800968c:	08009759 	.word	0x08009759
 8009690:	08009759 	.word	0x08009759
 8009694:	08009759 	.word	0x08009759
 8009698:	08009759 	.word	0x08009759
 800969c:	0800972d 	.word	0x0800972d
 80096a0:	08009759 	.word	0x08009759
 80096a4:	08009759 	.word	0x08009759
 80096a8:	08009759 	.word	0x08009759
 80096ac:	08009759 	.word	0x08009759
 80096b0:	08009759 	.word	0x08009759
 80096b4:	08009759 	.word	0x08009759
 80096b8:	08009759 	.word	0x08009759
 80096bc:	08009743 	.word	0x08009743
 80096c0:	08009759 	.word	0x08009759
 80096c4:	08009759 	.word	0x08009759
 80096c8:	08009759 	.word	0x08009759
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009759 	.word	0x08009759
 80096d4:	08009759 	.word	0x08009759
 80096d8:	08009759 	.word	0x08009759
 80096dc:	08009761 	.word	0x08009761
 80096e0:	08009759 	.word	0x08009759
 80096e4:	08009759 	.word	0x08009759
 80096e8:	08009759 	.word	0x08009759
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009759 	.word	0x08009759
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009759 	.word	0x08009759
 80096fc:	08009761 	.word	0x08009761
 8009700:	08009759 	.word	0x08009759
 8009704:	08009759 	.word	0x08009759
 8009708:	08009759 	.word	0x08009759
 800970c:	08009759 	.word	0x08009759
 8009710:	08009759 	.word	0x08009759
 8009714:	08009759 	.word	0x08009759
 8009718:	08009759 	.word	0x08009759
 800971c:	08009761 	.word	0x08009761
 8009720:	58024400 	.word	0x58024400
 8009724:	58024800 	.word	0x58024800
 8009728:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009730:	3308      	adds	r3, #8
 8009732:	2101      	movs	r1, #1
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fdcb 	bl	800b2d0 <RCCEx_PLL2_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009740:	e00f      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009746:	3328      	adds	r3, #40	@ 0x28
 8009748:	2101      	movs	r1, #1
 800974a:	4618      	mov	r0, r3
 800974c:	f001 fe72 	bl	800b434 <RCCEx_PLL3_Config>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009756:	e004      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800975e:	e000      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800976a:	4bbf      	ldr	r3, [pc, #764]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800976c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009776:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009778:	4abb      	ldr	r2, [pc, #748]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800977a:	430b      	orrs	r3, r1
 800977c:	6553      	str	r3, [r2, #84]	@ 0x54
 800977e:	e003      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009780:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009784:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f002 0302 	and.w	r3, r2, #2
 8009794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009798:	2300      	movs	r3, #0
 800979a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800979e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4313      	orrs	r3, r2
 80097a6:	d041      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80097a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ae:	2b05      	cmp	r3, #5
 80097b0:	d824      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80097b2:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	08009805 	.word	0x08009805
 80097bc:	080097d1 	.word	0x080097d1
 80097c0:	080097e7 	.word	0x080097e7
 80097c4:	08009805 	.word	0x08009805
 80097c8:	08009805 	.word	0x08009805
 80097cc:	08009805 	.word	0x08009805
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d4:	3308      	adds	r3, #8
 80097d6:	2101      	movs	r1, #1
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fd79 	bl	800b2d0 <RCCEx_PLL2_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097e4:	e00f      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ea:	3328      	adds	r3, #40	@ 0x28
 80097ec:	2101      	movs	r1, #1
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 fe20 	bl	800b434 <RCCEx_PLL3_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097fa:	e004      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009802:	e000      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009806:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800980e:	4b96      	ldr	r3, [pc, #600]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009812:	f023 0107 	bic.w	r1, r3, #7
 8009816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800981c:	4a92      	ldr	r2, [pc, #584]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800981e:	430b      	orrs	r3, r1
 8009820:	6553      	str	r3, [r2, #84]	@ 0x54
 8009822:	e003      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f002 0304 	and.w	r3, r2, #4
 8009838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800983c:	2300      	movs	r3, #0
 800983e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009842:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009846:	460b      	mov	r3, r1
 8009848:	4313      	orrs	r3, r2
 800984a:	d044      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800984c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009854:	2b05      	cmp	r3, #5
 8009856:	d825      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009858:	a201      	add	r2, pc, #4	@ (adr r2, 8009860 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	080098ad 	.word	0x080098ad
 8009864:	08009879 	.word	0x08009879
 8009868:	0800988f 	.word	0x0800988f
 800986c:	080098ad 	.word	0x080098ad
 8009870:	080098ad 	.word	0x080098ad
 8009874:	080098ad 	.word	0x080098ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987c:	3308      	adds	r3, #8
 800987e:	2101      	movs	r1, #1
 8009880:	4618      	mov	r0, r3
 8009882:	f001 fd25 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800988c:	e00f      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	3328      	adds	r3, #40	@ 0x28
 8009894:	2101      	movs	r1, #1
 8009896:	4618      	mov	r0, r3
 8009898:	f001 fdcc 	bl	800b434 <RCCEx_PLL3_Config>
 800989c:	4603      	mov	r3, r0
 800989e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80098a2:	e004      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098aa:	e000      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80098ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10b      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098b6:	4b6c      	ldr	r3, [pc, #432]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ba:	f023 0107 	bic.w	r1, r3, #7
 80098be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c6:	4a68      	ldr	r2, [pc, #416]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80098cc:	e003      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f002 0320 	and.w	r3, r2, #32
 80098e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098e6:	2300      	movs	r3, #0
 80098e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4313      	orrs	r3, r2
 80098f4:	d055      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009902:	d033      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009908:	d82c      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800990a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990e:	d02f      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009914:	d826      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800991a:	d02b      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800991c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009920:	d820      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009926:	d012      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800992c:	d81a      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d022      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009936:	d115      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993c:	3308      	adds	r3, #8
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f001 fcc5 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800994c:	e015      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800994e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009952:	3328      	adds	r3, #40	@ 0x28
 8009954:	2102      	movs	r1, #2
 8009956:	4618      	mov	r0, r3
 8009958:	f001 fd6c 	bl	800b434 <RCCEx_PLL3_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009962:	e00a      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800996a:	e006      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800996c:	bf00      	nop
 800996e:	e004      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800997a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009982:	4b39      	ldr	r3, [pc, #228]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009986:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800998a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009992:	4a35      	ldr	r2, [pc, #212]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009994:	430b      	orrs	r3, r1
 8009996:	6553      	str	r3, [r2, #84]	@ 0x54
 8009998:	e003      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800999e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80099ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099b2:	2300      	movs	r3, #0
 80099b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80099bc:	460b      	mov	r3, r1
 80099be:	4313      	orrs	r3, r2
 80099c0:	d058      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80099c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099ce:	d033      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80099d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099d4:	d82c      	bhi.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099da:	d02f      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80099dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e0:	d826      	bhi.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099e6:	d02b      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80099e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099ec:	d820      	bhi.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f2:	d012      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80099f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f8:	d81a      	bhi.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d022      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80099fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a02:	d115      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	3308      	adds	r3, #8
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 fc5f 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a18:	e015      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1e:	3328      	adds	r3, #40	@ 0x28
 8009a20:	2102      	movs	r1, #2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 fd06 	bl	800b434 <RCCEx_PLL3_Config>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a2e:	e00a      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a36:	e006      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a38:	bf00      	nop
 8009a3a:	e004      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a3c:	bf00      	nop
 8009a3e:	e002      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a40:	bf00      	nop
 8009a42:	e000      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10e      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a4e:	4b06      	ldr	r3, [pc, #24]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a5e:	4a02      	ldr	r2, [pc, #8]	@ (8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a60:	430b      	orrs	r3, r1
 8009a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a64:	e006      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009a66:	bf00      	nop
 8009a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a84:	2300      	movs	r3, #0
 8009a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	d055      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009aa0:	d033      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009aa2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009aa6:	d82c      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aac:	d02f      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ab2:	d826      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ab4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009ab8:	d02b      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009aba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009abe:	d820      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac4:	d012      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aca:	d81a      	bhi.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d022      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad4:	d115      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	3308      	adds	r3, #8
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 fbf6 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009aea:	e015      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af0:	3328      	adds	r3, #40	@ 0x28
 8009af2:	2102      	movs	r1, #2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fc9d 	bl	800b434 <RCCEx_PLL3_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b00:	e00a      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b08:	e006      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b0a:	bf00      	nop
 8009b0c:	e004      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b0e:	bf00      	nop
 8009b10:	e002      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b12:	bf00      	nop
 8009b14:	e000      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10b      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b20:	4ba0      	ldr	r3, [pc, #640]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b30:	4a9c      	ldr	r2, [pc, #624]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b32:	430b      	orrs	r3, r1
 8009b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b36:	e003      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f002 0308 	and.w	r3, r2, #8
 8009b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b50:	2300      	movs	r3, #0
 8009b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d01e      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b6c:	d10c      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b72:	3328      	adds	r3, #40	@ 0x28
 8009b74:	2102      	movs	r1, #2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fc5c 	bl	800b434 <RCCEx_PLL3_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009b88:	4b86      	ldr	r3, [pc, #536]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b98:	4a82      	ldr	r2, [pc, #520]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f002 0310 	and.w	r3, r2, #16
 8009baa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bb4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	d01e      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bca:	d10c      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd0:	3328      	adds	r3, #40	@ 0x28
 8009bd2:	2102      	movs	r1, #2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f001 fc2d 	bl	800b434 <RCCEx_PLL3_Config>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009be6:	4b6f      	ldr	r3, [pc, #444]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009c08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c0e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d03e      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c24:	d022      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2a:	d81b      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c34:	d00b      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009c36:	e015      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 fb45 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c4c:	e00f      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c52:	3328      	adds	r3, #40	@ 0x28
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fbec 	bl	800b434 <RCCEx_PLL3_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c62:	e004      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c6a:	e000      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c76:	4b4b      	ldr	r3, [pc, #300]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c86:	4a47      	ldr	r2, [pc, #284]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c8c:	e003      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009ca2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ca8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009cac:	460b      	mov	r3, r1
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	d03b      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cbe:	d01f      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009cc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cc4:	d818      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cca:	d003      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cd0:	d007      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009cd2:	e011      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd4:	4b33      	ldr	r3, [pc, #204]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	4a32      	ldr	r2, [pc, #200]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ce0:	e00f      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce6:	3328      	adds	r3, #40	@ 0x28
 8009ce8:	2101      	movs	r1, #1
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 fba2 	bl	800b434 <RCCEx_PLL3_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cf6:	e004      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cfe:	e000      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10b      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d0a:	4b26      	ldr	r3, [pc, #152]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d1a:	4a22      	ldr	r2, [pc, #136]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d20:	e003      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009d36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d38:	2300      	movs	r3, #0
 8009d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009d40:	460b      	mov	r3, r1
 8009d42:	4313      	orrs	r3, r2
 8009d44:	d034      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d54:	d007      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009d56:	e011      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d58:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4a11      	ldr	r2, [pc, #68]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d64:	e00e      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 faae 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10d      	bne.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9a:	4a02      	ldr	r2, [pc, #8]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009da0:	e006      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009da2:	bf00      	nop
 8009da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009dbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dc2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	d00c      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd0:	3328      	adds	r3, #40	@ 0x28
 8009dd2:	2102      	movs	r1, #2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 fb2d 	bl	800b434 <RCCEx_PLL3_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009df2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009df4:	2300      	movs	r3, #0
 8009df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009df8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d036      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e0c:	d018      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e12:	d811      	bhi.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e18:	d014      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1e:	d80b      	bhi.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d011      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e28:	d106      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2a:	4bb7      	ldr	r3, [pc, #732]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2e:	4ab6      	ldr	r2, [pc, #728]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009e36:	e008      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e3e:	e004      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e40:	bf00      	nop
 8009e42:	e002      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e44:	bf00      	nop
 8009e46:	e000      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e52:	4bad      	ldr	r3, [pc, #692]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e60:	4aa9      	ldr	r2, [pc, #676]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e62:	430b      	orrs	r3, r1
 8009e64:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e66:	e003      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009e7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e7e:	2300      	movs	r3, #0
 8009e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009e86:	460b      	mov	r3, r1
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	d009      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e8c:	4b9e      	ldr	r3, [pc, #632]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e9a:	4a9b      	ldr	r2, [pc, #620]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eae:	2300      	movs	r3, #0
 8009eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	d009      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ebc:	4b92      	ldr	r3, [pc, #584]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eca:	4a8f      	ldr	r2, [pc, #572]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ede:	2300      	movs	r3, #0
 8009ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ee2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	d00e      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009eec:	4b86      	ldr	r3, [pc, #536]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	4a85      	ldr	r2, [pc, #532]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ef2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ef6:	6113      	str	r3, [r2, #16]
 8009ef8:	4b83      	ldr	r3, [pc, #524]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009efa:	6919      	ldr	r1, [r3, #16]
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009f04:	4a80      	ldr	r2, [pc, #512]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f06:	430b      	orrs	r3, r1
 8009f08:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009f20:	460b      	mov	r3, r1
 8009f22:	4313      	orrs	r3, r2
 8009f24:	d009      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f26:	4b78      	ldr	r3, [pc, #480]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f34:	4a74      	ldr	r2, [pc, #464]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f36:	430b      	orrs	r3, r1
 8009f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009f46:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f48:	2300      	movs	r3, #0
 8009f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009f50:	460b      	mov	r3, r1
 8009f52:	4313      	orrs	r3, r2
 8009f54:	d00a      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f56:	4b6c      	ldr	r3, [pc, #432]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f5a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f66:	4a68      	ldr	r2, [pc, #416]	@ (800a108 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	2100      	movs	r1, #0
 8009f76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d011      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f001 f99d 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6239      	str	r1, [r7, #32]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	d011      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fcc:	3308      	adds	r3, #8
 8009fce:	2101      	movs	r1, #1
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 f97d 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	61b9      	str	r1, [r7, #24]
 8009ff8:	f003 0304 	and.w	r3, r3, #4
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d011      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00c:	3308      	adds	r3, #8
 800a00e:	2102      	movs	r1, #2
 800a010:	4618      	mov	r0, r3
 800a012:	f001 f95d 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a01c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	2100      	movs	r1, #0
 800a036:	6139      	str	r1, [r7, #16]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a042:	460b      	mov	r3, r1
 800a044:	4313      	orrs	r3, r2
 800a046:	d011      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04c:	3328      	adds	r3, #40	@ 0x28
 800a04e:	2100      	movs	r1, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f001 f9ef 	bl	800b434 <RCCEx_PLL3_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	2100      	movs	r1, #0
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a082:	460b      	mov	r3, r1
 800a084:	4313      	orrs	r3, r2
 800a086:	d011      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08c:	3328      	adds	r3, #40	@ 0x28
 800a08e:	2101      	movs	r1, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f001 f9cf 	bl	800b434 <RCCEx_PLL3_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a09c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6039      	str	r1, [r7, #0]
 800a0b8:	f003 0320 	and.w	r3, r3, #32
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	d011      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0cc:	3328      	adds	r3, #40	@ 0x28
 800a0ce:	2102      	movs	r1, #2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 f9af 	bl	800b434 <RCCEx_PLL3_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a0dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a0ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e000      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a100:	46bd      	mov	sp, r7
 800a102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a106:	bf00      	nop
 800a108:	58024400 	.word	0x58024400

0800a10c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b090      	sub	sp, #64	@ 0x40
 800a110:	af00      	add	r7, sp, #0
 800a112:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a11e:	430b      	orrs	r3, r1
 800a120:	f040 8094 	bne.w	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a124:	4b9b      	ldr	r3, [pc, #620]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a128:	f003 0307 	and.w	r3, r3, #7
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	2b04      	cmp	r3, #4
 800a132:	f200 8087 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a136:	a201      	add	r2, pc, #4	@ (adr r2, 800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a151 	.word	0x0800a151
 800a140:	0800a179 	.word	0x0800a179
 800a144:	0800a1a1 	.word	0x0800a1a1
 800a148:	0800a23d 	.word	0x0800a23d
 800a14c:	0800a1c9 	.word	0x0800a1c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a150:	4b90      	ldr	r3, [pc, #576]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a158:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a15c:	d108      	bne.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a15e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a162:	4618      	mov	r0, r3
 800a164:	f000 ff62 	bl	800b02c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a16c:	f000 bc93 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a174:	f000 bc8f 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a178:	4b86      	ldr	r3, [pc, #536]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a184:	d108      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a186:	f107 0318 	add.w	r3, r7, #24
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fca6 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a194:	f000 bc7f 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19c:	f000 bc7b 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1a0:	4b7c      	ldr	r3, [pc, #496]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ac:	d108      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ae:	f107 030c 	add.w	r3, r7, #12
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 fde6 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1bc:	f000 bc6b 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c4:	f000 bc67 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1c8:	4b72      	ldr	r3, [pc, #456]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1d2:	4b70      	ldr	r3, [pc, #448]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d10c      	bne.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d109      	bne.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1e4:	4b6b      	ldr	r3, [pc, #428]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	08db      	lsrs	r3, r3, #3
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	4a6a      	ldr	r2, [pc, #424]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1f6:	e01f      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1f8:	4b66      	ldr	r3, [pc, #408]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a204:	d106      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a20c:	d102      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a20e:	4b63      	ldr	r3, [pc, #396]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a212:	e011      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a214:	4b5f      	ldr	r3, [pc, #380]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a21c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a220:	d106      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a228:	d102      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a22a:	4b5d      	ldr	r3, [pc, #372]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a22e:	e003      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a234:	f000 bc2f 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a238:	f000 bc2d 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a23c:	4b59      	ldr	r3, [pc, #356]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	f000 bc29 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a248:	f000 bc25 	b.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a24c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a250:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a254:	430b      	orrs	r3, r1
 800a256:	f040 80a7 	bne.w	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a25a:	4b4e      	ldr	r3, [pc, #312]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a262:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a26a:	d054      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a272:	f200 808b 	bhi.w	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a27c:	f000 8083 	beq.w	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a286:	f200 8081 	bhi.w	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a290:	d02f      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a298:	d878      	bhi.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d004      	beq.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2a6:	d012      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a2a8:	e070      	b.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2aa:	4b3a      	ldr	r3, [pc, #232]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2b6:	d107      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 feb5 	bl	800b02c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c6:	e3e6      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2cc:	e3e3      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ce:	4b31      	ldr	r3, [pc, #196]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2da:	d107      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2dc:	f107 0318 	add.w	r3, r7, #24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fbfb 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ea:	e3d4      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f0:	e3d1      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2f2:	4b28      	ldr	r3, [pc, #160]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2fe:	d107      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a300:	f107 030c 	add.w	r3, r7, #12
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fd3d 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a30e:	e3c2      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a314:	e3bf      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a316:	4b1f      	ldr	r3, [pc, #124]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a31a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a31e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a320:	4b1c      	ldr	r3, [pc, #112]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d10c      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a332:	4b18      	ldr	r3, [pc, #96]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	08db      	lsrs	r3, r3, #3
 800a338:	f003 0303 	and.w	r3, r3, #3
 800a33c:	4a16      	ldr	r2, [pc, #88]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a33e:	fa22 f303 	lsr.w	r3, r2, r3
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a344:	e01e      	b.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a346:	4b13      	ldr	r3, [pc, #76]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a34e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a352:	d106      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a35a:	d102      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a35c:	4b0f      	ldr	r3, [pc, #60]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a360:	e010      	b.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a362:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a36a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a36e:	d106      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a376:	d102      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a378:	4b09      	ldr	r3, [pc, #36]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a37c:	e002      	b.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a382:	e388      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a384:	e387      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a386:	4b07      	ldr	r3, [pc, #28]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38a:	e384      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a390:	e381      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
 800a398:	03d09000 	.word	0x03d09000
 800a39c:	003d0900 	.word	0x003d0900
 800a3a0:	017d7840 	.word	0x017d7840
 800a3a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ac:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	f040 809c 	bne.w	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a3b6:	4b9e      	ldr	r3, [pc, #632]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a3be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3c6:	d054      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3ce:	f200 808b 	bhi.w	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a3d8:	f000 8083 	beq.w	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a3e2:	f200 8081 	bhi.w	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3ec:	d02f      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3f4:	d878      	bhi.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a402:	d012      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a404:	e070      	b.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a406:	4b8a      	ldr	r3, [pc, #552]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a40e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a412:	d107      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fe07 	bl	800b02c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a422:	e338      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	e335      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a42a:	4b81      	ldr	r3, [pc, #516]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a436:	d107      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a438:	f107 0318 	add.w	r3, r7, #24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fb4d 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a446:	e326      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e323      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a44e:	4b78      	ldr	r3, [pc, #480]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45a:	d107      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45c:	f107 030c 	add.w	r3, r7, #12
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fc8f 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	e314      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e311      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a472:	4b6f      	ldr	r3, [pc, #444]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a47a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a47c:	4b6c      	ldr	r3, [pc, #432]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b04      	cmp	r3, #4
 800a486:	d10c      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d109      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a48e:	4b68      	ldr	r3, [pc, #416]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	08db      	lsrs	r3, r3, #3
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	4a66      	ldr	r2, [pc, #408]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a0:	e01e      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a2:	4b63      	ldr	r3, [pc, #396]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ae:	d106      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4b6:	d102      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4b8:	4b5f      	ldr	r3, [pc, #380]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4bc:	e010      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4be:	4b5c      	ldr	r3, [pc, #368]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ca:	d106      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d2:	d102      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4d4:	4b59      	ldr	r3, [pc, #356]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4d8:	e002      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4de:	e2da      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4e0:	e2d9      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4e2:	4b57      	ldr	r3, [pc, #348]	@ (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e6:	e2d6      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ec:	e2d3      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a4ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	f040 80a7 	bne.w	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a4fc:	4b4c      	ldr	r3, [pc, #304]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a500:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a504:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a50c:	d055      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a514:	f200 8096 	bhi.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a51e:	f000 8084 	beq.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a528:	f200 808c 	bhi.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a532:	d030      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a53a:	f200 8083 	bhi.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a54a:	d012      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a54c:	e07a      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a54e:	4b38      	ldr	r3, [pc, #224]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a55a:	d107      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a55c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fd63 	bl	800b02c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56a:	e294      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	e291      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a572:	4b2f      	ldr	r3, [pc, #188]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a57a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a57e:	d107      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a580:	f107 0318 	add.w	r3, r7, #24
 800a584:	4618      	mov	r0, r3
 800a586:	f000 faa9 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58e:	e282      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a594:	e27f      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a596:	4b26      	ldr	r3, [pc, #152]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a59e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5a4:	f107 030c 	add.w	r3, r7, #12
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fbeb 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b2:	e270      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b8:	e26d      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d10c      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d6:	4b16      	ldr	r3, [pc, #88]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	08db      	lsrs	r3, r3, #3
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	4a14      	ldr	r2, [pc, #80]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5e8:	e01e      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5ea:	4b11      	ldr	r3, [pc, #68]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5f6:	d106      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a5f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5fe:	d102      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a600:	4b0d      	ldr	r3, [pc, #52]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a604:	e010      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a606:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a612:	d106      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a61a:	d102      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a61c:	4b07      	ldr	r3, [pc, #28]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a620:	e002      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a626:	e236      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a628:	e235      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a62a:	4b05      	ldr	r3, [pc, #20]	@ (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62e:	e232      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a630:	58024400 	.word	0x58024400
 800a634:	03d09000 	.word	0x03d09000
 800a638:	003d0900 	.word	0x003d0900
 800a63c:	017d7840 	.word	0x017d7840
 800a640:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e225      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a64a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a652:	430b      	orrs	r3, r1
 800a654:	f040 8085 	bne.w	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a658:	4b9c      	ldr	r3, [pc, #624]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a65a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a65c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a660:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a668:	d06b      	beq.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a670:	d874      	bhi.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a674:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a678:	d056      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a680:	d86c      	bhi.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a688:	d03b      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a690:	d864      	bhi.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a698:	d021      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6a0:	d85c      	bhi.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ae:	d004      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a6b0:	e054      	b.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a6b2:	f7fe fb5f 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800a6b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6b8:	e1ed      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6ba:	4b84      	ldr	r3, [pc, #528]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6c6:	d107      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c8:	f107 0318 	add.w	r3, r7, #24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fa05 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d6:	e1de      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6dc:	e1db      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6de:	4b7b      	ldr	r3, [pc, #492]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ea:	d107      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fb47 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fa:	e1cc      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a700:	e1c9      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a702:	4b72      	ldr	r3, [pc, #456]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	d109      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a70e:	4b6f      	ldr	r3, [pc, #444]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	08db      	lsrs	r3, r3, #3
 800a714:	f003 0303 	and.w	r3, r3, #3
 800a718:	4a6d      	ldr	r2, [pc, #436]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a71a:	fa22 f303 	lsr.w	r3, r2, r3
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a720:	e1b9      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a726:	e1b6      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a728:	4b68      	ldr	r3, [pc, #416]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a734:	d102      	bne.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a736:	4b67      	ldr	r3, [pc, #412]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a73a:	e1ac      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	e1a9      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a742:	4b62      	ldr	r3, [pc, #392]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a74e:	d102      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a750:	4b61      	ldr	r3, [pc, #388]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a754:	e19f      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75a:	e19c      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a760:	e199      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a762:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a766:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a76a:	430b      	orrs	r3, r1
 800a76c:	d173      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a76e:	4b57      	ldr	r3, [pc, #348]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a776:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a77e:	d02f      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a786:	d863      	bhi.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d004      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a794:	d012      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a796:	e05b      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a798:	4b4c      	ldr	r3, [pc, #304]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a4:	d107      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7a6:	f107 0318 	add.w	r3, r7, #24
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 f996 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b4:	e16f      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ba:	e16c      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7bc:	4b43      	ldr	r3, [pc, #268]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c8:	d107      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ca:	f107 030c 	add.w	r3, r7, #12
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fad8 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d8:	e15d      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7de:	e15a      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7e0:	4b3a      	ldr	r3, [pc, #232]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7ea:	4b38      	ldr	r3, [pc, #224]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d10c      	bne.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7fc:	4b33      	ldr	r3, [pc, #204]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	08db      	lsrs	r3, r3, #3
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	4a32      	ldr	r2, [pc, #200]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a808:	fa22 f303 	lsr.w	r3, r2, r3
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a80e:	e01e      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a810:	4b2e      	ldr	r3, [pc, #184]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a81c:	d106      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a824:	d102      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a826:	4b2b      	ldr	r3, [pc, #172]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a82a:	e010      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a82c:	4b27      	ldr	r3, [pc, #156]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a838:	d106      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a840:	d102      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a842:	4b25      	ldr	r3, [pc, #148]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a846:	e002      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a84c:	e123      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a84e:	e122      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a854:	e11f      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a85e:	430b      	orrs	r3, r1
 800a860:	d13c      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a862:	4b1a      	ldr	r3, [pc, #104]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a86a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a878:	d012      	beq.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a87a:	e023      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a87c:	4b13      	ldr	r3, [pc, #76]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a888:	d107      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fbcc 	bl	800b02c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a898:	e0fd      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89e:	e0fa      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8ac:	d107      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ae:	f107 0318 	add.w	r3, r7, #24
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 f912 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8bc:	e0eb      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c2:	e0e8      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e0e5      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8ca:	bf00      	nop
 800a8cc:	58024400 	.word	0x58024400
 800a8d0:	03d09000 	.word	0x03d09000
 800a8d4:	003d0900 	.word	0x003d0900
 800a8d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	f040 8085 	bne.w	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a8ea:	4b6d      	ldr	r3, [pc, #436]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a8f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8fa:	d06b      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a902:	d874      	bhi.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90a:	d056      	beq.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a912:	d86c      	bhi.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a91a:	d03b      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a922:	d864      	bhi.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a92a:	d021      	beq.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a932:	d85c      	bhi.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a940:	d004      	beq.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a942:	e054      	b.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a944:	f000 f8b4 	bl	800aab0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a948:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a94a:	e0a4      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a94c:	4b54      	ldr	r3, [pc, #336]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a958:	d107      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a95a:	f107 0318 	add.w	r3, r7, #24
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f8bc 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a968:	e095      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96e:	e092      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a970:	4b4b      	ldr	r3, [pc, #300]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a97c:	d107      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a97e:	f107 030c 	add.w	r3, r7, #12
 800a982:	4618      	mov	r0, r3
 800a984:	f000 f9fe 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a98c:	e083      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a992:	e080      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a994:	4b42      	ldr	r3, [pc, #264]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d109      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9a0:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	08db      	lsrs	r3, r3, #3
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	4a3e      	ldr	r2, [pc, #248]	@ (800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b2:	e070      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b8:	e06d      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9ba:	4b39      	ldr	r3, [pc, #228]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9c6:	d102      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a9c8:	4b37      	ldr	r3, [pc, #220]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9cc:	e063      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d2:	e060      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9d4:	4b32      	ldr	r3, [pc, #200]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9e0:	d102      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a9e2:	4b32      	ldr	r3, [pc, #200]	@ (800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e6:	e056      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e053      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f2:	e050      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a9f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a9fc:	430b      	orrs	r3, r1
 800a9fe:	d148      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aa00:	4b27      	ldr	r3, [pc, #156]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa10:	d02a      	beq.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa18:	d838      	bhi.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d004      	beq.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa26:	d00d      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800aa28:	e030      	b.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa36:	d102      	bne.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800aa38:	4b1c      	ldr	r3, [pc, #112]	@ (800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3c:	e02b      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa42:	e028      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa44:	4b16      	ldr	r3, [pc, #88]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa50:	d107      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fae8 	bl	800b02c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa60:	e019      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa66:	e016      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa68:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa74:	d107      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa76:	f107 0318 	add.w	r3, r7, #24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f82e 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa84:	e007      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8a:	e004      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa90:	e001      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800aa96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3740      	adds	r7, #64	@ 0x40
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	58024400 	.word	0x58024400
 800aaa4:	03d09000 	.word	0x03d09000
 800aaa8:	003d0900 	.word	0x003d0900
 800aaac:	017d7840 	.word	0x017d7840

0800aab0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aab4:	f7fe f92e 	bl	8008d14 <HAL_RCC_GetHCLKFreq>
 800aab8:	4602      	mov	r2, r0
 800aaba:	4b06      	ldr	r3, [pc, #24]	@ (800aad4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	091b      	lsrs	r3, r3, #4
 800aac0:	f003 0307 	and.w	r3, r3, #7
 800aac4:	4904      	ldr	r1, [pc, #16]	@ (800aad8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aac6:	5ccb      	ldrb	r3, [r1, r3]
 800aac8:	f003 031f 	and.w	r3, r3, #31
 800aacc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	58024400 	.word	0x58024400
 800aad8:	0801f6e0 	.word	0x0801f6e0

0800aadc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aadc:	b480      	push	{r7}
 800aade:	b089      	sub	sp, #36	@ 0x24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aae4:	4ba1      	ldr	r3, [pc, #644]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae8:	f003 0303 	and.w	r3, r3, #3
 800aaec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aaee:	4b9f      	ldr	r3, [pc, #636]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	0b1b      	lsrs	r3, r3, #12
 800aaf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aafa:	4b9c      	ldr	r3, [pc, #624]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aafe:	091b      	lsrs	r3, r3, #4
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ab06:	4b99      	ldr	r3, [pc, #612]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0a:	08db      	lsrs	r3, r3, #3
 800ab0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8111 	beq.w	800ad4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	f000 8083 	beq.w	800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	f200 80a1 	bhi.w	800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d056      	beq.n	800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab46:	e099      	b.n	800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab48:	4b88      	ldr	r3, [pc, #544]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d02d      	beq.n	800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab54:	4b85      	ldr	r3, [pc, #532]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	08db      	lsrs	r3, r3, #3
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	4a84      	ldr	r2, [pc, #528]	@ (800ad70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	ee07 3a90 	vmov	s15, r3
 800ab6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7e:	4b7b      	ldr	r3, [pc, #492]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abae:	e087      	b.n	800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ad78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800abbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc2:	4b6a      	ldr	r3, [pc, #424]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abf2:	e065      	b.n	800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac06:	4b59      	ldr	r3, [pc, #356]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac36:	e043      	b.n	800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b48      	ldr	r3, [pc, #288]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac7a:	e021      	b.n	800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b37      	ldr	r3, [pc, #220]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800acc0:	4b2a      	ldr	r3, [pc, #168]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc4:	0a5b      	lsrs	r3, r3, #9
 800acc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acda:	edd7 6a07 	vldr	s13, [r7, #28]
 800acde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ace2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ace6:	ee17 2a90 	vmov	r2, s15
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800acee:	4b1f      	ldr	r3, [pc, #124]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf2:	0c1b      	lsrs	r3, r3, #16
 800acf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad14:	ee17 2a90 	vmov	r2, s15
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ad1c:	4b13      	ldr	r3, [pc, #76]	@ (800ad6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	0e1b      	lsrs	r3, r3, #24
 800ad22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad42:	ee17 2a90 	vmov	r2, s15
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad4a:	e008      	b.n	800ad5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	609a      	str	r2, [r3, #8]
}
 800ad5e:	bf00      	nop
 800ad60:	3724      	adds	r7, #36	@ 0x24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	58024400 	.word	0x58024400
 800ad70:	03d09000 	.word	0x03d09000
 800ad74:	46000000 	.word	0x46000000
 800ad78:	4c742400 	.word	0x4c742400
 800ad7c:	4a742400 	.word	0x4a742400
 800ad80:	4bbebc20 	.word	0x4bbebc20

0800ad84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b089      	sub	sp, #36	@ 0x24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad8c:	4ba1      	ldr	r3, [pc, #644]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad90:	f003 0303 	and.w	r3, r3, #3
 800ad94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ad96:	4b9f      	ldr	r3, [pc, #636]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9a:	0d1b      	lsrs	r3, r3, #20
 800ad9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ada0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ada2:	4b9c      	ldr	r3, [pc, #624]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800adae:	4b99      	ldr	r3, [pc, #612]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb2:	08db      	lsrs	r3, r3, #3
 800adb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	fb02 f303 	mul.w	r3, r2, r3
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 8111 	beq.w	800aff4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	2b02      	cmp	r3, #2
 800add6:	f000 8083 	beq.w	800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	2b02      	cmp	r3, #2
 800adde:	f200 80a1 	bhi.w	800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d056      	beq.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800adee:	e099      	b.n	800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf0:	4b88      	ldr	r3, [pc, #544]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d02d      	beq.n	800ae58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adfc:	4b85      	ldr	r3, [pc, #532]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	08db      	lsrs	r3, r3, #3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	4a84      	ldr	r2, [pc, #528]	@ (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	ee07 3a90 	vmov	s15, r3
 800ae14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae26:	4b7b      	ldr	r3, [pc, #492]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae56:	e087      	b.n	800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6a:	4b6a      	ldr	r3, [pc, #424]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae9a:	e065      	b.n	800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	ee07 3a90 	vmov	s15, r3
 800aea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aeaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeae:	4b59      	ldr	r3, [pc, #356]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aebe:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aede:	e043      	b.n	800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aeee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef2:	4b48      	ldr	r3, [pc, #288]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af02:	ed97 6a03 	vldr	s12, [r7, #12]
 800af06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af22:	e021      	b.n	800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af36:	4b37      	ldr	r3, [pc, #220]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af46:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800af68:	4b2a      	ldr	r3, [pc, #168]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6c:	0a5b      	lsrs	r3, r3, #9
 800af6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af72:	ee07 3a90 	vmov	s15, r3
 800af76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af82:	edd7 6a07 	vldr	s13, [r7, #28]
 800af86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af8e:	ee17 2a90 	vmov	r2, s15
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af96:	4b1f      	ldr	r3, [pc, #124]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af9a:	0c1b      	lsrs	r3, r3, #16
 800af9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afa0:	ee07 3a90 	vmov	s15, r3
 800afa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800afb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afbc:	ee17 2a90 	vmov	r2, s15
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800afc4:	4b13      	ldr	r3, [pc, #76]	@ (800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc8:	0e1b      	lsrs	r3, r3, #24
 800afca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afde:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afea:	ee17 2a90 	vmov	r2, s15
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aff2:	e008      	b.n	800b006 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	609a      	str	r2, [r3, #8]
}
 800b006:	bf00      	nop
 800b008:	3724      	adds	r7, #36	@ 0x24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	58024400 	.word	0x58024400
 800b018:	03d09000 	.word	0x03d09000
 800b01c:	46000000 	.word	0x46000000
 800b020:	4c742400 	.word	0x4c742400
 800b024:	4a742400 	.word	0x4a742400
 800b028:	4bbebc20 	.word	0x4bbebc20

0800b02c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b089      	sub	sp, #36	@ 0x24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b034:	4ba0      	ldr	r3, [pc, #640]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b038:	f003 0303 	and.w	r3, r3, #3
 800b03c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b03e:	4b9e      	ldr	r3, [pc, #632]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b042:	091b      	lsrs	r3, r3, #4
 800b044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b048:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b04a:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b054:	4b98      	ldr	r3, [pc, #608]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b058:	08db      	lsrs	r3, r3, #3
 800b05a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	fb02 f303 	mul.w	r3, r2, r3
 800b064:	ee07 3a90 	vmov	s15, r3
 800b068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 8111 	beq.w	800b29a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	f000 8083 	beq.w	800b186 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b02      	cmp	r3, #2
 800b084:	f200 80a1 	bhi.w	800b1ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d056      	beq.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b094:	e099      	b.n	800b1ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b096:	4b88      	ldr	r3, [pc, #544]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d02d      	beq.n	800b0fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0a2:	4b85      	ldr	r3, [pc, #532]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	08db      	lsrs	r3, r3, #3
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	4a83      	ldr	r2, [pc, #524]	@ (800b2bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0cc:	4b7a      	ldr	r3, [pc, #488]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d4:	ee07 3a90 	vmov	s15, r3
 800b0d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0fc:	e087      	b.n	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	ee07 3a90 	vmov	s15, r3
 800b104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b108:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b10c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b110:	4b69      	ldr	r3, [pc, #420]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b120:	ed97 6a03 	vldr	s12, [r7, #12]
 800b124:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b140:	e065      	b.n	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	ee07 3a90 	vmov	s15, r3
 800b148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b154:	4b58      	ldr	r3, [pc, #352]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15c:	ee07 3a90 	vmov	s15, r3
 800b160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b164:	ed97 6a03 	vldr	s12, [r7, #12]
 800b168:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b16c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b184:	e043      	b.n	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	ee07 3a90 	vmov	s15, r3
 800b18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b190:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b2cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b198:	4b47      	ldr	r3, [pc, #284]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a0:	ee07 3a90 	vmov	s15, r3
 800b1a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1c8:	e021      	b.n	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1dc:	4b36      	ldr	r3, [pc, #216]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b208:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b20c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b20e:	4b2a      	ldr	r3, [pc, #168]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b212:	0a5b      	lsrs	r3, r3, #9
 800b214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b220:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b224:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b228:	edd7 6a07 	vldr	s13, [r7, #28]
 800b22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b234:	ee17 2a90 	vmov	r2, s15
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b23c:	4b1e      	ldr	r3, [pc, #120]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b240:	0c1b      	lsrs	r3, r3, #16
 800b242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b256:	edd7 6a07 	vldr	s13, [r7, #28]
 800b25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b262:	ee17 2a90 	vmov	r2, s15
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b26a:	4b13      	ldr	r3, [pc, #76]	@ (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26e:	0e1b      	lsrs	r3, r3, #24
 800b270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b274:	ee07 3a90 	vmov	s15, r3
 800b278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b284:	edd7 6a07 	vldr	s13, [r7, #28]
 800b288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b290:	ee17 2a90 	vmov	r2, s15
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b298:	e008      	b.n	800b2ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	609a      	str	r2, [r3, #8]
}
 800b2ac:	bf00      	nop
 800b2ae:	3724      	adds	r7, #36	@ 0x24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	03d09000 	.word	0x03d09000
 800b2c0:	46000000 	.word	0x46000000
 800b2c4:	4c742400 	.word	0x4c742400
 800b2c8:	4a742400 	.word	0x4a742400
 800b2cc:	4bbebc20 	.word	0x4bbebc20

0800b2d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2de:	4b53      	ldr	r3, [pc, #332]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d101      	bne.n	800b2ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e099      	b.n	800b422 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b2ee:	4b4f      	ldr	r3, [pc, #316]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a4e      	ldr	r2, [pc, #312]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b2f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2fa:	f7f8 fd11 	bl	8003d20 <HAL_GetTick>
 800b2fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b300:	e008      	b.n	800b314 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b302:	f7f8 fd0d 	bl	8003d20 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d901      	bls.n	800b314 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e086      	b.n	800b422 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b314:	4b45      	ldr	r3, [pc, #276]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f0      	bne.n	800b302 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b320:	4b42      	ldr	r3, [pc, #264]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	031b      	lsls	r3, r3, #12
 800b32e:	493f      	ldr	r1, [pc, #252]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b330:	4313      	orrs	r3, r2
 800b332:	628b      	str	r3, [r1, #40]	@ 0x28
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	3b01      	subs	r3, #1
 800b33a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	3b01      	subs	r3, #1
 800b344:	025b      	lsls	r3, r3, #9
 800b346:	b29b      	uxth	r3, r3
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	3b01      	subs	r3, #1
 800b350:	041b      	lsls	r3, r3, #16
 800b352:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b356:	431a      	orrs	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	061b      	lsls	r3, r3, #24
 800b360:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b364:	4931      	ldr	r1, [pc, #196]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b366:	4313      	orrs	r3, r2
 800b368:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b36a:	4b30      	ldr	r3, [pc, #192]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	492d      	ldr	r1, [pc, #180]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b37c:	4b2b      	ldr	r3, [pc, #172]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b380:	f023 0220 	bic.w	r2, r3, #32
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	4928      	ldr	r1, [pc, #160]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b38e:	4b27      	ldr	r3, [pc, #156]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b392:	4a26      	ldr	r2, [pc, #152]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b394:	f023 0310 	bic.w	r3, r3, #16
 800b398:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b39a:	4b24      	ldr	r3, [pc, #144]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b39c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b39e:	4b24      	ldr	r3, [pc, #144]	@ (800b430 <RCCEx_PLL2_Config+0x160>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	69d2      	ldr	r2, [r2, #28]
 800b3a6:	00d2      	lsls	r2, r2, #3
 800b3a8:	4920      	ldr	r1, [pc, #128]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3b4:	f043 0310 	orr.w	r3, r3, #16
 800b3b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d106      	bne.n	800b3ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c4:	4a19      	ldr	r2, [pc, #100]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3cc:	e00f      	b.n	800b3ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d106      	bne.n	800b3e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b3d4:	4b15      	ldr	r3, [pc, #84]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d8:	4a14      	ldr	r2, [pc, #80]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3e0:	e005      	b.n	800b3ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b3e2:	4b12      	ldr	r3, [pc, #72]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e6:	4a11      	ldr	r2, [pc, #68]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b3ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a0e      	ldr	r2, [pc, #56]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b3f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3fa:	f7f8 fc91 	bl	8003d20 <HAL_GetTick>
 800b3fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b400:	e008      	b.n	800b414 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b402:	f7f8 fc8d 	bl	8003d20 <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d901      	bls.n	800b414 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e006      	b.n	800b422 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b414:	4b05      	ldr	r3, [pc, #20]	@ (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0f0      	beq.n	800b402 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	58024400 	.word	0x58024400
 800b430:	ffff0007 	.word	0xffff0007

0800b434 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b442:	4b53      	ldr	r3, [pc, #332]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d101      	bne.n	800b452 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e099      	b.n	800b586 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b452:	4b4f      	ldr	r3, [pc, #316]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a4e      	ldr	r2, [pc, #312]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b45c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b45e:	f7f8 fc5f 	bl	8003d20 <HAL_GetTick>
 800b462:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b464:	e008      	b.n	800b478 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b466:	f7f8 fc5b 	bl	8003d20 <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	2b02      	cmp	r3, #2
 800b472:	d901      	bls.n	800b478 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e086      	b.n	800b586 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b478:	4b45      	ldr	r3, [pc, #276]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1f0      	bne.n	800b466 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b484:	4b42      	ldr	r3, [pc, #264]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b488:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	051b      	lsls	r3, r3, #20
 800b492:	493f      	ldr	r1, [pc, #252]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b494:	4313      	orrs	r3, r2
 800b496:	628b      	str	r3, [r1, #40]	@ 0x28
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	025b      	lsls	r3, r3, #9
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	041b      	lsls	r3, r3, #16
 800b4b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	061b      	lsls	r3, r3, #24
 800b4c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4c8:	4931      	ldr	r1, [pc, #196]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b4ce:	4b30      	ldr	r3, [pc, #192]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	492d      	ldr	r1, [pc, #180]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b4e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	4928      	ldr	r1, [pc, #160]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b4f2:	4b27      	ldr	r3, [pc, #156]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f6:	4a26      	ldr	r2, [pc, #152]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b4fe:	4b24      	ldr	r3, [pc, #144]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b502:	4b24      	ldr	r3, [pc, #144]	@ (800b594 <RCCEx_PLL3_Config+0x160>)
 800b504:	4013      	ands	r3, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	69d2      	ldr	r2, [r2, #28]
 800b50a:	00d2      	lsls	r2, r2, #3
 800b50c:	4920      	ldr	r1, [pc, #128]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b512:	4b1f      	ldr	r3, [pc, #124]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b516:	4a1e      	ldr	r2, [pc, #120]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b51c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d106      	bne.n	800b532 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b524:	4b1a      	ldr	r3, [pc, #104]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b528:	4a19      	ldr	r2, [pc, #100]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b52a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b52e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b530:	e00f      	b.n	800b552 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d106      	bne.n	800b546 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b538:	4b15      	ldr	r3, [pc, #84]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53c:	4a14      	ldr	r2, [pc, #80]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b53e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b542:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b544:	e005      	b.n	800b552 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b546:	4b12      	ldr	r3, [pc, #72]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54a:	4a11      	ldr	r2, [pc, #68]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b550:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b552:	4b0f      	ldr	r3, [pc, #60]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a0e      	ldr	r2, [pc, #56]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b55c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b55e:	f7f8 fbdf 	bl	8003d20 <HAL_GetTick>
 800b562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b564:	e008      	b.n	800b578 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b566:	f7f8 fbdb 	bl	8003d20 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	2b02      	cmp	r3, #2
 800b572:	d901      	bls.n	800b578 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e006      	b.n	800b586 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b578:	4b05      	ldr	r3, [pc, #20]	@ (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0f0      	beq.n	800b566 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	58024400 	.word	0x58024400
 800b594:	ffff0007 	.word	0xffff0007

0800b598 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08a      	sub	sp, #40	@ 0x28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e075      	b.n	800b696 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d105      	bne.n	800b5c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7f6 fca9 	bl	8001f14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f868 	bl	800b6a0 <HAL_SD_InitCard>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e05d      	b.n	800b696 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b5da:	f107 0308 	add.w	r3, r7, #8
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fdb5 	bl	800c150 <HAL_SD_GetCardStatus>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e052      	b.n	800b696 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b5f0:	7e3b      	ldrb	r3, [r7, #24]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b5f6:	7e7b      	ldrb	r3, [r7, #25]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b600:	2b01      	cmp	r3, #1
 800b602:	d10a      	bne.n	800b61a <HAL_SD_Init+0x82>
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <HAL_SD_Init+0x78>
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d004      	beq.n	800b61a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b616:	659a      	str	r2, [r3, #88]	@ 0x58
 800b618:	e00b      	b.n	800b632 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d104      	bne.n	800b62c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b628:	659a      	str	r2, [r3, #88]	@ 0x58
 800b62a:	e002      	b.n	800b632 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fe73 	bl	800c324 <HAL_SD_ConfigWideBusOperation>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e026      	b.n	800b696 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b648:	f7f8 fb6a 	bl	8003d20 <HAL_GetTick>
 800b64c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b64e:	e011      	b.n	800b674 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b650:	f7f8 fb66 	bl	8003d20 <HAL_GetTick>
 800b654:	4602      	mov	r2, r0
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b65e:	d109      	bne.n	800b674 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b666:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e010      	b.n	800b696 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 ff67 	bl	800c548 <HAL_SD_GetCardState>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b04      	cmp	r3, #4
 800b67e:	d1e7      	bne.n	800b650 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3728      	adds	r7, #40	@ 0x28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b08d      	sub	sp, #52	@ 0x34
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b6b8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6bc:	f04f 0100 	mov.w	r1, #0
 800b6c0:	f7fe fd24 	bl	800a10c <HAL_RCCEx_GetPeriphCLKFreq>
 800b6c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d109      	bne.n	800b6e0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b6da:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e070      	b.n	800b7c2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	0a1b      	lsrs	r3, r3, #8
 800b6e4:	4a39      	ldr	r2, [pc, #228]	@ (800b7cc <HAL_SD_InitCard+0x12c>)
 800b6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ea:	091b      	lsrs	r3, r3, #4
 800b6ec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681c      	ldr	r4, [r3, #0]
 800b6f2:	466a      	mov	r2, sp
 800b6f4:	f107 0318 	add.w	r3, r7, #24
 800b6f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6fc:	e882 0003 	stmia.w	r2, {r0, r1}
 800b700:	f107 030c 	add.w	r3, r7, #12
 800b704:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b706:	4620      	mov	r0, r4
 800b708:	f004 fa24 	bl	800fb54 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4618      	mov	r0, r3
 800b712:	f004 fa67 	bl	800fbe4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d005      	beq.n	800b728 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b722:	fbb2 f3f3 	udiv	r3, r2, r3
 800b726:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d007      	beq.n	800b73e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b72e:	4a28      	ldr	r2, [pc, #160]	@ (800b7d0 <HAL_SD_InitCard+0x130>)
 800b730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b732:	fbb2 f3f3 	udiv	r3, r2, r3
 800b736:	3301      	adds	r3, #1
 800b738:	4618      	mov	r0, r3
 800b73a:	f7f8 fafd 	bl	8003d38 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fff0 	bl	800c724 <SD_PowerON>
 800b744:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00b      	beq.n	800b764 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	431a      	orrs	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e02e      	b.n	800b7c2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 ff0f 	bl	800c588 <SD_InitCard>
 800b76a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	431a      	orrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e01b      	b.n	800b7c2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b792:	4618      	mov	r0, r3
 800b794:	f004 fabc 	bl	800fd10 <SDMMC_CmdBlockLength>
 800b798:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00f      	beq.n	800b7c0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a0b      	ldr	r2, [pc, #44]	@ (800b7d4 <HAL_SD_InitCard+0x134>)
 800b7a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	372c      	adds	r7, #44	@ 0x2c
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd90      	pop	{r4, r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	014f8b59 	.word	0x014f8b59
 800b7d0:	00012110 	.word	0x00012110
 800b7d4:	1fe00fff 	.word	0x1fe00fff

0800b7d8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b092      	sub	sp, #72	@ 0x48
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b7e6:	f7f8 fa9b 	bl	8003d20 <HAL_GetTick>
 800b7ea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d107      	bne.n	800b80a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e167      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b01      	cmp	r3, #1
 800b814:	f040 815a 	bne.w	800bacc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b81e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	441a      	add	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b828:	429a      	cmp	r2, r3
 800b82a:	d907      	bls.n	800b83c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b830:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	e14e      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2203      	movs	r2, #3
 800b840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2200      	movs	r2, #0
 800b84a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b850:	2b01      	cmp	r3, #1
 800b852:	d002      	beq.n	800b85a <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800b854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b856:	025b      	lsls	r3, r3, #9
 800b858:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b85a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b85e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	025b      	lsls	r3, r3, #9
 800b864:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b866:	2390      	movs	r3, #144	@ 0x90
 800b868:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b86a:	2302      	movs	r3, #2
 800b86c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b86e:	2300      	movs	r3, #0
 800b870:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b872:	2300      	movs	r3, #0
 800b874:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f107 0214 	add.w	r2, r7, #20
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f004 fa19 	bl	800fcb8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68da      	ldr	r2, [r3, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b894:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d90a      	bls.n	800b8b2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f004 fa77 	bl	800fd9c <SDMMC_CmdReadMultiBlock>
 800b8ae:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8b0:	e009      	b.n	800b8c6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f004 fa49 	bl	800fd56 <SDMMC_CmdReadSingleBlock>
 800b8c4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d012      	beq.n	800b8f2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a84      	ldr	r2, [pc, #528]	@ (800bae4 <HAL_SD_ReadBlocks+0x30c>)
 800b8d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e0f3      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b8f6:	e058      	b.n	800b9aa <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d033      	beq.n	800b96e <HAL_SD_ReadBlocks+0x196>
 800b906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b908:	2b1f      	cmp	r3, #31
 800b90a:	d930      	bls.n	800b96e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b90c:	2300      	movs	r3, #0
 800b90e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b910:	e027      	b.n	800b962 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f004 f946 	bl	800fba8 <SDMMC_ReadFIFO>
 800b91c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b920:	b2da      	uxtb	r2, r3
 800b922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b924:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b928:	3301      	adds	r3, #1
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92e:	0a1b      	lsrs	r3, r3, #8
 800b930:	b2da      	uxtb	r2, r3
 800b932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b934:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b938:	3301      	adds	r3, #1
 800b93a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93e:	0c1b      	lsrs	r3, r3, #16
 800b940:	b2da      	uxtb	r2, r3
 800b942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b944:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b948:	3301      	adds	r3, #1
 800b94a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94e:	0e1b      	lsrs	r3, r3, #24
 800b950:	b2da      	uxtb	r2, r3
 800b952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b954:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b958:	3301      	adds	r3, #1
 800b95a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b95c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b95e:	3301      	adds	r3, #1
 800b960:	643b      	str	r3, [r7, #64]	@ 0x40
 800b962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b964:	2b07      	cmp	r3, #7
 800b966:	d9d4      	bls.n	800b912 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800b968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b96a:	3b20      	subs	r3, #32
 800b96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b96e:	f7f8 f9d7 	bl	8003d20 <HAL_GetTick>
 800b972:	4602      	mov	r2, r0
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d902      	bls.n	800b984 <HAL_SD_ReadBlocks+0x1ac>
 800b97e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b980:	2b00      	cmp	r3, #0
 800b982:	d112      	bne.n	800b9aa <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a56      	ldr	r2, [pc, #344]	@ (800bae4 <HAL_SD_ReadBlocks+0x30c>)
 800b98a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b990:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e097      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d09f      	beq.n	800b8f8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9c6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d022      	beq.n	800ba1c <HAL_SD_ReadBlocks+0x244>
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d91f      	bls.n	800ba1c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d01b      	beq.n	800ba1c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f004 fa41 	bl	800fe70 <SDMMC_CmdStopTransfer>
 800b9ee:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800b9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d012      	beq.n	800ba1c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a3a      	ldr	r2, [pc, #232]	@ (800bae4 <HAL_SD_ReadBlocks+0x30c>)
 800b9fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba04:	431a      	orrs	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e05e      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d012      	beq.n	800ba50 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a2d      	ldr	r2, [pc, #180]	@ (800bae4 <HAL_SD_ReadBlocks+0x30c>)
 800ba30:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba36:	f043 0208 	orr.w	r2, r3, #8
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e044      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba56:	f003 0302 	and.w	r3, r3, #2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d012      	beq.n	800ba84 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a20      	ldr	r2, [pc, #128]	@ (800bae4 <HAL_SD_ReadBlocks+0x30c>)
 800ba64:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba6a:	f043 0202 	orr.w	r2, r3, #2
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e02a      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8a:	f003 0320 	and.w	r3, r3, #32
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d012      	beq.n	800bab8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a13      	ldr	r2, [pc, #76]	@ (800bae4 <HAL_SD_ReadBlocks+0x30c>)
 800ba98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9e:	f043 0220 	orr.w	r2, r3, #32
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e010      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a0a      	ldr	r2, [pc, #40]	@ (800bae8 <HAL_SD_ReadBlocks+0x310>)
 800babe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	e006      	b.n	800bada <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
  }
}
 800bada:	4618      	mov	r0, r3
 800badc:	3748      	adds	r7, #72	@ 0x48
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	1fe00fff 	.word	0x1fe00fff
 800bae8:	18000f3a 	.word	0x18000f3a

0800baec <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b092      	sub	sp, #72	@ 0x48
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bafa:	f7f8 f911 	bl	8003d20 <HAL_GetTick>
 800bafe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d107      	bne.n	800bb1e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e16b      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	f040 815e 	bne.w	800bde8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	441a      	add	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d907      	bls.n	800bb50 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb44:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e152      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2203      	movs	r2, #3
 800bb54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d002      	beq.n	800bb6e <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	025b      	lsls	r3, r3, #9
 800bb6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb72:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	025b      	lsls	r3, r3, #9
 800bb78:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bb7a:	2390      	movs	r3, #144	@ 0x90
 800bb7c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bb86:	2300      	movs	r3, #0
 800bb88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f107 0218 	add.w	r2, r7, #24
 800bb92:	4611      	mov	r1, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f004 f88f 	bl	800fcb8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bba8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d90a      	bls.n	800bbc6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f004 f933 	bl	800fe28 <SDMMC_CmdWriteMultiBlock>
 800bbc2:	6478      	str	r0, [r7, #68]	@ 0x44
 800bbc4:	e009      	b.n	800bbda <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2210      	movs	r2, #16
 800bbca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f004 f905 	bl	800fde2 <SDMMC_CmdWriteSingleBlock>
 800bbd8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d012      	beq.n	800bc06 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a86      	ldr	r2, [pc, #536]	@ (800be00 <HAL_SD_WriteBlocks+0x314>)
 800bbe6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e0f7      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bc0a:	e05c      	b.n	800bcc6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d037      	beq.n	800bc8a <HAL_SD_WriteBlocks+0x19e>
 800bc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc1c:	2b1f      	cmp	r3, #31
 800bc1e:	d934      	bls.n	800bc8a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bc20:	2300      	movs	r3, #0
 800bc22:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc24:	e02b      	b.n	800bc7e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800bc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc2e:	3301      	adds	r3, #1
 800bc30:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	021a      	lsls	r2, r3, #8
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc40:	3301      	adds	r3, #1
 800bc42:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bc44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	041a      	lsls	r2, r3, #16
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc52:	3301      	adds	r3, #1
 800bc54:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	061a      	lsls	r2, r3, #24
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc64:	3301      	adds	r3, #1
 800bc66:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f107 0214 	add.w	r2, r7, #20
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f003 ffa5 	bl	800fbc2 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bc78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc80:	2b07      	cmp	r3, #7
 800bc82:	d9d0      	bls.n	800bc26 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800bc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc86:	3b20      	subs	r3, #32
 800bc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800bc8a:	f7f8 f849 	bl	8003d20 <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d902      	bls.n	800bca0 <HAL_SD_WriteBlocks+0x1b4>
 800bc9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d112      	bne.n	800bcc6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a56      	ldr	r2, [pc, #344]	@ (800be00 <HAL_SD_WriteBlocks+0x314>)
 800bca6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e097      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bccc:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d09b      	beq.n	800bc0c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68da      	ldr	r2, [r3, #12]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bce2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d022      	beq.n	800bd38 <HAL_SD_WriteBlocks+0x24c>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d91f      	bls.n	800bd38 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d01b      	beq.n	800bd38 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f004 f8b3 	bl	800fe70 <SDMMC_CmdStopTransfer>
 800bd0a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800bd0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d012      	beq.n	800bd38 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a3a      	ldr	r2, [pc, #232]	@ (800be00 <HAL_SD_WriteBlocks+0x314>)
 800bd18:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd20:	431a      	orrs	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e05e      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd3e:	f003 0308 	and.w	r3, r3, #8
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d012      	beq.n	800bd6c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a2d      	ldr	r2, [pc, #180]	@ (800be00 <HAL_SD_WriteBlocks+0x314>)
 800bd4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd52:	f043 0208 	orr.w	r2, r3, #8
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e044      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d012      	beq.n	800bda0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a20      	ldr	r2, [pc, #128]	@ (800be00 <HAL_SD_WriteBlocks+0x314>)
 800bd80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd86:	f043 0202 	orr.w	r2, r3, #2
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e02a      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda6:	f003 0310 	and.w	r3, r3, #16
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d012      	beq.n	800bdd4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a13      	ldr	r2, [pc, #76]	@ (800be00 <HAL_SD_WriteBlocks+0x314>)
 800bdb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdba:	f043 0210 	orr.w	r2, r3, #16
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e010      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a0a      	ldr	r2, [pc, #40]	@ (800be04 <HAL_SD_WriteBlocks+0x318>)
 800bdda:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	e006      	b.n	800bdf6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
  }
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3748      	adds	r7, #72	@ 0x48
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	1fe00fff 	.word	0x1fe00fff
 800be04:	18000f3a 	.word	0x18000f3a

0800be08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be16:	0f9b      	lsrs	r3, r3, #30
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be22:	0e9b      	lsrs	r3, r3, #26
 800be24:	b2db      	uxtb	r3, r3
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be34:	0e1b      	lsrs	r3, r3, #24
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0303 	and.w	r3, r3, #3
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be46:	0c1b      	lsrs	r3, r3, #16
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be52:	0a1b      	lsrs	r3, r3, #8
 800be54:	b2da      	uxtb	r2, r3
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be68:	0d1b      	lsrs	r3, r3, #20
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be74:	0c1b      	lsrs	r3, r3, #16
 800be76:	b2db      	uxtb	r3, r3
 800be78:	f003 030f 	and.w	r3, r3, #15
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be86:	0bdb      	lsrs	r3, r3, #15
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be98:	0b9b      	lsrs	r3, r3, #14
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beaa:	0b5b      	lsrs	r3, r3, #13
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bebc:	0b1b      	lsrs	r3, r3, #12
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2200      	movs	r2, #0
 800bece:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d163      	bne.n	800bfa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bedc:	009a      	lsls	r2, r3, #2
 800bede:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bee2:	4013      	ands	r3, r2
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800bee8:	0f92      	lsrs	r2, r2, #30
 800beea:	431a      	orrs	r2, r3
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bef4:	0edb      	lsrs	r3, r3, #27
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f003 0307 	and.w	r3, r3, #7
 800befc:	b2da      	uxtb	r2, r3
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf06:	0e1b      	lsrs	r3, r3, #24
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	f003 0307 	and.w	r3, r3, #7
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf18:	0d5b      	lsrs	r3, r3, #21
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	f003 0307 	and.w	r3, r3, #7
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf2a:	0c9b      	lsrs	r3, r3, #18
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	f003 0307 	and.w	r3, r3, #7
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf3c:	0bdb      	lsrs	r3, r3, #15
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f003 0307 	and.w	r3, r3, #7
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	7e1b      	ldrb	r3, [r3, #24]
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	f003 0307 	and.w	r3, r3, #7
 800bf5e:	3302      	adds	r3, #2
 800bf60:	2201      	movs	r2, #1
 800bf62:	fa02 f303 	lsl.w	r3, r2, r3
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bf6a:	fb03 f202 	mul.w	r2, r3, r2
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	7a1b      	ldrb	r3, [r3, #8]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 030f 	and.w	r3, r3, #15
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	409a      	lsls	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800bf8c:	0a52      	lsrs	r2, r2, #9
 800bf8e:	fb03 f202 	mul.w	r2, r3, r2
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf9c:	655a      	str	r2, [r3, #84]	@ 0x54
 800bf9e:	e031      	b.n	800c004 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d11d      	bne.n	800bfe4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfac:	041b      	lsls	r3, r3, #16
 800bfae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	029a      	lsls	r2, r3, #10
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfd8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	655a      	str	r2, [r3, #84]	@ 0x54
 800bfe2:	e00f      	b.n	800c004 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a58      	ldr	r2, [pc, #352]	@ (800c14c <HAL_SD_GetCardCSD+0x344>)
 800bfea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bff0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e09d      	b.n	800c140 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c008:	0b9b      	lsrs	r3, r3, #14
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	b2da      	uxtb	r2, r3
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c01a:	09db      	lsrs	r3, r3, #7
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c022:	b2da      	uxtb	r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c032:	b2da      	uxtb	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c03c:	0fdb      	lsrs	r3, r3, #31
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c048:	0f5b      	lsrs	r3, r3, #29
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0303 	and.w	r3, r3, #3
 800c050:	b2da      	uxtb	r2, r3
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c05a:	0e9b      	lsrs	r3, r3, #26
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	f003 0307 	and.w	r3, r3, #7
 800c062:	b2da      	uxtb	r2, r3
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c06c:	0d9b      	lsrs	r3, r3, #22
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	f003 030f 	and.w	r3, r3, #15
 800c074:	b2da      	uxtb	r2, r3
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c07e:	0d5b      	lsrs	r3, r3, #21
 800c080:	b2db      	uxtb	r3, r3
 800c082:	f003 0301 	and.w	r3, r3, #1
 800c086:	b2da      	uxtb	r2, r3
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c09a:	0c1b      	lsrs	r3, r3, #16
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0ae:	0bdb      	lsrs	r3, r3, #15
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0c2:	0b9b      	lsrs	r3, r3, #14
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0d6:	0b5b      	lsrs	r3, r3, #13
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0ea:	0b1b      	lsrs	r3, r3, #12
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0fe:	0a9b      	lsrs	r3, r3, #10
 800c100:	b2db      	uxtb	r3, r3
 800c102:	f003 0303 	and.w	r3, r3, #3
 800c106:	b2da      	uxtb	r2, r3
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c112:	0a1b      	lsrs	r3, r3, #8
 800c114:	b2db      	uxtb	r3, r3
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c126:	085b      	lsrs	r3, r3, #1
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	1fe00fff 	.word	0x1fe00fff

0800c150 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b094      	sub	sp, #80	@ 0x50
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c166:	b2db      	uxtb	r3, r3
 800c168:	2b03      	cmp	r3, #3
 800c16a:	d101      	bne.n	800c170 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e0a7      	b.n	800c2c0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c170:	f107 0308 	add.w	r3, r7, #8
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fb62 	bl	800c840 <SD_SendSDStatus>
 800c17c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c180:	2b00      	cmp	r3, #0
 800c182:	d011      	beq.n	800c1a8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a4f      	ldr	r2, [pc, #316]	@ (800c2c8 <HAL_SD_GetCardStatus+0x178>)
 800c18a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c1a6:	e070      	b.n	800c28a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	099b      	lsrs	r3, r3, #6
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	f003 0303 	and.w	r3, r3, #3
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	095b      	lsrs	r3, r3, #5
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	0a1b      	lsrs	r3, r3, #8
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	0e1b      	lsrs	r3, r3, #24
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	061a      	lsls	r2, r3, #24
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	021b      	lsls	r3, r3, #8
 800c1ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c1ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	0a1b      	lsrs	r3, r3, #8
 800c1f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c1f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	0e1b      	lsrs	r3, r3, #24
 800c1fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	b2da      	uxtb	r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	0a1b      	lsrs	r3, r3, #8
 800c210:	b2da      	uxtb	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	0d1b      	lsrs	r3, r3, #20
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	f003 030f 	and.w	r3, r3, #15
 800c220:	b2da      	uxtb	r2, r3
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	0c1b      	lsrs	r3, r3, #16
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c230:	b29a      	uxth	r2, r3
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	b29b      	uxth	r3, r3
 800c236:	b2db      	uxtb	r3, r3
 800c238:	b29b      	uxth	r3, r3
 800c23a:	4313      	orrs	r3, r2
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	0a9b      	lsrs	r3, r3, #10
 800c246:	b2db      	uxtb	r3, r3
 800c248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	0a1b      	lsrs	r3, r3, #8
 800c256:	b2db      	uxtb	r3, r3
 800c258:	f003 0303 	and.w	r3, r3, #3
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	091b      	lsrs	r3, r3, #4
 800c266:	b2db      	uxtb	r3, r3
 800c268:	f003 030f 	and.w	r3, r3, #15
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	b2db      	uxtb	r3, r3
 800c276:	f003 030f 	and.w	r3, r3, #15
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	0e1b      	lsrs	r3, r3, #24
 800c284:	b2da      	uxtb	r2, r3
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c292:	4618      	mov	r0, r3
 800c294:	f003 fd3c 	bl	800fd10 <SDMMC_CmdBlockLength>
 800c298:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00d      	beq.n	800c2bc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a08      	ldr	r2, [pc, #32]	@ (800c2c8 <HAL_SD_GetCardStatus+0x178>)
 800c2a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800c2bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3750      	adds	r7, #80	@ 0x50
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	1fe00fff 	.word	0x1fe00fff

0800c2cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c324:	b590      	push	{r4, r7, lr}
 800c326:	b08d      	sub	sp, #52	@ 0x34
 800c328:	af02      	add	r7, sp, #8
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2203      	movs	r2, #3
 800c338:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c340:	2b03      	cmp	r3, #3
 800c342:	d02e      	beq.n	800c3a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c34a:	d106      	bne.n	800c35a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c350:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	635a      	str	r2, [r3, #52]	@ 0x34
 800c358:	e029      	b.n	800c3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c360:	d10a      	bne.n	800c378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fb64 	bl	800ca30 <SD_WideBus_Enable>
 800c368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	431a      	orrs	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	635a      	str	r2, [r3, #52]	@ 0x34
 800c376:	e01a      	b.n	800c3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fba1 	bl	800cac6 <SD_WideBus_Disable>
 800c384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	431a      	orrs	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	635a      	str	r2, [r3, #52]	@ 0x34
 800c392:	e00c      	b.n	800c3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c398:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	635a      	str	r2, [r3, #52]	@ 0x34
 800c3a0:	e005      	b.n	800c3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d007      	beq.n	800c3c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a5f      	ldr	r2, [pc, #380]	@ (800c538 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c3bc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c3c4:	e096      	b.n	800c4f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c3c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c3ca:	f04f 0100 	mov.w	r1, #0
 800c3ce:	f7fd fe9d 	bl	800a10c <HAL_RCCEx_GetPeriphCLKFreq>
 800c3d2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 8083 	beq.w	800c4e2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	695a      	ldr	r2, [r3, #20]
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	4950      	ldr	r1, [pc, #320]	@ (800c53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c3fa:	fba1 1303 	umull	r1, r3, r1, r3
 800c3fe:	0e1b      	lsrs	r3, r3, #24
 800c400:	429a      	cmp	r2, r3
 800c402:	d303      	bcc.n	800c40c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	61bb      	str	r3, [r7, #24]
 800c40a:	e05a      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c414:	d103      	bne.n	800c41e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	61bb      	str	r3, [r7, #24]
 800c41c:	e051      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c426:	d126      	bne.n	800c476 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10e      	bne.n	800c44e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	4a43      	ldr	r2, [pc, #268]	@ (800c540 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d906      	bls.n	800c446 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	4a40      	ldr	r2, [pc, #256]	@ (800c53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c43c:	fba2 2303 	umull	r2, r3, r2, r3
 800c440:	0e5b      	lsrs	r3, r3, #25
 800c442:	61bb      	str	r3, [r7, #24]
 800c444:	e03d      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	e039      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	fbb2 f3f3 	udiv	r3, r2, r3
 800c45a:	4a39      	ldr	r2, [pc, #228]	@ (800c540 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d906      	bls.n	800c46e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	4a36      	ldr	r2, [pc, #216]	@ (800c53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c464:	fba2 2303 	umull	r2, r3, r2, r3
 800c468:	0e5b      	lsrs	r3, r3, #25
 800c46a:	61bb      	str	r3, [r7, #24]
 800c46c:	e029      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	61bb      	str	r3, [r7, #24]
 800c474:	e025      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10e      	bne.n	800c49c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	4a30      	ldr	r2, [pc, #192]	@ (800c544 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d906      	bls.n	800c494 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	4a2c      	ldr	r2, [pc, #176]	@ (800c53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c48a:	fba2 2303 	umull	r2, r3, r2, r3
 800c48e:	0e1b      	lsrs	r3, r3, #24
 800c490:	61bb      	str	r3, [r7, #24]
 800c492:	e016      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	61bb      	str	r3, [r7, #24]
 800c49a:	e012      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	69fa      	ldr	r2, [r7, #28]
 800c4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a8:	4a26      	ldr	r2, [pc, #152]	@ (800c544 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d906      	bls.n	800c4bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4a22      	ldr	r2, [pc, #136]	@ (800c53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b6:	0e1b      	lsrs	r3, r3, #24
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e002      	b.n	800c4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681c      	ldr	r4, [r3, #0]
 800c4c6:	466a      	mov	r2, sp
 800c4c8:	f107 0314 	add.w	r3, r7, #20
 800c4cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800c4d4:	f107 0308 	add.w	r3, r7, #8
 800c4d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f003 fb3a 	bl	800fb54 <SDMMC_Init>
 800c4e0:	e008      	b.n	800c4f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f003 fc07 	bl	800fd10 <SDMMC_CmdBlockLength>
 800c502:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00c      	beq.n	800c524 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a0a      	ldr	r2, [pc, #40]	@ (800c538 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c510:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	431a      	orrs	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c530:	4618      	mov	r0, r3
 800c532:	372c      	adds	r7, #44	@ 0x2c
 800c534:	46bd      	mov	sp, r7
 800c536:	bd90      	pop	{r4, r7, pc}
 800c538:	1fe00fff 	.word	0x1fe00fff
 800c53c:	55e63b89 	.word	0x55e63b89
 800c540:	02faf080 	.word	0x02faf080
 800c544:	017d7840 	.word	0x017d7840

0800c548 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c554:	f107 030c 	add.w	r3, r7, #12
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fa40 	bl	800c9e0 <SD_SendStatus>
 800c560:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d005      	beq.n	800c574 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	431a      	orrs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	0a5b      	lsrs	r3, r3, #9
 800c578:	f003 030f 	and.w	r3, r3, #15
 800c57c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c57e:	693b      	ldr	r3, [r7, #16]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b090      	sub	sp, #64	@ 0x40
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c590:	2300      	movs	r3, #0
 800c592:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c594:	f7f7 fbc4 	bl	8003d20 <HAL_GetTick>
 800c598:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f003 fb31 	bl	800fc06 <SDMMC_GetPowerState>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d102      	bne.n	800c5b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c5aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c5ae:	e0b5      	b.n	800c71c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d02e      	beq.n	800c616 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f003 fd7c 	bl	80100ba <SDMMC_CmdSendCID>
 800c5c2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <SD_InitCard+0x46>
    {
      return errorstate;
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5cc:	e0a6      	b.n	800c71c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f003 fb5c 	bl	800fc92 <SDMMC_GetResponse>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2104      	movs	r1, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f003 fb53 	bl	800fc92 <SDMMC_GetResponse>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2108      	movs	r1, #8
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f003 fb4a 	bl	800fc92 <SDMMC_GetResponse>
 800c5fe:	4602      	mov	r2, r0
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	210c      	movs	r1, #12
 800c60a:	4618      	mov	r0, r3
 800c60c:	f003 fb41 	bl	800fc92 <SDMMC_GetResponse>
 800c610:	4602      	mov	r2, r0
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d01d      	beq.n	800c65a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c61e:	e019      	b.n	800c654 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f107 020a 	add.w	r2, r7, #10
 800c628:	4611      	mov	r1, r2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f003 fd84 	bl	8010138 <SDMMC_CmdSetRelAdd>
 800c630:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <SD_InitCard+0xb4>
      {
        return errorstate;
 800c638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63a:	e06f      	b.n	800c71c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c63c:	f7f7 fb70 	bl	8003d20 <HAL_GetTick>
 800c640:	4602      	mov	r2, r0
 800c642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d902      	bls.n	800c654 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c64e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c652:	e063      	b.n	800c71c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c654:	897b      	ldrh	r3, [r7, #10]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0e2      	beq.n	800c620 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d036      	beq.n	800c6d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c662:	897b      	ldrh	r3, [r7, #10]
 800c664:	461a      	mov	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c672:	041b      	lsls	r3, r3, #16
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f003 fd3e 	bl	80100f8 <SDMMC_CmdSendCSD>
 800c67c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <SD_InitCard+0x100>
    {
      return errorstate;
 800c684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c686:	e049      	b.n	800c71c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2100      	movs	r1, #0
 800c68e:	4618      	mov	r0, r3
 800c690:	f003 faff 	bl	800fc92 <SDMMC_GetResponse>
 800c694:	4602      	mov	r2, r0
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2104      	movs	r1, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f003 faf6 	bl	800fc92 <SDMMC_GetResponse>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2108      	movs	r1, #8
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f003 faed 	bl	800fc92 <SDMMC_GetResponse>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	210c      	movs	r1, #12
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f003 fae4 	bl	800fc92 <SDMMC_GetResponse>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2104      	movs	r1, #4
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f003 fadb 	bl	800fc92 <SDMMC_GetResponse>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	0d1a      	lsrs	r2, r3, #20
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c6e4:	f107 030c 	add.w	r3, r7, #12
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff fb8c 	bl	800be08 <HAL_SD_GetCardCSD>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c6fa:	e00f      	b.n	800c71c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c704:	041b      	lsls	r3, r3, #16
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f003 fbed 	bl	800fee8 <SDMMC_CmdSelDesel>
 800c70e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <SD_InitCard+0x192>
  {
    return errorstate;
 800c716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c718:	e000      	b.n	800c71c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3740      	adds	r7, #64	@ 0x40
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c72c:	2300      	movs	r3, #0
 800c72e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c734:	2300      	movs	r3, #0
 800c736:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f003 fbf6 	bl	800ff2e <SDMMC_CmdGoIdleState>
 800c742:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	e072      	b.n	800c834 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4618      	mov	r0, r3
 800c754:	f003 fc09 	bl	800ff6a <SDMMC_CmdOperCond>
 800c758:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c760:	d10d      	bne.n	800c77e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f003 fbde 	bl	800ff2e <SDMMC_CmdGoIdleState>
 800c772:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d004      	beq.n	800c784 <SD_PowerON+0x60>
    {
      return errorstate;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	e05a      	b.n	800c834 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d137      	bne.n	800c7fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2100      	movs	r1, #0
 800c792:	4618      	mov	r0, r3
 800c794:	f003 fc09 	bl	800ffaa <SDMMC_CmdAppCommand>
 800c798:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d02d      	beq.n	800c7fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c7a4:	e046      	b.n	800c834 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f003 fbfc 	bl	800ffaa <SDMMC_CmdAppCommand>
 800c7b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <SD_PowerON+0x9a>
    {
      return errorstate;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	e03a      	b.n	800c834 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	491e      	ldr	r1, [pc, #120]	@ (800c83c <SD_PowerON+0x118>)
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f003 fc13 	bl	800fff0 <SDMMC_CmdAppOperCommand>
 800c7ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d002      	beq.n	800c7d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c7d6:	e02d      	b.n	800c834 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2100      	movs	r1, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f003 fa57 	bl	800fc92 <SDMMC_GetResponse>
 800c7e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	0fdb      	lsrs	r3, r3, #31
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d101      	bne.n	800c7f2 <SD_PowerON+0xce>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e000      	b.n	800c7f4 <SD_PowerON+0xd0>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	613b      	str	r3, [r7, #16]

    count++;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c802:	4293      	cmp	r3, r2
 800c804:	d802      	bhi.n	800c80c <SD_PowerON+0xe8>
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d0cc      	beq.n	800c7a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c812:	4293      	cmp	r3, r2
 800c814:	d902      	bls.n	800c81c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c81a:	e00b      	b.n	800c834 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	c1100000 	.word	0xc1100000

0800c840 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08c      	sub	sp, #48	@ 0x30
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c84a:	f7f7 fa69 	bl	8003d20 <HAL_GetTick>
 800c84e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2100      	movs	r1, #0
 800c85a:	4618      	mov	r0, r3
 800c85c:	f003 fa19 	bl	800fc92 <SDMMC_GetResponse>
 800c860:	4603      	mov	r3, r0
 800c862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c86a:	d102      	bne.n	800c872 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c86c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c870:	e0b0      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2140      	movs	r1, #64	@ 0x40
 800c878:	4618      	mov	r0, r3
 800c87a:	f003 fa49 	bl	800fd10 <SDMMC_CmdBlockLength>
 800c87e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d005      	beq.n	800c892 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	e0a0      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c89a:	041b      	lsls	r3, r3, #16
 800c89c:	4619      	mov	r1, r3
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f003 fb83 	bl	800ffaa <SDMMC_CmdAppCommand>
 800c8a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d005      	beq.n	800c8b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	e08d      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c8be:	2340      	movs	r3, #64	@ 0x40
 800c8c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c8c2:	2360      	movs	r3, #96	@ 0x60
 800c8c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f107 0208 	add.w	r2, r7, #8
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f003 f9eb 	bl	800fcb8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f003 fc6b 	bl	80101c2 <SDMMC_CmdStatusRegister>
 800c8ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d02b      	beq.n	800c94c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	e069      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d013      	beq.n	800c936 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c90e:	2300      	movs	r3, #0
 800c910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c912:	e00d      	b.n	800c930 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4618      	mov	r0, r3
 800c91a:	f003 f945 	bl	800fba8 <SDMMC_ReadFIFO>
 800c91e:	4602      	mov	r2, r0
 800c920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c922:	601a      	str	r2, [r3, #0]
        pData++;
 800c924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c926:	3304      	adds	r3, #4
 800c928:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800c92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92c:	3301      	adds	r3, #1
 800c92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c932:	2b07      	cmp	r3, #7
 800c934:	d9ee      	bls.n	800c914 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c936:	f7f7 f9f3 	bl	8003d20 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c944:	d102      	bne.n	800c94c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c946:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c94a:	e043      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c952:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0d2      	beq.n	800c900 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c960:	f003 0308 	and.w	r3, r3, #8
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c968:	2308      	movs	r3, #8
 800c96a:	e033      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c97a:	2302      	movs	r3, #2
 800c97c:	e02a      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c984:	f003 0320 	and.w	r3, r3, #32
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d017      	beq.n	800c9bc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c98c:	2320      	movs	r3, #32
 800c98e:	e021      	b.n	800c9d4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	f003 f907 	bl	800fba8 <SDMMC_ReadFIFO>
 800c99a:	4602      	mov	r2, r0
 800c99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99e:	601a      	str	r2, [r3, #0]
    pData++;
 800c9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c9a6:	f7f7 f9bb 	bl	8003d20 <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9b4:	d102      	bne.n	800c9bc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9ba:	e00b      	b.n	800c9d4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1e2      	bne.n	800c990 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a03      	ldr	r2, [pc, #12]	@ (800c9dc <SD_SendSDStatus+0x19c>)
 800c9d0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3730      	adds	r7, #48	@ 0x30
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	18000f3a 	.word	0x18000f3a

0800c9e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c9f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c9f4:	e018      	b.n	800ca28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9fe:	041b      	lsls	r3, r3, #16
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f003 fbba 	bl	801017c <SDMMC_CmdSendStatus>
 800ca08:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	e009      	b.n	800ca28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f003 f939 	bl	800fc92 <SDMMC_GetResponse>
 800ca20:	4602      	mov	r2, r0
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2100      	movs	r1, #0
 800ca46:	4618      	mov	r0, r3
 800ca48:	f003 f923 	bl	800fc92 <SDMMC_GetResponse>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca56:	d102      	bne.n	800ca5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca5c:	e02f      	b.n	800cabe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ca5e:	f107 030c 	add.w	r3, r7, #12
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f879 	bl	800cb5c <SD_FindSCR>
 800ca6a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	e023      	b.n	800cabe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d01c      	beq.n	800caba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca88:	041b      	lsls	r3, r3, #16
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	f003 fa8c 	bl	800ffaa <SDMMC_CmdAppCommand>
 800ca92:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	e00f      	b.n	800cabe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2102      	movs	r1, #2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f003 fac3 	bl	8010030 <SDMMC_CmdBusWidth>
 800caaa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	e003      	b.n	800cabe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e001      	b.n	800cabe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800caba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b086      	sub	sp, #24
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cace:	2300      	movs	r3, #0
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	2300      	movs	r3, #0
 800cad4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2100      	movs	r1, #0
 800cadc:	4618      	mov	r0, r3
 800cade:	f003 f8d8 	bl	800fc92 <SDMMC_GetResponse>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800caec:	d102      	bne.n	800caf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800caee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800caf2:	e02f      	b.n	800cb54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800caf4:	f107 030c 	add.w	r3, r7, #12
 800caf8:	4619      	mov	r1, r3
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f82e 	bl	800cb5c <SD_FindSCR>
 800cb00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	e023      	b.n	800cb54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d01c      	beq.n	800cb50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb1e:	041b      	lsls	r3, r3, #16
 800cb20:	4619      	mov	r1, r3
 800cb22:	4610      	mov	r0, r2
 800cb24:	f003 fa41 	bl	800ffaa <SDMMC_CmdAppCommand>
 800cb28:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	e00f      	b.n	800cb54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f003 fa78 	bl	8010030 <SDMMC_CmdBusWidth>
 800cb40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	e003      	b.n	800cb54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e001      	b.n	800cb54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3718      	adds	r7, #24
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08e      	sub	sp, #56	@ 0x38
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb66:	f7f7 f8db 	bl	8003d20 <HAL_GetTick>
 800cb6a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cb70:	2300      	movs	r3, #0
 800cb72:	60bb      	str	r3, [r7, #8]
 800cb74:	2300      	movs	r3, #0
 800cb76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2108      	movs	r1, #8
 800cb82:	4618      	mov	r0, r3
 800cb84:	f003 f8c4 	bl	800fd10 <SDMMC_CmdBlockLength>
 800cb88:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb92:	e0ad      	b.n	800ccf0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb9c:	041b      	lsls	r3, r3, #16
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f003 fa02 	bl	800ffaa <SDMMC_CmdAppCommand>
 800cba6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb0:	e09e      	b.n	800ccf0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cbb8:	2308      	movs	r3, #8
 800cbba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cbbc:	2330      	movs	r3, #48	@ 0x30
 800cbbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f107 0210 	add.w	r2, r7, #16
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f003 f86e 	bl	800fcb8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f003 fa48 	bl	8010076 <SDMMC_CmdSendSCR>
 800cbe6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d027      	beq.n	800cc3e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	e07e      	b.n	800ccf0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d113      	bne.n	800cc28 <SD_FindSCR+0xcc>
 800cc00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d110      	bne.n	800cc28 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f002 ffcc 	bl	800fba8 <SDMMC_ReadFIFO>
 800cc10:	4603      	mov	r3, r0
 800cc12:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f002 ffc5 	bl	800fba8 <SDMMC_ReadFIFO>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	60fb      	str	r3, [r7, #12]
      index++;
 800cc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc24:	3301      	adds	r3, #1
 800cc26:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cc28:	f7f7 f87a 	bl	8003d20 <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc36:	d102      	bne.n	800cc3e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc3c:	e058      	b.n	800ccf0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc44:	f240 532a 	movw	r3, #1322	@ 0x52a
 800cc48:	4013      	ands	r3, r2
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0d1      	beq.n	800cbf2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc54:	f003 0308 	and.w	r3, r3, #8
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2208      	movs	r2, #8
 800cc62:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cc64:	2308      	movs	r3, #8
 800cc66:	e043      	b.n	800ccf0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d005      	beq.n	800cc82 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc7e:	2302      	movs	r3, #2
 800cc80:	e036      	b.n	800ccf0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc88:	f003 0320 	and.w	r3, r3, #32
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d005      	beq.n	800cc9c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2220      	movs	r2, #32
 800cc96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cc98:	2320      	movs	r3, #32
 800cc9a:	e029      	b.n	800ccf0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a15      	ldr	r2, [pc, #84]	@ (800ccf8 <SD_FindSCR+0x19c>)
 800cca2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	061a      	lsls	r2, r3, #24
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	0a1b      	lsrs	r3, r3, #8
 800ccb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ccba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	0e1b      	lsrs	r3, r3, #24
 800ccc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	601a      	str	r2, [r3, #0]
    scr++;
 800ccc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc8:	3304      	adds	r3, #4
 800ccca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	061a      	lsls	r2, r3, #24
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	021b      	lsls	r3, r3, #8
 800ccd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	0a1b      	lsrs	r3, r3, #8
 800ccde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cce2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	0e1b      	lsrs	r3, r3, #24
 800cce8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800ccea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3738      	adds	r7, #56	@ 0x38
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	18000f3a 	.word	0x18000f3a

0800ccfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e10f      	b.n	800cf2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a87      	ldr	r2, [pc, #540]	@ (800cf38 <HAL_SPI_Init+0x23c>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d00f      	beq.n	800cd3e <HAL_SPI_Init+0x42>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a86      	ldr	r2, [pc, #536]	@ (800cf3c <HAL_SPI_Init+0x240>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d00a      	beq.n	800cd3e <HAL_SPI_Init+0x42>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a84      	ldr	r2, [pc, #528]	@ (800cf40 <HAL_SPI_Init+0x244>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d005      	beq.n	800cd3e <HAL_SPI_Init+0x42>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	2b0f      	cmp	r3, #15
 800cd38:	d901      	bls.n	800cd3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e0f7      	b.n	800cf2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fbbc 	bl	800d4bc <SPI_GetPacketSize>
 800cd44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a7b      	ldr	r2, [pc, #492]	@ (800cf38 <HAL_SPI_Init+0x23c>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d00c      	beq.n	800cd6a <HAL_SPI_Init+0x6e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a79      	ldr	r2, [pc, #484]	@ (800cf3c <HAL_SPI_Init+0x240>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d007      	beq.n	800cd6a <HAL_SPI_Init+0x6e>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a78      	ldr	r2, [pc, #480]	@ (800cf40 <HAL_SPI_Init+0x244>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d002      	beq.n	800cd6a <HAL_SPI_Init+0x6e>
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b08      	cmp	r3, #8
 800cd68:	d811      	bhi.n	800cd8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd6e:	4a72      	ldr	r2, [pc, #456]	@ (800cf38 <HAL_SPI_Init+0x23c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d009      	beq.n	800cd88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a70      	ldr	r2, [pc, #448]	@ (800cf3c <HAL_SPI_Init+0x240>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d004      	beq.n	800cd88 <HAL_SPI_Init+0x8c>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a6f      	ldr	r2, [pc, #444]	@ (800cf40 <HAL_SPI_Init+0x244>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d104      	bne.n	800cd92 <HAL_SPI_Init+0x96>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b10      	cmp	r3, #16
 800cd8c:	d901      	bls.n	800cd92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e0cd      	b.n	800cf2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7f5 f942 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 0201 	bic.w	r2, r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cdce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cdd8:	d119      	bne.n	800ce0e <HAL_SPI_Init+0x112>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cde2:	d103      	bne.n	800cdec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d008      	beq.n	800cdfe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10c      	bne.n	800ce0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdfc:	d107      	bne.n	800ce0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ce0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00f      	beq.n	800ce3a <HAL_SPI_Init+0x13e>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	2b06      	cmp	r3, #6
 800ce20:	d90b      	bls.n	800ce3a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	e007      	b.n	800ce4a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	69da      	ldr	r2, [r3, #28]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce52:	431a      	orrs	r2, r3
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce5c:	ea42 0103 	orr.w	r1, r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	431a      	orrs	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	431a      	orrs	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	431a      	orrs	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	431a      	orrs	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ceaa:	ea42 0103 	orr.w	r1, r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d113      	bne.n	800ceea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ced4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cee8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f022 0201 	bic.w	r2, r2, #1
 800cef8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	430a      	orrs	r2, r1
 800cf1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	40013000 	.word	0x40013000
 800cf3c:	40003800 	.word	0x40003800
 800cf40:	40003c00 	.word	0x40003c00

0800cf44 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b088      	sub	sp, #32
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	4613      	mov	r3, r2
 800cf52:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	3320      	adds	r3, #32
 800cf5a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf5c:	f7f6 fee0 	bl	8003d20 <HAL_GetTick>
 800cf60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d001      	beq.n	800cf72 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	e1d1      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <HAL_SPI_Transmit+0x3a>
 800cf78:	88fb      	ldrh	r3, [r7, #6]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e1c9      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d101      	bne.n	800cf90 <HAL_SPI_Transmit+0x4c>
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	e1c2      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2203      	movs	r2, #3
 800cf9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	88fa      	ldrh	r2, [r7, #6]
 800cfb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	88fa      	ldrh	r2, [r7, #6]
 800cfba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cfe8:	d108      	bne.n	800cffc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	e009      	b.n	800d010 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d00e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	4b96      	ldr	r3, [pc, #600]	@ (800d270 <HAL_SPI_Transmit+0x32c>)
 800d018:	4013      	ands	r3, r2
 800d01a:	88f9      	ldrh	r1, [r7, #6]
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	6812      	ldr	r2, [r2, #0]
 800d020:	430b      	orrs	r3, r1
 800d022:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f042 0201 	orr.w	r2, r2, #1
 800d032:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d03c:	d107      	bne.n	800d04e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d04c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	2b0f      	cmp	r3, #15
 800d054:	d947      	bls.n	800d0e6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d056:	e03f      	b.n	800d0d8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b02      	cmp	r3, #2
 800d064:	d114      	bne.n	800d090 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	6812      	ldr	r2, [r2, #0]
 800d070:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d076:	1d1a      	adds	r2, r3, #4
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d082:	b29b      	uxth	r3, r3
 800d084:	3b01      	subs	r3, #1
 800d086:	b29a      	uxth	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d08e:	e023      	b.n	800d0d8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d090:	f7f6 fe46 	bl	8003d20 <HAL_GetTick>
 800d094:	4602      	mov	r2, r0
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d803      	bhi.n	800d0a8 <HAL_SPI_Transmit+0x164>
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0a6:	d102      	bne.n	800d0ae <HAL_SPI_Transmit+0x16a>
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d114      	bne.n	800d0d8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 f936 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e11e      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1b9      	bne.n	800d058 <HAL_SPI_Transmit+0x114>
 800d0e4:	e0f1      	b.n	800d2ca <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	2b07      	cmp	r3, #7
 800d0ec:	f240 80e6 	bls.w	800d2bc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d0f0:	e05d      	b.n	800d1ae <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	f003 0302 	and.w	r3, r3, #2
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d132      	bne.n	800d166 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d106:	b29b      	uxth	r3, r3
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d918      	bls.n	800d13e <HAL_SPI_Transmit+0x1fa>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d014      	beq.n	800d13e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6812      	ldr	r2, [r2, #0]
 800d11e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d124:	1d1a      	adds	r2, r3, #4
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d130:	b29b      	uxth	r3, r3
 800d132:	3b02      	subs	r3, #2
 800d134:	b29a      	uxth	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d13c:	e037      	b.n	800d1ae <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d142:	881a      	ldrh	r2, [r3, #0]
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d14c:	1c9a      	adds	r2, r3, #2
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d158:	b29b      	uxth	r3, r3
 800d15a:	3b01      	subs	r3, #1
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d164:	e023      	b.n	800d1ae <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d166:	f7f6 fddb 	bl	8003d20 <HAL_GetTick>
 800d16a:	4602      	mov	r2, r0
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	429a      	cmp	r2, r3
 800d174:	d803      	bhi.n	800d17e <HAL_SPI_Transmit+0x23a>
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d17c:	d102      	bne.n	800d184 <HAL_SPI_Transmit+0x240>
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d114      	bne.n	800d1ae <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 f8cb 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d190:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	e0b3      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d19b      	bne.n	800d0f2 <HAL_SPI_Transmit+0x1ae>
 800d1ba:	e086      	b.n	800d2ca <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d154      	bne.n	800d274 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d918      	bls.n	800d208 <HAL_SPI_Transmit+0x2c4>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1da:	2b40      	cmp	r3, #64	@ 0x40
 800d1dc:	d914      	bls.n	800d208 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	6812      	ldr	r2, [r2, #0]
 800d1e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1ee:	1d1a      	adds	r2, r3, #4
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	3b04      	subs	r3, #4
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d206:	e059      	b.n	800d2bc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d20e:	b29b      	uxth	r3, r3
 800d210:	2b01      	cmp	r3, #1
 800d212:	d917      	bls.n	800d244 <HAL_SPI_Transmit+0x300>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d013      	beq.n	800d244 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d220:	881a      	ldrh	r2, [r3, #0]
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d22a:	1c9a      	adds	r2, r3, #2
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d236:	b29b      	uxth	r3, r3
 800d238:	3b02      	subs	r3, #2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d242:	e03b      	b.n	800d2bc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3320      	adds	r3, #32
 800d24e:	7812      	ldrb	r2, [r2, #0]
 800d250:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d262:	b29b      	uxth	r3, r3
 800d264:	3b01      	subs	r3, #1
 800d266:	b29a      	uxth	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d26e:	e025      	b.n	800d2bc <HAL_SPI_Transmit+0x378>
 800d270:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d274:	f7f6 fd54 	bl	8003d20 <HAL_GetTick>
 800d278:	4602      	mov	r2, r0
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	429a      	cmp	r2, r3
 800d282:	d803      	bhi.n	800d28c <HAL_SPI_Transmit+0x348>
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d28a:	d102      	bne.n	800d292 <HAL_SPI_Transmit+0x34e>
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d114      	bne.n	800d2bc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f000 f844 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d29e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e02c      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f47f af79 	bne.w	800d1bc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2108      	movs	r1, #8
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 f8c3 	bl	800d460 <SPI_WaitOnFlagUntilTimeout>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2e6:	f043 0220 	orr.w	r2, r3, #32
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 f815 	bl	800d320 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d314:	2300      	movs	r3, #0
  }
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop

0800d320 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	699a      	ldr	r2, [r3, #24]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f042 0208 	orr.w	r2, r2, #8
 800d33e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f042 0210 	orr.w	r2, r2, #16
 800d34e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 0201 	bic.w	r2, r2, #1
 800d35e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6919      	ldr	r1, [r3, #16]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	4b3c      	ldr	r3, [pc, #240]	@ (800d45c <SPI_CloseTransfer+0x13c>)
 800d36c:	400b      	ands	r3, r1
 800d36e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	689a      	ldr	r2, [r3, #8]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d37e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d014      	beq.n	800d3b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00f      	beq.n	800d3b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d39c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	699a      	ldr	r2, [r3, #24]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f042 0220 	orr.w	r2, r2, #32
 800d3b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d014      	beq.n	800d3ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00f      	beq.n	800d3ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3d2:	f043 0204 	orr.w	r2, r3, #4
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	699a      	ldr	r2, [r3, #24]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00f      	beq.n	800d416 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3fc:	f043 0201 	orr.w	r2, r3, #1
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	699a      	ldr	r2, [r3, #24]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d414:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00f      	beq.n	800d440 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d426:	f043 0208 	orr.w	r2, r3, #8
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d43e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d450:	bf00      	nop
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	fffffc90 	.word	0xfffffc90

0800d460 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	603b      	str	r3, [r7, #0]
 800d46c:	4613      	mov	r3, r2
 800d46e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d470:	e010      	b.n	800d494 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d472:	f7f6 fc55 	bl	8003d20 <HAL_GetTick>
 800d476:	4602      	mov	r2, r0
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d803      	bhi.n	800d48a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d488:	d102      	bne.n	800d490 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e00f      	b.n	800d4b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	695a      	ldr	r2, [r3, #20]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4013      	ands	r3, r2
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	bf0c      	ite	eq
 800d4a4:	2301      	moveq	r3, #1
 800d4a6:	2300      	movne	r3, #0
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d0df      	beq.n	800d472 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c8:	095b      	lsrs	r3, r3, #5
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	3307      	adds	r3, #7
 800d4da:	08db      	lsrs	r3, r3, #3
 800d4dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	e049      	b.n	800d598 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7f4 fdf1 	bl	8002100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2202      	movs	r2, #2
 800d522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3304      	adds	r3, #4
 800d52e:	4619      	mov	r1, r3
 800d530:	4610      	mov	r0, r2
 800d532:	f000 fbbf 	bl	800dcb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e049      	b.n	800d646 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f841 	bl	800d64e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f000 fb68 	bl	800dcb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d64e:	b480      	push	{r7}
 800d650:	b083      	sub	sp, #12
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
	...

0800d664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d109      	bne.n	800d688 <HAL_TIM_PWM_Start+0x24>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	bf14      	ite	ne
 800d680:	2301      	movne	r3, #1
 800d682:	2300      	moveq	r3, #0
 800d684:	b2db      	uxtb	r3, r3
 800d686:	e03c      	b.n	800d702 <HAL_TIM_PWM_Start+0x9e>
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2b04      	cmp	r3, #4
 800d68c:	d109      	bne.n	800d6a2 <HAL_TIM_PWM_Start+0x3e>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b01      	cmp	r3, #1
 800d698:	bf14      	ite	ne
 800d69a:	2301      	movne	r3, #1
 800d69c:	2300      	moveq	r3, #0
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	e02f      	b.n	800d702 <HAL_TIM_PWM_Start+0x9e>
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b08      	cmp	r3, #8
 800d6a6:	d109      	bne.n	800d6bc <HAL_TIM_PWM_Start+0x58>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	bf14      	ite	ne
 800d6b4:	2301      	movne	r3, #1
 800d6b6:	2300      	moveq	r3, #0
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	e022      	b.n	800d702 <HAL_TIM_PWM_Start+0x9e>
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2b0c      	cmp	r3, #12
 800d6c0:	d109      	bne.n	800d6d6 <HAL_TIM_PWM_Start+0x72>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	bf14      	ite	ne
 800d6ce:	2301      	movne	r3, #1
 800d6d0:	2300      	moveq	r3, #0
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	e015      	b.n	800d702 <HAL_TIM_PWM_Start+0x9e>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b10      	cmp	r3, #16
 800d6da:	d109      	bne.n	800d6f0 <HAL_TIM_PWM_Start+0x8c>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	bf14      	ite	ne
 800d6e8:	2301      	movne	r3, #1
 800d6ea:	2300      	moveq	r3, #0
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	e008      	b.n	800d702 <HAL_TIM_PWM_Start+0x9e>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	bf14      	ite	ne
 800d6fc:	2301      	movne	r3, #1
 800d6fe:	2300      	moveq	r3, #0
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	e0ab      	b.n	800d862 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d104      	bne.n	800d71a <HAL_TIM_PWM_Start+0xb6>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2202      	movs	r2, #2
 800d714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d718:	e023      	b.n	800d762 <HAL_TIM_PWM_Start+0xfe>
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	2b04      	cmp	r3, #4
 800d71e:	d104      	bne.n	800d72a <HAL_TIM_PWM_Start+0xc6>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2202      	movs	r2, #2
 800d724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d728:	e01b      	b.n	800d762 <HAL_TIM_PWM_Start+0xfe>
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b08      	cmp	r3, #8
 800d72e:	d104      	bne.n	800d73a <HAL_TIM_PWM_Start+0xd6>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2202      	movs	r2, #2
 800d734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d738:	e013      	b.n	800d762 <HAL_TIM_PWM_Start+0xfe>
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2b0c      	cmp	r3, #12
 800d73e:	d104      	bne.n	800d74a <HAL_TIM_PWM_Start+0xe6>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2202      	movs	r2, #2
 800d744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d748:	e00b      	b.n	800d762 <HAL_TIM_PWM_Start+0xfe>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d104      	bne.n	800d75a <HAL_TIM_PWM_Start+0xf6>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2202      	movs	r2, #2
 800d754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d758:	e003      	b.n	800d762 <HAL_TIM_PWM_Start+0xfe>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2202      	movs	r2, #2
 800d75e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2201      	movs	r2, #1
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fec2 	bl	800e4f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a3d      	ldr	r2, [pc, #244]	@ (800d86c <HAL_TIM_PWM_Start+0x208>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d013      	beq.n	800d7a2 <HAL_TIM_PWM_Start+0x13e>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a3c      	ldr	r2, [pc, #240]	@ (800d870 <HAL_TIM_PWM_Start+0x20c>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d00e      	beq.n	800d7a2 <HAL_TIM_PWM_Start+0x13e>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a3a      	ldr	r2, [pc, #232]	@ (800d874 <HAL_TIM_PWM_Start+0x210>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d009      	beq.n	800d7a2 <HAL_TIM_PWM_Start+0x13e>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a39      	ldr	r2, [pc, #228]	@ (800d878 <HAL_TIM_PWM_Start+0x214>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d004      	beq.n	800d7a2 <HAL_TIM_PWM_Start+0x13e>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a37      	ldr	r2, [pc, #220]	@ (800d87c <HAL_TIM_PWM_Start+0x218>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d101      	bne.n	800d7a6 <HAL_TIM_PWM_Start+0x142>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e000      	b.n	800d7a8 <HAL_TIM_PWM_Start+0x144>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d007      	beq.n	800d7bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d7ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a2a      	ldr	r2, [pc, #168]	@ (800d86c <HAL_TIM_PWM_Start+0x208>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d02c      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ce:	d027      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a2a      	ldr	r2, [pc, #168]	@ (800d880 <HAL_TIM_PWM_Start+0x21c>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d022      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a29      	ldr	r2, [pc, #164]	@ (800d884 <HAL_TIM_PWM_Start+0x220>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d01d      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a27      	ldr	r2, [pc, #156]	@ (800d888 <HAL_TIM_PWM_Start+0x224>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d018      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a1f      	ldr	r2, [pc, #124]	@ (800d870 <HAL_TIM_PWM_Start+0x20c>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d013      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a23      	ldr	r2, [pc, #140]	@ (800d88c <HAL_TIM_PWM_Start+0x228>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d00e      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a1b      	ldr	r2, [pc, #108]	@ (800d874 <HAL_TIM_PWM_Start+0x210>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d009      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a1f      	ldr	r2, [pc, #124]	@ (800d890 <HAL_TIM_PWM_Start+0x22c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d004      	beq.n	800d820 <HAL_TIM_PWM_Start+0x1bc>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a1e      	ldr	r2, [pc, #120]	@ (800d894 <HAL_TIM_PWM_Start+0x230>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d115      	bne.n	800d84c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689a      	ldr	r2, [r3, #8]
 800d826:	4b1c      	ldr	r3, [pc, #112]	@ (800d898 <HAL_TIM_PWM_Start+0x234>)
 800d828:	4013      	ands	r3, r2
 800d82a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2b06      	cmp	r3, #6
 800d830:	d015      	beq.n	800d85e <HAL_TIM_PWM_Start+0x1fa>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d838:	d011      	beq.n	800d85e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f042 0201 	orr.w	r2, r2, #1
 800d848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d84a:	e008      	b.n	800d85e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f042 0201 	orr.w	r2, r2, #1
 800d85a:	601a      	str	r2, [r3, #0]
 800d85c:	e000      	b.n	800d860 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d85e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	40010000 	.word	0x40010000
 800d870:	40010400 	.word	0x40010400
 800d874:	40014000 	.word	0x40014000
 800d878:	40014400 	.word	0x40014400
 800d87c:	40014800 	.word	0x40014800
 800d880:	40000400 	.word	0x40000400
 800d884:	40000800 	.word	0x40000800
 800d888:	40000c00 	.word	0x40000c00
 800d88c:	40001800 	.word	0x40001800
 800d890:	4000e000 	.word	0x4000e000
 800d894:	4000e400 	.word	0x4000e400
 800d898:	00010007 	.word	0x00010007

0800d89c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d101      	bne.n	800d8ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	e0ff      	b.n	800daba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b14      	cmp	r3, #20
 800d8c6:	f200 80f0 	bhi.w	800daaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d8d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d0:	0800d925 	.word	0x0800d925
 800d8d4:	0800daab 	.word	0x0800daab
 800d8d8:	0800daab 	.word	0x0800daab
 800d8dc:	0800daab 	.word	0x0800daab
 800d8e0:	0800d965 	.word	0x0800d965
 800d8e4:	0800daab 	.word	0x0800daab
 800d8e8:	0800daab 	.word	0x0800daab
 800d8ec:	0800daab 	.word	0x0800daab
 800d8f0:	0800d9a7 	.word	0x0800d9a7
 800d8f4:	0800daab 	.word	0x0800daab
 800d8f8:	0800daab 	.word	0x0800daab
 800d8fc:	0800daab 	.word	0x0800daab
 800d900:	0800d9e7 	.word	0x0800d9e7
 800d904:	0800daab 	.word	0x0800daab
 800d908:	0800daab 	.word	0x0800daab
 800d90c:	0800daab 	.word	0x0800daab
 800d910:	0800da29 	.word	0x0800da29
 800d914:	0800daab 	.word	0x0800daab
 800d918:	0800daab 	.word	0x0800daab
 800d91c:	0800daab 	.word	0x0800daab
 800d920:	0800da69 	.word	0x0800da69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68b9      	ldr	r1, [r7, #8]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f000 fa6e 	bl	800de0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	699a      	ldr	r2, [r3, #24]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f042 0208 	orr.w	r2, r2, #8
 800d93e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	699a      	ldr	r2, [r3, #24]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 0204 	bic.w	r2, r2, #4
 800d94e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6999      	ldr	r1, [r3, #24]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	691a      	ldr	r2, [r3, #16]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	430a      	orrs	r2, r1
 800d960:	619a      	str	r2, [r3, #24]
      break;
 800d962:	e0a5      	b.n	800dab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 fade 	bl	800df2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	699a      	ldr	r2, [r3, #24]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d97e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	699a      	ldr	r2, [r3, #24]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d98e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6999      	ldr	r1, [r3, #24]
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	021a      	lsls	r2, r3, #8
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	619a      	str	r2, [r3, #24]
      break;
 800d9a4:	e084      	b.n	800dab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 fb47 	bl	800e040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	69da      	ldr	r2, [r3, #28]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f042 0208 	orr.w	r2, r2, #8
 800d9c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69da      	ldr	r2, [r3, #28]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f022 0204 	bic.w	r2, r2, #4
 800d9d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	69d9      	ldr	r1, [r3, #28]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	691a      	ldr	r2, [r3, #16]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	61da      	str	r2, [r3, #28]
      break;
 800d9e4:	e064      	b.n	800dab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68b9      	ldr	r1, [r7, #8]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 fbaf 	bl	800e150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	69da      	ldr	r2, [r3, #28]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	69da      	ldr	r2, [r3, #28]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69d9      	ldr	r1, [r3, #28]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	021a      	lsls	r2, r3, #8
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	61da      	str	r2, [r3, #28]
      break;
 800da26:	e043      	b.n	800dab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68b9      	ldr	r1, [r7, #8]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fbf8 	bl	800e224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f042 0208 	orr.w	r2, r2, #8
 800da42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f022 0204 	bic.w	r2, r2, #4
 800da52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	691a      	ldr	r2, [r3, #16]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	430a      	orrs	r2, r1
 800da64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da66:	e023      	b.n	800dab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68b9      	ldr	r1, [r7, #8]
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 fc3c 	bl	800e2ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	021a      	lsls	r2, r3, #8
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	430a      	orrs	r2, r1
 800daa6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800daa8:	e002      	b.n	800dab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	75fb      	strb	r3, [r7, #23]
      break;
 800daae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop

0800dac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d101      	bne.n	800dae0 <HAL_TIM_ConfigClockSource+0x1c>
 800dadc:	2302      	movs	r3, #2
 800dade:	e0dc      	b.n	800dc9a <HAL_TIM_ConfigClockSource+0x1d6>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	4b6a      	ldr	r3, [pc, #424]	@ (800dca4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dafc:	4013      	ands	r3, r2
 800dafe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800db06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a64      	ldr	r2, [pc, #400]	@ (800dca8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db16:	4293      	cmp	r3, r2
 800db18:	f000 80a9 	beq.w	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800db1c:	4a62      	ldr	r2, [pc, #392]	@ (800dca8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	f200 80ae 	bhi.w	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db24:	4a61      	ldr	r2, [pc, #388]	@ (800dcac <HAL_TIM_ConfigClockSource+0x1e8>)
 800db26:	4293      	cmp	r3, r2
 800db28:	f000 80a1 	beq.w	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800db2c:	4a5f      	ldr	r2, [pc, #380]	@ (800dcac <HAL_TIM_ConfigClockSource+0x1e8>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	f200 80a6 	bhi.w	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db34:	4a5e      	ldr	r2, [pc, #376]	@ (800dcb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db36:	4293      	cmp	r3, r2
 800db38:	f000 8099 	beq.w	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800db3c:	4a5c      	ldr	r2, [pc, #368]	@ (800dcb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	f200 809e 	bhi.w	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800db48:	f000 8091 	beq.w	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800db4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800db50:	f200 8096 	bhi.w	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db58:	f000 8089 	beq.w	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800db5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db60:	f200 808e 	bhi.w	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db68:	d03e      	beq.n	800dbe8 <HAL_TIM_ConfigClockSource+0x124>
 800db6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db6e:	f200 8087 	bhi.w	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db76:	f000 8086 	beq.w	800dc86 <HAL_TIM_ConfigClockSource+0x1c2>
 800db7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db7e:	d87f      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db80:	2b70      	cmp	r3, #112	@ 0x70
 800db82:	d01a      	beq.n	800dbba <HAL_TIM_ConfigClockSource+0xf6>
 800db84:	2b70      	cmp	r3, #112	@ 0x70
 800db86:	d87b      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db88:	2b60      	cmp	r3, #96	@ 0x60
 800db8a:	d050      	beq.n	800dc2e <HAL_TIM_ConfigClockSource+0x16a>
 800db8c:	2b60      	cmp	r3, #96	@ 0x60
 800db8e:	d877      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db90:	2b50      	cmp	r3, #80	@ 0x50
 800db92:	d03c      	beq.n	800dc0e <HAL_TIM_ConfigClockSource+0x14a>
 800db94:	2b50      	cmp	r3, #80	@ 0x50
 800db96:	d873      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800db98:	2b40      	cmp	r3, #64	@ 0x40
 800db9a:	d058      	beq.n	800dc4e <HAL_TIM_ConfigClockSource+0x18a>
 800db9c:	2b40      	cmp	r3, #64	@ 0x40
 800db9e:	d86f      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba0:	2b30      	cmp	r3, #48	@ 0x30
 800dba2:	d064      	beq.n	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800dba4:	2b30      	cmp	r3, #48	@ 0x30
 800dba6:	d86b      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba8:	2b20      	cmp	r3, #32
 800dbaa:	d060      	beq.n	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	d867      	bhi.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d05c      	beq.n	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb4:	2b10      	cmp	r3, #16
 800dbb6:	d05a      	beq.n	800dc6e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb8:	e062      	b.n	800dc80 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dbca:	f000 fc73 	bl	800e4b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dbdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	609a      	str	r2, [r3, #8]
      break;
 800dbe6:	e04f      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dbf8:	f000 fc5c 	bl	800e4b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689a      	ldr	r2, [r3, #8]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dc0a:	609a      	str	r2, [r3, #8]
      break;
 800dc0c:	e03c      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	f000 fbcc 	bl	800e3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2150      	movs	r1, #80	@ 0x50
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fc26 	bl	800e478 <TIM_ITRx_SetConfig>
      break;
 800dc2c:	e02c      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f000 fbeb 	bl	800e416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2160      	movs	r1, #96	@ 0x60
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 fc16 	bl	800e478 <TIM_ITRx_SetConfig>
      break;
 800dc4c:	e01c      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f000 fbac 	bl	800e3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2140      	movs	r1, #64	@ 0x40
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 fc06 	bl	800e478 <TIM_ITRx_SetConfig>
      break;
 800dc6c:	e00c      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4619      	mov	r1, r3
 800dc78:	4610      	mov	r0, r2
 800dc7a:	f000 fbfd 	bl	800e478 <TIM_ITRx_SetConfig>
      break;
 800dc7e:	e003      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	73fb      	strb	r3, [r7, #15]
      break;
 800dc84:	e000      	b.n	800dc88 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	ffceff88 	.word	0xffceff88
 800dca8:	00100040 	.word	0x00100040
 800dcac:	00100030 	.word	0x00100030
 800dcb0:	00100020 	.word	0x00100020

0800dcb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a47      	ldr	r2, [pc, #284]	@ (800dde4 <TIM_Base_SetConfig+0x130>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d013      	beq.n	800dcf4 <TIM_Base_SetConfig+0x40>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcd2:	d00f      	beq.n	800dcf4 <TIM_Base_SetConfig+0x40>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4a44      	ldr	r2, [pc, #272]	@ (800dde8 <TIM_Base_SetConfig+0x134>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d00b      	beq.n	800dcf4 <TIM_Base_SetConfig+0x40>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a43      	ldr	r2, [pc, #268]	@ (800ddec <TIM_Base_SetConfig+0x138>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d007      	beq.n	800dcf4 <TIM_Base_SetConfig+0x40>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a42      	ldr	r2, [pc, #264]	@ (800ddf0 <TIM_Base_SetConfig+0x13c>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d003      	beq.n	800dcf4 <TIM_Base_SetConfig+0x40>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4a41      	ldr	r2, [pc, #260]	@ (800ddf4 <TIM_Base_SetConfig+0x140>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d108      	bne.n	800dd06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4a36      	ldr	r2, [pc, #216]	@ (800dde4 <TIM_Base_SetConfig+0x130>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d027      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd14:	d023      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	4a33      	ldr	r2, [pc, #204]	@ (800dde8 <TIM_Base_SetConfig+0x134>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d01f      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a32      	ldr	r2, [pc, #200]	@ (800ddec <TIM_Base_SetConfig+0x138>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d01b      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a31      	ldr	r2, [pc, #196]	@ (800ddf0 <TIM_Base_SetConfig+0x13c>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d017      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a30      	ldr	r2, [pc, #192]	@ (800ddf4 <TIM_Base_SetConfig+0x140>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d013      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a2f      	ldr	r2, [pc, #188]	@ (800ddf8 <TIM_Base_SetConfig+0x144>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d00f      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4a2e      	ldr	r2, [pc, #184]	@ (800ddfc <TIM_Base_SetConfig+0x148>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d00b      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a2d      	ldr	r2, [pc, #180]	@ (800de00 <TIM_Base_SetConfig+0x14c>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d007      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a2c      	ldr	r2, [pc, #176]	@ (800de04 <TIM_Base_SetConfig+0x150>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d003      	beq.n	800dd5e <TIM_Base_SetConfig+0xaa>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a2b      	ldr	r2, [pc, #172]	@ (800de08 <TIM_Base_SetConfig+0x154>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d108      	bne.n	800dd70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	695b      	ldr	r3, [r3, #20]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	689a      	ldr	r2, [r3, #8]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a14      	ldr	r2, [pc, #80]	@ (800dde4 <TIM_Base_SetConfig+0x130>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00f      	beq.n	800ddb6 <TIM_Base_SetConfig+0x102>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a16      	ldr	r2, [pc, #88]	@ (800ddf4 <TIM_Base_SetConfig+0x140>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d00b      	beq.n	800ddb6 <TIM_Base_SetConfig+0x102>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a15      	ldr	r2, [pc, #84]	@ (800ddf8 <TIM_Base_SetConfig+0x144>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d007      	beq.n	800ddb6 <TIM_Base_SetConfig+0x102>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a14      	ldr	r2, [pc, #80]	@ (800ddfc <TIM_Base_SetConfig+0x148>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d003      	beq.n	800ddb6 <TIM_Base_SetConfig+0x102>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a13      	ldr	r2, [pc, #76]	@ (800de00 <TIM_Base_SetConfig+0x14c>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d103      	bne.n	800ddbe <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f043 0204 	orr.w	r2, r3, #4
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	601a      	str	r2, [r3, #0]
}
 800ddd6:	bf00      	nop
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	40010000 	.word	0x40010000
 800dde8:	40000400 	.word	0x40000400
 800ddec:	40000800 	.word	0x40000800
 800ddf0:	40000c00 	.word	0x40000c00
 800ddf4:	40010400 	.word	0x40010400
 800ddf8:	40014000 	.word	0x40014000
 800ddfc:	40014400 	.word	0x40014400
 800de00:	40014800 	.word	0x40014800
 800de04:	4000e000 	.word	0x4000e000
 800de08:	4000e400 	.word	0x4000e400

0800de0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b087      	sub	sp, #28
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	f023 0201 	bic.w	r2, r3, #1
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	699b      	ldr	r3, [r3, #24]
 800de32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	4b37      	ldr	r3, [pc, #220]	@ (800df14 <TIM_OC1_SetConfig+0x108>)
 800de38:	4013      	ands	r3, r2
 800de3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f023 0303 	bic.w	r3, r3, #3
 800de42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	4313      	orrs	r3, r2
 800de4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f023 0302 	bic.w	r3, r3, #2
 800de54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a2d      	ldr	r2, [pc, #180]	@ (800df18 <TIM_OC1_SetConfig+0x10c>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d00f      	beq.n	800de88 <TIM_OC1_SetConfig+0x7c>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a2c      	ldr	r2, [pc, #176]	@ (800df1c <TIM_OC1_SetConfig+0x110>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d00b      	beq.n	800de88 <TIM_OC1_SetConfig+0x7c>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a2b      	ldr	r2, [pc, #172]	@ (800df20 <TIM_OC1_SetConfig+0x114>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d007      	beq.n	800de88 <TIM_OC1_SetConfig+0x7c>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a2a      	ldr	r2, [pc, #168]	@ (800df24 <TIM_OC1_SetConfig+0x118>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d003      	beq.n	800de88 <TIM_OC1_SetConfig+0x7c>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4a29      	ldr	r2, [pc, #164]	@ (800df28 <TIM_OC1_SetConfig+0x11c>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d10c      	bne.n	800dea2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	f023 0308 	bic.w	r3, r3, #8
 800de8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	4313      	orrs	r3, r2
 800de98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	f023 0304 	bic.w	r3, r3, #4
 800dea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a1c      	ldr	r2, [pc, #112]	@ (800df18 <TIM_OC1_SetConfig+0x10c>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d00f      	beq.n	800deca <TIM_OC1_SetConfig+0xbe>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a1b      	ldr	r2, [pc, #108]	@ (800df1c <TIM_OC1_SetConfig+0x110>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d00b      	beq.n	800deca <TIM_OC1_SetConfig+0xbe>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a1a      	ldr	r2, [pc, #104]	@ (800df20 <TIM_OC1_SetConfig+0x114>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d007      	beq.n	800deca <TIM_OC1_SetConfig+0xbe>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a19      	ldr	r2, [pc, #100]	@ (800df24 <TIM_OC1_SetConfig+0x118>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d003      	beq.n	800deca <TIM_OC1_SetConfig+0xbe>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4a18      	ldr	r2, [pc, #96]	@ (800df28 <TIM_OC1_SetConfig+0x11c>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d111      	bne.n	800deee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ded0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ded8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	4313      	orrs	r3, r2
 800deec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	685a      	ldr	r2, [r3, #4]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	621a      	str	r2, [r3, #32]
}
 800df08:	bf00      	nop
 800df0a:	371c      	adds	r7, #28
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	fffeff8f 	.word	0xfffeff8f
 800df18:	40010000 	.word	0x40010000
 800df1c:	40010400 	.word	0x40010400
 800df20:	40014000 	.word	0x40014000
 800df24:	40014400 	.word	0x40014400
 800df28:	40014800 	.word	0x40014800

0800df2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a1b      	ldr	r3, [r3, #32]
 800df3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a1b      	ldr	r3, [r3, #32]
 800df40:	f023 0210 	bic.w	r2, r3, #16
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	4b34      	ldr	r3, [pc, #208]	@ (800e028 <TIM_OC2_SetConfig+0xfc>)
 800df58:	4013      	ands	r3, r2
 800df5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	021b      	lsls	r3, r3, #8
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	f023 0320 	bic.w	r3, r3, #32
 800df76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	011b      	lsls	r3, r3, #4
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	4313      	orrs	r3, r2
 800df82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a29      	ldr	r2, [pc, #164]	@ (800e02c <TIM_OC2_SetConfig+0x100>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d003      	beq.n	800df94 <TIM_OC2_SetConfig+0x68>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a28      	ldr	r2, [pc, #160]	@ (800e030 <TIM_OC2_SetConfig+0x104>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d10d      	bne.n	800dfb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a1e      	ldr	r2, [pc, #120]	@ (800e02c <TIM_OC2_SetConfig+0x100>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d00f      	beq.n	800dfd8 <TIM_OC2_SetConfig+0xac>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a1d      	ldr	r2, [pc, #116]	@ (800e030 <TIM_OC2_SetConfig+0x104>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d00b      	beq.n	800dfd8 <TIM_OC2_SetConfig+0xac>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a1c      	ldr	r2, [pc, #112]	@ (800e034 <TIM_OC2_SetConfig+0x108>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d007      	beq.n	800dfd8 <TIM_OC2_SetConfig+0xac>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a1b      	ldr	r2, [pc, #108]	@ (800e038 <TIM_OC2_SetConfig+0x10c>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d003      	beq.n	800dfd8 <TIM_OC2_SetConfig+0xac>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a1a      	ldr	r2, [pc, #104]	@ (800e03c <TIM_OC2_SetConfig+0x110>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d113      	bne.n	800e000 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dfde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dfe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	693a      	ldr	r2, [r7, #16]
 800dff0:	4313      	orrs	r3, r2
 800dff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	693a      	ldr	r2, [r7, #16]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	621a      	str	r2, [r3, #32]
}
 800e01a:	bf00      	nop
 800e01c:	371c      	adds	r7, #28
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	feff8fff 	.word	0xfeff8fff
 800e02c:	40010000 	.word	0x40010000
 800e030:	40010400 	.word	0x40010400
 800e034:	40014000 	.word	0x40014000
 800e038:	40014400 	.word	0x40014400
 800e03c:	40014800 	.word	0x40014800

0800e040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e040:	b480      	push	{r7}
 800e042:	b087      	sub	sp, #28
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a1b      	ldr	r3, [r3, #32]
 800e04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	69db      	ldr	r3, [r3, #28]
 800e066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	4b33      	ldr	r3, [pc, #204]	@ (800e138 <TIM_OC3_SetConfig+0xf8>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f023 0303 	bic.w	r3, r3, #3
 800e076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68fa      	ldr	r2, [r7, #12]
 800e07e:	4313      	orrs	r3, r2
 800e080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	021b      	lsls	r3, r3, #8
 800e090:	697a      	ldr	r2, [r7, #20]
 800e092:	4313      	orrs	r3, r2
 800e094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a28      	ldr	r2, [pc, #160]	@ (800e13c <TIM_OC3_SetConfig+0xfc>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d003      	beq.n	800e0a6 <TIM_OC3_SetConfig+0x66>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a27      	ldr	r2, [pc, #156]	@ (800e140 <TIM_OC3_SetConfig+0x100>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d10d      	bne.n	800e0c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e0ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	021b      	lsls	r3, r3, #8
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e0c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800e13c <TIM_OC3_SetConfig+0xfc>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d00f      	beq.n	800e0ea <TIM_OC3_SetConfig+0xaa>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4a1c      	ldr	r2, [pc, #112]	@ (800e140 <TIM_OC3_SetConfig+0x100>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d00b      	beq.n	800e0ea <TIM_OC3_SetConfig+0xaa>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800e144 <TIM_OC3_SetConfig+0x104>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d007      	beq.n	800e0ea <TIM_OC3_SetConfig+0xaa>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4a1a      	ldr	r2, [pc, #104]	@ (800e148 <TIM_OC3_SetConfig+0x108>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d003      	beq.n	800e0ea <TIM_OC3_SetConfig+0xaa>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4a19      	ldr	r2, [pc, #100]	@ (800e14c <TIM_OC3_SetConfig+0x10c>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d113      	bne.n	800e112 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	011b      	lsls	r3, r3, #4
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	4313      	orrs	r3, r2
 800e104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	011b      	lsls	r3, r3, #4
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	4313      	orrs	r3, r2
 800e110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	693a      	ldr	r2, [r7, #16]
 800e116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	685a      	ldr	r2, [r3, #4]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	697a      	ldr	r2, [r7, #20]
 800e12a:	621a      	str	r2, [r3, #32]
}
 800e12c:	bf00      	nop
 800e12e:	371c      	adds	r7, #28
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	fffeff8f 	.word	0xfffeff8f
 800e13c:	40010000 	.word	0x40010000
 800e140:	40010400 	.word	0x40010400
 800e144:	40014000 	.word	0x40014000
 800e148:	40014400 	.word	0x40014400
 800e14c:	40014800 	.word	0x40014800

0800e150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e150:	b480      	push	{r7}
 800e152:	b087      	sub	sp, #28
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	69db      	ldr	r3, [r3, #28]
 800e176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4b24      	ldr	r3, [pc, #144]	@ (800e20c <TIM_OC4_SetConfig+0xbc>)
 800e17c:	4013      	ands	r3, r2
 800e17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	021b      	lsls	r3, r3, #8
 800e18e:	68fa      	ldr	r2, [r7, #12]
 800e190:	4313      	orrs	r3, r2
 800e192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e19a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	031b      	lsls	r3, r3, #12
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a19      	ldr	r2, [pc, #100]	@ (800e210 <TIM_OC4_SetConfig+0xc0>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d00f      	beq.n	800e1d0 <TIM_OC4_SetConfig+0x80>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a18      	ldr	r2, [pc, #96]	@ (800e214 <TIM_OC4_SetConfig+0xc4>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d00b      	beq.n	800e1d0 <TIM_OC4_SetConfig+0x80>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a17      	ldr	r2, [pc, #92]	@ (800e218 <TIM_OC4_SetConfig+0xc8>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d007      	beq.n	800e1d0 <TIM_OC4_SetConfig+0x80>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4a16      	ldr	r2, [pc, #88]	@ (800e21c <TIM_OC4_SetConfig+0xcc>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d003      	beq.n	800e1d0 <TIM_OC4_SetConfig+0x80>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4a15      	ldr	r2, [pc, #84]	@ (800e220 <TIM_OC4_SetConfig+0xd0>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d109      	bne.n	800e1e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	019b      	lsls	r3, r3, #6
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	697a      	ldr	r2, [r7, #20]
 800e1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	685a      	ldr	r2, [r3, #4]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	621a      	str	r2, [r3, #32]
}
 800e1fe:	bf00      	nop
 800e200:	371c      	adds	r7, #28
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	feff8fff 	.word	0xfeff8fff
 800e210:	40010000 	.word	0x40010000
 800e214:	40010400 	.word	0x40010400
 800e218:	40014000 	.word	0x40014000
 800e21c:	40014400 	.word	0x40014400
 800e220:	40014800 	.word	0x40014800

0800e224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e224:	b480      	push	{r7}
 800e226:	b087      	sub	sp, #28
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	4b21      	ldr	r3, [pc, #132]	@ (800e2d4 <TIM_OC5_SetConfig+0xb0>)
 800e250:	4013      	ands	r3, r2
 800e252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	041b      	lsls	r3, r3, #16
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	4313      	orrs	r3, r2
 800e270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a18      	ldr	r2, [pc, #96]	@ (800e2d8 <TIM_OC5_SetConfig+0xb4>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d00f      	beq.n	800e29a <TIM_OC5_SetConfig+0x76>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a17      	ldr	r2, [pc, #92]	@ (800e2dc <TIM_OC5_SetConfig+0xb8>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d00b      	beq.n	800e29a <TIM_OC5_SetConfig+0x76>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a16      	ldr	r2, [pc, #88]	@ (800e2e0 <TIM_OC5_SetConfig+0xbc>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d007      	beq.n	800e29a <TIM_OC5_SetConfig+0x76>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a15      	ldr	r2, [pc, #84]	@ (800e2e4 <TIM_OC5_SetConfig+0xc0>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d003      	beq.n	800e29a <TIM_OC5_SetConfig+0x76>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a14      	ldr	r2, [pc, #80]	@ (800e2e8 <TIM_OC5_SetConfig+0xc4>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d109      	bne.n	800e2ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	695b      	ldr	r3, [r3, #20]
 800e2a6:	021b      	lsls	r3, r3, #8
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	697a      	ldr	r2, [r7, #20]
 800e2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	621a      	str	r2, [r3, #32]
}
 800e2c8:	bf00      	nop
 800e2ca:	371c      	adds	r7, #28
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	fffeff8f 	.word	0xfffeff8f
 800e2d8:	40010000 	.word	0x40010000
 800e2dc:	40010400 	.word	0x40010400
 800e2e0:	40014000 	.word	0x40014000
 800e2e4:	40014400 	.word	0x40014400
 800e2e8:	40014800 	.word	0x40014800

0800e2ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b087      	sub	sp, #28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a1b      	ldr	r3, [r3, #32]
 800e300:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	4b22      	ldr	r3, [pc, #136]	@ (800e3a0 <TIM_OC6_SetConfig+0xb4>)
 800e318:	4013      	ands	r3, r2
 800e31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	021b      	lsls	r3, r3, #8
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	4313      	orrs	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e32e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	051b      	lsls	r3, r3, #20
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	4313      	orrs	r3, r2
 800e33a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a19      	ldr	r2, [pc, #100]	@ (800e3a4 <TIM_OC6_SetConfig+0xb8>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d00f      	beq.n	800e364 <TIM_OC6_SetConfig+0x78>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a18      	ldr	r2, [pc, #96]	@ (800e3a8 <TIM_OC6_SetConfig+0xbc>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d00b      	beq.n	800e364 <TIM_OC6_SetConfig+0x78>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a17      	ldr	r2, [pc, #92]	@ (800e3ac <TIM_OC6_SetConfig+0xc0>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d007      	beq.n	800e364 <TIM_OC6_SetConfig+0x78>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4a16      	ldr	r2, [pc, #88]	@ (800e3b0 <TIM_OC6_SetConfig+0xc4>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d003      	beq.n	800e364 <TIM_OC6_SetConfig+0x78>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4a15      	ldr	r2, [pc, #84]	@ (800e3b4 <TIM_OC6_SetConfig+0xc8>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d109      	bne.n	800e378 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e36a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	029b      	lsls	r3, r3, #10
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	4313      	orrs	r3, r2
 800e376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	621a      	str	r2, [r3, #32]
}
 800e392:	bf00      	nop
 800e394:	371c      	adds	r7, #28
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	feff8fff 	.word	0xfeff8fff
 800e3a4:	40010000 	.word	0x40010000
 800e3a8:	40010400 	.word	0x40010400
 800e3ac:	40014000 	.word	0x40014000
 800e3b0:	40014400 	.word	0x40014400
 800e3b4:	40014800 	.word	0x40014800

0800e3b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	6a1b      	ldr	r3, [r3, #32]
 800e3c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6a1b      	ldr	r3, [r3, #32]
 800e3ce:	f023 0201 	bic.w	r2, r3, #1
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e3e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	011b      	lsls	r3, r3, #4
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	f023 030a 	bic.w	r3, r3, #10
 800e3f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	621a      	str	r2, [r3, #32]
}
 800e40a:	bf00      	nop
 800e40c:	371c      	adds	r7, #28
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e416:	b480      	push	{r7}
 800e418:	b087      	sub	sp, #28
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	f023 0210 	bic.w	r2, r3, #16
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	031b      	lsls	r3, r3, #12
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	4313      	orrs	r3, r2
 800e44a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e452:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	011b      	lsls	r3, r3, #4
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	4313      	orrs	r3, r2
 800e45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	693a      	ldr	r2, [r7, #16]
 800e462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	697a      	ldr	r2, [r7, #20]
 800e468:	621a      	str	r2, [r3, #32]
}
 800e46a:	bf00      	nop
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	689b      	ldr	r3, [r3, #8]
 800e486:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	4b09      	ldr	r3, [pc, #36]	@ (800e4b0 <TIM_ITRx_SetConfig+0x38>)
 800e48c:	4013      	ands	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	4313      	orrs	r3, r2
 800e496:	f043 0307 	orr.w	r3, r3, #7
 800e49a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	609a      	str	r2, [r3, #8]
}
 800e4a2:	bf00      	nop
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	ffcfff8f 	.word	0xffcfff8f

0800e4b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
 800e4c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e4ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	021a      	lsls	r2, r3, #8
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	697a      	ldr	r2, [r7, #20]
 800e4e6:	609a      	str	r2, [r3, #8]
}
 800e4e8:	bf00      	nop
 800e4ea:	371c      	adds	r7, #28
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	f003 031f 	and.w	r3, r3, #31
 800e506:	2201      	movs	r2, #1
 800e508:	fa02 f303 	lsl.w	r3, r2, r3
 800e50c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6a1a      	ldr	r2, [r3, #32]
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	43db      	mvns	r3, r3
 800e516:	401a      	ands	r2, r3
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6a1a      	ldr	r2, [r3, #32]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f003 031f 	and.w	r3, r3, #31
 800e526:	6879      	ldr	r1, [r7, #4]
 800e528:	fa01 f303 	lsl.w	r3, r1, r3
 800e52c:	431a      	orrs	r2, r3
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	621a      	str	r2, [r3, #32]
}
 800e532:	bf00      	nop
 800e534:	371c      	adds	r7, #28
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
	...

0800e540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e550:	2b01      	cmp	r3, #1
 800e552:	d101      	bne.n	800e558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e554:	2302      	movs	r3, #2
 800e556:	e077      	b.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2202      	movs	r2, #2
 800e564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a35      	ldr	r2, [pc, #212]	@ (800e654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d004      	beq.n	800e58c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a34      	ldr	r2, [pc, #208]	@ (800e658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d108      	bne.n	800e59e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a25      	ldr	r2, [pc, #148]	@ (800e654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d02c      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5ca:	d027      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a22      	ldr	r2, [pc, #136]	@ (800e65c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d022      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a21      	ldr	r2, [pc, #132]	@ (800e660 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d01d      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a1f      	ldr	r2, [pc, #124]	@ (800e664 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d018      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a1a      	ldr	r2, [pc, #104]	@ (800e658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d013      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e668 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d00e      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a1a      	ldr	r2, [pc, #104]	@ (800e66c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d009      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a18      	ldr	r2, [pc, #96]	@ (800e670 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d004      	beq.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a17      	ldr	r2, [pc, #92]	@ (800e674 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d10c      	bne.n	800e636 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	689b      	ldr	r3, [r3, #8]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	40010000 	.word	0x40010000
 800e658:	40010400 	.word	0x40010400
 800e65c:	40000400 	.word	0x40000400
 800e660:	40000800 	.word	0x40000800
 800e664:	40000c00 	.word	0x40000c00
 800e668:	40001800 	.word	0x40001800
 800e66c:	40014000 	.word	0x40014000
 800e670:	4000e000 	.word	0x4000e000
 800e674:	4000e400 	.word	0x4000e400

0800e678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	e042      	b.n	800e710 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e690:	2b00      	cmp	r3, #0
 800e692:	d106      	bne.n	800e6a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7f3 fb7f 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2224      	movs	r2, #36	@ 0x24
 800e6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f022 0201 	bic.w	r2, r2, #1
 800e6b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d002      	beq.n	800e6c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 ff22 	bl	800f50c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f8b3 	bl	800e834 <UART_SetConfig>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d101      	bne.n	800e6d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e01b      	b.n	800e710 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e6e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	689a      	ldr	r2, [r3, #8]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e6f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0201 	orr.w	r2, r2, #1
 800e706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 ffa1 	bl	800f650 <UART_CheckIdleState>
 800e70e:	4603      	mov	r3, r0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08a      	sub	sp, #40	@ 0x28
 800e71c:	af02      	add	r7, sp, #8
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	4613      	mov	r3, r2
 800e726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e72e:	2b20      	cmp	r3, #32
 800e730:	d17b      	bne.n	800e82a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <HAL_UART_Transmit+0x26>
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	e074      	b.n	800e82c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2221      	movs	r2, #33	@ 0x21
 800e74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e752:	f7f5 fae5 	bl	8003d20 <HAL_GetTick>
 800e756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	88fa      	ldrh	r2, [r7, #6]
 800e75c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	88fa      	ldrh	r2, [r7, #6]
 800e764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e770:	d108      	bne.n	800e784 <HAL_UART_Transmit+0x6c>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d104      	bne.n	800e784 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	61bb      	str	r3, [r7, #24]
 800e782:	e003      	b.n	800e78c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e788:	2300      	movs	r3, #0
 800e78a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e78c:	e030      	b.n	800e7f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2200      	movs	r2, #0
 800e796:	2180      	movs	r1, #128	@ 0x80
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f001 f803 	bl	800f7a4 <UART_WaitOnFlagUntilTimeout>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d005      	beq.n	800e7b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2220      	movs	r2, #32
 800e7a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	e03d      	b.n	800e82c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10b      	bne.n	800e7ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	881b      	ldrh	r3, [r3, #0]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	3302      	adds	r3, #2
 800e7ca:	61bb      	str	r3, [r7, #24]
 800e7cc:	e007      	b.n	800e7de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	781a      	ldrb	r2, [r3, #0]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1c8      	bne.n	800e78e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	2200      	movs	r2, #0
 800e804:	2140      	movs	r1, #64	@ 0x40
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f000 ffcc 	bl	800f7a4 <UART_WaitOnFlagUntilTimeout>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d005      	beq.n	800e81e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2220      	movs	r2, #32
 800e816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e81a:	2303      	movs	r3, #3
 800e81c:	e006      	b.n	800e82c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2220      	movs	r2, #32
 800e822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e826:	2300      	movs	r3, #0
 800e828:	e000      	b.n	800e82c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e82a:	2302      	movs	r3, #2
  }
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3720      	adds	r7, #32
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e838:	b092      	sub	sp, #72	@ 0x48
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	689a      	ldr	r2, [r3, #8]
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	431a      	orrs	r2, r3
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	695b      	ldr	r3, [r3, #20]
 800e852:	431a      	orrs	r2, r3
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	69db      	ldr	r3, [r3, #28]
 800e858:	4313      	orrs	r3, r2
 800e85a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	4bbe      	ldr	r3, [pc, #760]	@ (800eb5c <UART_SetConfig+0x328>)
 800e864:	4013      	ands	r3, r2
 800e866:	697a      	ldr	r2, [r7, #20]
 800e868:	6812      	ldr	r2, [r2, #0]
 800e86a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e86c:	430b      	orrs	r3, r1
 800e86e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	430a      	orrs	r2, r1
 800e884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4ab3      	ldr	r2, [pc, #716]	@ (800eb60 <UART_SetConfig+0x32c>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d004      	beq.n	800e8a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e89c:	4313      	orrs	r3, r2
 800e89e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	689a      	ldr	r2, [r3, #8]
 800e8a6:	4baf      	ldr	r3, [pc, #700]	@ (800eb64 <UART_SetConfig+0x330>)
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	6812      	ldr	r2, [r2, #0]
 800e8ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8b0:	430b      	orrs	r3, r1
 800e8b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ba:	f023 010f 	bic.w	r1, r3, #15
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4aa6      	ldr	r2, [pc, #664]	@ (800eb68 <UART_SetConfig+0x334>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d177      	bne.n	800e9c4 <UART_SetConfig+0x190>
 800e8d4:	4ba5      	ldr	r3, [pc, #660]	@ (800eb6c <UART_SetConfig+0x338>)
 800e8d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e8dc:	2b28      	cmp	r3, #40	@ 0x28
 800e8de:	d86d      	bhi.n	800e9bc <UART_SetConfig+0x188>
 800e8e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e8e8 <UART_SetConfig+0xb4>)
 800e8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e6:	bf00      	nop
 800e8e8:	0800e98d 	.word	0x0800e98d
 800e8ec:	0800e9bd 	.word	0x0800e9bd
 800e8f0:	0800e9bd 	.word	0x0800e9bd
 800e8f4:	0800e9bd 	.word	0x0800e9bd
 800e8f8:	0800e9bd 	.word	0x0800e9bd
 800e8fc:	0800e9bd 	.word	0x0800e9bd
 800e900:	0800e9bd 	.word	0x0800e9bd
 800e904:	0800e9bd 	.word	0x0800e9bd
 800e908:	0800e995 	.word	0x0800e995
 800e90c:	0800e9bd 	.word	0x0800e9bd
 800e910:	0800e9bd 	.word	0x0800e9bd
 800e914:	0800e9bd 	.word	0x0800e9bd
 800e918:	0800e9bd 	.word	0x0800e9bd
 800e91c:	0800e9bd 	.word	0x0800e9bd
 800e920:	0800e9bd 	.word	0x0800e9bd
 800e924:	0800e9bd 	.word	0x0800e9bd
 800e928:	0800e99d 	.word	0x0800e99d
 800e92c:	0800e9bd 	.word	0x0800e9bd
 800e930:	0800e9bd 	.word	0x0800e9bd
 800e934:	0800e9bd 	.word	0x0800e9bd
 800e938:	0800e9bd 	.word	0x0800e9bd
 800e93c:	0800e9bd 	.word	0x0800e9bd
 800e940:	0800e9bd 	.word	0x0800e9bd
 800e944:	0800e9bd 	.word	0x0800e9bd
 800e948:	0800e9a5 	.word	0x0800e9a5
 800e94c:	0800e9bd 	.word	0x0800e9bd
 800e950:	0800e9bd 	.word	0x0800e9bd
 800e954:	0800e9bd 	.word	0x0800e9bd
 800e958:	0800e9bd 	.word	0x0800e9bd
 800e95c:	0800e9bd 	.word	0x0800e9bd
 800e960:	0800e9bd 	.word	0x0800e9bd
 800e964:	0800e9bd 	.word	0x0800e9bd
 800e968:	0800e9ad 	.word	0x0800e9ad
 800e96c:	0800e9bd 	.word	0x0800e9bd
 800e970:	0800e9bd 	.word	0x0800e9bd
 800e974:	0800e9bd 	.word	0x0800e9bd
 800e978:	0800e9bd 	.word	0x0800e9bd
 800e97c:	0800e9bd 	.word	0x0800e9bd
 800e980:	0800e9bd 	.word	0x0800e9bd
 800e984:	0800e9bd 	.word	0x0800e9bd
 800e988:	0800e9b5 	.word	0x0800e9b5
 800e98c:	2301      	movs	r3, #1
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e992:	e326      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e994:	2304      	movs	r3, #4
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99a:	e322      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e99c:	2308      	movs	r3, #8
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a2:	e31e      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e9a4:	2310      	movs	r3, #16
 800e9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9aa:	e31a      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e9ac:	2320      	movs	r3, #32
 800e9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b2:	e316      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e9b4:	2340      	movs	r3, #64	@ 0x40
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ba:	e312      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e9bc:	2380      	movs	r3, #128	@ 0x80
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c2:	e30e      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a69      	ldr	r2, [pc, #420]	@ (800eb70 <UART_SetConfig+0x33c>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d130      	bne.n	800ea30 <UART_SetConfig+0x1fc>
 800e9ce:	4b67      	ldr	r3, [pc, #412]	@ (800eb6c <UART_SetConfig+0x338>)
 800e9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9d2:	f003 0307 	and.w	r3, r3, #7
 800e9d6:	2b05      	cmp	r3, #5
 800e9d8:	d826      	bhi.n	800ea28 <UART_SetConfig+0x1f4>
 800e9da:	a201      	add	r2, pc, #4	@ (adr r2, 800e9e0 <UART_SetConfig+0x1ac>)
 800e9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e0:	0800e9f9 	.word	0x0800e9f9
 800e9e4:	0800ea01 	.word	0x0800ea01
 800e9e8:	0800ea09 	.word	0x0800ea09
 800e9ec:	0800ea11 	.word	0x0800ea11
 800e9f0:	0800ea19 	.word	0x0800ea19
 800e9f4:	0800ea21 	.word	0x0800ea21
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e2f0      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e2ec      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0e:	e2e8      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea10:	2310      	movs	r3, #16
 800ea12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea16:	e2e4      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea18:	2320      	movs	r3, #32
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1e:	e2e0      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea20:	2340      	movs	r3, #64	@ 0x40
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e2dc      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea28:	2380      	movs	r3, #128	@ 0x80
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2e:	e2d8      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a4f      	ldr	r2, [pc, #316]	@ (800eb74 <UART_SetConfig+0x340>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d130      	bne.n	800ea9c <UART_SetConfig+0x268>
 800ea3a:	4b4c      	ldr	r3, [pc, #304]	@ (800eb6c <UART_SetConfig+0x338>)
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b05      	cmp	r3, #5
 800ea44:	d826      	bhi.n	800ea94 <UART_SetConfig+0x260>
 800ea46:	a201      	add	r2, pc, #4	@ (adr r2, 800ea4c <UART_SetConfig+0x218>)
 800ea48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4c:	0800ea65 	.word	0x0800ea65
 800ea50:	0800ea6d 	.word	0x0800ea6d
 800ea54:	0800ea75 	.word	0x0800ea75
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea85 	.word	0x0800ea85
 800ea60:	0800ea8d 	.word	0x0800ea8d
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6a:	e2ba      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea72:	e2b6      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea74:	2308      	movs	r3, #8
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7a:	e2b2      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea7c:	2310      	movs	r3, #16
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea82:	e2ae      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea84:	2320      	movs	r3, #32
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8a:	e2aa      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea8c:	2340      	movs	r3, #64	@ 0x40
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea92:	e2a6      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea94:	2380      	movs	r3, #128	@ 0x80
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9a:	e2a2      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a35      	ldr	r2, [pc, #212]	@ (800eb78 <UART_SetConfig+0x344>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d130      	bne.n	800eb08 <UART_SetConfig+0x2d4>
 800eaa6:	4b31      	ldr	r3, [pc, #196]	@ (800eb6c <UART_SetConfig+0x338>)
 800eaa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	2b05      	cmp	r3, #5
 800eab0:	d826      	bhi.n	800eb00 <UART_SetConfig+0x2cc>
 800eab2:	a201      	add	r2, pc, #4	@ (adr r2, 800eab8 <UART_SetConfig+0x284>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800ead1 	.word	0x0800ead1
 800eabc:	0800ead9 	.word	0x0800ead9
 800eac0:	0800eae1 	.word	0x0800eae1
 800eac4:	0800eae9 	.word	0x0800eae9
 800eac8:	0800eaf1 	.word	0x0800eaf1
 800eacc:	0800eaf9 	.word	0x0800eaf9
 800ead0:	2300      	movs	r3, #0
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead6:	e284      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ead8:	2304      	movs	r3, #4
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eade:	e280      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eae0:	2308      	movs	r3, #8
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae6:	e27c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eae8:	2310      	movs	r3, #16
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaee:	e278      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf6:	e274      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eaf8:	2340      	movs	r3, #64	@ 0x40
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafe:	e270      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb00:	2380      	movs	r3, #128	@ 0x80
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb06:	e26c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a1b      	ldr	r2, [pc, #108]	@ (800eb7c <UART_SetConfig+0x348>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d142      	bne.n	800eb98 <UART_SetConfig+0x364>
 800eb12:	4b16      	ldr	r3, [pc, #88]	@ (800eb6c <UART_SetConfig+0x338>)
 800eb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d838      	bhi.n	800eb90 <UART_SetConfig+0x35c>
 800eb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb24 <UART_SetConfig+0x2f0>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb3d 	.word	0x0800eb3d
 800eb28:	0800eb45 	.word	0x0800eb45
 800eb2c:	0800eb4d 	.word	0x0800eb4d
 800eb30:	0800eb55 	.word	0x0800eb55
 800eb34:	0800eb81 	.word	0x0800eb81
 800eb38:	0800eb89 	.word	0x0800eb89
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e24e      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e24a      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e246      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb54:	2310      	movs	r3, #16
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5a:	e242      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb5c:	cfff69f3 	.word	0xcfff69f3
 800eb60:	58000c00 	.word	0x58000c00
 800eb64:	11fff4ff 	.word	0x11fff4ff
 800eb68:	40011000 	.word	0x40011000
 800eb6c:	58024400 	.word	0x58024400
 800eb70:	40004400 	.word	0x40004400
 800eb74:	40004800 	.word	0x40004800
 800eb78:	40004c00 	.word	0x40004c00
 800eb7c:	40005000 	.word	0x40005000
 800eb80:	2320      	movs	r3, #32
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb86:	e22c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb88:	2340      	movs	r3, #64	@ 0x40
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8e:	e228      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb90:	2380      	movs	r3, #128	@ 0x80
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb96:	e224      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4ab1      	ldr	r2, [pc, #708]	@ (800ee64 <UART_SetConfig+0x630>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d176      	bne.n	800ec90 <UART_SetConfig+0x45c>
 800eba2:	4bb1      	ldr	r3, [pc, #708]	@ (800ee68 <UART_SetConfig+0x634>)
 800eba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ebaa:	2b28      	cmp	r3, #40	@ 0x28
 800ebac:	d86c      	bhi.n	800ec88 <UART_SetConfig+0x454>
 800ebae:	a201      	add	r2, pc, #4	@ (adr r2, 800ebb4 <UART_SetConfig+0x380>)
 800ebb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb4:	0800ec59 	.word	0x0800ec59
 800ebb8:	0800ec89 	.word	0x0800ec89
 800ebbc:	0800ec89 	.word	0x0800ec89
 800ebc0:	0800ec89 	.word	0x0800ec89
 800ebc4:	0800ec89 	.word	0x0800ec89
 800ebc8:	0800ec89 	.word	0x0800ec89
 800ebcc:	0800ec89 	.word	0x0800ec89
 800ebd0:	0800ec89 	.word	0x0800ec89
 800ebd4:	0800ec61 	.word	0x0800ec61
 800ebd8:	0800ec89 	.word	0x0800ec89
 800ebdc:	0800ec89 	.word	0x0800ec89
 800ebe0:	0800ec89 	.word	0x0800ec89
 800ebe4:	0800ec89 	.word	0x0800ec89
 800ebe8:	0800ec89 	.word	0x0800ec89
 800ebec:	0800ec89 	.word	0x0800ec89
 800ebf0:	0800ec89 	.word	0x0800ec89
 800ebf4:	0800ec69 	.word	0x0800ec69
 800ebf8:	0800ec89 	.word	0x0800ec89
 800ebfc:	0800ec89 	.word	0x0800ec89
 800ec00:	0800ec89 	.word	0x0800ec89
 800ec04:	0800ec89 	.word	0x0800ec89
 800ec08:	0800ec89 	.word	0x0800ec89
 800ec0c:	0800ec89 	.word	0x0800ec89
 800ec10:	0800ec89 	.word	0x0800ec89
 800ec14:	0800ec71 	.word	0x0800ec71
 800ec18:	0800ec89 	.word	0x0800ec89
 800ec1c:	0800ec89 	.word	0x0800ec89
 800ec20:	0800ec89 	.word	0x0800ec89
 800ec24:	0800ec89 	.word	0x0800ec89
 800ec28:	0800ec89 	.word	0x0800ec89
 800ec2c:	0800ec89 	.word	0x0800ec89
 800ec30:	0800ec89 	.word	0x0800ec89
 800ec34:	0800ec79 	.word	0x0800ec79
 800ec38:	0800ec89 	.word	0x0800ec89
 800ec3c:	0800ec89 	.word	0x0800ec89
 800ec40:	0800ec89 	.word	0x0800ec89
 800ec44:	0800ec89 	.word	0x0800ec89
 800ec48:	0800ec89 	.word	0x0800ec89
 800ec4c:	0800ec89 	.word	0x0800ec89
 800ec50:	0800ec89 	.word	0x0800ec89
 800ec54:	0800ec81 	.word	0x0800ec81
 800ec58:	2301      	movs	r3, #1
 800ec5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5e:	e1c0      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec60:	2304      	movs	r3, #4
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec66:	e1bc      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec68:	2308      	movs	r3, #8
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6e:	e1b8      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec70:	2310      	movs	r3, #16
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec76:	e1b4      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec78:	2320      	movs	r3, #32
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e1b0      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec80:	2340      	movs	r3, #64	@ 0x40
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec86:	e1ac      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec88:	2380      	movs	r3, #128	@ 0x80
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	e1a8      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a75      	ldr	r2, [pc, #468]	@ (800ee6c <UART_SetConfig+0x638>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d130      	bne.n	800ecfc <UART_SetConfig+0x4c8>
 800ec9a:	4b73      	ldr	r3, [pc, #460]	@ (800ee68 <UART_SetConfig+0x634>)
 800ec9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec9e:	f003 0307 	and.w	r3, r3, #7
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	d826      	bhi.n	800ecf4 <UART_SetConfig+0x4c0>
 800eca6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecac <UART_SetConfig+0x478>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ecc5 	.word	0x0800ecc5
 800ecb0:	0800eccd 	.word	0x0800eccd
 800ecb4:	0800ecd5 	.word	0x0800ecd5
 800ecb8:	0800ecdd 	.word	0x0800ecdd
 800ecbc:	0800ece5 	.word	0x0800ece5
 800ecc0:	0800eced 	.word	0x0800eced
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecca:	e18a      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800eccc:	2304      	movs	r3, #4
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd2:	e186      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecda:	e182      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ecdc:	2310      	movs	r3, #16
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece2:	e17e      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ece4:	2320      	movs	r3, #32
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecea:	e17a      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ecec:	2340      	movs	r3, #64	@ 0x40
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf2:	e176      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ecf4:	2380      	movs	r3, #128	@ 0x80
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfa:	e172      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a5b      	ldr	r2, [pc, #364]	@ (800ee70 <UART_SetConfig+0x63c>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d130      	bne.n	800ed68 <UART_SetConfig+0x534>
 800ed06:	4b58      	ldr	r3, [pc, #352]	@ (800ee68 <UART_SetConfig+0x634>)
 800ed08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed0a:	f003 0307 	and.w	r3, r3, #7
 800ed0e:	2b05      	cmp	r3, #5
 800ed10:	d826      	bhi.n	800ed60 <UART_SetConfig+0x52c>
 800ed12:	a201      	add	r2, pc, #4	@ (adr r2, 800ed18 <UART_SetConfig+0x4e4>)
 800ed14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed39 	.word	0x0800ed39
 800ed20:	0800ed41 	.word	0x0800ed41
 800ed24:	0800ed49 	.word	0x0800ed49
 800ed28:	0800ed51 	.word	0x0800ed51
 800ed2c:	0800ed59 	.word	0x0800ed59
 800ed30:	2300      	movs	r3, #0
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed36:	e154      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed38:	2304      	movs	r3, #4
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3e:	e150      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed40:	2308      	movs	r3, #8
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed46:	e14c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed48:	2310      	movs	r3, #16
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4e:	e148      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed50:	2320      	movs	r3, #32
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed56:	e144      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed58:	2340      	movs	r3, #64	@ 0x40
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5e:	e140      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed60:	2380      	movs	r3, #128	@ 0x80
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed66:	e13c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a41      	ldr	r2, [pc, #260]	@ (800ee74 <UART_SetConfig+0x640>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	f040 8082 	bne.w	800ee78 <UART_SetConfig+0x644>
 800ed74:	4b3c      	ldr	r3, [pc, #240]	@ (800ee68 <UART_SetConfig+0x634>)
 800ed76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed7c:	2b28      	cmp	r3, #40	@ 0x28
 800ed7e:	d86d      	bhi.n	800ee5c <UART_SetConfig+0x628>
 800ed80:	a201      	add	r2, pc, #4	@ (adr r2, 800ed88 <UART_SetConfig+0x554>)
 800ed82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed86:	bf00      	nop
 800ed88:	0800ee2d 	.word	0x0800ee2d
 800ed8c:	0800ee5d 	.word	0x0800ee5d
 800ed90:	0800ee5d 	.word	0x0800ee5d
 800ed94:	0800ee5d 	.word	0x0800ee5d
 800ed98:	0800ee5d 	.word	0x0800ee5d
 800ed9c:	0800ee5d 	.word	0x0800ee5d
 800eda0:	0800ee5d 	.word	0x0800ee5d
 800eda4:	0800ee5d 	.word	0x0800ee5d
 800eda8:	0800ee35 	.word	0x0800ee35
 800edac:	0800ee5d 	.word	0x0800ee5d
 800edb0:	0800ee5d 	.word	0x0800ee5d
 800edb4:	0800ee5d 	.word	0x0800ee5d
 800edb8:	0800ee5d 	.word	0x0800ee5d
 800edbc:	0800ee5d 	.word	0x0800ee5d
 800edc0:	0800ee5d 	.word	0x0800ee5d
 800edc4:	0800ee5d 	.word	0x0800ee5d
 800edc8:	0800ee3d 	.word	0x0800ee3d
 800edcc:	0800ee5d 	.word	0x0800ee5d
 800edd0:	0800ee5d 	.word	0x0800ee5d
 800edd4:	0800ee5d 	.word	0x0800ee5d
 800edd8:	0800ee5d 	.word	0x0800ee5d
 800eddc:	0800ee5d 	.word	0x0800ee5d
 800ede0:	0800ee5d 	.word	0x0800ee5d
 800ede4:	0800ee5d 	.word	0x0800ee5d
 800ede8:	0800ee45 	.word	0x0800ee45
 800edec:	0800ee5d 	.word	0x0800ee5d
 800edf0:	0800ee5d 	.word	0x0800ee5d
 800edf4:	0800ee5d 	.word	0x0800ee5d
 800edf8:	0800ee5d 	.word	0x0800ee5d
 800edfc:	0800ee5d 	.word	0x0800ee5d
 800ee00:	0800ee5d 	.word	0x0800ee5d
 800ee04:	0800ee5d 	.word	0x0800ee5d
 800ee08:	0800ee4d 	.word	0x0800ee4d
 800ee0c:	0800ee5d 	.word	0x0800ee5d
 800ee10:	0800ee5d 	.word	0x0800ee5d
 800ee14:	0800ee5d 	.word	0x0800ee5d
 800ee18:	0800ee5d 	.word	0x0800ee5d
 800ee1c:	0800ee5d 	.word	0x0800ee5d
 800ee20:	0800ee5d 	.word	0x0800ee5d
 800ee24:	0800ee5d 	.word	0x0800ee5d
 800ee28:	0800ee55 	.word	0x0800ee55
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee32:	e0d6      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee34:	2304      	movs	r3, #4
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3a:	e0d2      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee3c:	2308      	movs	r3, #8
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee42:	e0ce      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee44:	2310      	movs	r3, #16
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4a:	e0ca      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee4c:	2320      	movs	r3, #32
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e0c6      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee54:	2340      	movs	r3, #64	@ 0x40
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5a:	e0c2      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee5c:	2380      	movs	r3, #128	@ 0x80
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e0be      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ee64:	40011400 	.word	0x40011400
 800ee68:	58024400 	.word	0x58024400
 800ee6c:	40007800 	.word	0x40007800
 800ee70:	40007c00 	.word	0x40007c00
 800ee74:	40011800 	.word	0x40011800
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4aad      	ldr	r2, [pc, #692]	@ (800f134 <UART_SetConfig+0x900>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d176      	bne.n	800ef70 <UART_SetConfig+0x73c>
 800ee82:	4bad      	ldr	r3, [pc, #692]	@ (800f138 <UART_SetConfig+0x904>)
 800ee84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee8a:	2b28      	cmp	r3, #40	@ 0x28
 800ee8c:	d86c      	bhi.n	800ef68 <UART_SetConfig+0x734>
 800ee8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee94 <UART_SetConfig+0x660>)
 800ee90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee94:	0800ef39 	.word	0x0800ef39
 800ee98:	0800ef69 	.word	0x0800ef69
 800ee9c:	0800ef69 	.word	0x0800ef69
 800eea0:	0800ef69 	.word	0x0800ef69
 800eea4:	0800ef69 	.word	0x0800ef69
 800eea8:	0800ef69 	.word	0x0800ef69
 800eeac:	0800ef69 	.word	0x0800ef69
 800eeb0:	0800ef69 	.word	0x0800ef69
 800eeb4:	0800ef41 	.word	0x0800ef41
 800eeb8:	0800ef69 	.word	0x0800ef69
 800eebc:	0800ef69 	.word	0x0800ef69
 800eec0:	0800ef69 	.word	0x0800ef69
 800eec4:	0800ef69 	.word	0x0800ef69
 800eec8:	0800ef69 	.word	0x0800ef69
 800eecc:	0800ef69 	.word	0x0800ef69
 800eed0:	0800ef69 	.word	0x0800ef69
 800eed4:	0800ef49 	.word	0x0800ef49
 800eed8:	0800ef69 	.word	0x0800ef69
 800eedc:	0800ef69 	.word	0x0800ef69
 800eee0:	0800ef69 	.word	0x0800ef69
 800eee4:	0800ef69 	.word	0x0800ef69
 800eee8:	0800ef69 	.word	0x0800ef69
 800eeec:	0800ef69 	.word	0x0800ef69
 800eef0:	0800ef69 	.word	0x0800ef69
 800eef4:	0800ef51 	.word	0x0800ef51
 800eef8:	0800ef69 	.word	0x0800ef69
 800eefc:	0800ef69 	.word	0x0800ef69
 800ef00:	0800ef69 	.word	0x0800ef69
 800ef04:	0800ef69 	.word	0x0800ef69
 800ef08:	0800ef69 	.word	0x0800ef69
 800ef0c:	0800ef69 	.word	0x0800ef69
 800ef10:	0800ef69 	.word	0x0800ef69
 800ef14:	0800ef59 	.word	0x0800ef59
 800ef18:	0800ef69 	.word	0x0800ef69
 800ef1c:	0800ef69 	.word	0x0800ef69
 800ef20:	0800ef69 	.word	0x0800ef69
 800ef24:	0800ef69 	.word	0x0800ef69
 800ef28:	0800ef69 	.word	0x0800ef69
 800ef2c:	0800ef69 	.word	0x0800ef69
 800ef30:	0800ef69 	.word	0x0800ef69
 800ef34:	0800ef61 	.word	0x0800ef61
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3e:	e050      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef40:	2304      	movs	r3, #4
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef46:	e04c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef48:	2308      	movs	r3, #8
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4e:	e048      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef50:	2310      	movs	r3, #16
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef56:	e044      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef58:	2320      	movs	r3, #32
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5e:	e040      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef60:	2340      	movs	r3, #64	@ 0x40
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e03c      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef68:	2380      	movs	r3, #128	@ 0x80
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e038      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a71      	ldr	r2, [pc, #452]	@ (800f13c <UART_SetConfig+0x908>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d130      	bne.n	800efdc <UART_SetConfig+0x7a8>
 800ef7a:	4b6f      	ldr	r3, [pc, #444]	@ (800f138 <UART_SetConfig+0x904>)
 800ef7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef7e:	f003 0307 	and.w	r3, r3, #7
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d826      	bhi.n	800efd4 <UART_SetConfig+0x7a0>
 800ef86:	a201      	add	r2, pc, #4	@ (adr r2, 800ef8c <UART_SetConfig+0x758>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800efa5 	.word	0x0800efa5
 800ef90:	0800efad 	.word	0x0800efad
 800ef94:	0800efb5 	.word	0x0800efb5
 800ef98:	0800efbd 	.word	0x0800efbd
 800ef9c:	0800efc5 	.word	0x0800efc5
 800efa0:	0800efcd 	.word	0x0800efcd
 800efa4:	2302      	movs	r3, #2
 800efa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efaa:	e01a      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efac:	2304      	movs	r3, #4
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb2:	e016      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efb4:	2308      	movs	r3, #8
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efba:	e012      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efbc:	2310      	movs	r3, #16
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc2:	e00e      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efc4:	2320      	movs	r3, #32
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efca:	e00a      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efcc:	2340      	movs	r3, #64	@ 0x40
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e006      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efd4:	2380      	movs	r3, #128	@ 0x80
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e002      	b.n	800efe2 <UART_SetConfig+0x7ae>
 800efdc:	2380      	movs	r3, #128	@ 0x80
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a55      	ldr	r2, [pc, #340]	@ (800f13c <UART_SetConfig+0x908>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	f040 80f8 	bne.w	800f1de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800efee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eff2:	2b20      	cmp	r3, #32
 800eff4:	dc46      	bgt.n	800f084 <UART_SetConfig+0x850>
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	db75      	blt.n	800f0e6 <UART_SetConfig+0x8b2>
 800effa:	3b02      	subs	r3, #2
 800effc:	2b1e      	cmp	r3, #30
 800effe:	d872      	bhi.n	800f0e6 <UART_SetConfig+0x8b2>
 800f000:	a201      	add	r2, pc, #4	@ (adr r2, 800f008 <UART_SetConfig+0x7d4>)
 800f002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f006:	bf00      	nop
 800f008:	0800f08b 	.word	0x0800f08b
 800f00c:	0800f0e7 	.word	0x0800f0e7
 800f010:	0800f093 	.word	0x0800f093
 800f014:	0800f0e7 	.word	0x0800f0e7
 800f018:	0800f0e7 	.word	0x0800f0e7
 800f01c:	0800f0e7 	.word	0x0800f0e7
 800f020:	0800f0a3 	.word	0x0800f0a3
 800f024:	0800f0e7 	.word	0x0800f0e7
 800f028:	0800f0e7 	.word	0x0800f0e7
 800f02c:	0800f0e7 	.word	0x0800f0e7
 800f030:	0800f0e7 	.word	0x0800f0e7
 800f034:	0800f0e7 	.word	0x0800f0e7
 800f038:	0800f0e7 	.word	0x0800f0e7
 800f03c:	0800f0e7 	.word	0x0800f0e7
 800f040:	0800f0b3 	.word	0x0800f0b3
 800f044:	0800f0e7 	.word	0x0800f0e7
 800f048:	0800f0e7 	.word	0x0800f0e7
 800f04c:	0800f0e7 	.word	0x0800f0e7
 800f050:	0800f0e7 	.word	0x0800f0e7
 800f054:	0800f0e7 	.word	0x0800f0e7
 800f058:	0800f0e7 	.word	0x0800f0e7
 800f05c:	0800f0e7 	.word	0x0800f0e7
 800f060:	0800f0e7 	.word	0x0800f0e7
 800f064:	0800f0e7 	.word	0x0800f0e7
 800f068:	0800f0e7 	.word	0x0800f0e7
 800f06c:	0800f0e7 	.word	0x0800f0e7
 800f070:	0800f0e7 	.word	0x0800f0e7
 800f074:	0800f0e7 	.word	0x0800f0e7
 800f078:	0800f0e7 	.word	0x0800f0e7
 800f07c:	0800f0e7 	.word	0x0800f0e7
 800f080:	0800f0d9 	.word	0x0800f0d9
 800f084:	2b40      	cmp	r3, #64	@ 0x40
 800f086:	d02a      	beq.n	800f0de <UART_SetConfig+0x8aa>
 800f088:	e02d      	b.n	800f0e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f08a:	f7fb fd11 	bl	800aab0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f08e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f090:	e02f      	b.n	800f0f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f096:	4618      	mov	r0, r3
 800f098:	f7fb fd20 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a0:	e027      	b.n	800f0f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0a2:	f107 0318 	add.w	r3, r7, #24
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fb fe6c 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0b0:	e01f      	b.n	800f0f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0b2:	4b21      	ldr	r3, [pc, #132]	@ (800f138 <UART_SetConfig+0x904>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 0320 	and.w	r3, r3, #32
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d009      	beq.n	800f0d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0be:	4b1e      	ldr	r3, [pc, #120]	@ (800f138 <UART_SetConfig+0x904>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	08db      	lsrs	r3, r3, #3
 800f0c4:	f003 0303 	and.w	r3, r3, #3
 800f0c8:	4a1d      	ldr	r2, [pc, #116]	@ (800f140 <UART_SetConfig+0x90c>)
 800f0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0d0:	e00f      	b.n	800f0f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f140 <UART_SetConfig+0x90c>)
 800f0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d6:	e00c      	b.n	800f0f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f144 <UART_SetConfig+0x910>)
 800f0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0dc:	e009      	b.n	800f0f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0e4:	e005      	b.n	800f0f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f000 81ee 	beq.w	800f4d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fe:	4a12      	ldr	r2, [pc, #72]	@ (800f148 <UART_SetConfig+0x914>)
 800f100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f104:	461a      	mov	r2, r3
 800f106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f108:	fbb3 f3f2 	udiv	r3, r3, r2
 800f10c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	4613      	mov	r3, r2
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	4413      	add	r3, r2
 800f118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d305      	bcc.n	800f12a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f126:	429a      	cmp	r2, r3
 800f128:	d910      	bls.n	800f14c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f130:	e1d1      	b.n	800f4d6 <UART_SetConfig+0xca2>
 800f132:	bf00      	nop
 800f134:	40011c00 	.word	0x40011c00
 800f138:	58024400 	.word	0x58024400
 800f13c:	58000c00 	.word	0x58000c00
 800f140:	03d09000 	.word	0x03d09000
 800f144:	003d0900 	.word	0x003d0900
 800f148:	0801f708 	.word	0x0801f708
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f14e:	2200      	movs	r2, #0
 800f150:	60bb      	str	r3, [r7, #8]
 800f152:	60fa      	str	r2, [r7, #12]
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f158:	4ac0      	ldr	r2, [pc, #768]	@ (800f45c <UART_SetConfig+0xc28>)
 800f15a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f15e:	b29b      	uxth	r3, r3
 800f160:	2200      	movs	r2, #0
 800f162:	603b      	str	r3, [r7, #0]
 800f164:	607a      	str	r2, [r7, #4]
 800f166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f16a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f16e:	f7f1 f927 	bl	80003c0 <__aeabi_uldivmod>
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	4610      	mov	r0, r2
 800f178:	4619      	mov	r1, r3
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	f04f 0300 	mov.w	r3, #0
 800f182:	020b      	lsls	r3, r1, #8
 800f184:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f188:	0202      	lsls	r2, r0, #8
 800f18a:	6979      	ldr	r1, [r7, #20]
 800f18c:	6849      	ldr	r1, [r1, #4]
 800f18e:	0849      	lsrs	r1, r1, #1
 800f190:	2000      	movs	r0, #0
 800f192:	460c      	mov	r4, r1
 800f194:	4605      	mov	r5, r0
 800f196:	eb12 0804 	adds.w	r8, r2, r4
 800f19a:	eb43 0905 	adc.w	r9, r3, r5
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	469a      	mov	sl, r3
 800f1a6:	4693      	mov	fp, r2
 800f1a8:	4652      	mov	r2, sl
 800f1aa:	465b      	mov	r3, fp
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	4649      	mov	r1, r9
 800f1b0:	f7f1 f906 	bl	80003c0 <__aeabi_uldivmod>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1c2:	d308      	bcc.n	800f1d6 <UART_SetConfig+0x9a2>
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1ca:	d204      	bcs.n	800f1d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1d2:	60da      	str	r2, [r3, #12]
 800f1d4:	e17f      	b.n	800f4d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1dc:	e17b      	b.n	800f4d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	69db      	ldr	r3, [r3, #28]
 800f1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1e6:	f040 80bd 	bne.w	800f364 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f1ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f1ee:	2b20      	cmp	r3, #32
 800f1f0:	dc48      	bgt.n	800f284 <UART_SetConfig+0xa50>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	db7b      	blt.n	800f2ee <UART_SetConfig+0xaba>
 800f1f6:	2b20      	cmp	r3, #32
 800f1f8:	d879      	bhi.n	800f2ee <UART_SetConfig+0xaba>
 800f1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f200 <UART_SetConfig+0x9cc>)
 800f1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f200:	0800f28b 	.word	0x0800f28b
 800f204:	0800f293 	.word	0x0800f293
 800f208:	0800f2ef 	.word	0x0800f2ef
 800f20c:	0800f2ef 	.word	0x0800f2ef
 800f210:	0800f29b 	.word	0x0800f29b
 800f214:	0800f2ef 	.word	0x0800f2ef
 800f218:	0800f2ef 	.word	0x0800f2ef
 800f21c:	0800f2ef 	.word	0x0800f2ef
 800f220:	0800f2ab 	.word	0x0800f2ab
 800f224:	0800f2ef 	.word	0x0800f2ef
 800f228:	0800f2ef 	.word	0x0800f2ef
 800f22c:	0800f2ef 	.word	0x0800f2ef
 800f230:	0800f2ef 	.word	0x0800f2ef
 800f234:	0800f2ef 	.word	0x0800f2ef
 800f238:	0800f2ef 	.word	0x0800f2ef
 800f23c:	0800f2ef 	.word	0x0800f2ef
 800f240:	0800f2bb 	.word	0x0800f2bb
 800f244:	0800f2ef 	.word	0x0800f2ef
 800f248:	0800f2ef 	.word	0x0800f2ef
 800f24c:	0800f2ef 	.word	0x0800f2ef
 800f250:	0800f2ef 	.word	0x0800f2ef
 800f254:	0800f2ef 	.word	0x0800f2ef
 800f258:	0800f2ef 	.word	0x0800f2ef
 800f25c:	0800f2ef 	.word	0x0800f2ef
 800f260:	0800f2ef 	.word	0x0800f2ef
 800f264:	0800f2ef 	.word	0x0800f2ef
 800f268:	0800f2ef 	.word	0x0800f2ef
 800f26c:	0800f2ef 	.word	0x0800f2ef
 800f270:	0800f2ef 	.word	0x0800f2ef
 800f274:	0800f2ef 	.word	0x0800f2ef
 800f278:	0800f2ef 	.word	0x0800f2ef
 800f27c:	0800f2ef 	.word	0x0800f2ef
 800f280:	0800f2e1 	.word	0x0800f2e1
 800f284:	2b40      	cmp	r3, #64	@ 0x40
 800f286:	d02e      	beq.n	800f2e6 <UART_SetConfig+0xab2>
 800f288:	e031      	b.n	800f2ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f28a:	f7f9 fd73 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800f28e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f290:	e033      	b.n	800f2fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f292:	f7f9 fd85 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 800f296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f298:	e02f      	b.n	800f2fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f29a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fb fc1c 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2a8:	e027      	b.n	800f2fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2aa:	f107 0318 	add.w	r3, r7, #24
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fb fd68 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2b8:	e01f      	b.n	800f2fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2ba:	4b69      	ldr	r3, [pc, #420]	@ (800f460 <UART_SetConfig+0xc2c>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f003 0320 	and.w	r3, r3, #32
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d009      	beq.n	800f2da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2c6:	4b66      	ldr	r3, [pc, #408]	@ (800f460 <UART_SetConfig+0xc2c>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	08db      	lsrs	r3, r3, #3
 800f2cc:	f003 0303 	and.w	r3, r3, #3
 800f2d0:	4a64      	ldr	r2, [pc, #400]	@ (800f464 <UART_SetConfig+0xc30>)
 800f2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2d8:	e00f      	b.n	800f2fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f2da:	4b62      	ldr	r3, [pc, #392]	@ (800f464 <UART_SetConfig+0xc30>)
 800f2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2de:	e00c      	b.n	800f2fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2e0:	4b61      	ldr	r3, [pc, #388]	@ (800f468 <UART_SetConfig+0xc34>)
 800f2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2e4:	e009      	b.n	800f2fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ec:	e005      	b.n	800f2fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f2f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f000 80ea 	beq.w	800f4d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f306:	4a55      	ldr	r2, [pc, #340]	@ (800f45c <UART_SetConfig+0xc28>)
 800f308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f30c:	461a      	mov	r2, r3
 800f30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f310:	fbb3 f3f2 	udiv	r3, r3, r2
 800f314:	005a      	lsls	r2, r3, #1
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	085b      	lsrs	r3, r3, #1
 800f31c:	441a      	add	r2, r3
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	fbb2 f3f3 	udiv	r3, r2, r3
 800f326:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32a:	2b0f      	cmp	r3, #15
 800f32c:	d916      	bls.n	800f35c <UART_SetConfig+0xb28>
 800f32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f334:	d212      	bcs.n	800f35c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f338:	b29b      	uxth	r3, r3
 800f33a:	f023 030f 	bic.w	r3, r3, #15
 800f33e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f342:	085b      	lsrs	r3, r3, #1
 800f344:	b29b      	uxth	r3, r3
 800f346:	f003 0307 	and.w	r3, r3, #7
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f34e:	4313      	orrs	r3, r2
 800f350:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f358:	60da      	str	r2, [r3, #12]
 800f35a:	e0bc      	b.n	800f4d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f35c:	2301      	movs	r3, #1
 800f35e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f362:	e0b8      	b.n	800f4d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f364:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f368:	2b20      	cmp	r3, #32
 800f36a:	dc4b      	bgt.n	800f404 <UART_SetConfig+0xbd0>
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f2c0 8087 	blt.w	800f480 <UART_SetConfig+0xc4c>
 800f372:	2b20      	cmp	r3, #32
 800f374:	f200 8084 	bhi.w	800f480 <UART_SetConfig+0xc4c>
 800f378:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <UART_SetConfig+0xb4c>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f40b 	.word	0x0800f40b
 800f384:	0800f413 	.word	0x0800f413
 800f388:	0800f481 	.word	0x0800f481
 800f38c:	0800f481 	.word	0x0800f481
 800f390:	0800f41b 	.word	0x0800f41b
 800f394:	0800f481 	.word	0x0800f481
 800f398:	0800f481 	.word	0x0800f481
 800f39c:	0800f481 	.word	0x0800f481
 800f3a0:	0800f42b 	.word	0x0800f42b
 800f3a4:	0800f481 	.word	0x0800f481
 800f3a8:	0800f481 	.word	0x0800f481
 800f3ac:	0800f481 	.word	0x0800f481
 800f3b0:	0800f481 	.word	0x0800f481
 800f3b4:	0800f481 	.word	0x0800f481
 800f3b8:	0800f481 	.word	0x0800f481
 800f3bc:	0800f481 	.word	0x0800f481
 800f3c0:	0800f43b 	.word	0x0800f43b
 800f3c4:	0800f481 	.word	0x0800f481
 800f3c8:	0800f481 	.word	0x0800f481
 800f3cc:	0800f481 	.word	0x0800f481
 800f3d0:	0800f481 	.word	0x0800f481
 800f3d4:	0800f481 	.word	0x0800f481
 800f3d8:	0800f481 	.word	0x0800f481
 800f3dc:	0800f481 	.word	0x0800f481
 800f3e0:	0800f481 	.word	0x0800f481
 800f3e4:	0800f481 	.word	0x0800f481
 800f3e8:	0800f481 	.word	0x0800f481
 800f3ec:	0800f481 	.word	0x0800f481
 800f3f0:	0800f481 	.word	0x0800f481
 800f3f4:	0800f481 	.word	0x0800f481
 800f3f8:	0800f481 	.word	0x0800f481
 800f3fc:	0800f481 	.word	0x0800f481
 800f400:	0800f473 	.word	0x0800f473
 800f404:	2b40      	cmp	r3, #64	@ 0x40
 800f406:	d037      	beq.n	800f478 <UART_SetConfig+0xc44>
 800f408:	e03a      	b.n	800f480 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f40a:	f7f9 fcb3 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800f40e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f410:	e03c      	b.n	800f48c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f412:	f7f9 fcc5 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 800f416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f418:	e038      	b.n	800f48c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f41a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fb fb5c 	bl	800aadc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f428:	e030      	b.n	800f48c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f42a:	f107 0318 	add.w	r3, r7, #24
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fb fca8 	bl	800ad84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f438:	e028      	b.n	800f48c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f43a:	4b09      	ldr	r3, [pc, #36]	@ (800f460 <UART_SetConfig+0xc2c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 0320 	and.w	r3, r3, #32
 800f442:	2b00      	cmp	r3, #0
 800f444:	d012      	beq.n	800f46c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f446:	4b06      	ldr	r3, [pc, #24]	@ (800f460 <UART_SetConfig+0xc2c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	08db      	lsrs	r3, r3, #3
 800f44c:	f003 0303 	and.w	r3, r3, #3
 800f450:	4a04      	ldr	r2, [pc, #16]	@ (800f464 <UART_SetConfig+0xc30>)
 800f452:	fa22 f303 	lsr.w	r3, r2, r3
 800f456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f458:	e018      	b.n	800f48c <UART_SetConfig+0xc58>
 800f45a:	bf00      	nop
 800f45c:	0801f708 	.word	0x0801f708
 800f460:	58024400 	.word	0x58024400
 800f464:	03d09000 	.word	0x03d09000
 800f468:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f46c:	4b24      	ldr	r3, [pc, #144]	@ (800f500 <UART_SetConfig+0xccc>)
 800f46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f470:	e00c      	b.n	800f48c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f472:	4b24      	ldr	r3, [pc, #144]	@ (800f504 <UART_SetConfig+0xcd0>)
 800f474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f476:	e009      	b.n	800f48c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f47e:	e005      	b.n	800f48c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f480:	2300      	movs	r3, #0
 800f482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f484:	2301      	movs	r3, #1
 800f486:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f48a:	bf00      	nop
    }

    if (pclk != 0U)
 800f48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d021      	beq.n	800f4d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f496:	4a1c      	ldr	r2, [pc, #112]	@ (800f508 <UART_SetConfig+0xcd4>)
 800f498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f49c:	461a      	mov	r2, r3
 800f49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	085b      	lsrs	r3, r3, #1
 800f4aa:	441a      	add	r2, r3
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b8:	2b0f      	cmp	r3, #15
 800f4ba:	d909      	bls.n	800f4d0 <UART_SetConfig+0xc9c>
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4c2:	d205      	bcs.n	800f4d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	60da      	str	r2, [r3, #12]
 800f4ce:	e002      	b.n	800f4d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2201      	movs	r2, #1
 800f4da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f4f2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3748      	adds	r7, #72	@ 0x48
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f500:	03d09000 	.word	0x03d09000
 800f504:	003d0900 	.word	0x003d0900
 800f508:	0801f708 	.word	0x0801f708

0800f50c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f518:	f003 0308 	and.w	r3, r3, #8
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00a      	beq.n	800f536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	430a      	orrs	r2, r1
 800f534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f53a:	f003 0301 	and.w	r3, r3, #1
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00a      	beq.n	800f558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	430a      	orrs	r2, r1
 800f556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f55c:	f003 0302 	and.w	r3, r3, #2
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00a      	beq.n	800f57a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	430a      	orrs	r2, r1
 800f578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f57e:	f003 0304 	and.w	r3, r3, #4
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	430a      	orrs	r2, r1
 800f59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5a0:	f003 0310 	and.w	r3, r3, #16
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00a      	beq.n	800f5be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	430a      	orrs	r2, r1
 800f5bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c2:	f003 0320 	and.w	r3, r3, #32
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00a      	beq.n	800f5e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	430a      	orrs	r2, r1
 800f5de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d01a      	beq.n	800f622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	430a      	orrs	r2, r1
 800f600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f60a:	d10a      	bne.n	800f622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	430a      	orrs	r2, r1
 800f620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00a      	beq.n	800f644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	430a      	orrs	r2, r1
 800f642:	605a      	str	r2, [r3, #4]
  }
}
 800f644:	bf00      	nop
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b098      	sub	sp, #96	@ 0x60
 800f654:	af02      	add	r7, sp, #8
 800f656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f660:	f7f4 fb5e 	bl	8003d20 <HAL_GetTick>
 800f664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f003 0308 	and.w	r3, r3, #8
 800f670:	2b08      	cmp	r3, #8
 800f672:	d12f      	bne.n	800f6d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f67c:	2200      	movs	r2, #0
 800f67e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f88e 	bl	800f7a4 <UART_WaitOnFlagUntilTimeout>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d022      	beq.n	800f6d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f696:	e853 3f00 	ldrex	r3, [r3]
 800f69a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f69e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6b4:	e841 2300 	strex	r3, r2, [r1]
 800f6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1e6      	bne.n	800f68e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2220      	movs	r2, #32
 800f6c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6d0:	2303      	movs	r3, #3
 800f6d2:	e063      	b.n	800f79c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f003 0304 	and.w	r3, r3, #4
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d149      	bne.n	800f776 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 f857 	bl	800f7a4 <UART_WaitOnFlagUntilTimeout>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d03c      	beq.n	800f776 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f704:	e853 3f00 	ldrex	r3, [r3]
 800f708:	623b      	str	r3, [r7, #32]
   return(result);
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	461a      	mov	r2, r3
 800f718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f71a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f71c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f722:	e841 2300 	strex	r3, r2, [r1]
 800f726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1e6      	bne.n	800f6fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3308      	adds	r3, #8
 800f734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	e853 3f00 	ldrex	r3, [r3]
 800f73c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f023 0301 	bic.w	r3, r3, #1
 800f744:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	3308      	adds	r3, #8
 800f74c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f74e:	61fa      	str	r2, [r7, #28]
 800f750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f752:	69b9      	ldr	r1, [r7, #24]
 800f754:	69fa      	ldr	r2, [r7, #28]
 800f756:	e841 2300 	strex	r3, r2, [r1]
 800f75a:	617b      	str	r3, [r7, #20]
   return(result);
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1e5      	bne.n	800f72e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2220      	movs	r2, #32
 800f766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f772:	2303      	movs	r3, #3
 800f774:	e012      	b.n	800f79c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2220      	movs	r2, #32
 800f77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2220      	movs	r2, #32
 800f782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3758      	adds	r7, #88	@ 0x58
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	603b      	str	r3, [r7, #0]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7b4:	e04f      	b.n	800f856 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7bc:	d04b      	beq.n	800f856 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7be:	f7f4 faaf 	bl	8003d20 <HAL_GetTick>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	69ba      	ldr	r2, [r7, #24]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d302      	bcc.n	800f7d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d101      	bne.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7d4:	2303      	movs	r3, #3
 800f7d6:	e04e      	b.n	800f876 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f003 0304 	and.w	r3, r3, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d037      	beq.n	800f856 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	2b80      	cmp	r3, #128	@ 0x80
 800f7ea:	d034      	beq.n	800f856 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2b40      	cmp	r3, #64	@ 0x40
 800f7f0:	d031      	beq.n	800f856 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	69db      	ldr	r3, [r3, #28]
 800f7f8:	f003 0308 	and.w	r3, r3, #8
 800f7fc:	2b08      	cmp	r3, #8
 800f7fe:	d110      	bne.n	800f822 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2208      	movs	r2, #8
 800f806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 f839 	bl	800f880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2208      	movs	r2, #8
 800f812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	e029      	b.n	800f876 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	69db      	ldr	r3, [r3, #28]
 800f828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f82c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f830:	d111      	bne.n	800f856 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f83a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f000 f81f 	bl	800f880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2220      	movs	r2, #32
 800f846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2200      	movs	r2, #0
 800f84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f852:	2303      	movs	r3, #3
 800f854:	e00f      	b.n	800f876 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	69da      	ldr	r2, [r3, #28]
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	4013      	ands	r3, r2
 800f860:	68ba      	ldr	r2, [r7, #8]
 800f862:	429a      	cmp	r2, r3
 800f864:	bf0c      	ite	eq
 800f866:	2301      	moveq	r3, #1
 800f868:	2300      	movne	r3, #0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	461a      	mov	r2, r3
 800f86e:	79fb      	ldrb	r3, [r7, #7]
 800f870:	429a      	cmp	r2, r3
 800f872:	d0a0      	beq.n	800f7b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f880:	b480      	push	{r7}
 800f882:	b095      	sub	sp, #84	@ 0x54
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f890:	e853 3f00 	ldrex	r3, [r3]
 800f894:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f89c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f8ae:	e841 2300 	strex	r3, r2, [r1]
 800f8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1e6      	bne.n	800f888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3308      	adds	r3, #8
 800f8c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	e853 3f00 	ldrex	r3, [r3]
 800f8c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8ca:	69fa      	ldr	r2, [r7, #28]
 800f8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800f948 <UART_EndRxTransfer+0xc8>)
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3308      	adds	r3, #8
 800f8d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e5      	bne.n	800f8ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d118      	bne.n	800f928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	e853 3f00 	ldrex	r3, [r3]
 800f902:	60bb      	str	r3, [r7, #8]
   return(result);
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	f023 0310 	bic.w	r3, r3, #16
 800f90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	461a      	mov	r2, r3
 800f912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f914:	61bb      	str	r3, [r7, #24]
 800f916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f918:	6979      	ldr	r1, [r7, #20]
 800f91a:	69ba      	ldr	r2, [r7, #24]
 800f91c:	e841 2300 	strex	r3, r2, [r1]
 800f920:	613b      	str	r3, [r7, #16]
   return(result);
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1e6      	bne.n	800f8f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2220      	movs	r2, #32
 800f92c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f93c:	bf00      	nop
 800f93e:	3754      	adds	r7, #84	@ 0x54
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr
 800f948:	effffffe 	.word	0xeffffffe

0800f94c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d101      	bne.n	800f962 <HAL_UARTEx_DisableFifoMode+0x16>
 800f95e:	2302      	movs	r3, #2
 800f960:	e027      	b.n	800f9b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2224      	movs	r2, #36	@ 0x24
 800f96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f022 0201 	bic.w	r2, r2, #1
 800f988:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2220      	movs	r2, #32
 800f9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d101      	bne.n	800f9d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	e02d      	b.n	800fa32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2224      	movs	r2, #36	@ 0x24
 800f9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f022 0201 	bic.w	r2, r2, #1
 800f9fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f850 	bl	800fab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2220      	movs	r2, #32
 800fa24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d101      	bne.n	800fa52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa4e:	2302      	movs	r3, #2
 800fa50:	e02d      	b.n	800faae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2201      	movs	r2, #1
 800fa56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2224      	movs	r2, #36	@ 0x24
 800fa5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f022 0201 	bic.w	r2, r2, #1
 800fa78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	430a      	orrs	r2, r1
 800fa8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f812 	bl	800fab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2220      	movs	r2, #32
 800faa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d108      	bne.n	800fada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2201      	movs	r2, #1
 800facc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2201      	movs	r2, #1
 800fad4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fad8:	e031      	b.n	800fb3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fada:	2310      	movs	r3, #16
 800fadc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fade:	2310      	movs	r3, #16
 800fae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	0e5b      	lsrs	r3, r3, #25
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0307 	and.w	r3, r3, #7
 800faf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	0f5b      	lsrs	r3, r3, #29
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	f003 0307 	and.w	r3, r3, #7
 800fb00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb02:	7bbb      	ldrb	r3, [r7, #14]
 800fb04:	7b3a      	ldrb	r2, [r7, #12]
 800fb06:	4911      	ldr	r1, [pc, #68]	@ (800fb4c <UARTEx_SetNbDataToProcess+0x94>)
 800fb08:	5c8a      	ldrb	r2, [r1, r2]
 800fb0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb0e:	7b3a      	ldrb	r2, [r7, #12]
 800fb10:	490f      	ldr	r1, [pc, #60]	@ (800fb50 <UARTEx_SetNbDataToProcess+0x98>)
 800fb12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb14:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	7b7a      	ldrb	r2, [r7, #13]
 800fb24:	4909      	ldr	r1, [pc, #36]	@ (800fb4c <UARTEx_SetNbDataToProcess+0x94>)
 800fb26:	5c8a      	ldrb	r2, [r1, r2]
 800fb28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb2c:	7b7a      	ldrb	r2, [r7, #13]
 800fb2e:	4908      	ldr	r1, [pc, #32]	@ (800fb50 <UARTEx_SetNbDataToProcess+0x98>)
 800fb30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb32:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fb3e:	bf00      	nop
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	0801f720 	.word	0x0801f720
 800fb50:	0801f728 	.word	0x0801f728

0800fb54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fb54:	b084      	sub	sp, #16
 800fb56:	b480      	push	{r7}
 800fb58:	b085      	sub	sp, #20
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	f107 001c 	add.w	r0, r7, #28
 800fb62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fb6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fb6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fb6e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fb72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fb76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fb7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	685a      	ldr	r2, [r3, #4]
 800fb86:	4b07      	ldr	r3, [pc, #28]	@ (800fba4 <SDMMC_Init+0x50>)
 800fb88:	4013      	ands	r3, r2
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	431a      	orrs	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	b004      	add	sp, #16
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	ffc02c00 	.word	0xffc02c00

0800fba8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fbc2:	b480      	push	{r7}
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
 800fbca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	370c      	adds	r7, #12
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr

0800fbe4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f043 0203 	orr.w	r2, r3, #3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	370c      	adds	r7, #12
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800fc06:	b480      	push	{r7}
 800fc08:	b083      	sub	sp, #12
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 0303 	and.w	r3, r3, #3
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
	...

0800fc24 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc42:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fc48:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fc4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	4313      	orrs	r3, r2
 800fc54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68da      	ldr	r2, [r3, #12]
 800fc5a:	4b06      	ldr	r3, [pc, #24]	@ (800fc74 <SDMMC_SendCommand+0x50>)
 800fc5c:	4013      	ands	r3, r2
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	431a      	orrs	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3714      	adds	r7, #20
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr
 800fc74:	fffee0c0 	.word	0xfffee0c0

0800fc78 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	691b      	ldr	r3, [r3, #16]
 800fc84:	b2db      	uxtb	r3, r3
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	370c      	adds	r7, #12
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fc92:	b480      	push	{r7}
 800fc94:	b085      	sub	sp, #20
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	3314      	adds	r3, #20
 800fca0:	461a      	mov	r2, r3
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	4413      	add	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3714      	adds	r7, #20
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fcde:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fce4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fcea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	431a      	orrs	r2, r3
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fd02:	2300      	movs	r3, #0

}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr

0800fd10 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b088      	sub	sp, #32
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fd1e:	2310      	movs	r3, #16
 800fd20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd32:	f107 0308 	add.w	r3, r7, #8
 800fd36:	4619      	mov	r1, r3
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7ff ff73 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fd3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd42:	2110      	movs	r1, #16
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fa5f 	bl	8010208 <SDMMC_GetCmdResp1>
 800fd4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd4c:	69fb      	ldr	r3, [r7, #28]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3720      	adds	r7, #32
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b088      	sub	sp, #32
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
 800fd5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fd64:	2311      	movs	r3, #17
 800fd66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd78:	f107 0308 	add.w	r3, r7, #8
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7ff ff50 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fd84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd88:	2111      	movs	r1, #17
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fa3c 	bl	8010208 <SDMMC_GetCmdResp1>
 800fd90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd92:	69fb      	ldr	r3, [r7, #28]
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3720      	adds	r7, #32
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b088      	sub	sp, #32
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fdaa:	2312      	movs	r3, #18
 800fdac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdbe:	f107 0308 	add.w	r3, r7, #8
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff ff2d 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fdca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdce:	2112      	movs	r1, #18
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fa19 	bl	8010208 <SDMMC_GetCmdResp1>
 800fdd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdd8:	69fb      	ldr	r3, [r7, #28]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3720      	adds	r7, #32
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b088      	sub	sp, #32
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fdf0:	2318      	movs	r3, #24
 800fdf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe04:	f107 0308 	add.w	r3, r7, #8
 800fe08:	4619      	mov	r1, r3
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7ff ff0a 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fe10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe14:	2118      	movs	r1, #24
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f9f6 	bl	8010208 <SDMMC_GetCmdResp1>
 800fe1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe1e:	69fb      	ldr	r3, [r7, #28]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3720      	adds	r7, #32
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b088      	sub	sp, #32
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fe36:	2319      	movs	r3, #25
 800fe38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe40:	2300      	movs	r3, #0
 800fe42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe4a:	f107 0308 	add.w	r3, r7, #8
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff fee7 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fe56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe5a:	2119      	movs	r1, #25
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f9d3 	bl	8010208 <SDMMC_GetCmdResp1>
 800fe62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe64:	69fb      	ldr	r3, [r7, #28]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3720      	adds	r7, #32
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
	...

0800fe70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b088      	sub	sp, #32
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fe7c:	230c      	movs	r3, #12
 800fe7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe86:	2300      	movs	r3, #0
 800fe88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe8e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fea8:	f107 0308 	add.w	r3, r7, #8
 800feac:	4619      	mov	r1, r3
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7ff feb8 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800feb4:	4a0b      	ldr	r2, [pc, #44]	@ (800fee4 <SDMMC_CmdStopTransfer+0x74>)
 800feb6:	210c      	movs	r1, #12
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 f9a5 	bl	8010208 <SDMMC_GetCmdResp1>
 800febe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fed2:	d101      	bne.n	800fed8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fed4:	2300      	movs	r3, #0
 800fed6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fed8:	69fb      	ldr	r3, [r7, #28]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3720      	adds	r7, #32
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	05f5e100 	.word	0x05f5e100

0800fee8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b088      	sub	sp, #32
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fef6:	2307      	movs	r3, #7
 800fef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fefa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff00:	2300      	movs	r3, #0
 800ff02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff0a:	f107 0308 	add.w	r3, r7, #8
 800ff0e:	4619      	mov	r1, r3
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7ff fe87 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ff16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff1a:	2107      	movs	r1, #7
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f973 	bl	8010208 <SDMMC_GetCmdResp1>
 800ff22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff24:	69fb      	ldr	r3, [r7, #28]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3720      	adds	r7, #32
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b088      	sub	sp, #32
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ff36:	2300      	movs	r3, #0
 800ff38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff42:	2300      	movs	r3, #0
 800ff44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff4c:	f107 0308 	add.w	r3, r7, #8
 800ff50:	4619      	mov	r1, r3
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7ff fe66 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 fb97 	bl	801068c <SDMMC_GetCmdError>
 800ff5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff60:	69fb      	ldr	r3, [r7, #28]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3720      	adds	r7, #32
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b088      	sub	sp, #32
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ff72:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ff76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ff78:	2308      	movs	r3, #8
 800ff7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff82:	2300      	movs	r3, #0
 800ff84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff8c:	f107 0308 	add.w	r3, r7, #8
 800ff90:	4619      	mov	r1, r3
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f7ff fe46 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fb29 	bl	80105f0 <SDMMC_GetCmdResp7>
 800ff9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffa0:	69fb      	ldr	r3, [r7, #28]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3720      	adds	r7, #32
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b088      	sub	sp, #32
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
 800ffb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ffb8:	2337      	movs	r3, #55	@ 0x37
 800ffba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7ff fe26 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ffd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffdc:	2137      	movs	r1, #55	@ 0x37
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 f912 	bl	8010208 <SDMMC_GetCmdResp1>
 800ffe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffe6:	69fb      	ldr	r3, [r7, #28]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3720      	adds	r7, #32
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fffe:	2329      	movs	r3, #41	@ 0x29
 8010000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010008:	2300      	movs	r3, #0
 801000a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801000c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010012:	f107 0308 	add.w	r3, r7, #8
 8010016:	4619      	mov	r1, r3
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f7ff fe03 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f000 fa2e 	bl	8010480 <SDMMC_GetCmdResp3>
 8010024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010026:	69fb      	ldr	r3, [r7, #28]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3720      	adds	r7, #32
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801003e:	2306      	movs	r3, #6
 8010040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010048:	2300      	movs	r3, #0
 801004a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801004c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010050:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010052:	f107 0308 	add.w	r3, r7, #8
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff fde3 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801005e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010062:	2106      	movs	r1, #6
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 f8cf 	bl	8010208 <SDMMC_GetCmdResp1>
 801006a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801006c:	69fb      	ldr	r3, [r7, #28]
}
 801006e:	4618      	mov	r0, r3
 8010070:	3720      	adds	r7, #32
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b088      	sub	sp, #32
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801007e:	2300      	movs	r3, #0
 8010080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010082:	2333      	movs	r3, #51	@ 0x33
 8010084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801008a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801008c:	2300      	movs	r3, #0
 801008e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010094:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010096:	f107 0308 	add.w	r3, r7, #8
 801009a:	4619      	mov	r1, r3
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7ff fdc1 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80100a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100a6:	2133      	movs	r1, #51	@ 0x33
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f000 f8ad 	bl	8010208 <SDMMC_GetCmdResp1>
 80100ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100b0:	69fb      	ldr	r3, [r7, #28]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3720      	adds	r7, #32
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b088      	sub	sp, #32
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80100c6:	2302      	movs	r3, #2
 80100c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80100ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80100ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100d0:	2300      	movs	r3, #0
 80100d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100da:	f107 0308 	add.w	r3, r7, #8
 80100de:	4619      	mov	r1, r3
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff fd9f 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f980 	bl	80103ec <SDMMC_GetCmdResp2>
 80100ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100ee:	69fb      	ldr	r3, [r7, #28]
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3720      	adds	r7, #32
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b088      	sub	sp, #32
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010106:	2309      	movs	r3, #9
 8010108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801010a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801010e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010110:	2300      	movs	r3, #0
 8010112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010118:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801011a:	f107 0308 	add.w	r3, r7, #8
 801011e:	4619      	mov	r1, r3
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f7ff fd7f 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f960 	bl	80103ec <SDMMC_GetCmdResp2>
 801012c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801012e:	69fb      	ldr	r3, [r7, #28]
}
 8010130:	4618      	mov	r0, r3
 8010132:	3720      	adds	r7, #32
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010142:	2300      	movs	r3, #0
 8010144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010146:	2303      	movs	r3, #3
 8010148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801014a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801014e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010150:	2300      	movs	r3, #0
 8010152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff fd5f 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	2103      	movs	r1, #3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 f9c8 	bl	8010500 <SDMMC_GetCmdResp6>
 8010170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010172:	69fb      	ldr	r3, [r7, #28]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3720      	adds	r7, #32
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b088      	sub	sp, #32
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801018a:	230d      	movs	r3, #13
 801018c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801018e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010194:	2300      	movs	r3, #0
 8010196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801019c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801019e:	f107 0308 	add.w	r3, r7, #8
 80101a2:	4619      	mov	r1, r3
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7ff fd3d 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80101aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101ae:	210d      	movs	r1, #13
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f829 	bl	8010208 <SDMMC_GetCmdResp1>
 80101b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101b8:	69fb      	ldr	r3, [r7, #28]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3720      	adds	r7, #32
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b088      	sub	sp, #32
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80101ca:	2300      	movs	r3, #0
 80101cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80101ce:	230d      	movs	r3, #13
 80101d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101d8:	2300      	movs	r3, #0
 80101da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101e2:	f107 0308 	add.w	r3, r7, #8
 80101e6:	4619      	mov	r1, r3
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7ff fd1b 	bl	800fc24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80101ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101f2:	210d      	movs	r1, #13
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f807 	bl	8010208 <SDMMC_GetCmdResp1>
 80101fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101fc:	69fb      	ldr	r3, [r7, #28]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3720      	adds	r7, #32
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b088      	sub	sp, #32
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	460b      	mov	r3, r1
 8010212:	607a      	str	r2, [r7, #4]
 8010214:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010216:	4b70      	ldr	r3, [pc, #448]	@ (80103d8 <SDMMC_GetCmdResp1+0x1d0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a70      	ldr	r2, [pc, #448]	@ (80103dc <SDMMC_GetCmdResp1+0x1d4>)
 801021c:	fba2 2303 	umull	r2, r3, r2, r3
 8010220:	0a5a      	lsrs	r2, r3, #9
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	fb02 f303 	mul.w	r3, r2, r3
 8010228:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	1e5a      	subs	r2, r3, #1
 801022e:	61fa      	str	r2, [r7, #28]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010234:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010238:	e0c9      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801023e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010240:	69ba      	ldr	r2, [r7, #24]
 8010242:	4b67      	ldr	r3, [pc, #412]	@ (80103e0 <SDMMC_GetCmdResp1+0x1d8>)
 8010244:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010246:	2b00      	cmp	r3, #0
 8010248:	d0ef      	beq.n	801022a <SDMMC_GetCmdResp1+0x22>
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1ea      	bne.n	801022a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010258:	f003 0304 	and.w	r3, r3, #4
 801025c:	2b00      	cmp	r3, #0
 801025e:	d004      	beq.n	801026a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2204      	movs	r2, #4
 8010264:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010266:	2304      	movs	r3, #4
 8010268:	e0b1      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d004      	beq.n	8010280 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801027c:	2301      	movs	r3, #1
 801027e:	e0a6      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4a58      	ldr	r2, [pc, #352]	@ (80103e4 <SDMMC_GetCmdResp1+0x1dc>)
 8010284:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f7ff fcf6 	bl	800fc78 <SDMMC_GetCommandResponse>
 801028c:	4603      	mov	r3, r0
 801028e:	461a      	mov	r2, r3
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	4293      	cmp	r3, r2
 8010294:	d001      	beq.n	801029a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010296:	2301      	movs	r3, #1
 8010298:	e099      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801029a:	2100      	movs	r1, #0
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f7ff fcf8 	bl	800fc92 <SDMMC_GetResponse>
 80102a2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80102a4:	697a      	ldr	r2, [r7, #20]
 80102a6:	4b50      	ldr	r3, [pc, #320]	@ (80103e8 <SDMMC_GetCmdResp1+0x1e0>)
 80102a8:	4013      	ands	r3, r2
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80102ae:	2300      	movs	r3, #0
 80102b0:	e08d      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	da02      	bge.n	80102be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80102b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80102bc:	e087      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d001      	beq.n	80102cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80102c8:	2340      	movs	r3, #64	@ 0x40
 80102ca:	e080      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80102d6:	2380      	movs	r3, #128	@ 0x80
 80102d8:	e079      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80102e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102e8:	e071      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80102f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80102f8:	e069      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010308:	e061      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010314:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010318:	e059      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010328:	e051      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010338:	e049      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010344:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010348:	e041      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010350:	2b00      	cmp	r3, #0
 8010352:	d002      	beq.n	801035a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010358:	e039      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010360:	2b00      	cmp	r3, #0
 8010362:	d002      	beq.n	801036a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010364:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010368:	e031      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010370:	2b00      	cmp	r3, #0
 8010372:	d002      	beq.n	801037a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010374:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010378:	e029      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010380:	2b00      	cmp	r3, #0
 8010382:	d002      	beq.n	801038a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010384:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010388:	e021      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010394:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010398:	e019      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80103a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80103a8:	e011      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d002      	beq.n	80103ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80103b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80103b8:	e009      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	f003 0308 	and.w	r3, r3, #8
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80103c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80103c8:	e001      	b.n	80103ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80103ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3720      	adds	r7, #32
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	24000000 	.word	0x24000000
 80103dc:	10624dd3 	.word	0x10624dd3
 80103e0:	00200045 	.word	0x00200045
 80103e4:	002000c5 	.word	0x002000c5
 80103e8:	fdffe008 	.word	0xfdffe008

080103ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103f4:	4b1f      	ldr	r3, [pc, #124]	@ (8010474 <SDMMC_GetCmdResp2+0x88>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a1f      	ldr	r2, [pc, #124]	@ (8010478 <SDMMC_GetCmdResp2+0x8c>)
 80103fa:	fba2 2303 	umull	r2, r3, r2, r3
 80103fe:	0a5b      	lsrs	r3, r3, #9
 8010400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010404:	fb02 f303 	mul.w	r3, r2, r3
 8010408:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	1e5a      	subs	r2, r3, #1
 801040e:	60fa      	str	r2, [r7, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d102      	bne.n	801041a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010414:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010418:	e026      	b.n	8010468 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801041e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010426:	2b00      	cmp	r3, #0
 8010428:	d0ef      	beq.n	801040a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1ea      	bne.n	801040a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010438:	f003 0304 	and.w	r3, r3, #4
 801043c:	2b00      	cmp	r3, #0
 801043e:	d004      	beq.n	801044a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2204      	movs	r2, #4
 8010444:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010446:	2304      	movs	r3, #4
 8010448:	e00e      	b.n	8010468 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d004      	beq.n	8010460 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2201      	movs	r2, #1
 801045a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801045c:	2301      	movs	r3, #1
 801045e:	e003      	b.n	8010468 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4a06      	ldr	r2, [pc, #24]	@ (801047c <SDMMC_GetCmdResp2+0x90>)
 8010464:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	3714      	adds	r7, #20
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	24000000 	.word	0x24000000
 8010478:	10624dd3 	.word	0x10624dd3
 801047c:	002000c5 	.word	0x002000c5

08010480 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010480:	b480      	push	{r7}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010488:	4b1a      	ldr	r3, [pc, #104]	@ (80104f4 <SDMMC_GetCmdResp3+0x74>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	4a1a      	ldr	r2, [pc, #104]	@ (80104f8 <SDMMC_GetCmdResp3+0x78>)
 801048e:	fba2 2303 	umull	r2, r3, r2, r3
 8010492:	0a5b      	lsrs	r3, r3, #9
 8010494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010498:	fb02 f303 	mul.w	r3, r2, r3
 801049c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	1e5a      	subs	r2, r3, #1
 80104a2:	60fa      	str	r2, [r7, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d102      	bne.n	80104ae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80104ac:	e01b      	b.n	80104e6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d0ef      	beq.n	801049e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1ea      	bne.n	801049e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104cc:	f003 0304 	and.w	r3, r3, #4
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d004      	beq.n	80104de <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2204      	movs	r2, #4
 80104d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80104da:	2304      	movs	r3, #4
 80104dc:	e003      	b.n	80104e6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a06      	ldr	r2, [pc, #24]	@ (80104fc <SDMMC_GetCmdResp3+0x7c>)
 80104e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80104e4:	2300      	movs	r3, #0
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3714      	adds	r7, #20
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	24000000 	.word	0x24000000
 80104f8:	10624dd3 	.word	0x10624dd3
 80104fc:	002000c5 	.word	0x002000c5

08010500 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b088      	sub	sp, #32
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	460b      	mov	r3, r1
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801050e:	4b35      	ldr	r3, [pc, #212]	@ (80105e4 <SDMMC_GetCmdResp6+0xe4>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4a35      	ldr	r2, [pc, #212]	@ (80105e8 <SDMMC_GetCmdResp6+0xe8>)
 8010514:	fba2 2303 	umull	r2, r3, r2, r3
 8010518:	0a5b      	lsrs	r3, r3, #9
 801051a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801051e:	fb02 f303 	mul.w	r3, r2, r3
 8010522:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	1e5a      	subs	r2, r3, #1
 8010528:	61fa      	str	r2, [r7, #28]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d102      	bne.n	8010534 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801052e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010532:	e052      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010538:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0ef      	beq.n	8010524 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1ea      	bne.n	8010524 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010552:	f003 0304 	and.w	r3, r3, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	d004      	beq.n	8010564 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2204      	movs	r2, #4
 801055e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010560:	2304      	movs	r3, #4
 8010562:	e03a      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010568:	f003 0301 	and.w	r3, r3, #1
 801056c:	2b00      	cmp	r3, #0
 801056e:	d004      	beq.n	801057a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2201      	movs	r2, #1
 8010574:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010576:	2301      	movs	r3, #1
 8010578:	e02f      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f7ff fb7c 	bl	800fc78 <SDMMC_GetCommandResponse>
 8010580:	4603      	mov	r3, r0
 8010582:	461a      	mov	r2, r3
 8010584:	7afb      	ldrb	r3, [r7, #11]
 8010586:	4293      	cmp	r3, r2
 8010588:	d001      	beq.n	801058e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801058a:	2301      	movs	r3, #1
 801058c:	e025      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	4a16      	ldr	r2, [pc, #88]	@ (80105ec <SDMMC_GetCmdResp6+0xec>)
 8010592:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010594:	2100      	movs	r1, #0
 8010596:	68f8      	ldr	r0, [r7, #12]
 8010598:	f7ff fb7b 	bl	800fc92 <SDMMC_GetResponse>
 801059c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d106      	bne.n	80105b6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	0c1b      	lsrs	r3, r3, #16
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e011      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80105c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80105c4:	e009      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d002      	beq.n	80105d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80105d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105d4:	e001      	b.n	80105da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80105d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3720      	adds	r7, #32
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	24000000 	.word	0x24000000
 80105e8:	10624dd3 	.word	0x10624dd3
 80105ec:	002000c5 	.word	0x002000c5

080105f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80105f8:	4b22      	ldr	r3, [pc, #136]	@ (8010684 <SDMMC_GetCmdResp7+0x94>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a22      	ldr	r2, [pc, #136]	@ (8010688 <SDMMC_GetCmdResp7+0x98>)
 80105fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010602:	0a5b      	lsrs	r3, r3, #9
 8010604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010608:	fb02 f303 	mul.w	r3, r2, r3
 801060c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	1e5a      	subs	r2, r3, #1
 8010612:	60fa      	str	r2, [r7, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d102      	bne.n	801061e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010618:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801061c:	e02c      	b.n	8010678 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010622:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801062a:	2b00      	cmp	r3, #0
 801062c:	d0ef      	beq.n	801060e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1ea      	bne.n	801060e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801063c:	f003 0304 	and.w	r3, r3, #4
 8010640:	2b00      	cmp	r3, #0
 8010642:	d004      	beq.n	801064e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2204      	movs	r2, #4
 8010648:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801064a:	2304      	movs	r3, #4
 801064c:	e014      	b.n	8010678 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b00      	cmp	r3, #0
 8010658:	d004      	beq.n	8010664 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010660:	2301      	movs	r3, #1
 8010662:	e009      	b.n	8010678 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2240      	movs	r2, #64	@ 0x40
 8010674:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010676:	2300      	movs	r3, #0

}
 8010678:	4618      	mov	r0, r3
 801067a:	3714      	adds	r7, #20
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr
 8010684:	24000000 	.word	0x24000000
 8010688:	10624dd3 	.word	0x10624dd3

0801068c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801068c:	b480      	push	{r7}
 801068e:	b085      	sub	sp, #20
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010694:	4b11      	ldr	r3, [pc, #68]	@ (80106dc <SDMMC_GetCmdError+0x50>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a11      	ldr	r2, [pc, #68]	@ (80106e0 <SDMMC_GetCmdError+0x54>)
 801069a:	fba2 2303 	umull	r2, r3, r2, r3
 801069e:	0a5b      	lsrs	r3, r3, #9
 80106a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80106a4:	fb02 f303 	mul.w	r3, r2, r3
 80106a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	1e5a      	subs	r2, r3, #1
 80106ae:	60fa      	str	r2, [r7, #12]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d102      	bne.n	80106ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80106b8:	e009      	b.n	80106ce <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d0f1      	beq.n	80106aa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4a06      	ldr	r2, [pc, #24]	@ (80106e4 <SDMMC_GetCmdError+0x58>)
 80106ca:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	24000000 	.word	0x24000000
 80106e0:	10624dd3 	.word	0x10624dd3
 80106e4:	002000c5 	.word	0x002000c5

080106e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80106e8:	b084      	sub	sp, #16
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b084      	sub	sp, #16
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	f107 001c 	add.w	r0, r7, #28
 80106f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80106fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d121      	bne.n	8010746 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010706:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	68da      	ldr	r2, [r3, #12]
 8010712:	4b2c      	ldr	r3, [pc, #176]	@ (80107c4 <USB_CoreInit+0xdc>)
 8010714:	4013      	ands	r3, r2
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801072a:	2b01      	cmp	r3, #1
 801072c:	d105      	bne.n	801073a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 faaa 	bl	8010c94 <USB_CoreReset>
 8010740:	4603      	mov	r3, r0
 8010742:	73fb      	strb	r3, [r7, #15]
 8010744:	e01b      	b.n	801077e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 fa9e 	bl	8010c94 <USB_CoreReset>
 8010758:	4603      	mov	r3, r0
 801075a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801075c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010760:	2b00      	cmp	r3, #0
 8010762:	d106      	bne.n	8010772 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010768:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010770:	e005      	b.n	801077e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010776:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801077e:	7fbb      	ldrb	r3, [r7, #30]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d116      	bne.n	80107b2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010788:	b29a      	uxth	r2, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010792:	4b0d      	ldr	r3, [pc, #52]	@ (80107c8 <USB_CoreInit+0xe0>)
 8010794:	4313      	orrs	r3, r2
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	f043 0206 	orr.w	r2, r3, #6
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	f043 0220 	orr.w	r2, r3, #32
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80107b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80107be:	b004      	add	sp, #16
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	ffbdffbf 	.word	0xffbdffbf
 80107c8:	03ee0000 	.word	0x03ee0000

080107cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	f023 0201 	bic.w	r2, r3, #1
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	370c      	adds	r7, #12
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b084      	sub	sp, #16
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	460b      	mov	r3, r1
 80107f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80107fa:	2300      	movs	r3, #0
 80107fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801080a:	78fb      	ldrb	r3, [r7, #3]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d115      	bne.n	801083c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801081c:	200a      	movs	r0, #10
 801081e:	f7f3 fa8b 	bl	8003d38 <HAL_Delay>
      ms += 10U;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	330a      	adds	r3, #10
 8010826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fa25 	bl	8010c78 <USB_GetMode>
 801082e:	4603      	mov	r3, r0
 8010830:	2b01      	cmp	r3, #1
 8010832:	d01e      	beq.n	8010872 <USB_SetCurrentMode+0x84>
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2bc7      	cmp	r3, #199	@ 0xc7
 8010838:	d9f0      	bls.n	801081c <USB_SetCurrentMode+0x2e>
 801083a:	e01a      	b.n	8010872 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d115      	bne.n	801086e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801084e:	200a      	movs	r0, #10
 8010850:	f7f3 fa72 	bl	8003d38 <HAL_Delay>
      ms += 10U;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	330a      	adds	r3, #10
 8010858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 fa0c 	bl	8010c78 <USB_GetMode>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d005      	beq.n	8010872 <USB_SetCurrentMode+0x84>
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2bc7      	cmp	r3, #199	@ 0xc7
 801086a:	d9f0      	bls.n	801084e <USB_SetCurrentMode+0x60>
 801086c:	e001      	b.n	8010872 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801086e:	2301      	movs	r3, #1
 8010870:	e005      	b.n	801087e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2bc8      	cmp	r3, #200	@ 0xc8
 8010876:	d101      	bne.n	801087c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010878:	2301      	movs	r3, #1
 801087a:	e000      	b.n	801087e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
	...

08010888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010888:	b084      	sub	sp, #16
 801088a:	b580      	push	{r7, lr}
 801088c:	b086      	sub	sp, #24
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80108a2:	2300      	movs	r3, #0
 80108a4:	613b      	str	r3, [r7, #16]
 80108a6:	e009      	b.n	80108bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	3340      	adds	r3, #64	@ 0x40
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	4413      	add	r3, r2
 80108b2:	2200      	movs	r2, #0
 80108b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	3301      	adds	r3, #1
 80108ba:	613b      	str	r3, [r7, #16]
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	2b0e      	cmp	r3, #14
 80108c0:	d9f2      	bls.n	80108a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80108c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d11c      	bne.n	8010904 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	68fa      	ldr	r2, [r7, #12]
 80108d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108d8:	f043 0302 	orr.w	r3, r3, #2
 80108dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	601a      	str	r2, [r3, #0]
 8010902:	e005      	b.n	8010910 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010908:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010916:	461a      	mov	r2, r3
 8010918:	2300      	movs	r3, #0
 801091a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801091c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010920:	2b01      	cmp	r3, #1
 8010922:	d10d      	bne.n	8010940 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010928:	2b00      	cmp	r3, #0
 801092a:	d104      	bne.n	8010936 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801092c:	2100      	movs	r1, #0
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f968 	bl	8010c04 <USB_SetDevSpeed>
 8010934:	e008      	b.n	8010948 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010936:	2101      	movs	r1, #1
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 f963 	bl	8010c04 <USB_SetDevSpeed>
 801093e:	e003      	b.n	8010948 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010940:	2103      	movs	r1, #3
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 f95e 	bl	8010c04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010948:	2110      	movs	r1, #16
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 f8fa 	bl	8010b44 <USB_FlushTxFifo>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d001      	beq.n	801095a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8010956:	2301      	movs	r3, #1
 8010958:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 f924 	bl	8010ba8 <USB_FlushRxFifo>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010970:	461a      	mov	r2, r3
 8010972:	2300      	movs	r3, #0
 8010974:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801097c:	461a      	mov	r2, r3
 801097e:	2300      	movs	r3, #0
 8010980:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010988:	461a      	mov	r2, r3
 801098a:	2300      	movs	r3, #0
 801098c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801098e:	2300      	movs	r3, #0
 8010990:	613b      	str	r3, [r7, #16]
 8010992:	e043      	b.n	8010a1c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	015a      	lsls	r2, r3, #5
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	4413      	add	r3, r2
 801099c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80109a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80109aa:	d118      	bne.n	80109de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10a      	bne.n	80109c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	015a      	lsls	r2, r3, #5
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	4413      	add	r3, r2
 80109ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109be:	461a      	mov	r2, r3
 80109c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80109c4:	6013      	str	r3, [r2, #0]
 80109c6:	e013      	b.n	80109f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	015a      	lsls	r2, r3, #5
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	4413      	add	r3, r2
 80109d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109d4:	461a      	mov	r2, r3
 80109d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80109da:	6013      	str	r3, [r2, #0]
 80109dc:	e008      	b.n	80109f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	015a      	lsls	r2, r3, #5
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	4413      	add	r3, r2
 80109e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109ea:	461a      	mov	r2, r3
 80109ec:	2300      	movs	r3, #0
 80109ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	015a      	lsls	r2, r3, #5
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	4413      	add	r3, r2
 80109f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109fc:	461a      	mov	r2, r3
 80109fe:	2300      	movs	r3, #0
 8010a00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	015a      	lsls	r2, r3, #5
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	4413      	add	r3, r2
 8010a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a0e:	461a      	mov	r2, r3
 8010a10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010a14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	613b      	str	r3, [r7, #16]
 8010a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010a20:	461a      	mov	r2, r3
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d3b5      	bcc.n	8010994 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010a28:	2300      	movs	r3, #0
 8010a2a:	613b      	str	r3, [r7, #16]
 8010a2c:	e043      	b.n	8010ab6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	015a      	lsls	r2, r3, #5
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	4413      	add	r3, r2
 8010a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010a44:	d118      	bne.n	8010a78 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d10a      	bne.n	8010a62 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	015a      	lsls	r2, r3, #5
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	4413      	add	r3, r2
 8010a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a58:	461a      	mov	r2, r3
 8010a5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010a5e:	6013      	str	r3, [r2, #0]
 8010a60:	e013      	b.n	8010a8a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	015a      	lsls	r2, r3, #5
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	4413      	add	r3, r2
 8010a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a6e:	461a      	mov	r2, r3
 8010a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010a74:	6013      	str	r3, [r2, #0]
 8010a76:	e008      	b.n	8010a8a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	015a      	lsls	r2, r3, #5
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	4413      	add	r3, r2
 8010a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a84:	461a      	mov	r2, r3
 8010a86:	2300      	movs	r3, #0
 8010a88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	015a      	lsls	r2, r3, #5
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	4413      	add	r3, r2
 8010a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a96:	461a      	mov	r2, r3
 8010a98:	2300      	movs	r3, #0
 8010a9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	015a      	lsls	r2, r3, #5
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	613b      	str	r3, [r7, #16]
 8010ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010aba:	461a      	mov	r2, r3
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d3b5      	bcc.n	8010a2e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ac8:	691b      	ldr	r3, [r3, #16]
 8010aca:	68fa      	ldr	r2, [r7, #12]
 8010acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010ad4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010ae2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d105      	bne.n	8010af8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	699b      	ldr	r3, [r3, #24]
 8010af0:	f043 0210 	orr.w	r2, r3, #16
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	699a      	ldr	r2, [r3, #24]
 8010afc:	4b0f      	ldr	r3, [pc, #60]	@ (8010b3c <USB_DevInit+0x2b4>)
 8010afe:	4313      	orrs	r3, r2
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010b04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	699b      	ldr	r3, [r3, #24]
 8010b10:	f043 0208 	orr.w	r2, r3, #8
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010b18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d105      	bne.n	8010b2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	699a      	ldr	r2, [r3, #24]
 8010b24:	4b06      	ldr	r3, [pc, #24]	@ (8010b40 <USB_DevInit+0x2b8>)
 8010b26:	4313      	orrs	r3, r2
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3718      	adds	r7, #24
 8010b32:	46bd      	mov	sp, r7
 8010b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b38:	b004      	add	sp, #16
 8010b3a:	4770      	bx	lr
 8010b3c:	803c3800 	.word	0x803c3800
 8010b40:	40000004 	.word	0x40000004

08010b44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	3301      	adds	r3, #1
 8010b56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b5e:	d901      	bls.n	8010b64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010b60:	2303      	movs	r3, #3
 8010b62:	e01b      	b.n	8010b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	daf2      	bge.n	8010b52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	019b      	lsls	r3, r3, #6
 8010b74:	f043 0220 	orr.w	r2, r3, #32
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b88:	d901      	bls.n	8010b8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010b8a:	2303      	movs	r3, #3
 8010b8c:	e006      	b.n	8010b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	f003 0320 	and.w	r3, r3, #32
 8010b96:	2b20      	cmp	r3, #32
 8010b98:	d0f0      	beq.n	8010b7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010b9a:	2300      	movs	r3, #0
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010bc0:	d901      	bls.n	8010bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	e018      	b.n	8010bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	691b      	ldr	r3, [r3, #16]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	daf2      	bge.n	8010bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2210      	movs	r2, #16
 8010bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010be4:	d901      	bls.n	8010bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e006      	b.n	8010bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	f003 0310 	and.w	r3, r3, #16
 8010bf2:	2b10      	cmp	r3, #16
 8010bf4:	d0f0      	beq.n	8010bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	78fb      	ldrb	r3, [r7, #3]
 8010c1e:	68f9      	ldr	r1, [r7, #12]
 8010c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c24:	4313      	orrs	r3, r2
 8010c26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3714      	adds	r7, #20
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr

08010c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c36:	b480      	push	{r7}
 8010c38:	b085      	sub	sp, #20
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010c50:	f023 0303 	bic.w	r3, r3, #3
 8010c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c64:	f043 0302 	orr.w	r3, r3, #2
 8010c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	695b      	ldr	r3, [r3, #20]
 8010c84:	f003 0301 	and.w	r3, r3, #1
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b085      	sub	sp, #20
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010cac:	d901      	bls.n	8010cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010cae:	2303      	movs	r3, #3
 8010cb0:	e01b      	b.n	8010cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	daf2      	bge.n	8010ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	691b      	ldr	r3, [r3, #16]
 8010cc2:	f043 0201 	orr.w	r2, r3, #1
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010cd6:	d901      	bls.n	8010cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010cd8:	2303      	movs	r3, #3
 8010cda:	e006      	b.n	8010cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	691b      	ldr	r3, [r3, #16]
 8010ce0:	f003 0301 	and.w	r3, r3, #1
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d0f0      	beq.n	8010cca <USB_CoreReset+0x36>

  return HAL_OK;
 8010ce8:	2300      	movs	r3, #0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3714      	adds	r7, #20
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
	...

08010cf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010cfc:	4904      	ldr	r1, [pc, #16]	@ (8010d10 <MX_FATFS_Init+0x18>)
 8010cfe:	4805      	ldr	r0, [pc, #20]	@ (8010d14 <MX_FATFS_Init+0x1c>)
 8010d00:	f00b fe8e 	bl	801ca20 <FATFS_LinkDriver>
 8010d04:	4603      	mov	r3, r0
 8010d06:	461a      	mov	r2, r3
 8010d08:	4b03      	ldr	r3, [pc, #12]	@ (8010d18 <MX_FATFS_Init+0x20>)
 8010d0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010d0c:	bf00      	nop
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	240084b4 	.word	0x240084b4
 8010d14:	0801f730 	.word	0x0801f730
 8010d18:	240084b0 	.word	0x240084b0

08010d1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010d20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010d36:	f000 f879 	bl	8010e2c <BSP_SD_IsDetected>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d001      	beq.n	8010d44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010d40:	2302      	movs	r3, #2
 8010d42:	e012      	b.n	8010d6a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010d44:	480b      	ldr	r0, [pc, #44]	@ (8010d74 <BSP_SD_Init+0x48>)
 8010d46:	f7fa fc27 	bl	800b598 <HAL_SD_Init>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d4e:	79fb      	ldrb	r3, [r7, #7]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d109      	bne.n	8010d68 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d58:	4806      	ldr	r0, [pc, #24]	@ (8010d74 <BSP_SD_Init+0x48>)
 8010d5a:	f7fb fae3 	bl	800c324 <HAL_SD_ConfigWideBusOperation>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d001      	beq.n	8010d68 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d64:	2301      	movs	r3, #1
 8010d66:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d68:	79fb      	ldrb	r3, [r7, #7]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	24000324 	.word	0x24000324

08010d78 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b088      	sub	sp, #32
 8010d7c:	af02      	add	r7, sp, #8
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
 8010d84:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010d86:	2300      	movs	r3, #0
 8010d88:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	68ba      	ldr	r2, [r7, #8]
 8010d92:	68f9      	ldr	r1, [r7, #12]
 8010d94:	4806      	ldr	r0, [pc, #24]	@ (8010db0 <BSP_SD_ReadBlocks+0x38>)
 8010d96:	f7fa fd1f 	bl	800b7d8 <HAL_SD_ReadBlocks>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d001      	beq.n	8010da4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010da0:	2301      	movs	r3, #1
 8010da2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	24000324 	.word	0x24000324

08010db4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b088      	sub	sp, #32
 8010db8:	af02      	add	r7, sp, #8
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	607a      	str	r2, [r7, #4]
 8010dc0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	9300      	str	r3, [sp, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	68f9      	ldr	r1, [r7, #12]
 8010dd0:	4806      	ldr	r0, [pc, #24]	@ (8010dec <BSP_SD_WriteBlocks+0x38>)
 8010dd2:	f7fa fe8b 	bl	800baec <HAL_SD_WriteBlocks>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3718      	adds	r7, #24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	24000324 	.word	0x24000324

08010df0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010df4:	4805      	ldr	r0, [pc, #20]	@ (8010e0c <BSP_SD_GetCardState+0x1c>)
 8010df6:	f7fb fba7 	bl	800c548 <HAL_SD_GetCardState>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b04      	cmp	r3, #4
 8010dfe:	bf14      	ite	ne
 8010e00:	2301      	movne	r3, #1
 8010e02:	2300      	moveq	r3, #0
 8010e04:	b2db      	uxtb	r3, r3
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	24000324 	.word	0x24000324

08010e10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010e18:	6879      	ldr	r1, [r7, #4]
 8010e1a:	4803      	ldr	r0, [pc, #12]	@ (8010e28 <BSP_SD_GetCardInfo+0x18>)
 8010e1c:	f7fb fa56 	bl	800c2cc <HAL_SD_GetCardInfo>
}
 8010e20:	bf00      	nop
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	24000324 	.word	0x24000324

08010e2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010e32:	2301      	movs	r3, #1
 8010e34:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	b2db      	uxtb	r3, r3
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	370c      	adds	r7, #12
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr
	...

08010e48 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	4603      	mov	r3, r0
 8010e50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e52:	4b0b      	ldr	r3, [pc, #44]	@ (8010e80 <SD_CheckStatus+0x38>)
 8010e54:	2201      	movs	r2, #1
 8010e56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e58:	f7ff ffca 	bl	8010df0 <BSP_SD_GetCardState>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d107      	bne.n	8010e72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e62:	4b07      	ldr	r3, [pc, #28]	@ (8010e80 <SD_CheckStatus+0x38>)
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	f023 0301 	bic.w	r3, r3, #1
 8010e6c:	b2da      	uxtb	r2, r3
 8010e6e:	4b04      	ldr	r3, [pc, #16]	@ (8010e80 <SD_CheckStatus+0x38>)
 8010e70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e72:	4b03      	ldr	r3, [pc, #12]	@ (8010e80 <SD_CheckStatus+0x38>)
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	b2db      	uxtb	r3, r3
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	2400000d 	.word	0x2400000d

08010e84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8010ebc <SD_initialize+0x38>)
 8010e90:	2201      	movs	r2, #1
 8010e92:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e94:	f7ff ff4a 	bl	8010d2c <BSP_SD_Init>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d107      	bne.n	8010eae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ffd1 	bl	8010e48 <SD_CheckStatus>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	4b04      	ldr	r3, [pc, #16]	@ (8010ebc <SD_initialize+0x38>)
 8010eac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010eae:	4b03      	ldr	r3, [pc, #12]	@ (8010ebc <SD_initialize+0x38>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	b2db      	uxtb	r3, r3
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	2400000d 	.word	0x2400000d

08010ec0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010eca:	79fb      	ldrb	r3, [r7, #7]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff ffbb 	bl	8010e48 <SD_CheckStatus>
 8010ed2:	4603      	mov	r3, r0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3708      	adds	r7, #8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	60b9      	str	r1, [r7, #8]
 8010ee4:	607a      	str	r2, [r7, #4]
 8010ee6:	603b      	str	r3, [r7, #0]
 8010ee8:	4603      	mov	r3, r0
 8010eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010eec:	2301      	movs	r3, #1
 8010eee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010ef4:	683a      	ldr	r2, [r7, #0]
 8010ef6:	6879      	ldr	r1, [r7, #4]
 8010ef8:	68b8      	ldr	r0, [r7, #8]
 8010efa:	f7ff ff3d 	bl	8010d78 <BSP_SD_ReadBlocks>
 8010efe:	4603      	mov	r3, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d107      	bne.n	8010f14 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010f04:	bf00      	nop
 8010f06:	f7ff ff73 	bl	8010df0 <BSP_SD_GetCardState>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1fa      	bne.n	8010f06 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b086      	sub	sp, #24
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	607a      	str	r2, [r7, #4]
 8010f28:	603b      	str	r3, [r7, #0]
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f2e:	2301      	movs	r3, #1
 8010f30:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010f36:	683a      	ldr	r2, [r7, #0]
 8010f38:	6879      	ldr	r1, [r7, #4]
 8010f3a:	68b8      	ldr	r0, [r7, #8]
 8010f3c:	f7ff ff3a 	bl	8010db4 <BSP_SD_WriteBlocks>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d107      	bne.n	8010f56 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010f46:	bf00      	nop
 8010f48:	f7ff ff52 	bl	8010df0 <BSP_SD_GetCardState>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1fa      	bne.n	8010f48 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3718      	adds	r7, #24
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b08c      	sub	sp, #48	@ 0x30
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	4603      	mov	r3, r0
 8010f68:	603a      	str	r2, [r7, #0]
 8010f6a:	71fb      	strb	r3, [r7, #7]
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010f70:	2301      	movs	r3, #1
 8010f72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010f76:	4b25      	ldr	r3, [pc, #148]	@ (801100c <SD_ioctl+0xac>)
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	f003 0301 	and.w	r3, r3, #1
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <SD_ioctl+0x28>
 8010f84:	2303      	movs	r3, #3
 8010f86:	e03c      	b.n	8011002 <SD_ioctl+0xa2>

  switch (cmd)
 8010f88:	79bb      	ldrb	r3, [r7, #6]
 8010f8a:	2b03      	cmp	r3, #3
 8010f8c:	d834      	bhi.n	8010ff8 <SD_ioctl+0x98>
 8010f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f94 <SD_ioctl+0x34>)
 8010f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f94:	08010fa5 	.word	0x08010fa5
 8010f98:	08010fad 	.word	0x08010fad
 8010f9c:	08010fc5 	.word	0x08010fc5
 8010fa0:	08010fdf 	.word	0x08010fdf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010faa:	e028      	b.n	8010ffe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fac:	f107 0308 	add.w	r3, r7, #8
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ff ff2d 	bl	8010e10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010fb6:	6a3a      	ldr	r2, [r7, #32]
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010fc2:	e01c      	b.n	8010ffe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fc4:	f107 0308 	add.w	r3, r7, #8
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7ff ff21 	bl	8010e10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010fdc:	e00f      	b.n	8010ffe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fde:	f107 0308 	add.w	r3, r7, #8
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7ff ff14 	bl	8010e10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fea:	0a5a      	lsrs	r2, r3, #9
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ff6:	e002      	b.n	8010ffe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010ff8:	2304      	movs	r3, #4
 8010ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011002:	4618      	mov	r0, r3
 8011004:	3730      	adds	r7, #48	@ 0x30
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	2400000d 	.word	0x2400000d

08011010 <arm_abs_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_abs_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011010:	b480      	push	{r7}
 8011012:	b08b      	sub	sp, #44	@ 0x2c
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8011020:	e01e      	b.n	8011060 <arm_abs_q15+0x50>
  {
    /* C = |A| */

    /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination buffer. */
    in = *pSrc++;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	1c9a      	adds	r2, r3, #2
 8011026:	60fa      	str	r2, [r7, #12]
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	847b      	strh	r3, [r7, #34]	@ 0x22
#if defined (ARM_MATH_DSP)
    *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 801102c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011030:	2b00      	cmp	r3, #0
 8011032:	dc0c      	bgt.n	801104e <arm_abs_q15+0x3e>
 8011034:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011038:	2200      	movs	r2, #0
 801103a:	61fa      	str	r2, [r7, #28]
 801103c:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	69ba      	ldr	r2, [r7, #24]
 8011042:	fad3 f312 	qsub16	r3, r3, r2
 8011046:	617b      	str	r3, [r7, #20]
  return(result);
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	b21a      	sxth	r2, r3
 801104c:	e001      	b.n	8011052 <arm_abs_q15+0x42>
 801104e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	1c99      	adds	r1, r3, #2
 8011056:	60b9      	str	r1, [r7, #8]
 8011058:	801a      	strh	r2, [r3, #0]
#else
    *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
#endif

    /* Decrement loop counter */
    blkCnt--;
 801105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105c:	3b01      	subs	r3, #1
 801105e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8011060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1dd      	bne.n	8011022 <arm_abs_q15+0x12>
  }

}
 8011066:	bf00      	nop
 8011068:	bf00      	nop
 801106a:	372c      	adds	r7, #44	@ 0x2c
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <arm_dot_prod_q15>:
ARM_DSP_ATTRIBUTE void arm_dot_prod_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        uint32_t blockSize,
        q63_t * result)
{
 8011074:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8011078:	b089      	sub	sp, #36	@ 0x24
 801107a:	af00      	add	r7, sp, #0
 801107c:	60f8      	str	r0, [r7, #12]
 801107e:	60b9      	str	r1, [r7, #8]
 8011080:	607a      	str	r2, [r7, #4]
 8011082:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        q63_t sum = 0;                                 /* Temporary return variable */
 8011084:	f04f 0200 	mov.w	r2, #0
 8011088:	f04f 0300 	mov.w	r3, #0
 801108c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8011094:	e01a      	b.n	80110cc <arm_dot_prod_q15+0x58>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	1c9a      	adds	r2, r3, #2
 801109a:	60fa      	str	r2, [r7, #12]
 801109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110a0:	4619      	mov	r1, r3
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	1c9a      	adds	r2, r3, #2
 80110a6:	60ba      	str	r2, [r7, #8]
 80110a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110ac:	fb01 f303 	mul.w	r3, r1, r3
 80110b0:	17da      	asrs	r2, r3, #31
 80110b2:	461c      	mov	r4, r3
 80110b4:	4615      	mov	r5, r2
 80110b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80110ba:	eb12 0804 	adds.w	r8, r2, r4
 80110be:	eb43 0905 	adc.w	r9, r3, r5
 80110c2:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	3b01      	subs	r3, #1
 80110ca:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1e1      	bne.n	8011096 <arm_dot_prod_q15+0x22>
  }

  /* Store result in destination buffer in 34.30 format */
  *result = sum;
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80110d8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80110dc:	bf00      	nop
 80110de:	3724      	adds	r7, #36	@ 0x24
 80110e0:	46bd      	mov	sp, r7
 80110e2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80110e6:	4770      	bx	lr

080110e8 <arm_mult_q15>:
ARM_DSP_ATTRIBUTE void arm_mult_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        q15_t * pDst,
        uint32_t blockSize)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b089      	sub	sp, #36	@ 0x24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80110fa:	e01b      	b.n	8011134 <arm_mult_q15+0x4c>
  {
    /* C = A * B */

    /* Multiply inputs and store result in destination buffer. */
    *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	1c9a      	adds	r2, r3, #2
 8011100:	60fa      	str	r2, [r7, #12]
 8011102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011106:	4619      	mov	r1, r3
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	1c9a      	adds	r2, r3, #2
 801110c:	60ba      	str	r2, [r7, #8]
 801110e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011112:	fb01 f303 	mul.w	r3, r1, r3
 8011116:	13db      	asrs	r3, r3, #15
 8011118:	61bb      	str	r3, [r7, #24]
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	f303 030f 	ssat	r3, #16, r3
 8011120:	617b      	str	r3, [r7, #20]
 8011122:	6979      	ldr	r1, [r7, #20]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	1c9a      	adds	r2, r3, #2
 8011128:	607a      	str	r2, [r7, #4]
 801112a:	b20a      	sxth	r2, r1
 801112c:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	3b01      	subs	r3, #1
 8011132:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d1e0      	bne.n	80110fc <arm_mult_q15+0x14>
  }

}
 801113a:	bf00      	nop
 801113c:	bf00      	nop
 801113e:	3724      	adds	r7, #36	@ 0x24
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <arm_offset_q31>:
ARM_DSP_ATTRIBUTE void arm_offset_q31(
  const q31_t * pSrc,
        q31_t offset,
        q31_t * pDst,
        uint32_t blockSize)
{
 8011148:	b480      	push	{r7}
 801114a:	b089      	sub	sp, #36	@ 0x24
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
 8011154:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801115a:	e013      	b.n	8011184 <arm_offset_q31+0x3c>
  {
    /* C = A + offset */

    /* Add offset and store result in destination buffer. */
#if defined (ARM_MATH_DSP)
    *pDst++ = __QADD(*pSrc++, offset);
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	1d1a      	adds	r2, r3, #4
 8011160:	60fa      	str	r2, [r7, #12]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	1d19      	adds	r1, r3, #4
 8011168:	6079      	str	r1, [r7, #4]
 801116a:	61ba      	str	r2, [r7, #24]
 801116c:	68ba      	ldr	r2, [r7, #8]
 801116e:	617a      	str	r2, [r7, #20]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011170:	69ba      	ldr	r2, [r7, #24]
 8011172:	6979      	ldr	r1, [r7, #20]
 8011174:	fa81 f282 	qadd	r2, r2, r1
 8011178:	613a      	str	r2, [r7, #16]
  return(result);
 801117a:	693a      	ldr	r2, [r7, #16]
 801117c:	601a      	str	r2, [r3, #0]
#else
    *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
#endif

    /* Decrement loop counter */
    blkCnt--;
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	3b01      	subs	r3, #1
 8011182:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1e8      	bne.n	801115c <arm_offset_q31+0x14>
  }

}
 801118a:	bf00      	nop
 801118c:	bf00      	nop
 801118e:	3724      	adds	r7, #36	@ 0x24
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <arm_scale_q15>:
  const q15_t *pSrc,
        q15_t scaleFract,
        int8_t shift,
        q15_t *pDst,
        uint32_t blockSize)
{
 8011198:	b480      	push	{r7}
 801119a:	b089      	sub	sp, #36	@ 0x24
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	607b      	str	r3, [r7, #4]
 80111a2:	460b      	mov	r3, r1
 80111a4:	817b      	strh	r3, [r7, #10]
 80111a6:	4613      	mov	r3, r2
 80111a8:	727b      	strb	r3, [r7, #9]
        uint32_t blkCnt;                               /* Loop counter */
        int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
 80111aa:	7a7b      	ldrb	r3, [r7, #9]
 80111ac:	f1c3 030f 	rsb	r3, r3, #15
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80111b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b6:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80111b8:	e01b      	b.n	80111f2 <arm_scale_q15+0x5a>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	1c9a      	adds	r2, r3, #2
 80111be:	60fa      	str	r2, [r7, #12]
 80111c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80111c4:	461a      	mov	r2, r3
 80111c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80111ca:	fb03 f202 	mul.w	r2, r3, r2
 80111ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80111d2:	fa42 f303 	asr.w	r3, r2, r3
 80111d6:	617b      	str	r3, [r7, #20]
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	f303 030f 	ssat	r3, #16, r3
 80111de:	613b      	str	r3, [r7, #16]
 80111e0:	6939      	ldr	r1, [r7, #16]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	1c9a      	adds	r2, r3, #2
 80111e6:	607a      	str	r2, [r7, #4]
 80111e8:	b20a      	sxth	r2, r1
 80111ea:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	3b01      	subs	r3, #1
 80111f0:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1e0      	bne.n	80111ba <arm_scale_q15+0x22>
  }

}
 80111f8:	bf00      	nop
 80111fa:	bf00      	nop
 80111fc:	3724      	adds	r7, #36	@ 0x24
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr

08011206 <arm_scale_q31>:
  const q31_t *pSrc,
        q31_t scaleFract,
        int8_t shift,
        q31_t *pDst,
        uint32_t blockSize)
{
 8011206:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801120a:	b08f      	sub	sp, #60	@ 0x3c
 801120c:	af00      	add	r7, sp, #0
 801120e:	6278      	str	r0, [r7, #36]	@ 0x24
 8011210:	6239      	str	r1, [r7, #32]
 8011212:	61bb      	str	r3, [r7, #24]
 8011214:	4613      	mov	r3, r2
 8011216:	77fb      	strb	r3, [r7, #31]
        uint32_t blkCnt;                               /* Loop counter */
        q31_t in, out;                                 /* Temporary variables */
        int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
 8011218:	7ffb      	ldrb	r3, [r7, #31]
 801121a:	3301      	adds	r3, #1
 801121c:	b2db      	uxtb	r3, r3
 801121e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        int8_t sign = (kShift & 0x80);
 8011222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011226:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801122a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801122e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011230:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  if (sign == 0U)
 8011232:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8011236:	2b00      	cmp	r3, #0
 8011238:	d17b      	bne.n	8011332 <arm_scale_q31+0x12c>
  {
    while (blkCnt > 0U)
 801123a:	e044      	b.n	80112c6 <arm_scale_q31+0xc0>
    {
      /* C = A * scale */

      /* Scale input and store result in destination buffer. */
      in = *pSrc++;
 801123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801123e:	1d1a      	adds	r2, r3, #4
 8011240:	627a      	str	r2, [r7, #36]	@ 0x24
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 8011246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011248:	17da      	asrs	r2, r3, #31
 801124a:	613b      	str	r3, [r7, #16]
 801124c:	617a      	str	r2, [r7, #20]
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	17da      	asrs	r2, r3, #31
 8011252:	60bb      	str	r3, [r7, #8]
 8011254:	60fa      	str	r2, [r7, #12]
 8011256:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801125a:	462b      	mov	r3, r5
 801125c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8011260:	4652      	mov	r2, sl
 8011262:	fb02 f203 	mul.w	r2, r2, r3
 8011266:	465b      	mov	r3, fp
 8011268:	4621      	mov	r1, r4
 801126a:	fb01 f303 	mul.w	r3, r1, r3
 801126e:	4413      	add	r3, r2
 8011270:	4622      	mov	r2, r4
 8011272:	4651      	mov	r1, sl
 8011274:	fba2 8901 	umull	r8, r9, r2, r1
 8011278:	444b      	add	r3, r9
 801127a:	4699      	mov	r9, r3
 801127c:	f04f 0200 	mov.w	r2, #0
 8011280:	f04f 0300 	mov.w	r3, #0
 8011284:	464a      	mov	r2, r9
 8011286:	ea4f 73e9 	mov.w	r3, r9, asr #31
 801128a:	4613      	mov	r3, r2
 801128c:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in << kShift;
 801128e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011294:	fa02 f303 	lsl.w	r3, r2, r3
 8011298:	633b      	str	r3, [r7, #48]	@ 0x30
      if (in != (out >> kShift))
 801129a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801129e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112a0:	fa42 f303 	asr.w	r3, r2, r3
 80112a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d005      	beq.n	80112b6 <arm_scale_q31+0xb0>
          out = 0x7FFFFFFF ^ (in >> 31);
 80112aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112ac:	17da      	asrs	r2, r3, #31
 80112ae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80112b2:	4053      	eors	r3, r2
 80112b4:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	1d1a      	adds	r2, r3, #4
 80112ba:	61ba      	str	r2, [r7, #24]
 80112bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112be:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80112c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c2:	3b01      	subs	r3, #1
 80112c4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 80112c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d1b7      	bne.n	801123c <arm_scale_q31+0x36>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 80112cc:	e034      	b.n	8011338 <arm_scale_q31+0x132>
      in = *pSrc++;
 80112ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d0:	1d1a      	adds	r2, r3, #4
 80112d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 80112d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112da:	17da      	asrs	r2, r3, #31
 80112dc:	469a      	mov	sl, r3
 80112de:	4693      	mov	fp, r2
 80112e0:	6a3b      	ldr	r3, [r7, #32]
 80112e2:	17da      	asrs	r2, r3, #31
 80112e4:	603b      	str	r3, [r7, #0]
 80112e6:	607a      	str	r2, [r7, #4]
 80112e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80112ec:	4603      	mov	r3, r0
 80112ee:	fb03 f20b 	mul.w	r2, r3, fp
 80112f2:	460b      	mov	r3, r1
 80112f4:	fb0a f303 	mul.w	r3, sl, r3
 80112f8:	4413      	add	r3, r2
 80112fa:	4602      	mov	r2, r0
 80112fc:	fbaa 4502 	umull	r4, r5, sl, r2
 8011300:	442b      	add	r3, r5
 8011302:	461d      	mov	r5, r3
 8011304:	f04f 0200 	mov.w	r2, #0
 8011308:	f04f 0300 	mov.w	r3, #0
 801130c:	002a      	movs	r2, r5
 801130e:	17eb      	asrs	r3, r5, #31
 8011310:	4613      	mov	r3, r2
 8011312:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in >> -kShift;
 8011314:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011318:	425b      	negs	r3, r3
 801131a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801131c:	fa42 f303 	asr.w	r3, r2, r3
 8011320:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	1d1a      	adds	r2, r3, #4
 8011326:	61ba      	str	r2, [r7, #24]
 8011328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801132a:	601a      	str	r2, [r3, #0]
      blkCnt--;
 801132c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801132e:	3b01      	subs	r3, #1
 8011330:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 8011332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011334:	2b00      	cmp	r3, #0
 8011336:	d1ca      	bne.n	80112ce <arm_scale_q31+0xc8>
}
 8011338:	bf00      	nop
 801133a:	373c      	adds	r7, #60	@ 0x3c
 801133c:	46bd      	mov	sp, r7
 801133e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011342:	4770      	bx	lr

08011344 <arm_shift_q15>:
ARM_DSP_ATTRIBUTE void arm_shift_q15(
  const q15_t * pSrc,
        int8_t shiftBits,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011344:	b480      	push	{r7}
 8011346:	b089      	sub	sp, #36	@ 0x24
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	607a      	str	r2, [r7, #4]
 801134e:	603b      	str	r3, [r7, #0]
 8011350:	460b      	mov	r3, r1
 8011352:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 8011354:	7afb      	ldrb	r3, [r7, #11]
 8011356:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801135a:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8011360:	7efb      	ldrb	r3, [r7, #27]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d12f      	bne.n	80113c6 <arm_shift_q15+0x82>
  {
    while (blkCnt > 0U)
 8011366:	e017      	b.n	8011398 <arm_shift_q15+0x54>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	1c9a      	adds	r2, r3, #2
 801136c:	60fa      	str	r2, [r7, #12]
 801136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011372:	461a      	mov	r2, r3
 8011374:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011378:	fa02 f303 	lsl.w	r3, r2, r3
 801137c:	617b      	str	r3, [r7, #20]
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	f303 030f 	ssat	r3, #16, r3
 8011384:	613b      	str	r3, [r7, #16]
 8011386:	6939      	ldr	r1, [r7, #16]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	1c9a      	adds	r2, r3, #2
 801138c:	607a      	str	r2, [r7, #4]
 801138e:	b20a      	sxth	r2, r1
 8011390:	801a      	strh	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	3b01      	subs	r3, #1
 8011396:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1e4      	bne.n	8011368 <arm_shift_q15+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 801139e:	e015      	b.n	80113cc <arm_shift_q15+0x88>
      *pDst++ = (*pSrc++ >> -shiftBits);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	1c9a      	adds	r2, r3, #2
 80113a4:	60fa      	str	r2, [r7, #12]
 80113a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113aa:	461a      	mov	r2, r3
 80113ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80113b0:	425b      	negs	r3, r3
 80113b2:	fa42 f103 	asr.w	r1, r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	1c9a      	adds	r2, r3, #2
 80113ba:	607a      	str	r2, [r7, #4]
 80113bc:	b20a      	sxth	r2, r1
 80113be:	801a      	strh	r2, [r3, #0]
      blkCnt--;
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	3b01      	subs	r3, #1
 80113c4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1e9      	bne.n	80113a0 <arm_shift_q15+0x5c>
}
 80113cc:	bf00      	nop
 80113ce:	3724      	adds	r7, #36	@ 0x24
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <arm_shift_q31>:
ARM_DSP_ATTRIBUTE void arm_shift_q31(
  const q31_t * pSrc,
        int8_t shiftBits,
        q31_t * pDst,
        uint32_t blockSize)
{
 80113d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80113dc:	b088      	sub	sp, #32
 80113de:	af00      	add	r7, sp, #0
 80113e0:	60f8      	str	r0, [r7, #12]
 80113e2:	607a      	str	r2, [r7, #4]
 80113e4:	603b      	str	r3, [r7, #0]
 80113e6:	460b      	mov	r3, r1
 80113e8:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 80113ea:	7afb      	ldrb	r3, [r7, #11]
 80113ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80113f0:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 80113f6:	7efb      	ldrb	r3, [r7, #27]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d14d      	bne.n	8011498 <arm_shift_q31+0xc0>
  {
    while (blkCnt > 0U)
 80113fc:	e038      	b.n	8011470 <arm_shift_q31+0x98>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	1d1a      	adds	r2, r3, #4
 8011402:	60fa      	str	r2, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	17da      	asrs	r2, r3, #31
 8011408:	4698      	mov	r8, r3
 801140a:	4691      	mov	r9, r2
 801140c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011410:	f1a3 0120 	sub.w	r1, r3, #32
 8011414:	f1c3 0220 	rsb	r2, r3, #32
 8011418:	fa09 f503 	lsl.w	r5, r9, r3
 801141c:	fa08 f101 	lsl.w	r1, r8, r1
 8011420:	430d      	orrs	r5, r1
 8011422:	fa28 f202 	lsr.w	r2, r8, r2
 8011426:	4315      	orrs	r5, r2
 8011428:	fa08 f403 	lsl.w	r4, r8, r3
 801142c:	687e      	ldr	r6, [r7, #4]
 801142e:	1d33      	adds	r3, r6, #4
 8011430:	607b      	str	r3, [r7, #4]
 8011432:	e9c7 4504 	strd	r4, r5, [r7, #16]
   * @brief Clips Q63 to Q31 values.
   */
  __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 8011436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801143a:	f04f 0200 	mov.w	r2, #0
 801143e:	f04f 0300 	mov.w	r3, #0
 8011442:	000a      	movs	r2, r1
 8011444:	17cb      	asrs	r3, r1, #31
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	17db      	asrs	r3, r3, #31
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 801144a:	429a      	cmp	r2, r3
 801144c:	d00b      	beq.n	8011466 <arm_shift_q31+0x8e>
 801144e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011452:	f04f 0200 	mov.w	r2, #0
 8011456:	f04f 0300 	mov.w	r3, #0
 801145a:	17ca      	asrs	r2, r1, #31
 801145c:	17cb      	asrs	r3, r1, #31
 801145e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011462:	4053      	eors	r3, r2
 8011464:	e000      	b.n	8011468 <arm_shift_q31+0x90>
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	6033      	str	r3, [r6, #0]

      /* Decrement loop counter */
      blkCnt--;
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	3b01      	subs	r3, #1
 801146e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d1c3      	bne.n	80113fe <arm_shift_q31+0x26>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8011476:	e012      	b.n	801149e <arm_shift_q31+0xc6>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	1d1a      	adds	r2, r3, #4
 801147c:	60fa      	str	r2, [r7, #12]
 801147e:	6819      	ldr	r1, [r3, #0]
 8011480:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011484:	425a      	negs	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	1d18      	adds	r0, r3, #4
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	fa41 f202 	asr.w	r2, r1, r2
 8011490:	601a      	str	r2, [r3, #0]
      blkCnt--;
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	3b01      	subs	r3, #1
 8011496:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d1ec      	bne.n	8011478 <arm_shift_q31+0xa0>
}
 801149e:	bf00      	nop
 80114a0:	3720      	adds	r7, #32
 80114a2:	46bd      	mov	sp, r7
 80114a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80114a8:	4770      	bx	lr

080114aa <arm_cmplx_mag_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t numSamples)
{
 80114aa:	b580      	push	{r7, lr}
 80114ac:	b08e      	sub	sp, #56	@ 0x38
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	60f8      	str	r0, [r7, #12]
 80114b2:	60b9      	str	r1, [r7, #8]
 80114b4:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80114ba:	e028      	b.n	801150e <arm_cmplx_mag_q15+0x64>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

#if defined (ARM_MATH_DSP)
    in = read_q15x2_ia (&pSrc);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3304      	adds	r3, #4
 80114c0:	60fb      	str	r3, [r7, #12]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3b04      	subs	r3, #4
 80114c6:	61fb      	str	r3, [r7, #28]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	617b      	str	r3, [r7, #20]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	633b      	str	r3, [r7, #48]	@ 0x30
    acc0 = __SMUAD(in, in);
 80114d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80114d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80114da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114de:	fb23 f302 	smuad	r3, r3, r2
 80114e2:	623b      	str	r3, [r7, #32]
  return(result);
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* store result in 2.14 format in destination buffer. */
    arm_sqrt_q31((uint32_t)acc0  >> 1 , &res);
 80114e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ea:	085b      	lsrs	r3, r3, #1
 80114ec:	461a      	mov	r2, r3
 80114ee:	f107 0318 	add.w	r3, r7, #24
 80114f2:	4619      	mov	r1, r3
 80114f4:	4610      	mov	r0, r2
 80114f6:	f000 f883 	bl	8011600 <arm_sqrt_q31>
    *pDst++ = res >> 16;
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	1419      	asrs	r1, r3, #16
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	1c9a      	adds	r2, r3, #2
 8011502:	60ba      	str	r2, [r7, #8]
 8011504:	b20a      	sxth	r2, r1
 8011506:	801a      	strh	r2, [r3, #0]
    *pDst++ = res >> 16;
 
#endif

    /* Decrement loop counter */
    blkCnt--;
 8011508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801150a:	3b01      	subs	r3, #1
 801150c:	637b      	str	r3, [r7, #52]	@ 0x34
  while (blkCnt > 0U)
 801150e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011510:	2b00      	cmp	r3, #0
 8011512:	d1d3      	bne.n	80114bc <arm_cmplx_mag_q15+0x12>
  }

}
 8011514:	bf00      	nop
 8011516:	bf00      	nop
 8011518:	3738      	adds	r7, #56	@ 0x38
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <arm_divide_q15>:

ARM_DSP_ATTRIBUTE arm_status arm_divide_q15(q15_t numerator,
  q15_t denominator,
  q15_t *quotient,
  int16_t *shift)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b088      	sub	sp, #32
 8011522:	af00      	add	r7, sp, #0
 8011524:	60ba      	str	r2, [r7, #8]
 8011526:	607b      	str	r3, [r7, #4]
 8011528:	4603      	mov	r3, r0
 801152a:	81fb      	strh	r3, [r7, #14]
 801152c:	460b      	mov	r3, r1
 801152e:	81bb      	strh	r3, [r7, #12]
  int16_t sign=0;
 8011530:	2300      	movs	r3, #0
 8011532:	837b      	strh	r3, [r7, #26]
  q31_t temp;
  int16_t shiftForNormalizing;

  *shift = 0;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	801a      	strh	r2, [r3, #0]

  sign = (numerator<0) ^ (denominator<0);
 801153a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801153e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011542:	4053      	eors	r3, r2
 8011544:	b21b      	sxth	r3, r3
 8011546:	b29b      	uxth	r3, r3
 8011548:	0bdb      	lsrs	r3, r3, #15
 801154a:	b2db      	uxtb	r3, r3
 801154c:	837b      	strh	r3, [r7, #26]

  if (denominator == 0)
 801154e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d10f      	bne.n	8011576 <arm_divide_q15+0x58>
  {
     if (sign)
 8011556:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d004      	beq.n	8011568 <arm_divide_q15+0x4a>
     {
        *quotient = -32768;
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011564:	801a      	strh	r2, [r3, #0]
 8011566:	e003      	b.n	8011570 <arm_divide_q15+0x52>
     }
     else
     {
        *quotient = 32767;
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801156e:	801a      	strh	r2, [r3, #0]
     }
     return(ARM_MATH_NANINF);
 8011570:	f06f 0303 	mvn.w	r3, #3
 8011574:	e03f      	b.n	80115f6 <arm_divide_q15+0xd8>
  }

  arm_abs_q15(&numerator,&numerator,1);
 8011576:	f107 010e 	add.w	r1, r7, #14
 801157a:	f107 030e 	add.w	r3, r7, #14
 801157e:	2201      	movs	r2, #1
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fd45 	bl	8011010 <arm_abs_q15>
  arm_abs_q15(&denominator,&denominator,1);
 8011586:	f107 010c 	add.w	r1, r7, #12
 801158a:	f107 030c 	add.w	r3, r7, #12
 801158e:	2201      	movs	r2, #1
 8011590:	4618      	mov	r0, r3
 8011592:	f7ff fd3d 	bl	8011010 <arm_abs_q15>
  
  temp = ((q31_t)numerator << 15) / ((q31_t)denominator);
 8011596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801159a:	03db      	lsls	r3, r3, #15
 801159c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80115a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80115a4:	61fb      	str	r3, [r7, #28]

  shiftForNormalizing= 17 - __CLZ(temp);
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d101      	bne.n	80115b4 <arm_divide_q15+0x96>
    return 32U;
 80115b0:	2320      	movs	r3, #32
 80115b2:	e003      	b.n	80115bc <arm_divide_q15+0x9e>
  return __builtin_clz(value);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	fab3 f383 	clz	r3, r3
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	f1c3 0311 	rsb	r3, r3, #17
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	833b      	strh	r3, [r7, #24]
  if (shiftForNormalizing > 0)
 80115c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	dd08      	ble.n	80115de <arm_divide_q15+0xc0>
  {
     *shift = shiftForNormalizing;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	8b3a      	ldrh	r2, [r7, #24]
 80115d0:	801a      	strh	r2, [r3, #0]
     temp = temp >> shiftForNormalizing;
 80115d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80115d6:	69fa      	ldr	r2, [r7, #28]
 80115d8:	fa42 f303 	asr.w	r3, r2, r3
 80115dc:	61fb      	str	r3, [r7, #28]
  }

  if (sign)
 80115de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d002      	beq.n	80115ec <arm_divide_q15+0xce>
  {
    temp = -temp;
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	425b      	negs	r3, r3
 80115ea:	61fb      	str	r3, [r7, #28]
  }

  *quotient=temp;
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	b21a      	sxth	r2, r3
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	801a      	strh	r2, [r3, #0]

  return(ARM_MATH_SUCCESS);
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3720      	adds	r7, #32
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
	...

08011600 <arm_sqrt_q31>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut)
{
 8011600:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011604:	b0bf      	sub	sp, #252	@ 0xfc
 8011606:	af00      	add	r7, sp, #0
 8011608:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 801160c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  q31_t number, var1, signBits1 ,temp;
 
  number = in;
 8011610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 8011618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801161c:	2b00      	cmp	r3, #0
 801161e:	f340 8270 	ble.w	8011b02 <arm_sqrt_q31+0x502>
  {
    signBits1 = __CLZ(number) - 1;
 8011622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (value == 0U)
 801162a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801162e:	2b00      	cmp	r3, #0
 8011630:	d101      	bne.n	8011636 <arm_sqrt_q31+0x36>
    return 32U;
 8011632:	2320      	movs	r3, #32
 8011634:	e004      	b.n	8011640 <arm_sqrt_q31+0x40>
  return __builtin_clz(value);
 8011636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801163a:	fab3 f383 	clz	r3, r3
 801163e:	b2db      	uxtb	r3, r3
 8011640:	3b01      	subs	r3, #1
 8011642:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 8011646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801164a:	f003 0301 	and.w	r3, r3, #1
 801164e:	2b00      	cmp	r3, #0
 8011650:	d108      	bne.n	8011664 <arm_sqrt_q31+0x64>
    {
      number = number << signBits1;
 8011652:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8011656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801165a:	fa02 f303 	lsl.w	r3, r2, r3
 801165e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011662:	e007      	b.n	8011674 <arm_sqrt_q31+0x74>
    }
    else
    {
      number = number << (signBits1 - 1);
 8011664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011668:	1e5a      	subs	r2, r3, #1
 801166a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801166e:	4093      	lsls	r3, r2
 8011670:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    }

    /* Start value for 1/sqrt(x) for the Newton iteration */
    var1 = sqrt_initial_lut_q31[(number>> 26) - (Q28QUARTER >> 26)];
 8011674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011678:	169b      	asrs	r3, r3, #26
 801167a:	f1a3 0208 	sub.w	r2, r3, #8
 801167e:	4bf0      	ldr	r3, [pc, #960]	@ (8011a40 <arm_sqrt_q31+0x440>)
 8011680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011684:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 0.5 var1 * (3 - number * var1 * var1) */

    /* 1st iteration */

    temp = ((q63_t) var1 * var1) >> 28;
 8011688:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801168c:	17da      	asrs	r2, r3, #31
 801168e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011692:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011696:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801169a:	17da      	asrs	r2, r3, #31
 801169c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80116a0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80116a4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80116a8:	460b      	mov	r3, r1
 80116aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80116ae:	fb02 f203 	mul.w	r2, r2, r3
 80116b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80116b6:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0
 80116ba:	4601      	mov	r1, r0
 80116bc:	fb01 f303 	mul.w	r3, r1, r3
 80116c0:	4413      	add	r3, r2
 80116c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80116c6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80116ca:	fba2 4501 	umull	r4, r5, r2, r1
 80116ce:	442b      	add	r3, r5
 80116d0:	461d      	mov	r5, r3
 80116d2:	f04f 0200 	mov.w	r2, #0
 80116d6:	f04f 0300 	mov.w	r3, #0
 80116da:	0f22      	lsrs	r2, r4, #28
 80116dc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80116e0:	172b      	asrs	r3, r5, #28
 80116e2:	4613      	mov	r3, r2
 80116e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 80116e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80116ec:	17da      	asrs	r2, r3, #31
 80116ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80116f2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80116f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80116fa:	17da      	asrs	r2, r3, #31
 80116fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011700:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011704:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011708:	460b      	mov	r3, r1
 801170a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 801170e:	4622      	mov	r2, r4
 8011710:	fb02 f203 	mul.w	r2, r2, r3
 8011714:	e9c7 4530 	strd	r4, r5, [r7, #192]	@ 0xc0
 8011718:	462b      	mov	r3, r5
 801171a:	4604      	mov	r4, r0
 801171c:	460d      	mov	r5, r1
 801171e:	4621      	mov	r1, r4
 8011720:	fb01 f303 	mul.w	r3, r1, r3
 8011724:	4413      	add	r3, r2
 8011726:	4622      	mov	r2, r4
 8011728:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 801172c:	fba2 8901 	umull	r8, r9, r2, r1
 8011730:	444b      	add	r3, r9
 8011732:	4699      	mov	r9, r3
 8011734:	f04f 0200 	mov.w	r2, #0
 8011738:	f04f 0300 	mov.w	r3, #0
 801173c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8011740:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8011744:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8011748:	4613      	mov	r3, r2
 801174a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 801174e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011752:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8011756:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 801175a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801175e:	17da      	asrs	r2, r3, #31
 8011760:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011762:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011764:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011768:	17da      	asrs	r2, r3, #31
 801176a:	673b      	str	r3, [r7, #112]	@ 0x70
 801176c:	677a      	str	r2, [r7, #116]	@ 0x74
 801176e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8011772:	462b      	mov	r3, r5
 8011774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011778:	4642      	mov	r2, r8
 801177a:	fb02 f203 	mul.w	r2, r2, r3
 801177e:	464b      	mov	r3, r9
 8011780:	4621      	mov	r1, r4
 8011782:	fb01 f303 	mul.w	r3, r1, r3
 8011786:	4413      	add	r3, r2
 8011788:	4622      	mov	r2, r4
 801178a:	4641      	mov	r1, r8
 801178c:	fba2 ab01 	umull	sl, fp, r2, r1
 8011790:	445b      	add	r3, fp
 8011792:	469b      	mov	fp, r3
 8011794:	f04f 0200 	mov.w	r2, #0
 8011798:	f04f 0300 	mov.w	r3, #0
 801179c:	ea4f 725a 	mov.w	r2, sl, lsr #29
 80117a0:	ea42 02cb 	orr.w	r2, r2, fp, lsl #3
 80117a4:	ea4f 736b 	mov.w	r3, fp, asr #29
 80117a8:	4613      	mov	r3, r2
 80117aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    
    /* 2nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 80117ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80117b2:	17da      	asrs	r2, r3, #31
 80117b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80117b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80117b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80117bc:	17da      	asrs	r2, r3, #31
 80117be:	663b      	str	r3, [r7, #96]	@ 0x60
 80117c0:	667a      	str	r2, [r7, #100]	@ 0x64
 80117c2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80117c6:	462b      	mov	r3, r5
 80117c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80117cc:	4642      	mov	r2, r8
 80117ce:	fb02 f203 	mul.w	r2, r2, r3
 80117d2:	464b      	mov	r3, r9
 80117d4:	4621      	mov	r1, r4
 80117d6:	fb01 f303 	mul.w	r3, r1, r3
 80117da:	4413      	add	r3, r2
 80117dc:	4622      	mov	r2, r4
 80117de:	4641      	mov	r1, r8
 80117e0:	fba2 1201 	umull	r1, r2, r2, r1
 80117e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80117e8:	460a      	mov	r2, r1
 80117ea:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80117ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80117f2:	4413      	add	r3, r2
 80117f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80117f8:	f04f 0200 	mov.w	r2, #0
 80117fc:	f04f 0300 	mov.w	r3, #0
 8011800:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8011804:	4621      	mov	r1, r4
 8011806:	0f0a      	lsrs	r2, r1, #28
 8011808:	4629      	mov	r1, r5
 801180a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801180e:	4629      	mov	r1, r5
 8011810:	170b      	asrs	r3, r1, #28
 8011812:	4613      	mov	r3, r2
 8011814:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8011818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801181c:	17da      	asrs	r2, r3, #31
 801181e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011820:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011826:	17da      	asrs	r2, r3, #31
 8011828:	653b      	str	r3, [r7, #80]	@ 0x50
 801182a:	657a      	str	r2, [r7, #84]	@ 0x54
 801182c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8011830:	462b      	mov	r3, r5
 8011832:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8011836:	4642      	mov	r2, r8
 8011838:	fb02 f203 	mul.w	r2, r2, r3
 801183c:	464b      	mov	r3, r9
 801183e:	4621      	mov	r1, r4
 8011840:	fb01 f303 	mul.w	r3, r1, r3
 8011844:	4413      	add	r3, r2
 8011846:	4622      	mov	r2, r4
 8011848:	4641      	mov	r1, r8
 801184a:	fba2 1201 	umull	r1, r2, r2, r1
 801184e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011852:	460a      	mov	r2, r1
 8011854:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8011858:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801185c:	4413      	add	r3, r2
 801185e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011862:	f04f 0200 	mov.w	r2, #0
 8011866:	f04f 0300 	mov.w	r3, #0
 801186a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 801186e:	4621      	mov	r1, r4
 8011870:	0fca      	lsrs	r2, r1, #31
 8011872:	4629      	mov	r1, r5
 8011874:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011878:	4629      	mov	r1, r5
 801187a:	17cb      	asrs	r3, r1, #31
 801187c:	4613      	mov	r3, r2
 801187e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011882:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011886:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 801188a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 801188e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011892:	17da      	asrs	r2, r3, #31
 8011894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011896:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8011898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801189c:	17da      	asrs	r2, r3, #31
 801189e:	643b      	str	r3, [r7, #64]	@ 0x40
 80118a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80118a2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80118a6:	462b      	mov	r3, r5
 80118a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80118ac:	4642      	mov	r2, r8
 80118ae:	fb02 f203 	mul.w	r2, r2, r3
 80118b2:	464b      	mov	r3, r9
 80118b4:	4621      	mov	r1, r4
 80118b6:	fb01 f303 	mul.w	r3, r1, r3
 80118ba:	4413      	add	r3, r2
 80118bc:	4622      	mov	r2, r4
 80118be:	4641      	mov	r1, r8
 80118c0:	fba2 1201 	umull	r1, r2, r2, r1
 80118c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80118c8:	460a      	mov	r2, r1
 80118ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80118ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80118d2:	4413      	add	r3, r2
 80118d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80118d8:	f04f 0200 	mov.w	r2, #0
 80118dc:	f04f 0300 	mov.w	r3, #0
 80118e0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 80118e4:	4621      	mov	r1, r4
 80118e6:	0f4a      	lsrs	r2, r1, #29
 80118e8:	4629      	mov	r1, r5
 80118ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80118ee:	4629      	mov	r1, r5
 80118f0:	174b      	asrs	r3, r1, #29
 80118f2:	4613      	mov	r3, r2
 80118f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 3rd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 80118f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80118fc:	17da      	asrs	r2, r3, #31
 80118fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011902:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011906:	17da      	asrs	r2, r3, #31
 8011908:	633b      	str	r3, [r7, #48]	@ 0x30
 801190a:	637a      	str	r2, [r7, #52]	@ 0x34
 801190c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011910:	462b      	mov	r3, r5
 8011912:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8011916:	4642      	mov	r2, r8
 8011918:	fb02 f203 	mul.w	r2, r2, r3
 801191c:	464b      	mov	r3, r9
 801191e:	4621      	mov	r1, r4
 8011920:	fb01 f303 	mul.w	r3, r1, r3
 8011924:	4413      	add	r3, r2
 8011926:	4622      	mov	r2, r4
 8011928:	4641      	mov	r1, r8
 801192a:	fba2 1201 	umull	r1, r2, r2, r1
 801192e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011932:	460a      	mov	r2, r1
 8011934:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011938:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801193c:	4413      	add	r3, r2
 801193e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011942:	f04f 0200 	mov.w	r2, #0
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 801194e:	4621      	mov	r1, r4
 8011950:	0f0a      	lsrs	r2, r1, #28
 8011952:	4629      	mov	r1, r5
 8011954:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011958:	4629      	mov	r1, r5
 801195a:	170b      	asrs	r3, r1, #28
 801195c:	4613      	mov	r3, r2
 801195e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8011962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011966:	17da      	asrs	r2, r3, #31
 8011968:	62bb      	str	r3, [r7, #40]	@ 0x28
 801196a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801196c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011970:	17da      	asrs	r2, r3, #31
 8011972:	623b      	str	r3, [r7, #32]
 8011974:	627a      	str	r2, [r7, #36]	@ 0x24
 8011976:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801197a:	462b      	mov	r3, r5
 801197c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011980:	4642      	mov	r2, r8
 8011982:	fb02 f203 	mul.w	r2, r2, r3
 8011986:	464b      	mov	r3, r9
 8011988:	4621      	mov	r1, r4
 801198a:	fb01 f303 	mul.w	r3, r1, r3
 801198e:	4413      	add	r3, r2
 8011990:	4622      	mov	r2, r4
 8011992:	4641      	mov	r1, r8
 8011994:	fba2 1201 	umull	r1, r2, r2, r1
 8011998:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 801199c:	460a      	mov	r2, r1
 801199e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80119a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80119a6:	4413      	add	r3, r2
 80119a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119ac:	f04f 0200 	mov.w	r2, #0
 80119b0:	f04f 0300 	mov.w	r3, #0
 80119b4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80119b8:	4621      	mov	r1, r4
 80119ba:	0fca      	lsrs	r2, r1, #31
 80119bc:	4629      	mov	r1, r5
 80119be:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80119c2:	4629      	mov	r1, r5
 80119c4:	17cb      	asrs	r3, r1, #31
 80119c6:	4613      	mov	r3, r2
 80119c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 80119cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80119d0:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 80119d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 80119d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80119dc:	17da      	asrs	r2, r3, #31
 80119de:	61bb      	str	r3, [r7, #24]
 80119e0:	61fa      	str	r2, [r7, #28]
 80119e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80119e6:	17da      	asrs	r2, r3, #31
 80119e8:	613b      	str	r3, [r7, #16]
 80119ea:	617a      	str	r2, [r7, #20]
 80119ec:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80119f0:	462b      	mov	r3, r5
 80119f2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80119f6:	4642      	mov	r2, r8
 80119f8:	fb02 f203 	mul.w	r2, r2, r3
 80119fc:	464b      	mov	r3, r9
 80119fe:	4621      	mov	r1, r4
 8011a00:	fb01 f303 	mul.w	r3, r1, r3
 8011a04:	4413      	add	r3, r2
 8011a06:	4622      	mov	r2, r4
 8011a08:	4641      	mov	r1, r8
 8011a0a:	fba2 1201 	umull	r1, r2, r2, r1
 8011a0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011a12:	460a      	mov	r2, r1
 8011a14:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011a18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011a1c:	4413      	add	r3, r2
 8011a1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a22:	f04f 0200 	mov.w	r2, #0
 8011a26:	f04f 0300 	mov.w	r3, #0
 8011a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011a2e:	4621      	mov	r1, r4
 8011a30:	0f4a      	lsrs	r2, r1, #29
 8011a32:	4629      	mov	r1, r5
 8011a34:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8011a38:	4629      	mov	r1, r5
 8011a3a:	174b      	asrs	r3, r1, #29
 8011a3c:	e002      	b.n	8011a44 <arm_sqrt_q31+0x444>
 8011a3e:	bf00      	nop
 8011a40:	0803150c 	.word	0x0803150c
 8011a44:	4613      	mov	r3, r2
 8011a46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Multiply the inverse square root with the original value */
    var1 = ((q31_t) (((q63_t) number * var1) >> 28));
 8011a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a4e:	17da      	asrs	r2, r3, #31
 8011a50:	60bb      	str	r3, [r7, #8]
 8011a52:	60fa      	str	r2, [r7, #12]
 8011a54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011a58:	17da      	asrs	r2, r3, #31
 8011a5a:	603b      	str	r3, [r7, #0]
 8011a5c:	607a      	str	r2, [r7, #4]
 8011a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011a62:	462b      	mov	r3, r5
 8011a64:	e9d7 8900 	ldrd	r8, r9, [r7]
 8011a68:	4642      	mov	r2, r8
 8011a6a:	fb02 f203 	mul.w	r2, r2, r3
 8011a6e:	464b      	mov	r3, r9
 8011a70:	4621      	mov	r1, r4
 8011a72:	fb01 f303 	mul.w	r3, r1, r3
 8011a76:	4413      	add	r3, r2
 8011a78:	4622      	mov	r2, r4
 8011a7a:	4641      	mov	r1, r8
 8011a7c:	fba2 1201 	umull	r1, r2, r2, r1
 8011a80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011a84:	460a      	mov	r2, r1
 8011a86:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8011a8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011a8e:	4413      	add	r3, r2
 8011a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a94:	f04f 0200 	mov.w	r2, #0
 8011a98:	f04f 0300 	mov.w	r3, #0
 8011a9c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8011aa0:	4621      	mov	r1, r4
 8011aa2:	0f0a      	lsrs	r2, r1, #28
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011aaa:	4629      	mov	r1, r5
 8011aac:	170b      	asrs	r3, r1, #28
 8011aae:	4613      	mov	r3, r2
 8011ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 8011ab4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d10c      	bne.n	8011ada <arm_sqrt_q31+0x4da>
    {
      var1 = var1 >> (signBits1 / 2);
 8011ac0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	da00      	bge.n	8011aca <arm_sqrt_q31+0x4ca>
 8011ac8:	3301      	adds	r3, #1
 8011aca:	105b      	asrs	r3, r3, #1
 8011acc:	461a      	mov	r2, r3
 8011ace:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011ad2:	4113      	asrs	r3, r2
 8011ad4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011ad8:	e00c      	b.n	8011af4 <arm_sqrt_q31+0x4f4>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 8011ada:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	da00      	bge.n	8011ae6 <arm_sqrt_q31+0x4e6>
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	105b      	asrs	r3, r3, #1
 8011ae8:	461a      	mov	r2, r3
 8011aea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011aee:	4113      	asrs	r3, r2
 8011af0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }
    *pOut = var1;
 8011af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011af8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8011afc:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 8011afe:	2300      	movs	r3, #0
 8011b00:	e00b      	b.n	8011b1a <arm_sqrt_q31+0x51a>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 8011b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011b06:	2200      	movs	r2, #0
 8011b08:	601a      	str	r2, [r3, #0]

    if (number==0)
 8011b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d101      	bne.n	8011b16 <arm_sqrt_q31+0x516>
    {
       return (ARM_MATH_SUCCESS);
 8011b12:	2300      	movs	r3, #0
 8011b14:	e001      	b.n	8011b1a <arm_sqrt_q31+0x51a>
    }
    else
    {
       return (ARM_MATH_ARGUMENT_ERROR);
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	37fc      	adds	r7, #252	@ 0xfc
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop

08011b28 <arm_scalar_log_q31>:
/* 1.0 / Log2[Exp[1]] in Q31 */
#define LOG_Q31_INVLOG2EXP 0x58b90bfbuL

/* Clay Turner algorithm */
static uint32_t arm_scalar_log_q31(uint32_t src)
{
 8011b28:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011b2c:	b08d      	sub	sp, #52	@ 0x34
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	60f8      	str	r0, [r7, #12]
 8011b32:	68f9      	ldr	r1, [r7, #12]
 8011b34:	6139      	str	r1, [r7, #16]
  if (value == 0U)
 8011b36:	6939      	ldr	r1, [r7, #16]
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d101      	bne.n	8011b40 <arm_scalar_log_q31+0x18>
    return 32U;
 8011b3c:	2120      	movs	r1, #32
 8011b3e:	e003      	b.n	8011b48 <arm_scalar_log_q31+0x20>
  return __builtin_clz(value);
 8011b40:	6939      	ldr	r1, [r7, #16]
 8011b42:	fab1 f181 	clz	r1, r1
 8011b46:	b2c9      	uxtb	r1, r1
   int32_t i;

   int32_t c = __CLZ(src);
 8011b48:	61f9      	str	r1, [r7, #28]
   int32_t normalization=0;
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	61b9      	str	r1, [r7, #24]

   /* 0.5 in q26 */
   uint32_t inc = LOQ_Q31_Q32_HALF >> (LOG_Q31_INTEGER_PART + 1);
 8011b4e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8011b52:	62b9      	str	r1, [r7, #40]	@ 0x28

   /* Will compute y = log2(x) for 1 <= x < 2.0 */
   uint32_t x;

   /* q26 */
   uint32_t y=0;
 8011b54:	2100      	movs	r1, #0
 8011b56:	6239      	str	r1, [r7, #32]
   /* q26 */
   int32_t tmp;


   /* Normalize and convert to q30 format */
   x = src;
 8011b58:	68f9      	ldr	r1, [r7, #12]
 8011b5a:	6279      	str	r1, [r7, #36]	@ 0x24
   if ((c-1) < 0)
 8011b5c:	69f9      	ldr	r1, [r7, #28]
 8011b5e:	2900      	cmp	r1, #0
 8011b60:	dc07      	bgt.n	8011b72 <arm_scalar_log_q31+0x4a>
   {
     x = x >> (1-c);
 8011b62:	69f9      	ldr	r1, [r7, #28]
 8011b64:	f1c1 0101 	rsb	r1, r1, #1
 8011b68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b6a:	fa20 f101 	lsr.w	r1, r0, r1
 8011b6e:	6279      	str	r1, [r7, #36]	@ 0x24
 8011b70:	e005      	b.n	8011b7e <arm_scalar_log_q31+0x56>
   }
   else
   {
     x = x << (c-1);
 8011b72:	69f9      	ldr	r1, [r7, #28]
 8011b74:	3901      	subs	r1, #1
 8011b76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b78:	fa00 f101 	lsl.w	r1, r0, r1
 8011b7c:	6279      	str	r1, [r7, #36]	@ 0x24
   }
   normalization = c;
 8011b7e:	69f9      	ldr	r1, [r7, #28]
 8011b80:	61b9      	str	r1, [r7, #24]
   /* Compute the Log2. Result is in q26
      because we know 0 <= y < 1.0 but
      do not want to use q32 to allow
      following computation with less instructions.
   */
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011b82:	2100      	movs	r1, #0
 8011b84:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011b86:	e02d      	b.n	8011be4 <arm_scalar_log_q31+0xbc>
   {
      x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 8011b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	468a      	mov	sl, r1
 8011b8e:	4683      	mov	fp, r0
 8011b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011b92:	2000      	movs	r0, #0
 8011b94:	6039      	str	r1, [r7, #0]
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	fb01 f00b 	mul.w	r0, r1, fp
 8011b9e:	6879      	ldr	r1, [r7, #4]
 8011ba0:	fb0a f101 	mul.w	r1, sl, r1
 8011ba4:	4401      	add	r1, r0
 8011ba6:	6838      	ldr	r0, [r7, #0]
 8011ba8:	fbaa 4500 	umull	r4, r5, sl, r0
 8011bac:	4429      	add	r1, r5
 8011bae:	460d      	mov	r5, r1
 8011bb0:	f04f 0000 	mov.w	r0, #0
 8011bb4:	f04f 0100 	mov.w	r1, #0
 8011bb8:	0fa0      	lsrs	r0, r4, #30
 8011bba:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
 8011bbe:	17a9      	asrs	r1, r5, #30
 8011bc0:	4601      	mov	r1, r0
 8011bc2:	6279      	str	r1, [r7, #36]	@ 0x24

      if (x >= LOQ_Q31_THRESHOLD)
 8011bc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bc6:	2900      	cmp	r1, #0
 8011bc8:	da06      	bge.n	8011bd8 <arm_scalar_log_q31+0xb0>
      {
         y += inc ;
 8011bca:	6a38      	ldr	r0, [r7, #32]
 8011bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bce:	4401      	add	r1, r0
 8011bd0:	6239      	str	r1, [r7, #32]
         x = x >> 1;
 8011bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bd4:	0849      	lsrs	r1, r1, #1
 8011bd6:	6279      	str	r1, [r7, #36]	@ 0x24
      }
      inc = inc >> 1;
 8011bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bda:	0849      	lsrs	r1, r1, #1
 8011bdc:	62b9      	str	r1, [r7, #40]	@ 0x28
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011be0:	3101      	adds	r1, #1
 8011be2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011be6:	291e      	cmp	r1, #30
 8011be8:	ddce      	ble.n	8011b88 <arm_scalar_log_q31+0x60>
      We compute (y - normalisation) * (1 / Log2[e]).

   */

   /* q26 */
   tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 8011bea:	6a38      	ldr	r0, [r7, #32]
 8011bec:	69b9      	ldr	r1, [r7, #24]
 8011bee:	0689      	lsls	r1, r1, #26
 8011bf0:	1a41      	subs	r1, r0, r1
 8011bf2:	6179      	str	r1, [r7, #20]


   /* q5.26 */
   y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 8011bf4:	6979      	ldr	r1, [r7, #20]
 8011bf6:	17c8      	asrs	r0, r1, #31
 8011bf8:	4688      	mov	r8, r1
 8011bfa:	4681      	mov	r9, r0
 8011bfc:	490e      	ldr	r1, [pc, #56]	@ (8011c38 <arm_scalar_log_q31+0x110>)
 8011bfe:	fb01 f009 	mul.w	r0, r1, r9
 8011c02:	2100      	movs	r1, #0
 8011c04:	fb01 f108 	mul.w	r1, r1, r8
 8011c08:	4401      	add	r1, r0
 8011c0a:	480b      	ldr	r0, [pc, #44]	@ (8011c38 <arm_scalar_log_q31+0x110>)
 8011c0c:	fba8 2300 	umull	r2, r3, r8, r0
 8011c10:	4419      	add	r1, r3
 8011c12:	460b      	mov	r3, r1
 8011c14:	f04f 0000 	mov.w	r0, #0
 8011c18:	f04f 0100 	mov.w	r1, #0
 8011c1c:	0fd0      	lsrs	r0, r2, #31
 8011c1e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011c22:	17d9      	asrs	r1, r3, #31
 8011c24:	4603      	mov	r3, r0
 8011c26:	623b      	str	r3, [r7, #32]



   return(y);
 8011c28:	6a3b      	ldr	r3, [r7, #32]

}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3734      	adds	r7, #52	@ 0x34
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	58b90bfb 	.word	0x58b90bfb

08011c3c <arm_vlog_q31>:
 */
ARM_DSP_ATTRIBUTE void arm_vlog_q31(
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b086      	sub	sp, #24
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
      blkCnt--;
  }

  blkCnt = blockSize & 3;
  #else
  blkCnt = blockSize;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	617b      	str	r3, [r7, #20]
  #endif

  while (blkCnt > 0U)
 8011c4c:	e00f      	b.n	8011c6e <arm_vlog_q31+0x32>
  {
     *pDst++=arm_scalar_log_q31(*pSrc++);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	1d1a      	adds	r2, r3, #4
 8011c52:	60fa      	str	r2, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff ff66 	bl	8011b28 <arm_scalar_log_q31>
 8011c5c:	4601      	mov	r1, r0
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	1d1a      	adds	r2, r3, #4
 8011c62:	60ba      	str	r2, [r7, #8]
 8011c64:	460a      	mov	r2, r1
 8011c66:	601a      	str	r2, [r3, #0]

     blkCnt--;
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d1ec      	bne.n	8011c4e <arm_vlog_q31+0x12>
  }

}
 8011c74:	bf00      	nop
 8011c76:	bf00      	nop
 8011c78:	3718      	adds	r7, #24
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <arm_mat_vec_mult_q15>:
    }
}

#else
ARM_DSP_ATTRIBUTE void arm_mat_vec_mult_q15(const arm_matrix_instance_q15 *pSrcMat, const q15_t *pVec, q15_t *pDst)
{
 8011c7e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011c82:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c8c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011c90:	6018      	str	r0, [r3, #0]
 8011c92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c96:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011c9a:	6019      	str	r1, [r3, #0]
 8011c9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ca0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011ca4:	601a      	str	r2, [r3, #0]
    uint32_t numRows = pSrcMat->numRows;
 8011ca6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011caa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    uint32_t numCols = pSrcMat->numCols;
 8011cb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	885b      	ldrh	r3, [r3, #2]
 8011cc2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    const q15_t *pSrcA = pSrcMat->pData;
 8011cc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    uint16_t i, row, colCnt; /* loop counters */
    q31_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 8011cd6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8011cda:	089b      	lsrs	r3, r3, #2
 8011cdc:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    i = 0u;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    px = pDst;
 8011ce6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    /* The following loop performs the dot-product of each row in pSrcA with the vector */
    /* row loop */
    while (row > 0) {
 8011cf4:	e34b      	b.n	801238e <arm_mat_vec_mult_q15+0x710>
        /* Initialize accumulators */
        q63_t sum1 = 0;
 8011cf6:	f04f 0200 	mov.w	r2, #0
 8011cfa:	f04f 0300 	mov.w	r3, #0
 8011cfe:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
        q63_t sum2 = 0;
 8011d02:	f04f 0200 	mov.w	r2, #0
 8011d06:	f04f 0300 	mov.w	r3, #0
 8011d0a:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
        q63_t sum3 = 0;
 8011d0e:	f04f 0200 	mov.w	r2, #0
 8011d12:	f04f 0300 	mov.w	r3, #0
 8011d16:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
        q63_t sum4 = 0;
 8011d1a:	f04f 0200 	mov.w	r2, #0
 8011d1e:	f04f 0300 	mov.w	r3, #0
 8011d22:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

        /* For every row wise process, the pInVec pointer is set
         ** to the starting address of the vector */
        pInVec = pVec;
 8011d26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d2a:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8011d2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d32:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	6013      	str	r3, [r2, #0]

        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols >> 1;
 8011d3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011d3e:	085b      	lsrs	r3, r3, #1
 8011d40:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
 8011d44:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8011d48:	005a      	lsls	r2, r3, #1
 8011d4a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8011d4e:	441a      	add	r2, r3
 8011d50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011d58:	601a      	str	r2, [r3, #0]
        pInA2 = pInA1 + numCols;
 8011d5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011d68:	005b      	lsls	r3, r3, #1
 8011d6a:	441a      	add	r2, r3
 8011d6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011d74:	601a      	str	r2, [r3, #0]
        pInA3 = pInA2 + numCols;
 8011d76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011d84:	005b      	lsls	r3, r3, #1
 8011d86:	441a      	add	r2, r3
 8011d88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d8c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011d90:	601a      	str	r2, [r3, #0]
        pInA4 = pInA3 + numCols;
 8011d92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	441a      	add	r2, r3
 8011da4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011da8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011dac:	601a      	str	r2, [r3, #0]

        // Main loop: matrix-vector multiplication
        while (colCnt > 0u) {
 8011dae:	e16b      	b.n	8012088 <arm_mat_vec_mult_q15+0x40a>
            // Read 2 values from vector
            vecData = read_q15x2_ia (&pInVec);
 8011db0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011db4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	1d1a      	adds	r2, r3, #4
 8011dbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011dc4:	601a      	str	r2, [r3, #0]
 8011dc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	3b04      	subs	r3, #4
 8011dd2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  memcpy (&val, pQ15, 4);
 8011dd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011de2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011de6:	601a      	str	r2, [r3, #0]
  return (val);
 8011de8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

            // Read 8 values from the matrix - 2 values from each of 4 rows, and do multiply accumulate
            matData =  read_q15x2_ia (&pInA1);
 8011df6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	1d1a      	adds	r2, r3, #4
 8011e02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011e0a:	601a      	str	r2, [r3, #0]
 8011e0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	3b04      	subs	r3, #4
 8011e18:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  memcpy (&val, pQ15, 4);
 8011e1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	461a      	mov	r2, r3
 8011e24:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e2c:	601a      	str	r2, [r3, #0]
  return (val);
 8011e2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum1 = __SMLALD(matData, vecData, sum1);
 8011e3c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011e40:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011e44:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8011e48:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
 8011e4c:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8011e50:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
  llr.w64 = acc;
 8011e54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8011e58:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011e5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e60:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011e64:	6819      	ldr	r1, [r3, #0]
 8011e66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011e6e:	685a      	ldr	r2, [r3, #4]
 8011e70:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8011e74:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8011e78:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011e7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e80:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011e84:	6019      	str	r1, [r3, #0]
 8011e86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011e8e:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011e90:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8011e94:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            matData = read_q15x2_ia (&pInA2);
 8011e98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	1d1a      	adds	r2, r3, #4
 8011ea4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ea8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011eac:	601a      	str	r2, [r3, #0]
 8011eae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011eb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	3b04      	subs	r3, #4
 8011eba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  memcpy (&val, pQ15, 4);
 8011ebe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011eca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8011ece:	601a      	str	r2, [r3, #0]
  return (val);
 8011ed0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ed4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum2 = __SMLALD(matData, vecData, sum2);
 8011ede:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011ee2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011ee6:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8011eea:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
 8011eee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 8011ef2:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
  llr.w64 = acc;
 8011ef6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8011efa:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011efe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f02:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f06:	6819      	ldr	r1, [r3, #0]
 8011f08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f10:	685a      	ldr	r2, [r3, #4]
 8011f12:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8011f16:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011f1a:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011f1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f22:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f26:	6019      	str	r1, [r3, #0]
 8011f28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f30:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011f32:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8011f36:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            matData = read_q15x2_ia (&pInA3);
 8011f3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	1d1a      	adds	r2, r3, #4
 8011f46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f54:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	3b04      	subs	r3, #4
 8011f5c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  memcpy (&val, pQ15, 4);
 8011f60:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	461a      	mov	r2, r3
 8011f68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f6c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011f70:	601a      	str	r2, [r3, #0]
  return (val);
 8011f72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum3 = __SMLALD(matData, vecData, sum3);
 8011f80:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011f84:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011f88:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8011f8c:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
 8011f90:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 8011f94:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
  llr.w64 = acc;
 8011f98:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8011f9c:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011fa0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fa4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fa8:	6819      	ldr	r1, [r3, #0]
 8011faa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fb2:	685a      	ldr	r2, [r3, #4]
 8011fb4:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8011fb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011fbc:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011fc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fc4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fc8:	6019      	str	r1, [r3, #0]
 8011fca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fce:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fd2:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011fd4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8011fd8:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            matData = read_q15x2_ia (&pInA4);
 8011fdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fe0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	1d1a      	adds	r2, r3, #4
 8011fe8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011ff0:	601a      	str	r2, [r3, #0]
 8011ff2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ff6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	3b04      	subs	r3, #4
 8011ffe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  memcpy (&val, pQ15, 4);
 8012002:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	461a      	mov	r2, r3
 801200a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801200e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8012012:	601a      	str	r2, [r3, #0]
  return (val);
 8012014:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012018:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum4 = __SMLALD(matData, vecData, sum4);
 8012022:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8012026:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801202a:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 801202e:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
 8012032:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 8012036:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
  llr.w64 = acc;
 801203a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 801203e:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012042:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012046:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801204a:	6819      	ldr	r1, [r3, #0]
 801204c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012050:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8012054:	685a      	ldr	r2, [r3, #4]
 8012056:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 801205a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 801205e:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8012062:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012066:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801206a:	6019      	str	r1, [r3, #0]
 801206c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012070:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8012074:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8012076:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 801207a:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

            // Decrement the loop counter
            colCnt--;
 801207e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8012082:	3b01      	subs	r3, #1
 8012084:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0u) {
 8012088:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801208c:	2b00      	cmp	r3, #0
 801208e:	f47f ae8f 	bne.w	8011db0 <arm_mat_vec_mult_q15+0x132>
        }

        /* process any remaining columns */
        colCnt = numCols & 1u;
 8012092:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012096:	b29b      	uxth	r3, r3
 8012098:	f003 0301 	and.w	r3, r3, #1
 801209c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        if (numCols & 1u) {
 80120a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80120a4:	f003 0301 	and.w	r3, r3, #1
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f000 80f1 	beq.w	8012290 <arm_mat_vec_mult_q15+0x612>
            vecData = *pInVec++;
 80120ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120b6:	6819      	ldr	r1, [r3, #0]
 80120b8:	1c8a      	adds	r2, r1, #2
 80120ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120c2:	601a      	str	r2, [r3, #0]
 80120c4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80120c8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            sum1 += (q63_t)*pInA1++ * vecData;
 80120cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80120d4:	6819      	ldr	r1, [r3, #0]
 80120d6:	1c8a      	adds	r2, r1, #2
 80120d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80120e0:	601a      	str	r2, [r3, #0]
 80120e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80120e6:	b21b      	sxth	r3, r3
 80120e8:	17da      	asrs	r2, r3, #31
 80120ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80120ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80120ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80120f2:	17da      	asrs	r2, r3, #31
 80120f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80120f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80120f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80120fc:	460b      	mov	r3, r1
 80120fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012100:	fb02 f203 	mul.w	r2, r2, r3
 8012104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012106:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 801210a:	4601      	mov	r1, r0
 801210c:	fb01 f303 	mul.w	r3, r1, r3
 8012110:	4413      	add	r3, r2
 8012112:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012114:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012116:	fba2 1201 	umull	r1, r2, r2, r1
 801211a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801211e:	460a      	mov	r2, r1
 8012120:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012124:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012128:	4413      	add	r3, r2
 801212a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801212e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012132:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8012136:	1851      	adds	r1, r2, r1
 8012138:	6239      	str	r1, [r7, #32]
 801213a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801213e:	414b      	adcs	r3, r1
 8012140:	627b      	str	r3, [r7, #36]	@ 0x24
 8012142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012146:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            sum2 += (q63_t)*pInA2++ * vecData;
 801214a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801214e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012152:	6819      	ldr	r1, [r3, #0]
 8012154:	1c8a      	adds	r2, r1, #2
 8012156:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801215a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012164:	b21b      	sxth	r3, r3
 8012166:	17da      	asrs	r2, r3, #31
 8012168:	663b      	str	r3, [r7, #96]	@ 0x60
 801216a:	667a      	str	r2, [r7, #100]	@ 0x64
 801216c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012170:	17da      	asrs	r2, r3, #31
 8012172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012174:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8012176:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801217a:	460b      	mov	r3, r1
 801217c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801217e:	fb02 f203 	mul.w	r2, r2, r3
 8012182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012184:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8012188:	4601      	mov	r1, r0
 801218a:	fb01 f303 	mul.w	r3, r1, r3
 801218e:	4413      	add	r3, r2
 8012190:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012192:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012194:	fba2 1201 	umull	r1, r2, r2, r1
 8012198:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801219a:	460a      	mov	r2, r1
 801219c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801219e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80121a0:	4413      	add	r3, r2
 80121a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80121a4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80121a8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80121aa:	1851      	adds	r1, r2, r1
 80121ac:	61b9      	str	r1, [r7, #24]
 80121ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80121b0:	414b      	adcs	r3, r1
 80121b2:	61fb      	str	r3, [r7, #28]
 80121b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80121b8:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            sum3 += (q63_t)*pInA3++ * vecData;
 80121bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80121c4:	6819      	ldr	r1, [r3, #0]
 80121c6:	1c8a      	adds	r2, r1, #2
 80121c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80121d0:	601a      	str	r2, [r3, #0]
 80121d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80121d6:	b21b      	sxth	r3, r3
 80121d8:	17da      	asrs	r2, r3, #31
 80121da:	653b      	str	r3, [r7, #80]	@ 0x50
 80121dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80121de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80121e2:	17da      	asrs	r2, r3, #31
 80121e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80121e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80121e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80121ec:	460b      	mov	r3, r1
 80121ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80121f0:	fb02 f203 	mul.w	r2, r2, r3
 80121f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121f6:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80121fa:	4601      	mov	r1, r0
 80121fc:	fb01 f303 	mul.w	r3, r1, r3
 8012200:	4413      	add	r3, r2
 8012202:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012204:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012206:	fba2 ab01 	umull	sl, fp, r2, r1
 801220a:	445b      	add	r3, fp
 801220c:	469b      	mov	fp, r3
 801220e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8012212:	eb12 010a 	adds.w	r1, r2, sl
 8012216:	6139      	str	r1, [r7, #16]
 8012218:	eb43 030b 	adc.w	r3, r3, fp
 801221c:	617b      	str	r3, [r7, #20]
 801221e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012222:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            sum4 += (q63_t)*pInA4++ * vecData;
 8012226:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801222a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801222e:	6819      	ldr	r1, [r3, #0]
 8012230:	1c8a      	adds	r2, r1, #2
 8012232:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012236:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801223a:	601a      	str	r2, [r3, #0]
 801223c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012240:	b21b      	sxth	r3, r3
 8012242:	17da      	asrs	r2, r3, #31
 8012244:	643b      	str	r3, [r7, #64]	@ 0x40
 8012246:	647a      	str	r2, [r7, #68]	@ 0x44
 8012248:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801224c:	17da      	asrs	r2, r3, #31
 801224e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012250:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012252:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8012256:	460b      	mov	r3, r1
 8012258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801225a:	fb02 f203 	mul.w	r2, r2, r3
 801225e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012260:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8012264:	4601      	mov	r1, r0
 8012266:	fb01 f303 	mul.w	r3, r1, r3
 801226a:	4413      	add	r3, r2
 801226c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801226e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012270:	fba2 8901 	umull	r8, r9, r2, r1
 8012274:	444b      	add	r3, r9
 8012276:	4699      	mov	r9, r3
 8012278:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 801227c:	eb12 0108 	adds.w	r1, r2, r8
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	eb43 0309 	adc.w	r3, r3, r9
 8012286:	60fb      	str	r3, [r7, #12]
 8012288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801228c:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
        }

        /* Saturate and store the result in the destination buffer */
        *px++ = (q15_t)(__SSAT((sum1 >> 15), 16));
 8012290:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012294:	f04f 0000 	mov.w	r0, #0
 8012298:	f04f 0100 	mov.w	r1, #0
 801229c:	0bd0      	lsrs	r0, r2, #15
 801229e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80122a2:	13d9      	asrs	r1, r3, #15
 80122a4:	4603      	mov	r3, r0
 80122a6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80122aa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80122ae:	f303 030f 	ssat	r3, #16, r3
 80122b2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80122b6:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 80122ba:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80122be:	1c93      	adds	r3, r2, #2
 80122c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80122c4:	b20b      	sxth	r3, r1
 80122c6:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum2 >> 15), 16));
 80122c8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80122cc:	f04f 0000 	mov.w	r0, #0
 80122d0:	f04f 0100 	mov.w	r1, #0
 80122d4:	0bd0      	lsrs	r0, r2, #15
 80122d6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80122da:	13d9      	asrs	r1, r3, #15
 80122dc:	4603      	mov	r3, r0
 80122de:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80122e2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80122e6:	f303 030f 	ssat	r3, #16, r3
 80122ea:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80122ee:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 80122f2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80122f6:	1c93      	adds	r3, r2, #2
 80122f8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80122fc:	b20b      	sxth	r3, r1
 80122fe:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum3 >> 15), 16));
 8012300:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8012304:	f04f 0000 	mov.w	r0, #0
 8012308:	f04f 0100 	mov.w	r1, #0
 801230c:	0bd0      	lsrs	r0, r2, #15
 801230e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8012312:	13d9      	asrs	r1, r3, #15
 8012314:	4603      	mov	r3, r0
 8012316:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 801231a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801231e:	f303 030f 	ssat	r3, #16, r3
 8012322:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8012326:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 801232a:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801232e:	1c93      	adds	r3, r2, #2
 8012330:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012334:	b20b      	sxth	r3, r1
 8012336:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum4 >> 15), 16));
 8012338:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 801233c:	f04f 0000 	mov.w	r0, #0
 8012340:	f04f 0100 	mov.w	r1, #0
 8012344:	0bd0      	lsrs	r0, r2, #15
 8012346:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 801234a:	13d9      	asrs	r1, r3, #15
 801234c:	4603      	mov	r3, r0
 801234e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8012352:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8012356:	f303 030f 	ssat	r3, #16, r3
 801235a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 801235e:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8012362:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8012366:	1c93      	adds	r3, r2, #2
 8012368:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801236c:	b20b      	sxth	r3, r1
 801236e:	8013      	strh	r3, [r2, #0]

        i = i + numCols * 4;
 8012370:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012374:	b29b      	uxth	r3, r3
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	b29a      	uxth	r2, r3
 801237a:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 801237e:	4413      	add	r3, r2
 8012380:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a

        /* Decrement the row loop counter */
        row--;
 8012384:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8012388:	3b01      	subs	r3, #1
 801238a:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 801238e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8012392:	2b00      	cmp	r3, #0
 8012394:	f47f acaf 	bne.w	8011cf6 <arm_mat_vec_mult_q15+0x78>
    }

    /* process any remaining rows */
    row = numRows & 3u;
 8012398:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801239c:	b29b      	uxth	r3, r3
 801239e:	f003 0303 	and.w	r3, r3, #3
 80123a2:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 80123a6:	e1a3      	b.n	80126f0 <arm_mat_vec_mult_q15+0xa72>

        q63_t sum = 0;
 80123a8:	f04f 0200 	mov.w	r2, #0
 80123ac:	f04f 0300 	mov.w	r3, #0
 80123b0:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        pInVec = pVec;
 80123b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80123bc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80123c0:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 80123c4:	6812      	ldr	r2, [r2, #0]
 80123c6:	601a      	str	r2, [r3, #0]
        pInA1 = pSrcA + i;
 80123c8:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80123cc:	005b      	lsls	r3, r3, #1
 80123ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80123d2:	441a      	add	r2, r3
 80123d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80123dc:	601a      	str	r2, [r3, #0]

        // loop unrolling - process 4 elements at a time
        colCnt = numCols >> 2;
 80123de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80123e2:	089b      	lsrs	r3, r3, #2
 80123e4:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        while (colCnt > 0) {
 80123e8:	e104      	b.n	80125f4 <arm_mat_vec_mult_q15+0x976>
            vecData = read_q15x2_ia (&pInVec);
 80123ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123ee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	1d1a      	adds	r2, r3, #4
 80123f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123fa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80123fe:	601a      	str	r2, [r3, #0]
 8012400:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012404:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	1f1a      	subs	r2, r3, #4
 801240c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012410:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012414:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8012416:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801241a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012428:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801242c:	601a      	str	r2, [r3, #0]
  return (val);
 801242e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012432:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            vecData2 = read_q15x2_ia (&pInVec);
 801243c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012440:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	1d1a      	adds	r2, r3, #4
 8012448:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801244c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012450:	601a      	str	r2, [r3, #0]
 8012452:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012456:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	1f1a      	subs	r2, r3, #4
 801245e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012462:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012466:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8012468:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801246c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	461a      	mov	r2, r3
 8012476:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801247a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801247e:	601a      	str	r2, [r3, #0]
  return (val);
 8012480:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012484:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
            matData = read_q15x2_ia (&pInA1);
 801248e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012492:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	1d1a      	adds	r2, r3, #4
 801249a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801249e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124a2:	601a      	str	r2, [r3, #0]
 80124a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	1f1a      	subs	r2, r3, #4
 80124b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124b8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80124ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	461a      	mov	r2, r3
 80124c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80124d0:	601a      	str	r2, [r3, #0]
  return (val);
 80124d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124d6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            matData2 = read_q15x2_ia (&pInA1);
 80124e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	1d1a      	adds	r2, r3, #4
 80124ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	1f1a      	subs	r2, r3, #4
 8012502:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801250a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801250c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012510:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	461a      	mov	r2, r3
 801251a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801251e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8012522:	601a      	str	r2, [r3, #0]
  return (val);
 8012524:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012528:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            sum = __SMLALD(matData, vecData, sum);
 8012532:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8012536:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801253a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801253e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8012542:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8012546:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  llr.w64 = acc;
 801254a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 801254e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012552:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012556:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012560:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 801256a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801256e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8012572:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8012576:	f5a1 71c0 	sub.w	r1, r1, #384	@ 0x180
 801257a:	600a      	str	r2, [r1, #0]
 801257c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012580:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8012584:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8012586:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801258a:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            sum = __SMLALD(matData2, vecData2, sum);
 801258e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8012592:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8012596:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801259a:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 801259e:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 80125a2:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
  llr.w64 = acc;
 80125a6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80125aa:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80125ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80125b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80125b6:	681a      	ldr	r2, [r3, #0]
 80125b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80125bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80125c6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80125ca:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80125ce:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80125d2:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80125d6:	600a      	str	r2, [r1, #0]
 80125d8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80125dc:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80125e0:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80125e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80125e6:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 80125ea:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80125ee:	3b01      	subs	r3, #1
 80125f0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 80125f4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f47f aef6 	bne.w	80123ea <arm_mat_vec_mult_q15+0x76c>
        }

        // process remainder of row
        colCnt = numCols & 3u;
 80125fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012602:	b29b      	uxth	r3, r3
 8012604:	f003 0303 	and.w	r3, r3, #3
 8012608:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 801260c:	e043      	b.n	8012696 <arm_mat_vec_mult_q15+0xa18>
            sum += (q63_t)*pInA1++ * *pInVec++;
 801260e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012612:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	1c99      	adds	r1, r3, #2
 801261a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801261e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8012622:	6011      	str	r1, [r2, #0]
 8012624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012628:	b21b      	sxth	r3, r3
 801262a:	17da      	asrs	r2, r3, #31
 801262c:	633b      	str	r3, [r7, #48]	@ 0x30
 801262e:	637a      	str	r2, [r7, #52]	@ 0x34
 8012630:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012634:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	1c99      	adds	r1, r3, #2
 801263c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012640:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8012644:	6011      	str	r1, [r2, #0]
 8012646:	f9b3 3000 	ldrsh.w	r3, [r3]
 801264a:	b21b      	sxth	r3, r3
 801264c:	17da      	asrs	r2, r3, #31
 801264e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012652:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8012656:	464b      	mov	r3, r9
 8012658:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 801265c:	4652      	mov	r2, sl
 801265e:	fb02 f203 	mul.w	r2, r2, r3
 8012662:	465b      	mov	r3, fp
 8012664:	4641      	mov	r1, r8
 8012666:	fb01 f303 	mul.w	r3, r1, r3
 801266a:	4413      	add	r3, r2
 801266c:	4642      	mov	r2, r8
 801266e:	4651      	mov	r1, sl
 8012670:	fba2 4501 	umull	r4, r5, r2, r1
 8012674:	442b      	add	r3, r5
 8012676:	461d      	mov	r5, r3
 8012678:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801267c:	1911      	adds	r1, r2, r4
 801267e:	6039      	str	r1, [r7, #0]
 8012680:	416b      	adcs	r3, r5
 8012682:	607b      	str	r3, [r7, #4]
 8012684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012688:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 801268c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8012690:	3b01      	subs	r3, #1
 8012692:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8012696:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1b7      	bne.n	801260e <arm_mat_vec_mult_q15+0x990>
        }
        *px++ = (q15_t)(__SSAT((sum >> 15), 16));
 801269e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80126a2:	f04f 0200 	mov.w	r2, #0
 80126a6:	f04f 0300 	mov.w	r3, #0
 80126aa:	0bc2      	lsrs	r2, r0, #15
 80126ac:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80126b0:	13cb      	asrs	r3, r1, #15
 80126b2:	4613      	mov	r3, r2
 80126b4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80126b8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80126bc:	f303 030f 	ssat	r3, #16, r3
 80126c0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80126c4:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 80126c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80126cc:	1c9a      	adds	r2, r3, #2
 80126ce:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80126d2:	b20a      	sxth	r2, r1
 80126d4:	801a      	strh	r2, [r3, #0]
        i = i + numCols;
 80126d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80126da:	b29a      	uxth	r2, r3
 80126dc:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80126e0:	4413      	add	r3, r2
 80126e2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
        row--;
 80126e6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80126ea:	3b01      	subs	r3, #1
 80126ec:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 80126f0:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f47f ae57 	bne.w	80123a8 <arm_mat_vec_mult_q15+0x72a>
    }
}
 80126fa:	bf00      	nop
 80126fc:	bf00      	nop
 80126fe:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8012702:	46bd      	mov	sp, r7
 8012704:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012708:	4770      	bx	lr

0801270a <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 801270a:	b480      	push	{r7}
 801270c:	b09d      	sub	sp, #116	@ 0x74
 801270e:	af00      	add	r7, sp, #0
 8012710:	60f8      	str	r0, [r7, #12]
 8012712:	60b9      	str	r1, [r7, #8]
 8012714:	607a      	str	r2, [r7, #4]
 8012716:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 8012718:	2300      	movs	r3, #0
 801271a:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	1c9a      	adds	r2, r3, #2
 8012720:	60fa      	str	r2, [r7, #12]
 8012722:	881b      	ldrh	r3, [r3, #0]
 8012724:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8012728:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 801272c:	2b00      	cmp	r3, #0
 801272e:	dc0c      	bgt.n	801274a <arm_absmax_q15+0x40>
 8012730:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012734:	2200      	movs	r2, #0
 8012736:	65ba      	str	r2, [r7, #88]	@ 0x58
 8012738:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801273a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801273c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801273e:	fad3 f312 	qsub16	r3, r3, r2
 8012742:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8012744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012746:	b21b      	sxth	r3, r3
 8012748:	e001      	b.n	801274e <arm_absmax_q15+0x44>
 801274a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 801274e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8012752:	2300      	movs	r3, #0
 8012754:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	3b01      	subs	r3, #1
 801275a:	089b      	lsrs	r3, r3, #2
 801275c:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 801275e:	e0a5      	b.n	80128ac <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	1c9a      	adds	r2, r3, #2
 8012764:	60fa      	str	r2, [r7, #12]
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 801276c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012770:	2b00      	cmp	r3, #0
 8012772:	dc0c      	bgt.n	801278e <arm_absmax_q15+0x84>
 8012774:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012778:	2200      	movs	r2, #0
 801277a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801277c:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801277e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012782:	fad3 f312 	qsub16	r3, r3, r2
 8012786:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8012788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801278a:	b21b      	sxth	r3, r3
 801278c:	e001      	b.n	8012792 <arm_absmax_q15+0x88>
 801278e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012792:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8012796:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801279a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 801279e:	429a      	cmp	r2, r3
 80127a0:	dd06      	ble.n	80127b0 <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 80127a2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80127a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 80127aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127ac:	3301      	adds	r3, #1
 80127ae:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	1c9a      	adds	r2, r3, #2
 80127b4:	60fa      	str	r2, [r7, #12]
 80127b6:	881b      	ldrh	r3, [r3, #0]
 80127b8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80127bc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	dc0c      	bgt.n	80127de <arm_absmax_q15+0xd4>
 80127c4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127c8:	2200      	movs	r2, #0
 80127ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80127cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80127ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80127d2:	fad3 f312 	qsub16	r3, r3, r2
 80127d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80127d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127da:	b21b      	sxth	r3, r3
 80127dc:	e001      	b.n	80127e2 <arm_absmax_q15+0xd8>
 80127de:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127e2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 80127e6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80127ea:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80127ee:	429a      	cmp	r2, r3
 80127f0:	dd06      	ble.n	8012800 <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80127f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80127f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 80127fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127fc:	3302      	adds	r3, #2
 80127fe:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	1c9a      	adds	r2, r3, #2
 8012804:	60fa      	str	r2, [r7, #12]
 8012806:	881b      	ldrh	r3, [r3, #0]
 8012808:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 801280c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012810:	2b00      	cmp	r3, #0
 8012812:	dc0c      	bgt.n	801282e <arm_absmax_q15+0x124>
 8012814:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012818:	2200      	movs	r2, #0
 801281a:	637a      	str	r2, [r7, #52]	@ 0x34
 801281c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801281e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012822:	fad3 f312 	qsub16	r3, r3, r2
 8012826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8012828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801282a:	b21b      	sxth	r3, r3
 801282c:	e001      	b.n	8012832 <arm_absmax_q15+0x128>
 801282e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012832:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8012836:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801283a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 801283e:	429a      	cmp	r2, r3
 8012840:	dd06      	ble.n	8012850 <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012842:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012846:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 801284a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801284c:	3303      	adds	r3, #3
 801284e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	1c9a      	adds	r2, r3, #2
 8012854:	60fa      	str	r2, [r7, #12]
 8012856:	881b      	ldrh	r3, [r3, #0]
 8012858:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 801285c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012860:	2b00      	cmp	r3, #0
 8012862:	dc0c      	bgt.n	801287e <arm_absmax_q15+0x174>
 8012864:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012868:	2200      	movs	r2, #0
 801286a:	62ba      	str	r2, [r7, #40]	@ 0x28
 801286c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012872:	fad3 f312 	qsub16	r3, r3, r2
 8012876:	623b      	str	r3, [r7, #32]
  return(result);
 8012878:	6a3b      	ldr	r3, [r7, #32]
 801287a:	b21b      	sxth	r3, r3
 801287c:	e001      	b.n	8012882 <arm_absmax_q15+0x178>
 801287e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012882:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8012886:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801288a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 801288e:	429a      	cmp	r2, r3
 8012890:	dd06      	ble.n	80128a0 <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012892:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012896:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 801289a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801289c:	3304      	adds	r3, #4
 801289e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 80128a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80128a2:	3304      	adds	r3, #4
 80128a4:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 80128a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128a8:	3b01      	subs	r3, #1
 80128aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 80128ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f47f af56 	bne.w	8012760 <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	3b01      	subs	r3, #1
 80128b8:	f003 0303 	and.w	r3, r3, #3
 80128bc:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80128be:	e02b      	b.n	8012918 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	1c9a      	adds	r2, r3, #2
 80128c4:	60fa      	str	r2, [r7, #12]
 80128c6:	881b      	ldrh	r3, [r3, #0]
 80128c8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80128cc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	dc0c      	bgt.n	80128ee <arm_absmax_q15+0x1e4>
 80128d4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80128d8:	2200      	movs	r2, #0
 80128da:	61fa      	str	r2, [r7, #28]
 80128dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	69ba      	ldr	r2, [r7, #24]
 80128e2:	fad3 f312 	qsub16	r3, r3, r2
 80128e6:	617b      	str	r3, [r7, #20]
  return(result);
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	b21b      	sxth	r3, r3
 80128ec:	e001      	b.n	80128f2 <arm_absmax_q15+0x1e8>
 80128ee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80128f2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 80128f6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80128fa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80128fe:	429a      	cmp	r2, r3
 8012900:	dd07      	ble.n	8012912 <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012902:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012906:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 801290a:	68ba      	ldr	r2, [r7, #8]
 801290c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801290e:	1ad3      	subs	r3, r2, r3
 8012910:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8012912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012914:	3b01      	subs	r3, #1
 8012916:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8012918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1d0      	bne.n	80128c0 <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8012924:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801292a:	601a      	str	r2, [r3, #0]
}
 801292c:	bf00      	nop
 801292e:	3774      	adds	r7, #116	@ 0x74
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <arm_copy_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_copy_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8012938:	b480      	push	{r7}
 801293a:	b087      	sub	sp, #28
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012948:	e00b      	b.n	8012962 <arm_copy_q15+0x2a>
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 801294a:	68fa      	ldr	r2, [r7, #12]
 801294c:	1c93      	adds	r3, r2, #2
 801294e:	60fb      	str	r3, [r7, #12]
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	1c99      	adds	r1, r3, #2
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	f9b2 2000 	ldrsh.w	r2, [r2]
 801295a:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	3b01      	subs	r3, #1
 8012960:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d1f0      	bne.n	801294a <arm_copy_q15+0x12>
  }
}
 8012968:	bf00      	nop
 801296a:	bf00      	nop
 801296c:	371c      	adds	r7, #28
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr

08012976 <arm_bitreversal_16>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_16(
        uint16_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8012976:	b480      	push	{r7}
 8012978:	b089      	sub	sp, #36	@ 0x24
 801297a:	af00      	add	r7, sp, #0
 801297c:	60f8      	str	r0, [r7, #12]
 801297e:	460b      	mov	r3, r1
 8012980:	607a      	str	r2, [r7, #4]
 8012982:	817b      	strh	r3, [r7, #10]
  uint16_t a, b, tmp;
  uint32_t i;

  for (i = 0; i < bitRevLen; )
 8012984:	2300      	movs	r3, #0
 8012986:	61fb      	str	r3, [r7, #28]
 8012988:	e041      	b.n	8012a0e <arm_bitreversal_16+0x98>
  {
     a = pBitRevTab[i    ] >> 2;
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	005b      	lsls	r3, r3, #1
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	4413      	add	r3, r2
 8012992:	881b      	ldrh	r3, [r3, #0]
 8012994:	089b      	lsrs	r3, r3, #2
 8012996:	837b      	strh	r3, [r7, #26]
     b = pBitRevTab[i + 1] >> 2;
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	3301      	adds	r3, #1
 801299c:	005b      	lsls	r3, r3, #1
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	4413      	add	r3, r2
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	089b      	lsrs	r3, r3, #2
 80129a6:	833b      	strh	r3, [r7, #24]

     //real
     tmp = pSrc[a];
 80129a8:	8b7b      	ldrh	r3, [r7, #26]
 80129aa:	005b      	lsls	r3, r3, #1
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	4413      	add	r3, r2
 80129b0:	881b      	ldrh	r3, [r3, #0]
 80129b2:	82fb      	strh	r3, [r7, #22]
     pSrc[a] = pSrc[b];
 80129b4:	8b3b      	ldrh	r3, [r7, #24]
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	68fa      	ldr	r2, [r7, #12]
 80129ba:	441a      	add	r2, r3
 80129bc:	8b7b      	ldrh	r3, [r7, #26]
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	68f9      	ldr	r1, [r7, #12]
 80129c2:	440b      	add	r3, r1
 80129c4:	8812      	ldrh	r2, [r2, #0]
 80129c6:	801a      	strh	r2, [r3, #0]
     pSrc[b] = tmp;
 80129c8:	8b3b      	ldrh	r3, [r7, #24]
 80129ca:	005b      	lsls	r3, r3, #1
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	4413      	add	r3, r2
 80129d0:	8afa      	ldrh	r2, [r7, #22]
 80129d2:	801a      	strh	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80129d4:	8b7b      	ldrh	r3, [r7, #26]
 80129d6:	3301      	adds	r3, #1
 80129d8:	005b      	lsls	r3, r3, #1
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	4413      	add	r3, r2
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	82fb      	strh	r3, [r7, #22]
     pSrc[a+1] = pSrc[b+1];
 80129e2:	8b3b      	ldrh	r3, [r7, #24]
 80129e4:	3301      	adds	r3, #1
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	68fa      	ldr	r2, [r7, #12]
 80129ea:	441a      	add	r2, r3
 80129ec:	8b7b      	ldrh	r3, [r7, #26]
 80129ee:	3301      	adds	r3, #1
 80129f0:	005b      	lsls	r3, r3, #1
 80129f2:	68f9      	ldr	r1, [r7, #12]
 80129f4:	440b      	add	r3, r1
 80129f6:	8812      	ldrh	r2, [r2, #0]
 80129f8:	801a      	strh	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80129fa:	8b3b      	ldrh	r3, [r7, #24]
 80129fc:	3301      	adds	r3, #1
 80129fe:	005b      	lsls	r3, r3, #1
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	4413      	add	r3, r2
 8012a04:	8afa      	ldrh	r2, [r7, #22]
 8012a06:	801a      	strh	r2, [r3, #0]

    i += 2;
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	3302      	adds	r3, #2
 8012a0c:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8012a0e:	897b      	ldrh	r3, [r7, #10]
 8012a10:	69fa      	ldr	r2, [r7, #28]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d3b9      	bcc.n	801298a <arm_bitreversal_16+0x14>
  }
}
 8012a16:	bf00      	nop
 8012a18:	bf00      	nop
 8012a1a:	3724      	adds	r7, #36	@ 0x24
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <arm_cfft_q15>:
ARM_DSP_ATTRIBUTE void arm_cfft_q15(
  const arm_cfft_instance_q15 * S,
        q15_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b086      	sub	sp, #24
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	4611      	mov	r1, r2
 8012a30:	461a      	mov	r2, r3
 8012a32:	460b      	mov	r3, r1
 8012a34:	71fb      	strb	r3, [r7, #7]
 8012a36:	4613      	mov	r3, r2
 8012a38:	71bb      	strb	r3, [r7, #6]
  uint32_t L = S->fftLen;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	617b      	str	r3, [r7, #20]

  if (ifftFlag == 1U)
 8012a40:	79fb      	ldrb	r3, [r7, #7]
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d14c      	bne.n	8012ae0 <arm_cfft_q15+0xbc>
  {
     switch (L)
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a4c:	d038      	beq.n	8012ac0 <arm_cfft_q15+0x9c>
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a54:	f200 808f 	bhi.w	8012b76 <arm_cfft_q15+0x152>
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a5e:	d037      	beq.n	8012ad0 <arm_cfft_q15+0xac>
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a66:	f200 8086 	bhi.w	8012b76 <arm_cfft_q15+0x152>
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012a70:	d026      	beq.n	8012ac0 <arm_cfft_q15+0x9c>
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012a78:	d87d      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a80:	d026      	beq.n	8012ad0 <arm_cfft_q15+0xac>
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a88:	d875      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a90:	d016      	beq.n	8012ac0 <arm_cfft_q15+0x9c>
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a98:	d86d      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	2b80      	cmp	r3, #128	@ 0x80
 8012a9e:	d017      	beq.n	8012ad0 <arm_cfft_q15+0xac>
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	2b80      	cmp	r3, #128	@ 0x80
 8012aa4:	d867      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	2b40      	cmp	r3, #64	@ 0x40
 8012aaa:	d009      	beq.n	8012ac0 <arm_cfft_q15+0x9c>
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	2b40      	cmp	r3, #64	@ 0x40
 8012ab0:	d861      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	2b10      	cmp	r3, #16
 8012ab6:	d003      	beq.n	8012ac0 <arm_cfft_q15+0x9c>
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	2b20      	cmp	r3, #32
 8012abc:	d008      	beq.n	8012ad0 <arm_cfft_q15+0xac>
 8012abe:	e05a      	b.n	8012b76 <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_inverse_q15 ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	685a      	ldr	r2, [r3, #4]
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	6979      	ldr	r1, [r7, #20]
 8012ac8:	68b8      	ldr	r0, [r7, #8]
 8012aca:	f001 ffdf 	bl	8014a8c <arm_radix4_butterfly_inverse_q15>
       break;
 8012ace:	e052      	b.n	8012b76 <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_inverse_q15 ( p1, L, S->pTwiddle );
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	6979      	ldr	r1, [r7, #20]
 8012ad8:	68b8      	ldr	r0, [r7, #8]
 8012ada:	f000 f9a7 	bl	8012e2c <arm_cfft_radix4by2_inverse_q15>
       break;
 8012ade:	e04a      	b.n	8012b76 <arm_cfft_q15+0x152>
     }
  }
  else
  {
     switch (L)
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ae6:	d036      	beq.n	8012b56 <arm_cfft_q15+0x132>
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012aee:	d842      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012af6:	d036      	beq.n	8012b66 <arm_cfft_q15+0x142>
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012afe:	d83a      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b06:	d026      	beq.n	8012b56 <arm_cfft_q15+0x132>
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b0e:	d832      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b16:	d026      	beq.n	8012b66 <arm_cfft_q15+0x142>
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b1e:	d82a      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b26:	d016      	beq.n	8012b56 <arm_cfft_q15+0x132>
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b2e:	d822      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	2b80      	cmp	r3, #128	@ 0x80
 8012b34:	d017      	beq.n	8012b66 <arm_cfft_q15+0x142>
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	2b80      	cmp	r3, #128	@ 0x80
 8012b3a:	d81c      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	2b40      	cmp	r3, #64	@ 0x40
 8012b40:	d009      	beq.n	8012b56 <arm_cfft_q15+0x132>
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	2b40      	cmp	r3, #64	@ 0x40
 8012b46:	d816      	bhi.n	8012b76 <arm_cfft_q15+0x152>
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	2b10      	cmp	r3, #16
 8012b4c:	d003      	beq.n	8012b56 <arm_cfft_q15+0x132>
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	2b20      	cmp	r3, #32
 8012b52:	d008      	beq.n	8012b66 <arm_cfft_q15+0x142>
 8012b54:	e00f      	b.n	8012b76 <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	6979      	ldr	r1, [r7, #20]
 8012b5e:	68b8      	ldr	r0, [r7, #8]
 8012b60:	f000 fab0 	bl	80130c4 <arm_radix4_butterfly_q15>
       break;
 8012b64:	e007      	b.n	8012b76 <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	6979      	ldr	r1, [r7, #20]
 8012b6e:	68b8      	ldr	r0, [r7, #8]
 8012b70:	f000 f810 	bl	8012b94 <arm_cfft_radix4by2_q15>
       break;
 8012b74:	bf00      	nop
     }
  }

  if ( bitReverseFlag )
 8012b76:	79bb      	ldrb	r3, [r7, #6]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d007      	beq.n	8012b8c <arm_cfft_q15+0x168>
    arm_bitreversal_16 ((uint16_t*) p1, S->bitRevLength, S->pBitRevTable);
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	8999      	ldrh	r1, [r3, #12]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	689b      	ldr	r3, [r3, #8]
 8012b84:	461a      	mov	r2, r3
 8012b86:	68b8      	ldr	r0, [r7, #8]
 8012b88:	f7ff fef5 	bl	8012976 <arm_bitreversal_16>
}
 8012b8c:	bf00      	nop
 8012b8e:	3718      	adds	r7, #24
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <arm_cfft_radix4by2_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b0b0      	sub	sp, #192	@ 0xc0
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	4413      	add	r3, r2
 8012bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	085b      	lsrs	r3, r3, #1
 8012bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012bc2:	e0a9      	b.n	8012d18 <arm_cfft_radix4by2_q15+0x184>
  {
      coeff = read_q15x2_ia (&pC);
 8012bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bcc:	3b04      	subs	r3, #4
 8012bce:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      T = read_q15x2 (pSi);
 8012bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	623b      	str	r3, [r7, #32]
  return (val);
 8012be6:	6a3b      	ldr	r3, [r7, #32]
 8012be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012bfa:	fa93 f322 	shadd16	r3, r3, r2
 8012bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      S = read_q15x2 (pSl);
 8012c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c08:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	61fb      	str	r3, [r7, #28]
  return (val);
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012c24:	fa93 f322 	shadd16	r3, r3, r2
 8012c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      R = __QSUB16(T, S);
 8012c30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012c34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c38:	663a      	str	r2, [r7, #96]	@ 0x60
 8012c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c40:	fad3 f312 	qsub16	r3, r3, r2
 8012c44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012c4c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012c50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c54:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c56:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c5a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012c5c:	fa93 f322 	shadd16	r3, r3, r2
 8012c60:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012c62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c64:	461a      	mov	r2, r3
 8012c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c6c:	673a      	str	r2, [r7, #112]	@ 0x70
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8012c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c70:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8012c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	69ba      	ldr	r2, [r7, #24]
 8012c78:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8012c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	1d1a      	adds	r2, r3, #4
 8012c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c82:	601a      	str	r2, [r3, #0]
}
 8012c84:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
      out1 = __SMUAD(coeff, R) >> 16U;
 8012c86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012c8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012c98:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012c9a:	fb23 f302 	smuad	r3, r3, r2
 8012c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012ca0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ca2:	0c1b      	lsrs	r3, r3, #16
 8012ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      out2 = __SMUSDX(coeff, R);
 8012ca8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012cb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012cbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012cc0:	fb43 f312 	smusdx	r3, r3, r2
 8012cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
      out1 = __SMUSDX(R, coeff) >> 16U;
      out2 = __SMUAD(coeff, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ) );
 8012cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012cda:	4b53      	ldr	r3, [pc, #332]	@ (8012e28 <arm_cfft_radix4by2_q15+0x294>)
 8012cdc:	400b      	ands	r3, r1
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012ce6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012cea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012cf2:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8012cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	697a      	ldr	r2, [r7, #20]
 8012cfc:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012cfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	1d1a      	adds	r2, r3, #4
 8012d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012d0a:	601a      	str	r2, [r3, #0]
}
 8012d0c:	bf00      	nop
  for (i = n2; i > 0; i--)
 8012d0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d12:	3b01      	subs	r3, #1
 8012d14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012d18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	f47f af51 	bne.w	8012bc4 <arm_cfft_radix4by2_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8012d22:	2302      	movs	r3, #2
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f000 f9ca 	bl	80130c4 <arm_radix4_butterfly_q15>

  /* second col */
  arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	18d0      	adds	r0, r2, r3
 8012d38:	2302      	movs	r3, #2
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012d40:	f000 f9c0 	bl	80130c4 <arm_radix4_butterfly_q15>

  n2 = fftLen >> 1U;
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	085b      	lsrs	r3, r3, #1
 8012d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012d52:	e05e      	b.n	8012e12 <arm_cfft_radix4by2_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8012d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d58:	00db      	lsls	r3, r3, #3
 8012d5a:	68fa      	ldr	r2, [r7, #12]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8012d64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d68:	00db      	lsls	r3, r3, #3
 8012d6a:	3302      	adds	r3, #2
 8012d6c:	68fa      	ldr	r2, [r7, #12]
 8012d6e:	4413      	add	r3, r2
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 8012d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d7a:	00db      	lsls	r3, r3, #3
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	4413      	add	r3, r2
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8012d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d8c:	00db      	lsls	r3, r3, #3
 8012d8e:	3306      	adds	r3, #6
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	4413      	add	r3, r2
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8012d9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8012d9e:	005b      	lsls	r3, r3, #1
 8012da0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 8012da4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8012dae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012db2:	005b      	lsls	r3, r3, #1
 8012db4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8012db8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8012dbc:	005b      	lsls	r3, r3, #1
 8012dbe:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 8012dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	4413      	add	r3, r2
 8012dcc:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8012dd0:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 8012dd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012dd6:	00db      	lsls	r3, r3, #3
 8012dd8:	3302      	adds	r3, #2
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	4413      	add	r3, r2
 8012dde:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8012de2:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 8012de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012de8:	00db      	lsls	r3, r3, #3
 8012dea:	3304      	adds	r3, #4
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	4413      	add	r3, r2
 8012df0:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8012df4:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8012df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012dfa:	00db      	lsls	r3, r3, #3
 8012dfc:	3306      	adds	r3, #6
 8012dfe:	68fa      	ldr	r2, [r7, #12]
 8012e00:	4413      	add	r3, r2
 8012e02:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8012e06:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8012e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012e12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d39a      	bcc.n	8012d54 <arm_cfft_radix4by2_q15+0x1c0>
  }

}
 8012e1e:	bf00      	nop
 8012e20:	bf00      	nop
 8012e22:	37c0      	adds	r7, #192	@ 0xc0
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	ffff0000 	.word	0xffff0000

08012e2c <arm_cfft_radix4by2_inverse_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_inverse_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b0b0      	sub	sp, #192	@ 0xc0
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	005b      	lsls	r3, r3, #1
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	4413      	add	r3, r2
 8012e48:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	085b      	lsrs	r3, r3, #1
 8012e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012e5a:	e0a9      	b.n	8012fb0 <arm_cfft_radix4by2_inverse_q15+0x184>
  {
     coeff = read_q15x2_ia (&pC);
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e5e:	3304      	adds	r3, #4
 8012e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e64:	3b04      	subs	r3, #4
 8012e66:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

     T = read_q15x2 (pSi);
 8012e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	623b      	str	r3, [r7, #32]
  return (val);
 8012e7e:	6a3b      	ldr	r3, [r7, #32]
 8012e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
     T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012e90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012e92:	fa93 f322 	shadd16	r3, r3, r2
 8012e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

     S = read_q15x2 (pSl);
 8012e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	61fb      	str	r3, [r7, #28]
  return (val);
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
     S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ebc:	fa93 f322 	shadd16	r3, r3, r2
 8012ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

     R = __QSUB16(T, S);
 8012ec8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012ed0:	663a      	str	r2, [r7, #96]	@ 0x60
 8012ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012ed6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012ed8:	fad3 f312 	qsub16	r3, r3, r2
 8012edc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

     write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012ee4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012ee8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012eec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012eee:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ef2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012ef4:	fa93 f322 	shadd16	r3, r3, r2
 8012ef8:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012efc:	461a      	mov	r2, r3
 8012efe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012f02:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f04:	673a      	str	r2, [r7, #112]	@ 0x70
  q31_t val = value;
 8012f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012f08:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ15, &val, 4);
 8012f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	69ba      	ldr	r2, [r7, #24]
 8012f10:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	1d1a      	adds	r2, r3, #4
 8012f18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f1a:	601a      	str	r2, [r3, #0]
}
 8012f1c:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
     out1 = __SMUSD(coeff, R) >> 16U;
 8012f1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012f26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012f30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012f32:	fb43 f302 	smusd	r3, r3, r2
 8012f36:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012f3a:	0c1b      	lsrs	r3, r3, #16
 8012f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
     out2 = __SMUADX(coeff, R);
 8012f40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012f54:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012f58:	fb23 f312 	smuadx	r3, r3, r2
 8012f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
     out1 = __SMUADX(R, coeff) >> 16U;
     out2 = __SMUSD(__QSUB(0, coeff), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

     write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ));
 8012f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012f72:	4b53      	ldr	r3, [pc, #332]	@ (80130c0 <arm_cfft_radix4by2_inverse_q15+0x294>)
 8012f74:	400b      	ands	r3, r1
 8012f76:	4313      	orrs	r3, r2
 8012f78:	461a      	mov	r2, r3
 8012f7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012f82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012f8a:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8012f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	697a      	ldr	r2, [r7, #20]
 8012f94:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	1d1a      	adds	r2, r3, #4
 8012f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012fa2:	601a      	str	r2, [r3, #0]
}
 8012fa4:	bf00      	nop
  for (i = n2; i > 0; i--)
 8012fa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012faa:	3b01      	subs	r3, #1
 8012fac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f47f af51 	bne.w	8012e5c <arm_cfft_radix4by2_inverse_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_inverse_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8012fba:	2302      	movs	r3, #2
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012fc2:	68f8      	ldr	r0, [r7, #12]
 8012fc4:	f001 fd62 	bl	8014a8c <arm_radix4_butterfly_inverse_q15>

  /* second col */
  arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	18d0      	adds	r0, r2, r3
 8012fd0:	2302      	movs	r3, #2
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012fd8:	f001 fd58 	bl	8014a8c <arm_radix4_butterfly_inverse_q15>

  n2 = fftLen >> 1U;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	085b      	lsrs	r3, r3, #1
 8012fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012fea:	e05e      	b.n	80130aa <arm_cfft_radix4by2_inverse_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8012fec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ff0:	00db      	lsls	r3, r3, #3
 8012ff2:	68fa      	ldr	r2, [r7, #12]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	881b      	ldrh	r3, [r3, #0]
 8012ff8:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8012ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013000:	00db      	lsls	r3, r3, #3
 8013002:	3302      	adds	r3, #2
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	4413      	add	r3, r2
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 801300e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013012:	00db      	lsls	r3, r3, #3
 8013014:	3304      	adds	r3, #4
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	4413      	add	r3, r2
 801301a:	881b      	ldrh	r3, [r3, #0]
 801301c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8013020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013024:	00db      	lsls	r3, r3, #3
 8013026:	3306      	adds	r3, #6
 8013028:	68fa      	ldr	r2, [r7, #12]
 801302a:	4413      	add	r3, r2
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8013032:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8013036:	005b      	lsls	r3, r3, #1
 8013038:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 801303c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8013046:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801304a:	005b      	lsls	r3, r3, #1
 801304c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8013050:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 801305a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801305e:	00db      	lsls	r3, r3, #3
 8013060:	68fa      	ldr	r2, [r7, #12]
 8013062:	4413      	add	r3, r2
 8013064:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8013068:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 801306a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801306e:	00db      	lsls	r3, r3, #3
 8013070:	3302      	adds	r3, #2
 8013072:	68fa      	ldr	r2, [r7, #12]
 8013074:	4413      	add	r3, r2
 8013076:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 801307a:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 801307c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013080:	00db      	lsls	r3, r3, #3
 8013082:	3304      	adds	r3, #4
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	4413      	add	r3, r2
 8013088:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 801308c:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 801308e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013092:	00db      	lsls	r3, r3, #3
 8013094:	3306      	adds	r3, #6
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	4413      	add	r3, r2
 801309a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 801309e:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 80130a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130a4:	3301      	adds	r3, #1
 80130a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80130aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80130ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d39a      	bcc.n	8012fec <arm_cfft_radix4by2_inverse_q15+0x1c0>
  }
}
 80130b6:	bf00      	nop
 80130b8:	bf00      	nop
 80130ba:	37c0      	adds	r7, #192	@ 0xc0
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	ffff0000 	.word	0xffff0000

080130c4 <arm_radix4_butterfly_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 80130c4:	b490      	push	{r4, r7}
 80130c6:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 80130d0:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 80130d4:	6020      	str	r0, [r4, #0]
 80130d6:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 80130da:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 80130de:	6001      	str	r1, [r0, #0]
 80130e0:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 80130e4:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 80130e8:	600a      	str	r2, [r1, #0]
 80130ea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80130ee:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80130f2:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 80130f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130f8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8013102:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013106:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 801310a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801310e:	089b      	lsrs	r3, r3, #2
 8013110:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8013114:	2300      	movs	r3, #0
 8013116:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 801311a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801311e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8013122:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013126:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801312a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801312e:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013132:	6812      	ldr	r2, [r2, #0]
 8013134:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8013136:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801313a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	441a      	add	r2, r3
 8013148:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801314c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013150:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8013152:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013156:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	441a      	add	r2, r3
 8013164:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013168:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801316c:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 801316e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013172:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	441a      	add	r2, r3
 8013180:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013184:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013188:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /* Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 801318a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801318e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013198:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801319c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801319e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131a2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	461a      	mov	r2, r3
 80131ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131b0:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80131b4:	601a      	str	r2, [r3, #0]
  return (val);
 80131b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131ba:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80131c4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80131c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80131d0:	601a      	str	r2, [r3, #0]
 80131d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131d6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80131da:	2200      	movs	r2, #0
 80131dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80131de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80131ec:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 80131f0:	6812      	ldr	r2, [r2, #0]
 80131f2:	fa93 f222 	shadd16	r2, r3, r2
 80131f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80131fe:	601a      	str	r2, [r3, #0]
  return(result);
 8013200:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013204:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* it turns out doing this twice is 2 cycles, the alternative takes 3 cycles */
 801320e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013212:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013216:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801321a:	601a      	str	r2, [r3, #0]
 801321c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013220:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8013224:	2200      	movs	r2, #0
 8013226:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013228:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801322c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013236:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 801323a:	6812      	ldr	r2, [r2, #0]
 801323c:	fa93 f222 	shadd16	r2, r3, r2
 8013240:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013244:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013248:	601a      	str	r2, [r3, #0]
  return(result);
 801324a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801324e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
     T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);
*/

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8013258:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801325c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013266:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801326a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801326c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013270:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	461a      	mov	r2, r3
 801327a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801327e:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8013282:	601a      	str	r2, [r3, #0]
  return (val);
 8013284:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013288:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8013292:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013296:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801329a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801329e:	601a      	str	r2, [r3, #0]
 80132a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132a4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80132ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132b0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80132ba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80132be:	6812      	ldr	r2, [r2, #0]
 80132c0:	fa93 f222 	shadd16	r2, r3, r2
 80132c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80132cc:	601a      	str	r2, [r3, #0]
  return(result);
 80132ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132d2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 80132dc:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80132e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132e4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80132f2:	2200      	movs	r2, #0
 80132f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80132f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013304:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8013308:	6812      	ldr	r2, [r2, #0]
 801330a:	fa93 f222 	shadd16	r2, r3, r2
 801330e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013312:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013316:	601a      	str	r2, [r3, #0]
  return(result);
 8013318:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801331c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8013326:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801332a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801332e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013332:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8013336:	6019      	str	r1, [r3, #0]
 8013338:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801333c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013342:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013346:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013350:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8013354:	6812      	ldr	r2, [r2, #0]
 8013356:	fa93 f212 	qadd16	r2, r3, r2
 801335a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801335e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013362:	601a      	str	r2, [r3, #0]
  return(result);
 8013364:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013368:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8013372:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013376:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801337a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801337e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8013382:	6019      	str	r1, [r3, #0]
 8013384:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013388:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801338c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801338e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013392:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801339c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80133a0:	6812      	ldr	r2, [r2, #0]
 80133a2:	fad3 f212 	qsub16	r2, r3, r2
 80133a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80133ae:	601a      	str	r2, [r3, #0]
  return(result);
 80133b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 80133be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133c2:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133cc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80133d0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80133d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133d6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	461a      	mov	r2, r3
 80133e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133e4:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80133e8:	601a      	str	r2, [r3, #0]
  return (val);
 80133ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133ee:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80133f8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80133fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013400:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801340a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801340e:	2200      	movs	r2, #0
 8013410:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013412:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013416:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013420:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8013424:	6812      	ldr	r2, [r2, #0]
 8013426:	fa93 f222 	shadd16	r2, r3, r2
 801342a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801342e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013432:	601a      	str	r2, [r3, #0]
  return(result);
 8013434:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013438:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013442:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013446:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801344a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801344e:	601a      	str	r2, [r3, #0]
 8013450:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013454:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8013458:	2200      	movs	r2, #0
 801345a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801345c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013460:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801346a:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 801346e:	6812      	ldr	r2, [r2, #0]
 8013470:	fa93 f222 	shadd16	r2, r3, r2
 8013474:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013478:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801347c:	601a      	str	r2, [r3, #0]
  return(result);
 801347e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013482:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 801348c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013490:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013494:	681a      	ldr	r2, [r3, #0]
 8013496:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801349a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801349e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80134a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134a4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	461a      	mov	r2, r3
 80134ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134b2:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80134b6:	601a      	str	r2, [r3, #0]
  return (val);
 80134b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134bc:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80134c6:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80134ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134ce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80134d2:	601a      	str	r2, [r3, #0]
 80134d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134d8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80134dc:	2200      	movs	r2, #0
 80134de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80134ee:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80134f2:	6812      	ldr	r2, [r2, #0]
 80134f4:	fa93 f222 	shadd16	r2, r3, r2
 80134f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134fc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013500:	601a      	str	r2, [r3, #0]
  return(result);
 8013502:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013506:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013510:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013514:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013518:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801351c:	601a      	str	r2, [r3, #0]
 801351e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013522:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8013526:	2200      	movs	r2, #0
 8013528:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801352a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801352e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013538:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 801353c:	6812      	ldr	r2, [r2, #0]
 801353e:	fa93 f222 	shadd16	r2, r3, r2
 8013542:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013546:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801354a:	601a      	str	r2, [r3, #0]
  return(result);
 801354c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013550:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 801355a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801355e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013562:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013566:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801356a:	6019      	str	r1, [r3, #0]
 801356c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013570:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013576:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801357a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013584:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8013588:	6812      	ldr	r2, [r2, #0]
 801358a:	fa93 f212 	qadd16	r2, r3, r2
 801358e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013592:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8013596:	601a      	str	r2, [r3, #0]
  return(result);
 8013598:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801359c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 80135a6:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80135aa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80135ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80135b6:	6019      	str	r1, [r3, #0]
 80135b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80135c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80135d0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80135d4:	6812      	ldr	r2, [r2, #0]
 80135d6:	fa93 f222 	shadd16	r2, r3, r2
 80135da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80135e2:	601a      	str	r2, [r3, #0]
  return(result);
 80135e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	4619      	mov	r1, r3
 80135f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80135f8:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80135fc:	601a      	str	r2, [r3, #0]
 80135fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013602:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013606:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8013608:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801360c:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8013610:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013614:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8013618:	6812      	ldr	r2, [r2, #0]
 801361a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801361c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013620:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801362c:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8013630:	6812      	ldr	r2, [r2, #0]
 8013632:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013634:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013638:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	1d1a      	adds	r2, r3, #4
 8013642:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013646:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	601a      	str	r2, [r3, #0]
}
 801364e:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8013650:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013654:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013658:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801365c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013660:	6019      	str	r1, [r3, #0]
 8013662:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013666:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801366a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801366c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013670:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801367a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801367e:	6812      	ldr	r2, [r2, #0]
 8013680:	fad3 f212 	qsub16	r2, r3, r2
 8013684:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013688:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801368c:	601a      	str	r2, [r3, #0]
  return(result);
 801368e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013692:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 801369c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80136a0:	00db      	lsls	r3, r3, #3
 80136a2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80136a6:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80136aa:	6812      	ldr	r2, [r2, #0]
 80136ac:	441a      	add	r2, r3
 80136ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80136b6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80136b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	461a      	mov	r2, r3
 80136c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136ca:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80136ce:	601a      	str	r2, [r3, #0]
  return (val);
 80136d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136d4:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 80136de:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80136e2:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80136e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80136ee:	6019      	str	r1, [r3, #0]
 80136f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80136f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80136fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013708:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 801370c:	6812      	ldr	r2, [r2, #0]
 801370e:	fb23 f202 	smuad	r2, r3, r2
 8013712:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013716:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801371a:	601a      	str	r2, [r3, #0]
  return(result);
 801371c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013720:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	0c1b      	lsrs	r3, r3, #16
 8013728:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 801372c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8013730:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013734:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8013738:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801373c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013742:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8013746:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801374a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 801374e:	6812      	ldr	r2, [r2, #0]
 8013750:	fb43 f212 	smusdx	r2, r3, r2
 8013754:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801375c:	601a      	str	r2, [r3, #0]
  return(result);
 801375e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 801376c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013770:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 801377a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	461a      	mov	r2, r3
 8013782:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013786:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 801378a:	601a      	str	r2, [r3, #0]
  return (val);
 801378c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013790:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801379a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801379e:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80137a2:	2300      	movs	r3, #0
 80137a4:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137a8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80137ac:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 80137b0:	fa93 f322 	shadd16	r3, r3, r2
 80137b4:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 80137b8:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80137bc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80137c0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80137c4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80137c8:	2300      	movs	r3, #0
 80137ca:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137ce:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80137d2:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80137d6:	fa93 f322 	shadd16	r3, r3, r2
 80137da:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 80137de:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80137e2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 80137e6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80137f0:	4bd7      	ldr	r3, [pc, #860]	@ (8013b50 <arm_radix4_butterfly_q15+0xa8c>)
 80137f2:	400b      	ands	r3, r1
 80137f4:	4313      	orrs	r3, r2
 80137f6:	461a      	mov	r2, r3
 80137f8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80137fc:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8013800:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 8013804:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013808:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 801380c:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8013810:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013812:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801381c:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 8013820:	6812      	ldr	r2, [r2, #0]
 8013822:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013824:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	1d1a      	adds	r2, r3, #4
 801382c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013830:	601a      	str	r2, [r3, #0]
}
 8013832:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8013834:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013838:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 8013842:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	461a      	mov	r2, r3
 801384a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801384e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013852:	601a      	str	r2, [r3, #0]
  return (val);
 8013854:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013858:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013862:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8013866:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 801386a:	2300      	movs	r3, #0
 801386c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013870:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013874:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8013878:	fa93 f322 	shadd16	r3, r3, r2
 801387c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8013880:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8013884:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013888:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801388c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8013890:	2300      	movs	r3, #0
 8013892:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013896:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 801389a:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 801389e:	fa93 f322 	shadd16	r3, r3, r2
 80138a2:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 80138a6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80138aa:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 80138ae:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80138b2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80138b6:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 80138ba:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138be:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 80138c2:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80138c6:	fad3 f312 	qsub16	r3, r3, r2
 80138ca:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 80138ce:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80138d2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 80138d6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80138da:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80138de:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80138e2:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138e6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80138ea:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 80138ee:	faa3 f312 	qasx	r3, r3, r2
 80138f2:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 80138f6:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80138fa:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 80138fe:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013902:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013906:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 801390a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801390e:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8013912:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8013916:	fae3 f312 	qsax	r3, r3, r2
 801391a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 801391e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8013922:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QASX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8013926:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013930:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013934:	6812      	ldr	r2, [r2, #0]
 8013936:	4413      	add	r3, r2
 8013938:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 801393c:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	461a      	mov	r2, r3
 8013944:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013948:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 801394c:	601a      	str	r2, [r3, #0]
  return (val);
 801394e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013952:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 801395c:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8013960:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8013964:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8013968:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801396c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013970:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8013974:	fb23 f302 	smuad	r3, r3, r2
 8013978:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 801397c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013980:	0c1b      	lsrs	r3, r3, #16
 8013982:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 8013986:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 801398a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 801398e:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8013992:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013996:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801399a:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 801399e:	fb43 f312 	smusdx	r3, r3, r2
 80139a2:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 80139a6:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80139aa:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 80139ae:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80139b8:	4b65      	ldr	r3, [pc, #404]	@ (8013b50 <arm_radix4_butterfly_q15+0xa8c>)
 80139ba:	400b      	ands	r3, r1
 80139bc:	4313      	orrs	r3, r2
 80139be:	461a      	mov	r2, r3
 80139c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80139c4:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80139c8:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 80139cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139d0:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80139d4:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80139d8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80139da:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80139e4:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 80139e8:	6812      	ldr	r2, [r2, #0]
 80139ea:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80139ec:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	1d1a      	adds	r2, r3, #4
 80139f4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80139f8:	601a      	str	r2, [r3, #0]
}
 80139fa:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80139fc:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013a00:	4613      	mov	r3, r2
 8013a02:	005b      	lsls	r3, r3, #1
 8013a04:	4413      	add	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	461a      	mov	r2, r3
 8013a0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a0e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	4413      	add	r3, r2
 8013a16:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 8013a1a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	461a      	mov	r2, r3
 8013a22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a26:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013a2a:	601a      	str	r2, [r3, #0]
  return (val);
 8013a2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a30:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 8013a3a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013a3e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013a42:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8013a46:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a4a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8013a4e:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8013a52:	fb23 f302 	smuad	r3, r3, r2
 8013a56:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8013a5a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013a5e:	0c1b      	lsrs	r3, r3, #16
 8013a60:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8013a64:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013a68:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013a6c:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8013a70:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a74:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8013a78:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8013a7c:	fb43 f312 	smusdx	r3, r3, r2
 8013a80:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8013a84:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8013a88:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8013a8c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8013a96:	4b2e      	ldr	r3, [pc, #184]	@ (8013b50 <arm_radix4_butterfly_q15+0xa8c>)
 8013a98:	400b      	ands	r3, r1
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	461a      	mov	r2, r3
 8013a9e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013aa2:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8013aa6:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8013aaa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013aae:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8013ab2:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8013ab6:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013ab8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ac2:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8013ac6:	6812      	ldr	r2, [r2, #0]
 8013ac8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013aca:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	1d1a      	adds	r2, r3, #4
 8013ad2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013ad6:	601a      	str	r2, [r3, #0]
}
 8013ad8:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8013ada:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ade:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013ae2:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	4413      	add	r3, r2
 8013aea:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 8013aee:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013af2:	3b01      	subs	r3, #1
 8013af4:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013af8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f47f ab44 	bne.w	801318a <arm_radix4_butterfly_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8013b02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b06:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013b0a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013b0e:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8013b12:	6812      	ldr	r2, [r2, #0]
 8013b14:	0092      	lsls	r2, r2, #2
 8013b16:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8013b18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b1c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	089b      	lsrs	r3, r3, #2
 8013b24:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8013b28:	f000 bcc6 	b.w	80144b8 <arm_radix4_butterfly_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8013b2c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b30:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 8013b34:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b38:	089b      	lsrs	r3, r3, #2
 8013b3a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8013b44:	2300      	movs	r3, #0
 8013b46:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013b4a:	f000 bc9d 	b.w	8014488 <arm_radix4_butterfly_q15+0x13c4>
 8013b4e:	bf00      	nop
 8013b50:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8013b54:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013b5e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013b62:	6812      	ldr	r2, [r2, #0]
 8013b64:	441a      	add	r2, r3
 8013b66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b6a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013b6e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013b70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b74:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b82:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013b86:	601a      	str	r2, [r3, #0]
  return (val);
 8013b88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b8c:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8013b96:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013b9a:	00db      	lsls	r3, r3, #3
 8013b9c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ba0:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013ba4:	6812      	ldr	r2, [r2, #0]
 8013ba6:	441a      	add	r2, r3
 8013ba8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013bb0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013bb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bb6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bc4:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013bc8:	601a      	str	r2, [r3, #0]
  return (val);
 8013bca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bce:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8013bd8:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	461a      	mov	r2, r3
 8013be6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bea:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	441a      	add	r2, r3
 8013bf2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bf6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013bfa:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013bfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c00:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c0e:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013c12:	601a      	str	r2, [r3, #0]
  return (val);
 8013c14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c18:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8013c22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c26:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013c2a:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	4413      	add	r3, r2
 8013c32:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 8013c36:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013c40:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013c44:	6812      	ldr	r2, [r2, #0]
 8013c46:	441a      	add	r2, r3
 8013c48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c4c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013c50:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8013c52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c56:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013c60:	009b      	lsls	r3, r3, #2
 8013c62:	441a      	add	r2, r3
 8013c64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c68:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013c6c:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8013c6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c72:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	441a      	add	r2, r3
 8013c80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c84:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013c88:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8013c8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c8e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	441a      	add	r2, r3
 8013c9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ca0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013ca4:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8013ca6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013caa:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8013cae:	e3dc      	b.n	801446a <arm_radix4_butterfly_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8013cb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cb4:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cbe:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013cc2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013cc4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cc8:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cd6:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013cda:	601a      	str	r2, [r3, #0]
  return (val);
 8013cdc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ce0:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8013cea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cee:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cf8:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013cfc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013cfe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d02:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d10:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8013d14:	601a      	str	r2, [r3, #0]
  return (val);
 8013d16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d1a:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8013d24:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013d28:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013d2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d30:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013d34:	6019      	str	r1, [r3, #0]
 8013d36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d3a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8013d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d44:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013d4e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8013d52:	6812      	ldr	r2, [r2, #0]
 8013d54:	fa93 f212 	qadd16	r2, r3, r2
 8013d58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d5c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013d60:	601a      	str	r2, [r3, #0]
  return(result);
 8013d62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d66:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8013d70:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013d74:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013d78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d7c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013d80:	6019      	str	r1, [r3, #0]
 8013d82:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d86:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8013d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d90:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013d9a:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8013d9e:	6812      	ldr	r2, [r2, #0]
 8013da0:	fad3 f212 	qsub16	r2, r3, r2
 8013da4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013da8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8013dac:	601a      	str	r2, [r3, #0]
  return(result);
 8013dae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013db2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8013dbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dc0:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dca:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8013dce:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013dd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dd4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	461a      	mov	r2, r3
 8013dde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013de2:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8013de6:	601a      	str	r2, [r3, #0]
  return (val);
 8013de8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dec:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8013df6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dfa:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e04:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013e08:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013e0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e0e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	461a      	mov	r2, r3
 8013e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e1c:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8013e20:	601a      	str	r2, [r3, #0]
  return (val);
 8013e22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e26:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8013e30:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013e34:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013e38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e3c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013e40:	6019      	str	r1, [r3, #0]
 8013e42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e46:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8013e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013e4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e50:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013e5a:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8013e5e:	6812      	ldr	r2, [r2, #0]
 8013e60:	fa93 f212 	qadd16	r2, r3, r2
 8013e64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e68:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8013e6c:	601a      	str	r2, [r3, #0]
  return(result);
 8013e6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e72:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8013e7c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013e80:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e88:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013e8c:	6019      	str	r1, [r3, #0]
 8013e8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e92:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8013e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013e98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e9c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ea6:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8013eaa:	6812      	ldr	r2, [r2, #0]
 8013eac:	fa93 f222 	shadd16	r2, r3, r2
 8013eb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013eb4:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013eb8:	601a      	str	r2, [r3, #0]
  return(result);
 8013eba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ebe:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8013ec8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8013ecc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ed0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013ed4:	601a      	str	r2, [r3, #0]
 8013ed6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013eda:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8013ede:	2200      	movs	r2, #0
 8013ee0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ee2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ee6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ef0:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8013ef4:	6812      	ldr	r2, [r2, #0]
 8013ef6:	fa93 f222 	shadd16	r2, r3, r2
 8013efa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013efe:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013f02:	601a      	str	r2, [r3, #0]
  return(result);
 8013f04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f08:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 8013f12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f16:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f20:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f2a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8013f2e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8013f32:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE void write_q15x2 (
  q15_t * pQ15,
  q31_t   value)
{
  q31_t val = value;
 8013f34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f38:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8013f3c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013f40:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8013f44:	6812      	ldr	r2, [r2, #0]
 8013f46:	601a      	str	r2, [r3, #0]

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (pQ15, &val, 4);
 8013f48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f4c:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f56:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	601a      	str	r2, [r3, #0]
#else
  pQ15[0] = (q15_t)(val & 0x0FFFF);
  pQ15[1] = (q15_t)(val >> 16);
#endif
}
 8013f5e:	bf00      	nop
        pSi0 += 2 * n1;
 8013f60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f64:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	441a      	add	r2, r3
 8013f72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f76:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f7a:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8013f7c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013f80:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013f84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f88:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013f8c:	6019      	str	r1, [r3, #0]
 8013f8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f92:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8013f96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013f98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f9c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013fa6:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8013faa:	6812      	ldr	r2, [r2, #0]
 8013fac:	fad3 f222 	shsub16	r2, r3, r2
 8013fb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fb4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013fb8:	601a      	str	r2, [r3, #0]
  return(result);
 8013fba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fbe:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16U;
 8013fc8:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8013fcc:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013fd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fd4:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8013fd8:	6019      	str	r1, [r3, #0]
 8013fda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fde:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8013fe2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013fe4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fe8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ff2:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8013ff6:	6812      	ldr	r2, [r2, #0]
 8013ff8:	fb23 f202 	smuad	r2, r3, r2
 8013ffc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014000:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8014004:	601a      	str	r2, [r3, #0]
  return(result);
 8014006:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801400a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	0c1b      	lsrs	r3, r3, #16
 8014012:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 8014016:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 801401a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801401e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014022:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8014026:	6019      	str	r1, [r3, #0]
 8014028:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801402c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8014030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014032:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014036:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014040:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8014044:	6812      	ldr	r2, [r2, #0]
 8014046:	fb43 f212 	smusdx	r2, r3, r2
 801404a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801404e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8014052:	601a      	str	r2, [r3, #0]
  return(result);
 8014054:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014058:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8014062:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014066:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801406a:	681a      	ldr	r2, [r3, #0]
 801406c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014070:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8014074:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014076:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801407a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	461a      	mov	r2, r3
 8014084:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014088:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 801408c:	601a      	str	r2, [r3, #0]
  return (val);
 801408e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014092:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 801409c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140a0:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80140a4:	681a      	ldr	r2, [r3, #0]
 80140a6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80140aa:	b299      	uxth	r1, r3
 80140ac:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80140b0:	4bd9      	ldr	r3, [pc, #868]	@ (8014418 <arm_radix4_butterfly_q15+0x1354>)
 80140b2:	4003      	ands	r3, r0
 80140b4:	430b      	orrs	r3, r1
 80140b6:	4619      	mov	r1, r3
 80140b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140bc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140c6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80140ca:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80140cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140d0:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80140d4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80140d8:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 80140dc:	6812      	ldr	r2, [r2, #0]
 80140de:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80140e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140e4:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80140e8:	681a      	ldr	r2, [r3, #0]
 80140ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140ee:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	601a      	str	r2, [r3, #0]
}
 80140f6:	bf00      	nop
        pSi1 += 2 * n1;
 80140f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140fc:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	441a      	add	r2, r3
 801410a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801410e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014112:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8014114:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014118:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801411c:	681a      	ldr	r2, [r3, #0]
 801411e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014122:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8014126:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014128:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801412c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	461a      	mov	r2, r3
 8014136:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801413a:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 801413e:	601a      	str	r2, [r3, #0]
  return (val);
 8014140:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014144:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 801414e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014152:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014156:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801415a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801415e:	6019      	str	r1, [r3, #0]
 8014160:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014164:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8014168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801416a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801416e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014178:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 801417c:	6812      	ldr	r2, [r2, #0]
 801417e:	fad3 f212 	qsub16	r2, r3, r2
 8014182:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014186:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801418a:	601a      	str	r2, [r3, #0]
  return(result);
 801418c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014190:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 801419a:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801419e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80141a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141a6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80141aa:	6019      	str	r1, [r3, #0]
 80141ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141b0:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80141b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80141b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141ba:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80141c4:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 80141c8:	6812      	ldr	r2, [r2, #0]
 80141ca:	faa3 f222 	shasx	r2, r3, r2
 80141ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141d2:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80141d6:	601a      	str	r2, [r3, #0]
  return(result);
 80141d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141dc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 80141e6:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80141ea:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80141ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80141f6:	6019      	str	r1, [r3, #0]
 80141f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141fc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8014200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014202:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014206:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014210:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8014214:	6812      	ldr	r2, [r2, #0]
 8014216:	fae3 f222 	shsax	r2, r3, r2
 801421a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801421e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8014222:	601a      	str	r2, [r3, #0]
  return(result);
 8014224:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014228:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16U;
 8014232:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8014236:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801423a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801423e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014242:	6019      	str	r1, [r3, #0]
 8014244:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014248:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801424c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801424e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014252:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801425c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8014260:	6812      	ldr	r2, [r2, #0]
 8014262:	fb23 f202 	smuad	r2, r3, r2
 8014266:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801426a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801426e:	601a      	str	r2, [r3, #0]
  return(result);
 8014270:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014274:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	0c1b      	lsrs	r3, r3, #16
 801427c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C1, S);
 8014280:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8014284:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014288:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801428c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8014290:	6019      	str	r1, [r3, #0]
 8014292:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014296:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 801429a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801429c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142a0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80142aa:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 80142ae:	6812      	ldr	r2, [r2, #0]
 80142b0:	fb43 f212 	smusdx	r2, r3, r2
 80142b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142b8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80142bc:	601a      	str	r2, [r3, #0]
  return(result);
 80142be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142c2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 80142cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142d0:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80142d4:	681a      	ldr	r2, [r3, #0]
 80142d6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80142da:	b299      	uxth	r1, r3
 80142dc:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80142e0:	4b4d      	ldr	r3, [pc, #308]	@ (8014418 <arm_radix4_butterfly_q15+0x1354>)
 80142e2:	4003      	ands	r3, r0
 80142e4:	430b      	orrs	r3, r1
 80142e6:	4619      	mov	r1, r3
 80142e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ec:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80142f0:	601a      	str	r2, [r3, #0]
 80142f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80142fa:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80142fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014300:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8014304:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014308:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 801430c:	6812      	ldr	r2, [r2, #0]
 801430e:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8014310:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014314:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801431e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	601a      	str	r2, [r3, #0]
}
 8014326:	bf00      	nop
        pSi2 += 2 * n1;
 8014328:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801432c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014330:	681a      	ldr	r2, [r3, #0]
 8014332:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	441a      	add	r2, r3
 801433a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801433e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014342:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUAD(C3, R) >> 16U;
 8014344:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8014348:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801434c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014350:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8014354:	6019      	str	r1, [r3, #0]
 8014356:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801435a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801435e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014360:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014364:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801436e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8014372:	6812      	ldr	r2, [r2, #0]
 8014374:	fb23 f202 	smuad	r2, r3, r2
 8014378:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801437c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8014380:	601a      	str	r2, [r3, #0]
  return(result);
 8014382:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014386:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	0c1b      	lsrs	r3, r3, #16
 801438e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C3, R);
 8014392:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8014396:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801439a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801439e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80143a2:	6019      	str	r1, [r3, #0]
 80143a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80143ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80143ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80143bc:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 80143c0:	6812      	ldr	r2, [r2, #0]
 80143c2:	fb43 f212 	smusdx	r2, r3, r2
 80143c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143ca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80143ce:	601a      	str	r2, [r3, #0]
  return(result);
 80143d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 80143de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143e2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80143ec:	b299      	uxth	r1, r3
 80143ee:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80143f2:	4b09      	ldr	r3, [pc, #36]	@ (8014418 <arm_radix4_butterfly_q15+0x1354>)
 80143f4:	4003      	ands	r3, r0
 80143f6:	430b      	orrs	r3, r1
 80143f8:	4619      	mov	r1, r3
 80143fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014408:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801440c:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801440e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014412:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8014416:	e001      	b.n	801441c <arm_radix4_butterfly_q15+0x1358>
 8014418:	ffff0000 	.word	0xffff0000
 801441c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014420:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8014424:	6812      	ldr	r2, [r2, #0]
 8014426:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8014428:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801442c:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014436:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	601a      	str	r2, [r3, #0]
}
 801443e:	bf00      	nop
        pSi3 += 2 * n1;
 8014440:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014444:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	441a      	add	r2, r3
 8014452:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014456:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801445a:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 801445c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8014460:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014464:	4413      	add	r3, r2
 8014466:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 801446a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801446e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014472:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	429a      	cmp	r2, r3
 801447a:	f4ff ac19 	bcc.w	8013cb0 <arm_radix4_butterfly_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 801447e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014482:	3301      	adds	r3, #1
 8014484:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014488:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801448c:	3b01      	subs	r3, #1
 801448e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8014492:	429a      	cmp	r2, r3
 8014494:	f67f ab5e 	bls.w	8013b54 <arm_radix4_butterfly_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8014498:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801449c:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80144a0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80144a4:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80144a8:	6812      	ldr	r2, [r2, #0]
 80144aa:	0092      	lsls	r2, r2, #2
 80144ac:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80144ae:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80144b2:	089b      	lsrs	r3, r3, #2
 80144b4:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80144b8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80144bc:	2b04      	cmp	r3, #4
 80144be:	f63f ab35 	bhi.w	8013b2c <arm_radix4_butterfly_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 80144c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144c6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	089b      	lsrs	r3, r3, #2
 80144ce:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 80144d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144d6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144da:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80144de:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80144e2:	6812      	ldr	r2, [r2, #0]
 80144e4:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 80144e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144ea:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	1d1a      	adds	r2, r3, #4
 80144f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144f6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144fa:	601a      	str	r2, [r3, #0]
 80144fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014500:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	1f1a      	subs	r2, r3, #4
 8014508:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801450c:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8014510:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014512:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014516:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	461a      	mov	r2, r3
 8014520:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014524:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8014528:	601a      	str	r2, [r3, #0]
  return (val);
 801452a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801452e:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8014538:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801453c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	1d1a      	adds	r2, r3, #4
 8014544:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014548:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014552:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	1f1a      	subs	r2, r3, #4
 801455a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801455e:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8014562:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014564:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014568:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	461a      	mov	r2, r3
 8014572:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014576:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 801457a:	601a      	str	r2, [r3, #0]
  return (val);
 801457c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014580:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 801458a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801458e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	1d1a      	adds	r2, r3, #4
 8014596:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801459a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801459e:	601a      	str	r2, [r3, #0]
 80145a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145a4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	1f1a      	subs	r2, r3, #4
 80145ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145b0:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80145b4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80145b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145ba:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	461a      	mov	r2, r3
 80145c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145c8:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80145cc:	601a      	str	r2, [r3, #0]
  return (val);
 80145ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145d2:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 80145dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145e0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	1d1a      	adds	r2, r3, #4
 80145e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145ec:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145f0:	601a      	str	r2, [r3, #0]
 80145f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145f6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	1f1a      	subs	r2, r3, #4
 80145fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014602:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8014606:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014608:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801460c:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	461a      	mov	r2, r3
 8014616:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801461a:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801461e:	601a      	str	r2, [r3, #0]
  return (val);
 8014620:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014624:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 801462e:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014632:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8014636:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801463a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 801463e:	6019      	str	r1, [r3, #0]
 8014640:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014644:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8014648:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801464a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801464e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014658:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 801465c:	6812      	ldr	r2, [r2, #0]
 801465e:	fa93 f212 	qadd16	r2, r3, r2
 8014662:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014666:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 801466a:	601a      	str	r2, [r3, #0]
  return(result);
 801466c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014670:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 801467a:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801467e:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014682:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014686:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801468a:	6019      	str	r1, [r3, #0]
 801468c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014690:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8014694:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014696:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801469a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80146a4:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 80146a8:	6812      	ldr	r2, [r2, #0]
 80146aa:	fa93 f212 	qadd16	r2, r3, r2
 80146ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146b2:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80146b6:	601a      	str	r2, [r3, #0]
  return(result);
 80146b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146bc:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 80146c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ca:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f1a3 0210 	sub.w	r2, r3, #16
 80146d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146d8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80146dc:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 80146de:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80146e2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80146e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ea:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80146ee:	6019      	str	r1, [r3, #0]
 80146f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146f4:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80146f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146fe:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014708:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 801470c:	6812      	ldr	r2, [r2, #0]
 801470e:	fa93 f222 	shadd16	r2, r3, r2
 8014712:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014716:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 801471a:	601a      	str	r2, [r3, #0]
  return(result);
 801471c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014720:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	4619      	mov	r1, r3
 8014728:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801472c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014730:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014734:	601a      	str	r2, [r3, #0]
 8014736:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801473a:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 801473e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014740:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014744:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8014748:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801474c:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8014750:	6812      	ldr	r2, [r2, #0]
 8014752:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014754:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014758:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014764:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8014768:	6812      	ldr	r2, [r2, #0]
 801476a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801476c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014770:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	1d1a      	adds	r2, r3, #4
 801477a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801477e:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	601a      	str	r2, [r3, #0]
}
 8014786:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8014788:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801478c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014790:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014794:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8014798:	6019      	str	r1, [r3, #0]
 801479a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801479e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80147a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147a8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147b2:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 80147b6:	6812      	ldr	r2, [r2, #0]
 80147b8:	fa93 f212 	qadd16	r2, r3, r2
 80147bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147c0:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80147c4:	601a      	str	r2, [r3, #0]
  return(result);
 80147c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ca:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 80147d4:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80147d8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80147dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147e0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80147e4:	6019      	str	r1, [r3, #0]
 80147e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ea:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80147ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147f4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147fe:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8014802:	6812      	ldr	r2, [r2, #0]
 8014804:	fad3 f222 	shsub16	r2, r3, r2
 8014808:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801480c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8014810:	601a      	str	r2, [r3, #0]
  return(result);
 8014812:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014816:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4619      	mov	r1, r3
 801481e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014822:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014826:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 801482a:	601a      	str	r2, [r3, #0]
 801482c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014830:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8014834:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014836:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801483a:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 801483e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014842:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 8014846:	6812      	ldr	r2, [r2, #0]
 8014848:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801484a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801484e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801485a:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 801485e:	6812      	ldr	r2, [r2, #0]
 8014860:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014862:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014866:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	1d1a      	adds	r2, r3, #4
 8014870:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014874:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	601a      	str	r2, [r3, #0]
}
 801487c:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 801487e:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014882:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8014886:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801488a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801488e:	6019      	str	r1, [r3, #0]
 8014890:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014894:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8014898:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801489a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801489e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80148a8:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 80148ac:	6812      	ldr	r2, [r2, #0]
 80148ae:	fad3 f212 	qsub16	r2, r3, r2
 80148b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148b6:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80148ba:	601a      	str	r2, [r3, #0]
  return(result);
 80148bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148c0:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80148ca:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80148ce:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80148d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148d6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80148da:	6019      	str	r1, [r3, #0]
 80148dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148e0:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80148e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80148e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148ea:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80148f4:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 80148f8:	6812      	ldr	r2, [r2, #0]
 80148fa:	fad3 f212 	qsub16	r2, r3, r2
 80148fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014902:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8014906:	601a      	str	r2, [r3, #0]
  return(result);
 8014908:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801490c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8014916:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801491a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801491e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014922:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014926:	6019      	str	r1, [r3, #0]
 8014928:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801492c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8014930:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014932:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014936:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014940:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 8014944:	6812      	ldr	r2, [r2, #0]
 8014946:	fae3 f222 	shsax	r2, r3, r2
 801494a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801494e:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014952:	601a      	str	r2, [r3, #0]
  return(result);
 8014954:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014958:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	4619      	mov	r1, r3
 8014960:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014964:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014968:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014972:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014976:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014978:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801497c:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8014980:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014984:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8014988:	6812      	ldr	r2, [r2, #0]
 801498a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801498c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014990:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801499c:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 80149a0:	6812      	ldr	r2, [r2, #0]
 80149a2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80149a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149a8:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	1d1a      	adds	r2, r3, #4
 80149b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149b6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	601a      	str	r2, [r3, #0]
}
 80149be:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 80149c0:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80149c4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80149c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149cc:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80149d0:	6019      	str	r1, [r3, #0]
 80149d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149d6:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80149da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80149dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149e0:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149ea:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 80149ee:	6812      	ldr	r2, [r2, #0]
 80149f0:	faa3 f222 	shasx	r2, r3, r2
 80149f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149f8:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80149fc:	601a      	str	r2, [r3, #0]
  return(result);
 80149fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a02:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4619      	mov	r1, r3
 8014a0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a0e:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a12:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014a16:	601a      	str	r2, [r3, #0]
 8014a18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a1c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8014a20:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014a22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a26:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8014a2a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a2e:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 8014a32:	6812      	ldr	r2, [r2, #0]
 8014a34:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014a36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a3a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a46:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8014a4a:	6812      	ldr	r2, [r2, #0]
 8014a4c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014a4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a52:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	1d1a      	adds	r2, r3, #4
 8014a5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a60:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	601a      	str	r2, [r3, #0]
}
 8014a68:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8014a6a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014a74:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f47f ad34 	bne.w	80144e6 <arm_radix4_butterfly_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8014a7e:	bf00      	nop
 8014a80:	bf00      	nop
 8014a82:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bc90      	pop	{r4, r7}
 8014a8a:	4770      	bx	lr

08014a8c <arm_radix4_butterfly_inverse_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_inverse_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 8014a8c:	b490      	push	{r4, r7}
 8014a8e:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 8014a98:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 8014a9c:	6020      	str	r0, [r4, #0]
 8014a9e:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8014aa2:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8014aa6:	6001      	str	r1, [r0, #0]
 8014aa8:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8014aac:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8014ab0:	600a      	str	r2, [r1, #0]
 8014ab2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ab6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8014aba:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8014abc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ac0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8014aca:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014ace:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8014ad2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014ad6:	089b      	lsrs	r3, r3, #2
 8014ad8:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8014adc:	2300      	movs	r3, #0
 8014ade:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 8014ae2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014ae6:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8014aea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aee:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014af2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014af6:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8014afa:	6812      	ldr	r2, [r2, #0]
 8014afc:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8014afe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b02:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014b06:	681a      	ldr	r2, [r3, #0]
 8014b08:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b0c:	009b      	lsls	r3, r3, #2
 8014b0e:	441a      	add	r2, r3
 8014b10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b14:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014b18:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8014b1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b1e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	441a      	add	r2, r3
 8014b2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b30:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014b34:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8014b36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b3a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	441a      	add	r2, r3
 8014b48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b4c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014b50:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 8014b52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b56:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b60:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014b64:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014b66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b6a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	461a      	mov	r2, r3
 8014b74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b78:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014b7c:	601a      	str	r2, [r3, #0]
  return (val);
 8014b7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b82:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014b8c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014b90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014b98:	601a      	str	r2, [r3, #0]
 8014b9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b9e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ba6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014baa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bb4:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8014bb8:	6812      	ldr	r2, [r2, #0]
 8014bba:	fa93 f222 	shadd16	r2, r3, r2
 8014bbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bc2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014bc6:	601a      	str	r2, [r3, #0]
  return(result);
 8014bc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bcc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014bd6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014bda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bde:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014be2:	601a      	str	r2, [r3, #0]
 8014be4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014be8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014bec:	2200      	movs	r2, #0
 8014bee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bf0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bf4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bfe:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 8014c02:	6812      	ldr	r2, [r2, #0]
 8014c04:	fa93 f222 	shadd16	r2, r3, r2
 8014c08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c0c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014c10:	601a      	str	r2, [r3, #0]
  return(result);
 8014c12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c16:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8014c20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c24:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c2e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014c32:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014c34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c38:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	461a      	mov	r2, r3
 8014c42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c46:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014c4a:	601a      	str	r2, [r3, #0]
  return (val);
 8014c4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c50:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014c5a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014c5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c62:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014c66:	601a      	str	r2, [r3, #0]
 8014c68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c6c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8014c70:	2200      	movs	r2, #0
 8014c72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c78:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c82:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8014c86:	6812      	ldr	r2, [r2, #0]
 8014c88:	fa93 f222 	shadd16	r2, r3, r2
 8014c8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c90:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014c94:	601a      	str	r2, [r3, #0]
  return(result);
 8014c96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c9a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014ca4:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014ca8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014cb0:	601a      	str	r2, [r3, #0]
 8014cb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cb6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8014cba:	2200      	movs	r2, #0
 8014cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014cbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cc2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ccc:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8014cd0:	6812      	ldr	r2, [r2, #0]
 8014cd2:	fa93 f222 	shadd16	r2, r3, r2
 8014cd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cda:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014cde:	601a      	str	r2, [r3, #0]
  return(result);
 8014ce0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ce4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8014cee:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014cf2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014cf6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cfa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014cfe:	6019      	str	r1, [r3, #0]
 8014d00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d04:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d0e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d18:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8014d1c:	6812      	ldr	r2, [r2, #0]
 8014d1e:	fa93 f212 	qadd16	r2, r3, r2
 8014d22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014d2a:	601a      	str	r2, [r3, #0]
  return(result);
 8014d2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8014d3a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014d3e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014d42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d46:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014d4a:	6019      	str	r1, [r3, #0]
 8014d4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d50:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8014d54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d5a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d64:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8014d68:	6812      	ldr	r2, [r2, #0]
 8014d6a:	fad3 f212 	qsub16	r2, r3, r2
 8014d6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d72:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014d76:	601a      	str	r2, [r3, #0]
  return(result);
 8014d78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d7c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8014d86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d8a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d94:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014d98:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014d9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d9e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	461a      	mov	r2, r3
 8014da8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dac:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8014db0:	601a      	str	r2, [r3, #0]
  return (val);
 8014db2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014db6:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014dc0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014dc4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dd2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014dda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dde:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014de8:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8014dec:	6812      	ldr	r2, [r2, #0]
 8014dee:	fa93 f222 	shadd16	r2, r3, r2
 8014df2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014df6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014dfa:	601a      	str	r2, [r3, #0]
  return(result);
 8014dfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e00:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014e0a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014e0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e12:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014e16:	601a      	str	r2, [r3, #0]
 8014e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e1c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8014e20:	2200      	movs	r2, #0
 8014e22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e28:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e32:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8014e36:	6812      	ldr	r2, [r2, #0]
 8014e38:	fa93 f222 	shadd16	r2, r3, r2
 8014e3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e40:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014e44:	601a      	str	r2, [r3, #0]
  return(result);
 8014e46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8014e54:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e58:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e62:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014e66:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014e68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e6c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	461a      	mov	r2, r3
 8014e76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e7a:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014e7e:	601a      	str	r2, [r3, #0]
  return (val);
 8014e80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e84:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014e8e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014e92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e96:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8014e9a:	601a      	str	r2, [r3, #0]
 8014e9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ea0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ea8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014eb6:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8014eba:	6812      	ldr	r2, [r2, #0]
 8014ebc:	fa93 f222 	shadd16	r2, r3, r2
 8014ec0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ec4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014ec8:	601a      	str	r2, [r3, #0]
  return(result);
 8014eca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ece:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014ed8:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014edc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ee0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014ee4:	601a      	str	r2, [r3, #0]
 8014ee6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8014eee:	2200      	movs	r2, #0
 8014ef0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ef2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ef6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f00:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8014f04:	6812      	ldr	r2, [r2, #0]
 8014f06:	fa93 f222 	shadd16	r2, r3, r2
 8014f0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014f12:	601a      	str	r2, [r3, #0]
  return(result);
 8014f14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f18:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8014f22:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014f26:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014f2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014f32:	6019      	str	r1, [r3, #0]
 8014f34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014f3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f4c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8014f50:	6812      	ldr	r2, [r2, #0]
 8014f52:	fa93 f212 	qadd16	r2, r3, r2
 8014f56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f5a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014f5e:	601a      	str	r2, [r3, #0]
  return(result);
 8014f60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 8014f6e:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014f72:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014f76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f7e:	6019      	str	r1, [r3, #0]
 8014f80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f84:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f98:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014f9c:	6812      	ldr	r2, [r2, #0]
 8014f9e:	fa93 f222 	shadd16	r2, r3, r2
 8014fa2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fa6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014faa:	601a      	str	r2, [r3, #0]
  return(result);
 8014fac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014fc0:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8014fc4:	601a      	str	r2, [r3, #0]
 8014fc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014fce:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014fd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fd4:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8014fd8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014fdc:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8014fe0:	6812      	ldr	r2, [r2, #0]
 8014fe2:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014fe4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fe8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ff4:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8014ff8:	6812      	ldr	r2, [r2, #0]
 8014ffa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014ffc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015000:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	1d1a      	adds	r2, r3, #4
 801500a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801500e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	601a      	str	r2, [r3, #0]
}
 8015016:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8015018:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801501c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015020:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015024:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015028:	6019      	str	r1, [r3, #0]
 801502a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801502e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015032:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015034:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015038:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015042:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8015046:	6812      	ldr	r2, [r2, #0]
 8015048:	fad3 f212 	qsub16	r2, r3, r2
 801504c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015050:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015054:	601a      	str	r2, [r3, #0]
  return(result);
 8015056:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801505a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8015064:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015068:	00db      	lsls	r3, r3, #3
 801506a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801506e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8015072:	6812      	ldr	r2, [r2, #0]
 8015074:	441a      	add	r2, r3
 8015076:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801507a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801507e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015080:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015084:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	461a      	mov	r2, r3
 801508e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015092:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8015096:	601a      	str	r2, [r3, #0]
  return (val);
 8015098:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801509c:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 80150a6:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80150aa:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80150ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80150b6:	6019      	str	r1, [r3, #0]
 80150b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80150c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80150c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80150d0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80150d4:	6812      	ldr	r2, [r2, #0]
 80150d6:	fb43 f202 	smusd	r2, r3, r2
 80150da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80150e2:	601a      	str	r2, [r3, #0]
  return(result);
 80150e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	0c1b      	lsrs	r3, r3, #16
 80150f0:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 80150f4:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 80150f8:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80150fc:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8015100:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015104:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8015108:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801510a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801510e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015112:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8015116:	6812      	ldr	r2, [r2, #0]
 8015118:	fb23 f212 	smuadx	r2, r3, r2
 801511c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015124:	601a      	str	r2, [r3, #0]
  return(result);
 8015126:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801512a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8015134:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015138:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 8015142:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	461a      	mov	r2, r3
 801514a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801514e:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8015152:	601a      	str	r2, [r3, #0]
  return (val);
 8015154:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015158:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8015162:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8015166:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801516a:	2300      	movs	r3, #0
 801516c:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015170:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8015174:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8015178:	fa93 f322 	shadd16	r3, r3, r2
 801517c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 8015180:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8015184:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8015188:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801518c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8015190:	2300      	movs	r3, #0
 8015192:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015196:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801519a:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 801519e:	fa93 f322 	shadd16	r3, r3, r2
 80151a2:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 80151a6:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80151aa:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 80151ae:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80151b8:	4bd7      	ldr	r3, [pc, #860]	@ (8015518 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 80151ba:	400b      	ands	r3, r1
 80151bc:	4313      	orrs	r3, r2
 80151be:	461a      	mov	r2, r3
 80151c0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80151c4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80151c8:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 80151cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151d0:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80151d4:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80151d8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80151da:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80151e4:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 80151e8:	6812      	ldr	r2, [r2, #0]
 80151ea:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80151ec:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	1d1a      	adds	r2, r3, #4
 80151f4:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80151f8:	601a      	str	r2, [r3, #0]
}
 80151fa:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 80151fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015200:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 801520a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	461a      	mov	r2, r3
 8015212:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015216:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801521a:	601a      	str	r2, [r3, #0]
  return (val);
 801521c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015220:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801522a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801522e:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8015232:	2300      	movs	r3, #0
 8015234:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015238:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801523c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8015240:	fa93 f322 	shadd16	r3, r3, r2
 8015244:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8015248:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801524c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8015250:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015254:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8015258:	2300      	movs	r3, #0
 801525a:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801525e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8015262:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8015266:	fa93 f322 	shadd16	r3, r3, r2
 801526a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 801526e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8015272:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8015276:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801527a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801527e:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8015282:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015286:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801528a:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 801528e:	fad3 f312 	qsub16	r3, r3, r2
 8015292:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 8015296:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801529a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 801529e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80152a2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80152a6:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80152aa:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152ae:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80152b2:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 80152b6:	fae3 f312 	qsax	r3, r3, r2
 80152ba:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 80152be:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80152c2:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 80152c6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80152ca:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80152ce:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80152d2:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152d6:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80152da:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 80152de:	faa3 f312 	qasx	r3, r3, r2
 80152e2:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 80152e6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80152ea:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 80152ee:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80152f2:	009b      	lsls	r3, r3, #2
 80152f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80152f8:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80152fc:	6812      	ldr	r2, [r2, #0]
 80152fe:	4413      	add	r3, r2
 8015300:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8015304:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	461a      	mov	r2, r3
 801530c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015310:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8015314:	601a      	str	r2, [r3, #0]
  return (val);
 8015316:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801531a:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 8015324:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8015328:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 801532c:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8015330:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015334:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8015338:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801533c:	fb43 f302 	smusd	r3, r3, r2
 8015340:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8015344:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8015348:	0c1b      	lsrs	r3, r3, #16
 801534a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 801534e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8015352:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8015356:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 801535a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801535e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8015362:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8015366:	fb23 f312 	smuadx	r3, r3, r2
 801536a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 801536e:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8015372:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8015376:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801537a:	b29a      	uxth	r2, r3
 801537c:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8015380:	4b65      	ldr	r3, [pc, #404]	@ (8015518 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015382:	400b      	ands	r3, r1
 8015384:	4313      	orrs	r3, r2
 8015386:	461a      	mov	r2, r3
 8015388:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 801538c:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8015390:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 8015394:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015398:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 801539c:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80153a0:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80153a2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80153ac:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 80153b0:	6812      	ldr	r2, [r2, #0]
 80153b2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80153b4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	1d1a      	adds	r2, r3, #4
 80153bc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80153c0:	601a      	str	r2, [r3, #0]
}
 80153c2:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80153c4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80153c8:	4613      	mov	r3, r2
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	4413      	add	r3, r2
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	461a      	mov	r2, r3
 80153d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153d6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4413      	add	r3, r2
 80153de:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 80153e2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	461a      	mov	r2, r3
 80153ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153ee:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80153f2:	601a      	str	r2, [r3, #0]
  return (val);
 80153f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153f8:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 8015402:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8015406:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 801540a:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 801540e:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015412:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8015416:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 801541a:	fb43 f302 	smusd	r3, r3, r2
 801541e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8015422:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8015426:	0c1b      	lsrs	r3, r3, #16
 8015428:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 801542c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8015430:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8015434:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8015438:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801543c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8015440:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8015444:	fb23 f312 	smuadx	r3, r3, r2
 8015448:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 801544c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8015450:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8015454:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015458:	b29a      	uxth	r2, r3
 801545a:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 801545e:	4b2e      	ldr	r3, [pc, #184]	@ (8015518 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015460:	400b      	ands	r3, r1
 8015462:	4313      	orrs	r3, r2
 8015464:	461a      	mov	r2, r3
 8015466:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801546a:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 801546e:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8015472:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015476:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 801547a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 801547e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015480:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801548a:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 801548e:	6812      	ldr	r2, [r2, #0]
 8015490:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015492:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	1d1a      	adds	r2, r3, #4
 801549a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 801549e:	601a      	str	r2, [r3, #0]
}
 80154a0:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 80154a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154a6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80154aa:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	4413      	add	r3, r2
 80154b2:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 80154b6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80154ba:	3b01      	subs	r3, #1
 80154bc:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80154c0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	f47f ab44 	bne.w	8014b52 <arm_radix4_butterfly_inverse_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 80154ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154ce:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80154d2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154d6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80154da:	6812      	ldr	r2, [r2, #0]
 80154dc:	0092      	lsls	r2, r2, #2
 80154de:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80154e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154e4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	089b      	lsrs	r3, r3, #2
 80154ec:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80154f0:	f000 bcc6 	b.w	8015e80 <arm_radix4_butterfly_inverse_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 80154f4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80154f8:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 80154fc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015500:	089b      	lsrs	r3, r3, #2
 8015502:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8015506:	2300      	movs	r3, #0
 8015508:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 801550c:	2300      	movs	r3, #0
 801550e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015512:	f000 bc9d 	b.w	8015e50 <arm_radix4_butterfly_inverse_q15+0x13c4>
 8015516:	bf00      	nop
 8015518:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 801551c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015520:	009b      	lsls	r3, r3, #2
 8015522:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015526:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801552a:	6812      	ldr	r2, [r2, #0]
 801552c:	441a      	add	r2, r3
 801552e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015532:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015536:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015538:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801553c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	461a      	mov	r2, r3
 8015546:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801554a:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 801554e:	601a      	str	r2, [r3, #0]
  return (val);
 8015550:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015554:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 801555e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015562:	00db      	lsls	r3, r3, #3
 8015564:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015568:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801556c:	6812      	ldr	r2, [r2, #0]
 801556e:	441a      	add	r2, r3
 8015570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015574:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015578:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801557a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801557e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	461a      	mov	r2, r3
 8015588:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801558c:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8015590:	601a      	str	r2, [r3, #0]
  return (val);
 8015592:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015596:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80155a0:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80155a4:	4613      	mov	r3, r2
 80155a6:	005b      	lsls	r3, r3, #1
 80155a8:	4413      	add	r3, r2
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	461a      	mov	r2, r3
 80155ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155b2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	441a      	add	r2, r3
 80155ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155be:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80155c2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80155c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155c8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	461a      	mov	r2, r3
 80155d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155d6:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80155da:	601a      	str	r2, [r3, #0]
  return (val);
 80155dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155e0:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 80155ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155ee:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80155f2:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	4413      	add	r3, r2
 80155fa:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 80155fe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015608:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 801560c:	6812      	ldr	r2, [r2, #0]
 801560e:	441a      	add	r2, r3
 8015610:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015614:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015618:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 801561a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801561e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015628:	009b      	lsls	r3, r3, #2
 801562a:	441a      	add	r2, r3
 801562c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015630:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015634:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8015636:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801563a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	441a      	add	r2, r3
 8015648:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801564c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015650:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8015652:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015656:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	441a      	add	r2, r3
 8015664:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015668:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801566c:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 801566e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015672:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015676:	e3dc      	b.n	8015e32 <arm_radix4_butterfly_inverse_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8015678:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801567c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015686:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 801568a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801568c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015690:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	461a      	mov	r2, r3
 801569a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801569e:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80156a2:	601a      	str	r2, [r3, #0]
  return (val);
 80156a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156a8:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 80156b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156b6:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156c0:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80156c4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80156c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156ca:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	461a      	mov	r2, r3
 80156d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156d8:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80156dc:	601a      	str	r2, [r3, #0]
  return (val);
 80156de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156e2:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 80156ec:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80156f0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80156f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156f8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80156fc:	6019      	str	r1, [r3, #0]
 80156fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015702:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8015706:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015708:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801570c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015716:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 801571a:	6812      	ldr	r2, [r2, #0]
 801571c:	fa93 f212 	qadd16	r2, r3, r2
 8015720:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015724:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015728:	601a      	str	r2, [r3, #0]
  return(result);
 801572a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801572e:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8015738:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801573c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015740:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015744:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8015748:	6019      	str	r1, [r3, #0]
 801574a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801574e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8015752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015754:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015758:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015762:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8015766:	6812      	ldr	r2, [r2, #0]
 8015768:	fad3 f212 	qsub16	r2, r3, r2
 801576c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015770:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015774:	601a      	str	r2, [r3, #0]
  return(result);
 8015776:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801577a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015784:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015788:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801578c:	681a      	ldr	r2, [r3, #0]
 801578e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015792:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8015796:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015798:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801579c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	461a      	mov	r2, r3
 80157a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157aa:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80157ae:	601a      	str	r2, [r3, #0]
  return (val);
 80157b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157b4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80157be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157c2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80157c6:	681a      	ldr	r2, [r3, #0]
 80157c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157cc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80157d0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80157d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157d6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	461a      	mov	r2, r3
 80157e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157e4:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80157e8:	601a      	str	r2, [r3, #0]
  return (val);
 80157ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157ee:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 80157f8:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80157fc:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015800:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015804:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8015808:	6019      	str	r1, [r3, #0]
 801580a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801580e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8015812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015814:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015818:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015822:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8015826:	6812      	ldr	r2, [r2, #0]
 8015828:	fa93 f212 	qadd16	r2, r3, r2
 801582c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015830:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015834:	601a      	str	r2, [r3, #0]
  return(result);
 8015836:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801583a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8015844:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015848:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801584c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015850:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015854:	6019      	str	r1, [r3, #0]
 8015856:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801585a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 801585e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015860:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015864:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801586e:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8015872:	6812      	ldr	r2, [r2, #0]
 8015874:	fa93 f222 	shadd16	r2, r3, r2
 8015878:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801587c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8015880:	601a      	str	r2, [r3, #0]
  return(result);
 8015882:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015886:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8015890:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8015894:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015898:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 801589c:	601a      	str	r2, [r3, #0]
 801589e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158a2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80158a6:	2200      	movs	r2, #0
 80158a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80158aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ae:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80158b8:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 80158bc:	6812      	ldr	r2, [r2, #0]
 80158be:	fa93 f222 	shadd16	r2, r3, r2
 80158c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158c6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80158ca:	601a      	str	r2, [r3, #0]
  return(result);
 80158cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158d0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 80158da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158de:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158e8:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158f2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80158f6:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80158fa:	601a      	str	r2, [r3, #0]
  q31_t val = value;
 80158fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015900:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8015904:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015908:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 801590c:	6812      	ldr	r2, [r2, #0]
 801590e:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015910:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015914:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8015918:	681a      	ldr	r2, [r3, #0]
 801591a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801591e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	601a      	str	r2, [r3, #0]
}
 8015926:	bf00      	nop
        pSi0 += 2 * n1;
 8015928:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801592c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015936:	009b      	lsls	r3, r3, #2
 8015938:	441a      	add	r2, r3
 801593a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801593e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015942:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8015944:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015948:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801594c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015950:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015954:	6019      	str	r1, [r3, #0]
 8015956:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801595a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 801595e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015960:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015964:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801596e:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8015972:	6812      	ldr	r2, [r2, #0]
 8015974:	fad3 f222 	shsub16	r2, r3, r2
 8015978:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801597c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8015980:	601a      	str	r2, [r3, #0]
  return(result);
 8015982:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015986:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16U;
 8015990:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8015994:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015998:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801599c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80159a0:	6019      	str	r1, [r3, #0]
 80159a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80159aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80159ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159b0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80159ba:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80159be:	6812      	ldr	r2, [r2, #0]
 80159c0:	fb43 f202 	smusd	r2, r3, r2
 80159c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159c8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80159cc:	601a      	str	r2, [r3, #0]
  return(result);
 80159ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159d2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	0c1b      	lsrs	r3, r3, #16
 80159da:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 80159de:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80159e2:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80159e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80159ee:	6019      	str	r1, [r3, #0]
 80159f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159f4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80159f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80159fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015a08:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8015a0c:	6812      	ldr	r2, [r2, #0]
 8015a0e:	fb23 f212 	smuadx	r2, r3, r2
 8015a12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a16:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015a1a:	601a      	str	r2, [r3, #0]
  return(result);
 8015a1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a20:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015a2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a2e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a38:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015a3c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015a3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a42:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a50:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015a54:	601a      	str	r2, [r3, #0]
  return (val);
 8015a56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a5a:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8015a64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a68:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015a72:	b299      	uxth	r1, r3
 8015a74:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015a78:	4bd9      	ldr	r3, [pc, #868]	@ (8015de0 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015a7a:	4003      	ands	r3, r0
 8015a7c:	430b      	orrs	r3, r1
 8015a7e:	4619      	mov	r1, r3
 8015a80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a84:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015a88:	601a      	str	r2, [r3, #0]
 8015a8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a8e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8015a92:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015a94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a98:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015a9c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015aa0:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8015aa4:	6812      	ldr	r2, [r2, #0]
 8015aa6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015aa8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aac:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ab6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	601a      	str	r2, [r3, #0]
}
 8015abe:	bf00      	nop
        pSi1 += 2 * n1;
 8015ac0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ac4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	441a      	add	r2, r3
 8015ad2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ad6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015ada:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8015adc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ae0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aea:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8015aee:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015af0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015af4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	461a      	mov	r2, r3
 8015afe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b02:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015b06:	601a      	str	r2, [r3, #0]
  return (val);
 8015b08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b0c:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8015b16:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015b1a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015b1e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b22:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015b26:	6019      	str	r1, [r3, #0]
 8015b28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b2c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8015b30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b36:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b40:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8015b44:	6812      	ldr	r2, [r2, #0]
 8015b46:	fad3 f212 	qsub16	r2, r3, r2
 8015b4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b4e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015b52:	601a      	str	r2, [r3, #0]
  return(result);
 8015b54:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b58:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 8015b62:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015b66:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015b6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b6e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015b72:	6019      	str	r1, [r3, #0]
 8015b74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b78:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8015b7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b82:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b8c:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8015b90:	6812      	ldr	r2, [r2, #0]
 8015b92:	fae3 f222 	shsax	r2, r3, r2
 8015b96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b9a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015b9e:	601a      	str	r2, [r3, #0]
  return(result);
 8015ba0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ba4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 8015bae:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015bb2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015bb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bba:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015bbe:	6019      	str	r1, [r3, #0]
 8015bc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bc4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8015bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015bca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015bd8:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8015bdc:	6812      	ldr	r2, [r2, #0]
 8015bde:	faa3 f222 	shasx	r2, r3, r2
 8015be2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015be6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015bea:	601a      	str	r2, [r3, #0]
  return(result);
 8015bec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bf0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16U;
 8015bfa:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015bfe:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015c02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c06:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015c0a:	6019      	str	r1, [r3, #0]
 8015c0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c10:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015c14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c1a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c24:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8015c28:	6812      	ldr	r2, [r2, #0]
 8015c2a:	fb43 f202 	smusd	r2, r3, r2
 8015c2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c32:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015c36:	601a      	str	r2, [r3, #0]
  return(result);
 8015c38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c3c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	0c1b      	lsrs	r3, r3, #16
 8015c44:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C1, S);
 8015c48:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015c4c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015c50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c54:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015c58:	6019      	str	r1, [r3, #0]
 8015c5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8015c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c68:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c72:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8015c76:	6812      	ldr	r2, [r2, #0]
 8015c78:	fb23 f212 	smuadx	r2, r3, r2
 8015c7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c80:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015c84:	601a      	str	r2, [r3, #0]
  return(result);
 8015c86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c8a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 8015c94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c98:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015ca2:	b299      	uxth	r1, r3
 8015ca4:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8015de0 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015caa:	4003      	ands	r3, r0
 8015cac:	430b      	orrs	r3, r1
 8015cae:	4619      	mov	r1, r3
 8015cb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cb4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015cb8:	601a      	str	r2, [r3, #0]
 8015cba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015cc2:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015cc4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cc8:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015ccc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015cd0:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 8015cd4:	6812      	ldr	r2, [r2, #0]
 8015cd6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015cd8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cdc:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015ce0:	681a      	ldr	r2, [r3, #0]
 8015ce2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ce6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	601a      	str	r2, [r3, #0]
}
 8015cee:	bf00      	nop
        pSi2 += 2 * n1;
 8015cf0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cf4:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015cfe:	009b      	lsls	r3, r3, #2
 8015d00:	441a      	add	r2, r3
 8015d02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d06:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015d0a:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUSD(C3, R) >> 16U;
 8015d0c:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015d10:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015d14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d18:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015d1c:	6019      	str	r1, [r3, #0]
 8015d1e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d22:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8015d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d2c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d36:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8015d3a:	6812      	ldr	r2, [r2, #0]
 8015d3c:	fb43 f202 	smusd	r2, r3, r2
 8015d40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d44:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015d48:	601a      	str	r2, [r3, #0]
  return(result);
 8015d4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d4e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	0c1b      	lsrs	r3, r3, #16
 8015d56:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C3, R);
 8015d5a:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015d5e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015d62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d66:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015d6a:	6019      	str	r1, [r3, #0]
 8015d6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d70:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8015d74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d84:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8015d88:	6812      	ldr	r2, [r2, #0]
 8015d8a:	fb23 f212 	smuadx	r2, r3, r2
 8015d8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015d96:	601a      	str	r2, [r3, #0]
  return(result);
 8015d98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d9c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 8015da6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015daa:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015dae:	681a      	ldr	r2, [r3, #0]
 8015db0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015db4:	b299      	uxth	r1, r3
 8015db6:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015dba:	4b09      	ldr	r3, [pc, #36]	@ (8015de0 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015dbc:	4003      	ands	r3, r0
 8015dbe:	430b      	orrs	r3, r1
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dc6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015dca:	601a      	str	r2, [r3, #0]
 8015dcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dd0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8015dd4:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015dd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dda:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8015dde:	e001      	b.n	8015de4 <arm_radix4_butterfly_inverse_q15+0x1358>
 8015de0:	ffff0000 	.word	0xffff0000
 8015de4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015de8:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8015dec:	6812      	ldr	r2, [r2, #0]
 8015dee:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015df0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015df4:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dfe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	601a      	str	r2, [r3, #0]
}
 8015e06:	bf00      	nop
        pSi3 += 2 * n1;
 8015e08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e0c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015e10:	681a      	ldr	r2, [r3, #0]
 8015e12:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	441a      	add	r2, r3
 8015e1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e1e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015e22:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8015e24:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015e28:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015e2c:	4413      	add	r3, r2
 8015e2e:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015e32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e36:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015e3a:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	f4ff ac19 	bcc.w	8015678 <arm_radix4_butterfly_inverse_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 8015e46:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015e50:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015e54:	3b01      	subs	r3, #1
 8015e56:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	f67f ab5e 	bls.w	801551c <arm_radix4_butterfly_inverse_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8015e60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e64:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8015e68:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e6c:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8015e70:	6812      	ldr	r2, [r2, #0]
 8015e72:	0092      	lsls	r2, r2, #2
 8015e74:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8015e76:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015e7a:	089b      	lsrs	r3, r3, #2
 8015e7c:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8015e80:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015e84:	2b04      	cmp	r3, #4
 8015e86:	f63f ab35 	bhi.w	80154f4 <arm_radix4_butterfly_inverse_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8015e8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e8e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	089b      	lsrs	r3, r3, #2
 8015e96:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 8015e9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e9e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ea2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ea6:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8015eaa:	6812      	ldr	r2, [r2, #0]
 8015eac:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 8015eae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eb2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	1d1a      	adds	r2, r3, #4
 8015eba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ebe:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ec2:	601a      	str	r2, [r3, #0]
 8015ec4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ec8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	1f1a      	subs	r2, r3, #4
 8015ed0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ed4:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8015ed8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015eda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ede:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eec:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8015ef0:	601a      	str	r2, [r3, #0]
  return (val);
 8015ef2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ef6:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8015f00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f04:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	1d1a      	adds	r2, r3, #4
 8015f0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f10:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f14:	601a      	str	r2, [r3, #0]
 8015f16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f1a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	1f1a      	subs	r2, r3, #4
 8015f22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f26:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015f2a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015f2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f30:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	461a      	mov	r2, r3
 8015f3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f3e:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015f42:	601a      	str	r2, [r3, #0]
  return (val);
 8015f44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f48:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 8015f52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f56:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	1d1a      	adds	r2, r3, #4
 8015f5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f62:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f66:	601a      	str	r2, [r3, #0]
 8015f68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f6c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	1f1a      	subs	r2, r3, #4
 8015f74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f78:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015f7c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015f7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f82:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f90:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015f94:	601a      	str	r2, [r3, #0]
  return (val);
 8015f96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f9a:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 8015fa4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fa8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	1d1a      	adds	r2, r3, #4
 8015fb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fb4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015fb8:	601a      	str	r2, [r3, #0]
 8015fba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fbe:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	1f1a      	subs	r2, r3, #4
 8015fc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fca:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015fce:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015fd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fd4:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	461a      	mov	r2, r3
 8015fde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fe2:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8015fe6:	601a      	str	r2, [r3, #0]
  return (val);
 8015fe8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fec:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8015ff6:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8015ffa:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8015ffe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016002:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8016006:	6019      	str	r1, [r3, #0]
 8016008:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801600c:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8016010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016012:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016016:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016020:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8016024:	6812      	ldr	r2, [r2, #0]
 8016026:	fa93 f212 	qadd16	r2, r3, r2
 801602a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801602e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8016032:	601a      	str	r2, [r3, #0]
  return(result);
 8016034:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016038:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016042:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016046:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801604a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801604e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8016052:	6019      	str	r1, [r3, #0]
 8016054:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016058:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 801605c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801605e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016062:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801606c:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8016070:	6812      	ldr	r2, [r2, #0]
 8016072:	fa93 f212 	qadd16	r2, r3, r2
 8016076:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801607a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 801607e:	601a      	str	r2, [r3, #0]
  return(result);
 8016080:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016084:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 801608e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016092:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	f1a3 0210 	sub.w	r2, r3, #16
 801609c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160a0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80160a4:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 80160a6:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80160aa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80160ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160b2:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80160b6:	6019      	str	r1, [r3, #0]
 80160b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160bc:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80160c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80160c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160c6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80160d0:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 80160d4:	6812      	ldr	r2, [r2, #0]
 80160d6:	fa93 f222 	shadd16	r2, r3, r2
 80160da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160de:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80160e2:	601a      	str	r2, [r3, #0]
  return(result);
 80160e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160e8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	4619      	mov	r1, r3
 80160f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160f4:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80160f8:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80160fc:	601a      	str	r2, [r3, #0]
 80160fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016102:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8016106:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016108:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801610c:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8016110:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016114:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8016118:	6812      	ldr	r2, [r2, #0]
 801611a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801611c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016120:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801612c:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8016130:	6812      	ldr	r2, [r2, #0]
 8016132:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016134:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016138:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	1d1a      	adds	r2, r3, #4
 8016142:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016146:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	601a      	str	r2, [r3, #0]
}
 801614e:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016150:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016154:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8016158:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801615c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016160:	6019      	str	r1, [r3, #0]
 8016162:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016166:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801616a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801616c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016170:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801617a:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 801617e:	6812      	ldr	r2, [r2, #0]
 8016180:	fa93 f212 	qadd16	r2, r3, r2
 8016184:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016188:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801618c:	601a      	str	r2, [r3, #0]
  return(result);
 801618e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016192:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 801619c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80161a0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80161a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161a8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80161ac:	6019      	str	r1, [r3, #0]
 80161ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161b2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80161b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80161b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161bc:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80161c6:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80161ca:	6812      	ldr	r2, [r2, #0]
 80161cc:	fad3 f222 	shsub16	r2, r3, r2
 80161d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161d4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80161d8:	601a      	str	r2, [r3, #0]
  return(result);
 80161da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161de:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	4619      	mov	r1, r3
 80161e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ea:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80161ee:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80161f2:	601a      	str	r2, [r3, #0]
 80161f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161f8:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80161fc:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80161fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016202:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8016206:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801620a:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 801620e:	6812      	ldr	r2, [r2, #0]
 8016210:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016212:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016216:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016222:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8016226:	6812      	ldr	r2, [r2, #0]
 8016228:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801622a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801622e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	1d1a      	adds	r2, r3, #4
 8016238:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801623c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	601a      	str	r2, [r3, #0]
}
 8016244:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8016246:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 801624a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 801624e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016252:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8016256:	6019      	str	r1, [r3, #0]
 8016258:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801625c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8016260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016262:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016266:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016270:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8016274:	6812      	ldr	r2, [r2, #0]
 8016276:	fad3 f212 	qsub16	r2, r3, r2
 801627a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801627e:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8016282:	601a      	str	r2, [r3, #0]
  return(result);
 8016284:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016288:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 8016292:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016296:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801629a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801629e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80162a2:	6019      	str	r1, [r3, #0]
 80162a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162a8:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80162ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80162ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162b2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80162bc:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 80162c0:	6812      	ldr	r2, [r2, #0]
 80162c2:	fad3 f212 	qsub16	r2, r3, r2
 80162c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ca:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80162ce:	601a      	str	r2, [r3, #0]
  return(result);
 80162d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162d4:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 80162de:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80162e2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80162e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ea:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80162ee:	6019      	str	r1, [r3, #0]
 80162f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162f4:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80162f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80162fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162fe:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016308:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 801630c:	6812      	ldr	r2, [r2, #0]
 801630e:	faa3 f222 	shasx	r2, r3, r2
 8016312:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016316:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 801631a:	601a      	str	r2, [r3, #0]
  return(result);
 801631c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016320:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	4619      	mov	r1, r3
 8016328:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801632c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016330:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016334:	601a      	str	r2, [r3, #0]
 8016336:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801633a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801633e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016340:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016344:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8016348:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801634c:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8016350:	6812      	ldr	r2, [r2, #0]
 8016352:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016354:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016358:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016364:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 8016368:	6812      	ldr	r2, [r2, #0]
 801636a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801636c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016370:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	1d1a      	adds	r2, r3, #4
 801637a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801637e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	601a      	str	r2, [r3, #0]
}
 8016386:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8016388:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801638c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8016390:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016394:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8016398:	6019      	str	r1, [r3, #0]
 801639a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801639e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80163a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80163a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163a8:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80163b2:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 80163b6:	6812      	ldr	r2, [r2, #0]
 80163b8:	fae3 f222 	shsax	r2, r3, r2
 80163bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163c0:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80163c4:	601a      	str	r2, [r3, #0]
  return(result);
 80163c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163ca:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	4619      	mov	r1, r3
 80163d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163d6:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80163da:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80163de:	601a      	str	r2, [r3, #0]
 80163e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163e4:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80163e8:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80163ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163ee:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80163f2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80163f6:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 80163fa:	6812      	ldr	r2, [r2, #0]
 80163fc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80163fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016402:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801640e:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8016412:	6812      	ldr	r2, [r2, #0]
 8016414:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016416:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801641a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	1d1a      	adds	r2, r3, #4
 8016424:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016428:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	601a      	str	r2, [r3, #0]
}
 8016430:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8016432:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016436:	3b01      	subs	r3, #1
 8016438:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 801643c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016440:	2b00      	cmp	r3, #0
 8016442:	f47f ad34 	bne.w	8015eae <arm_radix4_butterfly_inverse_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8016446:	bf00      	nop
 8016448:	bf00      	nop
 801644a:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 801644e:	46bd      	mov	sp, r7
 8016450:	bc90      	pop	{r4, r7}
 8016452:	4770      	bx	lr

08016454 <arm_mfcc_init_q15>:
  const uint32_t *filterPos,
  const uint32_t *filterLengths,
  const q15_t *filterCoefs,
  const q15_t *windowCoefs
  )
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
 8016460:	603b      	str	r3, [r7, #0]
 arm_status status;

 S->fftLen=fftLen;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	68ba      	ldr	r2, [r7, #8]
 8016466:	615a      	str	r2, [r3, #20]
 S->nbMelFilters=nbMelFilters;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	619a      	str	r2, [r3, #24]
 S->nbDctOutputs=nbDctOutputs;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	683a      	ldr	r2, [r7, #0]
 8016472:	61da      	str	r2, [r3, #28]
 S->dctCoefs=dctCoefs;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	6a3a      	ldr	r2, [r7, #32]
 8016478:	601a      	str	r2, [r3, #0]
 S->filterPos=filterPos;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801647e:	60da      	str	r2, [r3, #12]
 S->filterLengths=filterLengths;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016484:	611a      	str	r2, [r3, #16]
 S->filterCoefs=filterCoefs;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801648a:	605a      	str	r2, [r3, #4]
 S->windowCoefs=windowCoefs;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016490:	609a      	str	r2, [r3, #8]

 #if defined(ARM_MFCC_CFFT_BASED)
 status=arm_cfft_init_q15(&(S->cfft),fftLen);
 #else
 RFFT_INIT(fftLen);
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	f103 0020 	add.w	r0, r3, #32
 8016498:	2301      	movs	r3, #1
 801649a:	2200      	movs	r2, #0
 801649c:	68b9      	ldr	r1, [r7, #8]
 801649e:	f000 fab5 	bl	8016a0c <arm_rfft_init_q15>
 80164a2:	4603      	mov	r3, r0
 80164a4:	75fb      	strb	r3, [r7, #23]
 #endif
 
 return(status);
 80164a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3718      	adds	r7, #24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
	...

080164b4 <arm_mfcc_q15>:
  q15_t *pSrc,
  q15_t *pDst,
  q31_t *pTmp
  )
#endif
{
 80164b4:	b5b0      	push	{r4, r5, r7, lr}
 80164b6:	b09a      	sub	sp, #104	@ 0x68
 80164b8:	af02      	add	r7, sp, #8
 80164ba:	60f8      	str	r0, [r7, #12]
 80164bc:	60b9      	str	r1, [r7, #8]
 80164be:	607a      	str	r2, [r7, #4]
 80164c0:	603b      	str	r3, [r7, #0]
    q15_t m;
    uint32_t index;
    uint32_t fftShift=0;
 80164c2:	2300      	movs	r3, #0
 80164c4:	653b      	str	r3, [r7, #80]	@ 0x50
    q63_t result;
    arm_matrix_instance_q15 pDctMat;
    uint32_t i;
    uint32_t coefsPos;
    uint32_t filterLimit;
    q15_t *pTmp2=(q15_t*)pTmp;
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    arm_status status = ARM_MATH_SUCCESS;
 80164ca:	2300      	movs	r3, #0
 80164cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    // q15
    arm_absmax_q15(pSrc,S->fftLen,&m,&index);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	6959      	ldr	r1, [r3, #20]
 80164d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80164d8:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 80164dc:	68b8      	ldr	r0, [r7, #8]
 80164de:	f7fc f914 	bl	801270a <arm_absmax_q15>

    if ((m != 0) && (m != 0x7FFF))
 80164e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d025      	beq.n	8016536 <arm_mfcc_q15+0x82>
 80164ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80164ee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80164f2:	4293      	cmp	r3, r2
 80164f4:	d01f      	beq.n	8016536 <arm_mfcc_q15+0x82>
    {
       q15_t quotient;
       int16_t shift;

       status = arm_divide_q15(0x7FFF,m,&quotient,&shift);
 80164f6:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 80164fa:	f107 0314 	add.w	r3, r7, #20
 80164fe:	f107 0216 	add.w	r2, r7, #22
 8016502:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8016506:	f7fb f80a 	bl	801151e <arm_divide_q15>
 801650a:	4603      	mov	r3, r0
 801650c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
       if (status != ARM_MATH_SUCCESS)
 8016510:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8016514:	2b00      	cmp	r3, #0
 8016516:	d002      	beq.n	801651e <arm_mfcc_q15+0x6a>
       {
          return(status);
 8016518:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801651c:	e0e8      	b.n	80166f0 <arm_mfcc_q15+0x23c>
       }
 
       arm_scale_q15(pSrc,quotient,shift,pSrc,S->fftLen);
 801651e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8016522:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016526:	b25a      	sxtb	r2, r3
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	695b      	ldr	r3, [r3, #20]
 801652c:	9300      	str	r3, [sp, #0]
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	68b8      	ldr	r0, [r7, #8]
 8016532:	f7fa fe31 	bl	8011198 <arm_scale_q15>
    }


    // q15
    arm_mult_q15(pSrc,S->windowCoefs, pSrc, S->fftLen);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	6899      	ldr	r1, [r3, #8]
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	695b      	ldr	r3, [r3, #20]
 801653e:	68ba      	ldr	r2, [r7, #8]
 8016540:	68b8      	ldr	r0, [r7, #8]
 8016542:	f7fa fdd1 	bl	80110e8 <arm_mult_q15>


    /* Compute spectrum magnitude 
    */
    fftShift = 31 - __CLZ(S->fftLen);
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	695b      	ldr	r3, [r3, #20]
 801654a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 801654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801654e:	2b00      	cmp	r3, #0
 8016550:	d101      	bne.n	8016556 <arm_mfcc_q15+0xa2>
    return 32U;
 8016552:	2320      	movs	r3, #32
 8016554:	e003      	b.n	801655e <arm_mfcc_q15+0xaa>
  return __builtin_clz(value);
 8016556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016558:	fab3 f383 	clz	r3, r3
 801655c:	b2db      	uxtb	r3, r3
 801655e:	f1c3 031f 	rsb	r3, r3, #31
 8016562:	653b      	str	r3, [r7, #80]	@ 0x50
      pTmp2[2*i+1] = 0;
    }
    arm_cfft_q15(&(S->cfft),pTmp2,0,1);
#else
    /* Default RFFT based implementation */
    arm_rfft_q15(&(S->rfft),pSrc,pTmp2);
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	3320      	adds	r3, #32
 8016568:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801656a:	68b9      	ldr	r1, [r7, #8]
 801656c:	4618      	mov	r0, r3
 801656e:	f000 fae4 	bl	8016b3a <arm_rfft_q15>
#endif
#endif
    filterLimit = 1 + (S->fftLen >> 1);
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	695b      	ldr	r3, [r3, #20]
 8016576:	085b      	lsrs	r3, r3, #1
 8016578:	3301      	adds	r3, #1
 801657a:	64bb      	str	r3, [r7, #72]	@ 0x48


    // q15 - fftShift
    arm_cmplx_mag_q15(pTmp2,pSrc,filterLimit);
 801657c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801657e:	68b9      	ldr	r1, [r7, #8]
 8016580:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016582:	f7fa ff92 	bl	80114aa <arm_cmplx_mag_q15>
    // q14 - fftShift

    /* Apply MEL filters */
    coefsPos = 0;
 8016586:	2300      	movs	r3, #0
 8016588:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(i=0; i<S->nbMelFilters; i++)
 801658a:	2300      	movs	r3, #0
 801658c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801658e:	e046      	b.n	801661e <arm_mfcc_q15+0x16a>
    {
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	68da      	ldr	r2, [r3, #12]
 8016594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016596:	009b      	lsls	r3, r3, #2
 8016598:	4413      	add	r3, r2
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	68ba      	ldr	r2, [r7, #8]
 80165a0:	18d0      	adds	r0, r2, r3
        &(S->filterCoefs[coefsPos]),
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	685a      	ldr	r2, [r3, #4]
 80165a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80165a8:	005b      	lsls	r3, r3, #1
 80165aa:	18d1      	adds	r1, r2, r3
        S->filterLengths[i],
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	691a      	ldr	r2, [r3, #16]
 80165b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80165b2:	009b      	lsls	r3, r3, #2
 80165b4:	4413      	add	r3, r2
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	f107 0320 	add.w	r3, r7, #32
 80165bc:	f7fa fd5a 	bl	8011074 <arm_dot_prod_q15>
        &result);

      coefsPos += S->filterLengths[i];
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	691a      	ldr	r2, [r3, #16]
 80165c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80165c6:	009b      	lsls	r3, r3, #2
 80165c8:	4413      	add	r3, r2
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80165ce:	4413      	add	r3, r2
 80165d0:	65bb      	str	r3, [r7, #88]	@ 0x58

      // q34.29 - fftShift
      result += MICRO_Q15;
 80165d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80165d6:	f240 2119 	movw	r1, #537	@ 0x219
 80165da:	1854      	adds	r4, r2, r1
 80165dc:	f143 0500 	adc.w	r5, r3, #0
 80165e0:	e9c7 4508 	strd	r4, r5, [r7, #32]
      result >>= SHIFT_MELFILTER_SATURATION_Q15;
 80165e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80165e8:	f04f 0200 	mov.w	r2, #0
 80165ec:	f04f 0300 	mov.w	r3, #0
 80165f0:	0a82      	lsrs	r2, r0, #10
 80165f2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80165f6:	128b      	asrs	r3, r1, #10
 80165f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      // q34.29 - fftShift - satShift
      pTmp[i] = __SSAT(result,31) ;
 80165fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016600:	4613      	mov	r3, r2
 8016602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016606:	f303 031e 	ssat	r3, #31, r3
 801660a:	637b      	str	r3, [r7, #52]	@ 0x34
 801660c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801660e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016610:	009b      	lsls	r3, r3, #2
 8016612:	6839      	ldr	r1, [r7, #0]
 8016614:	440b      	add	r3, r1
 8016616:	601a      	str	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 8016618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801661a:	3301      	adds	r3, #1
 801661c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	699b      	ldr	r3, [r3, #24]
 8016622:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016624:	429a      	cmp	r2, r3
 8016626:	d3b3      	bcc.n	8016590 <arm_mfcc_q15+0xdc>

    }

    if ((m != 0) && (m != 0x7FFF))
 8016628:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 801662c:	2b00      	cmp	r3, #0
 801662e:	d010      	beq.n	8016652 <arm_mfcc_q15+0x19e>
 8016630:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016634:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016638:	4293      	cmp	r3, r2
 801663a:	d00a      	beq.n	8016652 <arm_mfcc_q15+0x19e>
    {
      arm_scale_q31(pTmp,m<<16,0,pTmp,S->nbMelFilters);
 801663c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016640:	0419      	lsls	r1, r3, #16
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	699b      	ldr	r3, [r3, #24]
 8016646:	9300      	str	r3, [sp, #0]
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	2200      	movs	r2, #0
 801664c:	6838      	ldr	r0, [r7, #0]
 801664e:	f7fa fdda 	bl	8011206 <arm_scale_q31>
    }
   
    // q34.29 - fftShift - satShift
    /* Compute the log */
    arm_vlog_q31(pTmp,pTmp,S->nbMelFilters);
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	699b      	ldr	r3, [r3, #24]
 8016656:	461a      	mov	r2, r3
 8016658:	6839      	ldr	r1, [r7, #0]
 801665a:	6838      	ldr	r0, [r7, #0]
 801665c:	f7fb faee 	bl	8011c3c <arm_vlog_q31>


    // q5.26
   
    logExponent = fftShift + 2 + SHIFT_MELFILTER_SATURATION_Q15;
 8016660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016662:	330c      	adds	r3, #12
 8016664:	647b      	str	r3, [r7, #68]	@ 0x44
    logExponent = logExponent * LOG2TOLOG_Q15;
 8016666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016668:	4a23      	ldr	r2, [pc, #140]	@ (80166f8 <arm_mfcc_q15+0x244>)
 801666a:	fb02 f303 	mul.w	r3, r2, r3
 801666e:	647b      	str	r3, [r7, #68]	@ 0x44


    // q8.26
    arm_offset_q31(pTmp,logExponent,pTmp,S->nbMelFilters);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	699b      	ldr	r3, [r3, #24]
 8016674:	683a      	ldr	r2, [r7, #0]
 8016676:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016678:	6838      	ldr	r0, [r7, #0]
 801667a:	f7fa fd65 	bl	8011148 <arm_offset_q31>
    arm_shift_q31(pTmp,-19,pTmp,S->nbMelFilters);
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	699b      	ldr	r3, [r3, #24]
 8016682:	683a      	ldr	r2, [r7, #0]
 8016684:	f06f 0112 	mvn.w	r1, #18
 8016688:	6838      	ldr	r0, [r7, #0]
 801668a:	f7fa fea5 	bl	80113d8 <arm_shift_q31>
    for(i=0; i<S->nbMelFilters; i++)
 801668e:	2300      	movs	r3, #0
 8016690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016692:	e014      	b.n	80166be <arm_mfcc_q15+0x20a>
    { 
      pSrc[i] = __SSAT((q15_t)pTmp[i],16);
 8016694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	683a      	ldr	r2, [r7, #0]
 801669a:	4413      	add	r3, r2
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	b21b      	sxth	r3, r3
 80166a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80166a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166a4:	f303 030f 	ssat	r3, #16, r3
 80166a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80166aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80166ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80166ae:	005b      	lsls	r3, r3, #1
 80166b0:	68ba      	ldr	r2, [r7, #8]
 80166b2:	4413      	add	r3, r2
 80166b4:	b20a      	sxth	r2, r1
 80166b6:	801a      	strh	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 80166b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80166ba:	3301      	adds	r3, #1
 80166bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	699b      	ldr	r3, [r3, #24]
 80166c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d3e5      	bcc.n	8016694 <arm_mfcc_q15+0x1e0>
    }

    // q8.7

    pDctMat.numRows=S->nbDctOutputs;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	69db      	ldr	r3, [r3, #28]
 80166cc:	b29b      	uxth	r3, r3
 80166ce:	833b      	strh	r3, [r7, #24]
    pDctMat.numCols=S->nbMelFilters;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	699b      	ldr	r3, [r3, #24]
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	837b      	strh	r3, [r7, #26]
    pDctMat.pData=(q15_t*)S->dctCoefs;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	61fb      	str	r3, [r7, #28]

    arm_mat_vec_mult_q15(&pDctMat, pSrc, pDst);
 80166de:	f107 0318 	add.w	r3, r7, #24
 80166e2:	687a      	ldr	r2, [r7, #4]
 80166e4:	68b9      	ldr	r1, [r7, #8]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f7fb fac9 	bl	8011c7e <arm_mat_vec_mult_q15>

    return(status);
 80166ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3760      	adds	r7, #96	@ 0x60
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bdb0      	pop	{r4, r5, r7, pc}
 80166f8:	02c5c860 	.word	0x02c5c860

080166fc <arm_rfft_init_8192_q15>:
  @par
                   This function also initializes Twiddle factor table.

 */

RFFTINIT_Q15(8192,4096,1)
 80166fc:	b480      	push	{r7}
 80166fe:	b085      	sub	sp, #20
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801670e:	601a      	str	r2, [r3, #0]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	4a0d      	ldr	r2, [pc, #52]	@ (8016748 <arm_rfft_init_8192_q15+0x4c>)
 8016714:	60da      	str	r2, [r3, #12]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	4a0c      	ldr	r2, [pc, #48]	@ (801674c <arm_rfft_init_8192_q15+0x50>)
 801671a:	611a      	str	r2, [r3, #16]
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	b2da      	uxtb	r2, r3
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	711a      	strb	r2, [r3, #4]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	b2da      	uxtb	r2, r3
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	715a      	strb	r2, [r3, #5]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2201      	movs	r2, #1
 8016730:	609a      	str	r2, [r3, #8]
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	4a06      	ldr	r2, [pc, #24]	@ (8016750 <arm_rfft_init_8192_q15+0x54>)
 8016736:	615a      	str	r2, [r3, #20]
 8016738:	2300      	movs	r3, #0
 801673a:	4618      	mov	r0, r3
 801673c:	3714      	adds	r7, #20
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr
 8016746:	bf00      	nop
 8016748:	0802950c 	.word	0x0802950c
 801674c:	0802d50c 	.word	0x0802d50c
 8016750:	0803160c 	.word	0x0803160c

08016754 <arm_rfft_init_4096_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(4096,2048,2)
 8016754:	b480      	push	{r7}
 8016756:	b085      	sub	sp, #20
 8016758:	af00      	add	r7, sp, #0
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	607a      	str	r2, [r7, #4]
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8016766:	601a      	str	r2, [r3, #0]
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	4a0d      	ldr	r2, [pc, #52]	@ (80167a0 <arm_rfft_init_4096_q15+0x4c>)
 801676c:	60da      	str	r2, [r3, #12]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	4a0c      	ldr	r2, [pc, #48]	@ (80167a4 <arm_rfft_init_4096_q15+0x50>)
 8016772:	611a      	str	r2, [r3, #16]
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	b2da      	uxtb	r2, r3
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	711a      	strb	r2, [r3, #4]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	b2da      	uxtb	r2, r3
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	715a      	strb	r2, [r3, #5]
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	2202      	movs	r2, #2
 8016788:	609a      	str	r2, [r3, #8]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	4a06      	ldr	r2, [pc, #24]	@ (80167a8 <arm_rfft_init_4096_q15+0x54>)
 801678e:	615a      	str	r2, [r3, #20]
 8016790:	2300      	movs	r3, #0
 8016792:	4618      	mov	r0, r3
 8016794:	3714      	adds	r7, #20
 8016796:	46bd      	mov	sp, r7
 8016798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop
 80167a0:	0802950c 	.word	0x0802950c
 80167a4:	0802d50c 	.word	0x0802d50c
 80167a8:	080315fc 	.word	0x080315fc

080167ac <arm_rfft_init_2048_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(2048,1024,4)
 80167ac:	b480      	push	{r7}
 80167ae:	b085      	sub	sp, #20
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80167be:	601a      	str	r2, [r3, #0]
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	4a0d      	ldr	r2, [pc, #52]	@ (80167f8 <arm_rfft_init_2048_q15+0x4c>)
 80167c4:	60da      	str	r2, [r3, #12]
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	4a0c      	ldr	r2, [pc, #48]	@ (80167fc <arm_rfft_init_2048_q15+0x50>)
 80167ca:	611a      	str	r2, [r3, #16]
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	b2da      	uxtb	r2, r3
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	711a      	strb	r2, [r3, #4]
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	b2da      	uxtb	r2, r3
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	715a      	strb	r2, [r3, #5]
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2204      	movs	r2, #4
 80167e0:	609a      	str	r2, [r3, #8]
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	4a06      	ldr	r2, [pc, #24]	@ (8016800 <arm_rfft_init_2048_q15+0x54>)
 80167e6:	615a      	str	r2, [r3, #20]
 80167e8:	2300      	movs	r3, #0
 80167ea:	4618      	mov	r0, r3
 80167ec:	3714      	adds	r7, #20
 80167ee:	46bd      	mov	sp, r7
 80167f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f4:	4770      	bx	lr
 80167f6:	bf00      	nop
 80167f8:	0802950c 	.word	0x0802950c
 80167fc:	0802d50c 	.word	0x0802d50c
 8016800:	080315ec 	.word	0x080315ec

08016804 <arm_rfft_init_1024_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(1024,512,8)
 8016804:	b480      	push	{r7}
 8016806:	b085      	sub	sp, #20
 8016808:	af00      	add	r7, sp, #0
 801680a:	60f8      	str	r0, [r7, #12]
 801680c:	60b9      	str	r1, [r7, #8]
 801680e:	607a      	str	r2, [r7, #4]
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016816:	601a      	str	r2, [r3, #0]
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	4a0d      	ldr	r2, [pc, #52]	@ (8016850 <arm_rfft_init_1024_q15+0x4c>)
 801681c:	60da      	str	r2, [r3, #12]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	4a0c      	ldr	r2, [pc, #48]	@ (8016854 <arm_rfft_init_1024_q15+0x50>)
 8016822:	611a      	str	r2, [r3, #16]
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	b2da      	uxtb	r2, r3
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	711a      	strb	r2, [r3, #4]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	b2da      	uxtb	r2, r3
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	715a      	strb	r2, [r3, #5]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2208      	movs	r2, #8
 8016838:	609a      	str	r2, [r3, #8]
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	4a06      	ldr	r2, [pc, #24]	@ (8016858 <arm_rfft_init_1024_q15+0x54>)
 801683e:	615a      	str	r2, [r3, #20]
 8016840:	2300      	movs	r3, #0
 8016842:	4618      	mov	r0, r3
 8016844:	3714      	adds	r7, #20
 8016846:	46bd      	mov	sp, r7
 8016848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684c:	4770      	bx	lr
 801684e:	bf00      	nop
 8016850:	0802950c 	.word	0x0802950c
 8016854:	0802d50c 	.word	0x0802d50c
 8016858:	080315dc 	.word	0x080315dc

0801685c <arm_rfft_init_512_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(512,256,16)
 801685c:	b480      	push	{r7}
 801685e:	b085      	sub	sp, #20
 8016860:	af00      	add	r7, sp, #0
 8016862:	60f8      	str	r0, [r7, #12]
 8016864:	60b9      	str	r1, [r7, #8]
 8016866:	607a      	str	r2, [r7, #4]
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	4a0d      	ldr	r2, [pc, #52]	@ (80168a8 <arm_rfft_init_512_q15+0x4c>)
 8016874:	60da      	str	r2, [r3, #12]
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	4a0c      	ldr	r2, [pc, #48]	@ (80168ac <arm_rfft_init_512_q15+0x50>)
 801687a:	611a      	str	r2, [r3, #16]
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	b2da      	uxtb	r2, r3
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	711a      	strb	r2, [r3, #4]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	b2da      	uxtb	r2, r3
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	715a      	strb	r2, [r3, #5]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	2210      	movs	r2, #16
 8016890:	609a      	str	r2, [r3, #8]
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	4a06      	ldr	r2, [pc, #24]	@ (80168b0 <arm_rfft_init_512_q15+0x54>)
 8016896:	615a      	str	r2, [r3, #20]
 8016898:	2300      	movs	r3, #0
 801689a:	4618      	mov	r0, r3
 801689c:	3714      	adds	r7, #20
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	0802950c 	.word	0x0802950c
 80168ac:	0802d50c 	.word	0x0802d50c
 80168b0:	080315cc 	.word	0x080315cc

080168b4 <arm_rfft_init_256_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(256,128,32)
 80168b4:	b480      	push	{r7}
 80168b6:	b085      	sub	sp, #20
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	607a      	str	r2, [r7, #4]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80168c6:	601a      	str	r2, [r3, #0]
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	4a0d      	ldr	r2, [pc, #52]	@ (8016900 <arm_rfft_init_256_q15+0x4c>)
 80168cc:	60da      	str	r2, [r3, #12]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	4a0c      	ldr	r2, [pc, #48]	@ (8016904 <arm_rfft_init_256_q15+0x50>)
 80168d2:	611a      	str	r2, [r3, #16]
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	b2da      	uxtb	r2, r3
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	711a      	strb	r2, [r3, #4]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	b2da      	uxtb	r2, r3
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	715a      	strb	r2, [r3, #5]
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2220      	movs	r2, #32
 80168e8:	609a      	str	r2, [r3, #8]
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	4a06      	ldr	r2, [pc, #24]	@ (8016908 <arm_rfft_init_256_q15+0x54>)
 80168ee:	615a      	str	r2, [r3, #20]
 80168f0:	2300      	movs	r3, #0
 80168f2:	4618      	mov	r0, r3
 80168f4:	3714      	adds	r7, #20
 80168f6:	46bd      	mov	sp, r7
 80168f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fc:	4770      	bx	lr
 80168fe:	bf00      	nop
 8016900:	0802950c 	.word	0x0802950c
 8016904:	0802d50c 	.word	0x0802d50c
 8016908:	080315bc 	.word	0x080315bc

0801690c <arm_rfft_init_128_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(128,64,64)
 801690c:	b480      	push	{r7}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2280      	movs	r2, #128	@ 0x80
 801691c:	601a      	str	r2, [r3, #0]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	4a0c      	ldr	r2, [pc, #48]	@ (8016954 <arm_rfft_init_128_q15+0x48>)
 8016922:	60da      	str	r2, [r3, #12]
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	4a0c      	ldr	r2, [pc, #48]	@ (8016958 <arm_rfft_init_128_q15+0x4c>)
 8016928:	611a      	str	r2, [r3, #16]
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	b2da      	uxtb	r2, r3
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	711a      	strb	r2, [r3, #4]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	b2da      	uxtb	r2, r3
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	715a      	strb	r2, [r3, #5]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2240      	movs	r2, #64	@ 0x40
 801693e:	609a      	str	r2, [r3, #8]
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	4a06      	ldr	r2, [pc, #24]	@ (801695c <arm_rfft_init_128_q15+0x50>)
 8016944:	615a      	str	r2, [r3, #20]
 8016946:	2300      	movs	r3, #0
 8016948:	4618      	mov	r0, r3
 801694a:	3714      	adds	r7, #20
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	0802950c 	.word	0x0802950c
 8016958:	0802d50c 	.word	0x0802d50c
 801695c:	080315ac 	.word	0x080315ac

08016960 <arm_rfft_init_64_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(64,32,128)
 8016960:	b480      	push	{r7}
 8016962:	b085      	sub	sp, #20
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2240      	movs	r2, #64	@ 0x40
 8016970:	601a      	str	r2, [r3, #0]
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	4a0c      	ldr	r2, [pc, #48]	@ (80169a8 <arm_rfft_init_64_q15+0x48>)
 8016976:	60da      	str	r2, [r3, #12]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	4a0c      	ldr	r2, [pc, #48]	@ (80169ac <arm_rfft_init_64_q15+0x4c>)
 801697c:	611a      	str	r2, [r3, #16]
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	b2da      	uxtb	r2, r3
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	711a      	strb	r2, [r3, #4]
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	b2da      	uxtb	r2, r3
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	715a      	strb	r2, [r3, #5]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	2280      	movs	r2, #128	@ 0x80
 8016992:	609a      	str	r2, [r3, #8]
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	4a06      	ldr	r2, [pc, #24]	@ (80169b0 <arm_rfft_init_64_q15+0x50>)
 8016998:	615a      	str	r2, [r3, #20]
 801699a:	2300      	movs	r3, #0
 801699c:	4618      	mov	r0, r3
 801699e:	3714      	adds	r7, #20
 80169a0:	46bd      	mov	sp, r7
 80169a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a6:	4770      	bx	lr
 80169a8:	0802950c 	.word	0x0802950c
 80169ac:	0802d50c 	.word	0x0802d50c
 80169b0:	0803159c 	.word	0x0803159c

080169b4 <arm_rfft_init_32_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(32,16,256)
 80169b4:	b480      	push	{r7}
 80169b6:	b085      	sub	sp, #20
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	2220      	movs	r2, #32
 80169c4:	601a      	str	r2, [r3, #0]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	4a0d      	ldr	r2, [pc, #52]	@ (8016a00 <arm_rfft_init_32_q15+0x4c>)
 80169ca:	60da      	str	r2, [r3, #12]
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	4a0d      	ldr	r2, [pc, #52]	@ (8016a04 <arm_rfft_init_32_q15+0x50>)
 80169d0:	611a      	str	r2, [r3, #16]
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	b2da      	uxtb	r2, r3
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	711a      	strb	r2, [r3, #4]
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	b2da      	uxtb	r2, r3
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	715a      	strb	r2, [r3, #5]
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80169e8:	609a      	str	r2, [r3, #8]
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	4a06      	ldr	r2, [pc, #24]	@ (8016a08 <arm_rfft_init_32_q15+0x54>)
 80169ee:	615a      	str	r2, [r3, #20]
 80169f0:	2300      	movs	r3, #0
 80169f2:	4618      	mov	r0, r3
 80169f4:	3714      	adds	r7, #20
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr
 80169fe:	bf00      	nop
 8016a00:	0802950c 	.word	0x0802950c
 8016a04:	0802d50c 	.word	0x0802d50c
 8016a08:	0803158c 	.word	0x0803158c

08016a0c <arm_rfft_init_q15>:
ARM_DSP_ATTRIBUTE arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b086      	sub	sp, #24
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	60f8      	str	r0, [r7, #12]
 8016a14:	60b9      	str	r1, [r7, #8]
 8016a16:	607a      	str	r2, [r7, #4]
 8016a18:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 8016a1a:	23ff      	movs	r3, #255	@ 0xff
 8016a1c:	75fb      	strb	r3, [r7, #23]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (fftLenReal)
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016a24:	d038      	beq.n	8016a98 <arm_rfft_init_q15+0x8c>
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016a2c:	d87c      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016a34:	d038      	beq.n	8016aa8 <arm_rfft_init_q15+0x9c>
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016a3c:	d874      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a3e:	68bb      	ldr	r3, [r7, #8]
 8016a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a44:	d038      	beq.n	8016ab8 <arm_rfft_init_q15+0xac>
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a4c:	d86c      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a54:	d038      	beq.n	8016ac8 <arm_rfft_init_q15+0xbc>
 8016a56:	68bb      	ldr	r3, [r7, #8]
 8016a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a5c:	d864      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a64:	d038      	beq.n	8016ad8 <arm_rfft_init_q15+0xcc>
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a6c:	d85c      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a74:	d038      	beq.n	8016ae8 <arm_rfft_init_q15+0xdc>
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a7c:	d854      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a7e:	68bb      	ldr	r3, [r7, #8]
 8016a80:	2b80      	cmp	r3, #128	@ 0x80
 8016a82:	d039      	beq.n	8016af8 <arm_rfft_init_q15+0xec>
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	2b80      	cmp	r3, #128	@ 0x80
 8016a88:	d84e      	bhi.n	8016b28 <arm_rfft_init_q15+0x11c>
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	2b20      	cmp	r3, #32
 8016a8e:	d043      	beq.n	8016b18 <arm_rfft_init_q15+0x10c>
 8016a90:	68bb      	ldr	r3, [r7, #8]
 8016a92:	2b40      	cmp	r3, #64	@ 0x40
 8016a94:	d038      	beq.n	8016b08 <arm_rfft_init_q15+0xfc>
 8016a96:	e047      	b.n	8016b28 <arm_rfft_init_q15+0x11c>
    {
    case 8192U:
        status = arm_rfft_init_8192_q15( S,ifftFlagR,bitReverseFlag );
 8016a98:	683a      	ldr	r2, [r7, #0]
 8016a9a:	6879      	ldr	r1, [r7, #4]
 8016a9c:	68f8      	ldr	r0, [r7, #12]
 8016a9e:	f7ff fe2d 	bl	80166fc <arm_rfft_init_8192_q15>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	75fb      	strb	r3, [r7, #23]
        break;
 8016aa6:	e042      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 4096U:
        status = arm_rfft_init_4096_q15( S,ifftFlagR,bitReverseFlag );
 8016aa8:	683a      	ldr	r2, [r7, #0]
 8016aaa:	6879      	ldr	r1, [r7, #4]
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f7ff fe51 	bl	8016754 <arm_rfft_init_4096_q15>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	75fb      	strb	r3, [r7, #23]
        break;
 8016ab6:	e03a      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 2048U:
        status = arm_rfft_init_2048_q15( S,ifftFlagR,bitReverseFlag );
 8016ab8:	683a      	ldr	r2, [r7, #0]
 8016aba:	6879      	ldr	r1, [r7, #4]
 8016abc:	68f8      	ldr	r0, [r7, #12]
 8016abe:	f7ff fe75 	bl	80167ac <arm_rfft_init_2048_q15>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	75fb      	strb	r3, [r7, #23]
        break;
 8016ac6:	e032      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 1024U:
        status = arm_rfft_init_1024_q15( S,ifftFlagR,bitReverseFlag );
 8016ac8:	683a      	ldr	r2, [r7, #0]
 8016aca:	6879      	ldr	r1, [r7, #4]
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f7ff fe99 	bl	8016804 <arm_rfft_init_1024_q15>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	75fb      	strb	r3, [r7, #23]
        break;
 8016ad6:	e02a      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 512U:
        status = arm_rfft_init_512_q15( S,ifftFlagR,bitReverseFlag );
 8016ad8:	683a      	ldr	r2, [r7, #0]
 8016ada:	6879      	ldr	r1, [r7, #4]
 8016adc:	68f8      	ldr	r0, [r7, #12]
 8016ade:	f7ff febd 	bl	801685c <arm_rfft_init_512_q15>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	75fb      	strb	r3, [r7, #23]
        break;
 8016ae6:	e022      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 256U:
        status = arm_rfft_init_256_q15( S,ifftFlagR,bitReverseFlag );
 8016ae8:	683a      	ldr	r2, [r7, #0]
 8016aea:	6879      	ldr	r1, [r7, #4]
 8016aec:	68f8      	ldr	r0, [r7, #12]
 8016aee:	f7ff fee1 	bl	80168b4 <arm_rfft_init_256_q15>
 8016af2:	4603      	mov	r3, r0
 8016af4:	75fb      	strb	r3, [r7, #23]
        break;
 8016af6:	e01a      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 128U:
        status = arm_rfft_init_128_q15( S,ifftFlagR,bitReverseFlag );
 8016af8:	683a      	ldr	r2, [r7, #0]
 8016afa:	6879      	ldr	r1, [r7, #4]
 8016afc:	68f8      	ldr	r0, [r7, #12]
 8016afe:	f7ff ff05 	bl	801690c <arm_rfft_init_128_q15>
 8016b02:	4603      	mov	r3, r0
 8016b04:	75fb      	strb	r3, [r7, #23]
        break;
 8016b06:	e012      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    case 64U:
        status = arm_rfft_init_64_q15( S,ifftFlagR,bitReverseFlag );
 8016b08:	683a      	ldr	r2, [r7, #0]
 8016b0a:	6879      	ldr	r1, [r7, #4]
 8016b0c:	68f8      	ldr	r0, [r7, #12]
 8016b0e:	f7ff ff27 	bl	8016960 <arm_rfft_init_64_q15>
 8016b12:	4603      	mov	r3, r0
 8016b14:	75fb      	strb	r3, [r7, #23]
        break;
 8016b16:	e00a      	b.n	8016b2e <arm_rfft_init_q15+0x122>
   case 32U:
        status = arm_rfft_init_32_q15( S,ifftFlagR,bitReverseFlag );
 8016b18:	683a      	ldr	r2, [r7, #0]
 8016b1a:	6879      	ldr	r1, [r7, #4]
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	f7ff ff49 	bl	80169b4 <arm_rfft_init_32_q15>
 8016b22:	4603      	mov	r3, r0
 8016b24:	75fb      	strb	r3, [r7, #23]
        break;
 8016b26:	e002      	b.n	8016b2e <arm_rfft_init_q15+0x122>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8016b28:	23ff      	movs	r3, #255	@ 0xff
 8016b2a:	75fb      	strb	r3, [r7, #23]
        break;
 8016b2c:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 8016b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3718      	adds	r7, #24
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <arm_rfft_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
        q15_t * pSrc,
        q15_t * pDst)
{
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b088      	sub	sp, #32
 8016b3e:	af02      	add	r7, sp, #8
 8016b40:	60f8      	str	r0, [r7, #12]
 8016b42:	60b9      	str	r1, [r7, #8]
 8016b44:	607a      	str	r2, [r7, #4]
#if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  const arm_cfft_instance_q15 *S_CFFT = &(S->cfftInst);
#else
  const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	695b      	ldr	r3, [r3, #20]
 8016b4a:	617b      	str	r3, [r7, #20]
#endif
        uint32_t L2 = S->fftLenReal >> 1U;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	085b      	lsrs	r3, r3, #1
 8016b52:	613b      	str	r3, [r7, #16]

  /* Calculation of RIFFT of input */
  if (S->ifftFlagR == 1U)
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	791b      	ldrb	r3, [r3, #4]
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d11d      	bne.n	8016b98 <arm_rfft_q15+0x5e>
  {
     /*  Real IFFT core process */
     arm_split_rifft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	68da      	ldr	r2, [r3, #12]
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	6919      	ldr	r1, [r3, #16]
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	689b      	ldr	r3, [r3, #8]
 8016b68:	9301      	str	r3, [sp, #4]
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	9300      	str	r3, [sp, #0]
 8016b6e:	460b      	mov	r3, r1
 8016b70:	6939      	ldr	r1, [r7, #16]
 8016b72:	68b8      	ldr	r0, [r7, #8]
 8016b74:	f000 f951 	bl	8016e1a <arm_split_rifft_q15>

     /* Complex IFFT process */
     arm_cfft_q15 (S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	791a      	ldrb	r2, [r3, #4]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	795b      	ldrb	r3, [r3, #5]
 8016b80:	6879      	ldr	r1, [r7, #4]
 8016b82:	6978      	ldr	r0, [r7, #20]
 8016b84:	f7fb ff4e 	bl	8012a24 <arm_cfft_q15>

     arm_shift_q15(pDst, 1, pDst, S->fftLenReal);
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	687a      	ldr	r2, [r7, #4]
 8016b8e:	2101      	movs	r1, #1
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f7fa fbd7 	bl	8011344 <arm_shift_q15>

     /*  Real FFT core process */
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 8016b96:	e015      	b.n	8016bc4 <arm_rfft_q15+0x8a>
     arm_cfft_q15 (S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	791a      	ldrb	r2, [r3, #4]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	795b      	ldrb	r3, [r3, #5]
 8016ba0:	68b9      	ldr	r1, [r7, #8]
 8016ba2:	6978      	ldr	r0, [r7, #20]
 8016ba4:	f7fb ff3e 	bl	8012a24 <arm_cfft_q15>
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	68da      	ldr	r2, [r3, #12]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	6919      	ldr	r1, [r3, #16]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	689b      	ldr	r3, [r3, #8]
 8016bb4:	9301      	str	r3, [sp, #4]
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	9300      	str	r3, [sp, #0]
 8016bba:	460b      	mov	r3, r1
 8016bbc:	6939      	ldr	r1, [r7, #16]
 8016bbe:	68b8      	ldr	r0, [r7, #8]
 8016bc0:	f000 f804 	bl	8016bcc <arm_split_rfft_q15>
}
 8016bc4:	bf00      	nop
 8016bc6:	3718      	adds	r7, #24
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <arm_split_rfft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{       
 8016bcc:	b480      	push	{r7}
 8016bce:	b0ad      	sub	sp, #180	@ 0xb4
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	60b9      	str	r1, [r7, #8]
 8016bd6:	607a      	str	r2, [r7, #4]
 8016bd8:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_DSP)
        q15_t *pD1, *pD2;
#endif

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2];
 8016bda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	4413      	add	r3, r2
 8016be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pCoefB = &pBTable[modifier * 2];
 8016be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	683a      	ldr	r2, [r7, #0]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  pSrc1 = &pSrc[2];
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	3304      	adds	r3, #4
 8016bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  pSrc2 = &pSrc[(2U * fftLen) - 2U];
 8016bfc:	68ba      	ldr	r2, [r7, #8]
 8016bfe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016c02:	4413      	add	r3, r2
 8016c04:	009b      	lsls	r3, r3, #2
 8016c06:	68fa      	ldr	r2, [r7, #12]
 8016c08:	4413      	add	r3, r2
 8016c0a:	637b      	str	r3, [r7, #52]	@ 0x34

#if defined (ARM_MATH_DSP)

    i = 1U;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pD1 = pDst + 2;
 8016c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016c16:	3304      	adds	r3, #4
 8016c18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    pD2 = pDst + (4U * fftLen) - 2;
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	00db      	lsls	r3, r3, #3
 8016c20:	3b04      	subs	r3, #4
 8016c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016c26:	4413      	add	r3, r2
 8016c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (i = fftLen - 1; i > 0; i--)
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016c34:	e0ba      	b.n	8016dac <arm_split_rfft_q15+0x1e0>
         */


#ifndef ARM_MATH_BIG_ENDIAN
        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA));
 8016c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  memcpy (&val, pQ15, 4);
 8016c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c42:	461a      	mov	r2, r3
 8016c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016c48:	643b      	str	r3, [r7, #64]	@ 0x40
  memcpy (&val, pQ15, 4);
 8016c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016c5a:	fb43 f302 	smusd	r3, r3, r2
 8016c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8016c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        /* -(pSrc[2 * i + 1] * pATable[2 * i + 1] - pSrc[2 * i] * pATable[2 * i]) */
        outR = -(__SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] + pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(read_q15x2 (pSrc2), read_q15x2((q15_t *) pCoefB), outR) >> 16U;
 8016c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c68:	653b      	str	r3, [r7, #80]	@ 0x50
  memcpy (&val, pQ15, 4);
 8016c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c72:	4619      	mov	r1, r3
 8016c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016c78:	657b      	str	r3, [r7, #84]	@ 0x54
  memcpy (&val, pQ15, 4);
 8016c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c82:	461a      	mov	r2, r3
 8016c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016c88:	6679      	str	r1, [r7, #100]	@ 0x64
 8016c8a:	663a      	str	r2, [r7, #96]	@ 0x60
 8016c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016c90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016c92:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8016c94:	fb23 1302 	smlad	r3, r3, r2, r1
 8016c98:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8016c9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c9c:	0c1b      	lsrs	r3, r3, #16
 8016c9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
#ifndef ARM_MATH_BIG_ENDIAN
        outI = __SMUSDX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ca4:	3b04      	subs	r3, #4
 8016ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016caa:	3304      	adds	r3, #4
 8016cac:	66bb      	str	r3, [r7, #104]	@ 0x68
  memcpy (&val, pQ15, 4);
 8016cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	623b      	str	r3, [r7, #32]
  return (val);
 8016cb4:	6a3b      	ldr	r3, [r7, #32]
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memcpy (&val, pQ15, 4);
 8016cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	61fb      	str	r3, [r7, #28]
  return (val);
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016cc8:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016cca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ccc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016cce:	fb43 f312 	smusdx	r3, r3, r2
 8016cd2:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 8016cd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#else
        outI = __SMUSDX(read_q15x2 ((q15_t *) pCoefB), read_q15x2_da (&pSrc2));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), outI);
 8016cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cdc:	3304      	adds	r3, #4
 8016cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ce2:	3b04      	subs	r3, #4
 8016ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memcpy (&val, pQ15, 4);
 8016ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	61bb      	str	r3, [r7, #24]
  return (val);
 8016cec:	69bb      	ldr	r3, [r7, #24]
 8016cee:	4619      	mov	r1, r3
 8016cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016cf4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  memcpy (&val, pQ15, 4);
 8016cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	617b      	str	r3, [r7, #20]
  return (val);
 8016d00:	697b      	ldr	r3, [r7, #20]
 8016d02:	461a      	mov	r2, r3
 8016d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d08:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8016d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016d18:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016d1c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8016d20:	fb23 1312 	smladx	r3, r3, r2, r1
 8016d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8016d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        /* write output */
        *pD1++ = (q15_t) outR;
 8016d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d34:	1c9a      	adds	r2, r3, #2
 8016d36:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8016d3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8016d3e:	b212      	sxth	r2, r2
 8016d40:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16U;
 8016d42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d46:	1419      	asrs	r1, r3, #16
 8016d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d4c:	1c9a      	adds	r2, r3, #2
 8016d4e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8016d52:	b20a      	sxth	r2, r1
 8016d54:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8016d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016d5a:	b21a      	sxth	r2, r3
 8016d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016d60:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16U);
 8016d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d66:	141b      	asrs	r3, r3, #16
 8016d68:	b29b      	uxth	r3, r3
 8016d6a:	425b      	negs	r3, r3
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016d72:	3302      	adds	r3, #2
 8016d74:	b212      	sxth	r2, r2
 8016d76:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8016d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016d7c:	3b04      	subs	r3, #4
 8016d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 8016d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016d86:	009b      	lsls	r3, r3, #2
 8016d88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8016d8c:	4413      	add	r3, r2
 8016d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        pCoefA = pCoefA + (2U * modifier);
 8016d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8016d9c:	4413      	add	r3, r2
 8016d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (i = fftLen - 1; i > 0; i--)
 8016da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016da6:	3b01      	subs	r3, #1
 8016da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f47f af40 	bne.w	8016c36 <arm_split_rfft_q15+0x6a>
    }

    pDst[2U * fftLen]      = (pSrc[0] - pSrc[1]) >> 1U;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	3302      	adds	r3, #2
 8016dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	1059      	asrs	r1, r3, #1
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	009b      	lsls	r3, r3, #2
 8016dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016dd2:	4413      	add	r3, r2
 8016dd4:	b20a      	sxth	r2, r1
 8016dd6:	801a      	strh	r2, [r3, #0]
    pDst[2U * fftLen + 1U] = 0;
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	009b      	lsls	r3, r3, #2
 8016ddc:	3302      	adds	r3, #2
 8016dde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016de2:	4413      	add	r3, r2
 8016de4:	2200      	movs	r2, #0
 8016de6:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1U;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dee:	461a      	mov	r2, r3
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	3302      	adds	r3, #2
 8016df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016df8:	4413      	add	r3, r2
 8016dfa:	105b      	asrs	r3, r3, #1
 8016dfc:	b21a      	sxth	r2, r3
 8016dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e02:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 8016e04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e08:	3302      	adds	r3, #2
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 8016e0e:	bf00      	nop
 8016e10:	37b4      	adds	r7, #180	@ 0xb4
 8016e12:	46bd      	mov	sp, r7
 8016e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e18:	4770      	bx	lr

08016e1a <arm_split_rifft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{
 8016e1a:	b480      	push	{r7}
 8016e1c:	b0af      	sub	sp, #188	@ 0xbc
 8016e1e:	af00      	add	r7, sp, #0
 8016e20:	60f8      	str	r0, [r7, #12]
 8016e22:	60b9      	str	r1, [r7, #8]
 8016e24:	607a      	str	r2, [r7, #4]
 8016e26:	603b      	str	r3, [r7, #0]
        uint32_t i;                                    /* Loop Counter */
        q31_t outR, outI;                              /* Temporary variables for output */
  const q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
        q15_t *pSrc1, *pSrc2;
        q15_t *pDst1 = &pDst[0];
 8016e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8016e2c:	63bb      	str	r3, [r7, #56]	@ 0x38

  pCoefA = &pATable[0];
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pCoefB = &pBTable[0];
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  pSrc1 = &pSrc[0];
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	643b      	str	r3, [r7, #64]	@ 0x40
  pSrc2 = &pSrc[2 * fftLen];
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	009b      	lsls	r3, r3, #2
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	4413      	add	r3, r2
 8016e46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  i = fftLen;
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8016e4e:	e0b5      	b.n	8016fbc <arm_split_rifft_q15+0x1a2>

#if defined (ARM_MATH_DSP)

#ifndef ARM_MATH_BIG_ENDIAN
      /* pIn[2 * n - 2 * i] * pBTable[2 * i] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
      outR = __SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB));
 8016e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e52:	647b      	str	r3, [r7, #68]	@ 0x44
  memcpy (&val, pQ15, 4);
 8016e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	637b      	str	r3, [r7, #52]	@ 0x34
  return (val);
 8016e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016e62:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8016e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e6c:	657a      	str	r2, [r7, #84]	@ 0x54
 8016e6e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016e74:	fb43 f302 	smusd	r3, r3, r2
 8016e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8016e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      /* -(-pIn[2 * n - 2 * i] * pBTable[2 * i] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1])) */
      outR = -(__SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] + pIn[2 * n - 2 * i] * pBTable[2 * i] */
      outR = __SMLAD(read_q15x2(pSrc1), read_q15x2 ((q15_t *) pCoefA), outR) >> 16U;
 8016e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e82:	65bb      	str	r3, [r7, #88]	@ 0x58
  memcpy (&val, pQ15, 4);
 8016e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8c:	4619      	mov	r1, r3
 8016e8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memcpy (&val, pQ15, 4);
 8016e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016ea2:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8016ea4:	66ba      	str	r2, [r7, #104]	@ 0x68
 8016ea6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016eaa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016eac:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8016eae:	fb23 1302 	smlad	r3, r3, r2, r1
 8016eb2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016eb6:	0c1b      	lsrs	r3, r3, #16
 8016eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      /* -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
      outI = __SMUADX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ebe:	3b04      	subs	r3, #4
 8016ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ec4:	3304      	adds	r3, #4
 8016ec6:	673b      	str	r3, [r7, #112]	@ 0x70
  memcpy (&val, pQ15, 4);
 8016ec8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed0:	461a      	mov	r2, r3
 8016ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016ed6:	677b      	str	r3, [r7, #116]	@ 0x74
  memcpy (&val, pQ15, 4);
 8016ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	623b      	str	r3, [r7, #32]
  return (val);
 8016ede:	6a3b      	ldr	r3, [r7, #32]
 8016ee0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8016ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016eea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016eec:	fb23 f312 	smuadx	r3, r3, r2
 8016ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8016ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016ef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  memcpy (&val, pQ15, 4);
 8016f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	61fb      	str	r3, [r7, #28]
  return (val);
 8016f08:	69fb      	ldr	r3, [r7, #28]

      /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */
#ifndef ARM_MATH_BIG_ENDIAN
      outI = __SMLSDX(read_q15x2 ((q15_t *) pCoefA), read_q15x2_ia (&pSrc1), -outI);
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f0e:	3304      	adds	r3, #4
 8016f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8016f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f14:	3b04      	subs	r3, #4
 8016f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  memcpy (&val, pQ15, 4);
 8016f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	61bb      	str	r3, [r7, #24]
  return (val);
 8016f22:	69bb      	ldr	r3, [r7, #24]
 8016f24:	461a      	mov	r2, r3
 8016f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f2a:	425b      	negs	r3, r3
 8016f2c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8016f30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8016f34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016f3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8016f40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8016f44:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8016f48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 8016f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      outI = __SMLSDX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), -outI);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* write output */
#ifndef ARM_MATH_BIG_ENDIAN
      write_q15x2_ia (&pDst1, __PKHBT(outR, (outI >> 16U), 16));
 8016f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016f58:	b29a      	uxth	r2, r3
 8016f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f5e:	141b      	asrs	r3, r3, #16
 8016f60:	041b      	lsls	r3, r3, #16
 8016f62:	4313      	orrs	r3, r2
 8016f64:	461a      	mov	r2, r3
 8016f66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016f6e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
  q31_t val = value;
 8016f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016f76:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8016f78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	697a      	ldr	r2, [r7, #20]
 8016f80:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	1d1a      	adds	r2, r3, #4
 8016f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016f8e:	601a      	str	r2, [r3, #0]
}
 8016f90:	bf00      	nop
      *pDst1++ = (q15_t) (outI >> 16);

#endif /* #if defined (ARM_MATH_DSP) */

      /* update coefficient pointer */
      pCoefB = pCoefB + (2 * modifier);
 8016f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016f96:	009b      	lsls	r3, r3, #2
 8016f98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8016f9c:	4413      	add	r3, r2
 8016f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      pCoefA = pCoefA + (2 * modifier);
 8016fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8016fac:	4413      	add	r3, r2
 8016fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

      i--;
 8016fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016fb6:	3b01      	subs	r3, #1
 8016fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8016fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	f47f af45 	bne.w	8016e50 <arm_split_rifft_q15+0x36>
  }

}
 8016fc6:	bf00      	nop
 8016fc8:	bf00      	nop
 8016fca:	37bc      	adds	r7, #188	@ 0xbc
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd2:	4770      	bx	lr

08016fd4 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b086      	sub	sp, #24
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	4603      	mov	r3, r0
 8016fdc:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8016fe2:	79fb      	ldrb	r3, [r7, #7]
 8016fe4:	22a8      	movs	r2, #168	@ 0xa8
 8016fe6:	fb02 f303 	mul.w	r3, r2, r3
 8016fea:	4a30      	ldr	r2, [pc, #192]	@ (80170ac <_prep_out_transaction+0xd8>)
 8016fec:	4413      	add	r3, r2
 8016fee:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8016ff0:	79fb      	ldrb	r3, [r7, #7]
 8016ff2:	01db      	lsls	r3, r3, #7
 8016ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80170b0 <_prep_out_transaction+0xdc>)
 8016ff6:	4413      	add	r3, r2
 8016ff8:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8016ffa:	f001 f9b1 	bl	8018360 <tud_mounted>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d009      	beq.n	8017018 <_prep_out_transaction+0x44>
 8017004:	f001 f9be 	bl	8018384 <tud_suspended>
 8017008:	4603      	mov	r3, r0
 801700a:	f083 0301 	eor.w	r3, r3, #1
 801700e:	b2db      	uxtb	r3, r3
 8017010:	2b00      	cmp	r3, #0
 8017012:	d001      	beq.n	8017018 <_prep_out_transaction+0x44>
 8017014:	2301      	movs	r3, #1
 8017016:	e000      	b.n	801701a <_prep_out_transaction+0x46>
 8017018:	2300      	movs	r3, #0
 801701a:	f003 0301 	and.w	r3, r3, #1
 801701e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8017020:	f083 0301 	eor.w	r3, r3, #1
 8017024:	b2db      	uxtb	r3, r3
 8017026:	2b00      	cmp	r3, #0
 8017028:	d103      	bne.n	8017032 <_prep_out_transaction+0x5e>
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	78db      	ldrb	r3, [r3, #3]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d101      	bne.n	8017036 <_prep_out_transaction+0x62>
 8017032:	2300      	movs	r3, #0
 8017034:	e035      	b.n	80170a2 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8017036:	693b      	ldr	r3, [r7, #16]
 8017038:	3310      	adds	r3, #16
 801703a:	4618      	mov	r0, r3
 801703c:	f001 f88e 	bl	801815c <tu_fifo_remaining>
 8017040:	4603      	mov	r3, r0
 8017042:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8017044:	897b      	ldrh	r3, [r7, #10]
 8017046:	2b3f      	cmp	r3, #63	@ 0x3f
 8017048:	d801      	bhi.n	801704e <_prep_out_transaction+0x7a>
 801704a:	2300      	movs	r3, #0
 801704c:	e029      	b.n	80170a2 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	78da      	ldrb	r2, [r3, #3]
 8017052:	7dfb      	ldrb	r3, [r7, #23]
 8017054:	4611      	mov	r1, r2
 8017056:	4618      	mov	r0, r3
 8017058:	f001 fc38 	bl	80188cc <usbd_edpt_claim>
 801705c:	4603      	mov	r3, r0
 801705e:	f083 0301 	eor.w	r3, r3, #1
 8017062:	b2db      	uxtb	r3, r3
 8017064:	2b00      	cmp	r3, #0
 8017066:	d001      	beq.n	801706c <_prep_out_transaction+0x98>
 8017068:	2300      	movs	r3, #0
 801706a:	e01a      	b.n	80170a2 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 801706c:	693b      	ldr	r3, [r7, #16]
 801706e:	3310      	adds	r3, #16
 8017070:	4618      	mov	r0, r3
 8017072:	f001 f873 	bl	801815c <tu_fifo_remaining>
 8017076:	4603      	mov	r3, r0
 8017078:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 801707a:	897b      	ldrh	r3, [r7, #10]
 801707c:	2b3f      	cmp	r3, #63	@ 0x3f
 801707e:	d908      	bls.n	8017092 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8017080:	693b      	ldr	r3, [r7, #16]
 8017082:	78d9      	ldrb	r1, [r3, #3]
 8017084:	68fa      	ldr	r2, [r7, #12]
 8017086:	7df8      	ldrb	r0, [r7, #23]
 8017088:	2340      	movs	r3, #64	@ 0x40
 801708a:	f001 fc73 	bl	8018974 <usbd_edpt_xfer>
 801708e:	4603      	mov	r3, r0
 8017090:	e007      	b.n	80170a2 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	78da      	ldrb	r2, [r3, #3]
 8017096:	7dfb      	ldrb	r3, [r7, #23]
 8017098:	4611      	mov	r1, r2
 801709a:	4618      	mov	r0, r3
 801709c:	f001 fc40 	bl	8018920 <usbd_edpt_release>
    return false;
 80170a0:	2300      	movs	r3, #0
  }
}
 80170a2:	4618      	mov	r0, r3
 80170a4:	3718      	adds	r7, #24
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}
 80170aa:	bf00      	nop
 80170ac:	240084b8 	.word	0x240084b8
 80170b0:	24008608 	.word	0x24008608

080170b4 <tud_cdc_n_write_flush>:
  }

  return ret;
}

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b086      	sub	sp, #24
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	4603      	mov	r3, r0
 80170bc:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80170be:	79fb      	ldrb	r3, [r7, #7]
 80170c0:	22a8      	movs	r2, #168	@ 0xa8
 80170c2:	fb02 f303 	mul.w	r3, r2, r3
 80170c6:	4a39      	ldr	r2, [pc, #228]	@ (80171ac <tud_cdc_n_write_flush+0xf8>)
 80170c8:	4413      	add	r3, r2
 80170ca:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80170cc:	79fb      	ldrb	r3, [r7, #7]
 80170ce:	01db      	lsls	r3, r3, #7
 80170d0:	4a37      	ldr	r2, [pc, #220]	@ (80171b0 <tud_cdc_n_write_flush+0xfc>)
 80170d2:	4413      	add	r3, r2
 80170d4:	613b      	str	r3, [r7, #16]
 80170d6:	f001 f943 	bl	8018360 <tud_mounted>
 80170da:	4603      	mov	r3, r0
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d009      	beq.n	80170f4 <tud_cdc_n_write_flush+0x40>
 80170e0:	f001 f950 	bl	8018384 <tud_suspended>
 80170e4:	4603      	mov	r3, r0
 80170e6:	f083 0301 	eor.w	r3, r3, #1
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d001      	beq.n	80170f4 <tud_cdc_n_write_flush+0x40>
 80170f0:	2301      	movs	r3, #1
 80170f2:	e000      	b.n	80170f6 <tud_cdc_n_write_flush+0x42>
 80170f4:	2300      	movs	r3, #0
 80170f6:	f003 0301 	and.w	r3, r3, #1
 80170fa:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 80170fc:	f083 0301 	eor.w	r3, r3, #1
 8017100:	b2db      	uxtb	r3, r3
 8017102:	2b00      	cmp	r3, #0
 8017104:	d001      	beq.n	801710a <tud_cdc_n_write_flush+0x56>
 8017106:	2300      	movs	r3, #0
 8017108:	e04c      	b.n	80171a4 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	331c      	adds	r3, #28
 801710e:	4618      	mov	r0, r3
 8017110:	f000 ffaf 	bl	8018072 <tu_fifo_count>
 8017114:	4603      	mov	r3, r0
 8017116:	2b00      	cmp	r3, #0
 8017118:	d101      	bne.n	801711e <tud_cdc_n_write_flush+0x6a>
    return 0;
 801711a:	2300      	movs	r3, #0
 801711c:	e042      	b.n	80171a4 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 801711e:	2300      	movs	r3, #0
 8017120:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	789a      	ldrb	r2, [r3, #2]
 8017126:	7bfb      	ldrb	r3, [r7, #15]
 8017128:	4611      	mov	r1, r2
 801712a:	4618      	mov	r0, r3
 801712c:	f001 fbce 	bl	80188cc <usbd_edpt_claim>
 8017130:	4603      	mov	r3, r0
 8017132:	f083 0301 	eor.w	r3, r3, #1
 8017136:	b2db      	uxtb	r3, r3
 8017138:	2b00      	cmp	r3, #0
 801713a:	d001      	beq.n	8017140 <tud_cdc_n_write_flush+0x8c>
 801713c:	2300      	movs	r3, #0
 801713e:	e031      	b.n	80171a4 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	f103 001c 	add.w	r0, r3, #28
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	3340      	adds	r3, #64	@ 0x40
 801714a:	2240      	movs	r2, #64	@ 0x40
 801714c:	4619      	mov	r1, r3
 801714e:	f001 f83d 	bl	80181cc <tu_fifo_read_n>
 8017152:	4603      	mov	r3, r0
 8017154:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8017156:	89bb      	ldrh	r3, [r7, #12]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d01b      	beq.n	8017194 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	7899      	ldrb	r1, [r3, #2]
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8017166:	89bb      	ldrh	r3, [r7, #12]
 8017168:	7bf8      	ldrb	r0, [r7, #15]
 801716a:	f001 fc03 	bl	8018974 <usbd_edpt_xfer>
 801716e:	4603      	mov	r3, r0
 8017170:	f083 0301 	eor.w	r3, r3, #1
 8017174:	b2db      	uxtb	r3, r3
 8017176:	2b00      	cmp	r3, #0
 8017178:	d00a      	beq.n	8017190 <tud_cdc_n_write_flush+0xdc>
 801717a:	4b0e      	ldr	r3, [pc, #56]	@ (80171b4 <tud_cdc_n_write_flush+0x100>)
 801717c:	60bb      	str	r3, [r7, #8]
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	f003 0301 	and.w	r3, r3, #1
 8017186:	2b00      	cmp	r3, #0
 8017188:	d000      	beq.n	801718c <tud_cdc_n_write_flush+0xd8>
 801718a:	be00      	bkpt	0x0000
 801718c:	2300      	movs	r3, #0
 801718e:	e009      	b.n	80171a4 <tud_cdc_n_write_flush+0xf0>
    return count;
 8017190:	89bb      	ldrh	r3, [r7, #12]
 8017192:	e007      	b.n	80171a4 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	789a      	ldrb	r2, [r3, #2]
 8017198:	7bfb      	ldrb	r3, [r7, #15]
 801719a:	4611      	mov	r1, r2
 801719c:	4618      	mov	r0, r3
 801719e:	f001 fbbf 	bl	8018920 <usbd_edpt_release>
    return 0;
 80171a2:	2300      	movs	r3, #0
  }
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3718      	adds	r7, #24
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bd80      	pop	{r7, pc}
 80171ac:	240084b8 	.word	0x240084b8
 80171b0:	24008608 	.word	0x24008608
 80171b4:	e000edf0 	.word	0xe000edf0

080171b8 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b084      	sub	sp, #16
 80171bc:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80171be:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80171c2:	2100      	movs	r1, #0
 80171c4:	4822      	ldr	r0, [pc, #136]	@ (8017250 <cdcd_init+0x98>)
 80171c6:	f005 ff61 	bl	801d08c <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 80171ca:	2201      	movs	r2, #1
 80171cc:	2100      	movs	r1, #0
 80171ce:	4821      	ldr	r0, [pc, #132]	@ (8017254 <cdcd_init+0x9c>)
 80171d0:	f005 ff5c 	bl	801d08c <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80171d4:	2300      	movs	r3, #0
 80171d6:	71fb      	strb	r3, [r7, #7]
 80171d8:	e031      	b.n	801723e <cdcd_init+0x86>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80171da:	79fb      	ldrb	r3, [r7, #7]
 80171dc:	22a8      	movs	r2, #168	@ 0xa8
 80171de:	fb02 f303 	mul.w	r3, r2, r3
 80171e2:	4a1b      	ldr	r2, [pc, #108]	@ (8017250 <cdcd_init+0x98>)
 80171e4:	4413      	add	r3, r2
 80171e6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	22ff      	movs	r2, #255	@ 0xff
 80171ec:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80171f4:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	2200      	movs	r2, #0
 80171fa:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	2200      	movs	r2, #0
 8017200:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	2208      	movs	r2, #8
 8017206:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	f103 0010 	add.w	r0, r3, #16
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017214:	2300      	movs	r3, #0
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	2301      	movs	r3, #1
 801721a:	2240      	movs	r2, #64	@ 0x40
 801721c:	f000 fb1c 	bl	8017858 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	f103 001c 	add.w	r0, r3, #28
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801722c:	2301      	movs	r3, #1
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	2301      	movs	r3, #1
 8017232:	2240      	movs	r2, #64	@ 0x40
 8017234:	f000 fb10 	bl	8017858 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8017238:	79fb      	ldrb	r3, [r7, #7]
 801723a:	3301      	adds	r3, #1
 801723c:	71fb      	strb	r3, [r7, #7]
 801723e:	79fb      	ldrb	r3, [r7, #7]
 8017240:	2b01      	cmp	r3, #1
 8017242:	d9ca      	bls.n	80171da <cdcd_init+0x22>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8017244:	bf00      	nop
 8017246:	bf00      	nop
 8017248:	3708      	adds	r7, #8
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}
 801724e:	bf00      	nop
 8017250:	240084b8 	.word	0x240084b8
 8017254:	24008708 	.word	0x24008708

08017258 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8017258:	b480      	push	{r7}
 801725a:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 801725c:	2301      	movs	r3, #1
}
 801725e:	4618      	mov	r0, r3
 8017260:	46bd      	mov	sp, r7
 8017262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017266:	4770      	bx	lr

08017268 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8017268:	b580      	push	{r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	4603      	mov	r3, r0
 8017270:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8017272:	2300      	movs	r3, #0
 8017274:	73fb      	strb	r3, [r7, #15]
 8017276:	e02c      	b.n	80172d2 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8017278:	7bfb      	ldrb	r3, [r7, #15]
 801727a:	22a8      	movs	r2, #168	@ 0xa8
 801727c:	fb02 f303 	mul.w	r3, r2, r3
 8017280:	4a18      	ldr	r2, [pc, #96]	@ (80172e4 <cdcd_reset+0x7c>)
 8017282:	4413      	add	r3, r2
 8017284:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8017286:	2205      	movs	r2, #5
 8017288:	2100      	movs	r1, #0
 801728a:	68b8      	ldr	r0, [r7, #8]
 801728c:	f005 fefe 	bl	801d08c <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 8017290:	4b15      	ldr	r3, [pc, #84]	@ (80172e8 <cdcd_reset+0x80>)
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	f003 0301 	and.w	r3, r3, #1
 8017298:	b2db      	uxtb	r3, r3
 801729a:	2b00      	cmp	r3, #0
 801729c:	d104      	bne.n	80172a8 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	3310      	adds	r3, #16
 80172a2:	4618      	mov	r0, r3
 80172a4:	f001 f81d 	bl	80182e2 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 80172a8:	4b0f      	ldr	r3, [pc, #60]	@ (80172e8 <cdcd_reset+0x80>)
 80172aa:	781b      	ldrb	r3, [r3, #0]
 80172ac:	f003 0302 	and.w	r3, r3, #2
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d104      	bne.n	80172c0 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	331c      	adds	r3, #28
 80172ba:	4618      	mov	r0, r3
 80172bc:	f001 f811 	bl	80182e2 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	331c      	adds	r3, #28
 80172c4:	2101      	movs	r1, #1
 80172c6:	4618      	mov	r0, r3
 80172c8:	f001 f81c 	bl	8018304 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80172cc:	7bfb      	ldrb	r3, [r7, #15]
 80172ce:	3301      	adds	r3, #1
 80172d0:	73fb      	strb	r3, [r7, #15]
 80172d2:	7bfb      	ldrb	r3, [r7, #15]
 80172d4:	2b01      	cmp	r3, #1
 80172d6:	d9cf      	bls.n	8017278 <cdcd_reset+0x10>
  }
}
 80172d8:	bf00      	nop
 80172da:	bf00      	nop
 80172dc:	3710      	adds	r7, #16
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	bf00      	nop
 80172e4:	240084b8 	.word	0x240084b8
 80172e8:	24008708 	.word	0x24008708

080172ec <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b09a      	sub	sp, #104	@ 0x68
 80172f0:	af02      	add	r7, sp, #8
 80172f2:	4603      	mov	r3, r0
 80172f4:	6039      	str	r1, [r7, #0]
 80172f6:	71fb      	strb	r3, [r7, #7]
 80172f8:	4613      	mov	r3, r2
 80172fa:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	795b      	ldrb	r3, [r3, #5]
 8017300:	2b02      	cmp	r3, #2
 8017302:	d103      	bne.n	801730c <cdcd_open+0x20>
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	799b      	ldrb	r3, [r3, #6]
 8017308:	2b02      	cmp	r3, #2
 801730a:	d001      	beq.n	8017310 <cdcd_open+0x24>
 801730c:	2300      	movs	r3, #0
 801730e:	e0da      	b.n	80174c6 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017310:	2300      	movs	r3, #0
 8017312:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8017316:	e010      	b.n	801733a <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8017318:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801731c:	22a8      	movs	r2, #168	@ 0xa8
 801731e:	fb02 f303 	mul.w	r3, r2, r3
 8017322:	4a6b      	ldr	r2, [pc, #428]	@ (80174d0 <cdcd_open+0x1e4>)
 8017324:	4413      	add	r3, r2
 8017326:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8017328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801732a:	789b      	ldrb	r3, [r3, #2]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d009      	beq.n	8017344 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017330:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017334:	3301      	adds	r3, #1
 8017336:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801733a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801733e:	2b01      	cmp	r3, #1
 8017340:	d9ea      	bls.n	8017318 <cdcd_open+0x2c>
 8017342:	e000      	b.n	8017346 <cdcd_open+0x5a>
      break;
 8017344:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8017346:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801734a:	2b01      	cmp	r3, #1
 801734c:	d90a      	bls.n	8017364 <cdcd_open+0x78>
 801734e:	4b61      	ldr	r3, [pc, #388]	@ (80174d4 <cdcd_open+0x1e8>)
 8017350:	647b      	str	r3, [r7, #68]	@ 0x44
 8017352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	f003 0301 	and.w	r3, r3, #1
 801735a:	2b00      	cmp	r3, #0
 801735c:	d000      	beq.n	8017360 <cdcd_open+0x74>
 801735e:	be00      	bkpt	0x0000
 8017360:	2300      	movs	r3, #0
 8017362:	e0b0      	b.n	80174c6 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8017364:	683b      	ldr	r3, [r7, #0]
 8017366:	789a      	ldrb	r2, [r3, #2]
 8017368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801736a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 801736c:	2309      	movs	r3, #9
 801736e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 801737a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	461a      	mov	r2, r3
 8017380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017382:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8017384:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8017386:	e013      	b.n	80173b0 <cdcd_open+0xc4>
 8017388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801738a:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 801738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801738e:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8017390:	461a      	mov	r2, r3
 8017392:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8017396:	4413      	add	r3, r2
 8017398:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 801739c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801739e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80173a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80173a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173a6:	781b      	ldrb	r3, [r3, #0]
 80173a8:	461a      	mov	r2, r3
 80173aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173ac:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80173ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80173b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80173b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173b6:	3301      	adds	r3, #1
 80173b8:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80173ba:	2b24      	cmp	r3, #36	@ 0x24
 80173bc:	d104      	bne.n	80173c8 <cdcd_open+0xdc>
 80173be:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80173c2:	88bb      	ldrh	r3, [r7, #4]
 80173c4:	429a      	cmp	r2, r3
 80173c6:	d9df      	bls.n	8017388 <cdcd_open+0x9c>
 80173c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80173cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173ce:	3301      	adds	r3, #1
 80173d0:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80173d2:	2b05      	cmp	r3, #5
 80173d4:	d12f      	bne.n	8017436 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80173d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173d8:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80173da:	79fb      	ldrb	r3, [r7, #7]
 80173dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80173de:	4618      	mov	r0, r3
 80173e0:	f001 fa2e 	bl	8018840 <usbd_edpt_open>
 80173e4:	4603      	mov	r3, r0
 80173e6:	f083 0301 	eor.w	r3, r3, #1
 80173ea:	b2db      	uxtb	r3, r3
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d00a      	beq.n	8017406 <cdcd_open+0x11a>
 80173f0:	4b38      	ldr	r3, [pc, #224]	@ (80174d4 <cdcd_open+0x1e8>)
 80173f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80173f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f003 0301 	and.w	r3, r3, #1
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d000      	beq.n	8017402 <cdcd_open+0x116>
 8017400:	be00      	bkpt	0x0000
 8017402:	2300      	movs	r3, #0
 8017404:	e05f      	b.n	80174c6 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8017406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017408:	789a      	ldrb	r2, [r3, #2]
 801740a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801740c:	705a      	strb	r2, [r3, #1]
 801740e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017410:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8017416:	461a      	mov	r2, r3
 8017418:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801741c:	4413      	add	r3, r2
 801741e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017424:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017428:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801742a:	6a3b      	ldr	r3, [r7, #32]
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	461a      	mov	r2, r3
 8017430:	6a3b      	ldr	r3, [r7, #32]
 8017432:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017434:	657b      	str	r3, [r7, #84]	@ 0x54
 8017436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017438:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 801743a:	69bb      	ldr	r3, [r7, #24]
 801743c:	3301      	adds	r3, #1
 801743e:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8017440:	2b04      	cmp	r3, #4
 8017442:	d139      	bne.n	80174b8 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8017444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017446:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8017448:	2b0a      	cmp	r3, #10
 801744a:	d135      	bne.n	80174b8 <cdcd_open+0x1cc>
 801744c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801744e:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8017454:	461a      	mov	r2, r3
 8017456:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801745a:	4413      	add	r3, r2
 801745c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017462:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017464:	697b      	ldr	r3, [r7, #20]
 8017466:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	781b      	ldrb	r3, [r3, #0]
 801746c:	461a      	mov	r2, r3
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017472:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8017474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017476:	3303      	adds	r3, #3
 8017478:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801747a:	3202      	adds	r2, #2
 801747c:	79f8      	ldrb	r0, [r7, #7]
 801747e:	9201      	str	r2, [sp, #4]
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	2302      	movs	r3, #2
 8017484:	2202      	movs	r2, #2
 8017486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017488:	f001 f972 	bl	8018770 <usbd_open_edpt_pair>
 801748c:	4603      	mov	r3, r0
 801748e:	f083 0301 	eor.w	r3, r3, #1
 8017492:	b2db      	uxtb	r3, r3
 8017494:	2b00      	cmp	r3, #0
 8017496:	d00a      	beq.n	80174ae <cdcd_open+0x1c2>
 8017498:	4b0e      	ldr	r3, [pc, #56]	@ (80174d4 <cdcd_open+0x1e8>)
 801749a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801749c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	f003 0301 	and.w	r3, r3, #1
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d000      	beq.n	80174aa <cdcd_open+0x1be>
 80174a8:	be00      	bkpt	0x0000
 80174aa:	2300      	movs	r3, #0
 80174ac:	e00b      	b.n	80174c6 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80174ae:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80174b2:	330e      	adds	r3, #14
 80174b4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80174b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80174bc:	4618      	mov	r0, r3
 80174be:	f7ff fd89 	bl	8016fd4 <_prep_out_transaction>

  return drv_len;
 80174c2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3760      	adds	r7, #96	@ 0x60
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	240084b8 	.word	0x240084b8
 80174d4:	e000edf0 	.word	0xe000edf0

080174d8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80174d8:	b580      	push	{r7, lr}
 80174da:	b08a      	sub	sp, #40	@ 0x28
 80174dc:	af00      	add	r7, sp, #0
 80174de:	4603      	mov	r3, r0
 80174e0:	603a      	str	r2, [r7, #0]
 80174e2:	71fb      	strb	r3, [r7, #7]
 80174e4:	460b      	mov	r3, r1
 80174e6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	2b20      	cmp	r3, #32
 80174f4:	d001      	beq.n	80174fa <cdcd_control_xfer_cb+0x22>
 80174f6:	2300      	movs	r3, #0
 80174f8:	e0d7      	b.n	80176aa <cdcd_control_xfer_cb+0x1d2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80174fa:	2300      	movs	r3, #0
 80174fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017500:	e014      	b.n	801752c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8017502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017506:	22a8      	movs	r2, #168	@ 0xa8
 8017508:	fb02 f303 	mul.w	r3, r2, r3
 801750c:	4a69      	ldr	r2, [pc, #420]	@ (80176b4 <cdcd_control_xfer_cb+0x1dc>)
 801750e:	4413      	add	r3, r2
 8017510:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8017512:	6a3b      	ldr	r3, [r7, #32]
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	461a      	mov	r2, r3
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	889b      	ldrh	r3, [r3, #4]
 801751c:	b29b      	uxth	r3, r3
 801751e:	429a      	cmp	r2, r3
 8017520:	d009      	beq.n	8017536 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017526:	3301      	adds	r3, #1
 8017528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801752c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017530:	2b01      	cmp	r3, #1
 8017532:	d9e6      	bls.n	8017502 <cdcd_control_xfer_cb+0x2a>
 8017534:	e000      	b.n	8017538 <cdcd_control_xfer_cb+0x60>
      break;
 8017536:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8017538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801753c:	2b01      	cmp	r3, #1
 801753e:	d901      	bls.n	8017544 <cdcd_control_xfer_cb+0x6c>
 8017540:	2300      	movs	r3, #0
 8017542:	e0b2      	b.n	80176aa <cdcd_control_xfer_cb+0x1d2>

  switch (request->bRequest) {
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	785b      	ldrb	r3, [r3, #1]
 8017548:	3b20      	subs	r3, #32
 801754a:	2b03      	cmp	r3, #3
 801754c:	f200 80a3 	bhi.w	8017696 <cdcd_control_xfer_cb+0x1be>
 8017550:	a201      	add	r2, pc, #4	@ (adr r2, 8017558 <cdcd_control_xfer_cb+0x80>)
 8017552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017556:	bf00      	nop
 8017558:	08017569 	.word	0x08017569
 801755c:	080175a5 	.word	0x080175a5
 8017560:	080175bd 	.word	0x080175bd
 8017564:	08017665 	.word	0x08017665
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8017568:	79bb      	ldrb	r3, [r7, #6]
 801756a:	2b01      	cmp	r3, #1
 801756c:	d108      	bne.n	8017580 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 801756e:	6a3b      	ldr	r3, [r7, #32]
 8017570:	f103 0208 	add.w	r2, r3, #8
 8017574:	79f8      	ldrb	r0, [r7, #7]
 8017576:	2307      	movs	r3, #7
 8017578:	6839      	ldr	r1, [r7, #0]
 801757a:	f001 faff 	bl	8018b7c <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 801757e:	e08c      	b.n	801769a <cdcd_control_xfer_cb+0x1c2>
      } else if (stage == CONTROL_STAGE_ACK) {
 8017580:	79bb      	ldrb	r3, [r7, #6]
 8017582:	2b03      	cmp	r3, #3
 8017584:	f040 8089 	bne.w	801769a <cdcd_control_xfer_cb+0x1c2>
        if (tud_cdc_line_coding_cb) {
 8017588:	4b4b      	ldr	r3, [pc, #300]	@ (80176b8 <cdcd_control_xfer_cb+0x1e0>)
 801758a:	2b00      	cmp	r3, #0
 801758c:	f000 8085 	beq.w	801769a <cdcd_control_xfer_cb+0x1c2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8017590:	6a3b      	ldr	r3, [r7, #32]
 8017592:	f103 0208 	add.w	r2, r3, #8
 8017596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801759a:	4611      	mov	r1, r2
 801759c:	4618      	mov	r0, r3
 801759e:	f3af 8000 	nop.w
      break;
 80175a2:	e07a      	b.n	801769a <cdcd_control_xfer_cb+0x1c2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80175a4:	79bb      	ldrb	r3, [r7, #6]
 80175a6:	2b01      	cmp	r3, #1
 80175a8:	d179      	bne.n	801769e <cdcd_control_xfer_cb+0x1c6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80175aa:	6a3b      	ldr	r3, [r7, #32]
 80175ac:	f103 0208 	add.w	r2, r3, #8
 80175b0:	79f8      	ldrb	r0, [r7, #7]
 80175b2:	2307      	movs	r3, #7
 80175b4:	6839      	ldr	r1, [r7, #0]
 80175b6:	f001 fae1 	bl	8018b7c <tud_control_xfer>
      }
      break;
 80175ba:	e070      	b.n	801769e <cdcd_control_xfer_cb+0x1c6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80175bc:	79bb      	ldrb	r3, [r7, #6]
 80175be:	2b01      	cmp	r3, #1
 80175c0:	d105      	bne.n	80175ce <cdcd_control_xfer_cb+0xf6>
        tud_control_status(rhport, request);
 80175c2:	79fb      	ldrb	r3, [r7, #7]
 80175c4:	6839      	ldr	r1, [r7, #0]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f001 fa66 	bl	8018a98 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80175cc:	e069      	b.n	80176a2 <cdcd_control_xfer_cb+0x1ca>
      } else if (stage == CONTROL_STAGE_ACK) {
 80175ce:	79bb      	ldrb	r3, [r7, #6]
 80175d0:	2b03      	cmp	r3, #3
 80175d2:	d166      	bne.n	80176a2 <cdcd_control_xfer_cb+0x1ca>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	885b      	ldrh	r3, [r3, #2]
 80175d8:	b29b      	uxth	r3, r3
 80175da:	613b      	str	r3, [r7, #16]
 80175dc:	2300      	movs	r3, #0
 80175de:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80175e0:	7bfb      	ldrb	r3, [r7, #15]
 80175e2:	693a      	ldr	r2, [r7, #16]
 80175e4:	fa22 f303 	lsr.w	r3, r2, r3
 80175e8:	f003 0301 	and.w	r3, r3, #1
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	bf14      	ite	ne
 80175f0:	2301      	movne	r3, #1
 80175f2:	2300      	moveq	r3, #0
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	885b      	ldrh	r3, [r3, #2]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	61bb      	str	r3, [r7, #24]
 8017600:	2301      	movs	r3, #1
 8017602:	75fb      	strb	r3, [r7, #23]
 8017604:	7dfb      	ldrb	r3, [r7, #23]
 8017606:	69ba      	ldr	r2, [r7, #24]
 8017608:	fa22 f303 	lsr.w	r3, r2, r3
 801760c:	f003 0301 	and.w	r3, r3, #1
 8017610:	2b00      	cmp	r3, #0
 8017612:	bf14      	ite	ne
 8017614:	2301      	movne	r3, #1
 8017616:	2300      	moveq	r3, #0
 8017618:	b2db      	uxtb	r3, r3
 801761a:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	885b      	ldrh	r3, [r3, #2]
 8017620:	b29b      	uxth	r3, r3
 8017622:	b2da      	uxtb	r2, r3
 8017624:	6a3b      	ldr	r3, [r7, #32]
 8017626:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8017628:	6a3b      	ldr	r3, [r7, #32]
 801762a:	f103 021c 	add.w	r2, r3, #28
 801762e:	7ffb      	ldrb	r3, [r7, #31]
 8017630:	2b00      	cmp	r3, #0
 8017632:	bf14      	ite	ne
 8017634:	2301      	movne	r3, #1
 8017636:	2300      	moveq	r3, #0
 8017638:	b2db      	uxtb	r3, r3
 801763a:	f083 0301 	eor.w	r3, r3, #1
 801763e:	b2db      	uxtb	r3, r3
 8017640:	f003 0301 	and.w	r3, r3, #1
 8017644:	b2db      	uxtb	r3, r3
 8017646:	4619      	mov	r1, r3
 8017648:	4610      	mov	r0, r2
 801764a:	f000 fe5b 	bl	8018304 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 801764e:	4b1b      	ldr	r3, [pc, #108]	@ (80176bc <cdcd_control_xfer_cb+0x1e4>)
 8017650:	2b00      	cmp	r3, #0
 8017652:	d026      	beq.n	80176a2 <cdcd_control_xfer_cb+0x1ca>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8017654:	7fba      	ldrb	r2, [r7, #30]
 8017656:	7ff9      	ldrb	r1, [r7, #31]
 8017658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801765c:	4618      	mov	r0, r3
 801765e:	f3af 8000 	nop.w
      break;
 8017662:	e01e      	b.n	80176a2 <cdcd_control_xfer_cb+0x1ca>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8017664:	79bb      	ldrb	r3, [r7, #6]
 8017666:	2b01      	cmp	r3, #1
 8017668:	d105      	bne.n	8017676 <cdcd_control_xfer_cb+0x19e>
        tud_control_status(rhport, request);
 801766a:	79fb      	ldrb	r3, [r7, #7]
 801766c:	6839      	ldr	r1, [r7, #0]
 801766e:	4618      	mov	r0, r3
 8017670:	f001 fa12 	bl	8018a98 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8017674:	e017      	b.n	80176a6 <cdcd_control_xfer_cb+0x1ce>
      } else if (stage == CONTROL_STAGE_ACK) {
 8017676:	79bb      	ldrb	r3, [r7, #6]
 8017678:	2b03      	cmp	r3, #3
 801767a:	d114      	bne.n	80176a6 <cdcd_control_xfer_cb+0x1ce>
        if (tud_cdc_send_break_cb) {
 801767c:	4b10      	ldr	r3, [pc, #64]	@ (80176c0 <cdcd_control_xfer_cb+0x1e8>)
 801767e:	2b00      	cmp	r3, #0
 8017680:	d011      	beq.n	80176a6 <cdcd_control_xfer_cb+0x1ce>
          tud_cdc_send_break_cb(itf, request->wValue);
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	885b      	ldrh	r3, [r3, #2]
 8017686:	b29a      	uxth	r2, r3
 8017688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801768c:	4611      	mov	r1, r2
 801768e:	4618      	mov	r0, r3
 8017690:	f3af 8000 	nop.w
      break;
 8017694:	e007      	b.n	80176a6 <cdcd_control_xfer_cb+0x1ce>

    default:
      return false; // stall unsupported request
 8017696:	2300      	movs	r3, #0
 8017698:	e007      	b.n	80176aa <cdcd_control_xfer_cb+0x1d2>
      break;
 801769a:	bf00      	nop
 801769c:	e004      	b.n	80176a8 <cdcd_control_xfer_cb+0x1d0>
      break;
 801769e:	bf00      	nop
 80176a0:	e002      	b.n	80176a8 <cdcd_control_xfer_cb+0x1d0>
      break;
 80176a2:	bf00      	nop
 80176a4:	e000      	b.n	80176a8 <cdcd_control_xfer_cb+0x1d0>
      break;
 80176a6:	bf00      	nop
  }

  return true;
 80176a8:	2301      	movs	r3, #1
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3728      	adds	r7, #40	@ 0x28
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	240084b8 	.word	0x240084b8
	...

080176c4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b088      	sub	sp, #32
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	603b      	str	r3, [r7, #0]
 80176cc:	4603      	mov	r3, r0
 80176ce:	71fb      	strb	r3, [r7, #7]
 80176d0:	460b      	mov	r3, r1
 80176d2:	71bb      	strb	r3, [r7, #6]
 80176d4:	4613      	mov	r3, r2
 80176d6:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80176d8:	2300      	movs	r3, #0
 80176da:	77fb      	strb	r3, [r7, #31]
 80176dc:	e013      	b.n	8017706 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80176de:	7ffb      	ldrb	r3, [r7, #31]
 80176e0:	22a8      	movs	r2, #168	@ 0xa8
 80176e2:	fb02 f303 	mul.w	r3, r2, r3
 80176e6:	4a56      	ldr	r2, [pc, #344]	@ (8017840 <cdcd_xfer_cb+0x17c>)
 80176e8:	4413      	add	r3, r2
 80176ea:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80176ec:	69bb      	ldr	r3, [r7, #24]
 80176ee:	78db      	ldrb	r3, [r3, #3]
 80176f0:	79ba      	ldrb	r2, [r7, #6]
 80176f2:	429a      	cmp	r2, r3
 80176f4:	d00a      	beq.n	801770c <cdcd_xfer_cb+0x48>
 80176f6:	69bb      	ldr	r3, [r7, #24]
 80176f8:	789b      	ldrb	r3, [r3, #2]
 80176fa:	79ba      	ldrb	r2, [r7, #6]
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d005      	beq.n	801770c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017700:	7ffb      	ldrb	r3, [r7, #31]
 8017702:	3301      	adds	r3, #1
 8017704:	77fb      	strb	r3, [r7, #31]
 8017706:	7ffb      	ldrb	r3, [r7, #31]
 8017708:	2b01      	cmp	r3, #1
 801770a:	d9e8      	bls.n	80176de <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 801770c:	7ffb      	ldrb	r3, [r7, #31]
 801770e:	2b01      	cmp	r3, #1
 8017710:	d90a      	bls.n	8017728 <cdcd_xfer_cb+0x64>
 8017712:	4b4c      	ldr	r3, [pc, #304]	@ (8017844 <cdcd_xfer_cb+0x180>)
 8017714:	60fb      	str	r3, [r7, #12]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	f003 0301 	and.w	r3, r3, #1
 801771e:	2b00      	cmp	r3, #0
 8017720:	d000      	beq.n	8017724 <cdcd_xfer_cb+0x60>
 8017722:	be00      	bkpt	0x0000
 8017724:	2300      	movs	r3, #0
 8017726:	e087      	b.n	8017838 <cdcd_xfer_cb+0x174>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8017728:	7ffb      	ldrb	r3, [r7, #31]
 801772a:	01db      	lsls	r3, r3, #7
 801772c:	4a46      	ldr	r2, [pc, #280]	@ (8017848 <cdcd_xfer_cb+0x184>)
 801772e:	4413      	add	r3, r2
 8017730:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	78db      	ldrb	r3, [r3, #3]
 8017736:	79ba      	ldrb	r2, [r7, #6]
 8017738:	429a      	cmp	r2, r3
 801773a:	d148      	bne.n	80177ce <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 801773c:	69bb      	ldr	r3, [r7, #24]
 801773e:	3310      	adds	r3, #16
 8017740:	6939      	ldr	r1, [r7, #16]
 8017742:	683a      	ldr	r2, [r7, #0]
 8017744:	b292      	uxth	r2, r2
 8017746:	4618      	mov	r0, r3
 8017748:	f000 fda7 	bl	801829a <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 801774c:	4b3f      	ldr	r3, [pc, #252]	@ (801784c <cdcd_xfer_cb+0x188>)
 801774e:	2b00      	cmp	r3, #0
 8017750:	d027      	beq.n	80177a2 <cdcd_xfer_cb+0xde>
 8017752:	69bb      	ldr	r3, [r7, #24]
 8017754:	795b      	ldrb	r3, [r3, #5]
 8017756:	2bff      	cmp	r3, #255	@ 0xff
 8017758:	d023      	beq.n	80177a2 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 801775a:	2300      	movs	r3, #0
 801775c:	617b      	str	r3, [r7, #20]
 801775e:	e01c      	b.n	801779a <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	795a      	ldrb	r2, [r3, #5]
 8017764:	6939      	ldr	r1, [r7, #16]
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	440b      	add	r3, r1
 801776a:	781b      	ldrb	r3, [r3, #0]
 801776c:	429a      	cmp	r2, r3
 801776e:	d111      	bne.n	8017794 <cdcd_xfer_cb+0xd0>
 8017770:	69bb      	ldr	r3, [r7, #24]
 8017772:	3310      	adds	r3, #16
 8017774:	4618      	mov	r0, r3
 8017776:	f000 fcae 	bl	80180d6 <tu_fifo_empty>
 801777a:	4603      	mov	r3, r0
 801777c:	f083 0301 	eor.w	r3, r3, #1
 8017780:	b2db      	uxtb	r3, r3
 8017782:	2b00      	cmp	r3, #0
 8017784:	d006      	beq.n	8017794 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8017786:	69bb      	ldr	r3, [r7, #24]
 8017788:	795a      	ldrb	r2, [r3, #5]
 801778a:	7ffb      	ldrb	r3, [r7, #31]
 801778c:	4611      	mov	r1, r2
 801778e:	4618      	mov	r0, r3
 8017790:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8017794:	697b      	ldr	r3, [r7, #20]
 8017796:	3301      	adds	r3, #1
 8017798:	617b      	str	r3, [r7, #20]
 801779a:	697a      	ldr	r2, [r7, #20]
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d3de      	bcc.n	8017760 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80177a2:	4b2b      	ldr	r3, [pc, #172]	@ (8017850 <cdcd_xfer_cb+0x18c>)
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d00e      	beq.n	80177c6 <cdcd_xfer_cb+0x102>
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	3310      	adds	r3, #16
 80177ac:	4618      	mov	r0, r3
 80177ae:	f000 fc92 	bl	80180d6 <tu_fifo_empty>
 80177b2:	4603      	mov	r3, r0
 80177b4:	f083 0301 	eor.w	r3, r3, #1
 80177b8:	b2db      	uxtb	r3, r3
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d003      	beq.n	80177c6 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80177be:	7ffb      	ldrb	r3, [r7, #31]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80177c6:	7ffb      	ldrb	r3, [r7, #31]
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7ff fc03 	bl	8016fd4 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80177ce:	69bb      	ldr	r3, [r7, #24]
 80177d0:	789b      	ldrb	r3, [r3, #2]
 80177d2:	79ba      	ldrb	r2, [r7, #6]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d12e      	bne.n	8017836 <cdcd_xfer_cb+0x172>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80177d8:	4b1e      	ldr	r3, [pc, #120]	@ (8017854 <cdcd_xfer_cb+0x190>)
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d003      	beq.n	80177e6 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80177de:	7ffb      	ldrb	r3, [r7, #31]
 80177e0:	4618      	mov	r0, r3
 80177e2:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80177e6:	7ffb      	ldrb	r3, [r7, #31]
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7ff fc63 	bl	80170b4 <tud_cdc_n_write_flush>
 80177ee:	4603      	mov	r3, r0
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d120      	bne.n	8017836 <cdcd_xfer_cb+0x172>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80177f4:	69bb      	ldr	r3, [r7, #24]
 80177f6:	331c      	adds	r3, #28
 80177f8:	4618      	mov	r0, r3
 80177fa:	f000 fc3a 	bl	8018072 <tu_fifo_count>
 80177fe:	4603      	mov	r3, r0
 8017800:	2b00      	cmp	r3, #0
 8017802:	d118      	bne.n	8017836 <cdcd_xfer_cb+0x172>
 8017804:	683b      	ldr	r3, [r7, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d015      	beq.n	8017836 <cdcd_xfer_cb+0x172>
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017810:	2b00      	cmp	r3, #0
 8017812:	d110      	bne.n	8017836 <cdcd_xfer_cb+0x172>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8017814:	69bb      	ldr	r3, [r7, #24]
 8017816:	789a      	ldrb	r2, [r3, #2]
 8017818:	79fb      	ldrb	r3, [r7, #7]
 801781a:	4611      	mov	r1, r2
 801781c:	4618      	mov	r0, r3
 801781e:	f001 f855 	bl	80188cc <usbd_edpt_claim>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d006      	beq.n	8017836 <cdcd_xfer_cb+0x172>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	7899      	ldrb	r1, [r3, #2]
 801782c:	79f8      	ldrb	r0, [r7, #7]
 801782e:	2300      	movs	r3, #0
 8017830:	2200      	movs	r2, #0
 8017832:	f001 f89f 	bl	8018974 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8017836:	2301      	movs	r3, #1
}
 8017838:	4618      	mov	r0, r3
 801783a:	3720      	adds	r7, #32
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	240084b8 	.word	0x240084b8
 8017844:	e000edf0 	.word	0xe000edf0
 8017848:	24008608 	.word	0x24008608
	...

08017858 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8017858:	b480      	push	{r7}
 801785a:	b085      	sub	sp, #20
 801785c:	af00      	add	r7, sp, #0
 801785e:	60f8      	str	r0, [r7, #12]
 8017860:	60b9      	str	r1, [r7, #8]
 8017862:	4611      	mov	r1, r2
 8017864:	461a      	mov	r2, r3
 8017866:	460b      	mov	r3, r1
 8017868:	80fb      	strh	r3, [r7, #6]
 801786a:	4613      	mov	r3, r2
 801786c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 801786e:	88fb      	ldrh	r3, [r7, #6]
 8017870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017874:	d901      	bls.n	801787a <tu_fifo_config+0x22>
 8017876:	2300      	movs	r3, #0
 8017878:	e01b      	b.n	80178b2 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	68ba      	ldr	r2, [r7, #8]
 801787e:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	88fa      	ldrh	r2, [r7, #6]
 8017884:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8017886:	88bb      	ldrh	r3, [r7, #4]
 8017888:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801788c:	b299      	uxth	r1, r3
 801788e:	68fa      	ldr	r2, [r7, #12]
 8017890:	88d3      	ldrh	r3, [r2, #6]
 8017892:	f361 030e 	bfi	r3, r1, #0, #15
 8017896:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8017898:	68fa      	ldr	r2, [r7, #12]
 801789a:	79d3      	ldrb	r3, [r2, #7]
 801789c:	7e39      	ldrb	r1, [r7, #24]
 801789e:	f361 13c7 	bfi	r3, r1, #7, #1
 80178a2:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2200      	movs	r2, #0
 80178a8:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	2200      	movs	r2, #0
 80178ae:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80178b0:	2301      	movs	r3, #1
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3714      	adds	r7, #20
 80178b6:	46bd      	mov	sp, r7
 80178b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178bc:	4770      	bx	lr

080178be <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80178be:	b580      	push	{r7, lr}
 80178c0:	b08a      	sub	sp, #40	@ 0x28
 80178c2:	af00      	add	r7, sp, #0
 80178c4:	60f8      	str	r0, [r7, #12]
 80178c6:	60b9      	str	r1, [r7, #8]
 80178c8:	4613      	mov	r3, r2
 80178ca:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80178d0:	88fb      	ldrh	r3, [r7, #6]
 80178d2:	089b      	lsrs	r3, r3, #2
 80178d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80178d6:	e00b      	b.n	80178f0 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80178d8:	6a3b      	ldr	r3, [r7, #32]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	68fa      	ldr	r2, [r7, #12]
 80178de:	61ba      	str	r2, [r7, #24]
 80178e0:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	697a      	ldr	r2, [r7, #20]
 80178e6:	601a      	str	r2, [r3, #0]
}
 80178e8:	bf00      	nop
    ff_buf += 4;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	3304      	adds	r3, #4
 80178ee:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80178f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80178f2:	1e5a      	subs	r2, r3, #1
 80178f4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d1ee      	bne.n	80178d8 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80178fa:	88fb      	ldrh	r3, [r7, #6]
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	f003 0303 	and.w	r3, r3, #3
 8017902:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8017904:	7ffb      	ldrb	r3, [r7, #31]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d009      	beq.n	801791e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 801790a:	6a3b      	ldr	r3, [r7, #32]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8017910:	7ffa      	ldrb	r2, [r7, #31]
 8017912:	f107 0310 	add.w	r3, r7, #16
 8017916:	4619      	mov	r1, r3
 8017918:	68f8      	ldr	r0, [r7, #12]
 801791a:	f005 fc48 	bl	801d1ae <memcpy>
  }
}
 801791e:	bf00      	nop
 8017920:	3728      	adds	r7, #40	@ 0x28
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}

08017926 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8017926:	b580      	push	{r7, lr}
 8017928:	b08a      	sub	sp, #40	@ 0x28
 801792a:	af00      	add	r7, sp, #0
 801792c:	60f8      	str	r0, [r7, #12]
 801792e:	60b9      	str	r1, [r7, #8]
 8017930:	4613      	mov	r3, r2
 8017932:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8017938:	88fb      	ldrh	r3, [r7, #6]
 801793a:	089b      	lsrs	r3, r3, #2
 801793c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 801793e:	e008      	b.n	8017952 <_ff_pull_const_addr+0x2c>
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8017944:	69bb      	ldr	r3, [r7, #24]
 8017946:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8017948:	6a3b      	ldr	r3, [r7, #32]
 801794a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	3304      	adds	r3, #4
 8017950:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8017952:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017954:	1e5a      	subs	r2, r3, #1
 8017956:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8017958:	2b00      	cmp	r3, #0
 801795a:	d1f1      	bne.n	8017940 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 801795c:	88fb      	ldrh	r3, [r7, #6]
 801795e:	b2db      	uxtb	r3, r3
 8017960:	f003 0303 	and.w	r3, r3, #3
 8017964:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8017966:	7ffb      	ldrb	r3, [r7, #31]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d00b      	beq.n	8017984 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 801796c:	2300      	movs	r3, #0
 801796e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8017970:	7ffa      	ldrb	r2, [r7, #31]
 8017972:	f107 0314 	add.w	r3, r7, #20
 8017976:	68b9      	ldr	r1, [r7, #8]
 8017978:	4618      	mov	r0, r3
 801797a:	f005 fc18 	bl	801d1ae <memcpy>

    *reg_tx = tmp32;
 801797e:	697a      	ldr	r2, [r7, #20]
 8017980:	6a3b      	ldr	r3, [r7, #32]
 8017982:	601a      	str	r2, [r3, #0]
  }
}
 8017984:	bf00      	nop
 8017986:	3728      	adds	r7, #40	@ 0x28
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}

0801798c <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b084      	sub	sp, #16
 8017990:	af00      	add	r7, sp, #0
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	4613      	mov	r3, r2
 8017998:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	88fa      	ldrh	r2, [r7, #6]
 80179a0:	68f9      	ldr	r1, [r7, #12]
 80179a2:	88c9      	ldrh	r1, [r1, #6]
 80179a4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80179a8:	b289      	uxth	r1, r1
 80179aa:	fb01 f202 	mul.w	r2, r1, r2
 80179ae:	1898      	adds	r0, r3, r2
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	88db      	ldrh	r3, [r3, #6]
 80179b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80179b8:	b29b      	uxth	r3, r3
 80179ba:	461a      	mov	r2, r3
 80179bc:	68b9      	ldr	r1, [r7, #8]
 80179be:	f005 fbf6 	bl	801d1ae <memcpy>
}
 80179c2:	bf00      	nop
 80179c4:	3710      	adds	r7, #16
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}

080179ca <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80179ca:	b580      	push	{r7, lr}
 80179cc:	b08e      	sub	sp, #56	@ 0x38
 80179ce:	af00      	add	r7, sp, #0
 80179d0:	60f8      	str	r0, [r7, #12]
 80179d2:	60b9      	str	r1, [r7, #8]
 80179d4:	4611      	mov	r1, r2
 80179d6:	461a      	mov	r2, r3
 80179d8:	460b      	mov	r3, r1
 80179da:	80fb      	strh	r3, [r7, #6]
 80179dc:	4613      	mov	r3, r2
 80179de:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	889a      	ldrh	r2, [r3, #4]
 80179e4:	88bb      	ldrh	r3, [r7, #4]
 80179e6:	1ad3      	subs	r3, r2, r3
 80179e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 80179ea:	88fa      	ldrh	r2, [r7, #6]
 80179ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80179ee:	1ad3      	subs	r3, r2, r3
 80179f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	88db      	ldrh	r3, [r3, #6]
 80179f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	461a      	mov	r2, r3
 80179fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a00:	fb13 f302 	smulbb	r3, r3, r2
 8017a04:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	88db      	ldrh	r3, [r3, #6]
 8017a0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a0e:	b29b      	uxth	r3, r3
 8017a10:	461a      	mov	r2, r3
 8017a12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017a14:	fb13 f302 	smulbb	r3, r3, r2
 8017a18:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	88ba      	ldrh	r2, [r7, #4]
 8017a20:	68f9      	ldr	r1, [r7, #12]
 8017a22:	88c9      	ldrh	r1, [r1, #6]
 8017a24:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017a28:	b289      	uxth	r1, r1
 8017a2a:	fb01 f202 	mul.w	r2, r1, r2
 8017a2e:	4413      	add	r3, r2
 8017a30:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017a32:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d002      	beq.n	8017a40 <_ff_push_n+0x76>
 8017a3a:	2b01      	cmp	r3, #1
 8017a3c:	d022      	beq.n	8017a84 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8017a3e:	e09e      	b.n	8017b7e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017a40:	88fa      	ldrh	r2, [r7, #6]
 8017a42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d80d      	bhi.n	8017a64 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8017a48:	88fb      	ldrh	r3, [r7, #6]
 8017a4a:	68fa      	ldr	r2, [r7, #12]
 8017a4c:	88d2      	ldrh	r2, [r2, #6]
 8017a4e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017a52:	b292      	uxth	r2, r2
 8017a54:	fb02 f303 	mul.w	r3, r2, r3
 8017a58:	461a      	mov	r2, r3
 8017a5a:	68b9      	ldr	r1, [r7, #8]
 8017a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a5e:	f005 fba6 	bl	801d1ae <memcpy>
      break;
 8017a62:	e08c      	b.n	8017b7e <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8017a64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a66:	461a      	mov	r2, r3
 8017a68:	68b9      	ldr	r1, [r7, #8]
 8017a6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a6c:	f005 fb9f 	bl	801d1ae <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	6818      	ldr	r0, [r3, #0]
 8017a74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a76:	68ba      	ldr	r2, [r7, #8]
 8017a78:	4413      	add	r3, r2
 8017a7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017a7c:	4619      	mov	r1, r3
 8017a7e:	f005 fb96 	bl	801d1ae <memcpy>
      break;
 8017a82:	e07c      	b.n	8017b7e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017a84:	88fa      	ldrh	r2, [r7, #6]
 8017a86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a88:	429a      	cmp	r2, r3
 8017a8a:	d80f      	bhi.n	8017aac <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	88db      	ldrh	r3, [r3, #6]
 8017a90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	461a      	mov	r2, r3
 8017a98:	88fb      	ldrh	r3, [r7, #6]
 8017a9a:	fb13 f302 	smulbb	r3, r3, r2
 8017a9e:	b29b      	uxth	r3, r3
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	68b9      	ldr	r1, [r7, #8]
 8017aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017aa6:	f7ff ff0a 	bl	80178be <_ff_push_const_addr>
      break;
 8017aaa:	e067      	b.n	8017b7c <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8017aac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017aae:	f023 0303 	bic.w	r3, r3, #3
 8017ab2:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8017ab4:	8c3b      	ldrh	r3, [r7, #32]
 8017ab6:	461a      	mov	r2, r3
 8017ab8:	68b9      	ldr	r1, [r7, #8]
 8017aba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017abc:	f7ff feff 	bl	80178be <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8017ac0:	8c3b      	ldrh	r3, [r7, #32]
 8017ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ac4:	4413      	add	r3, r2
 8017ac6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017ac8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017aca:	b2db      	uxtb	r3, r3
 8017acc:	f003 0303 	and.w	r3, r3, #3
 8017ad0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d043      	beq.n	8017b64 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8017adc:	68bb      	ldr	r3, [r7, #8]
 8017ade:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	f1c3 0304 	rsb	r3, r3, #4
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017aee:	837b      	strh	r3, [r7, #26]
 8017af0:	4613      	mov	r3, r2
 8017af2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8017af4:	8b7a      	ldrh	r2, [r7, #26]
 8017af6:	8b3b      	ldrh	r3, [r7, #24]
 8017af8:	4293      	cmp	r3, r2
 8017afa:	bf28      	it	cs
 8017afc:	4613      	movcs	r3, r2
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8017b04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017b0c:	1ad3      	subs	r3, r2, r3
 8017b0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8017b16:	f107 0314 	add.w	r3, r7, #20
 8017b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8017b1c:	e007      	b.n	8017b2e <_ff_push_n+0x164>
 8017b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b20:	1c53      	adds	r3, r2, #1
 8017b22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b26:	1c59      	adds	r1, r3, #1
 8017b28:	6339      	str	r1, [r7, #48]	@ 0x30
 8017b2a:	7812      	ldrb	r2, [r2, #0]
 8017b2c:	701a      	strb	r2, [r3, #0]
 8017b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b32:	1e5a      	subs	r2, r3, #1
 8017b34:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d1f0      	bne.n	8017b1e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8017b42:	e007      	b.n	8017b54 <_ff_push_n+0x18a>
 8017b44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b46:	1c53      	adds	r3, r2, #1
 8017b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4c:	1c59      	adds	r1, r3, #1
 8017b4e:	6339      	str	r1, [r7, #48]	@ 0x30
 8017b50:	7812      	ldrb	r2, [r2, #0]
 8017b52:	701a      	strb	r2, [r3, #0]
 8017b54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017b58:	1e5a      	subs	r2, r3, #1
 8017b5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1f0      	bne.n	8017b44 <_ff_push_n+0x17a>
 8017b62:	e002      	b.n	8017b6a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8017b6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d005      	beq.n	8017b7c <_ff_push_n+0x1b2>
 8017b70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b72:	461a      	mov	r2, r3
 8017b74:	68b9      	ldr	r1, [r7, #8]
 8017b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b78:	f7ff fea1 	bl	80178be <_ff_push_const_addr>
      break;
 8017b7c:	bf00      	nop
  }
}
 8017b7e:	bf00      	nop
 8017b80:	3738      	adds	r7, #56	@ 0x38
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8017b86:	b580      	push	{r7, lr}
 8017b88:	b08e      	sub	sp, #56	@ 0x38
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	60f8      	str	r0, [r7, #12]
 8017b8e:	60b9      	str	r1, [r7, #8]
 8017b90:	4611      	mov	r1, r2
 8017b92:	461a      	mov	r2, r3
 8017b94:	460b      	mov	r3, r1
 8017b96:	80fb      	strh	r3, [r7, #6]
 8017b98:	4613      	mov	r3, r2
 8017b9a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	889a      	ldrh	r2, [r3, #4]
 8017ba0:	88bb      	ldrh	r3, [r7, #4]
 8017ba2:	1ad3      	subs	r3, r2, r3
 8017ba4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8017ba6:	88fa      	ldrh	r2, [r7, #6]
 8017ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017baa:	1ad3      	subs	r3, r2, r3
 8017bac:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	88db      	ldrh	r3, [r3, #6]
 8017bb2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	461a      	mov	r2, r3
 8017bba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017bbc:	fb13 f302 	smulbb	r3, r3, r2
 8017bc0:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	88db      	ldrh	r3, [r3, #6]
 8017bc6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	461a      	mov	r2, r3
 8017bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017bd0:	fb13 f302 	smulbb	r3, r3, r2
 8017bd4:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	88ba      	ldrh	r2, [r7, #4]
 8017bdc:	68f9      	ldr	r1, [r7, #12]
 8017bde:	88c9      	ldrh	r1, [r1, #6]
 8017be0:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017be4:	b289      	uxth	r1, r1
 8017be6:	fb01 f202 	mul.w	r2, r1, r2
 8017bea:	4413      	add	r3, r2
 8017bec:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017bee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d002      	beq.n	8017bfc <_ff_pull_n+0x76>
 8017bf6:	2b01      	cmp	r3, #1
 8017bf8:	d022      	beq.n	8017c40 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8017bfa:	e0a0      	b.n	8017d3e <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017bfc:	88fa      	ldrh	r2, [r7, #6]
 8017bfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d80d      	bhi.n	8017c20 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8017c04:	88fb      	ldrh	r3, [r7, #6]
 8017c06:	68fa      	ldr	r2, [r7, #12]
 8017c08:	88d2      	ldrh	r2, [r2, #6]
 8017c0a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017c0e:	b292      	uxth	r2, r2
 8017c10:	fb02 f303 	mul.w	r3, r2, r3
 8017c14:	461a      	mov	r2, r3
 8017c16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c18:	68b8      	ldr	r0, [r7, #8]
 8017c1a:	f005 fac8 	bl	801d1ae <memcpy>
    break;
 8017c1e:	e08e      	b.n	8017d3e <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8017c20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c22:	461a      	mov	r2, r3
 8017c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c26:	68b8      	ldr	r0, [r7, #8]
 8017c28:	f005 fac1 	bl	801d1ae <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8017c2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c2e:	68ba      	ldr	r2, [r7, #8]
 8017c30:	18d0      	adds	r0, r2, r3
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017c38:	4619      	mov	r1, r3
 8017c3a:	f005 fab8 	bl	801d1ae <memcpy>
    break;
 8017c3e:	e07e      	b.n	8017d3e <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017c40:	88fa      	ldrh	r2, [r7, #6]
 8017c42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d80f      	bhi.n	8017c68 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	88db      	ldrh	r3, [r3, #6]
 8017c4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	461a      	mov	r2, r3
 8017c54:	88fb      	ldrh	r3, [r7, #6]
 8017c56:	fb13 f302 	smulbb	r3, r3, r2
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c60:	68b8      	ldr	r0, [r7, #8]
 8017c62:	f7ff fe60 	bl	8017926 <_ff_pull_const_addr>
    break;
 8017c66:	e069      	b.n	8017d3c <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8017c68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c6a:	f023 0303 	bic.w	r3, r3, #3
 8017c6e:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8017c70:	8c3b      	ldrh	r3, [r7, #32]
 8017c72:	461a      	mov	r2, r3
 8017c74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c76:	68b8      	ldr	r0, [r7, #8]
 8017c78:	f7ff fe55 	bl	8017926 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8017c7c:	8c3b      	ldrh	r3, [r7, #32]
 8017c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017c80:	4413      	add	r3, r2
 8017c82:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017c84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c86:	b2db      	uxtb	r3, r3
 8017c88:	f003 0303 	and.w	r3, r3, #3
 8017c8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017c90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d045      	beq.n	8017d24 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	f1c3 0304 	rsb	r3, r3, #4
 8017ca6:	b29a      	uxth	r2, r3
 8017ca8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017caa:	837b      	strh	r3, [r7, #26]
 8017cac:	4613      	mov	r3, r2
 8017cae:	833b      	strh	r3, [r7, #24]
 8017cb0:	8b7a      	ldrh	r2, [r7, #26]
 8017cb2:	8b3b      	ldrh	r3, [r7, #24]
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	bf28      	it	cs
 8017cb8:	4613      	movcs	r3, r2
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8017cc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017cc8:	1ad3      	subs	r3, r2, r3
 8017cca:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8017cd0:	f107 0314 	add.w	r3, r7, #20
 8017cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8017cd6:	e007      	b.n	8017ce8 <_ff_pull_n+0x162>
 8017cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017cda:	1c53      	adds	r3, r2, #1
 8017cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8017cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ce0:	1c59      	adds	r1, r3, #1
 8017ce2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017ce4:	7812      	ldrb	r2, [r2, #0]
 8017ce6:	701a      	strb	r2, [r3, #0]
 8017ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017cec:	1e5a      	subs	r2, r3, #1
 8017cee:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d1f0      	bne.n	8017cd8 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8017cfc:	e007      	b.n	8017d0e <_ff_pull_n+0x188>
 8017cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017d00:	1c53      	adds	r3, r2, #1
 8017d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8017d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d06:	1c59      	adds	r1, r3, #1
 8017d08:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017d0a:	7812      	ldrb	r2, [r2, #0]
 8017d0c:	701a      	strb	r2, [r3, #0]
 8017d0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017d12:	1e5a      	subs	r2, r3, #1
 8017d14:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d1f0      	bne.n	8017cfe <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8017d1c:	697a      	ldr	r2, [r7, #20]
 8017d1e:	69fb      	ldr	r3, [r7, #28]
 8017d20:	601a      	str	r2, [r3, #0]
 8017d22:	e002      	b.n	8017d2a <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8017d2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d005      	beq.n	8017d3c <_ff_pull_n+0x1b6>
 8017d30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017d32:	461a      	mov	r2, r3
 8017d34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017d36:	68b8      	ldr	r0, [r7, #8]
 8017d38:	f7ff fdf5 	bl	8017926 <_ff_pull_const_addr>
    break;
 8017d3c:	bf00      	nop
  }
}
 8017d3e:	bf00      	nop
 8017d40:	3738      	adds	r7, #56	@ 0x38
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd80      	pop	{r7, pc}

08017d46 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8017d46:	b480      	push	{r7}
 8017d48:	b085      	sub	sp, #20
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	80fb      	strh	r3, [r7, #6]
 8017d50:	460b      	mov	r3, r1
 8017d52:	80bb      	strh	r3, [r7, #4]
 8017d54:	4613      	mov	r3, r2
 8017d56:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8017d58:	88ba      	ldrh	r2, [r7, #4]
 8017d5a:	887b      	ldrh	r3, [r7, #2]
 8017d5c:	4413      	add	r3, r2
 8017d5e:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8017d60:	88ba      	ldrh	r2, [r7, #4]
 8017d62:	89fb      	ldrh	r3, [r7, #14]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d804      	bhi.n	8017d72 <advance_index+0x2c>
 8017d68:	89fa      	ldrh	r2, [r7, #14]
 8017d6a:	88fb      	ldrh	r3, [r7, #6]
 8017d6c:	005b      	lsls	r3, r3, #1
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	db08      	blt.n	8017d84 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8017d72:	88fb      	ldrh	r3, [r7, #6]
 8017d74:	005b      	lsls	r3, r3, #1
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	425b      	negs	r3, r3
 8017d7a:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8017d7c:	89fa      	ldrh	r2, [r7, #14]
 8017d7e:	89bb      	ldrh	r3, [r7, #12]
 8017d80:	4413      	add	r3, r2
 8017d82:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8017d84:	89fb      	ldrh	r3, [r7, #14]
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	3714      	adds	r7, #20
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d90:	4770      	bx	lr

08017d92 <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8017d92:	b580      	push	{r7, lr}
 8017d94:	b08c      	sub	sp, #48	@ 0x30
 8017d96:	af02      	add	r7, sp, #8
 8017d98:	60f8      	str	r0, [r7, #12]
 8017d9a:	60b9      	str	r1, [r7, #8]
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	461a      	mov	r2, r3
 8017da0:	460b      	mov	r3, r1
 8017da2:	80fb      	strh	r3, [r7, #6]
 8017da4:	4613      	mov	r3, r2
 8017da6:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	889b      	ldrh	r3, [r3, #4]
 8017dac:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017dae:	88bb      	ldrh	r3, [r7, #4]
 8017db0:	843b      	strh	r3, [r7, #32]
 8017db2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017db4:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8017db6:	8c3a      	ldrh	r2, [r7, #32]
 8017db8:	8bfb      	ldrh	r3, [r7, #30]
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d304      	bcc.n	8017dc8 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8017dbe:	8c3a      	ldrh	r2, [r7, #32]
 8017dc0:	8bfb      	ldrh	r3, [r7, #30]
 8017dc2:	1ad3      	subs	r3, r2, r3
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	e008      	b.n	8017dda <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dca:	005b      	lsls	r3, r3, #1
 8017dcc:	b29a      	uxth	r2, r3
 8017dce:	8c39      	ldrh	r1, [r7, #32]
 8017dd0:	8bfb      	ldrh	r3, [r7, #30]
 8017dd2:	1acb      	subs	r3, r1, r3
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	4413      	add	r3, r2
 8017dd8:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8017dda:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8017ddc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d101      	bne.n	8017de6 <_tu_fifo_peek_n+0x54>
 8017de2:	2300      	movs	r3, #0
 8017de4:	e041      	b.n	8017e6a <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	889b      	ldrh	r3, [r3, #4]
 8017dea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d91b      	bls.n	8017e28 <_tu_fifo_peek_n+0x96>
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	61bb      	str	r3, [r7, #24]
 8017df4:	88bb      	ldrh	r3, [r7, #4]
 8017df6:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8017df8:	69bb      	ldr	r3, [r7, #24]
 8017dfa:	889b      	ldrh	r3, [r3, #4]
 8017dfc:	8afa      	ldrh	r2, [r7, #22]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d305      	bcc.n	8017e0e <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8017e02:	69bb      	ldr	r3, [r7, #24]
 8017e04:	889b      	ldrh	r3, [r3, #4]
 8017e06:	8afa      	ldrh	r2, [r7, #22]
 8017e08:	1ad3      	subs	r3, r2, r3
 8017e0a:	82bb      	strh	r3, [r7, #20]
 8017e0c:	e004      	b.n	8017e18 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8017e0e:	69bb      	ldr	r3, [r7, #24]
 8017e10:	889a      	ldrh	r2, [r3, #4]
 8017e12:	8afb      	ldrh	r3, [r7, #22]
 8017e14:	4413      	add	r3, r2
 8017e16:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8017e18:	69bb      	ldr	r3, [r7, #24]
 8017e1a:	8aba      	ldrh	r2, [r7, #20]
 8017e1c:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8017e1e:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8017e20:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	889b      	ldrh	r3, [r3, #4]
 8017e26:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8017e28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017e2a:	88fb      	ldrh	r3, [r7, #6]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d201      	bcs.n	8017e34 <_tu_fifo_peek_n+0xa2>
 8017e30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e32:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	889b      	ldrh	r3, [r3, #4]
 8017e38:	827b      	strh	r3, [r7, #18]
 8017e3a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e3c:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8017e3e:	e003      	b.n	8017e48 <_tu_fifo_peek_n+0xb6>
 8017e40:	8a3a      	ldrh	r2, [r7, #16]
 8017e42:	8a7b      	ldrh	r3, [r7, #18]
 8017e44:	1ad3      	subs	r3, r2, r3
 8017e46:	823b      	strh	r3, [r7, #16]
 8017e48:	8a7a      	ldrh	r2, [r7, #18]
 8017e4a:	8a3b      	ldrh	r3, [r7, #16]
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d9f7      	bls.n	8017e40 <_tu_fifo_peek_n+0xae>
  return idx;
 8017e50:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8017e52:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8017e54:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8017e56:	88fa      	ldrh	r2, [r7, #6]
 8017e58:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017e5c:	9300      	str	r3, [sp, #0]
 8017e5e:	460b      	mov	r3, r1
 8017e60:	68b9      	ldr	r1, [r7, #8]
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	f7ff fe8f 	bl	8017b86 <_ff_pull_n>

  return n;
 8017e68:	88fb      	ldrh	r3, [r7, #6]
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3728      	adds	r7, #40	@ 0x28
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}

08017e72 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8017e72:	b580      	push	{r7, lr}
 8017e74:	b092      	sub	sp, #72	@ 0x48
 8017e76:	af02      	add	r7, sp, #8
 8017e78:	60f8      	str	r0, [r7, #12]
 8017e7a:	60b9      	str	r1, [r7, #8]
 8017e7c:	4611      	mov	r1, r2
 8017e7e:	461a      	mov	r2, r3
 8017e80:	460b      	mov	r3, r1
 8017e82:	80fb      	strh	r3, [r7, #6]
 8017e84:	4613      	mov	r3, r2
 8017e86:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8017e88:	88fb      	ldrh	r3, [r7, #6]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d101      	bne.n	8017e92 <_tu_fifo_write_n+0x20>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	e0bc      	b.n	801800c <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	891b      	ldrh	r3, [r3, #8]
 8017e96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	895b      	ldrh	r3, [r3, #10]
 8017e9c:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	79db      	ldrb	r3, [r3, #7]
 8017ea6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017eaa:	b2db      	uxtb	r3, r3
 8017eac:	f083 0301 	eor.w	r3, r3, #1
 8017eb0:	b2db      	uxtb	r3, r3
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d036      	beq.n	8017f24 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	889b      	ldrh	r3, [r3, #4]
 8017eba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8017ebc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ebe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8017ec0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017ec2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017ec4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017ec6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017ec8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017eca:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017ecc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ece:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8017ed0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017ed2:	8c3b      	ldrh	r3, [r7, #32]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d304      	bcc.n	8017ee2 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8017ed8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017eda:	8c3b      	ldrh	r3, [r7, #32]
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	e008      	b.n	8017ef4 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ee4:	005b      	lsls	r3, r3, #1
 8017ee6:	b29a      	uxth	r2, r3
 8017ee8:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8017eea:	8c3b      	ldrh	r3, [r7, #32]
 8017eec:	1acb      	subs	r3, r1, r3
 8017eee:	b29b      	uxth	r3, r3
 8017ef0:	4413      	add	r3, r2
 8017ef2:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8017ef4:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8017ef6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8017ef8:	8bfb      	ldrh	r3, [r7, #30]
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d904      	bls.n	8017f08 <_tu_fifo_write_n+0x96>
 8017efe:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8017f00:	8bfb      	ldrh	r3, [r7, #30]
 8017f02:	1ad3      	subs	r3, r2, r3
 8017f04:	b29b      	uxth	r3, r3
 8017f06:	e000      	b.n	8017f0a <_tu_fifo_write_n+0x98>
 8017f08:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8017f0a:	867b      	strh	r3, [r7, #50]	@ 0x32
 8017f0c:	88fb      	ldrh	r3, [r7, #6]
 8017f0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8017f10:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8017f12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8017f14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017f16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017f18:	4293      	cmp	r3, r2
 8017f1a:	bf28      	it	cs
 8017f1c:	4613      	movcs	r3, r2
 8017f1e:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8017f20:	80fb      	strh	r3, [r7, #6]
 8017f22:	e04b      	b.n	8017fbc <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	889b      	ldrh	r3, [r3, #4]
 8017f28:	88fa      	ldrh	r2, [r7, #6]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d317      	bcc.n	8017f5e <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8017f2e:	797b      	ldrb	r3, [r7, #5]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d10e      	bne.n	8017f52 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8017f34:	88fb      	ldrh	r3, [r7, #6]
 8017f36:	68fa      	ldr	r2, [r7, #12]
 8017f38:	8892      	ldrh	r2, [r2, #4]
 8017f3a:	1a9b      	subs	r3, r3, r2
 8017f3c:	68fa      	ldr	r2, [r7, #12]
 8017f3e:	88d2      	ldrh	r2, [r2, #6]
 8017f40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017f44:	b292      	uxth	r2, r2
 8017f46:	fb02 f303 	mul.w	r3, r2, r3
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f4e:	4413      	add	r3, r2
 8017f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	889b      	ldrh	r3, [r3, #4]
 8017f56:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8017f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8017f5c:	e02e      	b.n	8017fbc <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	889b      	ldrh	r3, [r3, #4]
 8017f62:	83bb      	strh	r3, [r7, #28]
 8017f64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f66:	837b      	strh	r3, [r7, #26]
 8017f68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f6a:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8017f6c:	8b7a      	ldrh	r2, [r7, #26]
 8017f6e:	8b3b      	ldrh	r3, [r7, #24]
 8017f70:	429a      	cmp	r2, r3
 8017f72:	d304      	bcc.n	8017f7e <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8017f74:	8b7a      	ldrh	r2, [r7, #26]
 8017f76:	8b3b      	ldrh	r3, [r7, #24]
 8017f78:	1ad3      	subs	r3, r2, r3
 8017f7a:	b29b      	uxth	r3, r3
 8017f7c:	e008      	b.n	8017f90 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017f7e:	8bbb      	ldrh	r3, [r7, #28]
 8017f80:	005b      	lsls	r3, r3, #1
 8017f82:	b29a      	uxth	r2, r3
 8017f84:	8b79      	ldrh	r1, [r7, #26]
 8017f86:	8b3b      	ldrh	r3, [r7, #24]
 8017f88:	1acb      	subs	r3, r1, r3
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	4413      	add	r3, r2
 8017f8e:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8017f90:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8017f92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8017f94:	88fb      	ldrh	r3, [r7, #6]
 8017f96:	441a      	add	r2, r3
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	889b      	ldrh	r3, [r3, #4]
 8017f9c:	005b      	lsls	r3, r3, #1
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	db0c      	blt.n	8017fbc <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	8898      	ldrh	r0, [r3, #4]
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	889a      	ldrh	r2, [r3, #4]
 8017faa:	88fb      	ldrh	r3, [r7, #6]
 8017fac:	1ad3      	subs	r3, r2, r3
 8017fae:	b29a      	uxth	r2, r3
 8017fb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	f7ff fec7 	bl	8017d46 <advance_index>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8017fbc:	88fb      	ldrh	r3, [r7, #6]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d023      	beq.n	801800a <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	889b      	ldrh	r3, [r3, #4]
 8017fc6:	82fb      	strh	r3, [r7, #22]
 8017fc8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017fca:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8017fcc:	e003      	b.n	8017fd6 <_tu_fifo_write_n+0x164>
 8017fce:	8aba      	ldrh	r2, [r7, #20]
 8017fd0:	8afb      	ldrh	r3, [r7, #22]
 8017fd2:	1ad3      	subs	r3, r2, r3
 8017fd4:	82bb      	strh	r3, [r7, #20]
 8017fd6:	8afa      	ldrh	r2, [r7, #22]
 8017fd8:	8abb      	ldrh	r3, [r7, #20]
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d9f7      	bls.n	8017fce <_tu_fifo_write_n+0x15c>
  return idx;
 8017fde:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8017fe0:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8017fe2:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8017fe4:	88fa      	ldrh	r2, [r7, #6]
 8017fe6:	797b      	ldrb	r3, [r7, #5]
 8017fe8:	9300      	str	r3, [sp, #0]
 8017fea:	460b      	mov	r3, r1
 8017fec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017fee:	68f8      	ldr	r0, [r7, #12]
 8017ff0:	f7ff fceb 	bl	80179ca <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	889b      	ldrh	r3, [r3, #4]
 8017ff8:	88fa      	ldrh	r2, [r7, #6]
 8017ffa:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7ff fea2 	bl	8017d46 <advance_index>
 8018002:	4603      	mov	r3, r0
 8018004:	461a      	mov	r2, r3
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 801800a:	88fb      	ldrh	r3, [r7, #6]
}
 801800c:	4618      	mov	r0, r3
 801800e:	3740      	adds	r7, #64	@ 0x40
 8018010:	46bd      	mov	sp, r7
 8018012:	bd80      	pop	{r7, pc}

08018014 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b086      	sub	sp, #24
 8018018:	af02      	add	r7, sp, #8
 801801a:	60f8      	str	r0, [r7, #12]
 801801c:	60b9      	str	r1, [r7, #8]
 801801e:	4611      	mov	r1, r2
 8018020:	461a      	mov	r2, r3
 8018022:	460b      	mov	r3, r1
 8018024:	80fb      	strh	r3, [r7, #6]
 8018026:	4613      	mov	r3, r2
 8018028:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	891b      	ldrh	r3, [r3, #8]
 801802e:	b298      	uxth	r0, r3
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	895b      	ldrh	r3, [r3, #10]
 8018034:	b29b      	uxth	r3, r3
 8018036:	88f9      	ldrh	r1, [r7, #6]
 8018038:	797a      	ldrb	r2, [r7, #5]
 801803a:	9201      	str	r2, [sp, #4]
 801803c:	9300      	str	r3, [sp, #0]
 801803e:	4603      	mov	r3, r0
 8018040:	460a      	mov	r2, r1
 8018042:	68b9      	ldr	r1, [r7, #8]
 8018044:	68f8      	ldr	r0, [r7, #12]
 8018046:	f7ff fea4 	bl	8017d92 <_tu_fifo_peek_n>
 801804a:	4603      	mov	r3, r0
 801804c:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	8898      	ldrh	r0, [r3, #4]
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	895b      	ldrh	r3, [r3, #10]
 8018056:	b29b      	uxth	r3, r3
 8018058:	88fa      	ldrh	r2, [r7, #6]
 801805a:	4619      	mov	r1, r3
 801805c:	f7ff fe73 	bl	8017d46 <advance_index>
 8018060:	4603      	mov	r3, r0
 8018062:	461a      	mov	r2, r3
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8018068:	88fb      	ldrh	r3, [r7, #6]
}
 801806a:	4618      	mov	r0, r3
 801806c:	3710      	adds	r7, #16
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}

08018072 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8018072:	b480      	push	{r7}
 8018074:	b087      	sub	sp, #28
 8018076:	af00      	add	r7, sp, #0
 8018078:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	8899      	ldrh	r1, [r3, #4]
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	891b      	ldrh	r3, [r3, #8]
 8018082:	b29a      	uxth	r2, r3
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	895b      	ldrh	r3, [r3, #10]
 8018088:	b29b      	uxth	r3, r3
 801808a:	8279      	strh	r1, [r7, #18]
 801808c:	823a      	strh	r2, [r7, #16]
 801808e:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8018090:	8a3a      	ldrh	r2, [r7, #16]
 8018092:	89fb      	ldrh	r3, [r7, #14]
 8018094:	429a      	cmp	r2, r3
 8018096:	d304      	bcc.n	80180a2 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8018098:	8a3a      	ldrh	r2, [r7, #16]
 801809a:	89fb      	ldrh	r3, [r7, #14]
 801809c:	1ad3      	subs	r3, r2, r3
 801809e:	b29b      	uxth	r3, r3
 80180a0:	e008      	b.n	80180b4 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80180a2:	8a7b      	ldrh	r3, [r7, #18]
 80180a4:	005b      	lsls	r3, r3, #1
 80180a6:	b29a      	uxth	r2, r3
 80180a8:	8a39      	ldrh	r1, [r7, #16]
 80180aa:	89fb      	ldrh	r3, [r7, #14]
 80180ac:	1acb      	subs	r3, r1, r3
 80180ae:	b29b      	uxth	r3, r3
 80180b0:	4413      	add	r3, r2
 80180b2:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	8892      	ldrh	r2, [r2, #4]
 80180b8:	82fb      	strh	r3, [r7, #22]
 80180ba:	4613      	mov	r3, r2
 80180bc:	82bb      	strh	r3, [r7, #20]
 80180be:	8afa      	ldrh	r2, [r7, #22]
 80180c0:	8abb      	ldrh	r3, [r7, #20]
 80180c2:	4293      	cmp	r3, r2
 80180c4:	bf28      	it	cs
 80180c6:	4613      	movcs	r3, r2
 80180c8:	b29b      	uxth	r3, r3
}
 80180ca:	4618      	mov	r0, r3
 80180cc:	371c      	adds	r7, #28
 80180ce:	46bd      	mov	sp, r7
 80180d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d4:	4770      	bx	lr

080180d6 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80180d6:	b480      	push	{r7}
 80180d8:	b083      	sub	sp, #12
 80180da:	af00      	add	r7, sp, #0
 80180dc:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	891b      	ldrh	r3, [r3, #8]
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	895b      	ldrh	r3, [r3, #10]
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	429a      	cmp	r2, r3
 80180ec:	bf0c      	ite	eq
 80180ee:	2301      	moveq	r3, #1
 80180f0:	2300      	movne	r3, #0
 80180f2:	b2db      	uxtb	r3, r3
}
 80180f4:	4618      	mov	r0, r3
 80180f6:	370c      	adds	r7, #12
 80180f8:	46bd      	mov	sp, r7
 80180fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fe:	4770      	bx	lr

08018100 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8018100:	b480      	push	{r7}
 8018102:	b085      	sub	sp, #20
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	8899      	ldrh	r1, [r3, #4]
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	891b      	ldrh	r3, [r3, #8]
 8018110:	b29a      	uxth	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	895b      	ldrh	r3, [r3, #10]
 8018116:	b29b      	uxth	r3, r3
 8018118:	81f9      	strh	r1, [r7, #14]
 801811a:	81ba      	strh	r2, [r7, #12]
 801811c:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 801811e:	89ba      	ldrh	r2, [r7, #12]
 8018120:	897b      	ldrh	r3, [r7, #10]
 8018122:	429a      	cmp	r2, r3
 8018124:	d304      	bcc.n	8018130 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8018126:	89ba      	ldrh	r2, [r7, #12]
 8018128:	897b      	ldrh	r3, [r7, #10]
 801812a:	1ad3      	subs	r3, r2, r3
 801812c:	b29b      	uxth	r3, r3
 801812e:	e008      	b.n	8018142 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8018130:	89fb      	ldrh	r3, [r7, #14]
 8018132:	005b      	lsls	r3, r3, #1
 8018134:	b29a      	uxth	r2, r3
 8018136:	89b9      	ldrh	r1, [r7, #12]
 8018138:	897b      	ldrh	r3, [r7, #10]
 801813a:	1acb      	subs	r3, r1, r3
 801813c:	b29b      	uxth	r3, r3
 801813e:	4413      	add	r3, r2
 8018140:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8018142:	687a      	ldr	r2, [r7, #4]
 8018144:	8892      	ldrh	r2, [r2, #4]
 8018146:	4293      	cmp	r3, r2
 8018148:	bf2c      	ite	cs
 801814a:	2301      	movcs	r3, #1
 801814c:	2300      	movcc	r3, #0
 801814e:	b2db      	uxtb	r3, r3
}
 8018150:	4618      	mov	r0, r3
 8018152:	3714      	adds	r7, #20
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr

0801815c <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 801815c:	b480      	push	{r7}
 801815e:	b087      	sub	sp, #28
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	8899      	ldrh	r1, [r3, #4]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	891b      	ldrh	r3, [r3, #8]
 801816c:	b29a      	uxth	r2, r3
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	895b      	ldrh	r3, [r3, #10]
 8018172:	b29b      	uxth	r3, r3
 8018174:	82f9      	strh	r1, [r7, #22]
 8018176:	82ba      	strh	r2, [r7, #20]
 8018178:	827b      	strh	r3, [r7, #18]
 801817a:	8afb      	ldrh	r3, [r7, #22]
 801817c:	823b      	strh	r3, [r7, #16]
 801817e:	8abb      	ldrh	r3, [r7, #20]
 8018180:	81fb      	strh	r3, [r7, #14]
 8018182:	8a7b      	ldrh	r3, [r7, #18]
 8018184:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8018186:	89fa      	ldrh	r2, [r7, #14]
 8018188:	89bb      	ldrh	r3, [r7, #12]
 801818a:	429a      	cmp	r2, r3
 801818c:	d304      	bcc.n	8018198 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 801818e:	89fa      	ldrh	r2, [r7, #14]
 8018190:	89bb      	ldrh	r3, [r7, #12]
 8018192:	1ad3      	subs	r3, r2, r3
 8018194:	b29b      	uxth	r3, r3
 8018196:	e008      	b.n	80181aa <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8018198:	8a3b      	ldrh	r3, [r7, #16]
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	b29a      	uxth	r2, r3
 801819e:	89f9      	ldrh	r1, [r7, #14]
 80181a0:	89bb      	ldrh	r3, [r7, #12]
 80181a2:	1acb      	subs	r3, r1, r3
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	4413      	add	r3, r2
 80181a8:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80181aa:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80181ac:	8afa      	ldrh	r2, [r7, #22]
 80181ae:	897b      	ldrh	r3, [r7, #10]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d904      	bls.n	80181be <tu_fifo_remaining+0x62>
 80181b4:	8afa      	ldrh	r2, [r7, #22]
 80181b6:	897b      	ldrh	r3, [r7, #10]
 80181b8:	1ad3      	subs	r3, r2, r3
 80181ba:	b29b      	uxth	r3, r3
 80181bc:	e000      	b.n	80181c0 <tu_fifo_remaining+0x64>
 80181be:	2300      	movs	r3, #0
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	371c      	adds	r7, #28
 80181c4:	46bd      	mov	sp, r7
 80181c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ca:	4770      	bx	lr

080181cc <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b084      	sub	sp, #16
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	60f8      	str	r0, [r7, #12]
 80181d4:	60b9      	str	r1, [r7, #8]
 80181d6:	4613      	mov	r3, r2
 80181d8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80181da:	88fa      	ldrh	r2, [r7, #6]
 80181dc:	2300      	movs	r3, #0
 80181de:	68b9      	ldr	r1, [r7, #8]
 80181e0:	68f8      	ldr	r0, [r7, #12]
 80181e2:	f7ff ff17 	bl	8018014 <_tu_fifo_read_n>
 80181e6:	4603      	mov	r3, r0
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3710      	adds	r7, #16
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b084      	sub	sp, #16
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	60f8      	str	r0, [r7, #12]
 80181f8:	60b9      	str	r1, [r7, #8]
 80181fa:	4613      	mov	r3, r2
 80181fc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80181fe:	88fa      	ldrh	r2, [r7, #6]
 8018200:	2301      	movs	r3, #1
 8018202:	68b9      	ldr	r1, [r7, #8]
 8018204:	68f8      	ldr	r0, [r7, #12]
 8018206:	f7ff ff05 	bl	8018014 <_tu_fifo_read_n>
 801820a:	4603      	mov	r3, r0
}
 801820c:	4618      	mov	r0, r3
 801820e:	3710      	adds	r7, #16
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b086      	sub	sp, #24
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	891b      	ldrh	r3, [r3, #8]
 8018222:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8018224:	6878      	ldr	r0, [r7, #4]
 8018226:	f7ff ff6b 	bl	8018100 <tu_fifo_full>
 801822a:	4603      	mov	r3, r0
 801822c:	2b00      	cmp	r3, #0
 801822e:	d00c      	beq.n	801824a <tu_fifo_write+0x36>
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	79db      	ldrb	r3, [r3, #7]
 8018234:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018238:	b2db      	uxtb	r3, r3
 801823a:	f083 0301 	eor.w	r3, r3, #1
 801823e:	b2db      	uxtb	r3, r3
 8018240:	2b00      	cmp	r3, #0
 8018242:	d002      	beq.n	801824a <tu_fifo_write+0x36>
  {
    ret = false;
 8018244:	2300      	movs	r3, #0
 8018246:	75fb      	strb	r3, [r7, #23]
 8018248:	e022      	b.n	8018290 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	889b      	ldrh	r3, [r3, #4]
 801824e:	823b      	strh	r3, [r7, #16]
 8018250:	8abb      	ldrh	r3, [r7, #20]
 8018252:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8018254:	e003      	b.n	801825e <tu_fifo_write+0x4a>
 8018256:	89fa      	ldrh	r2, [r7, #14]
 8018258:	8a3b      	ldrh	r3, [r7, #16]
 801825a:	1ad3      	subs	r3, r2, r3
 801825c:	81fb      	strh	r3, [r7, #14]
 801825e:	8a3a      	ldrh	r2, [r7, #16]
 8018260:	89fb      	ldrh	r3, [r7, #14]
 8018262:	429a      	cmp	r2, r3
 8018264:	d9f7      	bls.n	8018256 <tu_fifo_write+0x42>
  return idx;
 8018266:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8018268:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 801826a:	8a7b      	ldrh	r3, [r7, #18]
 801826c:	461a      	mov	r2, r3
 801826e:	6839      	ldr	r1, [r7, #0]
 8018270:	6878      	ldr	r0, [r7, #4]
 8018272:	f7ff fb8b 	bl	801798c <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	889b      	ldrh	r3, [r3, #4]
 801827a:	8ab9      	ldrh	r1, [r7, #20]
 801827c:	2201      	movs	r2, #1
 801827e:	4618      	mov	r0, r3
 8018280:	f7ff fd61 	bl	8017d46 <advance_index>
 8018284:	4603      	mov	r3, r0
 8018286:	461a      	mov	r2, r3
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	811a      	strh	r2, [r3, #8]

    ret = true;
 801828c:	2301      	movs	r3, #1
 801828e:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8018290:	7dfb      	ldrb	r3, [r7, #23]
}
 8018292:	4618      	mov	r0, r3
 8018294:	3718      	adds	r7, #24
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}

0801829a <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 801829a:	b580      	push	{r7, lr}
 801829c:	b084      	sub	sp, #16
 801829e:	af00      	add	r7, sp, #0
 80182a0:	60f8      	str	r0, [r7, #12]
 80182a2:	60b9      	str	r1, [r7, #8]
 80182a4:	4613      	mov	r3, r2
 80182a6:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80182a8:	88fa      	ldrh	r2, [r7, #6]
 80182aa:	2300      	movs	r3, #0
 80182ac:	68b9      	ldr	r1, [r7, #8]
 80182ae:	68f8      	ldr	r0, [r7, #12]
 80182b0:	f7ff fddf 	bl	8017e72 <_tu_fifo_write_n>
 80182b4:	4603      	mov	r3, r0
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3710      	adds	r7, #16
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}

080182be <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80182be:	b580      	push	{r7, lr}
 80182c0:	b084      	sub	sp, #16
 80182c2:	af00      	add	r7, sp, #0
 80182c4:	60f8      	str	r0, [r7, #12]
 80182c6:	60b9      	str	r1, [r7, #8]
 80182c8:	4613      	mov	r3, r2
 80182ca:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80182cc:	88fa      	ldrh	r2, [r7, #6]
 80182ce:	2301      	movs	r3, #1
 80182d0:	68b9      	ldr	r1, [r7, #8]
 80182d2:	68f8      	ldr	r0, [r7, #12]
 80182d4:	f7ff fdcd 	bl	8017e72 <_tu_fifo_write_n>
 80182d8:	4603      	mov	r3, r0
}
 80182da:	4618      	mov	r0, r3
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80182e2:	b480      	push	{r7}
 80182e4:	b083      	sub	sp, #12
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2200      	movs	r2, #0
 80182ee:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2200      	movs	r2, #0
 80182f4:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80182f6:	2301      	movs	r3, #1
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	370c      	adds	r7, #12
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr

08018304 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8018304:	b480      	push	{r7}
 8018306:	b083      	sub	sp, #12
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	460b      	mov	r3, r1
 801830e:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	79d3      	ldrb	r3, [r2, #7]
 8018314:	78f9      	ldrb	r1, [r7, #3]
 8018316:	f361 13c7 	bfi	r3, r1, #7, #1
 801831a:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 801831c:	2301      	movs	r3, #1
}
 801831e:	4618      	mov	r0, r3
 8018320:	370c      	adds	r7, #12
 8018322:	46bd      	mov	sp, r7
 8018324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018328:	4770      	bx	lr

0801832a <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 801832a:	b480      	push	{r7}
 801832c:	b083      	sub	sp, #12
 801832e:	af00      	add	r7, sp, #0
 8018330:	4603      	mov	r3, r0
 8018332:	6039      	str	r1, [r7, #0]
 8018334:	71fb      	strb	r3, [r7, #7]
 8018336:	4613      	mov	r3, r2
 8018338:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 801833a:	bf00      	nop
 801833c:	370c      	adds	r7, #12
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr

08018346 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8018346:	b480      	push	{r7}
 8018348:	b083      	sub	sp, #12
 801834a:	af00      	add	r7, sp, #0
 801834c:	6078      	str	r0, [r7, #4]
 801834e:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8018350:	2301      	movs	r3, #1
}
 8018352:	4618      	mov	r0, r3
 8018354:	370c      	adds	r7, #12
 8018356:	46bd      	mov	sp, r7
 8018358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835c:	4770      	bx	lr
	...

08018360 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8018360:	b480      	push	{r7}
 8018362:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8018364:	4b06      	ldr	r3, [pc, #24]	@ (8018380 <tud_mounted+0x20>)
 8018366:	785b      	ldrb	r3, [r3, #1]
 8018368:	b2db      	uxtb	r3, r3
 801836a:	2b00      	cmp	r3, #0
 801836c:	bf14      	ite	ne
 801836e:	2301      	movne	r3, #1
 8018370:	2300      	moveq	r3, #0
 8018372:	b2db      	uxtb	r3, r3
}
 8018374:	4618      	mov	r0, r3
 8018376:	46bd      	mov	sp, r7
 8018378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837c:	4770      	bx	lr
 801837e:	bf00      	nop
 8018380:	2400870c 	.word	0x2400870c

08018384 <tud_suspended>:

bool tud_suspended(void) {
 8018384:	b480      	push	{r7}
 8018386:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8018388:	4b07      	ldr	r3, [pc, #28]	@ (80183a8 <tud_suspended+0x24>)
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018390:	b2db      	uxtb	r3, r3
 8018392:	2b00      	cmp	r3, #0
 8018394:	bf14      	ite	ne
 8018396:	2301      	movne	r3, #1
 8018398:	2300      	moveq	r3, #0
 801839a:	b2db      	uxtb	r3, r3
}
 801839c:	4618      	mov	r0, r3
 801839e:	46bd      	mov	sp, r7
 80183a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a4:	4770      	bx	lr
 80183a6:	bf00      	nop
 80183a8:	2400870c 	.word	0x2400870c

080183ac <dcd_event_handler>:
}

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b0a0      	sub	sp, #128	@ 0x80
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	460b      	mov	r3, r1
 80183b6:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80183b8:	2300      	movs	r3, #0
 80183ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	785b      	ldrb	r3, [r3, #1]
 80183c2:	3b02      	subs	r3, #2
 80183c4:	2b04      	cmp	r3, #4
 80183c6:	f200 8173 	bhi.w	80186b0 <dcd_event_handler+0x304>
 80183ca:	a201      	add	r2, pc, #4	@ (adr r2, 80183d0 <dcd_event_handler+0x24>)
 80183cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183d0:	080183e5 	.word	0x080183e5
 80183d4:	08018455 	.word	0x08018455
 80183d8:	08018411 	.word	0x08018411
 80183dc:	08018433 	.word	0x08018433
 80183e0:	0801867d 	.word	0x0801867d
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80183e4:	4aab      	ldr	r2, [pc, #684]	@ (8018694 <dcd_event_handler+0x2e8>)
 80183e6:	7813      	ldrb	r3, [r2, #0]
 80183e8:	f023 0301 	bic.w	r3, r3, #1
 80183ec:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80183ee:	4aa9      	ldr	r2, [pc, #676]	@ (8018694 <dcd_event_handler+0x2e8>)
 80183f0:	7813      	ldrb	r3, [r2, #0]
 80183f2:	f023 0302 	bic.w	r3, r3, #2
 80183f6:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80183f8:	4ba6      	ldr	r3, [pc, #664]	@ (8018694 <dcd_event_handler+0x2e8>)
 80183fa:	2200      	movs	r2, #0
 80183fc:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80183fe:	4aa5      	ldr	r2, [pc, #660]	@ (8018694 <dcd_event_handler+0x2e8>)
 8018400:	7813      	ldrb	r3, [r2, #0]
 8018402:	f023 0304 	bic.w	r3, r3, #4
 8018406:	7013      	strb	r3, [r2, #0]
      send = true;
 8018408:	2301      	movs	r3, #1
 801840a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 801840e:	e158      	b.n	80186c2 <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8018410:	4ba0      	ldr	r3, [pc, #640]	@ (8018694 <dcd_event_handler+0x2e8>)
 8018412:	781b      	ldrb	r3, [r3, #0]
 8018414:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018418:	b2db      	uxtb	r3, r3
 801841a:	2b00      	cmp	r3, #0
 801841c:	f000 814c 	beq.w	80186b8 <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 8018420:	4a9c      	ldr	r2, [pc, #624]	@ (8018694 <dcd_event_handler+0x2e8>)
 8018422:	7813      	ldrb	r3, [r2, #0]
 8018424:	f043 0304 	orr.w	r3, r3, #4
 8018428:	7013      	strb	r3, [r2, #0]
        send = true;
 801842a:	2301      	movs	r3, #1
 801842c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8018430:	e142      	b.n	80186b8 <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8018432:	4b98      	ldr	r3, [pc, #608]	@ (8018694 <dcd_event_handler+0x2e8>)
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801843a:	b2db      	uxtb	r3, r3
 801843c:	2b00      	cmp	r3, #0
 801843e:	f000 813d 	beq.w	80186bc <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 8018442:	4a94      	ldr	r2, [pc, #592]	@ (8018694 <dcd_event_handler+0x2e8>)
 8018444:	7813      	ldrb	r3, [r2, #0]
 8018446:	f023 0304 	bic.w	r3, r3, #4
 801844a:	7013      	strb	r3, [r2, #0]
        send = true;
 801844c:	2301      	movs	r3, #1
 801844e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8018452:	e133      	b.n	80186bc <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018454:	2300      	movs	r3, #0
 8018456:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 801845a:	e038      	b.n	80184ce <dcd_event_handler+0x122>
 801845c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8018460:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8018464:	2300      	movs	r3, #0
 8018466:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8018468:	4b8b      	ldr	r3, [pc, #556]	@ (8018698 <dcd_event_handler+0x2ec>)
 801846a:	781b      	ldrb	r3, [r3, #0]
 801846c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8018470:	429a      	cmp	r2, r3
 8018472:	d207      	bcs.n	8018484 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8018474:	4b89      	ldr	r3, [pc, #548]	@ (801869c <dcd_event_handler+0x2f0>)
 8018476:	681a      	ldr	r2, [r3, #0]
 8018478:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801847c:	015b      	lsls	r3, r3, #5
 801847e:	4413      	add	r3, r2
 8018480:	673b      	str	r3, [r7, #112]	@ 0x70
 8018482:	e00e      	b.n	80184a2 <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018484:	4b84      	ldr	r3, [pc, #528]	@ (8018698 <dcd_event_handler+0x2ec>)
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 801848c:	429a      	cmp	r2, r3
 801848e:	d808      	bhi.n	80184a2 <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8018490:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8018494:	4a80      	ldr	r2, [pc, #512]	@ (8018698 <dcd_event_handler+0x2ec>)
 8018496:	7812      	ldrb	r2, [r2, #0]
 8018498:	1a9b      	subs	r3, r3, r2
 801849a:	015b      	lsls	r3, r3, #5
 801849c:	4a80      	ldr	r2, [pc, #512]	@ (80186a0 <dcd_event_handler+0x2f4>)
 801849e:	4413      	add	r3, r2
 80184a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 80184a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 80184a4:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 80184a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d00b      	beq.n	80184c4 <dcd_event_handler+0x118>
 80184ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80184ae:	69db      	ldr	r3, [r3, #28]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d007      	beq.n	80184c4 <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 80184b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80184b6:	69db      	ldr	r3, [r3, #28]
 80184b8:	687a      	ldr	r2, [r7, #4]
 80184ba:	7810      	ldrb	r0, [r2, #0]
 80184bc:	687a      	ldr	r2, [r7, #4]
 80184be:	6852      	ldr	r2, [r2, #4]
 80184c0:	4611      	mov	r1, r2
 80184c2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80184c4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80184c8:	3301      	adds	r3, #1
 80184ca:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80184ce:	4b72      	ldr	r3, [pc, #456]	@ (8018698 <dcd_event_handler+0x2ec>)
 80184d0:	781b      	ldrb	r3, [r3, #0]
 80184d2:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d9c0      	bls.n	801845c <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 80184da:	4b6e      	ldr	r3, [pc, #440]	@ (8018694 <dcd_event_handler+0x2e8>)
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80184e2:	b2db      	uxtb	r3, r3
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d05a      	beq.n	801859e <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 80184e8:	4a6a      	ldr	r2, [pc, #424]	@ (8018694 <dcd_event_handler+0x2e8>)
 80184ea:	7813      	ldrb	r3, [r2, #0]
 80184ec:	f023 0304 	bic.w	r3, r3, #4
 80184f0:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 80184f2:	f107 0314 	add.w	r3, r7, #20
 80184f6:	2200      	movs	r2, #0
 80184f8:	601a      	str	r2, [r3, #0]
 80184fa:	605a      	str	r2, [r3, #4]
 80184fc:	609a      	str	r2, [r3, #8]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	753b      	strb	r3, [r7, #20]
 8018504:	2305      	movs	r3, #5
 8018506:	757b      	strb	r3, [r7, #21]
 8018508:	f107 0314 	add.w	r3, r7, #20
 801850c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801850e:	78fb      	ldrb	r3, [r7, #3]
 8018510:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018514:	4b63      	ldr	r3, [pc, #396]	@ (80186a4 <dcd_event_handler+0x2f8>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	667b      	str	r3, [r7, #100]	@ 0x64
 801851a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801851c:	663b      	str	r3, [r7, #96]	@ 0x60
 801851e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8018522:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8018526:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801852a:	f083 0301 	eor.w	r3, r3, #1
 801852e:	b2db      	uxtb	r3, r3
 8018530:	2b00      	cmp	r3, #0
 8018532:	d003      	beq.n	801853c <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 8018534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	2000      	movs	r0, #0
 801853a:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 801853c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801853e:	3304      	adds	r3, #4
 8018540:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8018542:	4618      	mov	r0, r3
 8018544:	f7ff fe66 	bl	8018214 <tu_fifo_write>
 8018548:	4603      	mov	r3, r0
 801854a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 801854e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018552:	f083 0301 	eor.w	r3, r3, #1
 8018556:	b2db      	uxtb	r3, r3
 8018558:	2b00      	cmp	r3, #0
 801855a:	d003      	beq.n	8018564 <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 801855c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2001      	movs	r0, #1
 8018562:	4798      	blx	r3
  }

  return success;
 8018564:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018568:	f083 0301 	eor.w	r3, r3, #1
 801856c:	b2db      	uxtb	r3, r3
 801856e:	2b00      	cmp	r3, #0
 8018570:	d009      	beq.n	8018586 <dcd_event_handler+0x1da>
 8018572:	4b4d      	ldr	r3, [pc, #308]	@ (80186a8 <dcd_event_handler+0x2fc>)
 8018574:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	f003 0301 	and.w	r3, r3, #1
 801857e:	2b00      	cmp	r3, #0
 8018580:	d00c      	beq.n	801859c <dcd_event_handler+0x1f0>
 8018582:	be00      	bkpt	0x0000
 8018584:	e00a      	b.n	801859c <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8018586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018588:	7818      	ldrb	r0, [r3, #0]
 801858a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801858c:	785b      	ldrb	r3, [r3, #1]
 801858e:	4619      	mov	r1, r3
 8018590:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8018594:	461a      	mov	r2, r3
 8018596:	f7ff fec8 	bl	801832a <tud_event_hook_cb>
  return true;
 801859a:	e000      	b.n	801859e <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 801859c:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 801859e:	4b3d      	ldr	r3, [pc, #244]	@ (8018694 <dcd_event_handler+0x2e8>)
 80185a0:	78db      	ldrb	r3, [r3, #3]
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80185a6:	2300      	movs	r3, #0
 80185a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80185ac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80185b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80185b2:	fa22 f303 	lsr.w	r3, r2, r3
 80185b6:	f003 0301 	and.w	r3, r3, #1
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	bf14      	ite	ne
 80185be:	2301      	movne	r3, #1
 80185c0:	2300      	moveq	r3, #0
 80185c2:	b2db      	uxtb	r3, r3
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d07b      	beq.n	80186c0 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80185c8:	f107 0308 	add.w	r3, r7, #8
 80185cc:	2200      	movs	r2, #0
 80185ce:	601a      	str	r2, [r3, #0]
 80185d0:	605a      	str	r2, [r3, #4]
 80185d2:	609a      	str	r2, [r3, #8]
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	781b      	ldrb	r3, [r3, #0]
 80185d8:	723b      	strb	r3, [r7, #8]
 80185da:	2303      	movs	r3, #3
 80185dc:	727b      	strb	r3, [r7, #9]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	685b      	ldr	r3, [r3, #4]
 80185e2:	60fb      	str	r3, [r7, #12]
 80185e4:	f107 0308 	add.w	r3, r7, #8
 80185e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80185ea:	78fb      	ldrb	r3, [r7, #3]
 80185ec:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80185f0:	4b2c      	ldr	r3, [pc, #176]	@ (80186a4 <dcd_event_handler+0x2f8>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80185f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80185f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80185fa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80185fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8018602:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018606:	f083 0301 	eor.w	r3, r3, #1
 801860a:	b2db      	uxtb	r3, r3
 801860c:	2b00      	cmp	r3, #0
 801860e:	d003      	beq.n	8018618 <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 8018610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	2000      	movs	r0, #0
 8018616:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8018618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801861a:	3304      	adds	r3, #4
 801861c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801861e:	4618      	mov	r0, r3
 8018620:	f7ff fdf8 	bl	8018214 <tu_fifo_write>
 8018624:	4603      	mov	r3, r0
 8018626:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 801862a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801862e:	f083 0301 	eor.w	r3, r3, #1
 8018632:	b2db      	uxtb	r3, r3
 8018634:	2b00      	cmp	r3, #0
 8018636:	d003      	beq.n	8018640 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 8018638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	2001      	movs	r0, #1
 801863e:	4798      	blx	r3
  return success;
 8018640:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8018644:	f083 0301 	eor.w	r3, r3, #1
 8018648:	b2db      	uxtb	r3, r3
 801864a:	2b00      	cmp	r3, #0
 801864c:	d009      	beq.n	8018662 <dcd_event_handler+0x2b6>
 801864e:	4b16      	ldr	r3, [pc, #88]	@ (80186a8 <dcd_event_handler+0x2fc>)
 8018650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	f003 0301 	and.w	r3, r3, #1
 801865a:	2b00      	cmp	r3, #0
 801865c:	d00c      	beq.n	8018678 <dcd_event_handler+0x2cc>
 801865e:	be00      	bkpt	0x0000
 8018660:	e00a      	b.n	8018678 <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8018662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018664:	7818      	ldrb	r0, [r3, #0]
 8018666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018668:	785b      	ldrb	r3, [r3, #1]
 801866a:	4619      	mov	r1, r3
 801866c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8018670:	461a      	mov	r2, r3
 8018672:	f7ff fe5a 	bl	801832a <tud_event_hook_cb>
  return true;
 8018676:	e000      	b.n	801867a <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018678:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 801867a:	e021      	b.n	80186c0 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 801867c:	4b0b      	ldr	r3, [pc, #44]	@ (80186ac <dcd_event_handler+0x300>)
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	b2db      	uxtb	r3, r3
 8018682:	3301      	adds	r3, #1
 8018684:	b2da      	uxtb	r2, r3
 8018686:	4b09      	ldr	r3, [pc, #36]	@ (80186ac <dcd_event_handler+0x300>)
 8018688:	701a      	strb	r2, [r3, #0]
      send = true;
 801868a:	2301      	movs	r3, #1
 801868c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8018690:	e017      	b.n	80186c2 <dcd_event_handler+0x316>
 8018692:	bf00      	nop
 8018694:	2400870c 	.word	0x2400870c
 8018698:	2400874c 	.word	0x2400874c
 801869c:	24008748 	.word	0x24008748
 80186a0:	0803161c 	.word	0x0803161c
 80186a4:	24008750 	.word	0x24008750
 80186a8:	e000edf0 	.word	0xe000edf0
 80186ac:	24008744 	.word	0x24008744

    default:
      send = true;
 80186b0:	2301      	movs	r3, #1
 80186b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80186b6:	e004      	b.n	80186c2 <dcd_event_handler+0x316>
      break;
 80186b8:	bf00      	nop
 80186ba:	e002      	b.n	80186c2 <dcd_event_handler+0x316>
      break;
 80186bc:	bf00      	nop
 80186be:	e000      	b.n	80186c2 <dcd_event_handler+0x316>
      break;
 80186c0:	bf00      	nop
  }

  if (send) {
 80186c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d049      	beq.n	801875e <dcd_event_handler+0x3b2>
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80186ce:	78fb      	ldrb	r3, [r7, #3]
 80186d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80186d4:	4b24      	ldr	r3, [pc, #144]	@ (8018768 <dcd_event_handler+0x3bc>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80186da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80186de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80186e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80186e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80186ea:	f083 0301 	eor.w	r3, r3, #1
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d003      	beq.n	80186fc <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 80186f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2000      	movs	r0, #0
 80186fa:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80186fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186fe:	3304      	adds	r3, #4
 8018700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018702:	4618      	mov	r0, r3
 8018704:	f7ff fd86 	bl	8018214 <tu_fifo_write>
 8018708:	4603      	mov	r3, r0
 801870a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 801870e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018712:	f083 0301 	eor.w	r3, r3, #1
 8018716:	b2db      	uxtb	r3, r3
 8018718:	2b00      	cmp	r3, #0
 801871a:	d003      	beq.n	8018724 <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 801871c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	2001      	movs	r0, #1
 8018722:	4798      	blx	r3
  return success;
 8018724:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018728:	f083 0301 	eor.w	r3, r3, #1
 801872c:	b2db      	uxtb	r3, r3
 801872e:	2b00      	cmp	r3, #0
 8018730:	d009      	beq.n	8018746 <dcd_event_handler+0x39a>
 8018732:	4b0e      	ldr	r3, [pc, #56]	@ (801876c <dcd_event_handler+0x3c0>)
 8018734:	623b      	str	r3, [r7, #32]
 8018736:	6a3b      	ldr	r3, [r7, #32]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	f003 0301 	and.w	r3, r3, #1
 801873e:	2b00      	cmp	r3, #0
 8018740:	d00c      	beq.n	801875c <dcd_event_handler+0x3b0>
 8018742:	be00      	bkpt	0x0000
 8018744:	e00a      	b.n	801875c <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8018746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018748:	7818      	ldrb	r0, [r3, #0]
 801874a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801874c:	785b      	ldrb	r3, [r3, #1]
 801874e:	4619      	mov	r1, r3
 8018750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018754:	461a      	mov	r2, r3
 8018756:	f7ff fde8 	bl	801832a <tud_event_hook_cb>
  return true;
 801875a:	e000      	b.n	801875e <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 801875c:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 801875e:	bf00      	nop
 8018760:	3780      	adds	r7, #128	@ 0x80
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	24008750 	.word	0x24008750
 801876c:	e000edf0 	.word	0xe000edf0

08018770 <usbd_open_edpt_pair>:
  }
}

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b08a      	sub	sp, #40	@ 0x28
 8018774:	af00      	add	r7, sp, #0
 8018776:	6039      	str	r1, [r7, #0]
 8018778:	4611      	mov	r1, r2
 801877a:	461a      	mov	r2, r3
 801877c:	4603      	mov	r3, r0
 801877e:	71fb      	strb	r3, [r7, #7]
 8018780:	460b      	mov	r3, r1
 8018782:	71bb      	strb	r3, [r7, #6]
 8018784:	4613      	mov	r3, r2
 8018786:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8018788:	2300      	movs	r3, #0
 801878a:	627b      	str	r3, [r7, #36]	@ 0x24
 801878c:	e04d      	b.n	801882a <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 801878e:	683b      	ldr	r3, [r7, #0]
 8018790:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8018792:	6a3b      	ldr	r3, [r7, #32]
 8018794:	785b      	ldrb	r3, [r3, #1]
 8018796:	2b05      	cmp	r3, #5
 8018798:	d108      	bne.n	80187ac <usbd_open_edpt_pair+0x3c>
 801879a:	6a3b      	ldr	r3, [r7, #32]
 801879c:	78db      	ldrb	r3, [r3, #3]
 801879e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	461a      	mov	r2, r3
 80187a6:	797b      	ldrb	r3, [r7, #5]
 80187a8:	4293      	cmp	r3, r2
 80187aa:	d00a      	beq.n	80187c2 <usbd_open_edpt_pair+0x52>
 80187ac:	4b23      	ldr	r3, [pc, #140]	@ (801883c <usbd_open_edpt_pair+0xcc>)
 80187ae:	61bb      	str	r3, [r7, #24]
 80187b0:	69bb      	ldr	r3, [r7, #24]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	f003 0301 	and.w	r3, r3, #1
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d000      	beq.n	80187be <usbd_open_edpt_pair+0x4e>
 80187bc:	be00      	bkpt	0x0000
 80187be:	2300      	movs	r3, #0
 80187c0:	e038      	b.n	8018834 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80187c2:	79fb      	ldrb	r3, [r7, #7]
 80187c4:	6a39      	ldr	r1, [r7, #32]
 80187c6:	4618      	mov	r0, r3
 80187c8:	f000 f83a 	bl	8018840 <usbd_edpt_open>
 80187cc:	4603      	mov	r3, r0
 80187ce:	f083 0301 	eor.w	r3, r3, #1
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d00a      	beq.n	80187ee <usbd_open_edpt_pair+0x7e>
 80187d8:	4b18      	ldr	r3, [pc, #96]	@ (801883c <usbd_open_edpt_pair+0xcc>)
 80187da:	61fb      	str	r3, [r7, #28]
 80187dc:	69fb      	ldr	r3, [r7, #28]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	f003 0301 	and.w	r3, r3, #1
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d000      	beq.n	80187ea <usbd_open_edpt_pair+0x7a>
 80187e8:	be00      	bkpt	0x0000
 80187ea:	2300      	movs	r3, #0
 80187ec:	e022      	b.n	8018834 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80187ee:	6a3b      	ldr	r3, [r7, #32]
 80187f0:	789b      	ldrb	r3, [r3, #2]
 80187f2:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80187f4:	7dfb      	ldrb	r3, [r7, #23]
 80187f6:	09db      	lsrs	r3, r3, #7
 80187f8:	b2db      	uxtb	r3, r3
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	d104      	bne.n	8018808 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80187fe:	6a3b      	ldr	r3, [r7, #32]
 8018800:	789a      	ldrb	r2, [r3, #2]
 8018802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018804:	701a      	strb	r2, [r3, #0]
 8018806:	e003      	b.n	8018810 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8018808:	6a3b      	ldr	r3, [r7, #32]
 801880a:	789a      	ldrb	r2, [r3, #2]
 801880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801880e:	701a      	strb	r2, [r3, #0]
 8018810:	683b      	ldr	r3, [r7, #0]
 8018812:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	461a      	mov	r2, r3
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8018822:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8018824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018826:	3301      	adds	r3, #1
 8018828:	627b      	str	r3, [r7, #36]	@ 0x24
 801882a:	79bb      	ldrb	r3, [r7, #6]
 801882c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801882e:	429a      	cmp	r2, r3
 8018830:	dbad      	blt.n	801878e <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8018832:	2301      	movs	r3, #1
}
 8018834:	4618      	mov	r0, r3
 8018836:	3728      	adds	r7, #40	@ 0x28
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}
 801883c:	e000edf0 	.word	0xe000edf0

08018840 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8018840:	b580      	push	{r7, lr}
 8018842:	b086      	sub	sp, #24
 8018844:	af00      	add	r7, sp, #0
 8018846:	4603      	mov	r3, r0
 8018848:	6039      	str	r1, [r7, #0]
 801884a:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 801884c:	4b1c      	ldr	r3, [pc, #112]	@ (80188c0 <usbd_edpt_open+0x80>)
 801884e:	781b      	ldrb	r3, [r3, #0]
 8018850:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	789b      	ldrb	r3, [r3, #2]
 8018856:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018858:	7bfb      	ldrb	r3, [r7, #15]
 801885a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801885e:	b2db      	uxtb	r3, r3
 8018860:	2b08      	cmp	r3, #8
 8018862:	d90a      	bls.n	801887a <usbd_edpt_open+0x3a>
 8018864:	4b17      	ldr	r3, [pc, #92]	@ (80188c4 <usbd_edpt_open+0x84>)
 8018866:	613b      	str	r3, [r7, #16]
 8018868:	693b      	ldr	r3, [r7, #16]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f003 0301 	and.w	r3, r3, #1
 8018870:	2b00      	cmp	r3, #0
 8018872:	d000      	beq.n	8018876 <usbd_edpt_open+0x36>
 8018874:	be00      	bkpt	0x0000
 8018876:	2300      	movs	r3, #0
 8018878:	e01d      	b.n	80188b6 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 801887a:	4b13      	ldr	r3, [pc, #76]	@ (80188c8 <usbd_edpt_open+0x88>)
 801887c:	789b      	ldrb	r3, [r3, #2]
 801887e:	2200      	movs	r2, #0
 8018880:	4619      	mov	r1, r3
 8018882:	6838      	ldr	r0, [r7, #0]
 8018884:	f001 faee 	bl	8019e64 <tu_edpt_validate>
 8018888:	4603      	mov	r3, r0
 801888a:	f083 0301 	eor.w	r3, r3, #1
 801888e:	b2db      	uxtb	r3, r3
 8018890:	2b00      	cmp	r3, #0
 8018892:	d00a      	beq.n	80188aa <usbd_edpt_open+0x6a>
 8018894:	4b0b      	ldr	r3, [pc, #44]	@ (80188c4 <usbd_edpt_open+0x84>)
 8018896:	617b      	str	r3, [r7, #20]
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	f003 0301 	and.w	r3, r3, #1
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d000      	beq.n	80188a6 <usbd_edpt_open+0x66>
 80188a4:	be00      	bkpt	0x0000
 80188a6:	2300      	movs	r3, #0
 80188a8:	e005      	b.n	80188b6 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 80188aa:	79fb      	ldrb	r3, [r7, #7]
 80188ac:	6839      	ldr	r1, [r7, #0]
 80188ae:	4618      	mov	r0, r3
 80188b0:	f000 fcc8 	bl	8019244 <dcd_edpt_open>
 80188b4:	4603      	mov	r3, r0
}
 80188b6:	4618      	mov	r0, r3
 80188b8:	3718      	adds	r7, #24
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}
 80188be:	bf00      	nop
 80188c0:	2400000e 	.word	0x2400000e
 80188c4:	e000edf0 	.word	0xe000edf0
 80188c8:	2400870c 	.word	0x2400870c

080188cc <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b086      	sub	sp, #24
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	4603      	mov	r3, r0
 80188d4:	460a      	mov	r2, r1
 80188d6:	71fb      	strb	r3, [r7, #7]
 80188d8:	4613      	mov	r3, r2
 80188da:	71bb      	strb	r3, [r7, #6]
 80188dc:	79bb      	ldrb	r3, [r7, #6]
 80188de:	73bb      	strb	r3, [r7, #14]
 80188e0:	7bbb      	ldrb	r3, [r7, #14]
 80188e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80188e6:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80188e8:	75fb      	strb	r3, [r7, #23]
 80188ea:	79bb      	ldrb	r3, [r7, #6]
 80188ec:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80188ee:	7bfb      	ldrb	r3, [r7, #15]
 80188f0:	09db      	lsrs	r3, r3, #7
 80188f2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80188f4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80188f6:	7dfa      	ldrb	r2, [r7, #23]
 80188f8:	7dbb      	ldrb	r3, [r7, #22]
 80188fa:	0052      	lsls	r2, r2, #1
 80188fc:	4413      	add	r3, r2
 80188fe:	3320      	adds	r3, #32
 8018900:	4a06      	ldr	r2, [pc, #24]	@ (801891c <usbd_edpt_claim+0x50>)
 8018902:	4413      	add	r3, r2
 8018904:	3306      	adds	r3, #6
 8018906:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8018908:	2100      	movs	r1, #0
 801890a:	6938      	ldr	r0, [r7, #16]
 801890c:	f001 fa45 	bl	8019d9a <tu_edpt_claim>
 8018910:	4603      	mov	r3, r0
}
 8018912:	4618      	mov	r0, r3
 8018914:	3718      	adds	r7, #24
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}
 801891a:	bf00      	nop
 801891c:	2400870c 	.word	0x2400870c

08018920 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8018920:	b580      	push	{r7, lr}
 8018922:	b086      	sub	sp, #24
 8018924:	af00      	add	r7, sp, #0
 8018926:	4603      	mov	r3, r0
 8018928:	460a      	mov	r2, r1
 801892a:	71fb      	strb	r3, [r7, #7]
 801892c:	4613      	mov	r3, r2
 801892e:	71bb      	strb	r3, [r7, #6]
 8018930:	79bb      	ldrb	r3, [r7, #6]
 8018932:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018934:	7bbb      	ldrb	r3, [r7, #14]
 8018936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801893a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 801893c:	75fb      	strb	r3, [r7, #23]
 801893e:	79bb      	ldrb	r3, [r7, #6]
 8018940:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018942:	7bfb      	ldrb	r3, [r7, #15]
 8018944:	09db      	lsrs	r3, r3, #7
 8018946:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8018948:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 801894a:	7dfa      	ldrb	r2, [r7, #23]
 801894c:	7dbb      	ldrb	r3, [r7, #22]
 801894e:	0052      	lsls	r2, r2, #1
 8018950:	4413      	add	r3, r2
 8018952:	3320      	adds	r3, #32
 8018954:	4a06      	ldr	r2, [pc, #24]	@ (8018970 <usbd_edpt_release+0x50>)
 8018956:	4413      	add	r3, r2
 8018958:	3306      	adds	r3, #6
 801895a:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 801895c:	2100      	movs	r1, #0
 801895e:	6938      	ldr	r0, [r7, #16]
 8018960:	f001 fa55 	bl	8019e0e <tu_edpt_release>
 8018964:	4603      	mov	r3, r0
}
 8018966:	4618      	mov	r0, r3
 8018968:	3718      	adds	r7, #24
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}
 801896e:	bf00      	nop
 8018970:	2400870c 	.word	0x2400870c

08018974 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8018974:	b580      	push	{r7, lr}
 8018976:	b086      	sub	sp, #24
 8018978:	af00      	add	r7, sp, #0
 801897a:	603a      	str	r2, [r7, #0]
 801897c:	461a      	mov	r2, r3
 801897e:	4603      	mov	r3, r0
 8018980:	71fb      	strb	r3, [r7, #7]
 8018982:	460b      	mov	r3, r1
 8018984:	71bb      	strb	r3, [r7, #6]
 8018986:	4613      	mov	r3, r2
 8018988:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 801898a:	4b32      	ldr	r3, [pc, #200]	@ (8018a54 <usbd_edpt_xfer+0xe0>)
 801898c:	781b      	ldrb	r3, [r3, #0]
 801898e:	71fb      	strb	r3, [r7, #7]
 8018990:	79bb      	ldrb	r3, [r7, #6]
 8018992:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018994:	7abb      	ldrb	r3, [r7, #10]
 8018996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801899a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 801899c:	75fb      	strb	r3, [r7, #23]
 801899e:	79bb      	ldrb	r3, [r7, #6]
 80189a0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80189a2:	7afb      	ldrb	r3, [r7, #11]
 80189a4:	09db      	lsrs	r3, r3, #7
 80189a6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80189a8:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80189aa:	7dfa      	ldrb	r2, [r7, #23]
 80189ac:	7dbb      	ldrb	r3, [r7, #22]
 80189ae:	492a      	ldr	r1, [pc, #168]	@ (8018a58 <usbd_edpt_xfer+0xe4>)
 80189b0:	0052      	lsls	r2, r2, #1
 80189b2:	440a      	add	r2, r1
 80189b4:	4413      	add	r3, r2
 80189b6:	3320      	adds	r3, #32
 80189b8:	799b      	ldrb	r3, [r3, #6]
 80189ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80189be:	b2db      	uxtb	r3, r3
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d00a      	beq.n	80189da <usbd_edpt_xfer+0x66>
 80189c4:	4b25      	ldr	r3, [pc, #148]	@ (8018a5c <usbd_edpt_xfer+0xe8>)
 80189c6:	60fb      	str	r3, [r7, #12]
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	f003 0301 	and.w	r3, r3, #1
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d000      	beq.n	80189d6 <usbd_edpt_xfer+0x62>
 80189d4:	be00      	bkpt	0x0000
 80189d6:	2300      	movs	r3, #0
 80189d8:	e038      	b.n	8018a4c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80189da:	7dfa      	ldrb	r2, [r7, #23]
 80189dc:	7dbb      	ldrb	r3, [r7, #22]
 80189de:	491e      	ldr	r1, [pc, #120]	@ (8018a58 <usbd_edpt_xfer+0xe4>)
 80189e0:	0052      	lsls	r2, r2, #1
 80189e2:	440a      	add	r2, r1
 80189e4:	4413      	add	r3, r2
 80189e6:	f103 0220 	add.w	r2, r3, #32
 80189ea:	7993      	ldrb	r3, [r2, #6]
 80189ec:	f043 0301 	orr.w	r3, r3, #1
 80189f0:	7193      	strb	r3, [r2, #6]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 80189f2:	88bb      	ldrh	r3, [r7, #4]
 80189f4:	79b9      	ldrb	r1, [r7, #6]
 80189f6:	79f8      	ldrb	r0, [r7, #7]
 80189f8:	683a      	ldr	r2, [r7, #0]
 80189fa:	f000 fc55 	bl	80192a8 <dcd_edpt_xfer>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d001      	beq.n	8018a08 <usbd_edpt_xfer+0x94>
    return true;
 8018a04:	2301      	movs	r3, #1
 8018a06:	e021      	b.n	8018a4c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8018a08:	7dfa      	ldrb	r2, [r7, #23]
 8018a0a:	7dbb      	ldrb	r3, [r7, #22]
 8018a0c:	4912      	ldr	r1, [pc, #72]	@ (8018a58 <usbd_edpt_xfer+0xe4>)
 8018a0e:	0052      	lsls	r2, r2, #1
 8018a10:	440a      	add	r2, r1
 8018a12:	4413      	add	r3, r2
 8018a14:	f103 0220 	add.w	r2, r3, #32
 8018a18:	7993      	ldrb	r3, [r2, #6]
 8018a1a:	f023 0301 	bic.w	r3, r3, #1
 8018a1e:	7193      	strb	r3, [r2, #6]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8018a20:	7dfa      	ldrb	r2, [r7, #23]
 8018a22:	7dbb      	ldrb	r3, [r7, #22]
 8018a24:	490c      	ldr	r1, [pc, #48]	@ (8018a58 <usbd_edpt_xfer+0xe4>)
 8018a26:	0052      	lsls	r2, r2, #1
 8018a28:	440a      	add	r2, r1
 8018a2a:	4413      	add	r3, r2
 8018a2c:	f103 0220 	add.w	r2, r3, #32
 8018a30:	7993      	ldrb	r3, [r2, #6]
 8018a32:	f023 0304 	bic.w	r3, r3, #4
 8018a36:	7193      	strb	r3, [r2, #6]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8018a38:	4b08      	ldr	r3, [pc, #32]	@ (8018a5c <usbd_edpt_xfer+0xe8>)
 8018a3a:	613b      	str	r3, [r7, #16]
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f003 0301 	and.w	r3, r3, #1
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d000      	beq.n	8018a4a <usbd_edpt_xfer+0xd6>
 8018a48:	be00      	bkpt	0x0000
    return false;
 8018a4a:	2300      	movs	r3, #0
  }
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3718      	adds	r7, #24
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	2400000e 	.word	0x2400000e
 8018a58:	2400870c 	.word	0x2400870c
 8018a5c:	e000edf0 	.word	0xe000edf0

08018a60 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	4603      	mov	r3, r0
 8018a68:	6039      	str	r1, [r7, #0]
 8018a6a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	781b      	ldrb	r3, [r3, #0]
 8018a70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018a74:	b2db      	uxtb	r3, r3
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d001      	beq.n	8018a7e <status_stage_xact+0x1e>
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	e000      	b.n	8018a80 <status_stage_xact+0x20>
 8018a7e:	2380      	movs	r3, #128	@ 0x80
 8018a80:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8018a82:	7bf9      	ldrb	r1, [r7, #15]
 8018a84:	79f8      	ldrb	r0, [r7, #7]
 8018a86:	2300      	movs	r3, #0
 8018a88:	2200      	movs	r2, #0
 8018a8a:	f7ff ff73 	bl	8018974 <usbd_edpt_xfer>
 8018a8e:	4603      	mov	r3, r0
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	3710      	adds	r7, #16
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}

08018a98 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b082      	sub	sp, #8
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	6039      	str	r1, [r7, #0]
 8018aa2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8018aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8018ad4 <tud_control_status+0x3c>)
 8018aa6:	683a      	ldr	r2, [r7, #0]
 8018aa8:	6810      	ldr	r0, [r2, #0]
 8018aaa:	6851      	ldr	r1, [r2, #4]
 8018aac:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8018aae:	4b09      	ldr	r3, [pc, #36]	@ (8018ad4 <tud_control_status+0x3c>)
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8018ab4:	4b07      	ldr	r3, [pc, #28]	@ (8018ad4 <tud_control_status+0x3c>)
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8018aba:	4b06      	ldr	r3, [pc, #24]	@ (8018ad4 <tud_control_status+0x3c>)
 8018abc:	2200      	movs	r2, #0
 8018abe:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8018ac0:	79fb      	ldrb	r3, [r7, #7]
 8018ac2:	6839      	ldr	r1, [r7, #0]
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f7ff ffcb 	bl	8018a60 <status_stage_xact>
 8018aca:	4603      	mov	r3, r0
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	3708      	adds	r7, #8
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}
 8018ad4:	24008754 	.word	0x24008754

08018ad8 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b088      	sub	sp, #32
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	4603      	mov	r3, r0
 8018ae0:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8018ae2:	4b24      	ldr	r3, [pc, #144]	@ (8018b74 <data_stage_xact+0x9c>)
 8018ae4:	899a      	ldrh	r2, [r3, #12]
 8018ae6:	4b23      	ldr	r3, [pc, #140]	@ (8018b74 <data_stage_xact+0x9c>)
 8018ae8:	89db      	ldrh	r3, [r3, #14]
 8018aea:	1ad3      	subs	r3, r2, r3
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	837b      	strh	r3, [r7, #26]
 8018af0:	2340      	movs	r3, #64	@ 0x40
 8018af2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018af4:	8b7a      	ldrh	r2, [r7, #26]
 8018af6:	8b3b      	ldrh	r3, [r7, #24]
 8018af8:	4293      	cmp	r3, r2
 8018afa:	bf28      	it	cs
 8018afc:	4613      	movcs	r3, r2
 8018afe:	b29b      	uxth	r3, r3
 8018b00:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8018b02:	2300      	movs	r3, #0
 8018b04:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8018b06:	4b1b      	ldr	r3, [pc, #108]	@ (8018b74 <data_stage_xact+0x9c>)
 8018b08:	781b      	ldrb	r3, [r3, #0]
 8018b0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d01e      	beq.n	8018b52 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8018b14:	2380      	movs	r3, #128	@ 0x80
 8018b16:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8018b18:	8bbb      	ldrh	r3, [r7, #28]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d019      	beq.n	8018b52 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8018b1e:	4b15      	ldr	r3, [pc, #84]	@ (8018b74 <data_stage_xact+0x9c>)
 8018b20:	689a      	ldr	r2, [r3, #8]
 8018b22:	8bbb      	ldrh	r3, [r7, #28]
 8018b24:	4914      	ldr	r1, [pc, #80]	@ (8018b78 <data_stage_xact+0xa0>)
 8018b26:	6179      	str	r1, [r7, #20]
 8018b28:	2140      	movs	r1, #64	@ 0x40
 8018b2a:	6139      	str	r1, [r7, #16]
 8018b2c:	60fa      	str	r2, [r7, #12]
 8018b2e:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8018b30:	693a      	ldr	r2, [r7, #16]
 8018b32:	68bb      	ldr	r3, [r7, #8]
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d202      	bcs.n	8018b3e <data_stage_xact+0x66>
    return -1;
 8018b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018b3c:	e005      	b.n	8018b4a <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8018b3e:	68ba      	ldr	r2, [r7, #8]
 8018b40:	68f9      	ldr	r1, [r7, #12]
 8018b42:	6978      	ldr	r0, [r7, #20]
 8018b44:	f004 fb33 	bl	801d1ae <memcpy>
  return 0;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d001      	beq.n	8018b52 <data_stage_xact+0x7a>
 8018b4e:	2300      	movs	r3, #0
 8018b50:	e00b      	b.n	8018b6a <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8018b52:	8bbb      	ldrh	r3, [r7, #28]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d001      	beq.n	8018b5c <data_stage_xact+0x84>
 8018b58:	4a07      	ldr	r2, [pc, #28]	@ (8018b78 <data_stage_xact+0xa0>)
 8018b5a:	e000      	b.n	8018b5e <data_stage_xact+0x86>
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	8bbb      	ldrh	r3, [r7, #28]
 8018b60:	7ff9      	ldrb	r1, [r7, #31]
 8018b62:	79f8      	ldrb	r0, [r7, #7]
 8018b64:	f7ff ff06 	bl	8018974 <usbd_edpt_xfer>
 8018b68:	4603      	mov	r3, r0
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3720      	adds	r7, #32
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
 8018b72:	bf00      	nop
 8018b74:	24008754 	.word	0x24008754
 8018b78:	24008768 	.word	0x24008768

08018b7c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b088      	sub	sp, #32
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	60b9      	str	r1, [r7, #8]
 8018b84:	607a      	str	r2, [r7, #4]
 8018b86:	461a      	mov	r2, r3
 8018b88:	4603      	mov	r3, r0
 8018b8a:	73fb      	strb	r3, [r7, #15]
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8018b90:	4b30      	ldr	r3, [pc, #192]	@ (8018c54 <tud_control_xfer+0xd8>)
 8018b92:	68ba      	ldr	r2, [r7, #8]
 8018b94:	6810      	ldr	r0, [r2, #0]
 8018b96:	6851      	ldr	r1, [r2, #4]
 8018b98:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8018b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8018c54 <tud_control_xfer+0xd8>)
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8018ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8018c54 <tud_control_xfer+0xd8>)
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	88db      	ldrh	r3, [r3, #6]
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	89bb      	ldrh	r3, [r7, #12]
 8018bae:	827b      	strh	r3, [r7, #18]
 8018bb0:	4613      	mov	r3, r2
 8018bb2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018bb4:	8a7a      	ldrh	r2, [r7, #18]
 8018bb6:	8a3b      	ldrh	r3, [r7, #16]
 8018bb8:	4293      	cmp	r3, r2
 8018bba:	bf28      	it	cs
 8018bbc:	4613      	movcs	r3, r2
 8018bbe:	b29a      	uxth	r2, r3
 8018bc0:	4b24      	ldr	r3, [pc, #144]	@ (8018c54 <tud_control_xfer+0xd8>)
 8018bc2:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	88db      	ldrh	r3, [r3, #6]
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d026      	beq.n	8018c1c <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8018bce:	4b21      	ldr	r3, [pc, #132]	@ (8018c54 <tud_control_xfer+0xd8>)
 8018bd0:	899b      	ldrh	r3, [r3, #12]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d00d      	beq.n	8018bf2 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d10a      	bne.n	8018bf2 <tud_control_xfer+0x76>
 8018bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8018c58 <tud_control_xfer+0xdc>)
 8018bde:	61bb      	str	r3, [r7, #24]
 8018be0:	69bb      	ldr	r3, [r7, #24]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	f003 0301 	and.w	r3, r3, #1
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d000      	beq.n	8018bee <tud_control_xfer+0x72>
 8018bec:	be00      	bkpt	0x0000
 8018bee:	2300      	movs	r3, #0
 8018bf0:	e02b      	b.n	8018c4a <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8018bf2:	7bfb      	ldrb	r3, [r7, #15]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7ff ff6f 	bl	8018ad8 <data_stage_xact>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	f083 0301 	eor.w	r3, r3, #1
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d020      	beq.n	8018c48 <tud_control_xfer+0xcc>
 8018c06:	4b14      	ldr	r3, [pc, #80]	@ (8018c58 <tud_control_xfer+0xdc>)
 8018c08:	617b      	str	r3, [r7, #20]
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	f003 0301 	and.w	r3, r3, #1
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d000      	beq.n	8018c18 <tud_control_xfer+0x9c>
 8018c16:	be00      	bkpt	0x0000
 8018c18:	2300      	movs	r3, #0
 8018c1a:	e016      	b.n	8018c4a <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8018c1c:	7bfb      	ldrb	r3, [r7, #15]
 8018c1e:	68b9      	ldr	r1, [r7, #8]
 8018c20:	4618      	mov	r0, r3
 8018c22:	f7ff ff1d 	bl	8018a60 <status_stage_xact>
 8018c26:	4603      	mov	r3, r0
 8018c28:	f083 0301 	eor.w	r3, r3, #1
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d00a      	beq.n	8018c48 <tud_control_xfer+0xcc>
 8018c32:	4b09      	ldr	r3, [pc, #36]	@ (8018c58 <tud_control_xfer+0xdc>)
 8018c34:	61fb      	str	r3, [r7, #28]
 8018c36:	69fb      	ldr	r3, [r7, #28]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	f003 0301 	and.w	r3, r3, #1
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d000      	beq.n	8018c44 <tud_control_xfer+0xc8>
 8018c42:	be00      	bkpt	0x0000
 8018c44:	2300      	movs	r3, #0
 8018c46:	e000      	b.n	8018c4a <tud_control_xfer+0xce>
  }

  return true;
 8018c48:	2301      	movs	r3, #1
}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	3720      	adds	r7, #32
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}
 8018c52:	bf00      	nop
 8018c54:	24008754 	.word	0x24008754
 8018c58:	e000edf0 	.word	0xe000edf0

08018c5c <dma_setup_prepare>:
  (void) dwc2;
  // Internal DMA only
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8018c5c:	b480      	push	{r7}
 8018c5e:	b085      	sub	sp, #20
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	4603      	mov	r3, r0
 8018c64:	71fb      	strb	r3, [r7, #7]
 8018c66:	79fb      	ldrb	r3, [r7, #7]
 8018c68:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018c6a:	7afb      	ldrb	r3, [r7, #11]
 8018c6c:	2b01      	cmp	r3, #1
 8018c6e:	d901      	bls.n	8018c74 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8018c70:	2300      	movs	r3, #0
 8018c72:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018c74:	7afb      	ldrb	r3, [r7, #11]
 8018c76:	4a13      	ldr	r2, [pc, #76]	@ (8018cc4 <dma_setup_prepare+0x68>)
 8018c78:	011b      	lsls	r3, r3, #4
 8018c7a:	4413      	add	r3, r2
 8018c7c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018c7e:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018c84:	4a10      	ldr	r2, [pc, #64]	@ (8018cc8 <dma_setup_prepare+0x6c>)
 8018c86:	4293      	cmp	r3, r2
 8018c88:	d904      	bls.n	8018c94 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	db10      	blt.n	8018cb6 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	4a0d      	ldr	r2, [pc, #52]	@ (8018ccc <dma_setup_prepare+0x70>)
 8018c98:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8018c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8018cd0 <dma_setup_prepare+0x74>)
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8018caa:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8018cb4:	e000      	b.n	8018cb8 <dma_setup_prepare+0x5c>
      return;
 8018cb6:	bf00      	nop
}
 8018cb8:	3714      	adds	r7, #20
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc0:	4770      	bx	lr
 8018cc2:	bf00      	nop
 8018cc4:	0803163c 	.word	0x0803163c
 8018cc8:	4f543009 	.word	0x4f543009
 8018ccc:	20080008 	.word	0x20080008
 8018cd0:	240088d0 	.word	0x240088d0

08018cd4 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8018cd4:	b480      	push	{r7}
 8018cd6:	b091      	sub	sp, #68	@ 0x44
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	4603      	mov	r3, r0
 8018cdc:	71fb      	strb	r3, [r7, #7]
 8018cde:	460b      	mov	r3, r1
 8018ce0:	71bb      	strb	r3, [r7, #6]
 8018ce2:	4613      	mov	r3, r2
 8018ce4:	80bb      	strh	r3, [r7, #4]
 8018ce6:	79fb      	ldrb	r3, [r7, #7]
 8018ce8:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018cea:	7e7b      	ldrb	r3, [r7, #25]
 8018cec:	2b01      	cmp	r3, #1
 8018cee:	d901      	bls.n	8018cf4 <dfifo_alloc+0x20>
    rhport = 0;
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018cf4:	7e7b      	ldrb	r3, [r7, #25]
 8018cf6:	4a65      	ldr	r2, [pc, #404]	@ (8018e8c <dfifo_alloc+0x1b8>)
 8018cf8:	011b      	lsls	r3, r3, #4
 8018cfa:	4413      	add	r3, r2
 8018cfc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8018d00:	79fb      	ldrb	r3, [r7, #7]
 8018d02:	011b      	lsls	r3, r3, #4
 8018d04:	4a61      	ldr	r2, [pc, #388]	@ (8018e8c <dfifo_alloc+0x1b8>)
 8018d06:	4413      	add	r3, r2
 8018d08:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8018d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d0c:	7a1b      	ldrb	r3, [r3, #8]
 8018d0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8018d12:	79bb      	ldrb	r3, [r7, #6]
 8018d14:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018d16:	7ebb      	ldrb	r3, [r7, #26]
 8018d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018d1c:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8018d1e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8018d22:	79bb      	ldrb	r3, [r7, #6]
 8018d24:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018d26:	7efb      	ldrb	r3, [r7, #27]
 8018d28:	09db      	lsrs	r3, r3, #7
 8018d2a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8018d2c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8018d30:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8018d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018d38:	429a      	cmp	r2, r3
 8018d3a:	d30a      	bcc.n	8018d52 <dfifo_alloc+0x7e>
 8018d3c:	4b54      	ldr	r3, [pc, #336]	@ (8018e90 <dfifo_alloc+0x1bc>)
 8018d3e:	61fb      	str	r3, [r7, #28]
 8018d40:	69fb      	ldr	r3, [r7, #28]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f003 0301 	and.w	r3, r3, #1
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d000      	beq.n	8018d4e <dfifo_alloc+0x7a>
 8018d4c:	be00      	bkpt	0x0000
 8018d4e:	2300      	movs	r3, #0
 8018d50:	e095      	b.n	8018e7e <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8018d52:	88bb      	ldrh	r3, [r7, #4]
 8018d54:	617b      	str	r3, [r7, #20]
 8018d56:	2304      	movs	r3, #4
 8018d58:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8018d5a:	697a      	ldr	r2, [r7, #20]
 8018d5c:	693b      	ldr	r3, [r7, #16]
 8018d5e:	4413      	add	r3, r2
 8018d60:	1e5a      	subs	r2, r3, #1
 8018d62:	693b      	ldr	r3, [r7, #16]
 8018d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8018d6a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d12a      	bne.n	8018dc8 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8018d72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d74:	009b      	lsls	r3, r3, #2
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	81fb      	strh	r3, [r7, #14]
 8018d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018d7e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8018d80:	89fb      	ldrh	r3, [r7, #14]
 8018d82:	089b      	lsrs	r3, r3, #2
 8018d84:	b29b      	uxth	r3, r3
 8018d86:	f103 0208 	add.w	r2, r3, #8
 8018d8a:	7b7b      	ldrb	r3, [r7, #13]
 8018d8c:	4413      	add	r3, r2
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	005b      	lsls	r3, r3, #1
 8018d92:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8018d94:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8018d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018d9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d26d      	bcs.n	8018e7c <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8018da0:	4b3c      	ldr	r3, [pc, #240]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018da2:	889b      	ldrh	r3, [r3, #4]
 8018da4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d90a      	bls.n	8018dc0 <dfifo_alloc+0xec>
 8018daa:	4b39      	ldr	r3, [pc, #228]	@ (8018e90 <dfifo_alloc+0x1bc>)
 8018dac:	623b      	str	r3, [r7, #32]
 8018dae:	6a3b      	ldr	r3, [r7, #32]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	f003 0301 	and.w	r3, r3, #1
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d000      	beq.n	8018dbc <dfifo_alloc+0xe8>
 8018dba:	be00      	bkpt	0x0000
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	e05e      	b.n	8018e7e <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8018dc0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8018dc6:	e059      	b.n	8018e7c <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8018dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dca:	7a5b      	ldrb	r3, [r3, #9]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d016      	beq.n	8018dfe <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8018dd0:	4b30      	ldr	r3, [pc, #192]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018dd2:	799a      	ldrb	r2, [r3, #6]
 8018dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dd6:	7a5b      	ldrb	r3, [r3, #9]
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d30a      	bcc.n	8018df2 <dfifo_alloc+0x11e>
 8018ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8018e90 <dfifo_alloc+0x1bc>)
 8018dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	f003 0301 	and.w	r3, r3, #1
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d000      	beq.n	8018dee <dfifo_alloc+0x11a>
 8018dec:	be00      	bkpt	0x0000
 8018dee:	2300      	movs	r3, #0
 8018df0:	e045      	b.n	8018e7e <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8018df2:	4b28      	ldr	r3, [pc, #160]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018df4:	799b      	ldrb	r3, [r3, #6]
 8018df6:	3301      	adds	r3, #1
 8018df8:	b2da      	uxtb	r2, r3
 8018dfa:	4b26      	ldr	r3, [pc, #152]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018dfc:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8018dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e00:	689b      	ldr	r3, [r3, #8]
 8018e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d102      	bne.n	8018e10 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8018e0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018e0c:	005b      	lsls	r3, r3, #1
 8018e0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8018e10:	4b20      	ldr	r3, [pc, #128]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018e12:	889b      	ldrh	r3, [r3, #4]
 8018e14:	4619      	mov	r1, r3
 8018e16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e1c:	4413      	add	r3, r2
 8018e1e:	4299      	cmp	r1, r3
 8018e20:	d20a      	bcs.n	8018e38 <dfifo_alloc+0x164>
 8018e22:	4b1b      	ldr	r3, [pc, #108]	@ (8018e90 <dfifo_alloc+0x1bc>)
 8018e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	f003 0301 	and.w	r3, r3, #1
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d000      	beq.n	8018e34 <dfifo_alloc+0x160>
 8018e32:	be00      	bkpt	0x0000
 8018e34:	2300      	movs	r3, #0
 8018e36:	e022      	b.n	8018e7e <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8018e38:	4b16      	ldr	r3, [pc, #88]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018e3a:	889a      	ldrh	r2, [r3, #4]
 8018e3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018e3e:	1ad3      	subs	r3, r2, r3
 8018e40:	b29a      	uxth	r2, r3
 8018e42:	4b14      	ldr	r3, [pc, #80]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018e44:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8018e46:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d108      	bne.n	8018e60 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8018e4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018e50:	041b      	lsls	r3, r3, #16
 8018e52:	4a10      	ldr	r2, [pc, #64]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018e54:	8892      	ldrh	r2, [r2, #4]
 8018e56:	4313      	orrs	r3, r2
 8018e58:	461a      	mov	r2, r3
 8018e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8018e5e:	e00d      	b.n	8018e7c <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8018e60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018e62:	041b      	lsls	r3, r3, #16
 8018e64:	4a0b      	ldr	r2, [pc, #44]	@ (8018e94 <dfifo_alloc+0x1c0>)
 8018e66:	8892      	ldrh	r2, [r2, #4]
 8018e68:	431a      	orrs	r2, r3
 8018e6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8018e6e:	3b01      	subs	r3, #1
 8018e70:	4611      	mov	r1, r2
 8018e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018e74:	3340      	adds	r3, #64	@ 0x40
 8018e76:	009b      	lsls	r3, r3, #2
 8018e78:	4413      	add	r3, r2
 8018e7a:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8018e7c:	2301      	movs	r3, #1
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	3744      	adds	r7, #68	@ 0x44
 8018e82:	46bd      	mov	sp, r7
 8018e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e88:	4770      	bx	lr
 8018e8a:	bf00      	nop
 8018e8c:	0803163c 	.word	0x0803163c
 8018e90:	e000edf0 	.word	0xe000edf0
 8018e94:	240088c8 	.word	0x240088c8

08018e98 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b088      	sub	sp, #32
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8018ea2:	79fb      	ldrb	r3, [r7, #7]
 8018ea4:	011b      	lsls	r3, r3, #4
 8018ea6:	4a25      	ldr	r2, [pc, #148]	@ (8018f3c <dfifo_device_init+0xa4>)
 8018ea8:	4413      	add	r3, r2
 8018eaa:	61fb      	str	r3, [r7, #28]
 8018eac:	79fb      	ldrb	r3, [r7, #7]
 8018eae:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018eb0:	7b3b      	ldrb	r3, [r7, #12]
 8018eb2:	2b01      	cmp	r3, #1
 8018eb4:	d901      	bls.n	8018eba <dfifo_device_init+0x22>
    rhport = 0;
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018eba:	7b3b      	ldrb	r3, [r7, #12]
 8018ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8018f3c <dfifo_device_init+0xa4>)
 8018ebe:	011b      	lsls	r3, r3, #4
 8018ec0:	4413      	add	r3, r2
 8018ec2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018ec4:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8018ec6:	69fb      	ldr	r3, [r7, #28]
 8018ec8:	7a1b      	ldrb	r3, [r3, #8]
 8018eca:	2240      	movs	r2, #64	@ 0x40
 8018ecc:	81fa      	strh	r2, [r7, #14]
 8018ece:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8018ed0:	89fb      	ldrh	r3, [r7, #14]
 8018ed2:	089b      	lsrs	r3, r3, #2
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	f103 0208 	add.w	r2, r3, #8
 8018eda:	7b7b      	ldrb	r3, [r7, #13]
 8018edc:	4413      	add	r3, r2
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	005b      	lsls	r3, r3, #1
 8018ee2:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8018ee4:	461a      	mov	r2, r3
 8018ee6:	69bb      	ldr	r3, [r7, #24]
 8018ee8:	625a      	str	r2, [r3, #36]	@ 0x24
 8018eea:	69bb      	ldr	r3, [r7, #24]
 8018eec:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8018eee:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8018ef0:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8018ef2:	69fb      	ldr	r3, [r7, #28]
 8018ef4:	68db      	ldr	r3, [r3, #12]
 8018ef6:	089b      	lsrs	r3, r3, #2
 8018ef8:	b29a      	uxth	r2, r3
 8018efa:	4b11      	ldr	r3, [pc, #68]	@ (8018f40 <dfifo_device_init+0xa8>)
 8018efc:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8018efe:	7dfb      	ldrb	r3, [r7, #23]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d009      	beq.n	8018f18 <dfifo_device_init+0x80>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8018f04:	4b0e      	ldr	r3, [pc, #56]	@ (8018f40 <dfifo_device_init+0xa8>)
 8018f06:	889a      	ldrh	r2, [r3, #4]
 8018f08:	69fb      	ldr	r3, [r7, #28]
 8018f0a:	7a1b      	ldrb	r3, [r3, #8]
 8018f0c:	005b      	lsls	r3, r3, #1
 8018f0e:	b29b      	uxth	r3, r3
 8018f10:	1ad3      	subs	r3, r2, r3
 8018f12:	b29a      	uxth	r2, r3
 8018f14:	4b0a      	ldr	r3, [pc, #40]	@ (8018f40 <dfifo_device_init+0xa8>)
 8018f16:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8018f18:	4b09      	ldr	r3, [pc, #36]	@ (8018f40 <dfifo_device_init+0xa8>)
 8018f1a:	889b      	ldrh	r3, [r3, #4]
 8018f1c:	461a      	mov	r2, r3
 8018f1e:	4613      	mov	r3, r2
 8018f20:	041b      	lsls	r3, r3, #16
 8018f22:	441a      	add	r2, r3
 8018f24:	69bb      	ldr	r3, [r7, #24]
 8018f26:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8018f28:	79fb      	ldrb	r3, [r7, #7]
 8018f2a:	2240      	movs	r2, #64	@ 0x40
 8018f2c:	2180      	movs	r1, #128	@ 0x80
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7ff fed0 	bl	8018cd4 <dfifo_alloc>
}
 8018f34:	bf00      	nop
 8018f36:	3720      	adds	r7, #32
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	0803163c 	.word	0x0803163c
 8018f40:	240088c8 	.word	0x240088c8

08018f44 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8018f44:	b480      	push	{r7}
 8018f46:	b08b      	sub	sp, #44	@ 0x2c
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	6039      	str	r1, [r7, #0]
 8018f4e:	71fb      	strb	r3, [r7, #7]
 8018f50:	79fb      	ldrb	r3, [r7, #7]
 8018f52:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018f54:	7c7b      	ldrb	r3, [r7, #17]
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d901      	bls.n	8018f5e <edpt_activate+0x1a>
    rhport = 0;
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018f5e:	7c7b      	ldrb	r3, [r7, #17]
 8018f60:	4a45      	ldr	r2, [pc, #276]	@ (8019078 <edpt_activate+0x134>)
 8018f62:	011b      	lsls	r3, r3, #4
 8018f64:	4413      	add	r3, r2
 8018f66:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018f68:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	789b      	ldrb	r3, [r3, #2]
 8018f6e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018f70:	7cbb      	ldrb	r3, [r7, #18]
 8018f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8018f7c:	683b      	ldr	r3, [r7, #0]
 8018f7e:	789b      	ldrb	r3, [r3, #2]
 8018f80:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018f82:	7cfb      	ldrb	r3, [r7, #19]
 8018f84:	09db      	lsrs	r3, r3, #7
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8018f8c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8018f90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018f94:	0052      	lsls	r2, r2, #1
 8018f96:	4413      	add	r3, r2
 8018f98:	011b      	lsls	r3, r3, #4
 8018f9a:	4a38      	ldr	r2, [pc, #224]	@ (801907c <edpt_activate+0x138>)
 8018f9c:	4413      	add	r3, r2
 8018f9e:	61fb      	str	r3, [r7, #28]
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	889b      	ldrh	r3, [r3, #4]
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018fae:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8018fb0:	69fb      	ldr	r3, [r7, #28]
 8018fb2:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	799a      	ldrb	r2, [r3, #6]
 8018fb8:	69fb      	ldr	r3, [r7, #28]
 8018fba:	731a      	strb	r2, [r3, #12]
  // Endpoint control
  union {
    uint32_t value;
    dwc2_depctl_t bm;
  } depctl;
  depctl.value = 0;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	60fb      	str	r3, [r7, #12]

  depctl.bm.mps = xfer->max_size;
 8018fc0:	69fb      	ldr	r3, [r7, #28]
 8018fc2:	895b      	ldrh	r3, [r3, #10]
 8018fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018fc8:	b29a      	uxth	r2, r3
 8018fca:	89bb      	ldrh	r3, [r7, #12]
 8018fcc:	f362 030a 	bfi	r3, r2, #0, #11
 8018fd0:	81bb      	strh	r3, [r7, #12]
  depctl.bm.active = 1;
 8018fd2:	7b7b      	ldrb	r3, [r7, #13]
 8018fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018fd8:	737b      	strb	r3, [r7, #13]
  depctl.bm.type = p_endpoint_desc->bmAttributes.xfer;
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	78db      	ldrb	r3, [r3, #3]
 8018fde:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018fe2:	b2da      	uxtb	r2, r3
 8018fe4:	7bbb      	ldrb	r3, [r7, #14]
 8018fe6:	f362 0383 	bfi	r3, r2, #2, #2
 8018fea:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	78db      	ldrb	r3, [r3, #3]
 8018ff0:	f003 0303 	and.w	r3, r3, #3
 8018ff4:	b2db      	uxtb	r3, r3
 8018ff6:	2b01      	cmp	r3, #1
 8018ff8:	d003      	beq.n	8019002 <edpt_activate+0xbe>
    depctl.bm.set_data0_iso_even = 1;
 8018ffa:	7bfb      	ldrb	r3, [r7, #15]
 8018ffc:	f043 0310 	orr.w	r3, r3, #16
 8019000:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8019002:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019006:	2b01      	cmp	r3, #1
 8019008:	d108      	bne.n	801901c <edpt_activate+0xd8>
    depctl.bm.tx_fifo_num = epnum;
 801900a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801900e:	f003 030f 	and.w	r3, r3, #15
 8019012:	b2da      	uxtb	r2, r3
 8019014:	89fb      	ldrh	r3, [r7, #14]
 8019016:	f362 1389 	bfi	r3, r2, #6, #4
 801901a:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 801901c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019020:	2b01      	cmp	r3, #1
 8019022:	bf14      	ite	ne
 8019024:	2301      	movne	r3, #1
 8019026:	2300      	moveq	r3, #0
 8019028:	b2db      	uxtb	r3, r3
 801902a:	461a      	mov	r2, r3
 801902c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019030:	0112      	lsls	r2, r2, #4
 8019032:	4413      	add	r3, r2
 8019034:	3348      	adds	r3, #72	@ 0x48
 8019036:	015b      	lsls	r3, r3, #5
 8019038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801903a:	4413      	add	r3, r2
 801903c:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 801903e:	68fa      	ldr	r2, [r7, #12]
 8019040:	69bb      	ldr	r3, [r7, #24]
 8019042:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8019044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019046:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 801904a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801904e:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8019052:	2901      	cmp	r1, #1
 8019054:	d101      	bne.n	801905a <edpt_activate+0x116>
 8019056:	2100      	movs	r1, #0
 8019058:	e000      	b.n	801905c <edpt_activate+0x118>
 801905a:	2110      	movs	r1, #16
 801905c:	440b      	add	r3, r1
 801905e:	2101      	movs	r1, #1
 8019060:	fa01 f303 	lsl.w	r3, r1, r3
 8019064:	431a      	orrs	r2, r3
 8019066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019068:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 801906c:	bf00      	nop
 801906e:	372c      	adds	r7, #44	@ 0x2c
 8019070:	46bd      	mov	sp, r7
 8019072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019076:	4770      	bx	lr
 8019078:	0803163c 	.word	0x0803163c
 801907c:	240087a8 	.word	0x240087a8

08019080 <edpt_schedule_packets>:
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}

static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8019080:	b580      	push	{r7, lr}
 8019082:	b08e      	sub	sp, #56	@ 0x38
 8019084:	af00      	add	r7, sp, #0
 8019086:	4603      	mov	r3, r0
 8019088:	71fb      	strb	r3, [r7, #7]
 801908a:	460b      	mov	r3, r1
 801908c:	71bb      	strb	r3, [r7, #6]
 801908e:	4613      	mov	r3, r2
 8019090:	717b      	strb	r3, [r7, #5]
 8019092:	79fb      	ldrb	r3, [r7, #7]
 8019094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019098:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801909c:	2b01      	cmp	r3, #1
 801909e:	d902      	bls.n	80190a6 <edpt_schedule_packets+0x26>
    rhport = 0;
 80190a0:	2300      	movs	r3, #0
 80190a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80190a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80190aa:	4a63      	ldr	r2, [pc, #396]	@ (8019238 <edpt_schedule_packets+0x1b8>)
 80190ac:	011b      	lsls	r3, r3, #4
 80190ae:	4413      	add	r3, r2
 80190b0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80190b2:	633b      	str	r3, [r7, #48]	@ 0x30
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 80190b4:	79ba      	ldrb	r2, [r7, #6]
 80190b6:	797b      	ldrb	r3, [r7, #5]
 80190b8:	0052      	lsls	r2, r2, #1
 80190ba:	4413      	add	r3, r2
 80190bc:	011b      	lsls	r3, r3, #4
 80190be:	4a5f      	ldr	r2, [pc, #380]	@ (801923c <edpt_schedule_packets+0x1bc>)
 80190c0:	4413      	add	r3, r2
 80190c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80190c4:	797b      	ldrb	r3, [r7, #5]
 80190c6:	2b01      	cmp	r3, #1
 80190c8:	bf14      	ite	ne
 80190ca:	2301      	movne	r3, #1
 80190cc:	2300      	moveq	r3, #0
 80190ce:	b2db      	uxtb	r3, r3
 80190d0:	461a      	mov	r2, r3
 80190d2:	79bb      	ldrb	r3, [r7, #6]
 80190d4:	0112      	lsls	r2, r2, #4
 80190d6:	4413      	add	r3, r2
 80190d8:	3348      	adds	r3, #72	@ 0x48
 80190da:	015b      	lsls	r3, r3, #5
 80190dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80190de:	4413      	add	r3, r2
 80190e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 80190e2:	79bb      	ldrb	r3, [r7, #6]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d11c      	bne.n	8019122 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 80190e8:	797b      	ldrb	r3, [r7, #5]
 80190ea:	4a55      	ldr	r2, [pc, #340]	@ (8019240 <edpt_schedule_packets+0x1c0>)
 80190ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80190f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190f2:	895b      	ldrh	r3, [r3, #10]
 80190f4:	843a      	strh	r2, [r7, #32]
 80190f6:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80190f8:	8c3a      	ldrh	r2, [r7, #32]
 80190fa:	8bfb      	ldrh	r3, [r7, #30]
 80190fc:	4293      	cmp	r3, r2
 80190fe:	bf28      	it	cs
 8019100:	4613      	movcs	r3, r2
 8019102:	b29b      	uxth	r3, r3
 8019104:	86bb      	strh	r3, [r7, #52]	@ 0x34
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8019106:	797b      	ldrb	r3, [r7, #5]
 8019108:	4a4d      	ldr	r2, [pc, #308]	@ (8019240 <edpt_schedule_packets+0x1c0>)
 801910a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801910e:	797b      	ldrb	r3, [r7, #5]
 8019110:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019112:	1a8a      	subs	r2, r1, r2
 8019114:	b291      	uxth	r1, r2
 8019116:	4a4a      	ldr	r2, [pc, #296]	@ (8019240 <edpt_schedule_packets+0x1c0>)
 8019118:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 801911c:	2301      	movs	r3, #1
 801911e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8019120:	e014      	b.n	801914c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8019122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019124:	891b      	ldrh	r3, [r3, #8]
 8019126:	86bb      	strh	r3, [r7, #52]	@ 0x34
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8019128:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801912a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801912c:	8952      	ldrh	r2, [r2, #10]
 801912e:	61bb      	str	r3, [r7, #24]
 8019130:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8019132:	69ba      	ldr	r2, [r7, #24]
 8019134:	697b      	ldr	r3, [r7, #20]
 8019136:	4413      	add	r3, r2
 8019138:	1e5a      	subs	r2, r3, #1
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019140:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (num_packets == 0) {
 8019142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019144:	2b00      	cmp	r3, #0
 8019146:	d101      	bne.n	801914c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8019148:	2301      	movs	r3, #1
 801914a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  union {
    uint32_t value;
    dwc2_ep_tsize_t bm;
  } deptsiz;
  deptsiz.value = 0;
 801914c:	2300      	movs	r3, #0
 801914e:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.xfer_size =  total_bytes;
 8019150:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019152:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	f362 0312 	bfi	r3, r2, #0, #19
 801915c:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.packet_count = num_packets;
 801915e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019164:	b29a      	uxth	r2, r3
 8019166:	89fb      	ldrh	r3, [r7, #14]
 8019168:	f362 03cc 	bfi	r3, r2, #3, #10
 801916c:	81fb      	strh	r3, [r7, #14]

  dep->tsiz = deptsiz.value;
 801916e:	68fa      	ldr	r2, [r7, #12]
 8019170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019172:	611a      	str	r2, [r3, #16]
  // control
  union {
    dwc2_depctl_t bm;
    uint32_t value;
  } depctl;
  depctl.value = dep->ctl;
 8019174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	60bb      	str	r3, [r7, #8]

  depctl.bm.clear_nak = 1;
 801917a:	7afb      	ldrb	r3, [r7, #11]
 801917c:	f043 0304 	orr.w	r3, r3, #4
 8019180:	72fb      	strb	r3, [r7, #11]
  depctl.bm.enable = 1;
 8019182:	7afb      	ldrb	r3, [r7, #11]
 8019184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019188:	72fb      	strb	r3, [r7, #11]
  if (depctl.bm.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 801918a:	7abb      	ldrb	r3, [r7, #10]
 801918c:	f003 030c 	and.w	r3, r3, #12
 8019190:	b2db      	uxtb	r3, r3
 8019192:	2b04      	cmp	r3, #4
 8019194:	d118      	bne.n	80191c8 <edpt_schedule_packets+0x148>
 8019196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019198:	7b1b      	ldrb	r3, [r3, #12]
 801919a:	2b01      	cmp	r3, #1
 801919c:	d114      	bne.n	80191c8 <edpt_schedule_packets+0x148>
    const uint32_t odd_now = (dwc2->dsts_bm.frame_number & 1u);
 801919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191a0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80191a4:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80191a8:	b29b      	uxth	r3, r3
 80191aa:	f003 0301 	and.w	r3, r3, #1
 80191ae:	627b      	str	r3, [r7, #36]	@ 0x24
    if (odd_now) {
 80191b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d004      	beq.n	80191c0 <edpt_schedule_packets+0x140>
      depctl.bm.set_data0_iso_even = 1;
 80191b6:	7afb      	ldrb	r3, [r7, #11]
 80191b8:	f043 0310 	orr.w	r3, r3, #16
 80191bc:	72fb      	strb	r3, [r7, #11]
 80191be:	e003      	b.n	80191c8 <edpt_schedule_packets+0x148>
    } else {
      depctl.bm.set_data1_iso_odd = 1;
 80191c0:	7afb      	ldrb	r3, [r7, #11]
 80191c2:	f043 0320 	orr.w	r3, r3, #32
 80191c6:	72fb      	strb	r3, [r7, #11]
 80191c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191ca:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80191cc:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 80191ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if(is_dma) {
 80191d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d015      	beq.n	8019206 <edpt_schedule_packets+0x186>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 80191da:	797b      	ldrb	r3, [r7, #5]
 80191dc:	2b01      	cmp	r3, #1
 80191de:	d109      	bne.n	80191f4 <edpt_schedule_packets+0x174>
 80191e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d006      	beq.n	80191f4 <edpt_schedule_packets+0x174>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 80191e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80191ec:	4611      	mov	r1, r2
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7ff f8a9 	bl	8018346 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 80191f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	461a      	mov	r2, r3
 80191fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191fc:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 80191fe:	68ba      	ldr	r2, [r7, #8]
 8019200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019202:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8019204:	e013      	b.n	801922e <edpt_schedule_packets+0x1ae>
    dep->diepctl = depctl.value; // enable endpoint
 8019206:	68ba      	ldr	r2, [r7, #8]
 8019208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801920a:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 801920c:	797b      	ldrb	r3, [r7, #5]
 801920e:	2b01      	cmp	r3, #1
 8019210:	d10d      	bne.n	801922e <edpt_schedule_packets+0x1ae>
 8019212:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019214:	2b00      	cmp	r3, #0
 8019216:	d00a      	beq.n	801922e <edpt_schedule_packets+0x1ae>
      dwc2->diepempmsk |= (1 << epnum);
 8019218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801921a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801921e:	79ba      	ldrb	r2, [r7, #6]
 8019220:	2101      	movs	r1, #1
 8019222:	fa01 f202 	lsl.w	r2, r1, r2
 8019226:	431a      	orrs	r2, r3
 8019228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801922a:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 801922e:	bf00      	nop
 8019230:	3738      	adds	r7, #56	@ 0x38
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}
 8019236:	bf00      	nop
 8019238:	0803163c 	.word	0x0803163c
 801923c:	240087a8 	.word	0x240087a8
 8019240:	240088c8 	.word	0x240088c8

08019244 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8019244:	b580      	push	{r7, lr}
 8019246:	b084      	sub	sp, #16
 8019248:	af00      	add	r7, sp, #0
 801924a:	4603      	mov	r3, r0
 801924c:	6039      	str	r1, [r7, #0]
 801924e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	7899      	ldrb	r1, [r3, #2]
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	60bb      	str	r3, [r7, #8]
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	889b      	ldrh	r3, [r3, #4]
 801925c:	b29b      	uxth	r3, r3
 801925e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019262:	b29a      	uxth	r2, r3
 8019264:	79fb      	ldrb	r3, [r7, #7]
 8019266:	4618      	mov	r0, r3
 8019268:	f7ff fd34 	bl	8018cd4 <dfifo_alloc>
 801926c:	4603      	mov	r3, r0
 801926e:	f083 0301 	eor.w	r3, r3, #1
 8019272:	b2db      	uxtb	r3, r3
 8019274:	2b00      	cmp	r3, #0
 8019276:	d00a      	beq.n	801928e <dcd_edpt_open+0x4a>
 8019278:	4b0a      	ldr	r3, [pc, #40]	@ (80192a4 <dcd_edpt_open+0x60>)
 801927a:	60fb      	str	r3, [r7, #12]
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	f003 0301 	and.w	r3, r3, #1
 8019284:	2b00      	cmp	r3, #0
 8019286:	d000      	beq.n	801928a <dcd_edpt_open+0x46>
 8019288:	be00      	bkpt	0x0000
 801928a:	2300      	movs	r3, #0
 801928c:	e005      	b.n	801929a <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 801928e:	79fb      	ldrb	r3, [r7, #7]
 8019290:	6839      	ldr	r1, [r7, #0]
 8019292:	4618      	mov	r0, r3
 8019294:	f7ff fe56 	bl	8018f44 <edpt_activate>
  return true;
 8019298:	2301      	movs	r3, #1
}
 801929a:	4618      	mov	r0, r3
 801929c:	3710      	adds	r7, #16
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	e000edf0 	.word	0xe000edf0

080192a8 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b086      	sub	sp, #24
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	603a      	str	r2, [r7, #0]
 80192b0:	461a      	mov	r2, r3
 80192b2:	4603      	mov	r3, r0
 80192b4:	71fb      	strb	r3, [r7, #7]
 80192b6:	460b      	mov	r3, r1
 80192b8:	71bb      	strb	r3, [r7, #6]
 80192ba:	4613      	mov	r3, r2
 80192bc:	80bb      	strh	r3, [r7, #4]
 80192be:	79bb      	ldrb	r3, [r7, #6]
 80192c0:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80192c2:	7bbb      	ldrb	r3, [r7, #14]
 80192c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80192c8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80192ca:	75fb      	strb	r3, [r7, #23]
 80192cc:	79bb      	ldrb	r3, [r7, #6]
 80192ce:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80192d0:	7bfb      	ldrb	r3, [r7, #15]
 80192d2:	09db      	lsrs	r3, r3, #7
 80192d4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80192d6:	75bb      	strb	r3, [r7, #22]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80192d8:	7dfa      	ldrb	r2, [r7, #23]
 80192da:	7dbb      	ldrb	r3, [r7, #22]
 80192dc:	0052      	lsls	r2, r2, #1
 80192de:	4413      	add	r3, r2
 80192e0:	011b      	lsls	r3, r3, #4
 80192e2:	4a0f      	ldr	r2, [pc, #60]	@ (8019320 <dcd_edpt_xfer+0x78>)
 80192e4:	4413      	add	r3, r2
 80192e6:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 80192e8:	693b      	ldr	r3, [r7, #16]
 80192ea:	683a      	ldr	r2, [r7, #0]
 80192ec:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	2200      	movs	r2, #0
 80192f2:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 80192f4:	693b      	ldr	r3, [r7, #16]
 80192f6:	88ba      	ldrh	r2, [r7, #4]
 80192f8:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 80192fa:	7dfb      	ldrb	r3, [r7, #23]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d104      	bne.n	801930a <dcd_edpt_xfer+0x62>
    _dcd_data.ep0_pending[dir] = total_bytes;
 8019300:	7dbb      	ldrb	r3, [r7, #22]
 8019302:	4908      	ldr	r1, [pc, #32]	@ (8019324 <dcd_edpt_xfer+0x7c>)
 8019304:	88ba      	ldrh	r2, [r7, #4]
 8019306:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir);
 801930a:	7dba      	ldrb	r2, [r7, #22]
 801930c:	7df9      	ldrb	r1, [r7, #23]
 801930e:	79fb      	ldrb	r3, [r7, #7]
 8019310:	4618      	mov	r0, r3
 8019312:	f7ff feb5 	bl	8019080 <edpt_schedule_packets>

  return true;
 8019316:	2301      	movs	r3, #1
}
 8019318:	4618      	mov	r0, r3
 801931a:	3718      	adds	r7, #24
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}
 8019320:	240087a8 	.word	0x240087a8
 8019324:	240088c8 	.word	0x240088c8

08019328 <handle_bus_reset>:
//--------------------------------------------------------------------
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
static void handle_bus_reset(uint8_t rhport) {
 8019328:	b580      	push	{r7, lr}
 801932a:	b08a      	sub	sp, #40	@ 0x28
 801932c:	af00      	add	r7, sp, #0
 801932e:	4603      	mov	r3, r0
 8019330:	71fb      	strb	r3, [r7, #7]
 8019332:	79fb      	ldrb	r3, [r7, #7]
 8019334:	77bb      	strb	r3, [r7, #30]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019336:	7fbb      	ldrb	r3, [r7, #30]
 8019338:	2b01      	cmp	r3, #1
 801933a:	d901      	bls.n	8019340 <handle_bus_reset+0x18>
    rhport = 0;
 801933c:	2300      	movs	r3, #0
 801933e:	77bb      	strb	r3, [r7, #30]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019340:	7fbb      	ldrb	r3, [r7, #30]
 8019342:	4a63      	ldr	r2, [pc, #396]	@ (80194d0 <handle_bus_reset+0x1a8>)
 8019344:	011b      	lsls	r3, r3, #4
 8019346:	4413      	add	r3, r2
 8019348:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 801934a:	623b      	str	r3, [r7, #32]
  const uint8_t ep_count =  DWC2_EP_COUNT(dwc2);
 801934c:	6a3b      	ldr	r3, [r7, #32]
 801934e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019350:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8019354:	b2db      	uxtb	r3, r3
 8019356:	3301      	adds	r3, #1
 8019358:	77fb      	strb	r3, [r7, #31]

  tu_memclr(xfer_status, sizeof(xfer_status));
 801935a:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801935e:	2100      	movs	r1, #0
 8019360:	485c      	ldr	r0, [pc, #368]	@ (80194d4 <handle_bus_reset+0x1ac>)
 8019362:	f003 fe93 	bl	801d08c <memset>

  _dcd_data.sof_en = false;
 8019366:	4b5c      	ldr	r3, [pc, #368]	@ (80194d8 <handle_bus_reset+0x1b0>)
 8019368:	2200      	movs	r2, #0
 801936a:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 801936c:	4b5a      	ldr	r3, [pc, #360]	@ (80194d8 <handle_bus_reset+0x1b0>)
 801936e:	2200      	movs	r2, #0
 8019370:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8019372:	2300      	movs	r3, #0
 8019374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019378:	e014      	b.n	80193a4 <handle_bus_reset+0x7c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 801937a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801937e:	6a3a      	ldr	r2, [r7, #32]
 8019380:	3358      	adds	r3, #88	@ 0x58
 8019382:	015b      	lsls	r3, r3, #5
 8019384:	4413      	add	r3, r2
 8019386:	681a      	ldr	r2, [r3, #0]
 8019388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801938c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8019390:	6a39      	ldr	r1, [r7, #32]
 8019392:	3358      	adds	r3, #88	@ 0x58
 8019394:	015b      	lsls	r3, r3, #5
 8019396:	440b      	add	r3, r1
 8019398:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 801939a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801939e:	3301      	adds	r3, #1
 80193a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80193a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80193a8:	7ffb      	ldrb	r3, [r7, #31]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d3e5      	bcc.n	801937a <handle_bus_reset+0x52>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80193ae:	2300      	movs	r3, #0
 80193b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80193b4:	e01d      	b.n	80193f2 <handle_bus_reset+0xca>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 80193b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193ba:	6a3a      	ldr	r2, [r7, #32]
 80193bc:	3348      	adds	r3, #72	@ 0x48
 80193be:	015b      	lsls	r3, r3, #5
 80193c0:	4413      	add	r3, r2
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	da0f      	bge.n	80193e8 <handle_bus_reset+0xc0>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 80193c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193cc:	6a3a      	ldr	r2, [r7, #32]
 80193ce:	3348      	adds	r3, #72	@ 0x48
 80193d0:	015b      	lsls	r3, r3, #5
 80193d2:	4413      	add	r3, r2
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193da:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 80193de:	6a39      	ldr	r1, [r7, #32]
 80193e0:	3348      	adds	r3, #72	@ 0x48
 80193e2:	015b      	lsls	r3, r3, #5
 80193e4:	440b      	add	r3, r1
 80193e6:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80193e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193ec:	3301      	adds	r3, #1
 80193ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80193f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80193f6:	7ffb      	ldrb	r3, [r7, #31]
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d3dc      	bcc.n	80193b6 <handle_bus_reset+0x8e>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 80193fc:	6a3b      	ldr	r3, [r7, #32]
 80193fe:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8019402:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8019406:	6a3b      	ldr	r3, [r7, #32]
 8019408:	2209      	movs	r2, #9
 801940a:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 801940e:	6a3b      	ldr	r3, [r7, #32]
 8019410:	2209      	movs	r2, #9
 8019412:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8019416:	6a3b      	ldr	r3, [r7, #32]
 8019418:	613b      	str	r3, [r7, #16]
 801941a:	2310      	movs	r3, #16
 801941c:	73fb      	strb	r3, [r7, #15]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801941e:	7bfb      	ldrb	r3, [r7, #15]
 8019420:	019b      	lsls	r3, r3, #6
 8019422:	f043 0220 	orr.w	r2, r3, #32
 8019426:	693b      	ldr	r3, [r7, #16]
 8019428:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801942a:	bf00      	nop
 801942c:	693b      	ldr	r3, [r7, #16]
 801942e:	691b      	ldr	r3, [r3, #16]
 8019430:	f003 0320 	and.w	r3, r3, #32
 8019434:	2b00      	cmp	r3, #0
 8019436:	d1f9      	bne.n	801942c <handle_bus_reset+0x104>
}
 8019438:	bf00      	nop
 801943a:	6a3b      	ldr	r3, [r7, #32]
 801943c:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801943e:	697b      	ldr	r3, [r7, #20]
 8019440:	2210      	movs	r2, #16
 8019442:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8019444:	bf00      	nop
 8019446:	697b      	ldr	r3, [r7, #20]
 8019448:	691b      	ldr	r3, [r3, #16]
 801944a:	f003 0310 	and.w	r3, r3, #16
 801944e:	2b00      	cmp	r3, #0
 8019450:	d1f9      	bne.n	8019446 <handle_bus_reset+0x11e>
}
 8019452:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8019454:	79fb      	ldrb	r3, [r7, #7]
 8019456:	4618      	mov	r0, r3
 8019458:	f7ff fd1e 	bl	8018e98 <dfifo_device_init>

  // 5. Reset device address
  dwc2->dcfg_bm.address = 0;
 801945c:	6a3a      	ldr	r2, [r7, #32]
 801945e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 8019462:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8019466:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 801946a:	6a3b      	ldr	r3, [r7, #32]
 801946c:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8019470:	f023 0203 	bic.w	r2, r3, #3
 8019474:	6a3b      	ldr	r3, [r7, #32]
 8019476:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 801947a:	6a3b      	ldr	r3, [r7, #32]
 801947c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8019480:	f023 0203 	bic.w	r2, r3, #3
 8019484:	6a3b      	ldr	r3, [r7, #32]
 8019486:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 801948a:	4b12      	ldr	r3, [pc, #72]	@ (80194d4 <handle_bus_reset+0x1ac>)
 801948c:	2240      	movs	r2, #64	@ 0x40
 801948e:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8019490:	4b10      	ldr	r3, [pc, #64]	@ (80194d4 <handle_bus_reset+0x1ac>)
 8019492:	2240      	movs	r2, #64	@ 0x40
 8019494:	835a      	strh	r2, [r3, #26]
 8019496:	6a3b      	ldr	r3, [r7, #32]
 8019498:	61bb      	str	r3, [r7, #24]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801949a:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 801949c:	2b00      	cmp	r3, #0
 801949e:	d004      	beq.n	80194aa <handle_bus_reset+0x182>
    dma_setup_prepare(rhport);
 80194a0:	79fb      	ldrb	r3, [r7, #7]
 80194a2:	4618      	mov	r0, r3
 80194a4:	f7ff fbda 	bl	8018c5c <dma_setup_prepare>
 80194a8:	e007      	b.n	80194ba <handle_bus_reset+0x192>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80194aa:	6a3b      	ldr	r3, [r7, #32]
 80194ac:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 80194b0:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 80194b4:	6a3b      	ldr	r3, [r7, #32]
 80194b6:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 80194ba:	6a3b      	ldr	r3, [r7, #32]
 80194bc:	699b      	ldr	r3, [r3, #24]
 80194be:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 80194c2:	6a3b      	ldr	r3, [r7, #32]
 80194c4:	619a      	str	r2, [r3, #24]
}
 80194c6:	bf00      	nop
 80194c8:	3728      	adds	r7, #40	@ 0x28
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop
 80194d0:	0803163c 	.word	0x0803163c
 80194d4:	240087a8 	.word	0x240087a8
 80194d8:	240088c8 	.word	0x240088c8

080194dc <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 80194dc:	b580      	push	{r7, lr}
 80194de:	b088      	sub	sp, #32
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	4603      	mov	r3, r0
 80194e4:	71fb      	strb	r3, [r7, #7]
 80194e6:	79fb      	ldrb	r3, [r7, #7]
 80194e8:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80194ea:	7dfb      	ldrb	r3, [r7, #23]
 80194ec:	2b01      	cmp	r3, #1
 80194ee:	d901      	bls.n	80194f4 <handle_enum_done+0x18>
    rhport = 0;
 80194f0:	2300      	movs	r3, #0
 80194f2:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80194f4:	7dfb      	ldrb	r3, [r7, #23]
 80194f6:	4a18      	ldr	r2, [pc, #96]	@ (8019558 <handle_enum_done+0x7c>)
 80194f8:	011b      	lsls	r3, r3, #4
 80194fa:	4413      	add	r3, r2
 80194fc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80194fe:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dwc2->dsts_bm.enum_speed) {
 8019500:	69bb      	ldr	r3, [r7, #24]
 8019502:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8019506:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801950a:	b2db      	uxtb	r3, r3
 801950c:	2b00      	cmp	r3, #0
 801950e:	d002      	beq.n	8019516 <handle_enum_done+0x3a>
 8019510:	2b02      	cmp	r3, #2
 8019512:	d003      	beq.n	801951c <handle_enum_done+0x40>
 8019514:	e005      	b.n	8019522 <handle_enum_done+0x46>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8019516:	2302      	movs	r3, #2
 8019518:	77fb      	strb	r3, [r7, #31]
    break;
 801951a:	e005      	b.n	8019528 <handle_enum_done+0x4c>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 801951c:	2301      	movs	r3, #1
 801951e:	77fb      	strb	r3, [r7, #31]
    break;
 8019520:	e002      	b.n	8019528 <handle_enum_done+0x4c>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8019522:	2300      	movs	r3, #0
 8019524:	77fb      	strb	r3, [r7, #31]
    break;
 8019526:	bf00      	nop
 8019528:	79fb      	ldrb	r3, [r7, #7]
 801952a:	75bb      	strb	r3, [r7, #22]
 801952c:	7ffb      	ldrb	r3, [r7, #31]
 801952e:	757b      	strb	r3, [r7, #21]
 8019530:	2301      	movs	r3, #1
 8019532:	753b      	strb	r3, [r7, #20]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019534:	7dbb      	ldrb	r3, [r7, #22]
 8019536:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_BUS_RESET;
 8019538:	2301      	movs	r3, #1
 801953a:	727b      	strb	r3, [r7, #9]
  event.bus_reset.speed = speed;
 801953c:	7d7b      	ldrb	r3, [r7, #21]
 801953e:	733b      	strb	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8019540:	7d3a      	ldrb	r2, [r7, #20]
 8019542:	f107 0308 	add.w	r3, r7, #8
 8019546:	4611      	mov	r1, r2
 8019548:	4618      	mov	r0, r3
 801954a:	f7fe ff2f 	bl	80183ac <dcd_event_handler>
}
 801954e:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8019550:	bf00      	nop
 8019552:	3720      	adds	r7, #32
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	0803163c 	.word	0x0803163c

0801955c <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 801955c:	b580      	push	{r7, lr}
 801955e:	b08c      	sub	sp, #48	@ 0x30
 8019560:	af00      	add	r7, sp, #0
 8019562:	4603      	mov	r3, r0
 8019564:	71fb      	strb	r3, [r7, #7]
 8019566:	79fb      	ldrb	r3, [r7, #7]
 8019568:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801956a:	7cfb      	ldrb	r3, [r7, #19]
 801956c:	2b01      	cmp	r3, #1
 801956e:	d901      	bls.n	8019574 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8019570:	2300      	movs	r3, #0
 8019572:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019574:	7cfb      	ldrb	r3, [r7, #19]
 8019576:	4a48      	ldr	r2, [pc, #288]	@ (8019698 <handle_rxflvl_irq+0x13c>)
 8019578:	011b      	lsls	r3, r3, #4
 801957a:	4413      	add	r3, r2
 801957c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801957e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8019580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019586:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp_bm = dwc2->grxstsp_bm;
 8019588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801958a:	6a1b      	ldr	r3, [r3, #32]
 801958c:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp_bm.ep_ch_num;
 801958e:	7b3b      	ldrb	r3, [r7, #12]
 8019590:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019594:	b2db      	uxtb	r3, r3
 8019596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 801959a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801959e:	3358      	adds	r3, #88	@ 0x58
 80195a0:	015b      	lsls	r3, r3, #5
 80195a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195a4:	4413      	add	r3, r2
 80195a6:	623b      	str	r3, [r7, #32]

  switch (grxstsp_bm.packet_status) {
 80195a8:	7bbb      	ldrb	r3, [r7, #14]
 80195aa:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80195ae:	b2db      	uxtb	r3, r3
 80195b0:	3b01      	subs	r3, #1
 80195b2:	2b05      	cmp	r3, #5
 80195b4:	d868      	bhi.n	8019688 <handle_rxflvl_irq+0x12c>
 80195b6:	a201      	add	r2, pc, #4	@ (adr r2, 80195bc <handle_rxflvl_irq+0x60>)
 80195b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195bc:	08019689 	.word	0x08019689
 80195c0:	080195fb 	.word	0x080195fb
 80195c4:	08019689 	.word	0x08019689
 80195c8:	080195ed 	.word	0x080195ed
 80195cc:	08019689 	.word	0x08019689
 80195d0:	080195d5 	.word	0x080195d5
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 80195d4:	4b31      	ldr	r3, [pc, #196]	@ (801969c <handle_rxflvl_irq+0x140>)
 80195d6:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 80195d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195da:	681a      	ldr	r2, [r3, #0]
 80195dc:	69fb      	ldr	r3, [r7, #28]
 80195de:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 80195e0:	69fb      	ldr	r3, [r7, #28]
 80195e2:	3304      	adds	r3, #4
 80195e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80195e6:	6812      	ldr	r2, [r2, #0]
 80195e8:	601a      	str	r2, [r3, #0]
      break;
 80195ea:	e050      	b.n	801968e <handle_rxflvl_irq+0x132>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80195ec:	6a3b      	ldr	r3, [r7, #32]
 80195ee:	691b      	ldr	r3, [r3, #16]
 80195f0:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 80195f4:	6a3b      	ldr	r3, [r7, #32]
 80195f6:	611a      	str	r2, [r3, #16]
      break;
 80195f8:	e049      	b.n	801968e <handle_rxflvl_irq+0x132>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp_bm.byte_count;
 80195fa:	89bb      	ldrh	r3, [r7, #12]
 80195fc:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8019600:	b29b      	uxth	r3, r3
 8019602:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8019604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019608:	015b      	lsls	r3, r3, #5
 801960a:	4a25      	ldr	r2, [pc, #148]	@ (80196a0 <handle_rxflvl_irq+0x144>)
 801960c:	4413      	add	r3, r2
 801960e:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8019610:	8b7b      	ldrh	r3, [r7, #26]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d03a      	beq.n	801968c <handle_rxflvl_irq+0x130>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8019616:	697b      	ldr	r3, [r7, #20]
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d007      	beq.n	801962e <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	8b7a      	ldrh	r2, [r7, #26]
 8019624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019626:	4618      	mov	r0, r3
 8019628:	f7fe fe49 	bl	80182be <tu_fifo_write_n_const_addr_full_words>
 801962c:	e00c      	b.n	8019648 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	8b7a      	ldrh	r2, [r7, #26]
 8019634:	4619      	mov	r1, r3
 8019636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019638:	f000 fb14 	bl	8019c64 <dfifo_read_packet>
          xfer->buffer += byte_count;
 801963c:	697b      	ldr	r3, [r7, #20]
 801963e:	681a      	ldr	r2, [r3, #0]
 8019640:	8b7b      	ldrh	r3, [r7, #26]
 8019642:	441a      	add	r2, r3
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8019648:	697b      	ldr	r3, [r7, #20]
 801964a:	895b      	ldrh	r3, [r3, #10]
 801964c:	8b7a      	ldrh	r2, [r7, #26]
 801964e:	429a      	cmp	r2, r3
 8019650:	d21c      	bcs.n	801968c <handle_rxflvl_irq+0x130>
          xfer->total_len -= epout->tsiz_bm.xfer_size;
 8019652:	6a3b      	ldr	r3, [r7, #32]
 8019654:	691b      	ldr	r3, [r3, #16]
 8019656:	f3c3 0112 	ubfx	r1, r3, #0, #19
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	891a      	ldrh	r2, [r3, #8]
 801965e:	b28b      	uxth	r3, r1
 8019660:	1ad3      	subs	r3, r2, r3
 8019662:	b29a      	uxth	r2, r3
 8019664:	697b      	ldr	r3, [r7, #20]
 8019666:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8019668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801966c:	2b00      	cmp	r3, #0
 801966e:	d10d      	bne.n	801968c <handle_rxflvl_irq+0x130>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	891a      	ldrh	r2, [r3, #8]
 8019674:	4b0b      	ldr	r3, [pc, #44]	@ (80196a4 <handle_rxflvl_irq+0x148>)
 8019676:	881b      	ldrh	r3, [r3, #0]
 8019678:	1ad3      	subs	r3, r2, r3
 801967a:	b29a      	uxth	r2, r3
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8019680:	4b08      	ldr	r3, [pc, #32]	@ (80196a4 <handle_rxflvl_irq+0x148>)
 8019682:	2200      	movs	r2, #0
 8019684:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8019686:	e001      	b.n	801968c <handle_rxflvl_irq+0x130>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8019688:	bf00      	nop
 801968a:	e000      	b.n	801968e <handle_rxflvl_irq+0x132>
      break;
 801968c:	bf00      	nop
  }
}
 801968e:	bf00      	nop
 8019690:	3730      	adds	r7, #48	@ 0x30
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}
 8019696:	bf00      	nop
 8019698:	0803163c 	.word	0x0803163c
 801969c:	240088d0 	.word	0x240088d0
 80196a0:	240087a8 	.word	0x240087a8
 80196a4:	240088c8 	.word	0x240088c8

080196a8 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b08e      	sub	sp, #56	@ 0x38
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	4603      	mov	r3, r0
 80196b0:	603a      	str	r2, [r7, #0]
 80196b2:	71fb      	strb	r3, [r7, #7]
 80196b4:	460b      	mov	r3, r1
 80196b6:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 80196b8:	783b      	ldrb	r3, [r7, #0]
 80196ba:	f003 0308 	and.w	r3, r3, #8
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d01c      	beq.n	80196fe <handle_epout_slave+0x56>
 80196c4:	79fb      	ldrb	r3, [r7, #7]
 80196c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80196ca:	4b34      	ldr	r3, [pc, #208]	@ (801979c <handle_epout_slave+0xf4>)
 80196cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80196ce:	2301      	movs	r3, #1
 80196d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 80196d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80196d8:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 80196da:	2306      	movs	r3, #6
 80196dc:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 80196de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80196e0:	f107 0318 	add.w	r3, r7, #24
 80196e4:	6810      	ldr	r0, [r2, #0]
 80196e6:	6851      	ldr	r1, [r2, #4]
 80196e8:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80196ea:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80196ee:	f107 0314 	add.w	r3, r7, #20
 80196f2:	4611      	mov	r1, r2
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7fe fe59 	bl	80183ac <dcd_event_handler>
}
 80196fa:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 80196fc:	e04a      	b.n	8019794 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 80196fe:	783b      	ldrb	r3, [r7, #0]
 8019700:	f003 0301 	and.w	r3, r3, #1
 8019704:	b2db      	uxtb	r3, r3
 8019706:	2b00      	cmp	r3, #0
 8019708:	d044      	beq.n	8019794 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 801970a:	783b      	ldrb	r3, [r7, #0]
 801970c:	f003 0320 	and.w	r3, r3, #32
 8019710:	b2db      	uxtb	r3, r3
 8019712:	2b00      	cmp	r3, #0
 8019714:	d13e      	bne.n	8019794 <handle_epout_slave+0xec>
 8019716:	787b      	ldrb	r3, [r7, #1]
 8019718:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801971c:	b2db      	uxtb	r3, r3
 801971e:	2b00      	cmp	r3, #0
 8019720:	d138      	bne.n	8019794 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8019722:	79bb      	ldrb	r3, [r7, #6]
 8019724:	015b      	lsls	r3, r3, #5
 8019726:	4a1e      	ldr	r2, [pc, #120]	@ (80197a0 <handle_epout_slave+0xf8>)
 8019728:	4413      	add	r3, r2
 801972a:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 801972c:	79bb      	ldrb	r3, [r7, #6]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d10a      	bne.n	8019748 <handle_epout_slave+0xa0>
 8019732:	4b1c      	ldr	r3, [pc, #112]	@ (80197a4 <handle_epout_slave+0xfc>)
 8019734:	881b      	ldrh	r3, [r3, #0]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d006      	beq.n	8019748 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 801973a:	79b9      	ldrb	r1, [r7, #6]
 801973c:	79fb      	ldrb	r3, [r7, #7]
 801973e:	2200      	movs	r2, #0
 8019740:	4618      	mov	r0, r3
 8019742:	f7ff fc9d 	bl	8019080 <edpt_schedule_packets>
 8019746:	e025      	b.n	8019794 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8019748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801974a:	891b      	ldrh	r3, [r3, #8]
 801974c:	461a      	mov	r2, r3
 801974e:	79fb      	ldrb	r3, [r7, #7]
 8019750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8019754:	79bb      	ldrb	r3, [r7, #6]
 8019756:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 801975a:	627a      	str	r2, [r7, #36]	@ 0x24
 801975c:	2300      	movs	r3, #0
 801975e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019762:	2301      	movs	r3, #1
 8019764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019768:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801976c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 801976e:	2307      	movs	r3, #7
 8019770:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8019772:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8019776:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8019778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801977a:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 801977c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019780:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8019782:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8019786:	f107 0308 	add.w	r3, r7, #8
 801978a:	4611      	mov	r1, r2
 801978c:	4618      	mov	r0, r3
 801978e:	f7fe fe0d 	bl	80183ac <dcd_event_handler>
}
 8019792:	bf00      	nop
      }
    }
  }
}
 8019794:	3738      	adds	r7, #56	@ 0x38
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	240088d0 	.word	0x240088d0
 80197a0:	240087a8 	.word	0x240087a8
 80197a4:	240088c8 	.word	0x240088c8

080197a8 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b090      	sub	sp, #64	@ 0x40
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	4603      	mov	r3, r0
 80197b0:	603a      	str	r2, [r7, #0]
 80197b2:	71fb      	strb	r3, [r7, #7]
 80197b4:	460b      	mov	r3, r1
 80197b6:	71bb      	strb	r3, [r7, #6]
 80197b8:	79fb      	ldrb	r3, [r7, #7]
 80197ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80197be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80197c2:	2b01      	cmp	r3, #1
 80197c4:	d902      	bls.n	80197cc <handle_epin_slave+0x24>
    rhport = 0;
 80197c6:	2300      	movs	r3, #0
 80197c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80197cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80197d0:	4a5d      	ldr	r2, [pc, #372]	@ (8019948 <handle_epin_slave+0x1a0>)
 80197d2:	011b      	lsls	r3, r3, #4
 80197d4:	4413      	add	r3, r2
 80197d6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80197d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 80197da:	79bb      	ldrb	r3, [r7, #6]
 80197dc:	3348      	adds	r3, #72	@ 0x48
 80197de:	015b      	lsls	r3, r3, #5
 80197e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80197e2:	4413      	add	r3, r2
 80197e4:	637b      	str	r3, [r7, #52]	@ 0x34
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 80197e6:	79bb      	ldrb	r3, [r7, #6]
 80197e8:	015b      	lsls	r3, r3, #5
 80197ea:	3310      	adds	r3, #16
 80197ec:	4a57      	ldr	r2, [pc, #348]	@ (801994c <handle_epin_slave+0x1a4>)
 80197ee:	4413      	add	r3, r2
 80197f0:	633b      	str	r3, [r7, #48]	@ 0x30

  if (diepint_bm.xfer_complete) {
 80197f2:	783b      	ldrb	r3, [r7, #0]
 80197f4:	f003 0301 	and.w	r3, r3, #1
 80197f8:	b2db      	uxtb	r3, r3
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d033      	beq.n	8019866 <handle_epin_slave+0xbe>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 80197fe:	79bb      	ldrb	r3, [r7, #6]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d10a      	bne.n	801981a <handle_epin_slave+0x72>
 8019804:	4b52      	ldr	r3, [pc, #328]	@ (8019950 <handle_epin_slave+0x1a8>)
 8019806:	885b      	ldrh	r3, [r3, #2]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d006      	beq.n	801981a <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 801980c:	79b9      	ldrb	r1, [r7, #6]
 801980e:	79fb      	ldrb	r3, [r7, #7]
 8019810:	2201      	movs	r2, #1
 8019812:	4618      	mov	r0, r3
 8019814:	f7ff fc34 	bl	8019080 <edpt_schedule_packets>
 8019818:	e025      	b.n	8019866 <handle_epin_slave+0xbe>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 801981a:	79bb      	ldrb	r3, [r7, #6]
 801981c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019820:	b2d9      	uxtb	r1, r3
 8019822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019824:	891b      	ldrh	r3, [r3, #8]
 8019826:	461a      	mov	r2, r3
 8019828:	79fb      	ldrb	r3, [r7, #7]
 801982a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801982e:	460b      	mov	r3, r1
 8019830:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8019834:	61fa      	str	r2, [r7, #28]
 8019836:	2300      	movs	r3, #0
 8019838:	76fb      	strb	r3, [r7, #27]
 801983a:	2301      	movs	r3, #1
 801983c:	76bb      	strb	r3, [r7, #26]
  event.rhport = rhport;
 801983e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019842:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8019844:	2307      	movs	r3, #7
 8019846:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8019848:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801984c:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 801984e:	69fb      	ldr	r3, [r7, #28]
 8019850:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8019852:	7efb      	ldrb	r3, [r7, #27]
 8019854:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8019856:	7eba      	ldrb	r2, [r7, #26]
 8019858:	f107 0308 	add.w	r3, r7, #8
 801985c:	4611      	mov	r1, r2
 801985e:	4618      	mov	r0, r3
 8019860:	f7fe fda4 	bl	80183ac <dcd_event_handler>
}
 8019864:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8019866:	783b      	ldrb	r3, [r7, #0]
 8019868:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801986c:	b2db      	uxtb	r3, r3
 801986e:	2b00      	cmp	r3, #0
 8019870:	d066      	beq.n	8019940 <handle_epin_slave+0x198>
 8019872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019874:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8019878:	79ba      	ldrb	r2, [r7, #6]
 801987a:	2101      	movs	r1, #1
 801987c:	fa01 f202 	lsl.w	r2, r1, r2
 8019880:	4013      	ands	r3, r2
 8019882:	2b00      	cmp	r3, #0
 8019884:	d05c      	beq.n	8019940 <handle_epin_slave+0x198>
    const uint16_t remain_packets = epin->tsiz_bm.packet_count;
 8019886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 801988e:	b29b      	uxth	r3, r3
 8019890:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8019892:	2300      	movs	r3, #0
 8019894:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019896:	e03b      	b.n	8019910 <handle_epin_slave+0x168>
      const uint16_t remain_bytes = (uint16_t) epin->tsiz_bm.xfer_size;
 8019898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801989a:	691b      	ldr	r3, [r3, #16]
 801989c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80198a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 80198a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198a4:	895a      	ldrh	r2, [r3, #10]
 80198a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80198a8:	833b      	strh	r3, [r7, #24]
 80198aa:	4613      	mov	r3, r2
 80198ac:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80198ae:	8b3a      	ldrh	r2, [r7, #24]
 80198b0:	8afb      	ldrh	r3, [r7, #22]
 80198b2:	4293      	cmp	r3, r2
 80198b4:	bf28      	it	cs
 80198b6:	4613      	movcs	r3, r2
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	857b      	strh	r3, [r7, #42]	@ 0x2a

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 80198bc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80198be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198c0:	699b      	ldr	r3, [r3, #24]
 80198c2:	0099      	lsls	r1, r3, #2
 80198c4:	4b23      	ldr	r3, [pc, #140]	@ (8019954 <handle_epin_slave+0x1ac>)
 80198c6:	400b      	ands	r3, r1
 80198c8:	429a      	cmp	r2, r3
 80198ca:	d826      	bhi.n	801991a <handle_epin_slave+0x172>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 80198cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198ce:	685b      	ldr	r3, [r3, #4]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d00d      	beq.n	80198f0 <handle_epin_slave+0x148>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 80198d4:	79bb      	ldrb	r3, [r7, #6]
 80198d6:	3301      	adds	r3, #1
 80198d8:	031b      	lsls	r3, r3, #12
 80198da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80198dc:	4413      	add	r3, r2
 80198de:	627b      	str	r3, [r7, #36]	@ 0x24
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 80198e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198e2:	685b      	ldr	r3, [r3, #4]
 80198e4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80198e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7fe fc81 	bl	80181f0 <tu_fifo_read_n_const_addr_full_words>
 80198ee:	e00c      	b.n	801990a <handle_epin_slave+0x162>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 80198f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198f2:	681a      	ldr	r2, [r3, #0]
 80198f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80198f6:	79b9      	ldrb	r1, [r7, #6]
 80198f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80198fa:	f000 fa04 	bl	8019d06 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 80198fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019900:	681a      	ldr	r2, [r3, #0]
 8019902:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019904:	441a      	add	r2, r3
 8019906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019908:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 801990a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801990c:	3301      	adds	r3, #1
 801990e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019910:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019912:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019914:	429a      	cmp	r2, r3
 8019916:	d3bf      	bcc.n	8019898 <handle_epin_slave+0xf0>
 8019918:	e000      	b.n	801991c <handle_epin_slave+0x174>
        break;
 801991a:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    if (epin->tsiz_bm.xfer_size == 0) {
 801991c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801991e:	691b      	ldr	r3, [r3, #16]
 8019920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019924:	2b00      	cmp	r3, #0
 8019926:	d10b      	bne.n	8019940 <handle_epin_slave+0x198>
      dwc2->diepempmsk &= ~(1 << epnum);
 8019928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801992a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801992e:	79ba      	ldrb	r2, [r7, #6]
 8019930:	2101      	movs	r1, #1
 8019932:	fa01 f202 	lsl.w	r2, r1, r2
 8019936:	43d2      	mvns	r2, r2
 8019938:	401a      	ands	r2, r3
 801993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801993c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8019940:	bf00      	nop
 8019942:	3740      	adds	r7, #64	@ 0x40
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}
 8019948:	0803163c 	.word	0x0803163c
 801994c:	240087a8 	.word	0x240087a8
 8019950:	240088c8 	.word	0x240088c8
 8019954:	0003fffc 	.word	0x0003fffc

08019958 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8019958:	b580      	push	{r7, lr}
 801995a:	b08a      	sub	sp, #40	@ 0x28
 801995c:	af00      	add	r7, sp, #0
 801995e:	4603      	mov	r3, r0
 8019960:	460a      	mov	r2, r1
 8019962:	71fb      	strb	r3, [r7, #7]
 8019964:	4613      	mov	r3, r2
 8019966:	71bb      	strb	r3, [r7, #6]
 8019968:	79fb      	ldrb	r3, [r7, #7]
 801996a:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801996c:	7bfb      	ldrb	r3, [r7, #15]
 801996e:	2b01      	cmp	r3, #1
 8019970:	d901      	bls.n	8019976 <handle_ep_irq+0x1e>
    rhport = 0;
 8019972:	2300      	movs	r3, #0
 8019974:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	4a31      	ldr	r2, [pc, #196]	@ (8019a40 <handle_ep_irq+0xe8>)
 801997a:	011b      	lsls	r3, r3, #4
 801997c:	4413      	add	r3, r2
 801997e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019980:	623b      	str	r3, [r7, #32]
 8019982:	6a3b      	ldr	r3, [r7, #32]
 8019984:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019986:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8019988:	77fb      	strb	r3, [r7, #31]
  const uint8_t ep_count = DWC2_EP_COUNT(dwc2);
 801998a:	6a3b      	ldr	r3, [r7, #32]
 801998c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801998e:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8019992:	b2db      	uxtb	r3, r3
 8019994:	3301      	adds	r3, #1
 8019996:	77bb      	strb	r3, [r7, #30]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8019998:	79bb      	ldrb	r3, [r7, #6]
 801999a:	2b01      	cmp	r3, #1
 801999c:	d101      	bne.n	80199a2 <handle_ep_irq+0x4a>
 801999e:	2300      	movs	r3, #0
 80199a0:	e000      	b.n	80199a4 <handle_ep_irq+0x4c>
 80199a2:	2310      	movs	r3, #16
 80199a4:	777b      	strb	r3, [r7, #29]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 80199a6:	79bb      	ldrb	r3, [r7, #6]
 80199a8:	2b01      	cmp	r3, #1
 80199aa:	bf14      	ite	ne
 80199ac:	2301      	movne	r3, #1
 80199ae:	2300      	moveq	r3, #0
 80199b0:	b2db      	uxtb	r3, r3
 80199b2:	025b      	lsls	r3, r3, #9
 80199b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80199b8:	6a3a      	ldr	r2, [r7, #32]
 80199ba:	4413      	add	r3, r2
 80199bc:	61bb      	str	r3, [r7, #24]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 80199be:	2300      	movs	r3, #0
 80199c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80199c4:	e032      	b.n	8019a2c <handle_ep_irq+0xd4>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 80199c6:	6a3b      	ldr	r3, [r7, #32]
 80199c8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80199cc:	7f79      	ldrb	r1, [r7, #29]
 80199ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199d2:	440b      	add	r3, r1
 80199d4:	fa22 f303 	lsr.w	r3, r2, r3
 80199d8:	f003 0301 	and.w	r3, r3, #1
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d020      	beq.n	8019a22 <handle_ep_irq+0xca>
      dwc2_dep_t* epout = &ep_base[epnum];
 80199e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199e4:	015b      	lsls	r3, r3, #5
 80199e6:	69ba      	ldr	r2, [r7, #24]
 80199e8:	4413      	add	r3, r2
 80199ea:	617b      	str	r3, [r7, #20]
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 80199ec:	697b      	ldr	r3, [r7, #20]
 80199ee:	689b      	ldr	r3, [r3, #8]
 80199f0:	60bb      	str	r3, [r7, #8]

      epout->intr = intr.value; // Clear interrupt
 80199f2:	68ba      	ldr	r2, [r7, #8]
 80199f4:	697b      	ldr	r3, [r7, #20]
 80199f6:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 80199f8:	7ffb      	ldrb	r3, [r7, #31]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d111      	bne.n	8019a22 <handle_ep_irq+0xca>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 80199fe:	79bb      	ldrb	r3, [r7, #6]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d107      	bne.n	8019a14 <handle_ep_irq+0xbc>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8019a04:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8019a08:	79fb      	ldrb	r3, [r7, #7]
 8019a0a:	68ba      	ldr	r2, [r7, #8]
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	f7ff fecb 	bl	80197a8 <handle_epin_slave>
 8019a12:	e006      	b.n	8019a22 <handle_ep_irq+0xca>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8019a14:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8019a18:	79fb      	ldrb	r3, [r7, #7]
 8019a1a:	68ba      	ldr	r2, [r7, #8]
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f7ff fe43 	bl	80196a8 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8019a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a26:	3301      	adds	r3, #1
 8019a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019a2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019a30:	7fbb      	ldrb	r3, [r7, #30]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d3c7      	bcc.n	80199c6 <handle_ep_irq+0x6e>
        }
        #endif
      }
    }
  }
}
 8019a36:	bf00      	nop
 8019a38:	bf00      	nop
 8019a3a:	3728      	adds	r7, #40	@ 0x28
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	0803163c 	.word	0x0803163c

08019a44 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b098      	sub	sp, #96	@ 0x60
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	71fb      	strb	r3, [r7, #7]
 8019a4e:	79fb      	ldrb	r3, [r7, #7]
 8019a50:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019a54:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	d902      	bls.n	8019a62 <dcd_int_handler+0x1e>
    rhport = 0;
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019a62:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019a66:	4a7d      	ldr	r2, [pc, #500]	@ (8019c5c <dcd_int_handler+0x218>)
 8019a68:	011b      	lsls	r3, r3, #4
 8019a6a:	4413      	add	r3, r2
 8019a6c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const uint32_t gintmask = dwc2->gintmsk;
 8019a70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a72:	699b      	ldr	r3, [r3, #24]
 8019a74:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8019a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a78:	695b      	ldr	r3, [r3, #20]
 8019a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019a7c:	4013      	ands	r3, r2
 8019a7e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8019a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d007      	beq.n	8019a9a <dcd_int_handler+0x56>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8019a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8019a90:	615a      	str	r2, [r3, #20]
    handle_bus_reset(rhport);
 8019a92:	79fb      	ldrb	r3, [r7, #7]
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7ff fc47 	bl	8019328 <handle_bus_reset>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8019a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d007      	beq.n	8019ab4 <dcd_int_handler+0x70>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8019aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019aa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8019aaa:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8019aac:	79fb      	ldrb	r3, [r7, #7]
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7ff fd14 	bl	80194dc <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8019ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d01d      	beq.n	8019afa <dcd_int_handler+0xb6>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8019abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019ac4:	615a      	str	r2, [r3, #20]
 8019ac6:	79fb      	ldrb	r3, [r7, #7]
 8019ac8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8019acc:	2304      	movs	r3, #4
 8019ace:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8019ad8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8019adc:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8019ae0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8019ae4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8019ae8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8019aec:	f107 0320 	add.w	r3, r7, #32
 8019af0:	4611      	mov	r1, r2
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7fe fc5a 	bl	80183ac <dcd_event_handler>
}
 8019af8:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8019afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	da1d      	bge.n	8019b3c <dcd_int_handler+0xf8>
    dwc2->gintsts = GINTSTS_WKUINT;
 8019b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019b06:	615a      	str	r2, [r3, #20]
 8019b08:	79fb      	ldrb	r3, [r7, #7]
 8019b0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8019b0e:	2305      	movs	r3, #5
 8019b10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8019b14:	2301      	movs	r3, #1
 8019b16:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8019b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019b1e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8019b22:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8019b26:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8019b2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8019b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019b32:	4611      	mov	r1, r2
 8019b34:	4618      	mov	r0, r3
 8019b36:	f7fe fc39 	bl	80183ac <dcd_event_handler>
}
 8019b3a:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8019b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b3e:	f003 0304 	and.w	r3, r3, #4
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d022      	beq.n	8019b8c <dcd_int_handler+0x148>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8019b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b48:	685b      	ldr	r3, [r3, #4]
 8019b4a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8019b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b4e:	f003 0304 	and.w	r3, r3, #4
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d017      	beq.n	8019b86 <dcd_int_handler+0x142>
 8019b56:	79fb      	ldrb	r3, [r7, #7]
 8019b58:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8019b5c:	2302      	movs	r3, #2
 8019b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b62:	2301      	movs	r3, #1
 8019b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 8019b68:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019b6c:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 8019b6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019b72:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8019b74:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8019b78:	f107 0314 	add.w	r3, r7, #20
 8019b7c:	4611      	mov	r1, r2
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7fe fc14 	bl	80183ac <dcd_event_handler>
}
 8019b84:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8019b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019b8a:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8019b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b8e:	f003 0308 	and.w	r3, r3, #8
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d02e      	beq.n	8019bf4 <dcd_int_handler+0x1b0>
    dwc2->gintsts = GINTSTS_SOF;
 8019b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b98:	2208      	movs	r2, #8
 8019b9a:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 8019b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b9e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8019ba2:	0a1b      	lsrs	r3, r3, #8
 8019ba4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 8019baa:	4b2d      	ldr	r3, [pc, #180]	@ (8019c60 <dcd_int_handler+0x21c>)
 8019bac:	79db      	ldrb	r3, [r3, #7]
 8019bae:	f083 0301 	eor.w	r3, r3, #1
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d005      	beq.n	8019bc4 <dcd_int_handler+0x180>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8019bb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019bba:	699b      	ldr	r3, [r3, #24]
 8019bbc:	f023 0208 	bic.w	r2, r3, #8
 8019bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019bc2:	619a      	str	r2, [r3, #24]
 8019bc4:	79fb      	ldrb	r3, [r7, #7]
 8019bc6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8019bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019bce:	2301      	movs	r3, #1
 8019bd0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019bd4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8019bd8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8019bda:	2303      	movs	r3, #3
 8019bdc:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8019bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019be0:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8019be2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8019be6:	f107 0308 	add.w	r3, r7, #8
 8019bea:	4611      	mov	r1, r2
 8019bec:	4618      	mov	r0, r3
 8019bee:	f7fe fbdd 	bl	80183ac <dcd_event_handler>
}
 8019bf2:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 8019bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bf6:	f003 0310 	and.w	r3, r3, #16
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d015      	beq.n	8019c2a <dcd_int_handler+0x1e6>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 8019bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c00:	699b      	ldr	r3, [r3, #24]
 8019c02:	f023 0210 	bic.w	r2, r3, #16
 8019c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c08:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 8019c0a:	79fb      	ldrb	r3, [r7, #7]
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	f7ff fca5 	bl	801955c <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 8019c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c14:	695b      	ldr	r3, [r3, #20]
 8019c16:	f003 0310 	and.w	r3, r3, #16
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d1f5      	bne.n	8019c0a <dcd_int_handler+0x1c6>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8019c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c20:	699b      	ldr	r3, [r3, #24]
 8019c22:	f043 0210 	orr.w	r2, r3, #16
 8019c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c28:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 8019c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d004      	beq.n	8019c3e <dcd_int_handler+0x1fa>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 8019c34:	79fb      	ldrb	r3, [r7, #7]
 8019c36:	2100      	movs	r1, #0
 8019c38:	4618      	mov	r0, r3
 8019c3a:	f7ff fe8d 	bl	8019958 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 8019c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d004      	beq.n	8019c52 <dcd_int_handler+0x20e>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 8019c48:	79fb      	ldrb	r3, [r7, #7]
 8019c4a:	2101      	movs	r1, #1
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7ff fe83 	bl	8019958 <handle_ep_irq>
  }
}
 8019c52:	bf00      	nop
 8019c54:	3760      	adds	r7, #96	@ 0x60
 8019c56:	46bd      	mov	sp, r7
 8019c58:	bd80      	pop	{r7, pc}
 8019c5a:	bf00      	nop
 8019c5c:	0803163c 	.word	0x0803163c
 8019c60:	240088c8 	.word	0x240088c8

08019c64 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 8019c64:	b480      	push	{r7}
 8019c66:	b08f      	sub	sp, #60	@ 0x3c
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	4613      	mov	r3, r2
 8019c70:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019c78:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 8019c7a:	88fb      	ldrh	r3, [r7, #6]
 8019c7c:	089b      	lsrs	r3, r3, #2
 8019c7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 8019c80:	e00b      	b.n	8019c9a <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 8019c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	68ba      	ldr	r2, [r7, #8]
 8019c88:	627a      	str	r2, [r7, #36]	@ 0x24
 8019c8a:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 8019c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c8e:	6a3a      	ldr	r2, [r7, #32]
 8019c90:	601a      	str	r2, [r3, #0]
}
 8019c92:	bf00      	nop
    dst += 4;
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	3304      	adds	r3, #4
 8019c98:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 8019c9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019c9c:	1e5a      	subs	r2, r3, #1
 8019c9e:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d1ee      	bne.n	8019c82 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 8019ca4:	88fb      	ldrh	r3, [r7, #6]
 8019ca6:	b2db      	uxtb	r3, r3
 8019ca8:	f003 0303 	and.w	r3, r3, #3
 8019cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 8019cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d020      	beq.n	8019cfa <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 8019cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cc0:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8019cc2:	69fb      	ldr	r3, [r7, #28]
 8019cc4:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 8019cca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019cce:	2b01      	cmp	r3, #1
 8019cd0:	d907      	bls.n	8019ce2 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	3301      	adds	r3, #1
 8019cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019cd8:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8019cda:	69ba      	ldr	r2, [r7, #24]
 8019cdc:	0a12      	lsrs	r2, r2, #8
 8019cde:	b2d2      	uxtb	r2, r2
 8019ce0:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 8019ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019ce6:	2b02      	cmp	r3, #2
 8019ce8:	d907      	bls.n	8019cfa <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	3302      	adds	r3, #2
 8019cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019cf0:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8019cf2:	697a      	ldr	r2, [r7, #20]
 8019cf4:	0c12      	lsrs	r2, r2, #16
 8019cf6:	b2d2      	uxtb	r2, r2
 8019cf8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8019cfa:	bf00      	nop
 8019cfc:	373c      	adds	r7, #60	@ 0x3c
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d04:	4770      	bx	lr

08019d06 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 8019d06:	b480      	push	{r7}
 8019d08:	b08b      	sub	sp, #44	@ 0x2c
 8019d0a:	af00      	add	r7, sp, #0
 8019d0c:	60f8      	str	r0, [r7, #12]
 8019d0e:	607a      	str	r2, [r7, #4]
 8019d10:	461a      	mov	r2, r3
 8019d12:	460b      	mov	r3, r1
 8019d14:	72fb      	strb	r3, [r7, #11]
 8019d16:	4613      	mov	r3, r2
 8019d18:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 8019d1a:	7afb      	ldrb	r3, [r7, #11]
 8019d1c:	3301      	adds	r3, #1
 8019d1e:	031b      	lsls	r3, r3, #12
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	4413      	add	r3, r2
 8019d24:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 8019d26:	893b      	ldrh	r3, [r7, #8]
 8019d28:	089b      	lsrs	r3, r3, #2
 8019d2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 8019d2c:	e008      	b.n	8019d40 <dfifo_write_packet+0x3a>
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 8019d32:	697b      	ldr	r3, [r7, #20]
 8019d34:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8019d36:	69fb      	ldr	r3, [r7, #28]
 8019d38:	601a      	str	r2, [r3, #0]
    src += 4;
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	3304      	adds	r3, #4
 8019d3e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 8019d40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019d42:	1e5a      	subs	r2, r3, #1
 8019d44:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1f1      	bne.n	8019d2e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 8019d4a:	893b      	ldrh	r3, [r7, #8]
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	f003 0303 	and.w	r3, r3, #3
 8019d52:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 8019d54:	7efb      	ldrb	r3, [r7, #27]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d019      	beq.n	8019d8e <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	781b      	ldrb	r3, [r3, #0]
 8019d5e:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 8019d60:	7efb      	ldrb	r3, [r7, #27]
 8019d62:	2b01      	cmp	r3, #1
 8019d64:	d906      	bls.n	8019d74 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	3301      	adds	r3, #1
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	021b      	lsls	r3, r3, #8
 8019d6e:	6a3a      	ldr	r2, [r7, #32]
 8019d70:	4313      	orrs	r3, r2
 8019d72:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 8019d74:	7efb      	ldrb	r3, [r7, #27]
 8019d76:	2b02      	cmp	r3, #2
 8019d78:	d906      	bls.n	8019d88 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	3302      	adds	r3, #2
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	041b      	lsls	r3, r3, #16
 8019d82:	6a3a      	ldr	r2, [r7, #32]
 8019d84:	4313      	orrs	r3, r2
 8019d86:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	6a3a      	ldr	r2, [r7, #32]
 8019d8c:	601a      	str	r2, [r3, #0]
  }
}
 8019d8e:	bf00      	nop
 8019d90:	372c      	adds	r7, #44	@ 0x2c
 8019d92:	46bd      	mov	sp, r7
 8019d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d98:	4770      	bx	lr

08019d9a <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8019d9a:	b480      	push	{r7}
 8019d9c:	b085      	sub	sp, #20
 8019d9e:	af00      	add	r7, sp, #0
 8019da0:	6078      	str	r0, [r7, #4]
 8019da2:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	781b      	ldrb	r3, [r3, #0]
 8019da8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d106      	bne.n	8019dc0 <tu_edpt_claim+0x26>
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	781b      	ldrb	r3, [r3, #0]
 8019db6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019dba:	b2db      	uxtb	r3, r3
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d001      	beq.n	8019dc4 <tu_edpt_claim+0x2a>
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	e01e      	b.n	8019e02 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	781b      	ldrb	r3, [r3, #0]
 8019dc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019dcc:	b2db      	uxtb	r3, r3
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d108      	bne.n	8019de4 <tu_edpt_claim+0x4a>
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	781b      	ldrb	r3, [r3, #0]
 8019dd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d101      	bne.n	8019de4 <tu_edpt_claim+0x4a>
 8019de0:	2301      	movs	r3, #1
 8019de2:	e000      	b.n	8019de6 <tu_edpt_claim+0x4c>
 8019de4:	2300      	movs	r3, #0
 8019de6:	73fb      	strb	r3, [r7, #15]
 8019de8:	7bfb      	ldrb	r3, [r7, #15]
 8019dea:	f003 0301 	and.w	r3, r3, #1
 8019dee:	73fb      	strb	r3, [r7, #15]
  if (available) {
 8019df0:	7bfb      	ldrb	r3, [r7, #15]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d004      	beq.n	8019e00 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 8019df6:	687a      	ldr	r2, [r7, #4]
 8019df8:	7813      	ldrb	r3, [r2, #0]
 8019dfa:	f043 0304 	orr.w	r3, r3, #4
 8019dfe:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 8019e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	3714      	adds	r7, #20
 8019e06:	46bd      	mov	sp, r7
 8019e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0c:	4770      	bx	lr

08019e0e <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8019e0e:	b480      	push	{r7}
 8019e10:	b085      	sub	sp, #20
 8019e12:	af00      	add	r7, sp, #0
 8019e14:	6078      	str	r0, [r7, #4]
 8019e16:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	781b      	ldrb	r3, [r3, #0]
 8019e1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019e20:	b2db      	uxtb	r3, r3
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	d108      	bne.n	8019e38 <tu_edpt_release+0x2a>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	781b      	ldrb	r3, [r3, #0]
 8019e2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d101      	bne.n	8019e38 <tu_edpt_release+0x2a>
 8019e34:	2301      	movs	r3, #1
 8019e36:	e000      	b.n	8019e3a <tu_edpt_release+0x2c>
 8019e38:	2300      	movs	r3, #0
 8019e3a:	73fb      	strb	r3, [r7, #15]
 8019e3c:	7bfb      	ldrb	r3, [r7, #15]
 8019e3e:	f003 0301 	and.w	r3, r3, #1
 8019e42:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 8019e44:	7bfb      	ldrb	r3, [r7, #15]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d004      	beq.n	8019e54 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8019e4a:	687a      	ldr	r2, [r7, #4]
 8019e4c:	7813      	ldrb	r3, [r2, #0]
 8019e4e:	f023 0304 	bic.w	r3, r3, #4
 8019e52:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 8019e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3714      	adds	r7, #20
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e60:	4770      	bx	lr
	...

08019e64 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 8019e64:	b480      	push	{r7}
 8019e66:	b08b      	sub	sp, #44	@ 0x2c
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
 8019e6c:	460b      	mov	r3, r1
 8019e6e:	70fb      	strb	r3, [r7, #3]
 8019e70:	4613      	mov	r3, r2
 8019e72:	70bb      	strb	r3, [r7, #2]
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	889b      	ldrh	r3, [r3, #4]
 8019e7c:	b29b      	uxth	r3, r3
 8019e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019e82:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8019e84:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	78db      	ldrb	r3, [r3, #3]
 8019e8a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8019e8e:	b2db      	uxtb	r3, r3
 8019e90:	2b03      	cmp	r3, #3
 8019e92:	d059      	beq.n	8019f48 <tu_edpt_validate+0xe4>
 8019e94:	2b03      	cmp	r3, #3
 8019e96:	dc6e      	bgt.n	8019f76 <tu_edpt_validate+0x112>
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	d002      	beq.n	8019ea2 <tu_edpt_validate+0x3e>
 8019e9c:	2b02      	cmp	r3, #2
 8019e9e:	d018      	beq.n	8019ed2 <tu_edpt_validate+0x6e>
 8019ea0:	e069      	b.n	8019f76 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8019ea2:	78fb      	ldrb	r3, [r7, #3]
 8019ea4:	2b02      	cmp	r3, #2
 8019ea6:	d102      	bne.n	8019eae <tu_edpt_validate+0x4a>
 8019ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019eac:	e001      	b.n	8019eb2 <tu_edpt_validate+0x4e>
 8019eae:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8019eb2:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 8019eb4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019eb6:	8a7b      	ldrh	r3, [r7, #18]
 8019eb8:	429a      	cmp	r2, r3
 8019eba:	d95e      	bls.n	8019f7a <tu_edpt_validate+0x116>
 8019ebc:	4b35      	ldr	r3, [pc, #212]	@ (8019f94 <tu_edpt_validate+0x130>)
 8019ebe:	60fb      	str	r3, [r7, #12]
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	f003 0301 	and.w	r3, r3, #1
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d000      	beq.n	8019ece <tu_edpt_validate+0x6a>
 8019ecc:	be00      	bkpt	0x0000
 8019ece:	2300      	movs	r3, #0
 8019ed0:	e059      	b.n	8019f86 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8019ed2:	78fb      	ldrb	r3, [r7, #3]
 8019ed4:	2b02      	cmp	r3, #2
 8019ed6:	d10e      	bne.n	8019ef6 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8019ed8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019ede:	d04e      	beq.n	8019f7e <tu_edpt_validate+0x11a>
 8019ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8019f94 <tu_edpt_validate+0x130>)
 8019ee2:	617b      	str	r3, [r7, #20]
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f003 0301 	and.w	r3, r3, #1
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d000      	beq.n	8019ef2 <tu_edpt_validate+0x8e>
 8019ef0:	be00      	bkpt	0x0000
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	e047      	b.n	8019f86 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 8019ef6:	78bb      	ldrb	r3, [r7, #2]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d00e      	beq.n	8019f1a <tu_edpt_validate+0xb6>
 8019efc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019f02:	d10a      	bne.n	8019f1a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 8019f08:	69fb      	ldr	r3, [r7, #28]
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019f10:	711a      	strb	r2, [r3, #4]
 8019f12:	2200      	movs	r2, #0
 8019f14:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 8019f16:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8019f18:	e031      	b.n	8019f7e <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 8019f1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019f1c:	2b08      	cmp	r3, #8
 8019f1e:	d02e      	beq.n	8019f7e <tu_edpt_validate+0x11a>
 8019f20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019f22:	2b10      	cmp	r3, #16
 8019f24:	d02b      	beq.n	8019f7e <tu_edpt_validate+0x11a>
 8019f26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019f28:	2b20      	cmp	r3, #32
 8019f2a:	d028      	beq.n	8019f7e <tu_edpt_validate+0x11a>
 8019f2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019f2e:	2b40      	cmp	r3, #64	@ 0x40
 8019f30:	d025      	beq.n	8019f7e <tu_edpt_validate+0x11a>
 8019f32:	4b18      	ldr	r3, [pc, #96]	@ (8019f94 <tu_edpt_validate+0x130>)
 8019f34:	61bb      	str	r3, [r7, #24]
 8019f36:	69bb      	ldr	r3, [r7, #24]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	f003 0301 	and.w	r3, r3, #1
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d000      	beq.n	8019f44 <tu_edpt_validate+0xe0>
 8019f42:	be00      	bkpt	0x0000
 8019f44:	2300      	movs	r3, #0
 8019f46:	e01e      	b.n	8019f86 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8019f48:	78fb      	ldrb	r3, [r7, #3]
 8019f4a:	2b02      	cmp	r3, #2
 8019f4c:	d102      	bne.n	8019f54 <tu_edpt_validate+0xf0>
 8019f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019f52:	e000      	b.n	8019f56 <tu_edpt_validate+0xf2>
 8019f54:	2340      	movs	r3, #64	@ 0x40
 8019f56:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8019f58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f5c:	429a      	cmp	r2, r3
 8019f5e:	d910      	bls.n	8019f82 <tu_edpt_validate+0x11e>
 8019f60:	4b0c      	ldr	r3, [pc, #48]	@ (8019f94 <tu_edpt_validate+0x130>)
 8019f62:	623b      	str	r3, [r7, #32]
 8019f64:	6a3b      	ldr	r3, [r7, #32]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	f003 0301 	and.w	r3, r3, #1
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d000      	beq.n	8019f72 <tu_edpt_validate+0x10e>
 8019f70:	be00      	bkpt	0x0000
 8019f72:	2300      	movs	r3, #0
 8019f74:	e007      	b.n	8019f86 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 8019f76:	2300      	movs	r3, #0
 8019f78:	e005      	b.n	8019f86 <tu_edpt_validate+0x122>
      break;
 8019f7a:	bf00      	nop
 8019f7c:	e002      	b.n	8019f84 <tu_edpt_validate+0x120>
      break;
 8019f7e:	bf00      	nop
 8019f80:	e000      	b.n	8019f84 <tu_edpt_validate+0x120>
      break;
 8019f82:	bf00      	nop
  }

  return true;
 8019f84:	2301      	movs	r3, #1
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	372c      	adds	r7, #44	@ 0x2c
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f90:	4770      	bx	lr
 8019f92:	bf00      	nop
 8019f94:	e000edf0 	.word	0xe000edf0

08019f98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b084      	sub	sp, #16
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8019fa2:	79fb      	ldrb	r3, [r7, #7]
 8019fa4:	4a08      	ldr	r2, [pc, #32]	@ (8019fc8 <disk_status+0x30>)
 8019fa6:	009b      	lsls	r3, r3, #2
 8019fa8:	4413      	add	r3, r2
 8019faa:	685b      	ldr	r3, [r3, #4]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	79fa      	ldrb	r2, [r7, #7]
 8019fb0:	4905      	ldr	r1, [pc, #20]	@ (8019fc8 <disk_status+0x30>)
 8019fb2:	440a      	add	r2, r1
 8019fb4:	7a12      	ldrb	r2, [r2, #8]
 8019fb6:	4610      	mov	r0, r2
 8019fb8:	4798      	blx	r3
 8019fba:	4603      	mov	r3, r0
 8019fbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8019fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	3710      	adds	r7, #16
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	24008920 	.word	0x24008920

08019fcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b084      	sub	sp, #16
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8019fda:	79fb      	ldrb	r3, [r7, #7]
 8019fdc:	4a0e      	ldr	r2, [pc, #56]	@ (801a018 <disk_initialize+0x4c>)
 8019fde:	5cd3      	ldrb	r3, [r2, r3]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d114      	bne.n	801a00e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019fe4:	79fb      	ldrb	r3, [r7, #7]
 8019fe6:	4a0c      	ldr	r2, [pc, #48]	@ (801a018 <disk_initialize+0x4c>)
 8019fe8:	009b      	lsls	r3, r3, #2
 8019fea:	4413      	add	r3, r2
 8019fec:	685b      	ldr	r3, [r3, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	79fa      	ldrb	r2, [r7, #7]
 8019ff2:	4909      	ldr	r1, [pc, #36]	@ (801a018 <disk_initialize+0x4c>)
 8019ff4:	440a      	add	r2, r1
 8019ff6:	7a12      	ldrb	r2, [r2, #8]
 8019ff8:	4610      	mov	r0, r2
 8019ffa:	4798      	blx	r3
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a000:	7bfb      	ldrb	r3, [r7, #15]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d103      	bne.n	801a00e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a006:	79fb      	ldrb	r3, [r7, #7]
 801a008:	4a03      	ldr	r2, [pc, #12]	@ (801a018 <disk_initialize+0x4c>)
 801a00a:	2101      	movs	r1, #1
 801a00c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a00e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a010:	4618      	mov	r0, r3
 801a012:	3710      	adds	r7, #16
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}
 801a018:	24008920 	.word	0x24008920

0801a01c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a01c:	b590      	push	{r4, r7, lr}
 801a01e:	b087      	sub	sp, #28
 801a020:	af00      	add	r7, sp, #0
 801a022:	60b9      	str	r1, [r7, #8]
 801a024:	607a      	str	r2, [r7, #4]
 801a026:	603b      	str	r3, [r7, #0]
 801a028:	4603      	mov	r3, r0
 801a02a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a02c:	7bfb      	ldrb	r3, [r7, #15]
 801a02e:	4a0a      	ldr	r2, [pc, #40]	@ (801a058 <disk_read+0x3c>)
 801a030:	009b      	lsls	r3, r3, #2
 801a032:	4413      	add	r3, r2
 801a034:	685b      	ldr	r3, [r3, #4]
 801a036:	689c      	ldr	r4, [r3, #8]
 801a038:	7bfb      	ldrb	r3, [r7, #15]
 801a03a:	4a07      	ldr	r2, [pc, #28]	@ (801a058 <disk_read+0x3c>)
 801a03c:	4413      	add	r3, r2
 801a03e:	7a18      	ldrb	r0, [r3, #8]
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	687a      	ldr	r2, [r7, #4]
 801a044:	68b9      	ldr	r1, [r7, #8]
 801a046:	47a0      	blx	r4
 801a048:	4603      	mov	r3, r0
 801a04a:	75fb      	strb	r3, [r7, #23]
  return res;
 801a04c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a04e:	4618      	mov	r0, r3
 801a050:	371c      	adds	r7, #28
 801a052:	46bd      	mov	sp, r7
 801a054:	bd90      	pop	{r4, r7, pc}
 801a056:	bf00      	nop
 801a058:	24008920 	.word	0x24008920

0801a05c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a05c:	b590      	push	{r4, r7, lr}
 801a05e:	b087      	sub	sp, #28
 801a060:	af00      	add	r7, sp, #0
 801a062:	60b9      	str	r1, [r7, #8]
 801a064:	607a      	str	r2, [r7, #4]
 801a066:	603b      	str	r3, [r7, #0]
 801a068:	4603      	mov	r3, r0
 801a06a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a06c:	7bfb      	ldrb	r3, [r7, #15]
 801a06e:	4a0a      	ldr	r2, [pc, #40]	@ (801a098 <disk_write+0x3c>)
 801a070:	009b      	lsls	r3, r3, #2
 801a072:	4413      	add	r3, r2
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	68dc      	ldr	r4, [r3, #12]
 801a078:	7bfb      	ldrb	r3, [r7, #15]
 801a07a:	4a07      	ldr	r2, [pc, #28]	@ (801a098 <disk_write+0x3c>)
 801a07c:	4413      	add	r3, r2
 801a07e:	7a18      	ldrb	r0, [r3, #8]
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	687a      	ldr	r2, [r7, #4]
 801a084:	68b9      	ldr	r1, [r7, #8]
 801a086:	47a0      	blx	r4
 801a088:	4603      	mov	r3, r0
 801a08a:	75fb      	strb	r3, [r7, #23]
  return res;
 801a08c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a08e:	4618      	mov	r0, r3
 801a090:	371c      	adds	r7, #28
 801a092:	46bd      	mov	sp, r7
 801a094:	bd90      	pop	{r4, r7, pc}
 801a096:	bf00      	nop
 801a098:	24008920 	.word	0x24008920

0801a09c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b084      	sub	sp, #16
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	603a      	str	r2, [r7, #0]
 801a0a6:	71fb      	strb	r3, [r7, #7]
 801a0a8:	460b      	mov	r3, r1
 801a0aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a0ac:	79fb      	ldrb	r3, [r7, #7]
 801a0ae:	4a09      	ldr	r2, [pc, #36]	@ (801a0d4 <disk_ioctl+0x38>)
 801a0b0:	009b      	lsls	r3, r3, #2
 801a0b2:	4413      	add	r3, r2
 801a0b4:	685b      	ldr	r3, [r3, #4]
 801a0b6:	691b      	ldr	r3, [r3, #16]
 801a0b8:	79fa      	ldrb	r2, [r7, #7]
 801a0ba:	4906      	ldr	r1, [pc, #24]	@ (801a0d4 <disk_ioctl+0x38>)
 801a0bc:	440a      	add	r2, r1
 801a0be:	7a10      	ldrb	r0, [r2, #8]
 801a0c0:	79b9      	ldrb	r1, [r7, #6]
 801a0c2:	683a      	ldr	r2, [r7, #0]
 801a0c4:	4798      	blx	r3
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	73fb      	strb	r3, [r7, #15]
  return res;
 801a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	3710      	adds	r7, #16
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bd80      	pop	{r7, pc}
 801a0d4:	24008920 	.word	0x24008920

0801a0d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a0d8:	b480      	push	{r7}
 801a0da:	b085      	sub	sp, #20
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	3301      	adds	r3, #1
 801a0e4:	781b      	ldrb	r3, [r3, #0]
 801a0e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a0e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a0ec:	021b      	lsls	r3, r3, #8
 801a0ee:	b21a      	sxth	r2, r3
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	781b      	ldrb	r3, [r3, #0]
 801a0f4:	b21b      	sxth	r3, r3
 801a0f6:	4313      	orrs	r3, r2
 801a0f8:	b21b      	sxth	r3, r3
 801a0fa:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a0fc:	89fb      	ldrh	r3, [r7, #14]
}
 801a0fe:	4618      	mov	r0, r3
 801a100:	3714      	adds	r7, #20
 801a102:	46bd      	mov	sp, r7
 801a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a108:	4770      	bx	lr

0801a10a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a10a:	b480      	push	{r7}
 801a10c:	b085      	sub	sp, #20
 801a10e:	af00      	add	r7, sp, #0
 801a110:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	3303      	adds	r3, #3
 801a116:	781b      	ldrb	r3, [r3, #0]
 801a118:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	021b      	lsls	r3, r3, #8
 801a11e:	687a      	ldr	r2, [r7, #4]
 801a120:	3202      	adds	r2, #2
 801a122:	7812      	ldrb	r2, [r2, #0]
 801a124:	4313      	orrs	r3, r2
 801a126:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	021b      	lsls	r3, r3, #8
 801a12c:	687a      	ldr	r2, [r7, #4]
 801a12e:	3201      	adds	r2, #1
 801a130:	7812      	ldrb	r2, [r2, #0]
 801a132:	4313      	orrs	r3, r2
 801a134:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	021b      	lsls	r3, r3, #8
 801a13a:	687a      	ldr	r2, [r7, #4]
 801a13c:	7812      	ldrb	r2, [r2, #0]
 801a13e:	4313      	orrs	r3, r2
 801a140:	60fb      	str	r3, [r7, #12]
	return rv;
 801a142:	68fb      	ldr	r3, [r7, #12]
}
 801a144:	4618      	mov	r0, r3
 801a146:	3714      	adds	r7, #20
 801a148:	46bd      	mov	sp, r7
 801a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14e:	4770      	bx	lr

0801a150 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a150:	b480      	push	{r7}
 801a152:	b083      	sub	sp, #12
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	460b      	mov	r3, r1
 801a15a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	1c5a      	adds	r2, r3, #1
 801a160:	607a      	str	r2, [r7, #4]
 801a162:	887a      	ldrh	r2, [r7, #2]
 801a164:	b2d2      	uxtb	r2, r2
 801a166:	701a      	strb	r2, [r3, #0]
 801a168:	887b      	ldrh	r3, [r7, #2]
 801a16a:	0a1b      	lsrs	r3, r3, #8
 801a16c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	1c5a      	adds	r2, r3, #1
 801a172:	607a      	str	r2, [r7, #4]
 801a174:	887a      	ldrh	r2, [r7, #2]
 801a176:	b2d2      	uxtb	r2, r2
 801a178:	701a      	strb	r2, [r3, #0]
}
 801a17a:	bf00      	nop
 801a17c:	370c      	adds	r7, #12
 801a17e:	46bd      	mov	sp, r7
 801a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a184:	4770      	bx	lr

0801a186 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a186:	b480      	push	{r7}
 801a188:	b083      	sub	sp, #12
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	6078      	str	r0, [r7, #4]
 801a18e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	1c5a      	adds	r2, r3, #1
 801a194:	607a      	str	r2, [r7, #4]
 801a196:	683a      	ldr	r2, [r7, #0]
 801a198:	b2d2      	uxtb	r2, r2
 801a19a:	701a      	strb	r2, [r3, #0]
 801a19c:	683b      	ldr	r3, [r7, #0]
 801a19e:	0a1b      	lsrs	r3, r3, #8
 801a1a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	1c5a      	adds	r2, r3, #1
 801a1a6:	607a      	str	r2, [r7, #4]
 801a1a8:	683a      	ldr	r2, [r7, #0]
 801a1aa:	b2d2      	uxtb	r2, r2
 801a1ac:	701a      	strb	r2, [r3, #0]
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	0a1b      	lsrs	r3, r3, #8
 801a1b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	1c5a      	adds	r2, r3, #1
 801a1b8:	607a      	str	r2, [r7, #4]
 801a1ba:	683a      	ldr	r2, [r7, #0]
 801a1bc:	b2d2      	uxtb	r2, r2
 801a1be:	701a      	strb	r2, [r3, #0]
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	0a1b      	lsrs	r3, r3, #8
 801a1c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	1c5a      	adds	r2, r3, #1
 801a1ca:	607a      	str	r2, [r7, #4]
 801a1cc:	683a      	ldr	r2, [r7, #0]
 801a1ce:	b2d2      	uxtb	r2, r2
 801a1d0:	701a      	strb	r2, [r3, #0]
}
 801a1d2:	bf00      	nop
 801a1d4:	370c      	adds	r7, #12
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1dc:	4770      	bx	lr

0801a1de <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a1de:	b480      	push	{r7}
 801a1e0:	b087      	sub	sp, #28
 801a1e2:	af00      	add	r7, sp, #0
 801a1e4:	60f8      	str	r0, [r7, #12]
 801a1e6:	60b9      	str	r1, [r7, #8]
 801a1e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d00d      	beq.n	801a214 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a1f8:	693a      	ldr	r2, [r7, #16]
 801a1fa:	1c53      	adds	r3, r2, #1
 801a1fc:	613b      	str	r3, [r7, #16]
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	1c59      	adds	r1, r3, #1
 801a202:	6179      	str	r1, [r7, #20]
 801a204:	7812      	ldrb	r2, [r2, #0]
 801a206:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	3b01      	subs	r3, #1
 801a20c:	607b      	str	r3, [r7, #4]
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d1f1      	bne.n	801a1f8 <mem_cpy+0x1a>
	}
}
 801a214:	bf00      	nop
 801a216:	371c      	adds	r7, #28
 801a218:	46bd      	mov	sp, r7
 801a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21e:	4770      	bx	lr

0801a220 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a220:	b480      	push	{r7}
 801a222:	b087      	sub	sp, #28
 801a224:	af00      	add	r7, sp, #0
 801a226:	60f8      	str	r0, [r7, #12]
 801a228:	60b9      	str	r1, [r7, #8]
 801a22a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	1c5a      	adds	r2, r3, #1
 801a234:	617a      	str	r2, [r7, #20]
 801a236:	68ba      	ldr	r2, [r7, #8]
 801a238:	b2d2      	uxtb	r2, r2
 801a23a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	3b01      	subs	r3, #1
 801a240:	607b      	str	r3, [r7, #4]
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d1f3      	bne.n	801a230 <mem_set+0x10>
}
 801a248:	bf00      	nop
 801a24a:	bf00      	nop
 801a24c:	371c      	adds	r7, #28
 801a24e:	46bd      	mov	sp, r7
 801a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a254:	4770      	bx	lr

0801a256 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a256:	b480      	push	{r7}
 801a258:	b089      	sub	sp, #36	@ 0x24
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	60f8      	str	r0, [r7, #12]
 801a25e:	60b9      	str	r1, [r7, #8]
 801a260:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	61fb      	str	r3, [r7, #28]
 801a266:	68bb      	ldr	r3, [r7, #8]
 801a268:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a26a:	2300      	movs	r3, #0
 801a26c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a26e:	69fb      	ldr	r3, [r7, #28]
 801a270:	1c5a      	adds	r2, r3, #1
 801a272:	61fa      	str	r2, [r7, #28]
 801a274:	781b      	ldrb	r3, [r3, #0]
 801a276:	4619      	mov	r1, r3
 801a278:	69bb      	ldr	r3, [r7, #24]
 801a27a:	1c5a      	adds	r2, r3, #1
 801a27c:	61ba      	str	r2, [r7, #24]
 801a27e:	781b      	ldrb	r3, [r3, #0]
 801a280:	1acb      	subs	r3, r1, r3
 801a282:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	3b01      	subs	r3, #1
 801a288:	607b      	str	r3, [r7, #4]
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d002      	beq.n	801a296 <mem_cmp+0x40>
 801a290:	697b      	ldr	r3, [r7, #20]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d0eb      	beq.n	801a26e <mem_cmp+0x18>

	return r;
 801a296:	697b      	ldr	r3, [r7, #20]
}
 801a298:	4618      	mov	r0, r3
 801a29a:	3724      	adds	r7, #36	@ 0x24
 801a29c:	46bd      	mov	sp, r7
 801a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a2:	4770      	bx	lr

0801a2a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a2a4:	b480      	push	{r7}
 801a2a6:	b083      	sub	sp, #12
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
 801a2ac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a2ae:	e002      	b.n	801a2b6 <chk_chr+0x12>
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	607b      	str	r3, [r7, #4]
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	781b      	ldrb	r3, [r3, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d005      	beq.n	801a2ca <chk_chr+0x26>
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	461a      	mov	r2, r3
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	4293      	cmp	r3, r2
 801a2c8:	d1f2      	bne.n	801a2b0 <chk_chr+0xc>
	return *str;
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	781b      	ldrb	r3, [r3, #0]
}
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	370c      	adds	r7, #12
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d8:	4770      	bx	lr
	...

0801a2dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a2dc:	b480      	push	{r7}
 801a2de:	b085      	sub	sp, #20
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
 801a2e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	60bb      	str	r3, [r7, #8]
 801a2ea:	68bb      	ldr	r3, [r7, #8]
 801a2ec:	60fb      	str	r3, [r7, #12]
 801a2ee:	e029      	b.n	801a344 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a2f0:	4a27      	ldr	r2, [pc, #156]	@ (801a390 <chk_lock+0xb4>)
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	011b      	lsls	r3, r3, #4
 801a2f6:	4413      	add	r3, r2
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d01d      	beq.n	801a33a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a2fe:	4a24      	ldr	r2, [pc, #144]	@ (801a390 <chk_lock+0xb4>)
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	011b      	lsls	r3, r3, #4
 801a304:	4413      	add	r3, r2
 801a306:	681a      	ldr	r2, [r3, #0]
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d116      	bne.n	801a33e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a310:	4a1f      	ldr	r2, [pc, #124]	@ (801a390 <chk_lock+0xb4>)
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	011b      	lsls	r3, r3, #4
 801a316:	4413      	add	r3, r2
 801a318:	3304      	adds	r3, #4
 801a31a:	681a      	ldr	r2, [r3, #0]
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a320:	429a      	cmp	r2, r3
 801a322:	d10c      	bne.n	801a33e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a324:	4a1a      	ldr	r2, [pc, #104]	@ (801a390 <chk_lock+0xb4>)
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	011b      	lsls	r3, r3, #4
 801a32a:	4413      	add	r3, r2
 801a32c:	3308      	adds	r3, #8
 801a32e:	681a      	ldr	r2, [r3, #0]
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a334:	429a      	cmp	r2, r3
 801a336:	d102      	bne.n	801a33e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a338:	e007      	b.n	801a34a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a33a:	2301      	movs	r3, #1
 801a33c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	3301      	adds	r3, #1
 801a342:	60fb      	str	r3, [r7, #12]
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	2b03      	cmp	r3, #3
 801a348:	d9d2      	bls.n	801a2f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	2b04      	cmp	r3, #4
 801a34e:	d109      	bne.n	801a364 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d102      	bne.n	801a35c <chk_lock+0x80>
 801a356:	683b      	ldr	r3, [r7, #0]
 801a358:	2b02      	cmp	r3, #2
 801a35a:	d101      	bne.n	801a360 <chk_lock+0x84>
 801a35c:	2300      	movs	r3, #0
 801a35e:	e010      	b.n	801a382 <chk_lock+0xa6>
 801a360:	2312      	movs	r3, #18
 801a362:	e00e      	b.n	801a382 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d108      	bne.n	801a37c <chk_lock+0xa0>
 801a36a:	4a09      	ldr	r2, [pc, #36]	@ (801a390 <chk_lock+0xb4>)
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	011b      	lsls	r3, r3, #4
 801a370:	4413      	add	r3, r2
 801a372:	330c      	adds	r3, #12
 801a374:	881b      	ldrh	r3, [r3, #0]
 801a376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a37a:	d101      	bne.n	801a380 <chk_lock+0xa4>
 801a37c:	2310      	movs	r3, #16
 801a37e:	e000      	b.n	801a382 <chk_lock+0xa6>
 801a380:	2300      	movs	r3, #0
}
 801a382:	4618      	mov	r0, r3
 801a384:	3714      	adds	r7, #20
 801a386:	46bd      	mov	sp, r7
 801a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38c:	4770      	bx	lr
 801a38e:	bf00      	nop
 801a390:	240088e0 	.word	0x240088e0

0801a394 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a394:	b480      	push	{r7}
 801a396:	b083      	sub	sp, #12
 801a398:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a39a:	2300      	movs	r3, #0
 801a39c:	607b      	str	r3, [r7, #4]
 801a39e:	e002      	b.n	801a3a6 <enq_lock+0x12>
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	607b      	str	r3, [r7, #4]
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2b03      	cmp	r3, #3
 801a3aa:	d806      	bhi.n	801a3ba <enq_lock+0x26>
 801a3ac:	4a09      	ldr	r2, [pc, #36]	@ (801a3d4 <enq_lock+0x40>)
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	011b      	lsls	r3, r3, #4
 801a3b2:	4413      	add	r3, r2
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d1f2      	bne.n	801a3a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2b04      	cmp	r3, #4
 801a3be:	bf14      	ite	ne
 801a3c0:	2301      	movne	r3, #1
 801a3c2:	2300      	moveq	r3, #0
 801a3c4:	b2db      	uxtb	r3, r3
}
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	370c      	adds	r7, #12
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d0:	4770      	bx	lr
 801a3d2:	bf00      	nop
 801a3d4:	240088e0 	.word	0x240088e0

0801a3d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a3d8:	b480      	push	{r7}
 801a3da:	b085      	sub	sp, #20
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
 801a3e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	60fb      	str	r3, [r7, #12]
 801a3e6:	e01f      	b.n	801a428 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a3e8:	4a41      	ldr	r2, [pc, #260]	@ (801a4f0 <inc_lock+0x118>)
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	011b      	lsls	r3, r3, #4
 801a3ee:	4413      	add	r3, r2
 801a3f0:	681a      	ldr	r2, [r3, #0]
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	429a      	cmp	r2, r3
 801a3f8:	d113      	bne.n	801a422 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a3fa:	4a3d      	ldr	r2, [pc, #244]	@ (801a4f0 <inc_lock+0x118>)
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	011b      	lsls	r3, r3, #4
 801a400:	4413      	add	r3, r2
 801a402:	3304      	adds	r3, #4
 801a404:	681a      	ldr	r2, [r3, #0]
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a40a:	429a      	cmp	r2, r3
 801a40c:	d109      	bne.n	801a422 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a40e:	4a38      	ldr	r2, [pc, #224]	@ (801a4f0 <inc_lock+0x118>)
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	011b      	lsls	r3, r3, #4
 801a414:	4413      	add	r3, r2
 801a416:	3308      	adds	r3, #8
 801a418:	681a      	ldr	r2, [r3, #0]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801a41e:	429a      	cmp	r2, r3
 801a420:	d006      	beq.n	801a430 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	3301      	adds	r3, #1
 801a426:	60fb      	str	r3, [r7, #12]
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	2b03      	cmp	r3, #3
 801a42c:	d9dc      	bls.n	801a3e8 <inc_lock+0x10>
 801a42e:	e000      	b.n	801a432 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801a430:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	2b04      	cmp	r3, #4
 801a436:	d132      	bne.n	801a49e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a438:	2300      	movs	r3, #0
 801a43a:	60fb      	str	r3, [r7, #12]
 801a43c:	e002      	b.n	801a444 <inc_lock+0x6c>
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	3301      	adds	r3, #1
 801a442:	60fb      	str	r3, [r7, #12]
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	2b03      	cmp	r3, #3
 801a448:	d806      	bhi.n	801a458 <inc_lock+0x80>
 801a44a:	4a29      	ldr	r2, [pc, #164]	@ (801a4f0 <inc_lock+0x118>)
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	011b      	lsls	r3, r3, #4
 801a450:	4413      	add	r3, r2
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d1f2      	bne.n	801a43e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	2b04      	cmp	r3, #4
 801a45c:	d101      	bne.n	801a462 <inc_lock+0x8a>
 801a45e:	2300      	movs	r3, #0
 801a460:	e040      	b.n	801a4e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681a      	ldr	r2, [r3, #0]
 801a466:	4922      	ldr	r1, [pc, #136]	@ (801a4f0 <inc_lock+0x118>)
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	011b      	lsls	r3, r3, #4
 801a46c:	440b      	add	r3, r1
 801a46e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	689a      	ldr	r2, [r3, #8]
 801a474:	491e      	ldr	r1, [pc, #120]	@ (801a4f0 <inc_lock+0x118>)
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	011b      	lsls	r3, r3, #4
 801a47a:	440b      	add	r3, r1
 801a47c:	3304      	adds	r3, #4
 801a47e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	695a      	ldr	r2, [r3, #20]
 801a484:	491a      	ldr	r1, [pc, #104]	@ (801a4f0 <inc_lock+0x118>)
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	011b      	lsls	r3, r3, #4
 801a48a:	440b      	add	r3, r1
 801a48c:	3308      	adds	r3, #8
 801a48e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801a490:	4a17      	ldr	r2, [pc, #92]	@ (801a4f0 <inc_lock+0x118>)
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	011b      	lsls	r3, r3, #4
 801a496:	4413      	add	r3, r2
 801a498:	330c      	adds	r3, #12
 801a49a:	2200      	movs	r2, #0
 801a49c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d009      	beq.n	801a4b8 <inc_lock+0xe0>
 801a4a4:	4a12      	ldr	r2, [pc, #72]	@ (801a4f0 <inc_lock+0x118>)
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	011b      	lsls	r3, r3, #4
 801a4aa:	4413      	add	r3, r2
 801a4ac:	330c      	adds	r3, #12
 801a4ae:	881b      	ldrh	r3, [r3, #0]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d001      	beq.n	801a4b8 <inc_lock+0xe0>
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	e015      	b.n	801a4e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d108      	bne.n	801a4d0 <inc_lock+0xf8>
 801a4be:	4a0c      	ldr	r2, [pc, #48]	@ (801a4f0 <inc_lock+0x118>)
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	011b      	lsls	r3, r3, #4
 801a4c4:	4413      	add	r3, r2
 801a4c6:	330c      	adds	r3, #12
 801a4c8:	881b      	ldrh	r3, [r3, #0]
 801a4ca:	3301      	adds	r3, #1
 801a4cc:	b29a      	uxth	r2, r3
 801a4ce:	e001      	b.n	801a4d4 <inc_lock+0xfc>
 801a4d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a4d4:	4906      	ldr	r1, [pc, #24]	@ (801a4f0 <inc_lock+0x118>)
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	011b      	lsls	r3, r3, #4
 801a4da:	440b      	add	r3, r1
 801a4dc:	330c      	adds	r3, #12
 801a4de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	3301      	adds	r3, #1
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3714      	adds	r7, #20
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ee:	4770      	bx	lr
 801a4f0:	240088e0 	.word	0x240088e0

0801a4f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801a4f4:	b480      	push	{r7}
 801a4f6:	b085      	sub	sp, #20
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	3b01      	subs	r3, #1
 801a500:	607b      	str	r3, [r7, #4]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	2b03      	cmp	r3, #3
 801a506:	d825      	bhi.n	801a554 <dec_lock+0x60>
		n = Files[i].ctr;
 801a508:	4a17      	ldr	r2, [pc, #92]	@ (801a568 <dec_lock+0x74>)
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	011b      	lsls	r3, r3, #4
 801a50e:	4413      	add	r3, r2
 801a510:	330c      	adds	r3, #12
 801a512:	881b      	ldrh	r3, [r3, #0]
 801a514:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801a516:	89fb      	ldrh	r3, [r7, #14]
 801a518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a51c:	d101      	bne.n	801a522 <dec_lock+0x2e>
 801a51e:	2300      	movs	r3, #0
 801a520:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801a522:	89fb      	ldrh	r3, [r7, #14]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d002      	beq.n	801a52e <dec_lock+0x3a>
 801a528:	89fb      	ldrh	r3, [r7, #14]
 801a52a:	3b01      	subs	r3, #1
 801a52c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801a52e:	4a0e      	ldr	r2, [pc, #56]	@ (801a568 <dec_lock+0x74>)
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	011b      	lsls	r3, r3, #4
 801a534:	4413      	add	r3, r2
 801a536:	330c      	adds	r3, #12
 801a538:	89fa      	ldrh	r2, [r7, #14]
 801a53a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801a53c:	89fb      	ldrh	r3, [r7, #14]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d105      	bne.n	801a54e <dec_lock+0x5a>
 801a542:	4a09      	ldr	r2, [pc, #36]	@ (801a568 <dec_lock+0x74>)
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	011b      	lsls	r3, r3, #4
 801a548:	4413      	add	r3, r2
 801a54a:	2200      	movs	r2, #0
 801a54c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801a54e:	2300      	movs	r3, #0
 801a550:	737b      	strb	r3, [r7, #13]
 801a552:	e001      	b.n	801a558 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801a554:	2302      	movs	r3, #2
 801a556:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801a558:	7b7b      	ldrb	r3, [r7, #13]
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	3714      	adds	r7, #20
 801a55e:	46bd      	mov	sp, r7
 801a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a564:	4770      	bx	lr
 801a566:	bf00      	nop
 801a568:	240088e0 	.word	0x240088e0

0801a56c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801a56c:	b480      	push	{r7}
 801a56e:	b085      	sub	sp, #20
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801a574:	2300      	movs	r3, #0
 801a576:	60fb      	str	r3, [r7, #12]
 801a578:	e010      	b.n	801a59c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a57a:	4a0d      	ldr	r2, [pc, #52]	@ (801a5b0 <clear_lock+0x44>)
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	011b      	lsls	r3, r3, #4
 801a580:	4413      	add	r3, r2
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	687a      	ldr	r2, [r7, #4]
 801a586:	429a      	cmp	r2, r3
 801a588:	d105      	bne.n	801a596 <clear_lock+0x2a>
 801a58a:	4a09      	ldr	r2, [pc, #36]	@ (801a5b0 <clear_lock+0x44>)
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	011b      	lsls	r3, r3, #4
 801a590:	4413      	add	r3, r2
 801a592:	2200      	movs	r2, #0
 801a594:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	3301      	adds	r3, #1
 801a59a:	60fb      	str	r3, [r7, #12]
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	2b03      	cmp	r3, #3
 801a5a0:	d9eb      	bls.n	801a57a <clear_lock+0xe>
	}
}
 801a5a2:	bf00      	nop
 801a5a4:	bf00      	nop
 801a5a6:	3714      	adds	r7, #20
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ae:	4770      	bx	lr
 801a5b0:	240088e0 	.word	0x240088e0

0801a5b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b086      	sub	sp, #24
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801a5bc:	2300      	movs	r3, #0
 801a5be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	78db      	ldrb	r3, [r3, #3]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d034      	beq.n	801a632 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	7858      	ldrb	r0, [r3, #1]
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a5d8:	2301      	movs	r3, #1
 801a5da:	697a      	ldr	r2, [r7, #20]
 801a5dc:	f7ff fd3e 	bl	801a05c <disk_write>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d002      	beq.n	801a5ec <sync_window+0x38>
			res = FR_DISK_ERR;
 801a5e6:	2301      	movs	r3, #1
 801a5e8:	73fb      	strb	r3, [r7, #15]
 801a5ea:	e022      	b.n	801a632 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6a1b      	ldr	r3, [r3, #32]
 801a5f6:	697a      	ldr	r2, [r7, #20]
 801a5f8:	1ad2      	subs	r2, r2, r3
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	699b      	ldr	r3, [r3, #24]
 801a5fe:	429a      	cmp	r2, r3
 801a600:	d217      	bcs.n	801a632 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	789b      	ldrb	r3, [r3, #2]
 801a606:	613b      	str	r3, [r7, #16]
 801a608:	e010      	b.n	801a62c <sync_window+0x78>
					wsect += fs->fsize;
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	699b      	ldr	r3, [r3, #24]
 801a60e:	697a      	ldr	r2, [r7, #20]
 801a610:	4413      	add	r3, r2
 801a612:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	7858      	ldrb	r0, [r3, #1]
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a61e:	2301      	movs	r3, #1
 801a620:	697a      	ldr	r2, [r7, #20]
 801a622:	f7ff fd1b 	bl	801a05c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a626:	693b      	ldr	r3, [r7, #16]
 801a628:	3b01      	subs	r3, #1
 801a62a:	613b      	str	r3, [r7, #16]
 801a62c:	693b      	ldr	r3, [r7, #16]
 801a62e:	2b01      	cmp	r3, #1
 801a630:	d8eb      	bhi.n	801a60a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801a632:	7bfb      	ldrb	r3, [r7, #15]
}
 801a634:	4618      	mov	r0, r3
 801a636:	3718      	adds	r7, #24
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}

0801a63c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b084      	sub	sp, #16
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801a646:	2300      	movs	r3, #0
 801a648:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a64e:	683a      	ldr	r2, [r7, #0]
 801a650:	429a      	cmp	r2, r3
 801a652:	d01b      	beq.n	801a68c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801a654:	6878      	ldr	r0, [r7, #4]
 801a656:	f7ff ffad 	bl	801a5b4 <sync_window>
 801a65a:	4603      	mov	r3, r0
 801a65c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801a65e:	7bfb      	ldrb	r3, [r7, #15]
 801a660:	2b00      	cmp	r3, #0
 801a662:	d113      	bne.n	801a68c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	7858      	ldrb	r0, [r3, #1]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a66e:	2301      	movs	r3, #1
 801a670:	683a      	ldr	r2, [r7, #0]
 801a672:	f7ff fcd3 	bl	801a01c <disk_read>
 801a676:	4603      	mov	r3, r0
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d004      	beq.n	801a686 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801a67c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a680:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801a682:	2301      	movs	r3, #1
 801a684:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	683a      	ldr	r2, [r7, #0]
 801a68a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a68e:	4618      	mov	r0, r3
 801a690:	3710      	adds	r7, #16
 801a692:	46bd      	mov	sp, r7
 801a694:	bd80      	pop	{r7, pc}
	...

0801a698 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b084      	sub	sp, #16
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801a6a0:	6878      	ldr	r0, [r7, #4]
 801a6a2:	f7ff ff87 	bl	801a5b4 <sync_window>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801a6aa:	7bfb      	ldrb	r3, [r7, #15]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d158      	bne.n	801a762 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	781b      	ldrb	r3, [r3, #0]
 801a6b4:	2b03      	cmp	r3, #3
 801a6b6:	d148      	bne.n	801a74a <sync_fs+0xb2>
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	791b      	ldrb	r3, [r3, #4]
 801a6bc:	2b01      	cmp	r3, #1
 801a6be:	d144      	bne.n	801a74a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	3330      	adds	r3, #48	@ 0x30
 801a6c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a6c8:	2100      	movs	r1, #0
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f7ff fda8 	bl	801a220 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	3330      	adds	r3, #48	@ 0x30
 801a6d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801a6d8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f7ff fd37 	bl	801a150 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	3330      	adds	r3, #48	@ 0x30
 801a6e6:	4921      	ldr	r1, [pc, #132]	@ (801a76c <sync_fs+0xd4>)
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f7ff fd4c 	bl	801a186 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	3330      	adds	r3, #48	@ 0x30
 801a6f2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801a6f6:	491e      	ldr	r1, [pc, #120]	@ (801a770 <sync_fs+0xd8>)
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	f7ff fd44 	bl	801a186 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	3330      	adds	r3, #48	@ 0x30
 801a702:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	691b      	ldr	r3, [r3, #16]
 801a70a:	4619      	mov	r1, r3
 801a70c:	4610      	mov	r0, r2
 801a70e:	f7ff fd3a 	bl	801a186 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	3330      	adds	r3, #48	@ 0x30
 801a716:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	68db      	ldr	r3, [r3, #12]
 801a71e:	4619      	mov	r1, r3
 801a720:	4610      	mov	r0, r2
 801a722:	f7ff fd30 	bl	801a186 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	69db      	ldr	r3, [r3, #28]
 801a72a:	1c5a      	adds	r2, r3, #1
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	7858      	ldrb	r0, [r3, #1]
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a73e:	2301      	movs	r3, #1
 801a740:	f7ff fc8c 	bl	801a05c <disk_write>
			fs->fsi_flag = 0;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	2200      	movs	r2, #0
 801a748:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	785b      	ldrb	r3, [r3, #1]
 801a74e:	2200      	movs	r2, #0
 801a750:	2100      	movs	r1, #0
 801a752:	4618      	mov	r0, r3
 801a754:	f7ff fca2 	bl	801a09c <disk_ioctl>
 801a758:	4603      	mov	r3, r0
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d001      	beq.n	801a762 <sync_fs+0xca>
 801a75e:	2301      	movs	r3, #1
 801a760:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801a762:	7bfb      	ldrb	r3, [r7, #15]
}
 801a764:	4618      	mov	r0, r3
 801a766:	3710      	adds	r7, #16
 801a768:	46bd      	mov	sp, r7
 801a76a:	bd80      	pop	{r7, pc}
 801a76c:	41615252 	.word	0x41615252
 801a770:	61417272 	.word	0x61417272

0801a774 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801a774:	b480      	push	{r7}
 801a776:	b083      	sub	sp, #12
 801a778:	af00      	add	r7, sp, #0
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	3b02      	subs	r3, #2
 801a782:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	695b      	ldr	r3, [r3, #20]
 801a788:	3b02      	subs	r3, #2
 801a78a:	683a      	ldr	r2, [r7, #0]
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d301      	bcc.n	801a794 <clust2sect+0x20>
 801a790:	2300      	movs	r3, #0
 801a792:	e008      	b.n	801a7a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	895b      	ldrh	r3, [r3, #10]
 801a798:	461a      	mov	r2, r3
 801a79a:	683b      	ldr	r3, [r7, #0]
 801a79c:	fb03 f202 	mul.w	r2, r3, r2
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7a4:	4413      	add	r3, r2
}
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	370c      	adds	r7, #12
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b0:	4770      	bx	lr

0801a7b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801a7b2:	b580      	push	{r7, lr}
 801a7b4:	b086      	sub	sp, #24
 801a7b6:	af00      	add	r7, sp, #0
 801a7b8:	6078      	str	r0, [r7, #4]
 801a7ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	d904      	bls.n	801a7d2 <get_fat+0x20>
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	695b      	ldr	r3, [r3, #20]
 801a7cc:	683a      	ldr	r2, [r7, #0]
 801a7ce:	429a      	cmp	r2, r3
 801a7d0:	d302      	bcc.n	801a7d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 801a7d2:	2301      	movs	r3, #1
 801a7d4:	617b      	str	r3, [r7, #20]
 801a7d6:	e08e      	b.n	801a8f6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801a7d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a7dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	2b03      	cmp	r3, #3
 801a7e4:	d061      	beq.n	801a8aa <get_fat+0xf8>
 801a7e6:	2b03      	cmp	r3, #3
 801a7e8:	dc7b      	bgt.n	801a8e2 <get_fat+0x130>
 801a7ea:	2b01      	cmp	r3, #1
 801a7ec:	d002      	beq.n	801a7f4 <get_fat+0x42>
 801a7ee:	2b02      	cmp	r3, #2
 801a7f0:	d041      	beq.n	801a876 <get_fat+0xc4>
 801a7f2:	e076      	b.n	801a8e2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	60fb      	str	r3, [r7, #12]
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	085b      	lsrs	r3, r3, #1
 801a7fc:	68fa      	ldr	r2, [r7, #12]
 801a7fe:	4413      	add	r3, r2
 801a800:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a802:	693b      	ldr	r3, [r7, #16]
 801a804:	6a1a      	ldr	r2, [r3, #32]
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	0a5b      	lsrs	r3, r3, #9
 801a80a:	4413      	add	r3, r2
 801a80c:	4619      	mov	r1, r3
 801a80e:	6938      	ldr	r0, [r7, #16]
 801a810:	f7ff ff14 	bl	801a63c <move_window>
 801a814:	4603      	mov	r3, r0
 801a816:	2b00      	cmp	r3, #0
 801a818:	d166      	bne.n	801a8e8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	1c5a      	adds	r2, r3, #1
 801a81e:	60fa      	str	r2, [r7, #12]
 801a820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a824:	693a      	ldr	r2, [r7, #16]
 801a826:	4413      	add	r3, r2
 801a828:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a82c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a82e:	693b      	ldr	r3, [r7, #16]
 801a830:	6a1a      	ldr	r2, [r3, #32]
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	0a5b      	lsrs	r3, r3, #9
 801a836:	4413      	add	r3, r2
 801a838:	4619      	mov	r1, r3
 801a83a:	6938      	ldr	r0, [r7, #16]
 801a83c:	f7ff fefe 	bl	801a63c <move_window>
 801a840:	4603      	mov	r3, r0
 801a842:	2b00      	cmp	r3, #0
 801a844:	d152      	bne.n	801a8ec <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a84c:	693a      	ldr	r2, [r7, #16]
 801a84e:	4413      	add	r3, r2
 801a850:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a854:	021b      	lsls	r3, r3, #8
 801a856:	68ba      	ldr	r2, [r7, #8]
 801a858:	4313      	orrs	r3, r2
 801a85a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	f003 0301 	and.w	r3, r3, #1
 801a862:	2b00      	cmp	r3, #0
 801a864:	d002      	beq.n	801a86c <get_fat+0xba>
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	091b      	lsrs	r3, r3, #4
 801a86a:	e002      	b.n	801a872 <get_fat+0xc0>
 801a86c:	68bb      	ldr	r3, [r7, #8]
 801a86e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a872:	617b      	str	r3, [r7, #20]
			break;
 801a874:	e03f      	b.n	801a8f6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	6a1a      	ldr	r2, [r3, #32]
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	0a1b      	lsrs	r3, r3, #8
 801a87e:	4413      	add	r3, r2
 801a880:	4619      	mov	r1, r3
 801a882:	6938      	ldr	r0, [r7, #16]
 801a884:	f7ff feda 	bl	801a63c <move_window>
 801a888:	4603      	mov	r3, r0
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d130      	bne.n	801a8f0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801a88e:	693b      	ldr	r3, [r7, #16]
 801a890:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a894:	683b      	ldr	r3, [r7, #0]
 801a896:	005b      	lsls	r3, r3, #1
 801a898:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801a89c:	4413      	add	r3, r2
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ff fc1a 	bl	801a0d8 <ld_word>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	617b      	str	r3, [r7, #20]
			break;
 801a8a8:	e025      	b.n	801a8f6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a8aa:	693b      	ldr	r3, [r7, #16]
 801a8ac:	6a1a      	ldr	r2, [r3, #32]
 801a8ae:	683b      	ldr	r3, [r7, #0]
 801a8b0:	09db      	lsrs	r3, r3, #7
 801a8b2:	4413      	add	r3, r2
 801a8b4:	4619      	mov	r1, r3
 801a8b6:	6938      	ldr	r0, [r7, #16]
 801a8b8:	f7ff fec0 	bl	801a63c <move_window>
 801a8bc:	4603      	mov	r3, r0
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d118      	bne.n	801a8f4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801a8c2:	693b      	ldr	r3, [r7, #16]
 801a8c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	009b      	lsls	r3, r3, #2
 801a8cc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801a8d0:	4413      	add	r3, r2
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7ff fc19 	bl	801a10a <ld_dword>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801a8de:	617b      	str	r3, [r7, #20]
			break;
 801a8e0:	e009      	b.n	801a8f6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801a8e2:	2301      	movs	r3, #1
 801a8e4:	617b      	str	r3, [r7, #20]
 801a8e6:	e006      	b.n	801a8f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a8e8:	bf00      	nop
 801a8ea:	e004      	b.n	801a8f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a8ec:	bf00      	nop
 801a8ee:	e002      	b.n	801a8f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a8f0:	bf00      	nop
 801a8f2:	e000      	b.n	801a8f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a8f4:	bf00      	nop
		}
	}

	return val;
 801a8f6:	697b      	ldr	r3, [r7, #20]
}
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	3718      	adds	r7, #24
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}

0801a900 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801a900:	b590      	push	{r4, r7, lr}
 801a902:	b089      	sub	sp, #36	@ 0x24
 801a904:	af00      	add	r7, sp, #0
 801a906:	60f8      	str	r0, [r7, #12]
 801a908:	60b9      	str	r1, [r7, #8]
 801a90a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801a90c:	2302      	movs	r3, #2
 801a90e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801a910:	68bb      	ldr	r3, [r7, #8]
 801a912:	2b01      	cmp	r3, #1
 801a914:	f240 80d9 	bls.w	801aaca <put_fat+0x1ca>
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	695b      	ldr	r3, [r3, #20]
 801a91c:	68ba      	ldr	r2, [r7, #8]
 801a91e:	429a      	cmp	r2, r3
 801a920:	f080 80d3 	bcs.w	801aaca <put_fat+0x1ca>
		switch (fs->fs_type) {
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	781b      	ldrb	r3, [r3, #0]
 801a928:	2b03      	cmp	r3, #3
 801a92a:	f000 8096 	beq.w	801aa5a <put_fat+0x15a>
 801a92e:	2b03      	cmp	r3, #3
 801a930:	f300 80cb 	bgt.w	801aaca <put_fat+0x1ca>
 801a934:	2b01      	cmp	r3, #1
 801a936:	d002      	beq.n	801a93e <put_fat+0x3e>
 801a938:	2b02      	cmp	r3, #2
 801a93a:	d06e      	beq.n	801aa1a <put_fat+0x11a>
 801a93c:	e0c5      	b.n	801aaca <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801a93e:	68bb      	ldr	r3, [r7, #8]
 801a940:	61bb      	str	r3, [r7, #24]
 801a942:	69bb      	ldr	r3, [r7, #24]
 801a944:	085b      	lsrs	r3, r3, #1
 801a946:	69ba      	ldr	r2, [r7, #24]
 801a948:	4413      	add	r3, r2
 801a94a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	6a1a      	ldr	r2, [r3, #32]
 801a950:	69bb      	ldr	r3, [r7, #24]
 801a952:	0a5b      	lsrs	r3, r3, #9
 801a954:	4413      	add	r3, r2
 801a956:	4619      	mov	r1, r3
 801a958:	68f8      	ldr	r0, [r7, #12]
 801a95a:	f7ff fe6f 	bl	801a63c <move_window>
 801a95e:	4603      	mov	r3, r0
 801a960:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a962:	7ffb      	ldrb	r3, [r7, #31]
 801a964:	2b00      	cmp	r3, #0
 801a966:	f040 80a9 	bne.w	801aabc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a970:	69bb      	ldr	r3, [r7, #24]
 801a972:	1c59      	adds	r1, r3, #1
 801a974:	61b9      	str	r1, [r7, #24]
 801a976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a97a:	4413      	add	r3, r2
 801a97c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	f003 0301 	and.w	r3, r3, #1
 801a984:	2b00      	cmp	r3, #0
 801a986:	d00d      	beq.n	801a9a4 <put_fat+0xa4>
 801a988:	697b      	ldr	r3, [r7, #20]
 801a98a:	781b      	ldrb	r3, [r3, #0]
 801a98c:	b25b      	sxtb	r3, r3
 801a98e:	f003 030f 	and.w	r3, r3, #15
 801a992:	b25a      	sxtb	r2, r3
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	b25b      	sxtb	r3, r3
 801a998:	011b      	lsls	r3, r3, #4
 801a99a:	b25b      	sxtb	r3, r3
 801a99c:	4313      	orrs	r3, r2
 801a99e:	b25b      	sxtb	r3, r3
 801a9a0:	b2db      	uxtb	r3, r3
 801a9a2:	e001      	b.n	801a9a8 <put_fat+0xa8>
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	b2db      	uxtb	r3, r3
 801a9a8:	697a      	ldr	r2, [r7, #20]
 801a9aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	6a1a      	ldr	r2, [r3, #32]
 801a9b6:	69bb      	ldr	r3, [r7, #24]
 801a9b8:	0a5b      	lsrs	r3, r3, #9
 801a9ba:	4413      	add	r3, r2
 801a9bc:	4619      	mov	r1, r3
 801a9be:	68f8      	ldr	r0, [r7, #12]
 801a9c0:	f7ff fe3c 	bl	801a63c <move_window>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a9c8:	7ffb      	ldrb	r3, [r7, #31]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d178      	bne.n	801aac0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a9d4:	69bb      	ldr	r3, [r7, #24]
 801a9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a9da:	4413      	add	r3, r2
 801a9dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	f003 0301 	and.w	r3, r3, #1
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d003      	beq.n	801a9f0 <put_fat+0xf0>
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	091b      	lsrs	r3, r3, #4
 801a9ec:	b2db      	uxtb	r3, r3
 801a9ee:	e00e      	b.n	801aa0e <put_fat+0x10e>
 801a9f0:	697b      	ldr	r3, [r7, #20]
 801a9f2:	781b      	ldrb	r3, [r3, #0]
 801a9f4:	b25b      	sxtb	r3, r3
 801a9f6:	f023 030f 	bic.w	r3, r3, #15
 801a9fa:	b25a      	sxtb	r2, r3
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	0a1b      	lsrs	r3, r3, #8
 801aa00:	b25b      	sxtb	r3, r3
 801aa02:	f003 030f 	and.w	r3, r3, #15
 801aa06:	b25b      	sxtb	r3, r3
 801aa08:	4313      	orrs	r3, r2
 801aa0a:	b25b      	sxtb	r3, r3
 801aa0c:	b2db      	uxtb	r3, r3
 801aa0e:	697a      	ldr	r2, [r7, #20]
 801aa10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	2201      	movs	r2, #1
 801aa16:	70da      	strb	r2, [r3, #3]
			break;
 801aa18:	e057      	b.n	801aaca <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	6a1a      	ldr	r2, [r3, #32]
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	0a1b      	lsrs	r3, r3, #8
 801aa22:	4413      	add	r3, r2
 801aa24:	4619      	mov	r1, r3
 801aa26:	68f8      	ldr	r0, [r7, #12]
 801aa28:	f7ff fe08 	bl	801a63c <move_window>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801aa30:	7ffb      	ldrb	r3, [r7, #31]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d146      	bne.n	801aac4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801aa3c:	68bb      	ldr	r3, [r7, #8]
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801aa44:	4413      	add	r3, r2
 801aa46:	687a      	ldr	r2, [r7, #4]
 801aa48:	b292      	uxth	r2, r2
 801aa4a:	4611      	mov	r1, r2
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f7ff fb7f 	bl	801a150 <st_word>
			fs->wflag = 1;
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	2201      	movs	r2, #1
 801aa56:	70da      	strb	r2, [r3, #3]
			break;
 801aa58:	e037      	b.n	801aaca <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	6a1a      	ldr	r2, [r3, #32]
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	09db      	lsrs	r3, r3, #7
 801aa62:	4413      	add	r3, r2
 801aa64:	4619      	mov	r1, r3
 801aa66:	68f8      	ldr	r0, [r7, #12]
 801aa68:	f7ff fde8 	bl	801a63c <move_window>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801aa70:	7ffb      	ldrb	r3, [r7, #31]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d128      	bne.n	801aac8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801aa8a:	4413      	add	r3, r2
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f7ff fb3c 	bl	801a10a <ld_dword>
 801aa92:	4603      	mov	r3, r0
 801aa94:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801aa98:	4323      	orrs	r3, r4
 801aa9a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801aaa2:	68bb      	ldr	r3, [r7, #8]
 801aaa4:	009b      	lsls	r3, r3, #2
 801aaa6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801aaaa:	4413      	add	r3, r2
 801aaac:	6879      	ldr	r1, [r7, #4]
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7ff fb69 	bl	801a186 <st_dword>
			fs->wflag = 1;
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	2201      	movs	r2, #1
 801aab8:	70da      	strb	r2, [r3, #3]
			break;
 801aaba:	e006      	b.n	801aaca <put_fat+0x1ca>
			if (res != FR_OK) break;
 801aabc:	bf00      	nop
 801aabe:	e004      	b.n	801aaca <put_fat+0x1ca>
			if (res != FR_OK) break;
 801aac0:	bf00      	nop
 801aac2:	e002      	b.n	801aaca <put_fat+0x1ca>
			if (res != FR_OK) break;
 801aac4:	bf00      	nop
 801aac6:	e000      	b.n	801aaca <put_fat+0x1ca>
			if (res != FR_OK) break;
 801aac8:	bf00      	nop
		}
	}
	return res;
 801aaca:	7ffb      	ldrb	r3, [r7, #31]
}
 801aacc:	4618      	mov	r0, r3
 801aace:	3724      	adds	r7, #36	@ 0x24
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd90      	pop	{r4, r7, pc}

0801aad4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b088      	sub	sp, #32
 801aad8:	af00      	add	r7, sp, #0
 801aada:	60f8      	str	r0, [r7, #12]
 801aadc:	60b9      	str	r1, [r7, #8]
 801aade:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801aae0:	2300      	movs	r3, #0
 801aae2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801aaea:	68bb      	ldr	r3, [r7, #8]
 801aaec:	2b01      	cmp	r3, #1
 801aaee:	d904      	bls.n	801aafa <remove_chain+0x26>
 801aaf0:	69bb      	ldr	r3, [r7, #24]
 801aaf2:	695b      	ldr	r3, [r3, #20]
 801aaf4:	68ba      	ldr	r2, [r7, #8]
 801aaf6:	429a      	cmp	r2, r3
 801aaf8:	d301      	bcc.n	801aafe <remove_chain+0x2a>
 801aafa:	2302      	movs	r3, #2
 801aafc:	e04b      	b.n	801ab96 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d00c      	beq.n	801ab1e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801ab04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ab08:	6879      	ldr	r1, [r7, #4]
 801ab0a:	69b8      	ldr	r0, [r7, #24]
 801ab0c:	f7ff fef8 	bl	801a900 <put_fat>
 801ab10:	4603      	mov	r3, r0
 801ab12:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801ab14:	7ffb      	ldrb	r3, [r7, #31]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d001      	beq.n	801ab1e <remove_chain+0x4a>
 801ab1a:	7ffb      	ldrb	r3, [r7, #31]
 801ab1c:	e03b      	b.n	801ab96 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801ab1e:	68b9      	ldr	r1, [r7, #8]
 801ab20:	68f8      	ldr	r0, [r7, #12]
 801ab22:	f7ff fe46 	bl	801a7b2 <get_fat>
 801ab26:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d031      	beq.n	801ab92 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ab2e:	697b      	ldr	r3, [r7, #20]
 801ab30:	2b01      	cmp	r3, #1
 801ab32:	d101      	bne.n	801ab38 <remove_chain+0x64>
 801ab34:	2302      	movs	r3, #2
 801ab36:	e02e      	b.n	801ab96 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ab38:	697b      	ldr	r3, [r7, #20]
 801ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ab3e:	d101      	bne.n	801ab44 <remove_chain+0x70>
 801ab40:	2301      	movs	r3, #1
 801ab42:	e028      	b.n	801ab96 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ab44:	2200      	movs	r2, #0
 801ab46:	68b9      	ldr	r1, [r7, #8]
 801ab48:	69b8      	ldr	r0, [r7, #24]
 801ab4a:	f7ff fed9 	bl	801a900 <put_fat>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ab52:	7ffb      	ldrb	r3, [r7, #31]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d001      	beq.n	801ab5c <remove_chain+0x88>
 801ab58:	7ffb      	ldrb	r3, [r7, #31]
 801ab5a:	e01c      	b.n	801ab96 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801ab5c:	69bb      	ldr	r3, [r7, #24]
 801ab5e:	691a      	ldr	r2, [r3, #16]
 801ab60:	69bb      	ldr	r3, [r7, #24]
 801ab62:	695b      	ldr	r3, [r3, #20]
 801ab64:	3b02      	subs	r3, #2
 801ab66:	429a      	cmp	r2, r3
 801ab68:	d20b      	bcs.n	801ab82 <remove_chain+0xae>
			fs->free_clst++;
 801ab6a:	69bb      	ldr	r3, [r7, #24]
 801ab6c:	691b      	ldr	r3, [r3, #16]
 801ab6e:	1c5a      	adds	r2, r3, #1
 801ab70:	69bb      	ldr	r3, [r7, #24]
 801ab72:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801ab74:	69bb      	ldr	r3, [r7, #24]
 801ab76:	791b      	ldrb	r3, [r3, #4]
 801ab78:	f043 0301 	orr.w	r3, r3, #1
 801ab7c:	b2da      	uxtb	r2, r3
 801ab7e:	69bb      	ldr	r3, [r7, #24]
 801ab80:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801ab82:	697b      	ldr	r3, [r7, #20]
 801ab84:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801ab86:	69bb      	ldr	r3, [r7, #24]
 801ab88:	695b      	ldr	r3, [r3, #20]
 801ab8a:	68ba      	ldr	r2, [r7, #8]
 801ab8c:	429a      	cmp	r2, r3
 801ab8e:	d3c6      	bcc.n	801ab1e <remove_chain+0x4a>
 801ab90:	e000      	b.n	801ab94 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801ab92:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801ab94:	2300      	movs	r3, #0
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3720      	adds	r7, #32
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}

0801ab9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801ab9e:	b580      	push	{r7, lr}
 801aba0:	b088      	sub	sp, #32
 801aba2:	af00      	add	r7, sp, #0
 801aba4:	6078      	str	r0, [r7, #4]
 801aba6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801abae:	683b      	ldr	r3, [r7, #0]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d10d      	bne.n	801abd0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801abb4:	693b      	ldr	r3, [r7, #16]
 801abb6:	68db      	ldr	r3, [r3, #12]
 801abb8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801abba:	69bb      	ldr	r3, [r7, #24]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d004      	beq.n	801abca <create_chain+0x2c>
 801abc0:	693b      	ldr	r3, [r7, #16]
 801abc2:	695b      	ldr	r3, [r3, #20]
 801abc4:	69ba      	ldr	r2, [r7, #24]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d31b      	bcc.n	801ac02 <create_chain+0x64>
 801abca:	2301      	movs	r3, #1
 801abcc:	61bb      	str	r3, [r7, #24]
 801abce:	e018      	b.n	801ac02 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801abd0:	6839      	ldr	r1, [r7, #0]
 801abd2:	6878      	ldr	r0, [r7, #4]
 801abd4:	f7ff fded 	bl	801a7b2 <get_fat>
 801abd8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	2b01      	cmp	r3, #1
 801abde:	d801      	bhi.n	801abe4 <create_chain+0x46>
 801abe0:	2301      	movs	r3, #1
 801abe2:	e070      	b.n	801acc6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801abea:	d101      	bne.n	801abf0 <create_chain+0x52>
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	e06a      	b.n	801acc6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801abf0:	693b      	ldr	r3, [r7, #16]
 801abf2:	695b      	ldr	r3, [r3, #20]
 801abf4:	68fa      	ldr	r2, [r7, #12]
 801abf6:	429a      	cmp	r2, r3
 801abf8:	d201      	bcs.n	801abfe <create_chain+0x60>
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	e063      	b.n	801acc6 <create_chain+0x128>
		scl = clst;
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801ac02:	69bb      	ldr	r3, [r7, #24]
 801ac04:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801ac06:	69fb      	ldr	r3, [r7, #28]
 801ac08:	3301      	adds	r3, #1
 801ac0a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801ac0c:	693b      	ldr	r3, [r7, #16]
 801ac0e:	695b      	ldr	r3, [r3, #20]
 801ac10:	69fa      	ldr	r2, [r7, #28]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d307      	bcc.n	801ac26 <create_chain+0x88>
				ncl = 2;
 801ac16:	2302      	movs	r3, #2
 801ac18:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801ac1a:	69fa      	ldr	r2, [r7, #28]
 801ac1c:	69bb      	ldr	r3, [r7, #24]
 801ac1e:	429a      	cmp	r2, r3
 801ac20:	d901      	bls.n	801ac26 <create_chain+0x88>
 801ac22:	2300      	movs	r3, #0
 801ac24:	e04f      	b.n	801acc6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801ac26:	69f9      	ldr	r1, [r7, #28]
 801ac28:	6878      	ldr	r0, [r7, #4]
 801ac2a:	f7ff fdc2 	bl	801a7b2 <get_fat>
 801ac2e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d00e      	beq.n	801ac54 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	2b01      	cmp	r3, #1
 801ac3a:	d003      	beq.n	801ac44 <create_chain+0xa6>
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac42:	d101      	bne.n	801ac48 <create_chain+0xaa>
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	e03e      	b.n	801acc6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801ac48:	69fa      	ldr	r2, [r7, #28]
 801ac4a:	69bb      	ldr	r3, [r7, #24]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d1da      	bne.n	801ac06 <create_chain+0x68>
 801ac50:	2300      	movs	r3, #0
 801ac52:	e038      	b.n	801acc6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801ac54:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801ac56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ac5a:	69f9      	ldr	r1, [r7, #28]
 801ac5c:	6938      	ldr	r0, [r7, #16]
 801ac5e:	f7ff fe4f 	bl	801a900 <put_fat>
 801ac62:	4603      	mov	r3, r0
 801ac64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801ac66:	7dfb      	ldrb	r3, [r7, #23]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d109      	bne.n	801ac80 <create_chain+0xe2>
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d006      	beq.n	801ac80 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801ac72:	69fa      	ldr	r2, [r7, #28]
 801ac74:	6839      	ldr	r1, [r7, #0]
 801ac76:	6938      	ldr	r0, [r7, #16]
 801ac78:	f7ff fe42 	bl	801a900 <put_fat>
 801ac7c:	4603      	mov	r3, r0
 801ac7e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801ac80:	7dfb      	ldrb	r3, [r7, #23]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d116      	bne.n	801acb4 <create_chain+0x116>
		fs->last_clst = ncl;
 801ac86:	693b      	ldr	r3, [r7, #16]
 801ac88:	69fa      	ldr	r2, [r7, #28]
 801ac8a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801ac8c:	693b      	ldr	r3, [r7, #16]
 801ac8e:	691a      	ldr	r2, [r3, #16]
 801ac90:	693b      	ldr	r3, [r7, #16]
 801ac92:	695b      	ldr	r3, [r3, #20]
 801ac94:	3b02      	subs	r3, #2
 801ac96:	429a      	cmp	r2, r3
 801ac98:	d804      	bhi.n	801aca4 <create_chain+0x106>
 801ac9a:	693b      	ldr	r3, [r7, #16]
 801ac9c:	691b      	ldr	r3, [r3, #16]
 801ac9e:	1e5a      	subs	r2, r3, #1
 801aca0:	693b      	ldr	r3, [r7, #16]
 801aca2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801aca4:	693b      	ldr	r3, [r7, #16]
 801aca6:	791b      	ldrb	r3, [r3, #4]
 801aca8:	f043 0301 	orr.w	r3, r3, #1
 801acac:	b2da      	uxtb	r2, r3
 801acae:	693b      	ldr	r3, [r7, #16]
 801acb0:	711a      	strb	r2, [r3, #4]
 801acb2:	e007      	b.n	801acc4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801acb4:	7dfb      	ldrb	r3, [r7, #23]
 801acb6:	2b01      	cmp	r3, #1
 801acb8:	d102      	bne.n	801acc0 <create_chain+0x122>
 801acba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801acbe:	e000      	b.n	801acc2 <create_chain+0x124>
 801acc0:	2301      	movs	r3, #1
 801acc2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801acc4:	69fb      	ldr	r3, [r7, #28]
}
 801acc6:	4618      	mov	r0, r3
 801acc8:	3720      	adds	r7, #32
 801acca:	46bd      	mov	sp, r7
 801accc:	bd80      	pop	{r7, pc}

0801acce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801acce:	b480      	push	{r7}
 801acd0:	b087      	sub	sp, #28
 801acd2:	af00      	add	r7, sp, #0
 801acd4:	6078      	str	r0, [r7, #4]
 801acd6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ace2:	3304      	adds	r3, #4
 801ace4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	0a5b      	lsrs	r3, r3, #9
 801acea:	68fa      	ldr	r2, [r7, #12]
 801acec:	8952      	ldrh	r2, [r2, #10]
 801acee:	fbb3 f3f2 	udiv	r3, r3, r2
 801acf2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	1d1a      	adds	r2, r3, #4
 801acf8:	613a      	str	r2, [r7, #16]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801acfe:	68bb      	ldr	r3, [r7, #8]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d101      	bne.n	801ad08 <clmt_clust+0x3a>
 801ad04:	2300      	movs	r3, #0
 801ad06:	e010      	b.n	801ad2a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801ad08:	697a      	ldr	r2, [r7, #20]
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	429a      	cmp	r2, r3
 801ad0e:	d307      	bcc.n	801ad20 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801ad10:	697a      	ldr	r2, [r7, #20]
 801ad12:	68bb      	ldr	r3, [r7, #8]
 801ad14:	1ad3      	subs	r3, r2, r3
 801ad16:	617b      	str	r3, [r7, #20]
 801ad18:	693b      	ldr	r3, [r7, #16]
 801ad1a:	3304      	adds	r3, #4
 801ad1c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801ad1e:	e7e9      	b.n	801acf4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801ad20:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801ad22:	693b      	ldr	r3, [r7, #16]
 801ad24:	681a      	ldr	r2, [r3, #0]
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	4413      	add	r3, r2
}
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	371c      	adds	r7, #28
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad34:	4770      	bx	lr

0801ad36 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801ad36:	b580      	push	{r7, lr}
 801ad38:	b086      	sub	sp, #24
 801ad3a:	af00      	add	r7, sp, #0
 801ad3c:	6078      	str	r0, [r7, #4]
 801ad3e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ad4c:	d204      	bcs.n	801ad58 <dir_sdi+0x22>
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	f003 031f 	and.w	r3, r3, #31
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d001      	beq.n	801ad5c <dir_sdi+0x26>
		return FR_INT_ERR;
 801ad58:	2302      	movs	r3, #2
 801ad5a:	e063      	b.n	801ae24 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	683a      	ldr	r2, [r7, #0]
 801ad60:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	689b      	ldr	r3, [r3, #8]
 801ad66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801ad68:	697b      	ldr	r3, [r7, #20]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d106      	bne.n	801ad7c <dir_sdi+0x46>
 801ad6e:	693b      	ldr	r3, [r7, #16]
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	2b02      	cmp	r3, #2
 801ad74:	d902      	bls.n	801ad7c <dir_sdi+0x46>
		clst = fs->dirbase;
 801ad76:	693b      	ldr	r3, [r7, #16]
 801ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801ad7c:	697b      	ldr	r3, [r7, #20]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d10c      	bne.n	801ad9c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	095b      	lsrs	r3, r3, #5
 801ad86:	693a      	ldr	r2, [r7, #16]
 801ad88:	8912      	ldrh	r2, [r2, #8]
 801ad8a:	4293      	cmp	r3, r2
 801ad8c:	d301      	bcc.n	801ad92 <dir_sdi+0x5c>
 801ad8e:	2302      	movs	r3, #2
 801ad90:	e048      	b.n	801ae24 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	61da      	str	r2, [r3, #28]
 801ad9a:	e029      	b.n	801adf0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801ad9c:	693b      	ldr	r3, [r7, #16]
 801ad9e:	895b      	ldrh	r3, [r3, #10]
 801ada0:	025b      	lsls	r3, r3, #9
 801ada2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ada4:	e019      	b.n	801adda <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	6979      	ldr	r1, [r7, #20]
 801adaa:	4618      	mov	r0, r3
 801adac:	f7ff fd01 	bl	801a7b2 <get_fat>
 801adb0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801adb2:	697b      	ldr	r3, [r7, #20]
 801adb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801adb8:	d101      	bne.n	801adbe <dir_sdi+0x88>
 801adba:	2301      	movs	r3, #1
 801adbc:	e032      	b.n	801ae24 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801adbe:	697b      	ldr	r3, [r7, #20]
 801adc0:	2b01      	cmp	r3, #1
 801adc2:	d904      	bls.n	801adce <dir_sdi+0x98>
 801adc4:	693b      	ldr	r3, [r7, #16]
 801adc6:	695b      	ldr	r3, [r3, #20]
 801adc8:	697a      	ldr	r2, [r7, #20]
 801adca:	429a      	cmp	r2, r3
 801adcc:	d301      	bcc.n	801add2 <dir_sdi+0x9c>
 801adce:	2302      	movs	r3, #2
 801add0:	e028      	b.n	801ae24 <dir_sdi+0xee>
			ofs -= csz;
 801add2:	683a      	ldr	r2, [r7, #0]
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	1ad3      	subs	r3, r2, r3
 801add8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801adda:	683a      	ldr	r2, [r7, #0]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	429a      	cmp	r2, r3
 801ade0:	d2e1      	bcs.n	801ada6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801ade2:	6979      	ldr	r1, [r7, #20]
 801ade4:	6938      	ldr	r0, [r7, #16]
 801ade6:	f7ff fcc5 	bl	801a774 <clust2sect>
 801adea:	4602      	mov	r2, r0
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	697a      	ldr	r2, [r7, #20]
 801adf4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	69db      	ldr	r3, [r3, #28]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d101      	bne.n	801ae02 <dir_sdi+0xcc>
 801adfe:	2302      	movs	r3, #2
 801ae00:	e010      	b.n	801ae24 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	69da      	ldr	r2, [r3, #28]
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	0a5b      	lsrs	r3, r3, #9
 801ae0a:	441a      	add	r2, r3
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801ae10:	693b      	ldr	r3, [r7, #16]
 801ae12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ae16:	683b      	ldr	r3, [r7, #0]
 801ae18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae1c:	441a      	add	r2, r3
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ae22:	2300      	movs	r3, #0
}
 801ae24:	4618      	mov	r0, r3
 801ae26:	3718      	adds	r7, #24
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}

0801ae2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801ae2c:	b580      	push	{r7, lr}
 801ae2e:	b086      	sub	sp, #24
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	695b      	ldr	r3, [r3, #20]
 801ae40:	3320      	adds	r3, #32
 801ae42:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	69db      	ldr	r3, [r3, #28]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d003      	beq.n	801ae54 <dir_next+0x28>
 801ae4c:	68bb      	ldr	r3, [r7, #8]
 801ae4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ae52:	d301      	bcc.n	801ae58 <dir_next+0x2c>
 801ae54:	2304      	movs	r3, #4
 801ae56:	e0aa      	b.n	801afae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801ae58:	68bb      	ldr	r3, [r7, #8]
 801ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	f040 8098 	bne.w	801af94 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	69db      	ldr	r3, [r3, #28]
 801ae68:	1c5a      	adds	r2, r3, #1
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	699b      	ldr	r3, [r3, #24]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d10b      	bne.n	801ae8e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801ae76:	68bb      	ldr	r3, [r7, #8]
 801ae78:	095b      	lsrs	r3, r3, #5
 801ae7a:	68fa      	ldr	r2, [r7, #12]
 801ae7c:	8912      	ldrh	r2, [r2, #8]
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	f0c0 8088 	bcc.w	801af94 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	2200      	movs	r2, #0
 801ae88:	61da      	str	r2, [r3, #28]
 801ae8a:	2304      	movs	r3, #4
 801ae8c:	e08f      	b.n	801afae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801ae8e:	68bb      	ldr	r3, [r7, #8]
 801ae90:	0a5b      	lsrs	r3, r3, #9
 801ae92:	68fa      	ldr	r2, [r7, #12]
 801ae94:	8952      	ldrh	r2, [r2, #10]
 801ae96:	3a01      	subs	r2, #1
 801ae98:	4013      	ands	r3, r2
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d17a      	bne.n	801af94 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801ae9e:	687a      	ldr	r2, [r7, #4]
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	699b      	ldr	r3, [r3, #24]
 801aea4:	4619      	mov	r1, r3
 801aea6:	4610      	mov	r0, r2
 801aea8:	f7ff fc83 	bl	801a7b2 <get_fat>
 801aeac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801aeae:	697b      	ldr	r3, [r7, #20]
 801aeb0:	2b01      	cmp	r3, #1
 801aeb2:	d801      	bhi.n	801aeb8 <dir_next+0x8c>
 801aeb4:	2302      	movs	r3, #2
 801aeb6:	e07a      	b.n	801afae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aebe:	d101      	bne.n	801aec4 <dir_next+0x98>
 801aec0:	2301      	movs	r3, #1
 801aec2:	e074      	b.n	801afae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	695b      	ldr	r3, [r3, #20]
 801aec8:	697a      	ldr	r2, [r7, #20]
 801aeca:	429a      	cmp	r2, r3
 801aecc:	d358      	bcc.n	801af80 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801aece:	683b      	ldr	r3, [r7, #0]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d104      	bne.n	801aede <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	2200      	movs	r2, #0
 801aed8:	61da      	str	r2, [r3, #28]
 801aeda:	2304      	movs	r3, #4
 801aedc:	e067      	b.n	801afae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801aede:	687a      	ldr	r2, [r7, #4]
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	699b      	ldr	r3, [r3, #24]
 801aee4:	4619      	mov	r1, r3
 801aee6:	4610      	mov	r0, r2
 801aee8:	f7ff fe59 	bl	801ab9e <create_chain>
 801aeec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801aeee:	697b      	ldr	r3, [r7, #20]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d101      	bne.n	801aef8 <dir_next+0xcc>
 801aef4:	2307      	movs	r3, #7
 801aef6:	e05a      	b.n	801afae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	2b01      	cmp	r3, #1
 801aefc:	d101      	bne.n	801af02 <dir_next+0xd6>
 801aefe:	2302      	movs	r3, #2
 801af00:	e055      	b.n	801afae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801af02:	697b      	ldr	r3, [r7, #20]
 801af04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801af08:	d101      	bne.n	801af0e <dir_next+0xe2>
 801af0a:	2301      	movs	r3, #1
 801af0c:	e04f      	b.n	801afae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801af0e:	68f8      	ldr	r0, [r7, #12]
 801af10:	f7ff fb50 	bl	801a5b4 <sync_window>
 801af14:	4603      	mov	r3, r0
 801af16:	2b00      	cmp	r3, #0
 801af18:	d001      	beq.n	801af1e <dir_next+0xf2>
 801af1a:	2301      	movs	r3, #1
 801af1c:	e047      	b.n	801afae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	3330      	adds	r3, #48	@ 0x30
 801af22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801af26:	2100      	movs	r1, #0
 801af28:	4618      	mov	r0, r3
 801af2a:	f7ff f979 	bl	801a220 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801af2e:	2300      	movs	r3, #0
 801af30:	613b      	str	r3, [r7, #16]
 801af32:	6979      	ldr	r1, [r7, #20]
 801af34:	68f8      	ldr	r0, [r7, #12]
 801af36:	f7ff fc1d 	bl	801a774 <clust2sect>
 801af3a:	4602      	mov	r2, r0
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 801af40:	e012      	b.n	801af68 <dir_next+0x13c>
						fs->wflag = 1;
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	2201      	movs	r2, #1
 801af46:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801af48:	68f8      	ldr	r0, [r7, #12]
 801af4a:	f7ff fb33 	bl	801a5b4 <sync_window>
 801af4e:	4603      	mov	r3, r0
 801af50:	2b00      	cmp	r3, #0
 801af52:	d001      	beq.n	801af58 <dir_next+0x12c>
 801af54:	2301      	movs	r3, #1
 801af56:	e02a      	b.n	801afae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801af58:	693b      	ldr	r3, [r7, #16]
 801af5a:	3301      	adds	r3, #1
 801af5c:	613b      	str	r3, [r7, #16]
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af62:	1c5a      	adds	r2, r3, #1
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	62da      	str	r2, [r3, #44]	@ 0x2c
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	895b      	ldrh	r3, [r3, #10]
 801af6c:	461a      	mov	r2, r3
 801af6e:	693b      	ldr	r3, [r7, #16]
 801af70:	4293      	cmp	r3, r2
 801af72:	d3e6      	bcc.n	801af42 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af78:	693b      	ldr	r3, [r7, #16]
 801af7a:	1ad2      	subs	r2, r2, r3
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	697a      	ldr	r2, [r7, #20]
 801af84:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801af86:	6979      	ldr	r1, [r7, #20]
 801af88:	68f8      	ldr	r0, [r7, #12]
 801af8a:	f7ff fbf3 	bl	801a774 <clust2sect>
 801af8e:	4602      	mov	r2, r0
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	68ba      	ldr	r2, [r7, #8]
 801af98:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801afa6:	441a      	add	r2, r3
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801afac:	2300      	movs	r3, #0
}
 801afae:	4618      	mov	r0, r3
 801afb0:	3718      	adds	r7, #24
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bd80      	pop	{r7, pc}

0801afb6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801afb6:	b580      	push	{r7, lr}
 801afb8:	b086      	sub	sp, #24
 801afba:	af00      	add	r7, sp, #0
 801afbc:	6078      	str	r0, [r7, #4]
 801afbe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801afc6:	2100      	movs	r1, #0
 801afc8:	6878      	ldr	r0, [r7, #4]
 801afca:	f7ff feb4 	bl	801ad36 <dir_sdi>
 801afce:	4603      	mov	r3, r0
 801afd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801afd2:	7dfb      	ldrb	r3, [r7, #23]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d12b      	bne.n	801b030 <dir_alloc+0x7a>
		n = 0;
 801afd8:	2300      	movs	r3, #0
 801afda:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	69db      	ldr	r3, [r3, #28]
 801afe0:	4619      	mov	r1, r3
 801afe2:	68f8      	ldr	r0, [r7, #12]
 801afe4:	f7ff fb2a 	bl	801a63c <move_window>
 801afe8:	4603      	mov	r3, r0
 801afea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801afec:	7dfb      	ldrb	r3, [r7, #23]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d11d      	bne.n	801b02e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	6a1b      	ldr	r3, [r3, #32]
 801aff6:	781b      	ldrb	r3, [r3, #0]
 801aff8:	2be5      	cmp	r3, #229	@ 0xe5
 801affa:	d004      	beq.n	801b006 <dir_alloc+0x50>
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	6a1b      	ldr	r3, [r3, #32]
 801b000:	781b      	ldrb	r3, [r3, #0]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d107      	bne.n	801b016 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b006:	693b      	ldr	r3, [r7, #16]
 801b008:	3301      	adds	r3, #1
 801b00a:	613b      	str	r3, [r7, #16]
 801b00c:	693a      	ldr	r2, [r7, #16]
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	429a      	cmp	r2, r3
 801b012:	d102      	bne.n	801b01a <dir_alloc+0x64>
 801b014:	e00c      	b.n	801b030 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b016:	2300      	movs	r3, #0
 801b018:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b01a:	2101      	movs	r1, #1
 801b01c:	6878      	ldr	r0, [r7, #4]
 801b01e:	f7ff ff05 	bl	801ae2c <dir_next>
 801b022:	4603      	mov	r3, r0
 801b024:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b026:	7dfb      	ldrb	r3, [r7, #23]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d0d7      	beq.n	801afdc <dir_alloc+0x26>
 801b02c:	e000      	b.n	801b030 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b02e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b030:	7dfb      	ldrb	r3, [r7, #23]
 801b032:	2b04      	cmp	r3, #4
 801b034:	d101      	bne.n	801b03a <dir_alloc+0x84>
 801b036:	2307      	movs	r3, #7
 801b038:	75fb      	strb	r3, [r7, #23]
	return res;
 801b03a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3718      	adds	r7, #24
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}

0801b044 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	b084      	sub	sp, #16
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
 801b04c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b04e:	683b      	ldr	r3, [r7, #0]
 801b050:	331a      	adds	r3, #26
 801b052:	4618      	mov	r0, r3
 801b054:	f7ff f840 	bl	801a0d8 <ld_word>
 801b058:	4603      	mov	r3, r0
 801b05a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	781b      	ldrb	r3, [r3, #0]
 801b060:	2b03      	cmp	r3, #3
 801b062:	d109      	bne.n	801b078 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	3314      	adds	r3, #20
 801b068:	4618      	mov	r0, r3
 801b06a:	f7ff f835 	bl	801a0d8 <ld_word>
 801b06e:	4603      	mov	r3, r0
 801b070:	041b      	lsls	r3, r3, #16
 801b072:	68fa      	ldr	r2, [r7, #12]
 801b074:	4313      	orrs	r3, r2
 801b076:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b078:	68fb      	ldr	r3, [r7, #12]
}
 801b07a:	4618      	mov	r0, r3
 801b07c:	3710      	adds	r7, #16
 801b07e:	46bd      	mov	sp, r7
 801b080:	bd80      	pop	{r7, pc}

0801b082 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b082:	b580      	push	{r7, lr}
 801b084:	b084      	sub	sp, #16
 801b086:	af00      	add	r7, sp, #0
 801b088:	60f8      	str	r0, [r7, #12]
 801b08a:	60b9      	str	r1, [r7, #8]
 801b08c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b08e:	68bb      	ldr	r3, [r7, #8]
 801b090:	331a      	adds	r3, #26
 801b092:	687a      	ldr	r2, [r7, #4]
 801b094:	b292      	uxth	r2, r2
 801b096:	4611      	mov	r1, r2
 801b098:	4618      	mov	r0, r3
 801b09a:	f7ff f859 	bl	801a150 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	781b      	ldrb	r3, [r3, #0]
 801b0a2:	2b03      	cmp	r3, #3
 801b0a4:	d109      	bne.n	801b0ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b0a6:	68bb      	ldr	r3, [r7, #8]
 801b0a8:	f103 0214 	add.w	r2, r3, #20
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	0c1b      	lsrs	r3, r3, #16
 801b0b0:	b29b      	uxth	r3, r3
 801b0b2:	4619      	mov	r1, r3
 801b0b4:	4610      	mov	r0, r2
 801b0b6:	f7ff f84b 	bl	801a150 <st_word>
	}
}
 801b0ba:	bf00      	nop
 801b0bc:	3710      	adds	r7, #16
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	bd80      	pop	{r7, pc}

0801b0c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801b0c2:	b580      	push	{r7, lr}
 801b0c4:	b086      	sub	sp, #24
 801b0c6:	af00      	add	r7, sp, #0
 801b0c8:	6078      	str	r0, [r7, #4]
 801b0ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801b0cc:	2304      	movs	r3, #4
 801b0ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801b0d6:	e03c      	b.n	801b152 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	69db      	ldr	r3, [r3, #28]
 801b0dc:	4619      	mov	r1, r3
 801b0de:	6938      	ldr	r0, [r7, #16]
 801b0e0:	f7ff faac 	bl	801a63c <move_window>
 801b0e4:	4603      	mov	r3, r0
 801b0e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b0e8:	7dfb      	ldrb	r3, [r7, #23]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d136      	bne.n	801b15c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	6a1b      	ldr	r3, [r3, #32]
 801b0f2:	781b      	ldrb	r3, [r3, #0]
 801b0f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801b0f6:	7bfb      	ldrb	r3, [r7, #15]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d102      	bne.n	801b102 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801b0fc:	2304      	movs	r3, #4
 801b0fe:	75fb      	strb	r3, [r7, #23]
 801b100:	e031      	b.n	801b166 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	6a1b      	ldr	r3, [r3, #32]
 801b106:	330b      	adds	r3, #11
 801b108:	781b      	ldrb	r3, [r3, #0]
 801b10a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b10e:	73bb      	strb	r3, [r7, #14]
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	7bba      	ldrb	r2, [r7, #14]
 801b114:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801b116:	7bfb      	ldrb	r3, [r7, #15]
 801b118:	2be5      	cmp	r3, #229	@ 0xe5
 801b11a:	d011      	beq.n	801b140 <dir_read+0x7e>
 801b11c:	7bfb      	ldrb	r3, [r7, #15]
 801b11e:	2b2e      	cmp	r3, #46	@ 0x2e
 801b120:	d00e      	beq.n	801b140 <dir_read+0x7e>
 801b122:	7bbb      	ldrb	r3, [r7, #14]
 801b124:	2b0f      	cmp	r3, #15
 801b126:	d00b      	beq.n	801b140 <dir_read+0x7e>
 801b128:	7bbb      	ldrb	r3, [r7, #14]
 801b12a:	f023 0320 	bic.w	r3, r3, #32
 801b12e:	2b08      	cmp	r3, #8
 801b130:	bf0c      	ite	eq
 801b132:	2301      	moveq	r3, #1
 801b134:	2300      	movne	r3, #0
 801b136:	b2db      	uxtb	r3, r3
 801b138:	461a      	mov	r2, r3
 801b13a:	683b      	ldr	r3, [r7, #0]
 801b13c:	4293      	cmp	r3, r2
 801b13e:	d00f      	beq.n	801b160 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801b140:	2100      	movs	r1, #0
 801b142:	6878      	ldr	r0, [r7, #4]
 801b144:	f7ff fe72 	bl	801ae2c <dir_next>
 801b148:	4603      	mov	r3, r0
 801b14a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b14c:	7dfb      	ldrb	r3, [r7, #23]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d108      	bne.n	801b164 <dir_read+0xa2>
	while (dp->sect) {
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	69db      	ldr	r3, [r3, #28]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d1be      	bne.n	801b0d8 <dir_read+0x16>
 801b15a:	e004      	b.n	801b166 <dir_read+0xa4>
		if (res != FR_OK) break;
 801b15c:	bf00      	nop
 801b15e:	e002      	b.n	801b166 <dir_read+0xa4>
				break;
 801b160:	bf00      	nop
 801b162:	e000      	b.n	801b166 <dir_read+0xa4>
		if (res != FR_OK) break;
 801b164:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801b166:	7dfb      	ldrb	r3, [r7, #23]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d002      	beq.n	801b172 <dir_read+0xb0>
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	2200      	movs	r2, #0
 801b170:	61da      	str	r2, [r3, #28]
	return res;
 801b172:	7dfb      	ldrb	r3, [r7, #23]
}
 801b174:	4618      	mov	r0, r3
 801b176:	3718      	adds	r7, #24
 801b178:	46bd      	mov	sp, r7
 801b17a:	bd80      	pop	{r7, pc}

0801b17c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b086      	sub	sp, #24
 801b180:	af00      	add	r7, sp, #0
 801b182:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b18a:	2100      	movs	r1, #0
 801b18c:	6878      	ldr	r0, [r7, #4]
 801b18e:	f7ff fdd2 	bl	801ad36 <dir_sdi>
 801b192:	4603      	mov	r3, r0
 801b194:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b196:	7dfb      	ldrb	r3, [r7, #23]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d001      	beq.n	801b1a0 <dir_find+0x24>
 801b19c:	7dfb      	ldrb	r3, [r7, #23]
 801b19e:	e03e      	b.n	801b21e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	69db      	ldr	r3, [r3, #28]
 801b1a4:	4619      	mov	r1, r3
 801b1a6:	6938      	ldr	r0, [r7, #16]
 801b1a8:	f7ff fa48 	bl	801a63c <move_window>
 801b1ac:	4603      	mov	r3, r0
 801b1ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b1b0:	7dfb      	ldrb	r3, [r7, #23]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d12f      	bne.n	801b216 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	6a1b      	ldr	r3, [r3, #32]
 801b1ba:	781b      	ldrb	r3, [r3, #0]
 801b1bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b1be:	7bfb      	ldrb	r3, [r7, #15]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d102      	bne.n	801b1ca <dir_find+0x4e>
 801b1c4:	2304      	movs	r3, #4
 801b1c6:	75fb      	strb	r3, [r7, #23]
 801b1c8:	e028      	b.n	801b21c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6a1b      	ldr	r3, [r3, #32]
 801b1ce:	330b      	adds	r3, #11
 801b1d0:	781b      	ldrb	r3, [r3, #0]
 801b1d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1d6:	b2da      	uxtb	r2, r3
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	6a1b      	ldr	r3, [r3, #32]
 801b1e0:	330b      	adds	r3, #11
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	f003 0308 	and.w	r3, r3, #8
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d10a      	bne.n	801b202 <dir_find+0x86>
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	6a18      	ldr	r0, [r3, #32]
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	3324      	adds	r3, #36	@ 0x24
 801b1f4:	220b      	movs	r2, #11
 801b1f6:	4619      	mov	r1, r3
 801b1f8:	f7ff f82d 	bl	801a256 <mem_cmp>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d00b      	beq.n	801b21a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b202:	2100      	movs	r1, #0
 801b204:	6878      	ldr	r0, [r7, #4]
 801b206:	f7ff fe11 	bl	801ae2c <dir_next>
 801b20a:	4603      	mov	r3, r0
 801b20c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801b20e:	7dfb      	ldrb	r3, [r7, #23]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d0c5      	beq.n	801b1a0 <dir_find+0x24>
 801b214:	e002      	b.n	801b21c <dir_find+0xa0>
		if (res != FR_OK) break;
 801b216:	bf00      	nop
 801b218:	e000      	b.n	801b21c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b21a:	bf00      	nop

	return res;
 801b21c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3718      	adds	r7, #24
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}

0801b226 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801b226:	b580      	push	{r7, lr}
 801b228:	b084      	sub	sp, #16
 801b22a:	af00      	add	r7, sp, #0
 801b22c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801b234:	2101      	movs	r1, #1
 801b236:	6878      	ldr	r0, [r7, #4]
 801b238:	f7ff febd 	bl	801afb6 <dir_alloc>
 801b23c:	4603      	mov	r3, r0
 801b23e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801b240:	7bfb      	ldrb	r3, [r7, #15]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d11c      	bne.n	801b280 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	69db      	ldr	r3, [r3, #28]
 801b24a:	4619      	mov	r1, r3
 801b24c:	68b8      	ldr	r0, [r7, #8]
 801b24e:	f7ff f9f5 	bl	801a63c <move_window>
 801b252:	4603      	mov	r3, r0
 801b254:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801b256:	7bfb      	ldrb	r3, [r7, #15]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d111      	bne.n	801b280 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	6a1b      	ldr	r3, [r3, #32]
 801b260:	2220      	movs	r2, #32
 801b262:	2100      	movs	r1, #0
 801b264:	4618      	mov	r0, r3
 801b266:	f7fe ffdb 	bl	801a220 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	6a18      	ldr	r0, [r3, #32]
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	3324      	adds	r3, #36	@ 0x24
 801b272:	220b      	movs	r2, #11
 801b274:	4619      	mov	r1, r3
 801b276:	f7fe ffb2 	bl	801a1de <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801b27a:	68bb      	ldr	r3, [r7, #8]
 801b27c:	2201      	movs	r2, #1
 801b27e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801b280:	7bfb      	ldrb	r3, [r7, #15]
}
 801b282:	4618      	mov	r0, r3
 801b284:	3710      	adds	r7, #16
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}

0801b28a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801b28a:	b580      	push	{r7, lr}
 801b28c:	b086      	sub	sp, #24
 801b28e:	af00      	add	r7, sp, #0
 801b290:	6078      	str	r0, [r7, #4]
 801b292:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	2200      	movs	r2, #0
 801b298:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	69db      	ldr	r3, [r3, #28]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d04f      	beq.n	801b342 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	613b      	str	r3, [r7, #16]
 801b2a6:	693b      	ldr	r3, [r7, #16]
 801b2a8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801b2aa:	e022      	b.n	801b2f2 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	6a1a      	ldr	r2, [r3, #32]
 801b2b0:	697b      	ldr	r3, [r7, #20]
 801b2b2:	1c59      	adds	r1, r3, #1
 801b2b4:	6179      	str	r1, [r7, #20]
 801b2b6:	4413      	add	r3, r2
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801b2bc:	7bfb      	ldrb	r3, [r7, #15]
 801b2be:	2b20      	cmp	r3, #32
 801b2c0:	d016      	beq.n	801b2f0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801b2c2:	7bfb      	ldrb	r3, [r7, #15]
 801b2c4:	2b05      	cmp	r3, #5
 801b2c6:	d101      	bne.n	801b2cc <get_fileinfo+0x42>
 801b2c8:	23e5      	movs	r3, #229	@ 0xe5
 801b2ca:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801b2cc:	697b      	ldr	r3, [r7, #20]
 801b2ce:	2b09      	cmp	r3, #9
 801b2d0:	d106      	bne.n	801b2e0 <get_fileinfo+0x56>
 801b2d2:	693b      	ldr	r3, [r7, #16]
 801b2d4:	1c5a      	adds	r2, r3, #1
 801b2d6:	613a      	str	r2, [r7, #16]
 801b2d8:	683a      	ldr	r2, [r7, #0]
 801b2da:	4413      	add	r3, r2
 801b2dc:	222e      	movs	r2, #46	@ 0x2e
 801b2de:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801b2e0:	693b      	ldr	r3, [r7, #16]
 801b2e2:	1c5a      	adds	r2, r3, #1
 801b2e4:	613a      	str	r2, [r7, #16]
 801b2e6:	683a      	ldr	r2, [r7, #0]
 801b2e8:	4413      	add	r3, r2
 801b2ea:	7bfa      	ldrb	r2, [r7, #15]
 801b2ec:	725a      	strb	r2, [r3, #9]
 801b2ee:	e000      	b.n	801b2f2 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 801b2f0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801b2f2:	697b      	ldr	r3, [r7, #20]
 801b2f4:	2b0a      	cmp	r3, #10
 801b2f6:	d9d9      	bls.n	801b2ac <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801b2f8:	683a      	ldr	r2, [r7, #0]
 801b2fa:	693b      	ldr	r3, [r7, #16]
 801b2fc:	4413      	add	r3, r2
 801b2fe:	3309      	adds	r3, #9
 801b300:	2200      	movs	r2, #0
 801b302:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	6a1b      	ldr	r3, [r3, #32]
 801b308:	7ada      	ldrb	r2, [r3, #11]
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	6a1b      	ldr	r3, [r3, #32]
 801b312:	331c      	adds	r3, #28
 801b314:	4618      	mov	r0, r3
 801b316:	f7fe fef8 	bl	801a10a <ld_dword>
 801b31a:	4602      	mov	r2, r0
 801b31c:	683b      	ldr	r3, [r7, #0]
 801b31e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	6a1b      	ldr	r3, [r3, #32]
 801b324:	3316      	adds	r3, #22
 801b326:	4618      	mov	r0, r3
 801b328:	f7fe feef 	bl	801a10a <ld_dword>
 801b32c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	b29a      	uxth	r2, r3
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	80da      	strh	r2, [r3, #6]
 801b336:	68bb      	ldr	r3, [r7, #8]
 801b338:	0c1b      	lsrs	r3, r3, #16
 801b33a:	b29a      	uxth	r2, r3
 801b33c:	683b      	ldr	r3, [r7, #0]
 801b33e:	809a      	strh	r2, [r3, #4]
 801b340:	e000      	b.n	801b344 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b342:	bf00      	nop
}
 801b344:	3718      	adds	r7, #24
 801b346:	46bd      	mov	sp, r7
 801b348:	bd80      	pop	{r7, pc}
	...

0801b34c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b088      	sub	sp, #32
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
 801b354:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	60fb      	str	r3, [r7, #12]
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	3324      	adds	r3, #36	@ 0x24
 801b360:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801b362:	220b      	movs	r2, #11
 801b364:	2120      	movs	r1, #32
 801b366:	68b8      	ldr	r0, [r7, #8]
 801b368:	f7fe ff5a 	bl	801a220 <mem_set>
	si = i = 0; ni = 8;
 801b36c:	2300      	movs	r3, #0
 801b36e:	613b      	str	r3, [r7, #16]
 801b370:	693b      	ldr	r3, [r7, #16]
 801b372:	61fb      	str	r3, [r7, #28]
 801b374:	2308      	movs	r3, #8
 801b376:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801b378:	69fb      	ldr	r3, [r7, #28]
 801b37a:	1c5a      	adds	r2, r3, #1
 801b37c:	61fa      	str	r2, [r7, #28]
 801b37e:	68fa      	ldr	r2, [r7, #12]
 801b380:	4413      	add	r3, r2
 801b382:	781b      	ldrb	r3, [r3, #0]
 801b384:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801b386:	7efb      	ldrb	r3, [r7, #27]
 801b388:	2b20      	cmp	r3, #32
 801b38a:	d94e      	bls.n	801b42a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801b38c:	7efb      	ldrb	r3, [r7, #27]
 801b38e:	2b2f      	cmp	r3, #47	@ 0x2f
 801b390:	d006      	beq.n	801b3a0 <create_name+0x54>
 801b392:	7efb      	ldrb	r3, [r7, #27]
 801b394:	2b5c      	cmp	r3, #92	@ 0x5c
 801b396:	d110      	bne.n	801b3ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801b398:	e002      	b.n	801b3a0 <create_name+0x54>
 801b39a:	69fb      	ldr	r3, [r7, #28]
 801b39c:	3301      	adds	r3, #1
 801b39e:	61fb      	str	r3, [r7, #28]
 801b3a0:	68fa      	ldr	r2, [r7, #12]
 801b3a2:	69fb      	ldr	r3, [r7, #28]
 801b3a4:	4413      	add	r3, r2
 801b3a6:	781b      	ldrb	r3, [r3, #0]
 801b3a8:	2b2f      	cmp	r3, #47	@ 0x2f
 801b3aa:	d0f6      	beq.n	801b39a <create_name+0x4e>
 801b3ac:	68fa      	ldr	r2, [r7, #12]
 801b3ae:	69fb      	ldr	r3, [r7, #28]
 801b3b0:	4413      	add	r3, r2
 801b3b2:	781b      	ldrb	r3, [r3, #0]
 801b3b4:	2b5c      	cmp	r3, #92	@ 0x5c
 801b3b6:	d0f0      	beq.n	801b39a <create_name+0x4e>
			break;
 801b3b8:	e038      	b.n	801b42c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801b3ba:	7efb      	ldrb	r3, [r7, #27]
 801b3bc:	2b2e      	cmp	r3, #46	@ 0x2e
 801b3be:	d003      	beq.n	801b3c8 <create_name+0x7c>
 801b3c0:	693a      	ldr	r2, [r7, #16]
 801b3c2:	697b      	ldr	r3, [r7, #20]
 801b3c4:	429a      	cmp	r2, r3
 801b3c6:	d30c      	bcc.n	801b3e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801b3c8:	697b      	ldr	r3, [r7, #20]
 801b3ca:	2b0b      	cmp	r3, #11
 801b3cc:	d002      	beq.n	801b3d4 <create_name+0x88>
 801b3ce:	7efb      	ldrb	r3, [r7, #27]
 801b3d0:	2b2e      	cmp	r3, #46	@ 0x2e
 801b3d2:	d001      	beq.n	801b3d8 <create_name+0x8c>
 801b3d4:	2306      	movs	r3, #6
 801b3d6:	e044      	b.n	801b462 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801b3d8:	2308      	movs	r3, #8
 801b3da:	613b      	str	r3, [r7, #16]
 801b3dc:	230b      	movs	r3, #11
 801b3de:	617b      	str	r3, [r7, #20]
			continue;
 801b3e0:	e022      	b.n	801b428 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801b3e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	da04      	bge.n	801b3f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801b3ea:	7efb      	ldrb	r3, [r7, #27]
 801b3ec:	3b80      	subs	r3, #128	@ 0x80
 801b3ee:	4a1f      	ldr	r2, [pc, #124]	@ (801b46c <create_name+0x120>)
 801b3f0:	5cd3      	ldrb	r3, [r2, r3]
 801b3f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801b3f4:	7efb      	ldrb	r3, [r7, #27]
 801b3f6:	4619      	mov	r1, r3
 801b3f8:	481d      	ldr	r0, [pc, #116]	@ (801b470 <create_name+0x124>)
 801b3fa:	f7fe ff53 	bl	801a2a4 <chk_chr>
 801b3fe:	4603      	mov	r3, r0
 801b400:	2b00      	cmp	r3, #0
 801b402:	d001      	beq.n	801b408 <create_name+0xbc>
 801b404:	2306      	movs	r3, #6
 801b406:	e02c      	b.n	801b462 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801b408:	7efb      	ldrb	r3, [r7, #27]
 801b40a:	2b60      	cmp	r3, #96	@ 0x60
 801b40c:	d905      	bls.n	801b41a <create_name+0xce>
 801b40e:	7efb      	ldrb	r3, [r7, #27]
 801b410:	2b7a      	cmp	r3, #122	@ 0x7a
 801b412:	d802      	bhi.n	801b41a <create_name+0xce>
 801b414:	7efb      	ldrb	r3, [r7, #27]
 801b416:	3b20      	subs	r3, #32
 801b418:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801b41a:	693b      	ldr	r3, [r7, #16]
 801b41c:	1c5a      	adds	r2, r3, #1
 801b41e:	613a      	str	r2, [r7, #16]
 801b420:	68ba      	ldr	r2, [r7, #8]
 801b422:	4413      	add	r3, r2
 801b424:	7efa      	ldrb	r2, [r7, #27]
 801b426:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801b428:	e7a6      	b.n	801b378 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801b42a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801b42c:	68fa      	ldr	r2, [r7, #12]
 801b42e:	69fb      	ldr	r3, [r7, #28]
 801b430:	441a      	add	r2, r3
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801b436:	693b      	ldr	r3, [r7, #16]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d101      	bne.n	801b440 <create_name+0xf4>
 801b43c:	2306      	movs	r3, #6
 801b43e:	e010      	b.n	801b462 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	781b      	ldrb	r3, [r3, #0]
 801b444:	2be5      	cmp	r3, #229	@ 0xe5
 801b446:	d102      	bne.n	801b44e <create_name+0x102>
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	2205      	movs	r2, #5
 801b44c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801b44e:	7efb      	ldrb	r3, [r7, #27]
 801b450:	2b20      	cmp	r3, #32
 801b452:	d801      	bhi.n	801b458 <create_name+0x10c>
 801b454:	2204      	movs	r2, #4
 801b456:	e000      	b.n	801b45a <create_name+0x10e>
 801b458:	2200      	movs	r2, #0
 801b45a:	68bb      	ldr	r3, [r7, #8]
 801b45c:	330b      	adds	r3, #11
 801b45e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801b460:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801b462:	4618      	mov	r0, r3
 801b464:	3720      	adds	r7, #32
 801b466:	46bd      	mov	sp, r7
 801b468:	bd80      	pop	{r7, pc}
 801b46a:	bf00      	nop
 801b46c:	0803165c 	.word	0x0803165c
 801b470:	0801e624 	.word	0x0801e624

0801b474 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b086      	sub	sp, #24
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
 801b47c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801b482:	693b      	ldr	r3, [r7, #16]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801b488:	e002      	b.n	801b490 <follow_path+0x1c>
 801b48a:	683b      	ldr	r3, [r7, #0]
 801b48c:	3301      	adds	r3, #1
 801b48e:	603b      	str	r3, [r7, #0]
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	781b      	ldrb	r3, [r3, #0]
 801b494:	2b2f      	cmp	r3, #47	@ 0x2f
 801b496:	d0f8      	beq.n	801b48a <follow_path+0x16>
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	781b      	ldrb	r3, [r3, #0]
 801b49c:	2b5c      	cmp	r3, #92	@ 0x5c
 801b49e:	d0f4      	beq.n	801b48a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	781b      	ldrb	r3, [r3, #0]
 801b4aa:	2b1f      	cmp	r3, #31
 801b4ac:	d80a      	bhi.n	801b4c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	2280      	movs	r2, #128	@ 0x80
 801b4b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801b4b6:	2100      	movs	r1, #0
 801b4b8:	6878      	ldr	r0, [r7, #4]
 801b4ba:	f7ff fc3c 	bl	801ad36 <dir_sdi>
 801b4be:	4603      	mov	r3, r0
 801b4c0:	75fb      	strb	r3, [r7, #23]
 801b4c2:	e043      	b.n	801b54c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b4c4:	463b      	mov	r3, r7
 801b4c6:	4619      	mov	r1, r3
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f7ff ff3f 	bl	801b34c <create_name>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b4d2:	7dfb      	ldrb	r3, [r7, #23]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d134      	bne.n	801b542 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801b4d8:	6878      	ldr	r0, [r7, #4]
 801b4da:	f7ff fe4f 	bl	801b17c <dir_find>
 801b4de:	4603      	mov	r3, r0
 801b4e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801b4e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801b4ea:	7dfb      	ldrb	r3, [r7, #23]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d00a      	beq.n	801b506 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801b4f0:	7dfb      	ldrb	r3, [r7, #23]
 801b4f2:	2b04      	cmp	r3, #4
 801b4f4:	d127      	bne.n	801b546 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801b4f6:	7afb      	ldrb	r3, [r7, #11]
 801b4f8:	f003 0304 	and.w	r3, r3, #4
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d122      	bne.n	801b546 <follow_path+0xd2>
 801b500:	2305      	movs	r3, #5
 801b502:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801b504:	e01f      	b.n	801b546 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b506:	7afb      	ldrb	r3, [r7, #11]
 801b508:	f003 0304 	and.w	r3, r3, #4
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d11c      	bne.n	801b54a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801b510:	693b      	ldr	r3, [r7, #16]
 801b512:	799b      	ldrb	r3, [r3, #6]
 801b514:	f003 0310 	and.w	r3, r3, #16
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d102      	bne.n	801b522 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801b51c:	2305      	movs	r3, #5
 801b51e:	75fb      	strb	r3, [r7, #23]
 801b520:	e014      	b.n	801b54c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	695b      	ldr	r3, [r3, #20]
 801b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b530:	4413      	add	r3, r2
 801b532:	4619      	mov	r1, r3
 801b534:	68f8      	ldr	r0, [r7, #12]
 801b536:	f7ff fd85 	bl	801b044 <ld_clust>
 801b53a:	4602      	mov	r2, r0
 801b53c:	693b      	ldr	r3, [r7, #16]
 801b53e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b540:	e7c0      	b.n	801b4c4 <follow_path+0x50>
			if (res != FR_OK) break;
 801b542:	bf00      	nop
 801b544:	e002      	b.n	801b54c <follow_path+0xd8>
				break;
 801b546:	bf00      	nop
 801b548:	e000      	b.n	801b54c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b54a:	bf00      	nop
			}
		}
	}

	return res;
 801b54c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b54e:	4618      	mov	r0, r3
 801b550:	3718      	adds	r7, #24
 801b552:	46bd      	mov	sp, r7
 801b554:	bd80      	pop	{r7, pc}

0801b556 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801b556:	b480      	push	{r7}
 801b558:	b087      	sub	sp, #28
 801b55a:	af00      	add	r7, sp, #0
 801b55c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801b55e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b562:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d031      	beq.n	801b5d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	617b      	str	r3, [r7, #20]
 801b572:	e002      	b.n	801b57a <get_ldnumber+0x24>
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	3301      	adds	r3, #1
 801b578:	617b      	str	r3, [r7, #20]
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	781b      	ldrb	r3, [r3, #0]
 801b57e:	2b20      	cmp	r3, #32
 801b580:	d903      	bls.n	801b58a <get_ldnumber+0x34>
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	781b      	ldrb	r3, [r3, #0]
 801b586:	2b3a      	cmp	r3, #58	@ 0x3a
 801b588:	d1f4      	bne.n	801b574 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801b58a:	697b      	ldr	r3, [r7, #20]
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	2b3a      	cmp	r3, #58	@ 0x3a
 801b590:	d11c      	bne.n	801b5cc <get_ldnumber+0x76>
			tp = *path;
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	1c5a      	adds	r2, r3, #1
 801b59c:	60fa      	str	r2, [r7, #12]
 801b59e:	781b      	ldrb	r3, [r3, #0]
 801b5a0:	3b30      	subs	r3, #48	@ 0x30
 801b5a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801b5a4:	68bb      	ldr	r3, [r7, #8]
 801b5a6:	2b09      	cmp	r3, #9
 801b5a8:	d80e      	bhi.n	801b5c8 <get_ldnumber+0x72>
 801b5aa:	68fa      	ldr	r2, [r7, #12]
 801b5ac:	697b      	ldr	r3, [r7, #20]
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d10a      	bne.n	801b5c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801b5b2:	68bb      	ldr	r3, [r7, #8]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d107      	bne.n	801b5c8 <get_ldnumber+0x72>
					vol = (int)i;
 801b5b8:	68bb      	ldr	r3, [r7, #8]
 801b5ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801b5bc:	697b      	ldr	r3, [r7, #20]
 801b5be:	3301      	adds	r3, #1
 801b5c0:	617b      	str	r3, [r7, #20]
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	697a      	ldr	r2, [r7, #20]
 801b5c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	e002      	b.n	801b5d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801b5d0:	693b      	ldr	r3, [r7, #16]
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	371c      	adds	r7, #28
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5dc:	4770      	bx	lr
	...

0801b5e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b082      	sub	sp, #8
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
 801b5e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	2200      	movs	r2, #0
 801b5ee:	70da      	strb	r2, [r3, #3]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b5f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801b5f8:	6839      	ldr	r1, [r7, #0]
 801b5fa:	6878      	ldr	r0, [r7, #4]
 801b5fc:	f7ff f81e 	bl	801a63c <move_window>
 801b600:	4603      	mov	r3, r0
 801b602:	2b00      	cmp	r3, #0
 801b604:	d001      	beq.n	801b60a <check_fs+0x2a>
 801b606:	2304      	movs	r3, #4
 801b608:	e038      	b.n	801b67c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	3330      	adds	r3, #48	@ 0x30
 801b60e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b612:	4618      	mov	r0, r3
 801b614:	f7fe fd60 	bl	801a0d8 <ld_word>
 801b618:	4603      	mov	r3, r0
 801b61a:	461a      	mov	r2, r3
 801b61c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b620:	429a      	cmp	r2, r3
 801b622:	d001      	beq.n	801b628 <check_fs+0x48>
 801b624:	2303      	movs	r3, #3
 801b626:	e029      	b.n	801b67c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b62e:	2be9      	cmp	r3, #233	@ 0xe9
 801b630:	d009      	beq.n	801b646 <check_fs+0x66>
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b638:	2beb      	cmp	r3, #235	@ 0xeb
 801b63a:	d11e      	bne.n	801b67a <check_fs+0x9a>
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801b642:	2b90      	cmp	r3, #144	@ 0x90
 801b644:	d119      	bne.n	801b67a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	3330      	adds	r3, #48	@ 0x30
 801b64a:	3336      	adds	r3, #54	@ 0x36
 801b64c:	4618      	mov	r0, r3
 801b64e:	f7fe fd5c 	bl	801a10a <ld_dword>
 801b652:	4603      	mov	r3, r0
 801b654:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801b658:	4a0a      	ldr	r2, [pc, #40]	@ (801b684 <check_fs+0xa4>)
 801b65a:	4293      	cmp	r3, r2
 801b65c:	d101      	bne.n	801b662 <check_fs+0x82>
 801b65e:	2300      	movs	r3, #0
 801b660:	e00c      	b.n	801b67c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	3330      	adds	r3, #48	@ 0x30
 801b666:	3352      	adds	r3, #82	@ 0x52
 801b668:	4618      	mov	r0, r3
 801b66a:	f7fe fd4e 	bl	801a10a <ld_dword>
 801b66e:	4603      	mov	r3, r0
 801b670:	4a05      	ldr	r2, [pc, #20]	@ (801b688 <check_fs+0xa8>)
 801b672:	4293      	cmp	r3, r2
 801b674:	d101      	bne.n	801b67a <check_fs+0x9a>
 801b676:	2300      	movs	r3, #0
 801b678:	e000      	b.n	801b67c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b67a:	2302      	movs	r3, #2
}
 801b67c:	4618      	mov	r0, r3
 801b67e:	3708      	adds	r7, #8
 801b680:	46bd      	mov	sp, r7
 801b682:	bd80      	pop	{r7, pc}
 801b684:	00544146 	.word	0x00544146
 801b688:	33544146 	.word	0x33544146

0801b68c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b096      	sub	sp, #88	@ 0x58
 801b690:	af00      	add	r7, sp, #0
 801b692:	60f8      	str	r0, [r7, #12]
 801b694:	60b9      	str	r1, [r7, #8]
 801b696:	4613      	mov	r3, r2
 801b698:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b69a:	68bb      	ldr	r3, [r7, #8]
 801b69c:	2200      	movs	r2, #0
 801b69e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b6a0:	68f8      	ldr	r0, [r7, #12]
 801b6a2:	f7ff ff58 	bl	801b556 <get_ldnumber>
 801b6a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	da01      	bge.n	801b6b2 <find_volume+0x26>
 801b6ae:	230b      	movs	r3, #11
 801b6b0:	e22d      	b.n	801bb0e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b6b2:	4aa1      	ldr	r2, [pc, #644]	@ (801b938 <find_volume+0x2ac>)
 801b6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d101      	bne.n	801b6c6 <find_volume+0x3a>
 801b6c2:	230c      	movs	r3, #12
 801b6c4:	e223      	b.n	801bb0e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b6c6:	68bb      	ldr	r3, [r7, #8]
 801b6c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b6ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b6cc:	79fb      	ldrb	r3, [r7, #7]
 801b6ce:	f023 0301 	bic.w	r3, r3, #1
 801b6d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6d6:	781b      	ldrb	r3, [r3, #0]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d01a      	beq.n	801b712 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6de:	785b      	ldrb	r3, [r3, #1]
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	f7fe fc59 	bl	8019f98 <disk_status>
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b6ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b6f0:	f003 0301 	and.w	r3, r3, #1
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d10c      	bne.n	801b712 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b6f8:	79fb      	ldrb	r3, [r7, #7]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d007      	beq.n	801b70e <find_volume+0x82>
 801b6fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b702:	f003 0304 	and.w	r3, r3, #4
 801b706:	2b00      	cmp	r3, #0
 801b708:	d001      	beq.n	801b70e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b70a:	230a      	movs	r3, #10
 801b70c:	e1ff      	b.n	801bb0e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801b70e:	2300      	movs	r3, #0
 801b710:	e1fd      	b.n	801bb0e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b714:	2200      	movs	r2, #0
 801b716:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b71a:	b2da      	uxtb	r2, r3
 801b71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b71e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b722:	785b      	ldrb	r3, [r3, #1]
 801b724:	4618      	mov	r0, r3
 801b726:	f7fe fc51 	bl	8019fcc <disk_initialize>
 801b72a:	4603      	mov	r3, r0
 801b72c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b730:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b734:	f003 0301 	and.w	r3, r3, #1
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d001      	beq.n	801b740 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b73c:	2303      	movs	r3, #3
 801b73e:	e1e6      	b.n	801bb0e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b740:	79fb      	ldrb	r3, [r7, #7]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d007      	beq.n	801b756 <find_volume+0xca>
 801b746:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b74a:	f003 0304 	and.w	r3, r3, #4
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d001      	beq.n	801b756 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b752:	230a      	movs	r3, #10
 801b754:	e1db      	b.n	801bb0e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b756:	2300      	movs	r3, #0
 801b758:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b75a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b75c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b75e:	f7ff ff3f 	bl	801b5e0 <check_fs>
 801b762:	4603      	mov	r3, r0
 801b764:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b76c:	2b02      	cmp	r3, #2
 801b76e:	d149      	bne.n	801b804 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b770:	2300      	movs	r3, #0
 801b772:	643b      	str	r3, [r7, #64]	@ 0x40
 801b774:	e01e      	b.n	801b7b4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b778:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b77c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b77e:	011b      	lsls	r3, r3, #4
 801b780:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b784:	4413      	add	r3, r2
 801b786:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b78a:	3304      	adds	r3, #4
 801b78c:	781b      	ldrb	r3, [r3, #0]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d006      	beq.n	801b7a0 <find_volume+0x114>
 801b792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b794:	3308      	adds	r3, #8
 801b796:	4618      	mov	r0, r3
 801b798:	f7fe fcb7 	bl	801a10a <ld_dword>
 801b79c:	4602      	mov	r2, r0
 801b79e:	e000      	b.n	801b7a2 <find_volume+0x116>
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7a4:	009b      	lsls	r3, r3, #2
 801b7a6:	3358      	adds	r3, #88	@ 0x58
 801b7a8:	443b      	add	r3, r7
 801b7aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7b0:	3301      	adds	r3, #1
 801b7b2:	643b      	str	r3, [r7, #64]	@ 0x40
 801b7b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7b6:	2b03      	cmp	r3, #3
 801b7b8:	d9dd      	bls.n	801b776 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b7ba:	2300      	movs	r3, #0
 801b7bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d002      	beq.n	801b7ca <find_volume+0x13e>
 801b7c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7c6:	3b01      	subs	r3, #1
 801b7c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7cc:	009b      	lsls	r3, r3, #2
 801b7ce:	3358      	adds	r3, #88	@ 0x58
 801b7d0:	443b      	add	r3, r7
 801b7d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b7d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d005      	beq.n	801b7ea <find_volume+0x15e>
 801b7de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b7e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b7e2:	f7ff fefd 	bl	801b5e0 <check_fs>
 801b7e6:	4603      	mov	r3, r0
 801b7e8:	e000      	b.n	801b7ec <find_volume+0x160>
 801b7ea:	2303      	movs	r3, #3
 801b7ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b7f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b7f4:	2b01      	cmp	r3, #1
 801b7f6:	d905      	bls.n	801b804 <find_volume+0x178>
 801b7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7fa:	3301      	adds	r3, #1
 801b7fc:	643b      	str	r3, [r7, #64]	@ 0x40
 801b7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b800:	2b03      	cmp	r3, #3
 801b802:	d9e2      	bls.n	801b7ca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b804:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b808:	2b04      	cmp	r3, #4
 801b80a:	d101      	bne.n	801b810 <find_volume+0x184>
 801b80c:	2301      	movs	r3, #1
 801b80e:	e17e      	b.n	801bb0e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b814:	2b01      	cmp	r3, #1
 801b816:	d901      	bls.n	801b81c <find_volume+0x190>
 801b818:	230d      	movs	r3, #13
 801b81a:	e178      	b.n	801bb0e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b81e:	3330      	adds	r3, #48	@ 0x30
 801b820:	330b      	adds	r3, #11
 801b822:	4618      	mov	r0, r3
 801b824:	f7fe fc58 	bl	801a0d8 <ld_word>
 801b828:	4603      	mov	r3, r0
 801b82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b82e:	d001      	beq.n	801b834 <find_volume+0x1a8>
 801b830:	230d      	movs	r3, #13
 801b832:	e16c      	b.n	801bb0e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b836:	3330      	adds	r3, #48	@ 0x30
 801b838:	3316      	adds	r3, #22
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7fe fc4c 	bl	801a0d8 <ld_word>
 801b840:	4603      	mov	r3, r0
 801b842:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b846:	2b00      	cmp	r3, #0
 801b848:	d106      	bne.n	801b858 <find_volume+0x1cc>
 801b84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b84c:	3330      	adds	r3, #48	@ 0x30
 801b84e:	3324      	adds	r3, #36	@ 0x24
 801b850:	4618      	mov	r0, r3
 801b852:	f7fe fc5a 	bl	801a10a <ld_dword>
 801b856:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b85a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b85c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b860:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801b864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b866:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b86a:	789b      	ldrb	r3, [r3, #2]
 801b86c:	2b01      	cmp	r3, #1
 801b86e:	d005      	beq.n	801b87c <find_volume+0x1f0>
 801b870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b872:	789b      	ldrb	r3, [r3, #2]
 801b874:	2b02      	cmp	r3, #2
 801b876:	d001      	beq.n	801b87c <find_volume+0x1f0>
 801b878:	230d      	movs	r3, #13
 801b87a:	e148      	b.n	801bb0e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b87e:	789b      	ldrb	r3, [r3, #2]
 801b880:	461a      	mov	r2, r3
 801b882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b884:	fb02 f303 	mul.w	r3, r2, r3
 801b888:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b88c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b890:	461a      	mov	r2, r3
 801b892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b894:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b898:	895b      	ldrh	r3, [r3, #10]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d008      	beq.n	801b8b0 <find_volume+0x224>
 801b89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8a0:	895b      	ldrh	r3, [r3, #10]
 801b8a2:	461a      	mov	r2, r3
 801b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8a6:	895b      	ldrh	r3, [r3, #10]
 801b8a8:	3b01      	subs	r3, #1
 801b8aa:	4013      	ands	r3, r2
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d001      	beq.n	801b8b4 <find_volume+0x228>
 801b8b0:	230d      	movs	r3, #13
 801b8b2:	e12c      	b.n	801bb0e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8b6:	3330      	adds	r3, #48	@ 0x30
 801b8b8:	3311      	adds	r3, #17
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7fe fc0c 	bl	801a0d8 <ld_word>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	461a      	mov	r2, r3
 801b8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8ca:	891b      	ldrh	r3, [r3, #8]
 801b8cc:	f003 030f 	and.w	r3, r3, #15
 801b8d0:	b29b      	uxth	r3, r3
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d001      	beq.n	801b8da <find_volume+0x24e>
 801b8d6:	230d      	movs	r3, #13
 801b8d8:	e119      	b.n	801bb0e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8dc:	3330      	adds	r3, #48	@ 0x30
 801b8de:	3313      	adds	r3, #19
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7fe fbf9 	bl	801a0d8 <ld_word>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b8ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d106      	bne.n	801b8fe <find_volume+0x272>
 801b8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8f2:	3330      	adds	r3, #48	@ 0x30
 801b8f4:	3320      	adds	r3, #32
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7fe fc07 	bl	801a10a <ld_dword>
 801b8fc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b900:	3330      	adds	r3, #48	@ 0x30
 801b902:	330e      	adds	r3, #14
 801b904:	4618      	mov	r0, r3
 801b906:	f7fe fbe7 	bl	801a0d8 <ld_word>
 801b90a:	4603      	mov	r3, r0
 801b90c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b90e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b910:	2b00      	cmp	r3, #0
 801b912:	d101      	bne.n	801b918 <find_volume+0x28c>
 801b914:	230d      	movs	r3, #13
 801b916:	e0fa      	b.n	801bb0e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b918:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b91a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b91c:	4413      	add	r3, r2
 801b91e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b920:	8912      	ldrh	r2, [r2, #8]
 801b922:	0912      	lsrs	r2, r2, #4
 801b924:	b292      	uxth	r2, r2
 801b926:	4413      	add	r3, r2
 801b928:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b92a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b92e:	429a      	cmp	r2, r3
 801b930:	d204      	bcs.n	801b93c <find_volume+0x2b0>
 801b932:	230d      	movs	r3, #13
 801b934:	e0eb      	b.n	801bb0e <find_volume+0x482>
 801b936:	bf00      	nop
 801b938:	240088d8 	.word	0x240088d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b93c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b940:	1ad3      	subs	r3, r2, r3
 801b942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b944:	8952      	ldrh	r2, [r2, #10]
 801b946:	fbb3 f3f2 	udiv	r3, r3, r2
 801b94a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d101      	bne.n	801b956 <find_volume+0x2ca>
 801b952:	230d      	movs	r3, #13
 801b954:	e0db      	b.n	801bb0e <find_volume+0x482>
		fmt = FS_FAT32;
 801b956:	2303      	movs	r3, #3
 801b958:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b962:	4293      	cmp	r3, r2
 801b964:	d802      	bhi.n	801b96c <find_volume+0x2e0>
 801b966:	2302      	movs	r3, #2
 801b968:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b96e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b972:	4293      	cmp	r3, r2
 801b974:	d802      	bhi.n	801b97c <find_volume+0x2f0>
 801b976:	2301      	movs	r3, #1
 801b978:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b97e:	1c9a      	adds	r2, r3, #2
 801b980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b982:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b986:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b988:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b98a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b98c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b98e:	441a      	add	r2, r3
 801b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b992:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801b994:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b998:	441a      	add	r2, r3
 801b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b99c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801b99e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b9a2:	2b03      	cmp	r3, #3
 801b9a4:	d11e      	bne.n	801b9e4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9a8:	3330      	adds	r3, #48	@ 0x30
 801b9aa:	332a      	adds	r3, #42	@ 0x2a
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f7fe fb93 	bl	801a0d8 <ld_word>
 801b9b2:	4603      	mov	r3, r0
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d001      	beq.n	801b9bc <find_volume+0x330>
 801b9b8:	230d      	movs	r3, #13
 801b9ba:	e0a8      	b.n	801bb0e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9be:	891b      	ldrh	r3, [r3, #8]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d001      	beq.n	801b9c8 <find_volume+0x33c>
 801b9c4:	230d      	movs	r3, #13
 801b9c6:	e0a2      	b.n	801bb0e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9ca:	3330      	adds	r3, #48	@ 0x30
 801b9cc:	332c      	adds	r3, #44	@ 0x2c
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	f7fe fb9b 	bl	801a10a <ld_dword>
 801b9d4:	4602      	mov	r2, r0
 801b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9d8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9dc:	695b      	ldr	r3, [r3, #20]
 801b9de:	009b      	lsls	r3, r3, #2
 801b9e0:	647b      	str	r3, [r7, #68]	@ 0x44
 801b9e2:	e01f      	b.n	801ba24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9e6:	891b      	ldrh	r3, [r3, #8]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d101      	bne.n	801b9f0 <find_volume+0x364>
 801b9ec:	230d      	movs	r3, #13
 801b9ee:	e08e      	b.n	801bb0e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9f2:	6a1a      	ldr	r2, [r3, #32]
 801b9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9f6:	441a      	add	r2, r3
 801b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9fa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b9fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ba00:	2b02      	cmp	r3, #2
 801ba02:	d103      	bne.n	801ba0c <find_volume+0x380>
 801ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba06:	695b      	ldr	r3, [r3, #20]
 801ba08:	005b      	lsls	r3, r3, #1
 801ba0a:	e00a      	b.n	801ba22 <find_volume+0x396>
 801ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba0e:	695a      	ldr	r2, [r3, #20]
 801ba10:	4613      	mov	r3, r2
 801ba12:	005b      	lsls	r3, r3, #1
 801ba14:	4413      	add	r3, r2
 801ba16:	085a      	lsrs	r2, r3, #1
 801ba18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba1a:	695b      	ldr	r3, [r3, #20]
 801ba1c:	f003 0301 	and.w	r3, r3, #1
 801ba20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801ba22:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba26:	699a      	ldr	r2, [r3, #24]
 801ba28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ba2a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801ba2e:	0a5b      	lsrs	r3, r3, #9
 801ba30:	429a      	cmp	r2, r3
 801ba32:	d201      	bcs.n	801ba38 <find_volume+0x3ac>
 801ba34:	230d      	movs	r3, #13
 801ba36:	e06a      	b.n	801bb0e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801ba38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ba3e:	611a      	str	r2, [r3, #16]
 801ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba42:	691a      	ldr	r2, [r3, #16]
 801ba44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba46:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801ba48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba4a:	2280      	movs	r2, #128	@ 0x80
 801ba4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801ba4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ba52:	2b03      	cmp	r3, #3
 801ba54:	d149      	bne.n	801baea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801ba56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba58:	3330      	adds	r3, #48	@ 0x30
 801ba5a:	3330      	adds	r3, #48	@ 0x30
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	f7fe fb3b 	bl	801a0d8 <ld_word>
 801ba62:	4603      	mov	r3, r0
 801ba64:	2b01      	cmp	r3, #1
 801ba66:	d140      	bne.n	801baea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801ba68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ba6a:	3301      	adds	r3, #1
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ba70:	f7fe fde4 	bl	801a63c <move_window>
 801ba74:	4603      	mov	r3, r0
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d137      	bne.n	801baea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801ba7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801ba80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba82:	3330      	adds	r3, #48	@ 0x30
 801ba84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ba88:	4618      	mov	r0, r3
 801ba8a:	f7fe fb25 	bl	801a0d8 <ld_word>
 801ba8e:	4603      	mov	r3, r0
 801ba90:	461a      	mov	r2, r3
 801ba92:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d127      	bne.n	801baea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801ba9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba9c:	3330      	adds	r3, #48	@ 0x30
 801ba9e:	4618      	mov	r0, r3
 801baa0:	f7fe fb33 	bl	801a10a <ld_dword>
 801baa4:	4603      	mov	r3, r0
 801baa6:	4a1c      	ldr	r2, [pc, #112]	@ (801bb18 <find_volume+0x48c>)
 801baa8:	4293      	cmp	r3, r2
 801baaa:	d11e      	bne.n	801baea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801baae:	3330      	adds	r3, #48	@ 0x30
 801bab0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7fe fb28 	bl	801a10a <ld_dword>
 801baba:	4603      	mov	r3, r0
 801babc:	4a17      	ldr	r2, [pc, #92]	@ (801bb1c <find_volume+0x490>)
 801babe:	4293      	cmp	r3, r2
 801bac0:	d113      	bne.n	801baea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801bac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bac4:	3330      	adds	r3, #48	@ 0x30
 801bac6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801baca:	4618      	mov	r0, r3
 801bacc:	f7fe fb1d 	bl	801a10a <ld_dword>
 801bad0:	4602      	mov	r2, r0
 801bad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bad4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bad8:	3330      	adds	r3, #48	@ 0x30
 801bada:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801bade:	4618      	mov	r0, r3
 801bae0:	f7fe fb13 	bl	801a10a <ld_dword>
 801bae4:	4602      	mov	r2, r0
 801bae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bae8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801baea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801baec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801baf0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801baf2:	4b0b      	ldr	r3, [pc, #44]	@ (801bb20 <find_volume+0x494>)
 801baf4:	881b      	ldrh	r3, [r3, #0]
 801baf6:	3301      	adds	r3, #1
 801baf8:	b29a      	uxth	r2, r3
 801bafa:	4b09      	ldr	r3, [pc, #36]	@ (801bb20 <find_volume+0x494>)
 801bafc:	801a      	strh	r2, [r3, #0]
 801bafe:	4b08      	ldr	r3, [pc, #32]	@ (801bb20 <find_volume+0x494>)
 801bb00:	881a      	ldrh	r2, [r3, #0]
 801bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801bb06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bb08:	f7fe fd30 	bl	801a56c <clear_lock>
#endif
	return FR_OK;
 801bb0c:	2300      	movs	r3, #0
}
 801bb0e:	4618      	mov	r0, r3
 801bb10:	3758      	adds	r7, #88	@ 0x58
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	41615252 	.word	0x41615252
 801bb1c:	61417272 	.word	0x61417272
 801bb20:	240088dc 	.word	0x240088dc

0801bb24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b084      	sub	sp, #16
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	6078      	str	r0, [r7, #4]
 801bb2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801bb2e:	2309      	movs	r3, #9
 801bb30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d01c      	beq.n	801bb72 <validate+0x4e>
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d018      	beq.n	801bb72 <validate+0x4e>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	781b      	ldrb	r3, [r3, #0]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d013      	beq.n	801bb72 <validate+0x4e>
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	889a      	ldrh	r2, [r3, #4]
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	88db      	ldrh	r3, [r3, #6]
 801bb54:	429a      	cmp	r2, r3
 801bb56:	d10c      	bne.n	801bb72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	785b      	ldrb	r3, [r3, #1]
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f7fe fa1a 	bl	8019f98 <disk_status>
 801bb64:	4603      	mov	r3, r0
 801bb66:	f003 0301 	and.w	r3, r3, #1
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d101      	bne.n	801bb72 <validate+0x4e>
			res = FR_OK;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801bb72:	7bfb      	ldrb	r3, [r7, #15]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d102      	bne.n	801bb7e <validate+0x5a>
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	e000      	b.n	801bb80 <validate+0x5c>
 801bb7e:	2300      	movs	r3, #0
 801bb80:	683a      	ldr	r2, [r7, #0]
 801bb82:	6013      	str	r3, [r2, #0]
	return res;
 801bb84:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb86:	4618      	mov	r0, r3
 801bb88:	3710      	adds	r7, #16
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd80      	pop	{r7, pc}
	...

0801bb90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b088      	sub	sp, #32
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	60f8      	str	r0, [r7, #12]
 801bb98:	60b9      	str	r1, [r7, #8]
 801bb9a:	4613      	mov	r3, r2
 801bb9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801bb9e:	68bb      	ldr	r3, [r7, #8]
 801bba0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801bba2:	f107 0310 	add.w	r3, r7, #16
 801bba6:	4618      	mov	r0, r3
 801bba8:	f7ff fcd5 	bl	801b556 <get_ldnumber>
 801bbac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801bbae:	69fb      	ldr	r3, [r7, #28]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	da01      	bge.n	801bbb8 <f_mount+0x28>
 801bbb4:	230b      	movs	r3, #11
 801bbb6:	e02b      	b.n	801bc10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801bbb8:	4a17      	ldr	r2, [pc, #92]	@ (801bc18 <f_mount+0x88>)
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bbc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801bbc2:	69bb      	ldr	r3, [r7, #24]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d005      	beq.n	801bbd4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801bbc8:	69b8      	ldr	r0, [r7, #24]
 801bbca:	f7fe fccf 	bl	801a56c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801bbce:	69bb      	ldr	r3, [r7, #24]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d002      	beq.n	801bbe0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	2200      	movs	r2, #0
 801bbde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801bbe0:	68fa      	ldr	r2, [r7, #12]
 801bbe2:	490d      	ldr	r1, [pc, #52]	@ (801bc18 <f_mount+0x88>)
 801bbe4:	69fb      	ldr	r3, [r7, #28]
 801bbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801bbea:	68fb      	ldr	r3, [r7, #12]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d002      	beq.n	801bbf6 <f_mount+0x66>
 801bbf0:	79fb      	ldrb	r3, [r7, #7]
 801bbf2:	2b01      	cmp	r3, #1
 801bbf4:	d001      	beq.n	801bbfa <f_mount+0x6a>
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	e00a      	b.n	801bc10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801bbfa:	f107 010c 	add.w	r1, r7, #12
 801bbfe:	f107 0308 	add.w	r3, r7, #8
 801bc02:	2200      	movs	r2, #0
 801bc04:	4618      	mov	r0, r3
 801bc06:	f7ff fd41 	bl	801b68c <find_volume>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801bc0e:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc10:	4618      	mov	r0, r3
 801bc12:	3720      	adds	r7, #32
 801bc14:	46bd      	mov	sp, r7
 801bc16:	bd80      	pop	{r7, pc}
 801bc18:	240088d8 	.word	0x240088d8

0801bc1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b098      	sub	sp, #96	@ 0x60
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	60f8      	str	r0, [r7, #12]
 801bc24:	60b9      	str	r1, [r7, #8]
 801bc26:	4613      	mov	r3, r2
 801bc28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d101      	bne.n	801bc34 <f_open+0x18>
 801bc30:	2309      	movs	r3, #9
 801bc32:	e1a9      	b.n	801bf88 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801bc34:	79fb      	ldrb	r3, [r7, #7]
 801bc36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bc3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801bc3c:	79fa      	ldrb	r2, [r7, #7]
 801bc3e:	f107 0110 	add.w	r1, r7, #16
 801bc42:	f107 0308 	add.w	r3, r7, #8
 801bc46:	4618      	mov	r0, r3
 801bc48:	f7ff fd20 	bl	801b68c <find_volume>
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801bc52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	f040 818d 	bne.w	801bf76 <f_open+0x35a>
		dj.obj.fs = fs;
 801bc5c:	693b      	ldr	r3, [r7, #16]
 801bc5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bc60:	68ba      	ldr	r2, [r7, #8]
 801bc62:	f107 0314 	add.w	r3, r7, #20
 801bc66:	4611      	mov	r1, r2
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f7ff fc03 	bl	801b474 <follow_path>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801bc74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d118      	bne.n	801bcae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801bc7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801bc80:	b25b      	sxtb	r3, r3
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	da03      	bge.n	801bc8e <f_open+0x72>
				res = FR_INVALID_NAME;
 801bc86:	2306      	movs	r3, #6
 801bc88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801bc8c:	e00f      	b.n	801bcae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801bc8e:	79fb      	ldrb	r3, [r7, #7]
 801bc90:	2b01      	cmp	r3, #1
 801bc92:	bf8c      	ite	hi
 801bc94:	2301      	movhi	r3, #1
 801bc96:	2300      	movls	r3, #0
 801bc98:	b2db      	uxtb	r3, r3
 801bc9a:	461a      	mov	r2, r3
 801bc9c:	f107 0314 	add.w	r3, r7, #20
 801bca0:	4611      	mov	r1, r2
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7fe fb1a 	bl	801a2dc <chk_lock>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801bcae:	79fb      	ldrb	r3, [r7, #7]
 801bcb0:	f003 031c 	and.w	r3, r3, #28
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d07f      	beq.n	801bdb8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801bcb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d017      	beq.n	801bcf0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801bcc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bcc4:	2b04      	cmp	r3, #4
 801bcc6:	d10e      	bne.n	801bce6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801bcc8:	f7fe fb64 	bl	801a394 <enq_lock>
 801bccc:	4603      	mov	r3, r0
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d006      	beq.n	801bce0 <f_open+0xc4>
 801bcd2:	f107 0314 	add.w	r3, r7, #20
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	f7ff faa5 	bl	801b226 <dir_register>
 801bcdc:	4603      	mov	r3, r0
 801bcde:	e000      	b.n	801bce2 <f_open+0xc6>
 801bce0:	2312      	movs	r3, #18
 801bce2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801bce6:	79fb      	ldrb	r3, [r7, #7]
 801bce8:	f043 0308 	orr.w	r3, r3, #8
 801bcec:	71fb      	strb	r3, [r7, #7]
 801bcee:	e010      	b.n	801bd12 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801bcf0:	7ebb      	ldrb	r3, [r7, #26]
 801bcf2:	f003 0311 	and.w	r3, r3, #17
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d003      	beq.n	801bd02 <f_open+0xe6>
					res = FR_DENIED;
 801bcfa:	2307      	movs	r3, #7
 801bcfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801bd00:	e007      	b.n	801bd12 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801bd02:	79fb      	ldrb	r3, [r7, #7]
 801bd04:	f003 0304 	and.w	r3, r3, #4
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d002      	beq.n	801bd12 <f_open+0xf6>
 801bd0c:	2308      	movs	r3, #8
 801bd0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801bd12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d168      	bne.n	801bdec <f_open+0x1d0>
 801bd1a:	79fb      	ldrb	r3, [r7, #7]
 801bd1c:	f003 0308 	and.w	r3, r3, #8
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d063      	beq.n	801bdec <f_open+0x1d0>
				dw = GET_FATTIME();
 801bd24:	f7f4 fffa 	bl	8010d1c <get_fattime>
 801bd28:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801bd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd2c:	330e      	adds	r3, #14
 801bd2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bd30:	4618      	mov	r0, r3
 801bd32:	f7fe fa28 	bl	801a186 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801bd36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd38:	3316      	adds	r3, #22
 801bd3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f7fe fa22 	bl	801a186 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801bd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd44:	330b      	adds	r3, #11
 801bd46:	2220      	movs	r2, #32
 801bd48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801bd4a:	693b      	ldr	r3, [r7, #16]
 801bd4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bd4e:	4611      	mov	r1, r2
 801bd50:	4618      	mov	r0, r3
 801bd52:	f7ff f977 	bl	801b044 <ld_clust>
 801bd56:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801bd58:	693b      	ldr	r3, [r7, #16]
 801bd5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bd5c:	2200      	movs	r2, #0
 801bd5e:	4618      	mov	r0, r3
 801bd60:	f7ff f98f 	bl	801b082 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801bd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd66:	331c      	adds	r3, #28
 801bd68:	2100      	movs	r1, #0
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	f7fe fa0b 	bl	801a186 <st_dword>
					fs->wflag = 1;
 801bd70:	693b      	ldr	r3, [r7, #16]
 801bd72:	2201      	movs	r2, #1
 801bd74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801bd76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d037      	beq.n	801bdec <f_open+0x1d0>
						dw = fs->winsect;
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd80:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801bd82:	f107 0314 	add.w	r3, r7, #20
 801bd86:	2200      	movs	r2, #0
 801bd88:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7fe fea2 	bl	801aad4 <remove_chain>
 801bd90:	4603      	mov	r3, r0
 801bd92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801bd96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d126      	bne.n	801bdec <f_open+0x1d0>
							res = move_window(fs, dw);
 801bd9e:	693b      	ldr	r3, [r7, #16]
 801bda0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bda2:	4618      	mov	r0, r3
 801bda4:	f7fe fc4a 	bl	801a63c <move_window>
 801bda8:	4603      	mov	r3, r0
 801bdaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801bdae:	693b      	ldr	r3, [r7, #16]
 801bdb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801bdb2:	3a01      	subs	r2, #1
 801bdb4:	60da      	str	r2, [r3, #12]
 801bdb6:	e019      	b.n	801bdec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801bdb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d115      	bne.n	801bdec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801bdc0:	7ebb      	ldrb	r3, [r7, #26]
 801bdc2:	f003 0310 	and.w	r3, r3, #16
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d003      	beq.n	801bdd2 <f_open+0x1b6>
					res = FR_NO_FILE;
 801bdca:	2304      	movs	r3, #4
 801bdcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801bdd0:	e00c      	b.n	801bdec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801bdd2:	79fb      	ldrb	r3, [r7, #7]
 801bdd4:	f003 0302 	and.w	r3, r3, #2
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d007      	beq.n	801bdec <f_open+0x1d0>
 801bddc:	7ebb      	ldrb	r3, [r7, #26]
 801bdde:	f003 0301 	and.w	r3, r3, #1
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d002      	beq.n	801bdec <f_open+0x1d0>
						res = FR_DENIED;
 801bde6:	2307      	movs	r3, #7
 801bde8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801bdec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d126      	bne.n	801be42 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801bdf4:	79fb      	ldrb	r3, [r7, #7]
 801bdf6:	f003 0308 	and.w	r3, r3, #8
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d003      	beq.n	801be06 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801bdfe:	79fb      	ldrb	r3, [r7, #7]
 801be00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801be04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801be06:	693b      	ldr	r3, [r7, #16]
 801be08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801be0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801be14:	79fb      	ldrb	r3, [r7, #7]
 801be16:	2b01      	cmp	r3, #1
 801be18:	bf8c      	ite	hi
 801be1a:	2301      	movhi	r3, #1
 801be1c:	2300      	movls	r3, #0
 801be1e:	b2db      	uxtb	r3, r3
 801be20:	461a      	mov	r2, r3
 801be22:	f107 0314 	add.w	r3, r7, #20
 801be26:	4611      	mov	r1, r2
 801be28:	4618      	mov	r0, r3
 801be2a:	f7fe fad5 	bl	801a3d8 <inc_lock>
 801be2e:	4602      	mov	r2, r0
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	691b      	ldr	r3, [r3, #16]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d102      	bne.n	801be42 <f_open+0x226>
 801be3c:	2302      	movs	r3, #2
 801be3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801be42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801be46:	2b00      	cmp	r3, #0
 801be48:	f040 8095 	bne.w	801bf76 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801be50:	4611      	mov	r1, r2
 801be52:	4618      	mov	r0, r3
 801be54:	f7ff f8f6 	bl	801b044 <ld_clust>
 801be58:	4602      	mov	r2, r0
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801be5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801be60:	331c      	adds	r3, #28
 801be62:	4618      	mov	r0, r3
 801be64:	f7fe f951 	bl	801a10a <ld_dword>
 801be68:	4602      	mov	r2, r0
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	2200      	movs	r2, #0
 801be72:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801be74:	693a      	ldr	r2, [r7, #16]
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801be7a:	693b      	ldr	r3, [r7, #16]
 801be7c:	88da      	ldrh	r2, [r3, #6]
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	79fa      	ldrb	r2, [r7, #7]
 801be86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	2200      	movs	r2, #0
 801be8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	2200      	movs	r2, #0
 801be92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	2200      	movs	r2, #0
 801be98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	3330      	adds	r3, #48	@ 0x30
 801be9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bea2:	2100      	movs	r1, #0
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7fe f9bb 	bl	801a220 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801beaa:	79fb      	ldrb	r3, [r7, #7]
 801beac:	f003 0320 	and.w	r3, r3, #32
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d060      	beq.n	801bf76 <f_open+0x35a>
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	68db      	ldr	r3, [r3, #12]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d05c      	beq.n	801bf76 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	68da      	ldr	r2, [r3, #12]
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	895b      	ldrh	r3, [r3, #10]
 801bec8:	025b      	lsls	r3, r3, #9
 801beca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	689b      	ldr	r3, [r3, #8]
 801bed0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	68db      	ldr	r3, [r3, #12]
 801bed6:	657b      	str	r3, [r7, #84]	@ 0x54
 801bed8:	e016      	b.n	801bf08 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801bede:	4618      	mov	r0, r3
 801bee0:	f7fe fc67 	bl	801a7b2 <get_fat>
 801bee4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801bee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bee8:	2b01      	cmp	r3, #1
 801beea:	d802      	bhi.n	801bef2 <f_open+0x2d6>
 801beec:	2302      	movs	r3, #2
 801beee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801bef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bef8:	d102      	bne.n	801bf00 <f_open+0x2e4>
 801befa:	2301      	movs	r3, #1
 801befc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801bf00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bf02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bf04:	1ad3      	subs	r3, r2, r3
 801bf06:	657b      	str	r3, [r7, #84]	@ 0x54
 801bf08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d103      	bne.n	801bf18 <f_open+0x2fc>
 801bf10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bf12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bf14:	429a      	cmp	r2, r3
 801bf16:	d8e0      	bhi.n	801beda <f_open+0x2be>
				}
				fp->clust = clst;
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801bf1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801bf1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d127      	bne.n	801bf76 <f_open+0x35a>
 801bf26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d022      	beq.n	801bf76 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801bf30:	693b      	ldr	r3, [r7, #16]
 801bf32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801bf34:	4618      	mov	r0, r3
 801bf36:	f7fe fc1d 	bl	801a774 <clust2sect>
 801bf3a:	6478      	str	r0, [r7, #68]	@ 0x44
 801bf3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d103      	bne.n	801bf4a <f_open+0x32e>
						res = FR_INT_ERR;
 801bf42:	2302      	movs	r3, #2
 801bf44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801bf48:	e015      	b.n	801bf76 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801bf4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf4c:	0a5a      	lsrs	r2, r3, #9
 801bf4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bf50:	441a      	add	r2, r3
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801bf56:	693b      	ldr	r3, [r7, #16]
 801bf58:	7858      	ldrb	r0, [r3, #1]
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	6a1a      	ldr	r2, [r3, #32]
 801bf64:	2301      	movs	r3, #1
 801bf66:	f7fe f859 	bl	801a01c <disk_read>
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d002      	beq.n	801bf76 <f_open+0x35a>
 801bf70:	2301      	movs	r3, #1
 801bf72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801bf76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d002      	beq.n	801bf84 <f_open+0x368>
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	2200      	movs	r2, #0
 801bf82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801bf84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801bf88:	4618      	mov	r0, r3
 801bf8a:	3760      	adds	r7, #96	@ 0x60
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	bd80      	pop	{r7, pc}

0801bf90 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b08c      	sub	sp, #48	@ 0x30
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	60f8      	str	r0, [r7, #12]
 801bf98:	60b9      	str	r1, [r7, #8]
 801bf9a:	607a      	str	r2, [r7, #4]
 801bf9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801bf9e:	68bb      	ldr	r3, [r7, #8]
 801bfa0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	2200      	movs	r2, #0
 801bfa6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	f107 0210 	add.w	r2, r7, #16
 801bfae:	4611      	mov	r1, r2
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7ff fdb7 	bl	801bb24 <validate>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801bfbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d107      	bne.n	801bfd4 <f_write+0x44>
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	7d5b      	ldrb	r3, [r3, #21]
 801bfc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801bfcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d002      	beq.n	801bfda <f_write+0x4a>
 801bfd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfd8:	e14b      	b.n	801c272 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	7d1b      	ldrb	r3, [r3, #20]
 801bfde:	f003 0302 	and.w	r3, r3, #2
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d101      	bne.n	801bfea <f_write+0x5a>
 801bfe6:	2307      	movs	r3, #7
 801bfe8:	e143      	b.n	801c272 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	699a      	ldr	r2, [r3, #24]
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	441a      	add	r2, r3
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	699b      	ldr	r3, [r3, #24]
 801bff6:	429a      	cmp	r2, r3
 801bff8:	f080 812d 	bcs.w	801c256 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	699b      	ldr	r3, [r3, #24]
 801c000:	43db      	mvns	r3, r3
 801c002:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801c004:	e127      	b.n	801c256 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	699b      	ldr	r3, [r3, #24]
 801c00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c00e:	2b00      	cmp	r3, #0
 801c010:	f040 80e3 	bne.w	801c1da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	699b      	ldr	r3, [r3, #24]
 801c018:	0a5b      	lsrs	r3, r3, #9
 801c01a:	693a      	ldr	r2, [r7, #16]
 801c01c:	8952      	ldrh	r2, [r2, #10]
 801c01e:	3a01      	subs	r2, #1
 801c020:	4013      	ands	r3, r2
 801c022:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801c024:	69bb      	ldr	r3, [r7, #24]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d143      	bne.n	801c0b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	699b      	ldr	r3, [r3, #24]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d10c      	bne.n	801c04c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	689b      	ldr	r3, [r3, #8]
 801c036:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d11a      	bne.n	801c074 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	2100      	movs	r1, #0
 801c042:	4618      	mov	r0, r3
 801c044:	f7fe fdab 	bl	801ab9e <create_chain>
 801c048:	62b8      	str	r0, [r7, #40]	@ 0x28
 801c04a:	e013      	b.n	801c074 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c050:	2b00      	cmp	r3, #0
 801c052:	d007      	beq.n	801c064 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	699b      	ldr	r3, [r3, #24]
 801c058:	4619      	mov	r1, r3
 801c05a:	68f8      	ldr	r0, [r7, #12]
 801c05c:	f7fe fe37 	bl	801acce <clmt_clust>
 801c060:	62b8      	str	r0, [r7, #40]	@ 0x28
 801c062:	e007      	b.n	801c074 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c064:	68fa      	ldr	r2, [r7, #12]
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	69db      	ldr	r3, [r3, #28]
 801c06a:	4619      	mov	r1, r3
 801c06c:	4610      	mov	r0, r2
 801c06e:	f7fe fd96 	bl	801ab9e <create_chain>
 801c072:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c076:	2b00      	cmp	r3, #0
 801c078:	f000 80f2 	beq.w	801c260 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c07e:	2b01      	cmp	r3, #1
 801c080:	d104      	bne.n	801c08c <f_write+0xfc>
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	2202      	movs	r2, #2
 801c086:	755a      	strb	r2, [r3, #21]
 801c088:	2302      	movs	r3, #2
 801c08a:	e0f2      	b.n	801c272 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c08e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c092:	d104      	bne.n	801c09e <f_write+0x10e>
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	2201      	movs	r2, #1
 801c098:	755a      	strb	r2, [r3, #21]
 801c09a:	2301      	movs	r3, #1
 801c09c:	e0e9      	b.n	801c272 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c0a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	689b      	ldr	r3, [r3, #8]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d102      	bne.n	801c0b2 <f_write+0x122>
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c0b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	7d1b      	ldrb	r3, [r3, #20]
 801c0b6:	b25b      	sxtb	r3, r3
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	da18      	bge.n	801c0ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c0bc:	693b      	ldr	r3, [r7, #16]
 801c0be:	7858      	ldrb	r0, [r3, #1]
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	6a1a      	ldr	r2, [r3, #32]
 801c0ca:	2301      	movs	r3, #1
 801c0cc:	f7fd ffc6 	bl	801a05c <disk_write>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d004      	beq.n	801c0e0 <f_write+0x150>
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	2201      	movs	r2, #1
 801c0da:	755a      	strb	r2, [r3, #21]
 801c0dc:	2301      	movs	r3, #1
 801c0de:	e0c8      	b.n	801c272 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	7d1b      	ldrb	r3, [r3, #20]
 801c0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c0e8:	b2da      	uxtb	r2, r3
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c0ee:	693a      	ldr	r2, [r7, #16]
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	69db      	ldr	r3, [r3, #28]
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	4610      	mov	r0, r2
 801c0f8:	f7fe fb3c 	bl	801a774 <clust2sect>
 801c0fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c0fe:	697b      	ldr	r3, [r7, #20]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d104      	bne.n	801c10e <f_write+0x17e>
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	2202      	movs	r2, #2
 801c108:	755a      	strb	r2, [r3, #21]
 801c10a:	2302      	movs	r3, #2
 801c10c:	e0b1      	b.n	801c272 <f_write+0x2e2>
			sect += csect;
 801c10e:	697a      	ldr	r2, [r7, #20]
 801c110:	69bb      	ldr	r3, [r7, #24]
 801c112:	4413      	add	r3, r2
 801c114:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	0a5b      	lsrs	r3, r3, #9
 801c11a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801c11c:	6a3b      	ldr	r3, [r7, #32]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d03c      	beq.n	801c19c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c122:	69ba      	ldr	r2, [r7, #24]
 801c124:	6a3b      	ldr	r3, [r7, #32]
 801c126:	4413      	add	r3, r2
 801c128:	693a      	ldr	r2, [r7, #16]
 801c12a:	8952      	ldrh	r2, [r2, #10]
 801c12c:	4293      	cmp	r3, r2
 801c12e:	d905      	bls.n	801c13c <f_write+0x1ac>
					cc = fs->csize - csect;
 801c130:	693b      	ldr	r3, [r7, #16]
 801c132:	895b      	ldrh	r3, [r3, #10]
 801c134:	461a      	mov	r2, r3
 801c136:	69bb      	ldr	r3, [r7, #24]
 801c138:	1ad3      	subs	r3, r2, r3
 801c13a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c13c:	693b      	ldr	r3, [r7, #16]
 801c13e:	7858      	ldrb	r0, [r3, #1]
 801c140:	6a3b      	ldr	r3, [r7, #32]
 801c142:	697a      	ldr	r2, [r7, #20]
 801c144:	69f9      	ldr	r1, [r7, #28]
 801c146:	f7fd ff89 	bl	801a05c <disk_write>
 801c14a:	4603      	mov	r3, r0
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d004      	beq.n	801c15a <f_write+0x1ca>
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	2201      	movs	r2, #1
 801c154:	755a      	strb	r2, [r3, #21]
 801c156:	2301      	movs	r3, #1
 801c158:	e08b      	b.n	801c272 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	6a1a      	ldr	r2, [r3, #32]
 801c15e:	697b      	ldr	r3, [r7, #20]
 801c160:	1ad3      	subs	r3, r2, r3
 801c162:	6a3a      	ldr	r2, [r7, #32]
 801c164:	429a      	cmp	r2, r3
 801c166:	d915      	bls.n	801c194 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	6a1a      	ldr	r2, [r3, #32]
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	1ad3      	subs	r3, r2, r3
 801c176:	025b      	lsls	r3, r3, #9
 801c178:	69fa      	ldr	r2, [r7, #28]
 801c17a:	4413      	add	r3, r2
 801c17c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c180:	4619      	mov	r1, r3
 801c182:	f7fe f82c 	bl	801a1de <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	7d1b      	ldrb	r3, [r3, #20]
 801c18a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c18e:	b2da      	uxtb	r2, r3
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801c194:	6a3b      	ldr	r3, [r7, #32]
 801c196:	025b      	lsls	r3, r3, #9
 801c198:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801c19a:	e03f      	b.n	801c21c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	6a1b      	ldr	r3, [r3, #32]
 801c1a0:	697a      	ldr	r2, [r7, #20]
 801c1a2:	429a      	cmp	r2, r3
 801c1a4:	d016      	beq.n	801c1d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	699a      	ldr	r2, [r3, #24]
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c1ae:	429a      	cmp	r2, r3
 801c1b0:	d210      	bcs.n	801c1d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	7858      	ldrb	r0, [r3, #1]
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c1bc:	2301      	movs	r3, #1
 801c1be:	697a      	ldr	r2, [r7, #20]
 801c1c0:	f7fd ff2c 	bl	801a01c <disk_read>
 801c1c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d004      	beq.n	801c1d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	2201      	movs	r2, #1
 801c1ce:	755a      	strb	r2, [r3, #21]
 801c1d0:	2301      	movs	r3, #1
 801c1d2:	e04e      	b.n	801c272 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	697a      	ldr	r2, [r7, #20]
 801c1d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	699b      	ldr	r3, [r3, #24]
 801c1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1e2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801c1e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801c1e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	d901      	bls.n	801c1f4 <f_write+0x264>
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	699b      	ldr	r3, [r3, #24]
 801c1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c202:	4413      	add	r3, r2
 801c204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c206:	69f9      	ldr	r1, [r7, #28]
 801c208:	4618      	mov	r0, r3
 801c20a:	f7fd ffe8 	bl	801a1de <mem_cpy>
		fp->flag |= FA_DIRTY;
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	7d1b      	ldrb	r3, [r3, #20]
 801c212:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c216:	b2da      	uxtb	r2, r3
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801c21c:	69fa      	ldr	r2, [r7, #28]
 801c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c220:	4413      	add	r3, r2
 801c222:	61fb      	str	r3, [r7, #28]
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	699a      	ldr	r2, [r3, #24]
 801c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c22a:	441a      	add	r2, r3
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	619a      	str	r2, [r3, #24]
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	68da      	ldr	r2, [r3, #12]
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	699b      	ldr	r3, [r3, #24]
 801c238:	429a      	cmp	r2, r3
 801c23a:	bf38      	it	cc
 801c23c:	461a      	movcc	r2, r3
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	60da      	str	r2, [r3, #12]
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	681a      	ldr	r2, [r3, #0]
 801c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c248:	441a      	add	r2, r3
 801c24a:	683b      	ldr	r3, [r7, #0]
 801c24c:	601a      	str	r2, [r3, #0]
 801c24e:	687a      	ldr	r2, [r7, #4]
 801c250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c252:	1ad3      	subs	r3, r2, r3
 801c254:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	f47f aed4 	bne.w	801c006 <f_write+0x76>
 801c25e:	e000      	b.n	801c262 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c260:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	7d1b      	ldrb	r3, [r3, #20]
 801c266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c26a:	b2da      	uxtb	r2, r3
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801c270:	2300      	movs	r3, #0
}
 801c272:	4618      	mov	r0, r3
 801c274:	3730      	adds	r7, #48	@ 0x30
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}

0801c27a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801c27a:	b580      	push	{r7, lr}
 801c27c:	b086      	sub	sp, #24
 801c27e:	af00      	add	r7, sp, #0
 801c280:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	f107 0208 	add.w	r2, r7, #8
 801c288:	4611      	mov	r1, r2
 801c28a:	4618      	mov	r0, r3
 801c28c:	f7ff fc4a 	bl	801bb24 <validate>
 801c290:	4603      	mov	r3, r0
 801c292:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c294:	7dfb      	ldrb	r3, [r7, #23]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d168      	bne.n	801c36c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	7d1b      	ldrb	r3, [r3, #20]
 801c29e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d062      	beq.n	801c36c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	7d1b      	ldrb	r3, [r3, #20]
 801c2aa:	b25b      	sxtb	r3, r3
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	da15      	bge.n	801c2dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	7858      	ldrb	r0, [r3, #1]
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	6a1a      	ldr	r2, [r3, #32]
 801c2be:	2301      	movs	r3, #1
 801c2c0:	f7fd fecc 	bl	801a05c <disk_write>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d001      	beq.n	801c2ce <f_sync+0x54>
 801c2ca:	2301      	movs	r3, #1
 801c2cc:	e04f      	b.n	801c36e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	7d1b      	ldrb	r3, [r3, #20]
 801c2d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c2d6:	b2da      	uxtb	r2, r3
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801c2dc:	f7f4 fd1e 	bl	8010d1c <get_fattime>
 801c2e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801c2e2:	68ba      	ldr	r2, [r7, #8]
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2e8:	4619      	mov	r1, r3
 801c2ea:	4610      	mov	r0, r2
 801c2ec:	f7fe f9a6 	bl	801a63c <move_window>
 801c2f0:	4603      	mov	r3, r0
 801c2f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801c2f4:	7dfb      	ldrb	r3, [r7, #23]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d138      	bne.n	801c36c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	330b      	adds	r3, #11
 801c304:	781a      	ldrb	r2, [r3, #0]
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	330b      	adds	r3, #11
 801c30a:	f042 0220 	orr.w	r2, r2, #32
 801c30e:	b2d2      	uxtb	r2, r2
 801c310:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6818      	ldr	r0, [r3, #0]
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	689b      	ldr	r3, [r3, #8]
 801c31a:	461a      	mov	r2, r3
 801c31c:	68f9      	ldr	r1, [r7, #12]
 801c31e:	f7fe feb0 	bl	801b082 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	f103 021c 	add.w	r2, r3, #28
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	68db      	ldr	r3, [r3, #12]
 801c32c:	4619      	mov	r1, r3
 801c32e:	4610      	mov	r0, r2
 801c330:	f7fd ff29 	bl	801a186 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	3316      	adds	r3, #22
 801c338:	6939      	ldr	r1, [r7, #16]
 801c33a:	4618      	mov	r0, r3
 801c33c:	f7fd ff23 	bl	801a186 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	3312      	adds	r3, #18
 801c344:	2100      	movs	r1, #0
 801c346:	4618      	mov	r0, r3
 801c348:	f7fd ff02 	bl	801a150 <st_word>
					fs->wflag = 1;
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	2201      	movs	r2, #1
 801c350:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801c352:	68bb      	ldr	r3, [r7, #8]
 801c354:	4618      	mov	r0, r3
 801c356:	f7fe f99f 	bl	801a698 <sync_fs>
 801c35a:	4603      	mov	r3, r0
 801c35c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	7d1b      	ldrb	r3, [r3, #20]
 801c362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c366:	b2da      	uxtb	r2, r3
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801c36c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c36e:	4618      	mov	r0, r3
 801c370:	3718      	adds	r7, #24
 801c372:	46bd      	mov	sp, r7
 801c374:	bd80      	pop	{r7, pc}

0801c376 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801c376:	b580      	push	{r7, lr}
 801c378:	b084      	sub	sp, #16
 801c37a:	af00      	add	r7, sp, #0
 801c37c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801c37e:	6878      	ldr	r0, [r7, #4]
 801c380:	f7ff ff7b 	bl	801c27a <f_sync>
 801c384:	4603      	mov	r3, r0
 801c386:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801c388:	7bfb      	ldrb	r3, [r7, #15]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d118      	bne.n	801c3c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	f107 0208 	add.w	r2, r7, #8
 801c394:	4611      	mov	r1, r2
 801c396:	4618      	mov	r0, r3
 801c398:	f7ff fbc4 	bl	801bb24 <validate>
 801c39c:	4603      	mov	r3, r0
 801c39e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c3a0:	7bfb      	ldrb	r3, [r7, #15]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d10c      	bne.n	801c3c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	691b      	ldr	r3, [r3, #16]
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f7fe f8a2 	bl	801a4f4 <dec_lock>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801c3b4:	7bfb      	ldrb	r3, [r7, #15]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d102      	bne.n	801c3c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	2200      	movs	r2, #0
 801c3be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801c3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	3710      	adds	r7, #16
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}

0801c3ca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801c3ca:	b580      	push	{r7, lr}
 801c3cc:	b090      	sub	sp, #64	@ 0x40
 801c3ce:	af00      	add	r7, sp, #0
 801c3d0:	6078      	str	r0, [r7, #4]
 801c3d2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	f107 0208 	add.w	r2, r7, #8
 801c3da:	4611      	mov	r1, r2
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f7ff fba1 	bl	801bb24 <validate>
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801c3e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d103      	bne.n	801c3f8 <f_lseek+0x2e>
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	7d5b      	ldrb	r3, [r3, #21]
 801c3f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801c3f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d002      	beq.n	801c406 <f_lseek+0x3c>
 801c400:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801c404:	e1e6      	b.n	801c7d4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	f000 80d1 	beq.w	801c5b2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c416:	d15a      	bne.n	801c4ce <f_lseek+0x104>
			tbl = fp->cltbl;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c41c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c420:	1d1a      	adds	r2, r3, #4
 801c422:	627a      	str	r2, [r7, #36]	@ 0x24
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	617b      	str	r3, [r7, #20]
 801c428:	2302      	movs	r3, #2
 801c42a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	689b      	ldr	r3, [r3, #8]
 801c430:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801c432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c434:	2b00      	cmp	r3, #0
 801c436:	d03a      	beq.n	801c4ae <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c43a:	613b      	str	r3, [r7, #16]
 801c43c:	2300      	movs	r3, #0
 801c43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c442:	3302      	adds	r3, #2
 801c444:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801c446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c448:	60fb      	str	r3, [r7, #12]
 801c44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c44c:	3301      	adds	r3, #1
 801c44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c454:	4618      	mov	r0, r3
 801c456:	f7fe f9ac 	bl	801a7b2 <get_fat>
 801c45a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801c45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c45e:	2b01      	cmp	r3, #1
 801c460:	d804      	bhi.n	801c46c <f_lseek+0xa2>
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	2202      	movs	r2, #2
 801c466:	755a      	strb	r2, [r3, #21]
 801c468:	2302      	movs	r3, #2
 801c46a:	e1b3      	b.n	801c7d4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c46e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c472:	d104      	bne.n	801c47e <f_lseek+0xb4>
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	2201      	movs	r2, #1
 801c478:	755a      	strb	r2, [r3, #21]
 801c47a:	2301      	movs	r3, #1
 801c47c:	e1aa      	b.n	801c7d4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	3301      	adds	r3, #1
 801c482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c484:	429a      	cmp	r2, r3
 801c486:	d0de      	beq.n	801c446 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801c488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c48a:	697b      	ldr	r3, [r7, #20]
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d809      	bhi.n	801c4a4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801c490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c492:	1d1a      	adds	r2, r3, #4
 801c494:	627a      	str	r2, [r7, #36]	@ 0x24
 801c496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c498:	601a      	str	r2, [r3, #0]
 801c49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c49c:	1d1a      	adds	r2, r3, #4
 801c49e:	627a      	str	r2, [r7, #36]	@ 0x24
 801c4a0:	693a      	ldr	r2, [r7, #16]
 801c4a2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801c4a4:	68bb      	ldr	r3, [r7, #8]
 801c4a6:	695b      	ldr	r3, [r3, #20]
 801c4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c4aa:	429a      	cmp	r2, r3
 801c4ac:	d3c4      	bcc.n	801c438 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c4b4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801c4b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c4b8:	697b      	ldr	r3, [r7, #20]
 801c4ba:	429a      	cmp	r2, r3
 801c4bc:	d803      	bhi.n	801c4c6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801c4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	601a      	str	r2, [r3, #0]
 801c4c4:	e184      	b.n	801c7d0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801c4c6:	2311      	movs	r3, #17
 801c4c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801c4cc:	e180      	b.n	801c7d0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	68db      	ldr	r3, [r3, #12]
 801c4d2:	683a      	ldr	r2, [r7, #0]
 801c4d4:	429a      	cmp	r2, r3
 801c4d6:	d902      	bls.n	801c4de <f_lseek+0x114>
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	68db      	ldr	r3, [r3, #12]
 801c4dc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	683a      	ldr	r2, [r7, #0]
 801c4e2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801c4e4:	683b      	ldr	r3, [r7, #0]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	f000 8172 	beq.w	801c7d0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	3b01      	subs	r3, #1
 801c4f0:	4619      	mov	r1, r3
 801c4f2:	6878      	ldr	r0, [r7, #4]
 801c4f4:	f7fe fbeb 	bl	801acce <clmt_clust>
 801c4f8:	4602      	mov	r2, r0
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801c4fe:	68ba      	ldr	r2, [r7, #8]
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	69db      	ldr	r3, [r3, #28]
 801c504:	4619      	mov	r1, r3
 801c506:	4610      	mov	r0, r2
 801c508:	f7fe f934 	bl	801a774 <clust2sect>
 801c50c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801c50e:	69bb      	ldr	r3, [r7, #24]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d104      	bne.n	801c51e <f_lseek+0x154>
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2202      	movs	r2, #2
 801c518:	755a      	strb	r2, [r3, #21]
 801c51a:	2302      	movs	r3, #2
 801c51c:	e15a      	b.n	801c7d4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	3b01      	subs	r3, #1
 801c522:	0a5b      	lsrs	r3, r3, #9
 801c524:	68ba      	ldr	r2, [r7, #8]
 801c526:	8952      	ldrh	r2, [r2, #10]
 801c528:	3a01      	subs	r2, #1
 801c52a:	4013      	ands	r3, r2
 801c52c:	69ba      	ldr	r2, [r7, #24]
 801c52e:	4413      	add	r3, r2
 801c530:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	699b      	ldr	r3, [r3, #24]
 801c536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	f000 8148 	beq.w	801c7d0 <f_lseek+0x406>
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	6a1b      	ldr	r3, [r3, #32]
 801c544:	69ba      	ldr	r2, [r7, #24]
 801c546:	429a      	cmp	r2, r3
 801c548:	f000 8142 	beq.w	801c7d0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	7d1b      	ldrb	r3, [r3, #20]
 801c550:	b25b      	sxtb	r3, r3
 801c552:	2b00      	cmp	r3, #0
 801c554:	da18      	bge.n	801c588 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c556:	68bb      	ldr	r3, [r7, #8]
 801c558:	7858      	ldrb	r0, [r3, #1]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	6a1a      	ldr	r2, [r3, #32]
 801c564:	2301      	movs	r3, #1
 801c566:	f7fd fd79 	bl	801a05c <disk_write>
 801c56a:	4603      	mov	r3, r0
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d004      	beq.n	801c57a <f_lseek+0x1b0>
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2201      	movs	r2, #1
 801c574:	755a      	strb	r2, [r3, #21]
 801c576:	2301      	movs	r3, #1
 801c578:	e12c      	b.n	801c7d4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	7d1b      	ldrb	r3, [r3, #20]
 801c57e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c582:	b2da      	uxtb	r2, r3
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	7858      	ldrb	r0, [r3, #1]
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c592:	2301      	movs	r3, #1
 801c594:	69ba      	ldr	r2, [r7, #24]
 801c596:	f7fd fd41 	bl	801a01c <disk_read>
 801c59a:	4603      	mov	r3, r0
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d004      	beq.n	801c5aa <f_lseek+0x1e0>
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	2201      	movs	r2, #1
 801c5a4:	755a      	strb	r2, [r3, #21]
 801c5a6:	2301      	movs	r3, #1
 801c5a8:	e114      	b.n	801c7d4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	69ba      	ldr	r2, [r7, #24]
 801c5ae:	621a      	str	r2, [r3, #32]
 801c5b0:	e10e      	b.n	801c7d0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	68db      	ldr	r3, [r3, #12]
 801c5b6:	683a      	ldr	r2, [r7, #0]
 801c5b8:	429a      	cmp	r2, r3
 801c5ba:	d908      	bls.n	801c5ce <f_lseek+0x204>
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	7d1b      	ldrb	r3, [r3, #20]
 801c5c0:	f003 0302 	and.w	r3, r3, #2
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d102      	bne.n	801c5ce <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	68db      	ldr	r3, [r3, #12]
 801c5cc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	699b      	ldr	r3, [r3, #24]
 801c5d2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	637b      	str	r3, [r7, #52]	@ 0x34
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c5dc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	f000 80a7 	beq.w	801c734 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801c5e6:	68bb      	ldr	r3, [r7, #8]
 801c5e8:	895b      	ldrh	r3, [r3, #10]
 801c5ea:	025b      	lsls	r3, r3, #9
 801c5ec:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801c5ee:	6a3b      	ldr	r3, [r7, #32]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d01b      	beq.n	801c62c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801c5f4:	683b      	ldr	r3, [r7, #0]
 801c5f6:	1e5a      	subs	r2, r3, #1
 801c5f8:	69fb      	ldr	r3, [r7, #28]
 801c5fa:	fbb2 f2f3 	udiv	r2, r2, r3
 801c5fe:	6a3b      	ldr	r3, [r7, #32]
 801c600:	1e59      	subs	r1, r3, #1
 801c602:	69fb      	ldr	r3, [r7, #28]
 801c604:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801c608:	429a      	cmp	r2, r3
 801c60a:	d30f      	bcc.n	801c62c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801c60c:	6a3b      	ldr	r3, [r7, #32]
 801c60e:	1e5a      	subs	r2, r3, #1
 801c610:	69fb      	ldr	r3, [r7, #28]
 801c612:	425b      	negs	r3, r3
 801c614:	401a      	ands	r2, r3
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	699b      	ldr	r3, [r3, #24]
 801c61e:	683a      	ldr	r2, [r7, #0]
 801c620:	1ad3      	subs	r3, r2, r3
 801c622:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	69db      	ldr	r3, [r3, #28]
 801c628:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c62a:	e022      	b.n	801c672 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	689b      	ldr	r3, [r3, #8]
 801c630:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801c632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c634:	2b00      	cmp	r3, #0
 801c636:	d119      	bne.n	801c66c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	2100      	movs	r1, #0
 801c63c:	4618      	mov	r0, r3
 801c63e:	f7fe faae 	bl	801ab9e <create_chain>
 801c642:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c646:	2b01      	cmp	r3, #1
 801c648:	d104      	bne.n	801c654 <f_lseek+0x28a>
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	2202      	movs	r2, #2
 801c64e:	755a      	strb	r2, [r3, #21]
 801c650:	2302      	movs	r3, #2
 801c652:	e0bf      	b.n	801c7d4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c65a:	d104      	bne.n	801c666 <f_lseek+0x29c>
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	2201      	movs	r2, #1
 801c660:	755a      	strb	r2, [r3, #21]
 801c662:	2301      	movs	r3, #1
 801c664:	e0b6      	b.n	801c7d4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c66a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c670:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801c672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c674:	2b00      	cmp	r3, #0
 801c676:	d05d      	beq.n	801c734 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801c678:	e03a      	b.n	801c6f0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801c67a:	683a      	ldr	r2, [r7, #0]
 801c67c:	69fb      	ldr	r3, [r7, #28]
 801c67e:	1ad3      	subs	r3, r2, r3
 801c680:	603b      	str	r3, [r7, #0]
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	699a      	ldr	r2, [r3, #24]
 801c686:	69fb      	ldr	r3, [r7, #28]
 801c688:	441a      	add	r2, r3
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	7d1b      	ldrb	r3, [r3, #20]
 801c692:	f003 0302 	and.w	r3, r3, #2
 801c696:	2b00      	cmp	r3, #0
 801c698:	d00b      	beq.n	801c6b2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f7fe fa7d 	bl	801ab9e <create_chain>
 801c6a4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801c6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d108      	bne.n	801c6be <f_lseek+0x2f4>
							ofs = 0; break;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	603b      	str	r3, [r7, #0]
 801c6b0:	e022      	b.n	801c6f8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	f7fe f87b 	bl	801a7b2 <get_fat>
 801c6bc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c6c4:	d104      	bne.n	801c6d0 <f_lseek+0x306>
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	2201      	movs	r2, #1
 801c6ca:	755a      	strb	r2, [r3, #21]
 801c6cc:	2301      	movs	r3, #1
 801c6ce:	e081      	b.n	801c7d4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801c6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6d2:	2b01      	cmp	r3, #1
 801c6d4:	d904      	bls.n	801c6e0 <f_lseek+0x316>
 801c6d6:	68bb      	ldr	r3, [r7, #8]
 801c6d8:	695b      	ldr	r3, [r3, #20]
 801c6da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d304      	bcc.n	801c6ea <f_lseek+0x320>
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	2202      	movs	r2, #2
 801c6e4:	755a      	strb	r2, [r3, #21]
 801c6e6:	2302      	movs	r3, #2
 801c6e8:	e074      	b.n	801c7d4 <f_lseek+0x40a>
					fp->clust = clst;
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c6ee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801c6f0:	683a      	ldr	r2, [r7, #0]
 801c6f2:	69fb      	ldr	r3, [r7, #28]
 801c6f4:	429a      	cmp	r2, r3
 801c6f6:	d8c0      	bhi.n	801c67a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	699a      	ldr	r2, [r3, #24]
 801c6fc:	683b      	ldr	r3, [r7, #0]
 801c6fe:	441a      	add	r2, r3
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d012      	beq.n	801c734 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801c712:	4618      	mov	r0, r3
 801c714:	f7fe f82e 	bl	801a774 <clust2sect>
 801c718:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801c71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d104      	bne.n	801c72a <f_lseek+0x360>
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	2202      	movs	r2, #2
 801c724:	755a      	strb	r2, [r3, #21]
 801c726:	2302      	movs	r3, #2
 801c728:	e054      	b.n	801c7d4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801c72a:	683b      	ldr	r3, [r7, #0]
 801c72c:	0a5b      	lsrs	r3, r3, #9
 801c72e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c730:	4413      	add	r3, r2
 801c732:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	699a      	ldr	r2, [r3, #24]
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	68db      	ldr	r3, [r3, #12]
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d90a      	bls.n	801c756 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	699a      	ldr	r2, [r3, #24]
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	7d1b      	ldrb	r3, [r3, #20]
 801c74c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c750:	b2da      	uxtb	r2, r3
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	699b      	ldr	r3, [r3, #24]
 801c75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d036      	beq.n	801c7d0 <f_lseek+0x406>
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	6a1b      	ldr	r3, [r3, #32]
 801c766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c768:	429a      	cmp	r2, r3
 801c76a:	d031      	beq.n	801c7d0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	7d1b      	ldrb	r3, [r3, #20]
 801c770:	b25b      	sxtb	r3, r3
 801c772:	2b00      	cmp	r3, #0
 801c774:	da18      	bge.n	801c7a8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c776:	68bb      	ldr	r3, [r7, #8]
 801c778:	7858      	ldrb	r0, [r3, #1]
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	6a1a      	ldr	r2, [r3, #32]
 801c784:	2301      	movs	r3, #1
 801c786:	f7fd fc69 	bl	801a05c <disk_write>
 801c78a:	4603      	mov	r3, r0
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d004      	beq.n	801c79a <f_lseek+0x3d0>
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	2201      	movs	r2, #1
 801c794:	755a      	strb	r2, [r3, #21]
 801c796:	2301      	movs	r3, #1
 801c798:	e01c      	b.n	801c7d4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	7d1b      	ldrb	r3, [r3, #20]
 801c79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c7a2:	b2da      	uxtb	r2, r3
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801c7a8:	68bb      	ldr	r3, [r7, #8]
 801c7aa:	7858      	ldrb	r0, [r3, #1]
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c7b2:	2301      	movs	r3, #1
 801c7b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c7b6:	f7fd fc31 	bl	801a01c <disk_read>
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d004      	beq.n	801c7ca <f_lseek+0x400>
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	2201      	movs	r2, #1
 801c7c4:	755a      	strb	r2, [r3, #21]
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	e004      	b.n	801c7d4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c7ce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801c7d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	3740      	adds	r7, #64	@ 0x40
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	bd80      	pop	{r7, pc}

0801c7dc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b086      	sub	sp, #24
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
 801c7e4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d101      	bne.n	801c7f0 <f_opendir+0x14>
 801c7ec:	2309      	movs	r3, #9
 801c7ee:	e064      	b.n	801c8ba <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801c7f4:	f107 010c 	add.w	r1, r7, #12
 801c7f8:	463b      	mov	r3, r7
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	f7fe ff45 	bl	801b68c <find_volume>
 801c802:	4603      	mov	r3, r0
 801c804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c806:	7dfb      	ldrb	r3, [r7, #23]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d14f      	bne.n	801c8ac <f_opendir+0xd0>
		obj->fs = fs;
 801c80c:	68fa      	ldr	r2, [r7, #12]
 801c80e:	693b      	ldr	r3, [r7, #16]
 801c810:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801c812:	683b      	ldr	r3, [r7, #0]
 801c814:	4619      	mov	r1, r3
 801c816:	6878      	ldr	r0, [r7, #4]
 801c818:	f7fe fe2c 	bl	801b474 <follow_path>
 801c81c:	4603      	mov	r3, r0
 801c81e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801c820:	7dfb      	ldrb	r3, [r7, #23]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d13d      	bne.n	801c8a2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c82c:	b25b      	sxtb	r3, r3
 801c82e:	2b00      	cmp	r3, #0
 801c830:	db12      	blt.n	801c858 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801c832:	693b      	ldr	r3, [r7, #16]
 801c834:	799b      	ldrb	r3, [r3, #6]
 801c836:	f003 0310 	and.w	r3, r3, #16
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d00a      	beq.n	801c854 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801c83e:	68fa      	ldr	r2, [r7, #12]
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	6a1b      	ldr	r3, [r3, #32]
 801c844:	4619      	mov	r1, r3
 801c846:	4610      	mov	r0, r2
 801c848:	f7fe fbfc 	bl	801b044 <ld_clust>
 801c84c:	4602      	mov	r2, r0
 801c84e:	693b      	ldr	r3, [r7, #16]
 801c850:	609a      	str	r2, [r3, #8]
 801c852:	e001      	b.n	801c858 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801c854:	2305      	movs	r3, #5
 801c856:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801c858:	7dfb      	ldrb	r3, [r7, #23]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d121      	bne.n	801c8a2 <f_opendir+0xc6>
				obj->id = fs->id;
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	88da      	ldrh	r2, [r3, #6]
 801c862:	693b      	ldr	r3, [r7, #16]
 801c864:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801c866:	2100      	movs	r1, #0
 801c868:	6878      	ldr	r0, [r7, #4]
 801c86a:	f7fe fa64 	bl	801ad36 <dir_sdi>
 801c86e:	4603      	mov	r3, r0
 801c870:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801c872:	7dfb      	ldrb	r3, [r7, #23]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d114      	bne.n	801c8a2 <f_opendir+0xc6>
					if (obj->sclust) {
 801c878:	693b      	ldr	r3, [r7, #16]
 801c87a:	689b      	ldr	r3, [r3, #8]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d00d      	beq.n	801c89c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801c880:	2100      	movs	r1, #0
 801c882:	6878      	ldr	r0, [r7, #4]
 801c884:	f7fd fda8 	bl	801a3d8 <inc_lock>
 801c888:	4602      	mov	r2, r0
 801c88a:	693b      	ldr	r3, [r7, #16]
 801c88c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801c88e:	693b      	ldr	r3, [r7, #16]
 801c890:	691b      	ldr	r3, [r3, #16]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d105      	bne.n	801c8a2 <f_opendir+0xc6>
 801c896:	2312      	movs	r3, #18
 801c898:	75fb      	strb	r3, [r7, #23]
 801c89a:	e002      	b.n	801c8a2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801c89c:	693b      	ldr	r3, [r7, #16]
 801c89e:	2200      	movs	r2, #0
 801c8a0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801c8a2:	7dfb      	ldrb	r3, [r7, #23]
 801c8a4:	2b04      	cmp	r3, #4
 801c8a6:	d101      	bne.n	801c8ac <f_opendir+0xd0>
 801c8a8:	2305      	movs	r3, #5
 801c8aa:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801c8ac:	7dfb      	ldrb	r3, [r7, #23]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d002      	beq.n	801c8b8 <f_opendir+0xdc>
 801c8b2:	693b      	ldr	r3, [r7, #16]
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	3718      	adds	r7, #24
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	bd80      	pop	{r7, pc}

0801c8c2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801c8c2:	b580      	push	{r7, lr}
 801c8c4:	b084      	sub	sp, #16
 801c8c6:	af00      	add	r7, sp, #0
 801c8c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	f107 0208 	add.w	r2, r7, #8
 801c8d0:	4611      	mov	r1, r2
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f7ff f926 	bl	801bb24 <validate>
 801c8d8:	4603      	mov	r3, r0
 801c8da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801c8dc:	7bfb      	ldrb	r3, [r7, #15]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d110      	bne.n	801c904 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	691b      	ldr	r3, [r3, #16]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d006      	beq.n	801c8f8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	691b      	ldr	r3, [r3, #16]
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7fd fe00 	bl	801a4f4 <dec_lock>
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801c8f8:	7bfb      	ldrb	r3, [r7, #15]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d102      	bne.n	801c904 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	2200      	movs	r2, #0
 801c902:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801c904:	7bfb      	ldrb	r3, [r7, #15]
}
 801c906:	4618      	mov	r0, r3
 801c908:	3710      	adds	r7, #16
 801c90a:	46bd      	mov	sp, r7
 801c90c:	bd80      	pop	{r7, pc}

0801c90e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801c90e:	b580      	push	{r7, lr}
 801c910:	b084      	sub	sp, #16
 801c912:	af00      	add	r7, sp, #0
 801c914:	6078      	str	r0, [r7, #4]
 801c916:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	f107 0208 	add.w	r2, r7, #8
 801c91e:	4611      	mov	r1, r2
 801c920:	4618      	mov	r0, r3
 801c922:	f7ff f8ff 	bl	801bb24 <validate>
 801c926:	4603      	mov	r3, r0
 801c928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801c92a:	7bfb      	ldrb	r3, [r7, #15]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d126      	bne.n	801c97e <f_readdir+0x70>
		if (!fno) {
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d106      	bne.n	801c944 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801c936:	2100      	movs	r1, #0
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f7fe f9fc 	bl	801ad36 <dir_sdi>
 801c93e:	4603      	mov	r3, r0
 801c940:	73fb      	strb	r3, [r7, #15]
 801c942:	e01c      	b.n	801c97e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801c944:	2100      	movs	r1, #0
 801c946:	6878      	ldr	r0, [r7, #4]
 801c948:	f7fe fbbb 	bl	801b0c2 <dir_read>
 801c94c:	4603      	mov	r3, r0
 801c94e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801c950:	7bfb      	ldrb	r3, [r7, #15]
 801c952:	2b04      	cmp	r3, #4
 801c954:	d101      	bne.n	801c95a <f_readdir+0x4c>
 801c956:	2300      	movs	r3, #0
 801c958:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801c95a:	7bfb      	ldrb	r3, [r7, #15]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d10e      	bne.n	801c97e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801c960:	6839      	ldr	r1, [r7, #0]
 801c962:	6878      	ldr	r0, [r7, #4]
 801c964:	f7fe fc91 	bl	801b28a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801c968:	2100      	movs	r1, #0
 801c96a:	6878      	ldr	r0, [r7, #4]
 801c96c:	f7fe fa5e 	bl	801ae2c <dir_next>
 801c970:	4603      	mov	r3, r0
 801c972:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801c974:	7bfb      	ldrb	r3, [r7, #15]
 801c976:	2b04      	cmp	r3, #4
 801c978:	d101      	bne.n	801c97e <f_readdir+0x70>
 801c97a:	2300      	movs	r3, #0
 801c97c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801c97e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c980:	4618      	mov	r0, r3
 801c982:	3710      	adds	r7, #16
 801c984:	46bd      	mov	sp, r7
 801c986:	bd80      	pop	{r7, pc}

0801c988 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801c988:	b480      	push	{r7}
 801c98a:	b087      	sub	sp, #28
 801c98c:	af00      	add	r7, sp, #0
 801c98e:	60f8      	str	r0, [r7, #12]
 801c990:	60b9      	str	r1, [r7, #8]
 801c992:	4613      	mov	r3, r2
 801c994:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801c996:	2301      	movs	r3, #1
 801c998:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801c99a:	2300      	movs	r3, #0
 801c99c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801c99e:	4b1f      	ldr	r3, [pc, #124]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9a0:	7a5b      	ldrb	r3, [r3, #9]
 801c9a2:	b2db      	uxtb	r3, r3
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d131      	bne.n	801ca0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801c9a8:	4b1c      	ldr	r3, [pc, #112]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9aa:	7a5b      	ldrb	r3, [r3, #9]
 801c9ac:	b2db      	uxtb	r3, r3
 801c9ae:	461a      	mov	r2, r3
 801c9b0:	4b1a      	ldr	r3, [pc, #104]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9b2:	2100      	movs	r1, #0
 801c9b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801c9b6:	4b19      	ldr	r3, [pc, #100]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9b8:	7a5b      	ldrb	r3, [r3, #9]
 801c9ba:	b2db      	uxtb	r3, r3
 801c9bc:	4a17      	ldr	r2, [pc, #92]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9be:	009b      	lsls	r3, r3, #2
 801c9c0:	4413      	add	r3, r2
 801c9c2:	68fa      	ldr	r2, [r7, #12]
 801c9c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801c9c6:	4b15      	ldr	r3, [pc, #84]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9c8:	7a5b      	ldrb	r3, [r3, #9]
 801c9ca:	b2db      	uxtb	r3, r3
 801c9cc:	461a      	mov	r2, r3
 801c9ce:	4b13      	ldr	r3, [pc, #76]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9d0:	4413      	add	r3, r2
 801c9d2:	79fa      	ldrb	r2, [r7, #7]
 801c9d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801c9d6:	4b11      	ldr	r3, [pc, #68]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9d8:	7a5b      	ldrb	r3, [r3, #9]
 801c9da:	b2db      	uxtb	r3, r3
 801c9dc:	1c5a      	adds	r2, r3, #1
 801c9de:	b2d1      	uxtb	r1, r2
 801c9e0:	4a0e      	ldr	r2, [pc, #56]	@ (801ca1c <FATFS_LinkDriverEx+0x94>)
 801c9e2:	7251      	strb	r1, [r2, #9]
 801c9e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801c9e6:	7dbb      	ldrb	r3, [r7, #22]
 801c9e8:	3330      	adds	r3, #48	@ 0x30
 801c9ea:	b2da      	uxtb	r2, r3
 801c9ec:	68bb      	ldr	r3, [r7, #8]
 801c9ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801c9f0:	68bb      	ldr	r3, [r7, #8]
 801c9f2:	3301      	adds	r3, #1
 801c9f4:	223a      	movs	r2, #58	@ 0x3a
 801c9f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801c9f8:	68bb      	ldr	r3, [r7, #8]
 801c9fa:	3302      	adds	r3, #2
 801c9fc:	222f      	movs	r2, #47	@ 0x2f
 801c9fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801ca00:	68bb      	ldr	r3, [r7, #8]
 801ca02:	3303      	adds	r3, #3
 801ca04:	2200      	movs	r2, #0
 801ca06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801ca08:	2300      	movs	r3, #0
 801ca0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801ca0c:	7dfb      	ldrb	r3, [r7, #23]
}
 801ca0e:	4618      	mov	r0, r3
 801ca10:	371c      	adds	r7, #28
 801ca12:	46bd      	mov	sp, r7
 801ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca18:	4770      	bx	lr
 801ca1a:	bf00      	nop
 801ca1c:	24008920 	.word	0x24008920

0801ca20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b082      	sub	sp, #8
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
 801ca28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	6839      	ldr	r1, [r7, #0]
 801ca2e:	6878      	ldr	r0, [r7, #4]
 801ca30:	f7ff ffaa 	bl	801c988 <FATFS_LinkDriverEx>
 801ca34:	4603      	mov	r3, r0
}
 801ca36:	4618      	mov	r0, r3
 801ca38:	3708      	adds	r7, #8
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd80      	pop	{r7, pc}

0801ca3e <atoi>:
 801ca3e:	220a      	movs	r2, #10
 801ca40:	2100      	movs	r1, #0
 801ca42:	f000 b87b 	b.w	801cb3c <strtol>
	...

0801ca48 <_strtol_l.isra.0>:
 801ca48:	2b24      	cmp	r3, #36	@ 0x24
 801ca4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca4e:	4686      	mov	lr, r0
 801ca50:	4690      	mov	r8, r2
 801ca52:	d801      	bhi.n	801ca58 <_strtol_l.isra.0+0x10>
 801ca54:	2b01      	cmp	r3, #1
 801ca56:	d106      	bne.n	801ca66 <_strtol_l.isra.0+0x1e>
 801ca58:	f000 fb7c 	bl	801d154 <__errno>
 801ca5c:	2316      	movs	r3, #22
 801ca5e:	6003      	str	r3, [r0, #0]
 801ca60:	2000      	movs	r0, #0
 801ca62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca66:	4834      	ldr	r0, [pc, #208]	@ (801cb38 <_strtol_l.isra.0+0xf0>)
 801ca68:	460d      	mov	r5, r1
 801ca6a:	462a      	mov	r2, r5
 801ca6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ca70:	5d06      	ldrb	r6, [r0, r4]
 801ca72:	f016 0608 	ands.w	r6, r6, #8
 801ca76:	d1f8      	bne.n	801ca6a <_strtol_l.isra.0+0x22>
 801ca78:	2c2d      	cmp	r4, #45	@ 0x2d
 801ca7a:	d110      	bne.n	801ca9e <_strtol_l.isra.0+0x56>
 801ca7c:	782c      	ldrb	r4, [r5, #0]
 801ca7e:	2601      	movs	r6, #1
 801ca80:	1c95      	adds	r5, r2, #2
 801ca82:	f033 0210 	bics.w	r2, r3, #16
 801ca86:	d115      	bne.n	801cab4 <_strtol_l.isra.0+0x6c>
 801ca88:	2c30      	cmp	r4, #48	@ 0x30
 801ca8a:	d10d      	bne.n	801caa8 <_strtol_l.isra.0+0x60>
 801ca8c:	782a      	ldrb	r2, [r5, #0]
 801ca8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ca92:	2a58      	cmp	r2, #88	@ 0x58
 801ca94:	d108      	bne.n	801caa8 <_strtol_l.isra.0+0x60>
 801ca96:	786c      	ldrb	r4, [r5, #1]
 801ca98:	3502      	adds	r5, #2
 801ca9a:	2310      	movs	r3, #16
 801ca9c:	e00a      	b.n	801cab4 <_strtol_l.isra.0+0x6c>
 801ca9e:	2c2b      	cmp	r4, #43	@ 0x2b
 801caa0:	bf04      	itt	eq
 801caa2:	782c      	ldrbeq	r4, [r5, #0]
 801caa4:	1c95      	addeq	r5, r2, #2
 801caa6:	e7ec      	b.n	801ca82 <_strtol_l.isra.0+0x3a>
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d1f6      	bne.n	801ca9a <_strtol_l.isra.0+0x52>
 801caac:	2c30      	cmp	r4, #48	@ 0x30
 801caae:	bf14      	ite	ne
 801cab0:	230a      	movne	r3, #10
 801cab2:	2308      	moveq	r3, #8
 801cab4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801cab8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801cabc:	2200      	movs	r2, #0
 801cabe:	fbbc f9f3 	udiv	r9, ip, r3
 801cac2:	4610      	mov	r0, r2
 801cac4:	fb03 ca19 	mls	sl, r3, r9, ip
 801cac8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801cacc:	2f09      	cmp	r7, #9
 801cace:	d80f      	bhi.n	801caf0 <_strtol_l.isra.0+0xa8>
 801cad0:	463c      	mov	r4, r7
 801cad2:	42a3      	cmp	r3, r4
 801cad4:	dd1b      	ble.n	801cb0e <_strtol_l.isra.0+0xc6>
 801cad6:	1c57      	adds	r7, r2, #1
 801cad8:	d007      	beq.n	801caea <_strtol_l.isra.0+0xa2>
 801cada:	4581      	cmp	r9, r0
 801cadc:	d314      	bcc.n	801cb08 <_strtol_l.isra.0+0xc0>
 801cade:	d101      	bne.n	801cae4 <_strtol_l.isra.0+0x9c>
 801cae0:	45a2      	cmp	sl, r4
 801cae2:	db11      	blt.n	801cb08 <_strtol_l.isra.0+0xc0>
 801cae4:	fb00 4003 	mla	r0, r0, r3, r4
 801cae8:	2201      	movs	r2, #1
 801caea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801caee:	e7eb      	b.n	801cac8 <_strtol_l.isra.0+0x80>
 801caf0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801caf4:	2f19      	cmp	r7, #25
 801caf6:	d801      	bhi.n	801cafc <_strtol_l.isra.0+0xb4>
 801caf8:	3c37      	subs	r4, #55	@ 0x37
 801cafa:	e7ea      	b.n	801cad2 <_strtol_l.isra.0+0x8a>
 801cafc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cb00:	2f19      	cmp	r7, #25
 801cb02:	d804      	bhi.n	801cb0e <_strtol_l.isra.0+0xc6>
 801cb04:	3c57      	subs	r4, #87	@ 0x57
 801cb06:	e7e4      	b.n	801cad2 <_strtol_l.isra.0+0x8a>
 801cb08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cb0c:	e7ed      	b.n	801caea <_strtol_l.isra.0+0xa2>
 801cb0e:	1c53      	adds	r3, r2, #1
 801cb10:	d108      	bne.n	801cb24 <_strtol_l.isra.0+0xdc>
 801cb12:	2322      	movs	r3, #34	@ 0x22
 801cb14:	f8ce 3000 	str.w	r3, [lr]
 801cb18:	4660      	mov	r0, ip
 801cb1a:	f1b8 0f00 	cmp.w	r8, #0
 801cb1e:	d0a0      	beq.n	801ca62 <_strtol_l.isra.0+0x1a>
 801cb20:	1e69      	subs	r1, r5, #1
 801cb22:	e006      	b.n	801cb32 <_strtol_l.isra.0+0xea>
 801cb24:	b106      	cbz	r6, 801cb28 <_strtol_l.isra.0+0xe0>
 801cb26:	4240      	negs	r0, r0
 801cb28:	f1b8 0f00 	cmp.w	r8, #0
 801cb2c:	d099      	beq.n	801ca62 <_strtol_l.isra.0+0x1a>
 801cb2e:	2a00      	cmp	r2, #0
 801cb30:	d1f6      	bne.n	801cb20 <_strtol_l.isra.0+0xd8>
 801cb32:	f8c8 1000 	str.w	r1, [r8]
 801cb36:	e794      	b.n	801ca62 <_strtol_l.isra.0+0x1a>
 801cb38:	080316dd 	.word	0x080316dd

0801cb3c <strtol>:
 801cb3c:	4613      	mov	r3, r2
 801cb3e:	460a      	mov	r2, r1
 801cb40:	4601      	mov	r1, r0
 801cb42:	4802      	ldr	r0, [pc, #8]	@ (801cb4c <strtol+0x10>)
 801cb44:	6800      	ldr	r0, [r0, #0]
 801cb46:	f7ff bf7f 	b.w	801ca48 <_strtol_l.isra.0>
 801cb4a:	bf00      	nop
 801cb4c:	2400001c 	.word	0x2400001c

0801cb50 <std>:
 801cb50:	2300      	movs	r3, #0
 801cb52:	b510      	push	{r4, lr}
 801cb54:	4604      	mov	r4, r0
 801cb56:	e9c0 3300 	strd	r3, r3, [r0]
 801cb5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cb5e:	6083      	str	r3, [r0, #8]
 801cb60:	8181      	strh	r1, [r0, #12]
 801cb62:	6643      	str	r3, [r0, #100]	@ 0x64
 801cb64:	81c2      	strh	r2, [r0, #14]
 801cb66:	6183      	str	r3, [r0, #24]
 801cb68:	4619      	mov	r1, r3
 801cb6a:	2208      	movs	r2, #8
 801cb6c:	305c      	adds	r0, #92	@ 0x5c
 801cb6e:	f000 fa8d 	bl	801d08c <memset>
 801cb72:	4b0d      	ldr	r3, [pc, #52]	@ (801cba8 <std+0x58>)
 801cb74:	6263      	str	r3, [r4, #36]	@ 0x24
 801cb76:	4b0d      	ldr	r3, [pc, #52]	@ (801cbac <std+0x5c>)
 801cb78:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cb7a:	4b0d      	ldr	r3, [pc, #52]	@ (801cbb0 <std+0x60>)
 801cb7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cb7e:	4b0d      	ldr	r3, [pc, #52]	@ (801cbb4 <std+0x64>)
 801cb80:	6323      	str	r3, [r4, #48]	@ 0x30
 801cb82:	4b0d      	ldr	r3, [pc, #52]	@ (801cbb8 <std+0x68>)
 801cb84:	6224      	str	r4, [r4, #32]
 801cb86:	429c      	cmp	r4, r3
 801cb88:	d006      	beq.n	801cb98 <std+0x48>
 801cb8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cb8e:	4294      	cmp	r4, r2
 801cb90:	d002      	beq.n	801cb98 <std+0x48>
 801cb92:	33d0      	adds	r3, #208	@ 0xd0
 801cb94:	429c      	cmp	r4, r3
 801cb96:	d105      	bne.n	801cba4 <std+0x54>
 801cb98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cba0:	f000 bb02 	b.w	801d1a8 <__retarget_lock_init_recursive>
 801cba4:	bd10      	pop	{r4, pc}
 801cba6:	bf00      	nop
 801cba8:	0801ce65 	.word	0x0801ce65
 801cbac:	0801ce87 	.word	0x0801ce87
 801cbb0:	0801cebf 	.word	0x0801cebf
 801cbb4:	0801cee3 	.word	0x0801cee3
 801cbb8:	2400892c 	.word	0x2400892c

0801cbbc <stdio_exit_handler>:
 801cbbc:	4a02      	ldr	r2, [pc, #8]	@ (801cbc8 <stdio_exit_handler+0xc>)
 801cbbe:	4903      	ldr	r1, [pc, #12]	@ (801cbcc <stdio_exit_handler+0x10>)
 801cbc0:	4803      	ldr	r0, [pc, #12]	@ (801cbd0 <stdio_exit_handler+0x14>)
 801cbc2:	f000 b869 	b.w	801cc98 <_fwalk_sglue>
 801cbc6:	bf00      	nop
 801cbc8:	24000010 	.word	0x24000010
 801cbcc:	0801dd11 	.word	0x0801dd11
 801cbd0:	24000020 	.word	0x24000020

0801cbd4 <cleanup_stdio>:
 801cbd4:	6841      	ldr	r1, [r0, #4]
 801cbd6:	4b0c      	ldr	r3, [pc, #48]	@ (801cc08 <cleanup_stdio+0x34>)
 801cbd8:	4299      	cmp	r1, r3
 801cbda:	b510      	push	{r4, lr}
 801cbdc:	4604      	mov	r4, r0
 801cbde:	d001      	beq.n	801cbe4 <cleanup_stdio+0x10>
 801cbe0:	f001 f896 	bl	801dd10 <_fflush_r>
 801cbe4:	68a1      	ldr	r1, [r4, #8]
 801cbe6:	4b09      	ldr	r3, [pc, #36]	@ (801cc0c <cleanup_stdio+0x38>)
 801cbe8:	4299      	cmp	r1, r3
 801cbea:	d002      	beq.n	801cbf2 <cleanup_stdio+0x1e>
 801cbec:	4620      	mov	r0, r4
 801cbee:	f001 f88f 	bl	801dd10 <_fflush_r>
 801cbf2:	68e1      	ldr	r1, [r4, #12]
 801cbf4:	4b06      	ldr	r3, [pc, #24]	@ (801cc10 <cleanup_stdio+0x3c>)
 801cbf6:	4299      	cmp	r1, r3
 801cbf8:	d004      	beq.n	801cc04 <cleanup_stdio+0x30>
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc00:	f001 b886 	b.w	801dd10 <_fflush_r>
 801cc04:	bd10      	pop	{r4, pc}
 801cc06:	bf00      	nop
 801cc08:	2400892c 	.word	0x2400892c
 801cc0c:	24008994 	.word	0x24008994
 801cc10:	240089fc 	.word	0x240089fc

0801cc14 <global_stdio_init.part.0>:
 801cc14:	b510      	push	{r4, lr}
 801cc16:	4b0b      	ldr	r3, [pc, #44]	@ (801cc44 <global_stdio_init.part.0+0x30>)
 801cc18:	4c0b      	ldr	r4, [pc, #44]	@ (801cc48 <global_stdio_init.part.0+0x34>)
 801cc1a:	4a0c      	ldr	r2, [pc, #48]	@ (801cc4c <global_stdio_init.part.0+0x38>)
 801cc1c:	601a      	str	r2, [r3, #0]
 801cc1e:	4620      	mov	r0, r4
 801cc20:	2200      	movs	r2, #0
 801cc22:	2104      	movs	r1, #4
 801cc24:	f7ff ff94 	bl	801cb50 <std>
 801cc28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cc2c:	2201      	movs	r2, #1
 801cc2e:	2109      	movs	r1, #9
 801cc30:	f7ff ff8e 	bl	801cb50 <std>
 801cc34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cc38:	2202      	movs	r2, #2
 801cc3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc3e:	2112      	movs	r1, #18
 801cc40:	f7ff bf86 	b.w	801cb50 <std>
 801cc44:	24008a64 	.word	0x24008a64
 801cc48:	2400892c 	.word	0x2400892c
 801cc4c:	0801cbbd 	.word	0x0801cbbd

0801cc50 <__sfp_lock_acquire>:
 801cc50:	4801      	ldr	r0, [pc, #4]	@ (801cc58 <__sfp_lock_acquire+0x8>)
 801cc52:	f000 baaa 	b.w	801d1aa <__retarget_lock_acquire_recursive>
 801cc56:	bf00      	nop
 801cc58:	24008a6d 	.word	0x24008a6d

0801cc5c <__sfp_lock_release>:
 801cc5c:	4801      	ldr	r0, [pc, #4]	@ (801cc64 <__sfp_lock_release+0x8>)
 801cc5e:	f000 baa5 	b.w	801d1ac <__retarget_lock_release_recursive>
 801cc62:	bf00      	nop
 801cc64:	24008a6d 	.word	0x24008a6d

0801cc68 <__sinit>:
 801cc68:	b510      	push	{r4, lr}
 801cc6a:	4604      	mov	r4, r0
 801cc6c:	f7ff fff0 	bl	801cc50 <__sfp_lock_acquire>
 801cc70:	6a23      	ldr	r3, [r4, #32]
 801cc72:	b11b      	cbz	r3, 801cc7c <__sinit+0x14>
 801cc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc78:	f7ff bff0 	b.w	801cc5c <__sfp_lock_release>
 801cc7c:	4b04      	ldr	r3, [pc, #16]	@ (801cc90 <__sinit+0x28>)
 801cc7e:	6223      	str	r3, [r4, #32]
 801cc80:	4b04      	ldr	r3, [pc, #16]	@ (801cc94 <__sinit+0x2c>)
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d1f5      	bne.n	801cc74 <__sinit+0xc>
 801cc88:	f7ff ffc4 	bl	801cc14 <global_stdio_init.part.0>
 801cc8c:	e7f2      	b.n	801cc74 <__sinit+0xc>
 801cc8e:	bf00      	nop
 801cc90:	0801cbd5 	.word	0x0801cbd5
 801cc94:	24008a64 	.word	0x24008a64

0801cc98 <_fwalk_sglue>:
 801cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc9c:	4607      	mov	r7, r0
 801cc9e:	4688      	mov	r8, r1
 801cca0:	4614      	mov	r4, r2
 801cca2:	2600      	movs	r6, #0
 801cca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cca8:	f1b9 0901 	subs.w	r9, r9, #1
 801ccac:	d505      	bpl.n	801ccba <_fwalk_sglue+0x22>
 801ccae:	6824      	ldr	r4, [r4, #0]
 801ccb0:	2c00      	cmp	r4, #0
 801ccb2:	d1f7      	bne.n	801cca4 <_fwalk_sglue+0xc>
 801ccb4:	4630      	mov	r0, r6
 801ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccba:	89ab      	ldrh	r3, [r5, #12]
 801ccbc:	2b01      	cmp	r3, #1
 801ccbe:	d907      	bls.n	801ccd0 <_fwalk_sglue+0x38>
 801ccc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ccc4:	3301      	adds	r3, #1
 801ccc6:	d003      	beq.n	801ccd0 <_fwalk_sglue+0x38>
 801ccc8:	4629      	mov	r1, r5
 801ccca:	4638      	mov	r0, r7
 801cccc:	47c0      	blx	r8
 801ccce:	4306      	orrs	r6, r0
 801ccd0:	3568      	adds	r5, #104	@ 0x68
 801ccd2:	e7e9      	b.n	801cca8 <_fwalk_sglue+0x10>

0801ccd4 <iprintf>:
 801ccd4:	b40f      	push	{r0, r1, r2, r3}
 801ccd6:	b507      	push	{r0, r1, r2, lr}
 801ccd8:	4906      	ldr	r1, [pc, #24]	@ (801ccf4 <iprintf+0x20>)
 801ccda:	ab04      	add	r3, sp, #16
 801ccdc:	6808      	ldr	r0, [r1, #0]
 801ccde:	f853 2b04 	ldr.w	r2, [r3], #4
 801cce2:	6881      	ldr	r1, [r0, #8]
 801cce4:	9301      	str	r3, [sp, #4]
 801cce6:	f000 fceb 	bl	801d6c0 <_vfiprintf_r>
 801ccea:	b003      	add	sp, #12
 801ccec:	f85d eb04 	ldr.w	lr, [sp], #4
 801ccf0:	b004      	add	sp, #16
 801ccf2:	4770      	bx	lr
 801ccf4:	2400001c 	.word	0x2400001c

0801ccf8 <_puts_r>:
 801ccf8:	6a03      	ldr	r3, [r0, #32]
 801ccfa:	b570      	push	{r4, r5, r6, lr}
 801ccfc:	6884      	ldr	r4, [r0, #8]
 801ccfe:	4605      	mov	r5, r0
 801cd00:	460e      	mov	r6, r1
 801cd02:	b90b      	cbnz	r3, 801cd08 <_puts_r+0x10>
 801cd04:	f7ff ffb0 	bl	801cc68 <__sinit>
 801cd08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cd0a:	07db      	lsls	r3, r3, #31
 801cd0c:	d405      	bmi.n	801cd1a <_puts_r+0x22>
 801cd0e:	89a3      	ldrh	r3, [r4, #12]
 801cd10:	0598      	lsls	r0, r3, #22
 801cd12:	d402      	bmi.n	801cd1a <_puts_r+0x22>
 801cd14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cd16:	f000 fa48 	bl	801d1aa <__retarget_lock_acquire_recursive>
 801cd1a:	89a3      	ldrh	r3, [r4, #12]
 801cd1c:	0719      	lsls	r1, r3, #28
 801cd1e:	d502      	bpl.n	801cd26 <_puts_r+0x2e>
 801cd20:	6923      	ldr	r3, [r4, #16]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d135      	bne.n	801cd92 <_puts_r+0x9a>
 801cd26:	4621      	mov	r1, r4
 801cd28:	4628      	mov	r0, r5
 801cd2a:	f000 f959 	bl	801cfe0 <__swsetup_r>
 801cd2e:	b380      	cbz	r0, 801cd92 <_puts_r+0x9a>
 801cd30:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801cd34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cd36:	07da      	lsls	r2, r3, #31
 801cd38:	d405      	bmi.n	801cd46 <_puts_r+0x4e>
 801cd3a:	89a3      	ldrh	r3, [r4, #12]
 801cd3c:	059b      	lsls	r3, r3, #22
 801cd3e:	d402      	bmi.n	801cd46 <_puts_r+0x4e>
 801cd40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cd42:	f000 fa33 	bl	801d1ac <__retarget_lock_release_recursive>
 801cd46:	4628      	mov	r0, r5
 801cd48:	bd70      	pop	{r4, r5, r6, pc}
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	da04      	bge.n	801cd58 <_puts_r+0x60>
 801cd4e:	69a2      	ldr	r2, [r4, #24]
 801cd50:	429a      	cmp	r2, r3
 801cd52:	dc17      	bgt.n	801cd84 <_puts_r+0x8c>
 801cd54:	290a      	cmp	r1, #10
 801cd56:	d015      	beq.n	801cd84 <_puts_r+0x8c>
 801cd58:	6823      	ldr	r3, [r4, #0]
 801cd5a:	1c5a      	adds	r2, r3, #1
 801cd5c:	6022      	str	r2, [r4, #0]
 801cd5e:	7019      	strb	r1, [r3, #0]
 801cd60:	68a3      	ldr	r3, [r4, #8]
 801cd62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cd66:	3b01      	subs	r3, #1
 801cd68:	60a3      	str	r3, [r4, #8]
 801cd6a:	2900      	cmp	r1, #0
 801cd6c:	d1ed      	bne.n	801cd4a <_puts_r+0x52>
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	da11      	bge.n	801cd96 <_puts_r+0x9e>
 801cd72:	4622      	mov	r2, r4
 801cd74:	210a      	movs	r1, #10
 801cd76:	4628      	mov	r0, r5
 801cd78:	f000 f8f4 	bl	801cf64 <__swbuf_r>
 801cd7c:	3001      	adds	r0, #1
 801cd7e:	d0d7      	beq.n	801cd30 <_puts_r+0x38>
 801cd80:	250a      	movs	r5, #10
 801cd82:	e7d7      	b.n	801cd34 <_puts_r+0x3c>
 801cd84:	4622      	mov	r2, r4
 801cd86:	4628      	mov	r0, r5
 801cd88:	f000 f8ec 	bl	801cf64 <__swbuf_r>
 801cd8c:	3001      	adds	r0, #1
 801cd8e:	d1e7      	bne.n	801cd60 <_puts_r+0x68>
 801cd90:	e7ce      	b.n	801cd30 <_puts_r+0x38>
 801cd92:	3e01      	subs	r6, #1
 801cd94:	e7e4      	b.n	801cd60 <_puts_r+0x68>
 801cd96:	6823      	ldr	r3, [r4, #0]
 801cd98:	1c5a      	adds	r2, r3, #1
 801cd9a:	6022      	str	r2, [r4, #0]
 801cd9c:	220a      	movs	r2, #10
 801cd9e:	701a      	strb	r2, [r3, #0]
 801cda0:	e7ee      	b.n	801cd80 <_puts_r+0x88>
	...

0801cda4 <puts>:
 801cda4:	4b02      	ldr	r3, [pc, #8]	@ (801cdb0 <puts+0xc>)
 801cda6:	4601      	mov	r1, r0
 801cda8:	6818      	ldr	r0, [r3, #0]
 801cdaa:	f7ff bfa5 	b.w	801ccf8 <_puts_r>
 801cdae:	bf00      	nop
 801cdb0:	2400001c 	.word	0x2400001c

0801cdb4 <sniprintf>:
 801cdb4:	b40c      	push	{r2, r3}
 801cdb6:	b530      	push	{r4, r5, lr}
 801cdb8:	4b18      	ldr	r3, [pc, #96]	@ (801ce1c <sniprintf+0x68>)
 801cdba:	1e0c      	subs	r4, r1, #0
 801cdbc:	681d      	ldr	r5, [r3, #0]
 801cdbe:	b09d      	sub	sp, #116	@ 0x74
 801cdc0:	da08      	bge.n	801cdd4 <sniprintf+0x20>
 801cdc2:	238b      	movs	r3, #139	@ 0x8b
 801cdc4:	602b      	str	r3, [r5, #0]
 801cdc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cdca:	b01d      	add	sp, #116	@ 0x74
 801cdcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cdd0:	b002      	add	sp, #8
 801cdd2:	4770      	bx	lr
 801cdd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cdd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cddc:	f04f 0300 	mov.w	r3, #0
 801cde0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801cde2:	bf14      	ite	ne
 801cde4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cde8:	4623      	moveq	r3, r4
 801cdea:	9304      	str	r3, [sp, #16]
 801cdec:	9307      	str	r3, [sp, #28]
 801cdee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cdf2:	9002      	str	r0, [sp, #8]
 801cdf4:	9006      	str	r0, [sp, #24]
 801cdf6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cdfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cdfc:	ab21      	add	r3, sp, #132	@ 0x84
 801cdfe:	a902      	add	r1, sp, #8
 801ce00:	4628      	mov	r0, r5
 801ce02:	9301      	str	r3, [sp, #4]
 801ce04:	f000 fb36 	bl	801d474 <_svfiprintf_r>
 801ce08:	1c43      	adds	r3, r0, #1
 801ce0a:	bfbc      	itt	lt
 801ce0c:	238b      	movlt	r3, #139	@ 0x8b
 801ce0e:	602b      	strlt	r3, [r5, #0]
 801ce10:	2c00      	cmp	r4, #0
 801ce12:	d0da      	beq.n	801cdca <sniprintf+0x16>
 801ce14:	9b02      	ldr	r3, [sp, #8]
 801ce16:	2200      	movs	r2, #0
 801ce18:	701a      	strb	r2, [r3, #0]
 801ce1a:	e7d6      	b.n	801cdca <sniprintf+0x16>
 801ce1c:	2400001c 	.word	0x2400001c

0801ce20 <siprintf>:
 801ce20:	b40e      	push	{r1, r2, r3}
 801ce22:	b510      	push	{r4, lr}
 801ce24:	b09d      	sub	sp, #116	@ 0x74
 801ce26:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ce28:	9002      	str	r0, [sp, #8]
 801ce2a:	9006      	str	r0, [sp, #24]
 801ce2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ce30:	480a      	ldr	r0, [pc, #40]	@ (801ce5c <siprintf+0x3c>)
 801ce32:	9107      	str	r1, [sp, #28]
 801ce34:	9104      	str	r1, [sp, #16]
 801ce36:	490a      	ldr	r1, [pc, #40]	@ (801ce60 <siprintf+0x40>)
 801ce38:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce3c:	9105      	str	r1, [sp, #20]
 801ce3e:	2400      	movs	r4, #0
 801ce40:	a902      	add	r1, sp, #8
 801ce42:	6800      	ldr	r0, [r0, #0]
 801ce44:	9301      	str	r3, [sp, #4]
 801ce46:	941b      	str	r4, [sp, #108]	@ 0x6c
 801ce48:	f000 fb14 	bl	801d474 <_svfiprintf_r>
 801ce4c:	9b02      	ldr	r3, [sp, #8]
 801ce4e:	701c      	strb	r4, [r3, #0]
 801ce50:	b01d      	add	sp, #116	@ 0x74
 801ce52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce56:	b003      	add	sp, #12
 801ce58:	4770      	bx	lr
 801ce5a:	bf00      	nop
 801ce5c:	2400001c 	.word	0x2400001c
 801ce60:	ffff0208 	.word	0xffff0208

0801ce64 <__sread>:
 801ce64:	b510      	push	{r4, lr}
 801ce66:	460c      	mov	r4, r1
 801ce68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce6c:	f000 f94e 	bl	801d10c <_read_r>
 801ce70:	2800      	cmp	r0, #0
 801ce72:	bfab      	itete	ge
 801ce74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ce76:	89a3      	ldrhlt	r3, [r4, #12]
 801ce78:	181b      	addge	r3, r3, r0
 801ce7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ce7e:	bfac      	ite	ge
 801ce80:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ce82:	81a3      	strhlt	r3, [r4, #12]
 801ce84:	bd10      	pop	{r4, pc}

0801ce86 <__swrite>:
 801ce86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce8a:	461f      	mov	r7, r3
 801ce8c:	898b      	ldrh	r3, [r1, #12]
 801ce8e:	05db      	lsls	r3, r3, #23
 801ce90:	4605      	mov	r5, r0
 801ce92:	460c      	mov	r4, r1
 801ce94:	4616      	mov	r6, r2
 801ce96:	d505      	bpl.n	801cea4 <__swrite+0x1e>
 801ce98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce9c:	2302      	movs	r3, #2
 801ce9e:	2200      	movs	r2, #0
 801cea0:	f000 f922 	bl	801d0e8 <_lseek_r>
 801cea4:	89a3      	ldrh	r3, [r4, #12]
 801cea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ceaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ceae:	81a3      	strh	r3, [r4, #12]
 801ceb0:	4632      	mov	r2, r6
 801ceb2:	463b      	mov	r3, r7
 801ceb4:	4628      	mov	r0, r5
 801ceb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ceba:	f000 b939 	b.w	801d130 <_write_r>

0801cebe <__sseek>:
 801cebe:	b510      	push	{r4, lr}
 801cec0:	460c      	mov	r4, r1
 801cec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cec6:	f000 f90f 	bl	801d0e8 <_lseek_r>
 801ceca:	1c43      	adds	r3, r0, #1
 801cecc:	89a3      	ldrh	r3, [r4, #12]
 801cece:	bf15      	itete	ne
 801ced0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ced2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ced6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ceda:	81a3      	strheq	r3, [r4, #12]
 801cedc:	bf18      	it	ne
 801cede:	81a3      	strhne	r3, [r4, #12]
 801cee0:	bd10      	pop	{r4, pc}

0801cee2 <__sclose>:
 801cee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cee6:	f000 b8ef 	b.w	801d0c8 <_close_r>

0801ceea <_vsniprintf_r>:
 801ceea:	b530      	push	{r4, r5, lr}
 801ceec:	4614      	mov	r4, r2
 801ceee:	2c00      	cmp	r4, #0
 801cef0:	b09b      	sub	sp, #108	@ 0x6c
 801cef2:	4605      	mov	r5, r0
 801cef4:	461a      	mov	r2, r3
 801cef6:	da05      	bge.n	801cf04 <_vsniprintf_r+0x1a>
 801cef8:	238b      	movs	r3, #139	@ 0x8b
 801cefa:	6003      	str	r3, [r0, #0]
 801cefc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf00:	b01b      	add	sp, #108	@ 0x6c
 801cf02:	bd30      	pop	{r4, r5, pc}
 801cf04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cf08:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cf0c:	f04f 0300 	mov.w	r3, #0
 801cf10:	9319      	str	r3, [sp, #100]	@ 0x64
 801cf12:	bf14      	ite	ne
 801cf14:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cf18:	4623      	moveq	r3, r4
 801cf1a:	9302      	str	r3, [sp, #8]
 801cf1c:	9305      	str	r3, [sp, #20]
 801cf1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cf22:	9100      	str	r1, [sp, #0]
 801cf24:	9104      	str	r1, [sp, #16]
 801cf26:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cf2a:	4669      	mov	r1, sp
 801cf2c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cf2e:	f000 faa1 	bl	801d474 <_svfiprintf_r>
 801cf32:	1c43      	adds	r3, r0, #1
 801cf34:	bfbc      	itt	lt
 801cf36:	238b      	movlt	r3, #139	@ 0x8b
 801cf38:	602b      	strlt	r3, [r5, #0]
 801cf3a:	2c00      	cmp	r4, #0
 801cf3c:	d0e0      	beq.n	801cf00 <_vsniprintf_r+0x16>
 801cf3e:	9b00      	ldr	r3, [sp, #0]
 801cf40:	2200      	movs	r2, #0
 801cf42:	701a      	strb	r2, [r3, #0]
 801cf44:	e7dc      	b.n	801cf00 <_vsniprintf_r+0x16>
	...

0801cf48 <vsniprintf>:
 801cf48:	b507      	push	{r0, r1, r2, lr}
 801cf4a:	9300      	str	r3, [sp, #0]
 801cf4c:	4613      	mov	r3, r2
 801cf4e:	460a      	mov	r2, r1
 801cf50:	4601      	mov	r1, r0
 801cf52:	4803      	ldr	r0, [pc, #12]	@ (801cf60 <vsniprintf+0x18>)
 801cf54:	6800      	ldr	r0, [r0, #0]
 801cf56:	f7ff ffc8 	bl	801ceea <_vsniprintf_r>
 801cf5a:	b003      	add	sp, #12
 801cf5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801cf60:	2400001c 	.word	0x2400001c

0801cf64 <__swbuf_r>:
 801cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf66:	460e      	mov	r6, r1
 801cf68:	4614      	mov	r4, r2
 801cf6a:	4605      	mov	r5, r0
 801cf6c:	b118      	cbz	r0, 801cf76 <__swbuf_r+0x12>
 801cf6e:	6a03      	ldr	r3, [r0, #32]
 801cf70:	b90b      	cbnz	r3, 801cf76 <__swbuf_r+0x12>
 801cf72:	f7ff fe79 	bl	801cc68 <__sinit>
 801cf76:	69a3      	ldr	r3, [r4, #24]
 801cf78:	60a3      	str	r3, [r4, #8]
 801cf7a:	89a3      	ldrh	r3, [r4, #12]
 801cf7c:	071a      	lsls	r2, r3, #28
 801cf7e:	d501      	bpl.n	801cf84 <__swbuf_r+0x20>
 801cf80:	6923      	ldr	r3, [r4, #16]
 801cf82:	b943      	cbnz	r3, 801cf96 <__swbuf_r+0x32>
 801cf84:	4621      	mov	r1, r4
 801cf86:	4628      	mov	r0, r5
 801cf88:	f000 f82a 	bl	801cfe0 <__swsetup_r>
 801cf8c:	b118      	cbz	r0, 801cf96 <__swbuf_r+0x32>
 801cf8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801cf92:	4638      	mov	r0, r7
 801cf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf96:	6823      	ldr	r3, [r4, #0]
 801cf98:	6922      	ldr	r2, [r4, #16]
 801cf9a:	1a98      	subs	r0, r3, r2
 801cf9c:	6963      	ldr	r3, [r4, #20]
 801cf9e:	b2f6      	uxtb	r6, r6
 801cfa0:	4283      	cmp	r3, r0
 801cfa2:	4637      	mov	r7, r6
 801cfa4:	dc05      	bgt.n	801cfb2 <__swbuf_r+0x4e>
 801cfa6:	4621      	mov	r1, r4
 801cfa8:	4628      	mov	r0, r5
 801cfaa:	f000 feb1 	bl	801dd10 <_fflush_r>
 801cfae:	2800      	cmp	r0, #0
 801cfb0:	d1ed      	bne.n	801cf8e <__swbuf_r+0x2a>
 801cfb2:	68a3      	ldr	r3, [r4, #8]
 801cfb4:	3b01      	subs	r3, #1
 801cfb6:	60a3      	str	r3, [r4, #8]
 801cfb8:	6823      	ldr	r3, [r4, #0]
 801cfba:	1c5a      	adds	r2, r3, #1
 801cfbc:	6022      	str	r2, [r4, #0]
 801cfbe:	701e      	strb	r6, [r3, #0]
 801cfc0:	6962      	ldr	r2, [r4, #20]
 801cfc2:	1c43      	adds	r3, r0, #1
 801cfc4:	429a      	cmp	r2, r3
 801cfc6:	d004      	beq.n	801cfd2 <__swbuf_r+0x6e>
 801cfc8:	89a3      	ldrh	r3, [r4, #12]
 801cfca:	07db      	lsls	r3, r3, #31
 801cfcc:	d5e1      	bpl.n	801cf92 <__swbuf_r+0x2e>
 801cfce:	2e0a      	cmp	r6, #10
 801cfd0:	d1df      	bne.n	801cf92 <__swbuf_r+0x2e>
 801cfd2:	4621      	mov	r1, r4
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	f000 fe9b 	bl	801dd10 <_fflush_r>
 801cfda:	2800      	cmp	r0, #0
 801cfdc:	d0d9      	beq.n	801cf92 <__swbuf_r+0x2e>
 801cfde:	e7d6      	b.n	801cf8e <__swbuf_r+0x2a>

0801cfe0 <__swsetup_r>:
 801cfe0:	b538      	push	{r3, r4, r5, lr}
 801cfe2:	4b29      	ldr	r3, [pc, #164]	@ (801d088 <__swsetup_r+0xa8>)
 801cfe4:	4605      	mov	r5, r0
 801cfe6:	6818      	ldr	r0, [r3, #0]
 801cfe8:	460c      	mov	r4, r1
 801cfea:	b118      	cbz	r0, 801cff4 <__swsetup_r+0x14>
 801cfec:	6a03      	ldr	r3, [r0, #32]
 801cfee:	b90b      	cbnz	r3, 801cff4 <__swsetup_r+0x14>
 801cff0:	f7ff fe3a 	bl	801cc68 <__sinit>
 801cff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cff8:	0719      	lsls	r1, r3, #28
 801cffa:	d422      	bmi.n	801d042 <__swsetup_r+0x62>
 801cffc:	06da      	lsls	r2, r3, #27
 801cffe:	d407      	bmi.n	801d010 <__swsetup_r+0x30>
 801d000:	2209      	movs	r2, #9
 801d002:	602a      	str	r2, [r5, #0]
 801d004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d008:	81a3      	strh	r3, [r4, #12]
 801d00a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d00e:	e033      	b.n	801d078 <__swsetup_r+0x98>
 801d010:	0758      	lsls	r0, r3, #29
 801d012:	d512      	bpl.n	801d03a <__swsetup_r+0x5a>
 801d014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d016:	b141      	cbz	r1, 801d02a <__swsetup_r+0x4a>
 801d018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d01c:	4299      	cmp	r1, r3
 801d01e:	d002      	beq.n	801d026 <__swsetup_r+0x46>
 801d020:	4628      	mov	r0, r5
 801d022:	f000 f8d3 	bl	801d1cc <_free_r>
 801d026:	2300      	movs	r3, #0
 801d028:	6363      	str	r3, [r4, #52]	@ 0x34
 801d02a:	89a3      	ldrh	r3, [r4, #12]
 801d02c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d030:	81a3      	strh	r3, [r4, #12]
 801d032:	2300      	movs	r3, #0
 801d034:	6063      	str	r3, [r4, #4]
 801d036:	6923      	ldr	r3, [r4, #16]
 801d038:	6023      	str	r3, [r4, #0]
 801d03a:	89a3      	ldrh	r3, [r4, #12]
 801d03c:	f043 0308 	orr.w	r3, r3, #8
 801d040:	81a3      	strh	r3, [r4, #12]
 801d042:	6923      	ldr	r3, [r4, #16]
 801d044:	b94b      	cbnz	r3, 801d05a <__swsetup_r+0x7a>
 801d046:	89a3      	ldrh	r3, [r4, #12]
 801d048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d050:	d003      	beq.n	801d05a <__swsetup_r+0x7a>
 801d052:	4621      	mov	r1, r4
 801d054:	4628      	mov	r0, r5
 801d056:	f000 fea9 	bl	801ddac <__smakebuf_r>
 801d05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d05e:	f013 0201 	ands.w	r2, r3, #1
 801d062:	d00a      	beq.n	801d07a <__swsetup_r+0x9a>
 801d064:	2200      	movs	r2, #0
 801d066:	60a2      	str	r2, [r4, #8]
 801d068:	6962      	ldr	r2, [r4, #20]
 801d06a:	4252      	negs	r2, r2
 801d06c:	61a2      	str	r2, [r4, #24]
 801d06e:	6922      	ldr	r2, [r4, #16]
 801d070:	b942      	cbnz	r2, 801d084 <__swsetup_r+0xa4>
 801d072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d076:	d1c5      	bne.n	801d004 <__swsetup_r+0x24>
 801d078:	bd38      	pop	{r3, r4, r5, pc}
 801d07a:	0799      	lsls	r1, r3, #30
 801d07c:	bf58      	it	pl
 801d07e:	6962      	ldrpl	r2, [r4, #20]
 801d080:	60a2      	str	r2, [r4, #8]
 801d082:	e7f4      	b.n	801d06e <__swsetup_r+0x8e>
 801d084:	2000      	movs	r0, #0
 801d086:	e7f7      	b.n	801d078 <__swsetup_r+0x98>
 801d088:	2400001c 	.word	0x2400001c

0801d08c <memset>:
 801d08c:	4402      	add	r2, r0
 801d08e:	4603      	mov	r3, r0
 801d090:	4293      	cmp	r3, r2
 801d092:	d100      	bne.n	801d096 <memset+0xa>
 801d094:	4770      	bx	lr
 801d096:	f803 1b01 	strb.w	r1, [r3], #1
 801d09a:	e7f9      	b.n	801d090 <memset+0x4>

0801d09c <strstr>:
 801d09c:	780a      	ldrb	r2, [r1, #0]
 801d09e:	b570      	push	{r4, r5, r6, lr}
 801d0a0:	b96a      	cbnz	r2, 801d0be <strstr+0x22>
 801d0a2:	bd70      	pop	{r4, r5, r6, pc}
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d109      	bne.n	801d0bc <strstr+0x20>
 801d0a8:	460c      	mov	r4, r1
 801d0aa:	4605      	mov	r5, r0
 801d0ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d0f6      	beq.n	801d0a2 <strstr+0x6>
 801d0b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d0b8:	429e      	cmp	r6, r3
 801d0ba:	d0f7      	beq.n	801d0ac <strstr+0x10>
 801d0bc:	3001      	adds	r0, #1
 801d0be:	7803      	ldrb	r3, [r0, #0]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d1ef      	bne.n	801d0a4 <strstr+0x8>
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	e7ec      	b.n	801d0a2 <strstr+0x6>

0801d0c8 <_close_r>:
 801d0c8:	b538      	push	{r3, r4, r5, lr}
 801d0ca:	4d06      	ldr	r5, [pc, #24]	@ (801d0e4 <_close_r+0x1c>)
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	4604      	mov	r4, r0
 801d0d0:	4608      	mov	r0, r1
 801d0d2:	602b      	str	r3, [r5, #0]
 801d0d4:	f7e5 f932 	bl	800233c <_close>
 801d0d8:	1c43      	adds	r3, r0, #1
 801d0da:	d102      	bne.n	801d0e2 <_close_r+0x1a>
 801d0dc:	682b      	ldr	r3, [r5, #0]
 801d0de:	b103      	cbz	r3, 801d0e2 <_close_r+0x1a>
 801d0e0:	6023      	str	r3, [r4, #0]
 801d0e2:	bd38      	pop	{r3, r4, r5, pc}
 801d0e4:	24008a68 	.word	0x24008a68

0801d0e8 <_lseek_r>:
 801d0e8:	b538      	push	{r3, r4, r5, lr}
 801d0ea:	4d07      	ldr	r5, [pc, #28]	@ (801d108 <_lseek_r+0x20>)
 801d0ec:	4604      	mov	r4, r0
 801d0ee:	4608      	mov	r0, r1
 801d0f0:	4611      	mov	r1, r2
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	602a      	str	r2, [r5, #0]
 801d0f6:	461a      	mov	r2, r3
 801d0f8:	f7e5 f947 	bl	800238a <_lseek>
 801d0fc:	1c43      	adds	r3, r0, #1
 801d0fe:	d102      	bne.n	801d106 <_lseek_r+0x1e>
 801d100:	682b      	ldr	r3, [r5, #0]
 801d102:	b103      	cbz	r3, 801d106 <_lseek_r+0x1e>
 801d104:	6023      	str	r3, [r4, #0]
 801d106:	bd38      	pop	{r3, r4, r5, pc}
 801d108:	24008a68 	.word	0x24008a68

0801d10c <_read_r>:
 801d10c:	b538      	push	{r3, r4, r5, lr}
 801d10e:	4d07      	ldr	r5, [pc, #28]	@ (801d12c <_read_r+0x20>)
 801d110:	4604      	mov	r4, r0
 801d112:	4608      	mov	r0, r1
 801d114:	4611      	mov	r1, r2
 801d116:	2200      	movs	r2, #0
 801d118:	602a      	str	r2, [r5, #0]
 801d11a:	461a      	mov	r2, r3
 801d11c:	f7e5 f8d5 	bl	80022ca <_read>
 801d120:	1c43      	adds	r3, r0, #1
 801d122:	d102      	bne.n	801d12a <_read_r+0x1e>
 801d124:	682b      	ldr	r3, [r5, #0]
 801d126:	b103      	cbz	r3, 801d12a <_read_r+0x1e>
 801d128:	6023      	str	r3, [r4, #0]
 801d12a:	bd38      	pop	{r3, r4, r5, pc}
 801d12c:	24008a68 	.word	0x24008a68

0801d130 <_write_r>:
 801d130:	b538      	push	{r3, r4, r5, lr}
 801d132:	4d07      	ldr	r5, [pc, #28]	@ (801d150 <_write_r+0x20>)
 801d134:	4604      	mov	r4, r0
 801d136:	4608      	mov	r0, r1
 801d138:	4611      	mov	r1, r2
 801d13a:	2200      	movs	r2, #0
 801d13c:	602a      	str	r2, [r5, #0]
 801d13e:	461a      	mov	r2, r3
 801d140:	f7e5 f8e0 	bl	8002304 <_write>
 801d144:	1c43      	adds	r3, r0, #1
 801d146:	d102      	bne.n	801d14e <_write_r+0x1e>
 801d148:	682b      	ldr	r3, [r5, #0]
 801d14a:	b103      	cbz	r3, 801d14e <_write_r+0x1e>
 801d14c:	6023      	str	r3, [r4, #0]
 801d14e:	bd38      	pop	{r3, r4, r5, pc}
 801d150:	24008a68 	.word	0x24008a68

0801d154 <__errno>:
 801d154:	4b01      	ldr	r3, [pc, #4]	@ (801d15c <__errno+0x8>)
 801d156:	6818      	ldr	r0, [r3, #0]
 801d158:	4770      	bx	lr
 801d15a:	bf00      	nop
 801d15c:	2400001c 	.word	0x2400001c

0801d160 <__libc_init_array>:
 801d160:	b570      	push	{r4, r5, r6, lr}
 801d162:	4d0d      	ldr	r5, [pc, #52]	@ (801d198 <__libc_init_array+0x38>)
 801d164:	4c0d      	ldr	r4, [pc, #52]	@ (801d19c <__libc_init_array+0x3c>)
 801d166:	1b64      	subs	r4, r4, r5
 801d168:	10a4      	asrs	r4, r4, #2
 801d16a:	2600      	movs	r6, #0
 801d16c:	42a6      	cmp	r6, r4
 801d16e:	d109      	bne.n	801d184 <__libc_init_array+0x24>
 801d170:	4d0b      	ldr	r5, [pc, #44]	@ (801d1a0 <__libc_init_array+0x40>)
 801d172:	4c0c      	ldr	r4, [pc, #48]	@ (801d1a4 <__libc_init_array+0x44>)
 801d174:	f000 fed8 	bl	801df28 <_init>
 801d178:	1b64      	subs	r4, r4, r5
 801d17a:	10a4      	asrs	r4, r4, #2
 801d17c:	2600      	movs	r6, #0
 801d17e:	42a6      	cmp	r6, r4
 801d180:	d105      	bne.n	801d18e <__libc_init_array+0x2e>
 801d182:	bd70      	pop	{r4, r5, r6, pc}
 801d184:	f855 3b04 	ldr.w	r3, [r5], #4
 801d188:	4798      	blx	r3
 801d18a:	3601      	adds	r6, #1
 801d18c:	e7ee      	b.n	801d16c <__libc_init_array+0xc>
 801d18e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d192:	4798      	blx	r3
 801d194:	3601      	adds	r6, #1
 801d196:	e7f2      	b.n	801d17e <__libc_init_array+0x1e>
 801d198:	08031818 	.word	0x08031818
 801d19c:	08031818 	.word	0x08031818
 801d1a0:	08031818 	.word	0x08031818
 801d1a4:	0803181c 	.word	0x0803181c

0801d1a8 <__retarget_lock_init_recursive>:
 801d1a8:	4770      	bx	lr

0801d1aa <__retarget_lock_acquire_recursive>:
 801d1aa:	4770      	bx	lr

0801d1ac <__retarget_lock_release_recursive>:
 801d1ac:	4770      	bx	lr

0801d1ae <memcpy>:
 801d1ae:	440a      	add	r2, r1
 801d1b0:	4291      	cmp	r1, r2
 801d1b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d1b6:	d100      	bne.n	801d1ba <memcpy+0xc>
 801d1b8:	4770      	bx	lr
 801d1ba:	b510      	push	{r4, lr}
 801d1bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d1c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d1c4:	4291      	cmp	r1, r2
 801d1c6:	d1f9      	bne.n	801d1bc <memcpy+0xe>
 801d1c8:	bd10      	pop	{r4, pc}
	...

0801d1cc <_free_r>:
 801d1cc:	b538      	push	{r3, r4, r5, lr}
 801d1ce:	4605      	mov	r5, r0
 801d1d0:	2900      	cmp	r1, #0
 801d1d2:	d041      	beq.n	801d258 <_free_r+0x8c>
 801d1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d1d8:	1f0c      	subs	r4, r1, #4
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	bfb8      	it	lt
 801d1de:	18e4      	addlt	r4, r4, r3
 801d1e0:	f000 f8e0 	bl	801d3a4 <__malloc_lock>
 801d1e4:	4a1d      	ldr	r2, [pc, #116]	@ (801d25c <_free_r+0x90>)
 801d1e6:	6813      	ldr	r3, [r2, #0]
 801d1e8:	b933      	cbnz	r3, 801d1f8 <_free_r+0x2c>
 801d1ea:	6063      	str	r3, [r4, #4]
 801d1ec:	6014      	str	r4, [r2, #0]
 801d1ee:	4628      	mov	r0, r5
 801d1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d1f4:	f000 b8dc 	b.w	801d3b0 <__malloc_unlock>
 801d1f8:	42a3      	cmp	r3, r4
 801d1fa:	d908      	bls.n	801d20e <_free_r+0x42>
 801d1fc:	6820      	ldr	r0, [r4, #0]
 801d1fe:	1821      	adds	r1, r4, r0
 801d200:	428b      	cmp	r3, r1
 801d202:	bf01      	itttt	eq
 801d204:	6819      	ldreq	r1, [r3, #0]
 801d206:	685b      	ldreq	r3, [r3, #4]
 801d208:	1809      	addeq	r1, r1, r0
 801d20a:	6021      	streq	r1, [r4, #0]
 801d20c:	e7ed      	b.n	801d1ea <_free_r+0x1e>
 801d20e:	461a      	mov	r2, r3
 801d210:	685b      	ldr	r3, [r3, #4]
 801d212:	b10b      	cbz	r3, 801d218 <_free_r+0x4c>
 801d214:	42a3      	cmp	r3, r4
 801d216:	d9fa      	bls.n	801d20e <_free_r+0x42>
 801d218:	6811      	ldr	r1, [r2, #0]
 801d21a:	1850      	adds	r0, r2, r1
 801d21c:	42a0      	cmp	r0, r4
 801d21e:	d10b      	bne.n	801d238 <_free_r+0x6c>
 801d220:	6820      	ldr	r0, [r4, #0]
 801d222:	4401      	add	r1, r0
 801d224:	1850      	adds	r0, r2, r1
 801d226:	4283      	cmp	r3, r0
 801d228:	6011      	str	r1, [r2, #0]
 801d22a:	d1e0      	bne.n	801d1ee <_free_r+0x22>
 801d22c:	6818      	ldr	r0, [r3, #0]
 801d22e:	685b      	ldr	r3, [r3, #4]
 801d230:	6053      	str	r3, [r2, #4]
 801d232:	4408      	add	r0, r1
 801d234:	6010      	str	r0, [r2, #0]
 801d236:	e7da      	b.n	801d1ee <_free_r+0x22>
 801d238:	d902      	bls.n	801d240 <_free_r+0x74>
 801d23a:	230c      	movs	r3, #12
 801d23c:	602b      	str	r3, [r5, #0]
 801d23e:	e7d6      	b.n	801d1ee <_free_r+0x22>
 801d240:	6820      	ldr	r0, [r4, #0]
 801d242:	1821      	adds	r1, r4, r0
 801d244:	428b      	cmp	r3, r1
 801d246:	bf04      	itt	eq
 801d248:	6819      	ldreq	r1, [r3, #0]
 801d24a:	685b      	ldreq	r3, [r3, #4]
 801d24c:	6063      	str	r3, [r4, #4]
 801d24e:	bf04      	itt	eq
 801d250:	1809      	addeq	r1, r1, r0
 801d252:	6021      	streq	r1, [r4, #0]
 801d254:	6054      	str	r4, [r2, #4]
 801d256:	e7ca      	b.n	801d1ee <_free_r+0x22>
 801d258:	bd38      	pop	{r3, r4, r5, pc}
 801d25a:	bf00      	nop
 801d25c:	24008a74 	.word	0x24008a74

0801d260 <sbrk_aligned>:
 801d260:	b570      	push	{r4, r5, r6, lr}
 801d262:	4e0f      	ldr	r6, [pc, #60]	@ (801d2a0 <sbrk_aligned+0x40>)
 801d264:	460c      	mov	r4, r1
 801d266:	6831      	ldr	r1, [r6, #0]
 801d268:	4605      	mov	r5, r0
 801d26a:	b911      	cbnz	r1, 801d272 <sbrk_aligned+0x12>
 801d26c:	f000 fe16 	bl	801de9c <_sbrk_r>
 801d270:	6030      	str	r0, [r6, #0]
 801d272:	4621      	mov	r1, r4
 801d274:	4628      	mov	r0, r5
 801d276:	f000 fe11 	bl	801de9c <_sbrk_r>
 801d27a:	1c43      	adds	r3, r0, #1
 801d27c:	d103      	bne.n	801d286 <sbrk_aligned+0x26>
 801d27e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d282:	4620      	mov	r0, r4
 801d284:	bd70      	pop	{r4, r5, r6, pc}
 801d286:	1cc4      	adds	r4, r0, #3
 801d288:	f024 0403 	bic.w	r4, r4, #3
 801d28c:	42a0      	cmp	r0, r4
 801d28e:	d0f8      	beq.n	801d282 <sbrk_aligned+0x22>
 801d290:	1a21      	subs	r1, r4, r0
 801d292:	4628      	mov	r0, r5
 801d294:	f000 fe02 	bl	801de9c <_sbrk_r>
 801d298:	3001      	adds	r0, #1
 801d29a:	d1f2      	bne.n	801d282 <sbrk_aligned+0x22>
 801d29c:	e7ef      	b.n	801d27e <sbrk_aligned+0x1e>
 801d29e:	bf00      	nop
 801d2a0:	24008a70 	.word	0x24008a70

0801d2a4 <_malloc_r>:
 801d2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2a8:	1ccd      	adds	r5, r1, #3
 801d2aa:	f025 0503 	bic.w	r5, r5, #3
 801d2ae:	3508      	adds	r5, #8
 801d2b0:	2d0c      	cmp	r5, #12
 801d2b2:	bf38      	it	cc
 801d2b4:	250c      	movcc	r5, #12
 801d2b6:	2d00      	cmp	r5, #0
 801d2b8:	4606      	mov	r6, r0
 801d2ba:	db01      	blt.n	801d2c0 <_malloc_r+0x1c>
 801d2bc:	42a9      	cmp	r1, r5
 801d2be:	d904      	bls.n	801d2ca <_malloc_r+0x26>
 801d2c0:	230c      	movs	r3, #12
 801d2c2:	6033      	str	r3, [r6, #0]
 801d2c4:	2000      	movs	r0, #0
 801d2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d3a0 <_malloc_r+0xfc>
 801d2ce:	f000 f869 	bl	801d3a4 <__malloc_lock>
 801d2d2:	f8d8 3000 	ldr.w	r3, [r8]
 801d2d6:	461c      	mov	r4, r3
 801d2d8:	bb44      	cbnz	r4, 801d32c <_malloc_r+0x88>
 801d2da:	4629      	mov	r1, r5
 801d2dc:	4630      	mov	r0, r6
 801d2de:	f7ff ffbf 	bl	801d260 <sbrk_aligned>
 801d2e2:	1c43      	adds	r3, r0, #1
 801d2e4:	4604      	mov	r4, r0
 801d2e6:	d158      	bne.n	801d39a <_malloc_r+0xf6>
 801d2e8:	f8d8 4000 	ldr.w	r4, [r8]
 801d2ec:	4627      	mov	r7, r4
 801d2ee:	2f00      	cmp	r7, #0
 801d2f0:	d143      	bne.n	801d37a <_malloc_r+0xd6>
 801d2f2:	2c00      	cmp	r4, #0
 801d2f4:	d04b      	beq.n	801d38e <_malloc_r+0xea>
 801d2f6:	6823      	ldr	r3, [r4, #0]
 801d2f8:	4639      	mov	r1, r7
 801d2fa:	4630      	mov	r0, r6
 801d2fc:	eb04 0903 	add.w	r9, r4, r3
 801d300:	f000 fdcc 	bl	801de9c <_sbrk_r>
 801d304:	4581      	cmp	r9, r0
 801d306:	d142      	bne.n	801d38e <_malloc_r+0xea>
 801d308:	6821      	ldr	r1, [r4, #0]
 801d30a:	1a6d      	subs	r5, r5, r1
 801d30c:	4629      	mov	r1, r5
 801d30e:	4630      	mov	r0, r6
 801d310:	f7ff ffa6 	bl	801d260 <sbrk_aligned>
 801d314:	3001      	adds	r0, #1
 801d316:	d03a      	beq.n	801d38e <_malloc_r+0xea>
 801d318:	6823      	ldr	r3, [r4, #0]
 801d31a:	442b      	add	r3, r5
 801d31c:	6023      	str	r3, [r4, #0]
 801d31e:	f8d8 3000 	ldr.w	r3, [r8]
 801d322:	685a      	ldr	r2, [r3, #4]
 801d324:	bb62      	cbnz	r2, 801d380 <_malloc_r+0xdc>
 801d326:	f8c8 7000 	str.w	r7, [r8]
 801d32a:	e00f      	b.n	801d34c <_malloc_r+0xa8>
 801d32c:	6822      	ldr	r2, [r4, #0]
 801d32e:	1b52      	subs	r2, r2, r5
 801d330:	d420      	bmi.n	801d374 <_malloc_r+0xd0>
 801d332:	2a0b      	cmp	r2, #11
 801d334:	d917      	bls.n	801d366 <_malloc_r+0xc2>
 801d336:	1961      	adds	r1, r4, r5
 801d338:	42a3      	cmp	r3, r4
 801d33a:	6025      	str	r5, [r4, #0]
 801d33c:	bf18      	it	ne
 801d33e:	6059      	strne	r1, [r3, #4]
 801d340:	6863      	ldr	r3, [r4, #4]
 801d342:	bf08      	it	eq
 801d344:	f8c8 1000 	streq.w	r1, [r8]
 801d348:	5162      	str	r2, [r4, r5]
 801d34a:	604b      	str	r3, [r1, #4]
 801d34c:	4630      	mov	r0, r6
 801d34e:	f000 f82f 	bl	801d3b0 <__malloc_unlock>
 801d352:	f104 000b 	add.w	r0, r4, #11
 801d356:	1d23      	adds	r3, r4, #4
 801d358:	f020 0007 	bic.w	r0, r0, #7
 801d35c:	1ac2      	subs	r2, r0, r3
 801d35e:	bf1c      	itt	ne
 801d360:	1a1b      	subne	r3, r3, r0
 801d362:	50a3      	strne	r3, [r4, r2]
 801d364:	e7af      	b.n	801d2c6 <_malloc_r+0x22>
 801d366:	6862      	ldr	r2, [r4, #4]
 801d368:	42a3      	cmp	r3, r4
 801d36a:	bf0c      	ite	eq
 801d36c:	f8c8 2000 	streq.w	r2, [r8]
 801d370:	605a      	strne	r2, [r3, #4]
 801d372:	e7eb      	b.n	801d34c <_malloc_r+0xa8>
 801d374:	4623      	mov	r3, r4
 801d376:	6864      	ldr	r4, [r4, #4]
 801d378:	e7ae      	b.n	801d2d8 <_malloc_r+0x34>
 801d37a:	463c      	mov	r4, r7
 801d37c:	687f      	ldr	r7, [r7, #4]
 801d37e:	e7b6      	b.n	801d2ee <_malloc_r+0x4a>
 801d380:	461a      	mov	r2, r3
 801d382:	685b      	ldr	r3, [r3, #4]
 801d384:	42a3      	cmp	r3, r4
 801d386:	d1fb      	bne.n	801d380 <_malloc_r+0xdc>
 801d388:	2300      	movs	r3, #0
 801d38a:	6053      	str	r3, [r2, #4]
 801d38c:	e7de      	b.n	801d34c <_malloc_r+0xa8>
 801d38e:	230c      	movs	r3, #12
 801d390:	6033      	str	r3, [r6, #0]
 801d392:	4630      	mov	r0, r6
 801d394:	f000 f80c 	bl	801d3b0 <__malloc_unlock>
 801d398:	e794      	b.n	801d2c4 <_malloc_r+0x20>
 801d39a:	6005      	str	r5, [r0, #0]
 801d39c:	e7d6      	b.n	801d34c <_malloc_r+0xa8>
 801d39e:	bf00      	nop
 801d3a0:	24008a74 	.word	0x24008a74

0801d3a4 <__malloc_lock>:
 801d3a4:	4801      	ldr	r0, [pc, #4]	@ (801d3ac <__malloc_lock+0x8>)
 801d3a6:	f7ff bf00 	b.w	801d1aa <__retarget_lock_acquire_recursive>
 801d3aa:	bf00      	nop
 801d3ac:	24008a6c 	.word	0x24008a6c

0801d3b0 <__malloc_unlock>:
 801d3b0:	4801      	ldr	r0, [pc, #4]	@ (801d3b8 <__malloc_unlock+0x8>)
 801d3b2:	f7ff befb 	b.w	801d1ac <__retarget_lock_release_recursive>
 801d3b6:	bf00      	nop
 801d3b8:	24008a6c 	.word	0x24008a6c

0801d3bc <__ssputs_r>:
 801d3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3c0:	688e      	ldr	r6, [r1, #8]
 801d3c2:	461f      	mov	r7, r3
 801d3c4:	42be      	cmp	r6, r7
 801d3c6:	680b      	ldr	r3, [r1, #0]
 801d3c8:	4682      	mov	sl, r0
 801d3ca:	460c      	mov	r4, r1
 801d3cc:	4690      	mov	r8, r2
 801d3ce:	d82d      	bhi.n	801d42c <__ssputs_r+0x70>
 801d3d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d3d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d3d8:	d026      	beq.n	801d428 <__ssputs_r+0x6c>
 801d3da:	6965      	ldr	r5, [r4, #20]
 801d3dc:	6909      	ldr	r1, [r1, #16]
 801d3de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3e2:	eba3 0901 	sub.w	r9, r3, r1
 801d3e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d3ea:	1c7b      	adds	r3, r7, #1
 801d3ec:	444b      	add	r3, r9
 801d3ee:	106d      	asrs	r5, r5, #1
 801d3f0:	429d      	cmp	r5, r3
 801d3f2:	bf38      	it	cc
 801d3f4:	461d      	movcc	r5, r3
 801d3f6:	0553      	lsls	r3, r2, #21
 801d3f8:	d527      	bpl.n	801d44a <__ssputs_r+0x8e>
 801d3fa:	4629      	mov	r1, r5
 801d3fc:	f7ff ff52 	bl	801d2a4 <_malloc_r>
 801d400:	4606      	mov	r6, r0
 801d402:	b360      	cbz	r0, 801d45e <__ssputs_r+0xa2>
 801d404:	6921      	ldr	r1, [r4, #16]
 801d406:	464a      	mov	r2, r9
 801d408:	f7ff fed1 	bl	801d1ae <memcpy>
 801d40c:	89a3      	ldrh	r3, [r4, #12]
 801d40e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d416:	81a3      	strh	r3, [r4, #12]
 801d418:	6126      	str	r6, [r4, #16]
 801d41a:	6165      	str	r5, [r4, #20]
 801d41c:	444e      	add	r6, r9
 801d41e:	eba5 0509 	sub.w	r5, r5, r9
 801d422:	6026      	str	r6, [r4, #0]
 801d424:	60a5      	str	r5, [r4, #8]
 801d426:	463e      	mov	r6, r7
 801d428:	42be      	cmp	r6, r7
 801d42a:	d900      	bls.n	801d42e <__ssputs_r+0x72>
 801d42c:	463e      	mov	r6, r7
 801d42e:	6820      	ldr	r0, [r4, #0]
 801d430:	4632      	mov	r2, r6
 801d432:	4641      	mov	r1, r8
 801d434:	f000 fcf6 	bl	801de24 <memmove>
 801d438:	68a3      	ldr	r3, [r4, #8]
 801d43a:	1b9b      	subs	r3, r3, r6
 801d43c:	60a3      	str	r3, [r4, #8]
 801d43e:	6823      	ldr	r3, [r4, #0]
 801d440:	4433      	add	r3, r6
 801d442:	6023      	str	r3, [r4, #0]
 801d444:	2000      	movs	r0, #0
 801d446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d44a:	462a      	mov	r2, r5
 801d44c:	f000 fd36 	bl	801debc <_realloc_r>
 801d450:	4606      	mov	r6, r0
 801d452:	2800      	cmp	r0, #0
 801d454:	d1e0      	bne.n	801d418 <__ssputs_r+0x5c>
 801d456:	6921      	ldr	r1, [r4, #16]
 801d458:	4650      	mov	r0, sl
 801d45a:	f7ff feb7 	bl	801d1cc <_free_r>
 801d45e:	230c      	movs	r3, #12
 801d460:	f8ca 3000 	str.w	r3, [sl]
 801d464:	89a3      	ldrh	r3, [r4, #12]
 801d466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d46a:	81a3      	strh	r3, [r4, #12]
 801d46c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d470:	e7e9      	b.n	801d446 <__ssputs_r+0x8a>
	...

0801d474 <_svfiprintf_r>:
 801d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d478:	4698      	mov	r8, r3
 801d47a:	898b      	ldrh	r3, [r1, #12]
 801d47c:	061b      	lsls	r3, r3, #24
 801d47e:	b09d      	sub	sp, #116	@ 0x74
 801d480:	4607      	mov	r7, r0
 801d482:	460d      	mov	r5, r1
 801d484:	4614      	mov	r4, r2
 801d486:	d510      	bpl.n	801d4aa <_svfiprintf_r+0x36>
 801d488:	690b      	ldr	r3, [r1, #16]
 801d48a:	b973      	cbnz	r3, 801d4aa <_svfiprintf_r+0x36>
 801d48c:	2140      	movs	r1, #64	@ 0x40
 801d48e:	f7ff ff09 	bl	801d2a4 <_malloc_r>
 801d492:	6028      	str	r0, [r5, #0]
 801d494:	6128      	str	r0, [r5, #16]
 801d496:	b930      	cbnz	r0, 801d4a6 <_svfiprintf_r+0x32>
 801d498:	230c      	movs	r3, #12
 801d49a:	603b      	str	r3, [r7, #0]
 801d49c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d4a0:	b01d      	add	sp, #116	@ 0x74
 801d4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a6:	2340      	movs	r3, #64	@ 0x40
 801d4a8:	616b      	str	r3, [r5, #20]
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4ae:	2320      	movs	r3, #32
 801d4b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d4b8:	2330      	movs	r3, #48	@ 0x30
 801d4ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d658 <_svfiprintf_r+0x1e4>
 801d4be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d4c2:	f04f 0901 	mov.w	r9, #1
 801d4c6:	4623      	mov	r3, r4
 801d4c8:	469a      	mov	sl, r3
 801d4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4ce:	b10a      	cbz	r2, 801d4d4 <_svfiprintf_r+0x60>
 801d4d0:	2a25      	cmp	r2, #37	@ 0x25
 801d4d2:	d1f9      	bne.n	801d4c8 <_svfiprintf_r+0x54>
 801d4d4:	ebba 0b04 	subs.w	fp, sl, r4
 801d4d8:	d00b      	beq.n	801d4f2 <_svfiprintf_r+0x7e>
 801d4da:	465b      	mov	r3, fp
 801d4dc:	4622      	mov	r2, r4
 801d4de:	4629      	mov	r1, r5
 801d4e0:	4638      	mov	r0, r7
 801d4e2:	f7ff ff6b 	bl	801d3bc <__ssputs_r>
 801d4e6:	3001      	adds	r0, #1
 801d4e8:	f000 80a7 	beq.w	801d63a <_svfiprintf_r+0x1c6>
 801d4ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4ee:	445a      	add	r2, fp
 801d4f0:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4f2:	f89a 3000 	ldrb.w	r3, [sl]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	f000 809f 	beq.w	801d63a <_svfiprintf_r+0x1c6>
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d506:	f10a 0a01 	add.w	sl, sl, #1
 801d50a:	9304      	str	r3, [sp, #16]
 801d50c:	9307      	str	r3, [sp, #28]
 801d50e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d512:	931a      	str	r3, [sp, #104]	@ 0x68
 801d514:	4654      	mov	r4, sl
 801d516:	2205      	movs	r2, #5
 801d518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d51c:	484e      	ldr	r0, [pc, #312]	@ (801d658 <_svfiprintf_r+0x1e4>)
 801d51e:	f7e2 feff 	bl	8000320 <memchr>
 801d522:	9a04      	ldr	r2, [sp, #16]
 801d524:	b9d8      	cbnz	r0, 801d55e <_svfiprintf_r+0xea>
 801d526:	06d0      	lsls	r0, r2, #27
 801d528:	bf44      	itt	mi
 801d52a:	2320      	movmi	r3, #32
 801d52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d530:	0711      	lsls	r1, r2, #28
 801d532:	bf44      	itt	mi
 801d534:	232b      	movmi	r3, #43	@ 0x2b
 801d536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d53a:	f89a 3000 	ldrb.w	r3, [sl]
 801d53e:	2b2a      	cmp	r3, #42	@ 0x2a
 801d540:	d015      	beq.n	801d56e <_svfiprintf_r+0xfa>
 801d542:	9a07      	ldr	r2, [sp, #28]
 801d544:	4654      	mov	r4, sl
 801d546:	2000      	movs	r0, #0
 801d548:	f04f 0c0a 	mov.w	ip, #10
 801d54c:	4621      	mov	r1, r4
 801d54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d552:	3b30      	subs	r3, #48	@ 0x30
 801d554:	2b09      	cmp	r3, #9
 801d556:	d94b      	bls.n	801d5f0 <_svfiprintf_r+0x17c>
 801d558:	b1b0      	cbz	r0, 801d588 <_svfiprintf_r+0x114>
 801d55a:	9207      	str	r2, [sp, #28]
 801d55c:	e014      	b.n	801d588 <_svfiprintf_r+0x114>
 801d55e:	eba0 0308 	sub.w	r3, r0, r8
 801d562:	fa09 f303 	lsl.w	r3, r9, r3
 801d566:	4313      	orrs	r3, r2
 801d568:	9304      	str	r3, [sp, #16]
 801d56a:	46a2      	mov	sl, r4
 801d56c:	e7d2      	b.n	801d514 <_svfiprintf_r+0xa0>
 801d56e:	9b03      	ldr	r3, [sp, #12]
 801d570:	1d19      	adds	r1, r3, #4
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	9103      	str	r1, [sp, #12]
 801d576:	2b00      	cmp	r3, #0
 801d578:	bfbb      	ittet	lt
 801d57a:	425b      	neglt	r3, r3
 801d57c:	f042 0202 	orrlt.w	r2, r2, #2
 801d580:	9307      	strge	r3, [sp, #28]
 801d582:	9307      	strlt	r3, [sp, #28]
 801d584:	bfb8      	it	lt
 801d586:	9204      	strlt	r2, [sp, #16]
 801d588:	7823      	ldrb	r3, [r4, #0]
 801d58a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d58c:	d10a      	bne.n	801d5a4 <_svfiprintf_r+0x130>
 801d58e:	7863      	ldrb	r3, [r4, #1]
 801d590:	2b2a      	cmp	r3, #42	@ 0x2a
 801d592:	d132      	bne.n	801d5fa <_svfiprintf_r+0x186>
 801d594:	9b03      	ldr	r3, [sp, #12]
 801d596:	1d1a      	adds	r2, r3, #4
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	9203      	str	r2, [sp, #12]
 801d59c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d5a0:	3402      	adds	r4, #2
 801d5a2:	9305      	str	r3, [sp, #20]
 801d5a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d668 <_svfiprintf_r+0x1f4>
 801d5a8:	7821      	ldrb	r1, [r4, #0]
 801d5aa:	2203      	movs	r2, #3
 801d5ac:	4650      	mov	r0, sl
 801d5ae:	f7e2 feb7 	bl	8000320 <memchr>
 801d5b2:	b138      	cbz	r0, 801d5c4 <_svfiprintf_r+0x150>
 801d5b4:	9b04      	ldr	r3, [sp, #16]
 801d5b6:	eba0 000a 	sub.w	r0, r0, sl
 801d5ba:	2240      	movs	r2, #64	@ 0x40
 801d5bc:	4082      	lsls	r2, r0
 801d5be:	4313      	orrs	r3, r2
 801d5c0:	3401      	adds	r4, #1
 801d5c2:	9304      	str	r3, [sp, #16]
 801d5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5c8:	4824      	ldr	r0, [pc, #144]	@ (801d65c <_svfiprintf_r+0x1e8>)
 801d5ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d5ce:	2206      	movs	r2, #6
 801d5d0:	f7e2 fea6 	bl	8000320 <memchr>
 801d5d4:	2800      	cmp	r0, #0
 801d5d6:	d036      	beq.n	801d646 <_svfiprintf_r+0x1d2>
 801d5d8:	4b21      	ldr	r3, [pc, #132]	@ (801d660 <_svfiprintf_r+0x1ec>)
 801d5da:	bb1b      	cbnz	r3, 801d624 <_svfiprintf_r+0x1b0>
 801d5dc:	9b03      	ldr	r3, [sp, #12]
 801d5de:	3307      	adds	r3, #7
 801d5e0:	f023 0307 	bic.w	r3, r3, #7
 801d5e4:	3308      	adds	r3, #8
 801d5e6:	9303      	str	r3, [sp, #12]
 801d5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5ea:	4433      	add	r3, r6
 801d5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5ee:	e76a      	b.n	801d4c6 <_svfiprintf_r+0x52>
 801d5f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5f4:	460c      	mov	r4, r1
 801d5f6:	2001      	movs	r0, #1
 801d5f8:	e7a8      	b.n	801d54c <_svfiprintf_r+0xd8>
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	3401      	adds	r4, #1
 801d5fe:	9305      	str	r3, [sp, #20]
 801d600:	4619      	mov	r1, r3
 801d602:	f04f 0c0a 	mov.w	ip, #10
 801d606:	4620      	mov	r0, r4
 801d608:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d60c:	3a30      	subs	r2, #48	@ 0x30
 801d60e:	2a09      	cmp	r2, #9
 801d610:	d903      	bls.n	801d61a <_svfiprintf_r+0x1a6>
 801d612:	2b00      	cmp	r3, #0
 801d614:	d0c6      	beq.n	801d5a4 <_svfiprintf_r+0x130>
 801d616:	9105      	str	r1, [sp, #20]
 801d618:	e7c4      	b.n	801d5a4 <_svfiprintf_r+0x130>
 801d61a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d61e:	4604      	mov	r4, r0
 801d620:	2301      	movs	r3, #1
 801d622:	e7f0      	b.n	801d606 <_svfiprintf_r+0x192>
 801d624:	ab03      	add	r3, sp, #12
 801d626:	9300      	str	r3, [sp, #0]
 801d628:	462a      	mov	r2, r5
 801d62a:	4b0e      	ldr	r3, [pc, #56]	@ (801d664 <_svfiprintf_r+0x1f0>)
 801d62c:	a904      	add	r1, sp, #16
 801d62e:	4638      	mov	r0, r7
 801d630:	f3af 8000 	nop.w
 801d634:	1c42      	adds	r2, r0, #1
 801d636:	4606      	mov	r6, r0
 801d638:	d1d6      	bne.n	801d5e8 <_svfiprintf_r+0x174>
 801d63a:	89ab      	ldrh	r3, [r5, #12]
 801d63c:	065b      	lsls	r3, r3, #25
 801d63e:	f53f af2d 	bmi.w	801d49c <_svfiprintf_r+0x28>
 801d642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d644:	e72c      	b.n	801d4a0 <_svfiprintf_r+0x2c>
 801d646:	ab03      	add	r3, sp, #12
 801d648:	9300      	str	r3, [sp, #0]
 801d64a:	462a      	mov	r2, r5
 801d64c:	4b05      	ldr	r3, [pc, #20]	@ (801d664 <_svfiprintf_r+0x1f0>)
 801d64e:	a904      	add	r1, sp, #16
 801d650:	4638      	mov	r0, r7
 801d652:	f000 f9bb 	bl	801d9cc <_printf_i>
 801d656:	e7ed      	b.n	801d634 <_svfiprintf_r+0x1c0>
 801d658:	080317dd 	.word	0x080317dd
 801d65c:	080317e7 	.word	0x080317e7
 801d660:	00000000 	.word	0x00000000
 801d664:	0801d3bd 	.word	0x0801d3bd
 801d668:	080317e3 	.word	0x080317e3

0801d66c <__sfputc_r>:
 801d66c:	6893      	ldr	r3, [r2, #8]
 801d66e:	3b01      	subs	r3, #1
 801d670:	2b00      	cmp	r3, #0
 801d672:	b410      	push	{r4}
 801d674:	6093      	str	r3, [r2, #8]
 801d676:	da08      	bge.n	801d68a <__sfputc_r+0x1e>
 801d678:	6994      	ldr	r4, [r2, #24]
 801d67a:	42a3      	cmp	r3, r4
 801d67c:	db01      	blt.n	801d682 <__sfputc_r+0x16>
 801d67e:	290a      	cmp	r1, #10
 801d680:	d103      	bne.n	801d68a <__sfputc_r+0x1e>
 801d682:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d686:	f7ff bc6d 	b.w	801cf64 <__swbuf_r>
 801d68a:	6813      	ldr	r3, [r2, #0]
 801d68c:	1c58      	adds	r0, r3, #1
 801d68e:	6010      	str	r0, [r2, #0]
 801d690:	7019      	strb	r1, [r3, #0]
 801d692:	4608      	mov	r0, r1
 801d694:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d698:	4770      	bx	lr

0801d69a <__sfputs_r>:
 801d69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d69c:	4606      	mov	r6, r0
 801d69e:	460f      	mov	r7, r1
 801d6a0:	4614      	mov	r4, r2
 801d6a2:	18d5      	adds	r5, r2, r3
 801d6a4:	42ac      	cmp	r4, r5
 801d6a6:	d101      	bne.n	801d6ac <__sfputs_r+0x12>
 801d6a8:	2000      	movs	r0, #0
 801d6aa:	e007      	b.n	801d6bc <__sfputs_r+0x22>
 801d6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6b0:	463a      	mov	r2, r7
 801d6b2:	4630      	mov	r0, r6
 801d6b4:	f7ff ffda 	bl	801d66c <__sfputc_r>
 801d6b8:	1c43      	adds	r3, r0, #1
 801d6ba:	d1f3      	bne.n	801d6a4 <__sfputs_r+0xa>
 801d6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d6c0 <_vfiprintf_r>:
 801d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c4:	460d      	mov	r5, r1
 801d6c6:	b09d      	sub	sp, #116	@ 0x74
 801d6c8:	4614      	mov	r4, r2
 801d6ca:	4698      	mov	r8, r3
 801d6cc:	4606      	mov	r6, r0
 801d6ce:	b118      	cbz	r0, 801d6d8 <_vfiprintf_r+0x18>
 801d6d0:	6a03      	ldr	r3, [r0, #32]
 801d6d2:	b90b      	cbnz	r3, 801d6d8 <_vfiprintf_r+0x18>
 801d6d4:	f7ff fac8 	bl	801cc68 <__sinit>
 801d6d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d6da:	07d9      	lsls	r1, r3, #31
 801d6dc:	d405      	bmi.n	801d6ea <_vfiprintf_r+0x2a>
 801d6de:	89ab      	ldrh	r3, [r5, #12]
 801d6e0:	059a      	lsls	r2, r3, #22
 801d6e2:	d402      	bmi.n	801d6ea <_vfiprintf_r+0x2a>
 801d6e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d6e6:	f7ff fd60 	bl	801d1aa <__retarget_lock_acquire_recursive>
 801d6ea:	89ab      	ldrh	r3, [r5, #12]
 801d6ec:	071b      	lsls	r3, r3, #28
 801d6ee:	d501      	bpl.n	801d6f4 <_vfiprintf_r+0x34>
 801d6f0:	692b      	ldr	r3, [r5, #16]
 801d6f2:	b99b      	cbnz	r3, 801d71c <_vfiprintf_r+0x5c>
 801d6f4:	4629      	mov	r1, r5
 801d6f6:	4630      	mov	r0, r6
 801d6f8:	f7ff fc72 	bl	801cfe0 <__swsetup_r>
 801d6fc:	b170      	cbz	r0, 801d71c <_vfiprintf_r+0x5c>
 801d6fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d700:	07dc      	lsls	r4, r3, #31
 801d702:	d504      	bpl.n	801d70e <_vfiprintf_r+0x4e>
 801d704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d708:	b01d      	add	sp, #116	@ 0x74
 801d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d70e:	89ab      	ldrh	r3, [r5, #12]
 801d710:	0598      	lsls	r0, r3, #22
 801d712:	d4f7      	bmi.n	801d704 <_vfiprintf_r+0x44>
 801d714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d716:	f7ff fd49 	bl	801d1ac <__retarget_lock_release_recursive>
 801d71a:	e7f3      	b.n	801d704 <_vfiprintf_r+0x44>
 801d71c:	2300      	movs	r3, #0
 801d71e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d720:	2320      	movs	r3, #32
 801d722:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d726:	f8cd 800c 	str.w	r8, [sp, #12]
 801d72a:	2330      	movs	r3, #48	@ 0x30
 801d72c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d8dc <_vfiprintf_r+0x21c>
 801d730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d734:	f04f 0901 	mov.w	r9, #1
 801d738:	4623      	mov	r3, r4
 801d73a:	469a      	mov	sl, r3
 801d73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d740:	b10a      	cbz	r2, 801d746 <_vfiprintf_r+0x86>
 801d742:	2a25      	cmp	r2, #37	@ 0x25
 801d744:	d1f9      	bne.n	801d73a <_vfiprintf_r+0x7a>
 801d746:	ebba 0b04 	subs.w	fp, sl, r4
 801d74a:	d00b      	beq.n	801d764 <_vfiprintf_r+0xa4>
 801d74c:	465b      	mov	r3, fp
 801d74e:	4622      	mov	r2, r4
 801d750:	4629      	mov	r1, r5
 801d752:	4630      	mov	r0, r6
 801d754:	f7ff ffa1 	bl	801d69a <__sfputs_r>
 801d758:	3001      	adds	r0, #1
 801d75a:	f000 80a7 	beq.w	801d8ac <_vfiprintf_r+0x1ec>
 801d75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d760:	445a      	add	r2, fp
 801d762:	9209      	str	r2, [sp, #36]	@ 0x24
 801d764:	f89a 3000 	ldrb.w	r3, [sl]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	f000 809f 	beq.w	801d8ac <_vfiprintf_r+0x1ec>
 801d76e:	2300      	movs	r3, #0
 801d770:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d778:	f10a 0a01 	add.w	sl, sl, #1
 801d77c:	9304      	str	r3, [sp, #16]
 801d77e:	9307      	str	r3, [sp, #28]
 801d780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d784:	931a      	str	r3, [sp, #104]	@ 0x68
 801d786:	4654      	mov	r4, sl
 801d788:	2205      	movs	r2, #5
 801d78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d78e:	4853      	ldr	r0, [pc, #332]	@ (801d8dc <_vfiprintf_r+0x21c>)
 801d790:	f7e2 fdc6 	bl	8000320 <memchr>
 801d794:	9a04      	ldr	r2, [sp, #16]
 801d796:	b9d8      	cbnz	r0, 801d7d0 <_vfiprintf_r+0x110>
 801d798:	06d1      	lsls	r1, r2, #27
 801d79a:	bf44      	itt	mi
 801d79c:	2320      	movmi	r3, #32
 801d79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d7a2:	0713      	lsls	r3, r2, #28
 801d7a4:	bf44      	itt	mi
 801d7a6:	232b      	movmi	r3, #43	@ 0x2b
 801d7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d7ac:	f89a 3000 	ldrb.w	r3, [sl]
 801d7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801d7b2:	d015      	beq.n	801d7e0 <_vfiprintf_r+0x120>
 801d7b4:	9a07      	ldr	r2, [sp, #28]
 801d7b6:	4654      	mov	r4, sl
 801d7b8:	2000      	movs	r0, #0
 801d7ba:	f04f 0c0a 	mov.w	ip, #10
 801d7be:	4621      	mov	r1, r4
 801d7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d7c4:	3b30      	subs	r3, #48	@ 0x30
 801d7c6:	2b09      	cmp	r3, #9
 801d7c8:	d94b      	bls.n	801d862 <_vfiprintf_r+0x1a2>
 801d7ca:	b1b0      	cbz	r0, 801d7fa <_vfiprintf_r+0x13a>
 801d7cc:	9207      	str	r2, [sp, #28]
 801d7ce:	e014      	b.n	801d7fa <_vfiprintf_r+0x13a>
 801d7d0:	eba0 0308 	sub.w	r3, r0, r8
 801d7d4:	fa09 f303 	lsl.w	r3, r9, r3
 801d7d8:	4313      	orrs	r3, r2
 801d7da:	9304      	str	r3, [sp, #16]
 801d7dc:	46a2      	mov	sl, r4
 801d7de:	e7d2      	b.n	801d786 <_vfiprintf_r+0xc6>
 801d7e0:	9b03      	ldr	r3, [sp, #12]
 801d7e2:	1d19      	adds	r1, r3, #4
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	9103      	str	r1, [sp, #12]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	bfbb      	ittet	lt
 801d7ec:	425b      	neglt	r3, r3
 801d7ee:	f042 0202 	orrlt.w	r2, r2, #2
 801d7f2:	9307      	strge	r3, [sp, #28]
 801d7f4:	9307      	strlt	r3, [sp, #28]
 801d7f6:	bfb8      	it	lt
 801d7f8:	9204      	strlt	r2, [sp, #16]
 801d7fa:	7823      	ldrb	r3, [r4, #0]
 801d7fc:	2b2e      	cmp	r3, #46	@ 0x2e
 801d7fe:	d10a      	bne.n	801d816 <_vfiprintf_r+0x156>
 801d800:	7863      	ldrb	r3, [r4, #1]
 801d802:	2b2a      	cmp	r3, #42	@ 0x2a
 801d804:	d132      	bne.n	801d86c <_vfiprintf_r+0x1ac>
 801d806:	9b03      	ldr	r3, [sp, #12]
 801d808:	1d1a      	adds	r2, r3, #4
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	9203      	str	r2, [sp, #12]
 801d80e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d812:	3402      	adds	r4, #2
 801d814:	9305      	str	r3, [sp, #20]
 801d816:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d8ec <_vfiprintf_r+0x22c>
 801d81a:	7821      	ldrb	r1, [r4, #0]
 801d81c:	2203      	movs	r2, #3
 801d81e:	4650      	mov	r0, sl
 801d820:	f7e2 fd7e 	bl	8000320 <memchr>
 801d824:	b138      	cbz	r0, 801d836 <_vfiprintf_r+0x176>
 801d826:	9b04      	ldr	r3, [sp, #16]
 801d828:	eba0 000a 	sub.w	r0, r0, sl
 801d82c:	2240      	movs	r2, #64	@ 0x40
 801d82e:	4082      	lsls	r2, r0
 801d830:	4313      	orrs	r3, r2
 801d832:	3401      	adds	r4, #1
 801d834:	9304      	str	r3, [sp, #16]
 801d836:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d83a:	4829      	ldr	r0, [pc, #164]	@ (801d8e0 <_vfiprintf_r+0x220>)
 801d83c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d840:	2206      	movs	r2, #6
 801d842:	f7e2 fd6d 	bl	8000320 <memchr>
 801d846:	2800      	cmp	r0, #0
 801d848:	d03f      	beq.n	801d8ca <_vfiprintf_r+0x20a>
 801d84a:	4b26      	ldr	r3, [pc, #152]	@ (801d8e4 <_vfiprintf_r+0x224>)
 801d84c:	bb1b      	cbnz	r3, 801d896 <_vfiprintf_r+0x1d6>
 801d84e:	9b03      	ldr	r3, [sp, #12]
 801d850:	3307      	adds	r3, #7
 801d852:	f023 0307 	bic.w	r3, r3, #7
 801d856:	3308      	adds	r3, #8
 801d858:	9303      	str	r3, [sp, #12]
 801d85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d85c:	443b      	add	r3, r7
 801d85e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d860:	e76a      	b.n	801d738 <_vfiprintf_r+0x78>
 801d862:	fb0c 3202 	mla	r2, ip, r2, r3
 801d866:	460c      	mov	r4, r1
 801d868:	2001      	movs	r0, #1
 801d86a:	e7a8      	b.n	801d7be <_vfiprintf_r+0xfe>
 801d86c:	2300      	movs	r3, #0
 801d86e:	3401      	adds	r4, #1
 801d870:	9305      	str	r3, [sp, #20]
 801d872:	4619      	mov	r1, r3
 801d874:	f04f 0c0a 	mov.w	ip, #10
 801d878:	4620      	mov	r0, r4
 801d87a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d87e:	3a30      	subs	r2, #48	@ 0x30
 801d880:	2a09      	cmp	r2, #9
 801d882:	d903      	bls.n	801d88c <_vfiprintf_r+0x1cc>
 801d884:	2b00      	cmp	r3, #0
 801d886:	d0c6      	beq.n	801d816 <_vfiprintf_r+0x156>
 801d888:	9105      	str	r1, [sp, #20]
 801d88a:	e7c4      	b.n	801d816 <_vfiprintf_r+0x156>
 801d88c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d890:	4604      	mov	r4, r0
 801d892:	2301      	movs	r3, #1
 801d894:	e7f0      	b.n	801d878 <_vfiprintf_r+0x1b8>
 801d896:	ab03      	add	r3, sp, #12
 801d898:	9300      	str	r3, [sp, #0]
 801d89a:	462a      	mov	r2, r5
 801d89c:	4b12      	ldr	r3, [pc, #72]	@ (801d8e8 <_vfiprintf_r+0x228>)
 801d89e:	a904      	add	r1, sp, #16
 801d8a0:	4630      	mov	r0, r6
 801d8a2:	f3af 8000 	nop.w
 801d8a6:	4607      	mov	r7, r0
 801d8a8:	1c78      	adds	r0, r7, #1
 801d8aa:	d1d6      	bne.n	801d85a <_vfiprintf_r+0x19a>
 801d8ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d8ae:	07d9      	lsls	r1, r3, #31
 801d8b0:	d405      	bmi.n	801d8be <_vfiprintf_r+0x1fe>
 801d8b2:	89ab      	ldrh	r3, [r5, #12]
 801d8b4:	059a      	lsls	r2, r3, #22
 801d8b6:	d402      	bmi.n	801d8be <_vfiprintf_r+0x1fe>
 801d8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d8ba:	f7ff fc77 	bl	801d1ac <__retarget_lock_release_recursive>
 801d8be:	89ab      	ldrh	r3, [r5, #12]
 801d8c0:	065b      	lsls	r3, r3, #25
 801d8c2:	f53f af1f 	bmi.w	801d704 <_vfiprintf_r+0x44>
 801d8c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d8c8:	e71e      	b.n	801d708 <_vfiprintf_r+0x48>
 801d8ca:	ab03      	add	r3, sp, #12
 801d8cc:	9300      	str	r3, [sp, #0]
 801d8ce:	462a      	mov	r2, r5
 801d8d0:	4b05      	ldr	r3, [pc, #20]	@ (801d8e8 <_vfiprintf_r+0x228>)
 801d8d2:	a904      	add	r1, sp, #16
 801d8d4:	4630      	mov	r0, r6
 801d8d6:	f000 f879 	bl	801d9cc <_printf_i>
 801d8da:	e7e4      	b.n	801d8a6 <_vfiprintf_r+0x1e6>
 801d8dc:	080317dd 	.word	0x080317dd
 801d8e0:	080317e7 	.word	0x080317e7
 801d8e4:	00000000 	.word	0x00000000
 801d8e8:	0801d69b 	.word	0x0801d69b
 801d8ec:	080317e3 	.word	0x080317e3

0801d8f0 <_printf_common>:
 801d8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8f4:	4616      	mov	r6, r2
 801d8f6:	4698      	mov	r8, r3
 801d8f8:	688a      	ldr	r2, [r1, #8]
 801d8fa:	690b      	ldr	r3, [r1, #16]
 801d8fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d900:	4293      	cmp	r3, r2
 801d902:	bfb8      	it	lt
 801d904:	4613      	movlt	r3, r2
 801d906:	6033      	str	r3, [r6, #0]
 801d908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d90c:	4607      	mov	r7, r0
 801d90e:	460c      	mov	r4, r1
 801d910:	b10a      	cbz	r2, 801d916 <_printf_common+0x26>
 801d912:	3301      	adds	r3, #1
 801d914:	6033      	str	r3, [r6, #0]
 801d916:	6823      	ldr	r3, [r4, #0]
 801d918:	0699      	lsls	r1, r3, #26
 801d91a:	bf42      	ittt	mi
 801d91c:	6833      	ldrmi	r3, [r6, #0]
 801d91e:	3302      	addmi	r3, #2
 801d920:	6033      	strmi	r3, [r6, #0]
 801d922:	6825      	ldr	r5, [r4, #0]
 801d924:	f015 0506 	ands.w	r5, r5, #6
 801d928:	d106      	bne.n	801d938 <_printf_common+0x48>
 801d92a:	f104 0a19 	add.w	sl, r4, #25
 801d92e:	68e3      	ldr	r3, [r4, #12]
 801d930:	6832      	ldr	r2, [r6, #0]
 801d932:	1a9b      	subs	r3, r3, r2
 801d934:	42ab      	cmp	r3, r5
 801d936:	dc26      	bgt.n	801d986 <_printf_common+0x96>
 801d938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d93c:	6822      	ldr	r2, [r4, #0]
 801d93e:	3b00      	subs	r3, #0
 801d940:	bf18      	it	ne
 801d942:	2301      	movne	r3, #1
 801d944:	0692      	lsls	r2, r2, #26
 801d946:	d42b      	bmi.n	801d9a0 <_printf_common+0xb0>
 801d948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d94c:	4641      	mov	r1, r8
 801d94e:	4638      	mov	r0, r7
 801d950:	47c8      	blx	r9
 801d952:	3001      	adds	r0, #1
 801d954:	d01e      	beq.n	801d994 <_printf_common+0xa4>
 801d956:	6823      	ldr	r3, [r4, #0]
 801d958:	6922      	ldr	r2, [r4, #16]
 801d95a:	f003 0306 	and.w	r3, r3, #6
 801d95e:	2b04      	cmp	r3, #4
 801d960:	bf02      	ittt	eq
 801d962:	68e5      	ldreq	r5, [r4, #12]
 801d964:	6833      	ldreq	r3, [r6, #0]
 801d966:	1aed      	subeq	r5, r5, r3
 801d968:	68a3      	ldr	r3, [r4, #8]
 801d96a:	bf0c      	ite	eq
 801d96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d970:	2500      	movne	r5, #0
 801d972:	4293      	cmp	r3, r2
 801d974:	bfc4      	itt	gt
 801d976:	1a9b      	subgt	r3, r3, r2
 801d978:	18ed      	addgt	r5, r5, r3
 801d97a:	2600      	movs	r6, #0
 801d97c:	341a      	adds	r4, #26
 801d97e:	42b5      	cmp	r5, r6
 801d980:	d11a      	bne.n	801d9b8 <_printf_common+0xc8>
 801d982:	2000      	movs	r0, #0
 801d984:	e008      	b.n	801d998 <_printf_common+0xa8>
 801d986:	2301      	movs	r3, #1
 801d988:	4652      	mov	r2, sl
 801d98a:	4641      	mov	r1, r8
 801d98c:	4638      	mov	r0, r7
 801d98e:	47c8      	blx	r9
 801d990:	3001      	adds	r0, #1
 801d992:	d103      	bne.n	801d99c <_printf_common+0xac>
 801d994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d99c:	3501      	adds	r5, #1
 801d99e:	e7c6      	b.n	801d92e <_printf_common+0x3e>
 801d9a0:	18e1      	adds	r1, r4, r3
 801d9a2:	1c5a      	adds	r2, r3, #1
 801d9a4:	2030      	movs	r0, #48	@ 0x30
 801d9a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d9aa:	4422      	add	r2, r4
 801d9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d9b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d9b4:	3302      	adds	r3, #2
 801d9b6:	e7c7      	b.n	801d948 <_printf_common+0x58>
 801d9b8:	2301      	movs	r3, #1
 801d9ba:	4622      	mov	r2, r4
 801d9bc:	4641      	mov	r1, r8
 801d9be:	4638      	mov	r0, r7
 801d9c0:	47c8      	blx	r9
 801d9c2:	3001      	adds	r0, #1
 801d9c4:	d0e6      	beq.n	801d994 <_printf_common+0xa4>
 801d9c6:	3601      	adds	r6, #1
 801d9c8:	e7d9      	b.n	801d97e <_printf_common+0x8e>
	...

0801d9cc <_printf_i>:
 801d9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d9d0:	7e0f      	ldrb	r7, [r1, #24]
 801d9d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d9d4:	2f78      	cmp	r7, #120	@ 0x78
 801d9d6:	4691      	mov	r9, r2
 801d9d8:	4680      	mov	r8, r0
 801d9da:	460c      	mov	r4, r1
 801d9dc:	469a      	mov	sl, r3
 801d9de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d9e2:	d807      	bhi.n	801d9f4 <_printf_i+0x28>
 801d9e4:	2f62      	cmp	r7, #98	@ 0x62
 801d9e6:	d80a      	bhi.n	801d9fe <_printf_i+0x32>
 801d9e8:	2f00      	cmp	r7, #0
 801d9ea:	f000 80d1 	beq.w	801db90 <_printf_i+0x1c4>
 801d9ee:	2f58      	cmp	r7, #88	@ 0x58
 801d9f0:	f000 80b8 	beq.w	801db64 <_printf_i+0x198>
 801d9f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d9f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d9fc:	e03a      	b.n	801da74 <_printf_i+0xa8>
 801d9fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801da02:	2b15      	cmp	r3, #21
 801da04:	d8f6      	bhi.n	801d9f4 <_printf_i+0x28>
 801da06:	a101      	add	r1, pc, #4	@ (adr r1, 801da0c <_printf_i+0x40>)
 801da08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801da0c:	0801da65 	.word	0x0801da65
 801da10:	0801da79 	.word	0x0801da79
 801da14:	0801d9f5 	.word	0x0801d9f5
 801da18:	0801d9f5 	.word	0x0801d9f5
 801da1c:	0801d9f5 	.word	0x0801d9f5
 801da20:	0801d9f5 	.word	0x0801d9f5
 801da24:	0801da79 	.word	0x0801da79
 801da28:	0801d9f5 	.word	0x0801d9f5
 801da2c:	0801d9f5 	.word	0x0801d9f5
 801da30:	0801d9f5 	.word	0x0801d9f5
 801da34:	0801d9f5 	.word	0x0801d9f5
 801da38:	0801db77 	.word	0x0801db77
 801da3c:	0801daa3 	.word	0x0801daa3
 801da40:	0801db31 	.word	0x0801db31
 801da44:	0801d9f5 	.word	0x0801d9f5
 801da48:	0801d9f5 	.word	0x0801d9f5
 801da4c:	0801db99 	.word	0x0801db99
 801da50:	0801d9f5 	.word	0x0801d9f5
 801da54:	0801daa3 	.word	0x0801daa3
 801da58:	0801d9f5 	.word	0x0801d9f5
 801da5c:	0801d9f5 	.word	0x0801d9f5
 801da60:	0801db39 	.word	0x0801db39
 801da64:	6833      	ldr	r3, [r6, #0]
 801da66:	1d1a      	adds	r2, r3, #4
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	6032      	str	r2, [r6, #0]
 801da6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801da74:	2301      	movs	r3, #1
 801da76:	e09c      	b.n	801dbb2 <_printf_i+0x1e6>
 801da78:	6833      	ldr	r3, [r6, #0]
 801da7a:	6820      	ldr	r0, [r4, #0]
 801da7c:	1d19      	adds	r1, r3, #4
 801da7e:	6031      	str	r1, [r6, #0]
 801da80:	0606      	lsls	r6, r0, #24
 801da82:	d501      	bpl.n	801da88 <_printf_i+0xbc>
 801da84:	681d      	ldr	r5, [r3, #0]
 801da86:	e003      	b.n	801da90 <_printf_i+0xc4>
 801da88:	0645      	lsls	r5, r0, #25
 801da8a:	d5fb      	bpl.n	801da84 <_printf_i+0xb8>
 801da8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801da90:	2d00      	cmp	r5, #0
 801da92:	da03      	bge.n	801da9c <_printf_i+0xd0>
 801da94:	232d      	movs	r3, #45	@ 0x2d
 801da96:	426d      	negs	r5, r5
 801da98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801da9c:	4858      	ldr	r0, [pc, #352]	@ (801dc00 <_printf_i+0x234>)
 801da9e:	230a      	movs	r3, #10
 801daa0:	e011      	b.n	801dac6 <_printf_i+0xfa>
 801daa2:	6821      	ldr	r1, [r4, #0]
 801daa4:	6833      	ldr	r3, [r6, #0]
 801daa6:	0608      	lsls	r0, r1, #24
 801daa8:	f853 5b04 	ldr.w	r5, [r3], #4
 801daac:	d402      	bmi.n	801dab4 <_printf_i+0xe8>
 801daae:	0649      	lsls	r1, r1, #25
 801dab0:	bf48      	it	mi
 801dab2:	b2ad      	uxthmi	r5, r5
 801dab4:	2f6f      	cmp	r7, #111	@ 0x6f
 801dab6:	4852      	ldr	r0, [pc, #328]	@ (801dc00 <_printf_i+0x234>)
 801dab8:	6033      	str	r3, [r6, #0]
 801daba:	bf14      	ite	ne
 801dabc:	230a      	movne	r3, #10
 801dabe:	2308      	moveq	r3, #8
 801dac0:	2100      	movs	r1, #0
 801dac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dac6:	6866      	ldr	r6, [r4, #4]
 801dac8:	60a6      	str	r6, [r4, #8]
 801daca:	2e00      	cmp	r6, #0
 801dacc:	db05      	blt.n	801dada <_printf_i+0x10e>
 801dace:	6821      	ldr	r1, [r4, #0]
 801dad0:	432e      	orrs	r6, r5
 801dad2:	f021 0104 	bic.w	r1, r1, #4
 801dad6:	6021      	str	r1, [r4, #0]
 801dad8:	d04b      	beq.n	801db72 <_printf_i+0x1a6>
 801dada:	4616      	mov	r6, r2
 801dadc:	fbb5 f1f3 	udiv	r1, r5, r3
 801dae0:	fb03 5711 	mls	r7, r3, r1, r5
 801dae4:	5dc7      	ldrb	r7, [r0, r7]
 801dae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801daea:	462f      	mov	r7, r5
 801daec:	42bb      	cmp	r3, r7
 801daee:	460d      	mov	r5, r1
 801daf0:	d9f4      	bls.n	801dadc <_printf_i+0x110>
 801daf2:	2b08      	cmp	r3, #8
 801daf4:	d10b      	bne.n	801db0e <_printf_i+0x142>
 801daf6:	6823      	ldr	r3, [r4, #0]
 801daf8:	07df      	lsls	r7, r3, #31
 801dafa:	d508      	bpl.n	801db0e <_printf_i+0x142>
 801dafc:	6923      	ldr	r3, [r4, #16]
 801dafe:	6861      	ldr	r1, [r4, #4]
 801db00:	4299      	cmp	r1, r3
 801db02:	bfde      	ittt	le
 801db04:	2330      	movle	r3, #48	@ 0x30
 801db06:	f806 3c01 	strble.w	r3, [r6, #-1]
 801db0a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801db0e:	1b92      	subs	r2, r2, r6
 801db10:	6122      	str	r2, [r4, #16]
 801db12:	f8cd a000 	str.w	sl, [sp]
 801db16:	464b      	mov	r3, r9
 801db18:	aa03      	add	r2, sp, #12
 801db1a:	4621      	mov	r1, r4
 801db1c:	4640      	mov	r0, r8
 801db1e:	f7ff fee7 	bl	801d8f0 <_printf_common>
 801db22:	3001      	adds	r0, #1
 801db24:	d14a      	bne.n	801dbbc <_printf_i+0x1f0>
 801db26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801db2a:	b004      	add	sp, #16
 801db2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db30:	6823      	ldr	r3, [r4, #0]
 801db32:	f043 0320 	orr.w	r3, r3, #32
 801db36:	6023      	str	r3, [r4, #0]
 801db38:	4832      	ldr	r0, [pc, #200]	@ (801dc04 <_printf_i+0x238>)
 801db3a:	2778      	movs	r7, #120	@ 0x78
 801db3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801db40:	6823      	ldr	r3, [r4, #0]
 801db42:	6831      	ldr	r1, [r6, #0]
 801db44:	061f      	lsls	r7, r3, #24
 801db46:	f851 5b04 	ldr.w	r5, [r1], #4
 801db4a:	d402      	bmi.n	801db52 <_printf_i+0x186>
 801db4c:	065f      	lsls	r7, r3, #25
 801db4e:	bf48      	it	mi
 801db50:	b2ad      	uxthmi	r5, r5
 801db52:	6031      	str	r1, [r6, #0]
 801db54:	07d9      	lsls	r1, r3, #31
 801db56:	bf44      	itt	mi
 801db58:	f043 0320 	orrmi.w	r3, r3, #32
 801db5c:	6023      	strmi	r3, [r4, #0]
 801db5e:	b11d      	cbz	r5, 801db68 <_printf_i+0x19c>
 801db60:	2310      	movs	r3, #16
 801db62:	e7ad      	b.n	801dac0 <_printf_i+0xf4>
 801db64:	4826      	ldr	r0, [pc, #152]	@ (801dc00 <_printf_i+0x234>)
 801db66:	e7e9      	b.n	801db3c <_printf_i+0x170>
 801db68:	6823      	ldr	r3, [r4, #0]
 801db6a:	f023 0320 	bic.w	r3, r3, #32
 801db6e:	6023      	str	r3, [r4, #0]
 801db70:	e7f6      	b.n	801db60 <_printf_i+0x194>
 801db72:	4616      	mov	r6, r2
 801db74:	e7bd      	b.n	801daf2 <_printf_i+0x126>
 801db76:	6833      	ldr	r3, [r6, #0]
 801db78:	6825      	ldr	r5, [r4, #0]
 801db7a:	6961      	ldr	r1, [r4, #20]
 801db7c:	1d18      	adds	r0, r3, #4
 801db7e:	6030      	str	r0, [r6, #0]
 801db80:	062e      	lsls	r6, r5, #24
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	d501      	bpl.n	801db8a <_printf_i+0x1be>
 801db86:	6019      	str	r1, [r3, #0]
 801db88:	e002      	b.n	801db90 <_printf_i+0x1c4>
 801db8a:	0668      	lsls	r0, r5, #25
 801db8c:	d5fb      	bpl.n	801db86 <_printf_i+0x1ba>
 801db8e:	8019      	strh	r1, [r3, #0]
 801db90:	2300      	movs	r3, #0
 801db92:	6123      	str	r3, [r4, #16]
 801db94:	4616      	mov	r6, r2
 801db96:	e7bc      	b.n	801db12 <_printf_i+0x146>
 801db98:	6833      	ldr	r3, [r6, #0]
 801db9a:	1d1a      	adds	r2, r3, #4
 801db9c:	6032      	str	r2, [r6, #0]
 801db9e:	681e      	ldr	r6, [r3, #0]
 801dba0:	6862      	ldr	r2, [r4, #4]
 801dba2:	2100      	movs	r1, #0
 801dba4:	4630      	mov	r0, r6
 801dba6:	f7e2 fbbb 	bl	8000320 <memchr>
 801dbaa:	b108      	cbz	r0, 801dbb0 <_printf_i+0x1e4>
 801dbac:	1b80      	subs	r0, r0, r6
 801dbae:	6060      	str	r0, [r4, #4]
 801dbb0:	6863      	ldr	r3, [r4, #4]
 801dbb2:	6123      	str	r3, [r4, #16]
 801dbb4:	2300      	movs	r3, #0
 801dbb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dbba:	e7aa      	b.n	801db12 <_printf_i+0x146>
 801dbbc:	6923      	ldr	r3, [r4, #16]
 801dbbe:	4632      	mov	r2, r6
 801dbc0:	4649      	mov	r1, r9
 801dbc2:	4640      	mov	r0, r8
 801dbc4:	47d0      	blx	sl
 801dbc6:	3001      	adds	r0, #1
 801dbc8:	d0ad      	beq.n	801db26 <_printf_i+0x15a>
 801dbca:	6823      	ldr	r3, [r4, #0]
 801dbcc:	079b      	lsls	r3, r3, #30
 801dbce:	d413      	bmi.n	801dbf8 <_printf_i+0x22c>
 801dbd0:	68e0      	ldr	r0, [r4, #12]
 801dbd2:	9b03      	ldr	r3, [sp, #12]
 801dbd4:	4298      	cmp	r0, r3
 801dbd6:	bfb8      	it	lt
 801dbd8:	4618      	movlt	r0, r3
 801dbda:	e7a6      	b.n	801db2a <_printf_i+0x15e>
 801dbdc:	2301      	movs	r3, #1
 801dbde:	4632      	mov	r2, r6
 801dbe0:	4649      	mov	r1, r9
 801dbe2:	4640      	mov	r0, r8
 801dbe4:	47d0      	blx	sl
 801dbe6:	3001      	adds	r0, #1
 801dbe8:	d09d      	beq.n	801db26 <_printf_i+0x15a>
 801dbea:	3501      	adds	r5, #1
 801dbec:	68e3      	ldr	r3, [r4, #12]
 801dbee:	9903      	ldr	r1, [sp, #12]
 801dbf0:	1a5b      	subs	r3, r3, r1
 801dbf2:	42ab      	cmp	r3, r5
 801dbf4:	dcf2      	bgt.n	801dbdc <_printf_i+0x210>
 801dbf6:	e7eb      	b.n	801dbd0 <_printf_i+0x204>
 801dbf8:	2500      	movs	r5, #0
 801dbfa:	f104 0619 	add.w	r6, r4, #25
 801dbfe:	e7f5      	b.n	801dbec <_printf_i+0x220>
 801dc00:	080317ee 	.word	0x080317ee
 801dc04:	080317ff 	.word	0x080317ff

0801dc08 <__sflush_r>:
 801dc08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc10:	0716      	lsls	r6, r2, #28
 801dc12:	4605      	mov	r5, r0
 801dc14:	460c      	mov	r4, r1
 801dc16:	d454      	bmi.n	801dcc2 <__sflush_r+0xba>
 801dc18:	684b      	ldr	r3, [r1, #4]
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	dc02      	bgt.n	801dc24 <__sflush_r+0x1c>
 801dc1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	dd48      	ble.n	801dcb6 <__sflush_r+0xae>
 801dc24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc26:	2e00      	cmp	r6, #0
 801dc28:	d045      	beq.n	801dcb6 <__sflush_r+0xae>
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dc30:	682f      	ldr	r7, [r5, #0]
 801dc32:	6a21      	ldr	r1, [r4, #32]
 801dc34:	602b      	str	r3, [r5, #0]
 801dc36:	d030      	beq.n	801dc9a <__sflush_r+0x92>
 801dc38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dc3a:	89a3      	ldrh	r3, [r4, #12]
 801dc3c:	0759      	lsls	r1, r3, #29
 801dc3e:	d505      	bpl.n	801dc4c <__sflush_r+0x44>
 801dc40:	6863      	ldr	r3, [r4, #4]
 801dc42:	1ad2      	subs	r2, r2, r3
 801dc44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dc46:	b10b      	cbz	r3, 801dc4c <__sflush_r+0x44>
 801dc48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dc4a:	1ad2      	subs	r2, r2, r3
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc50:	6a21      	ldr	r1, [r4, #32]
 801dc52:	4628      	mov	r0, r5
 801dc54:	47b0      	blx	r6
 801dc56:	1c43      	adds	r3, r0, #1
 801dc58:	89a3      	ldrh	r3, [r4, #12]
 801dc5a:	d106      	bne.n	801dc6a <__sflush_r+0x62>
 801dc5c:	6829      	ldr	r1, [r5, #0]
 801dc5e:	291d      	cmp	r1, #29
 801dc60:	d82b      	bhi.n	801dcba <__sflush_r+0xb2>
 801dc62:	4a2a      	ldr	r2, [pc, #168]	@ (801dd0c <__sflush_r+0x104>)
 801dc64:	40ca      	lsrs	r2, r1
 801dc66:	07d6      	lsls	r6, r2, #31
 801dc68:	d527      	bpl.n	801dcba <__sflush_r+0xb2>
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	6062      	str	r2, [r4, #4]
 801dc6e:	04d9      	lsls	r1, r3, #19
 801dc70:	6922      	ldr	r2, [r4, #16]
 801dc72:	6022      	str	r2, [r4, #0]
 801dc74:	d504      	bpl.n	801dc80 <__sflush_r+0x78>
 801dc76:	1c42      	adds	r2, r0, #1
 801dc78:	d101      	bne.n	801dc7e <__sflush_r+0x76>
 801dc7a:	682b      	ldr	r3, [r5, #0]
 801dc7c:	b903      	cbnz	r3, 801dc80 <__sflush_r+0x78>
 801dc7e:	6560      	str	r0, [r4, #84]	@ 0x54
 801dc80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dc82:	602f      	str	r7, [r5, #0]
 801dc84:	b1b9      	cbz	r1, 801dcb6 <__sflush_r+0xae>
 801dc86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dc8a:	4299      	cmp	r1, r3
 801dc8c:	d002      	beq.n	801dc94 <__sflush_r+0x8c>
 801dc8e:	4628      	mov	r0, r5
 801dc90:	f7ff fa9c 	bl	801d1cc <_free_r>
 801dc94:	2300      	movs	r3, #0
 801dc96:	6363      	str	r3, [r4, #52]	@ 0x34
 801dc98:	e00d      	b.n	801dcb6 <__sflush_r+0xae>
 801dc9a:	2301      	movs	r3, #1
 801dc9c:	4628      	mov	r0, r5
 801dc9e:	47b0      	blx	r6
 801dca0:	4602      	mov	r2, r0
 801dca2:	1c50      	adds	r0, r2, #1
 801dca4:	d1c9      	bne.n	801dc3a <__sflush_r+0x32>
 801dca6:	682b      	ldr	r3, [r5, #0]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d0c6      	beq.n	801dc3a <__sflush_r+0x32>
 801dcac:	2b1d      	cmp	r3, #29
 801dcae:	d001      	beq.n	801dcb4 <__sflush_r+0xac>
 801dcb0:	2b16      	cmp	r3, #22
 801dcb2:	d11e      	bne.n	801dcf2 <__sflush_r+0xea>
 801dcb4:	602f      	str	r7, [r5, #0]
 801dcb6:	2000      	movs	r0, #0
 801dcb8:	e022      	b.n	801dd00 <__sflush_r+0xf8>
 801dcba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dcbe:	b21b      	sxth	r3, r3
 801dcc0:	e01b      	b.n	801dcfa <__sflush_r+0xf2>
 801dcc2:	690f      	ldr	r7, [r1, #16]
 801dcc4:	2f00      	cmp	r7, #0
 801dcc6:	d0f6      	beq.n	801dcb6 <__sflush_r+0xae>
 801dcc8:	0793      	lsls	r3, r2, #30
 801dcca:	680e      	ldr	r6, [r1, #0]
 801dccc:	bf08      	it	eq
 801dcce:	694b      	ldreq	r3, [r1, #20]
 801dcd0:	600f      	str	r7, [r1, #0]
 801dcd2:	bf18      	it	ne
 801dcd4:	2300      	movne	r3, #0
 801dcd6:	eba6 0807 	sub.w	r8, r6, r7
 801dcda:	608b      	str	r3, [r1, #8]
 801dcdc:	f1b8 0f00 	cmp.w	r8, #0
 801dce0:	dde9      	ble.n	801dcb6 <__sflush_r+0xae>
 801dce2:	6a21      	ldr	r1, [r4, #32]
 801dce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dce6:	4643      	mov	r3, r8
 801dce8:	463a      	mov	r2, r7
 801dcea:	4628      	mov	r0, r5
 801dcec:	47b0      	blx	r6
 801dcee:	2800      	cmp	r0, #0
 801dcf0:	dc08      	bgt.n	801dd04 <__sflush_r+0xfc>
 801dcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dcfa:	81a3      	strh	r3, [r4, #12]
 801dcfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd04:	4407      	add	r7, r0
 801dd06:	eba8 0800 	sub.w	r8, r8, r0
 801dd0a:	e7e7      	b.n	801dcdc <__sflush_r+0xd4>
 801dd0c:	20400001 	.word	0x20400001

0801dd10 <_fflush_r>:
 801dd10:	b538      	push	{r3, r4, r5, lr}
 801dd12:	690b      	ldr	r3, [r1, #16]
 801dd14:	4605      	mov	r5, r0
 801dd16:	460c      	mov	r4, r1
 801dd18:	b913      	cbnz	r3, 801dd20 <_fflush_r+0x10>
 801dd1a:	2500      	movs	r5, #0
 801dd1c:	4628      	mov	r0, r5
 801dd1e:	bd38      	pop	{r3, r4, r5, pc}
 801dd20:	b118      	cbz	r0, 801dd2a <_fflush_r+0x1a>
 801dd22:	6a03      	ldr	r3, [r0, #32]
 801dd24:	b90b      	cbnz	r3, 801dd2a <_fflush_r+0x1a>
 801dd26:	f7fe ff9f 	bl	801cc68 <__sinit>
 801dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	d0f3      	beq.n	801dd1a <_fflush_r+0xa>
 801dd32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dd34:	07d0      	lsls	r0, r2, #31
 801dd36:	d404      	bmi.n	801dd42 <_fflush_r+0x32>
 801dd38:	0599      	lsls	r1, r3, #22
 801dd3a:	d402      	bmi.n	801dd42 <_fflush_r+0x32>
 801dd3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd3e:	f7ff fa34 	bl	801d1aa <__retarget_lock_acquire_recursive>
 801dd42:	4628      	mov	r0, r5
 801dd44:	4621      	mov	r1, r4
 801dd46:	f7ff ff5f 	bl	801dc08 <__sflush_r>
 801dd4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd4c:	07da      	lsls	r2, r3, #31
 801dd4e:	4605      	mov	r5, r0
 801dd50:	d4e4      	bmi.n	801dd1c <_fflush_r+0xc>
 801dd52:	89a3      	ldrh	r3, [r4, #12]
 801dd54:	059b      	lsls	r3, r3, #22
 801dd56:	d4e1      	bmi.n	801dd1c <_fflush_r+0xc>
 801dd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd5a:	f7ff fa27 	bl	801d1ac <__retarget_lock_release_recursive>
 801dd5e:	e7dd      	b.n	801dd1c <_fflush_r+0xc>

0801dd60 <__swhatbuf_r>:
 801dd60:	b570      	push	{r4, r5, r6, lr}
 801dd62:	460c      	mov	r4, r1
 801dd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd68:	2900      	cmp	r1, #0
 801dd6a:	b096      	sub	sp, #88	@ 0x58
 801dd6c:	4615      	mov	r5, r2
 801dd6e:	461e      	mov	r6, r3
 801dd70:	da0d      	bge.n	801dd8e <__swhatbuf_r+0x2e>
 801dd72:	89a3      	ldrh	r3, [r4, #12]
 801dd74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dd78:	f04f 0100 	mov.w	r1, #0
 801dd7c:	bf14      	ite	ne
 801dd7e:	2340      	movne	r3, #64	@ 0x40
 801dd80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dd84:	2000      	movs	r0, #0
 801dd86:	6031      	str	r1, [r6, #0]
 801dd88:	602b      	str	r3, [r5, #0]
 801dd8a:	b016      	add	sp, #88	@ 0x58
 801dd8c:	bd70      	pop	{r4, r5, r6, pc}
 801dd8e:	466a      	mov	r2, sp
 801dd90:	f000 f862 	bl	801de58 <_fstat_r>
 801dd94:	2800      	cmp	r0, #0
 801dd96:	dbec      	blt.n	801dd72 <__swhatbuf_r+0x12>
 801dd98:	9901      	ldr	r1, [sp, #4]
 801dd9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dd9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dda2:	4259      	negs	r1, r3
 801dda4:	4159      	adcs	r1, r3
 801dda6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ddaa:	e7eb      	b.n	801dd84 <__swhatbuf_r+0x24>

0801ddac <__smakebuf_r>:
 801ddac:	898b      	ldrh	r3, [r1, #12]
 801ddae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddb0:	079d      	lsls	r5, r3, #30
 801ddb2:	4606      	mov	r6, r0
 801ddb4:	460c      	mov	r4, r1
 801ddb6:	d507      	bpl.n	801ddc8 <__smakebuf_r+0x1c>
 801ddb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ddbc:	6023      	str	r3, [r4, #0]
 801ddbe:	6123      	str	r3, [r4, #16]
 801ddc0:	2301      	movs	r3, #1
 801ddc2:	6163      	str	r3, [r4, #20]
 801ddc4:	b003      	add	sp, #12
 801ddc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddc8:	ab01      	add	r3, sp, #4
 801ddca:	466a      	mov	r2, sp
 801ddcc:	f7ff ffc8 	bl	801dd60 <__swhatbuf_r>
 801ddd0:	9f00      	ldr	r7, [sp, #0]
 801ddd2:	4605      	mov	r5, r0
 801ddd4:	4639      	mov	r1, r7
 801ddd6:	4630      	mov	r0, r6
 801ddd8:	f7ff fa64 	bl	801d2a4 <_malloc_r>
 801dddc:	b948      	cbnz	r0, 801ddf2 <__smakebuf_r+0x46>
 801ddde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dde2:	059a      	lsls	r2, r3, #22
 801dde4:	d4ee      	bmi.n	801ddc4 <__smakebuf_r+0x18>
 801dde6:	f023 0303 	bic.w	r3, r3, #3
 801ddea:	f043 0302 	orr.w	r3, r3, #2
 801ddee:	81a3      	strh	r3, [r4, #12]
 801ddf0:	e7e2      	b.n	801ddb8 <__smakebuf_r+0xc>
 801ddf2:	89a3      	ldrh	r3, [r4, #12]
 801ddf4:	6020      	str	r0, [r4, #0]
 801ddf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ddfa:	81a3      	strh	r3, [r4, #12]
 801ddfc:	9b01      	ldr	r3, [sp, #4]
 801ddfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801de02:	b15b      	cbz	r3, 801de1c <__smakebuf_r+0x70>
 801de04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de08:	4630      	mov	r0, r6
 801de0a:	f000 f837 	bl	801de7c <_isatty_r>
 801de0e:	b128      	cbz	r0, 801de1c <__smakebuf_r+0x70>
 801de10:	89a3      	ldrh	r3, [r4, #12]
 801de12:	f023 0303 	bic.w	r3, r3, #3
 801de16:	f043 0301 	orr.w	r3, r3, #1
 801de1a:	81a3      	strh	r3, [r4, #12]
 801de1c:	89a3      	ldrh	r3, [r4, #12]
 801de1e:	431d      	orrs	r5, r3
 801de20:	81a5      	strh	r5, [r4, #12]
 801de22:	e7cf      	b.n	801ddc4 <__smakebuf_r+0x18>

0801de24 <memmove>:
 801de24:	4288      	cmp	r0, r1
 801de26:	b510      	push	{r4, lr}
 801de28:	eb01 0402 	add.w	r4, r1, r2
 801de2c:	d902      	bls.n	801de34 <memmove+0x10>
 801de2e:	4284      	cmp	r4, r0
 801de30:	4623      	mov	r3, r4
 801de32:	d807      	bhi.n	801de44 <memmove+0x20>
 801de34:	1e43      	subs	r3, r0, #1
 801de36:	42a1      	cmp	r1, r4
 801de38:	d008      	beq.n	801de4c <memmove+0x28>
 801de3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801de3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801de42:	e7f8      	b.n	801de36 <memmove+0x12>
 801de44:	4402      	add	r2, r0
 801de46:	4601      	mov	r1, r0
 801de48:	428a      	cmp	r2, r1
 801de4a:	d100      	bne.n	801de4e <memmove+0x2a>
 801de4c:	bd10      	pop	{r4, pc}
 801de4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801de52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801de56:	e7f7      	b.n	801de48 <memmove+0x24>

0801de58 <_fstat_r>:
 801de58:	b538      	push	{r3, r4, r5, lr}
 801de5a:	4d07      	ldr	r5, [pc, #28]	@ (801de78 <_fstat_r+0x20>)
 801de5c:	2300      	movs	r3, #0
 801de5e:	4604      	mov	r4, r0
 801de60:	4608      	mov	r0, r1
 801de62:	4611      	mov	r1, r2
 801de64:	602b      	str	r3, [r5, #0]
 801de66:	f7e4 fa75 	bl	8002354 <_fstat>
 801de6a:	1c43      	adds	r3, r0, #1
 801de6c:	d102      	bne.n	801de74 <_fstat_r+0x1c>
 801de6e:	682b      	ldr	r3, [r5, #0]
 801de70:	b103      	cbz	r3, 801de74 <_fstat_r+0x1c>
 801de72:	6023      	str	r3, [r4, #0]
 801de74:	bd38      	pop	{r3, r4, r5, pc}
 801de76:	bf00      	nop
 801de78:	24008a68 	.word	0x24008a68

0801de7c <_isatty_r>:
 801de7c:	b538      	push	{r3, r4, r5, lr}
 801de7e:	4d06      	ldr	r5, [pc, #24]	@ (801de98 <_isatty_r+0x1c>)
 801de80:	2300      	movs	r3, #0
 801de82:	4604      	mov	r4, r0
 801de84:	4608      	mov	r0, r1
 801de86:	602b      	str	r3, [r5, #0]
 801de88:	f7e4 fa74 	bl	8002374 <_isatty>
 801de8c:	1c43      	adds	r3, r0, #1
 801de8e:	d102      	bne.n	801de96 <_isatty_r+0x1a>
 801de90:	682b      	ldr	r3, [r5, #0]
 801de92:	b103      	cbz	r3, 801de96 <_isatty_r+0x1a>
 801de94:	6023      	str	r3, [r4, #0]
 801de96:	bd38      	pop	{r3, r4, r5, pc}
 801de98:	24008a68 	.word	0x24008a68

0801de9c <_sbrk_r>:
 801de9c:	b538      	push	{r3, r4, r5, lr}
 801de9e:	4d06      	ldr	r5, [pc, #24]	@ (801deb8 <_sbrk_r+0x1c>)
 801dea0:	2300      	movs	r3, #0
 801dea2:	4604      	mov	r4, r0
 801dea4:	4608      	mov	r0, r1
 801dea6:	602b      	str	r3, [r5, #0]
 801dea8:	f7e4 fa7c 	bl	80023a4 <_sbrk>
 801deac:	1c43      	adds	r3, r0, #1
 801deae:	d102      	bne.n	801deb6 <_sbrk_r+0x1a>
 801deb0:	682b      	ldr	r3, [r5, #0]
 801deb2:	b103      	cbz	r3, 801deb6 <_sbrk_r+0x1a>
 801deb4:	6023      	str	r3, [r4, #0]
 801deb6:	bd38      	pop	{r3, r4, r5, pc}
 801deb8:	24008a68 	.word	0x24008a68

0801debc <_realloc_r>:
 801debc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dec0:	4607      	mov	r7, r0
 801dec2:	4614      	mov	r4, r2
 801dec4:	460d      	mov	r5, r1
 801dec6:	b921      	cbnz	r1, 801ded2 <_realloc_r+0x16>
 801dec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801decc:	4611      	mov	r1, r2
 801dece:	f7ff b9e9 	b.w	801d2a4 <_malloc_r>
 801ded2:	b92a      	cbnz	r2, 801dee0 <_realloc_r+0x24>
 801ded4:	f7ff f97a 	bl	801d1cc <_free_r>
 801ded8:	4625      	mov	r5, r4
 801deda:	4628      	mov	r0, r5
 801dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dee0:	f000 f81a 	bl	801df18 <_malloc_usable_size_r>
 801dee4:	4284      	cmp	r4, r0
 801dee6:	4606      	mov	r6, r0
 801dee8:	d802      	bhi.n	801def0 <_realloc_r+0x34>
 801deea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801deee:	d8f4      	bhi.n	801deda <_realloc_r+0x1e>
 801def0:	4621      	mov	r1, r4
 801def2:	4638      	mov	r0, r7
 801def4:	f7ff f9d6 	bl	801d2a4 <_malloc_r>
 801def8:	4680      	mov	r8, r0
 801defa:	b908      	cbnz	r0, 801df00 <_realloc_r+0x44>
 801defc:	4645      	mov	r5, r8
 801defe:	e7ec      	b.n	801deda <_realloc_r+0x1e>
 801df00:	42b4      	cmp	r4, r6
 801df02:	4622      	mov	r2, r4
 801df04:	4629      	mov	r1, r5
 801df06:	bf28      	it	cs
 801df08:	4632      	movcs	r2, r6
 801df0a:	f7ff f950 	bl	801d1ae <memcpy>
 801df0e:	4629      	mov	r1, r5
 801df10:	4638      	mov	r0, r7
 801df12:	f7ff f95b 	bl	801d1cc <_free_r>
 801df16:	e7f1      	b.n	801defc <_realloc_r+0x40>

0801df18 <_malloc_usable_size_r>:
 801df18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df1c:	1f18      	subs	r0, r3, #4
 801df1e:	2b00      	cmp	r3, #0
 801df20:	bfbc      	itt	lt
 801df22:	580b      	ldrlt	r3, [r1, r0]
 801df24:	18c0      	addlt	r0, r0, r3
 801df26:	4770      	bx	lr

0801df28 <_init>:
 801df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df2a:	bf00      	nop
 801df2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df2e:	bc08      	pop	{r3}
 801df30:	469e      	mov	lr, r3
 801df32:	4770      	bx	lr

0801df34 <_fini>:
 801df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df36:	bf00      	nop
 801df38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df3a:	bc08      	pop	{r3}
 801df3c:	469e      	mov	lr, r3
 801df3e:	4770      	bx	lr
