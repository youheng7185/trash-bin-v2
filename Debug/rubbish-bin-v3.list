
rubbish-bin-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e48c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138f0  0801e75c  0801e75c  0001f75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803204c  0803204c  0003304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08032054  08032054  00033054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08032058  08032058  00033058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0803205c  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008a78  2400007c  080320d8  0003407c  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  24008af4  080320d8  00034af4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003407c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00044003  00000000  00000000  000340aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008fc4  00000000  00000000  000780ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002df0  00000000  00000000  00081078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023b4  00000000  00000000  00083e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010dc2  00000000  00000000  0008621c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000495e6  00000000  00000000  00096fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f08b  00000000  00000000  000e05c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025f64f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c8ec  00000000  00000000  0025f694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0026bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e744 	.word	0x0801e744

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	0801e744 	.word	0x0801e744

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <my_printf>:
}
*/
extern UART_HandleTypeDef hlpuart1;

static inline void my_printf(const char *format, ...)
{
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b0c2      	sub	sp, #264	@ 0x108
 80006f2:	af00      	add	r7, sp, #0
    char buffer[256];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80006f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80006f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	f01d f824 	bl	801d764 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdf5 	bl	8000310 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0108 	add.w	r1, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <my_printf+0x5c>)
 8000734:	f00d ff62 	bl	800e5fc <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	240001b8 	.word	0x240001b8

0800074c <HAL_GPIO_EXTI_Callback>:
void tud_umount_cb(void) {
  //Do nothing for now
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b08      	cmp	r3, #8
 800075a:	d10d      	bne.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    	my_printf("hello from exti\r\n");
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x34>)
 800075e:	f7ff ffc5 	bl	80006ec <my_printf>
    	if (recording_state == READY)
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d103      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0x26>
    	{
    		recording_state = DO_RECORDING;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 800076c:	2202      	movs	r2, #2
 800076e:	701a      	strb	r2, [r3, #0]
    	} else {
    		my_printf("not ready for recording\r\n");
    	}
    }
}
 8000770:	e002      	b.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    		my_printf("not ready for recording\r\n");
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000774:	f7ff ffba 	bl	80006ec <my_printf>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0801e75c 	.word	0x0801e75c
 8000784:	24001e24 	.word	0x24001e24
 8000788:	0801e770 	.word	0x0801e770

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f003 f9b1 	bl	8003af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f8bb 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fb7b 	bl	8000e94 <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f000 fb59 	bl	8000e54 <MX_DMA_Init>
  MX_I2C1_Init();
 80007a2:	f000 f923 	bl	80009ec <MX_I2C1_Init>
  MX_SPI4_Init();
 80007a6:	f000 fa4b 	bl	8000c40 <MX_SPI4_Init>
  MX_TIM2_Init();
 80007aa:	f000 fa9f 	bl	8000cec <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80007ae:	f000 fa29 	bl	8000c04 <MX_SDMMC1_SD_Init>
  MX_I2S1_Init();
 80007b2:	f000 f95b 	bl	8000a6c <MX_I2S1_Init>
  MX_UART5_Init();
 80007b6:	f000 f9d9 	bl	8000b6c <MX_UART5_Init>
  MX_FATFS_Init();
 80007ba:	f010 fa0f 	bl	8010bdc <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 80007be:	f000 f989 	bl	8000ad4 <MX_LPUART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007c2:	f000 fb15 	bl	8000df0 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  my_printf("test print\r\n");
 80007c6:	4844      	ldr	r0, [pc, #272]	@ (80008d8 <main+0x14c>)
 80007c8:	f7ff ff90 	bl	80006ec <my_printf>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007cc:	2100      	movs	r1, #0
 80007ce:	4843      	ldr	r0, [pc, #268]	@ (80008dc <main+0x150>)
 80007d0:	f00c feba 	bl	800d548 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007d4:	2104      	movs	r1, #4
 80007d6:	4841      	ldr	r0, [pc, #260]	@ (80008dc <main+0x150>)
 80007d8:	f00c feb6 	bl	800d548 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e0:	f003 fa1c 	bl	8003c1c <HAL_Delay>

  mfcc_q15_init();
 80007e4:	f000 fc48 	bl	8001078 <mfcc_q15_init>

  st7920_init();
 80007e8:	f000 ffa4 	bl	8001734 <st7920_init>
  st7920_clear();
 80007ec:	f001 f90e 	bl	8001a0c <st7920_clear>
  st7920_print(1, 1, "sd card mount failed");
 80007f0:	4a3b      	ldr	r2, [pc, #236]	@ (80008e0 <main+0x154>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	2001      	movs	r0, #1
 80007f6:	f001 f8e3 	bl	80019c0 <st7920_print>
  st7920_sendBuffer();
 80007fa:	f001 f833 	bl	8001864 <st7920_sendBuffer>
  sd_init();
 80007fe:	f000 fcc1 	bl	8001184 <sd_init>
  st7920_clear();
 8000802:	f001 f903 	bl	8001a0c <st7920_clear>
  st7920_print(1, 1, "sd card mount success");
 8000806:	4a37      	ldr	r2, [pc, #220]	@ (80008e4 <main+0x158>)
 8000808:	2101      	movs	r1, #1
 800080a:	2001      	movs	r0, #1
 800080c:	f001 f8d8 	bl	80019c0 <st7920_print>
  st7920_sendBuffer();
 8000810:	f001 f828 	bl	8001864 <st7920_sendBuffer>
  recording_state = READY; // READY as sd card success, can write data to it
 8000814:	4b34      	ldr	r3, [pc, #208]	@ (80008e8 <main+0x15c>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]

  if(vl53l0x_init())
 800081a:	f003 f8fb 	bl	8003a14 <vl53l0x_init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <main+0xaa>
  {
	  my_printf("init vl53l0x success\r\n");
 8000824:	4831      	ldr	r0, [pc, #196]	@ (80008ec <main+0x160>)
 8000826:	f7ff ff61 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init success");
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <main+0x164>)
 800082c:	2109      	movs	r1, #9
 800082e:	2001      	movs	r0, #1
 8000830:	f001 f8c6 	bl	80019c0 <st7920_print>
 8000834:	e007      	b.n	8000846 <main+0xba>
  } else {
	  my_printf("init vl53l0x failed\r\n");
 8000836:	482f      	ldr	r0, [pc, #188]	@ (80008f4 <main+0x168>)
 8000838:	f7ff ff58 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init failed");
 800083c:	4a2e      	ldr	r2, [pc, #184]	@ (80008f8 <main+0x16c>)
 800083e:	2109      	movs	r1, #9
 8000840:	2001      	movs	r0, #1
 8000842:	f001 f8bd 	bl	80019c0 <st7920_print>
  }
  my_printf("finish setup\r\n");
 8000846:	482d      	ldr	r0, [pc, #180]	@ (80008fc <main+0x170>)
 8000848:	f7ff ff50 	bl	80006ec <my_printf>
  st7920_print(1, 17, "waiting for exti");
 800084c:	4a2c      	ldr	r2, [pc, #176]	@ (8000900 <main+0x174>)
 800084e:	2111      	movs	r1, #17
 8000850:	2001      	movs	r0, #1
 8000852:	f001 f8b5 	bl	80019c0 <st7920_print>
  st7920_sendBuffer();
 8000856:	f001 f805 	bl	8001864 <st7920_sendBuffer>

  servo360_init();
 800085a:	f000 fed0 	bl	80015fe <servo360_init>
  set_servo_speed(150);
 800085e:	2096      	movs	r0, #150	@ 0x96
 8000860:	f000 fee6 	bl	8001630 <set_servo_speed>
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 800086a:	2301      	movs	r3, #1
 800086c:	f887 3020 	strb.w	r3, [r7, #32]
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 8000876:	f107 0220 	add.w	r2, r7, #32
 800087a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f017 fd15 	bl	80182b0 <tud_rhport_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (recording_state == DO_RECORDING) {
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <main+0x15c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d1fb      	bne.n	8000886 <main+0xfa>
		recording_state = RECORDING;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <main+0x15c>)
 8000890:	2203      	movs	r2, #3
 8000892:	701a      	strb	r2, [r3, #0]
		my_printf("recording started from exti\r\n");
 8000894:	481b      	ldr	r0, [pc, #108]	@ (8000904 <main+0x178>)
 8000896:	f7ff ff29 	bl	80006ec <my_printf>
		st7920_clear();
 800089a:	f001 f8b7 	bl	8001a0c <st7920_clear>
		st7920_print(1, 17, "record start");
 800089e:	4a1a      	ldr	r2, [pc, #104]	@ (8000908 <main+0x17c>)
 80008a0:	2111      	movs	r1, #17
 80008a2:	2001      	movs	r0, #1
 80008a4:	f001 f88c 	bl	80019c0 <st7920_print>
		st7920_sendBuffer();
 80008a8:	f000 ffdc 	bl	8001864 <st7920_sendBuffer>
		int num_of_file = record_and_convert();
 80008ac:	f000 fe9a 	bl	80015e4 <record_and_convert>
 80008b0:	6278      	str	r0, [r7, #36]	@ 0x24
		char tx_buffer[30];
		sprintf(tx_buffer, "record saved to %d", num_of_file);
 80008b2:	463b      	mov	r3, r7
 80008b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008b6:	4915      	ldr	r1, [pc, #84]	@ (800090c <main+0x180>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f01c febf 	bl	801d63c <siprintf>
		st7920_print(1, 25, tx_buffer);
 80008be:	463b      	mov	r3, r7
 80008c0:	461a      	mov	r2, r3
 80008c2:	2119      	movs	r1, #25
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f87b 	bl	80019c0 <st7920_print>
		st7920_sendBuffer();
 80008ca:	f000 ffcb 	bl	8001864 <st7920_sendBuffer>
		recording_state = READY;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <main+0x15c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
	  if (recording_state == DO_RECORDING) {
 80008d4:	e7d7      	b.n	8000886 <main+0xfa>
 80008d6:	bf00      	nop
 80008d8:	0801e78c 	.word	0x0801e78c
 80008dc:	240003e4 	.word	0x240003e4
 80008e0:	0801e79c 	.word	0x0801e79c
 80008e4:	0801e7b4 	.word	0x0801e7b4
 80008e8:	24001e24 	.word	0x24001e24
 80008ec:	0801e7cc 	.word	0x0801e7cc
 80008f0:	0801e7e4 	.word	0x0801e7e4
 80008f4:	0801e7fc 	.word	0x0801e7fc
 80008f8:	0801e814 	.word	0x0801e814
 80008fc:	0801e828 	.word	0x0801e828
 8000900:	0801e838 	.word	0x0801e838
 8000904:	0801e84c 	.word	0x0801e84c
 8000908:	0801e86c 	.word	0x0801e86c
 800090c:	0801e87c 	.word	0x0801e87c

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	@ 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	224c      	movs	r2, #76	@ 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f01c ffc2 	bl	801d8a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f01c ffbc 	bl	801d8a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000930:	2002      	movs	r0, #2
 8000932:	f007 fa0d 	bl	8007d50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b2b      	ldr	r3, [pc, #172]	@ (80009e8 <SystemClock_Config+0xd8>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a2a      	ldr	r2, [pc, #168]	@ (80009e8 <SystemClock_Config+0xd8>)
 8000940:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <SystemClock_Config+0xd8>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000952:	bf00      	nop
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <SystemClock_Config+0xd8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000960:	d1f8      	bne.n	8000954 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000962:	2301      	movs	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000966:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000970:	2302      	movs	r3, #2
 8000972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000974:	2305      	movs	r3, #5
 8000976:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000978:	2330      	movs	r3, #48	@ 0x30
 800097a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000980:	2305      	movs	r3, #5
 8000982:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000988:	2308      	movs	r3, #8
 800098a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098c:	2300      	movs	r3, #0
 800098e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000998:	4618      	mov	r0, r3
 800099a:	f007 fa23 	bl	8007de4 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a4:	f000 fb32 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	233f      	movs	r3, #63	@ 0x3f
 80009aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2303      	movs	r3, #3
 80009ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c6:	2340      	movs	r3, #64	@ 0x40
 80009c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2103      	movs	r1, #3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 fde2 	bl	8008598 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009da:	f000 fb17 	bl	800100c <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3770      	adds	r7, #112	@ 0x70
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	58024800 	.word	0x58024800

080009ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_I2C1_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <MX_I2C1_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_I2C1_Init+0x74>)
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <MX_I2C1_Init+0x7c>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a26:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a28:	f005 fffa 	bl	8006a20 <HAL_I2C_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a32:	f000 faeb 	bl	800100c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a3a:	f006 fd41 	bl	80074c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 fae2 	bl	800100c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_I2C1_Init+0x74>)
 8000a4c:	f006 fd83 	bl	8007556 <HAL_I2CEx_ConfigDigitalFilter>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 fad9 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000098 	.word	0x24000098
 8000a64:	40005400 	.word	0x40005400
 8000a68:	307075b1 	.word	0x307075b1

08000a6c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a72:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <MX_I2S1_Init+0x64>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a78:	2206      	movs	r2, #6
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a88:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a92:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000a96:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_I2S1_Init+0x60>)
 8000ab8:	f006 fd9a 	bl	80075f0 <HAL_I2S_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000ac2:	f000 faa3 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	240000ec 	.word	0x240000ec
 8000ad0:	40013000 	.word	0x40013000

08000ad4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	@ (8000b68 <MX_LPUART1_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b1e:	f00d fd1d 	bl	800e55c <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 fa70 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b30:	f00e feb7 	bl	800f8a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 fa67 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b42:	f00e feec 	bl	800f91e <HAL_UARTEx_SetRxFifoThreshold>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 fa5e 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_LPUART1_UART_Init+0x90>)
 8000b52:	f00e fe6d 	bl	800f830 <HAL_UARTEx_DisableFifoMode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 fa56 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	240001b8 	.word	0x240001b8
 8000b68:	58000c00 	.word	0x58000c00

08000b6c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b72:	4a23      	ldr	r2, [pc, #140]	@ (8000c00 <MX_UART5_Init+0x94>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b76:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000bb6:	f00d fcd1 	bl	800e55c <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 fa24 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000bc8:	f00e fe6b 	bl	800f8a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 fa1b 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000bda:	f00e fea0 	bl	800f91e <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f000 fa12 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_UART5_Init+0x90>)
 8000bea:	f00e fe21 	bl	800f830 <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f000 fa0a 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2400024c 	.word	0x2400024c
 8000c00:	40005000 	.word	0x40005000

08000c04 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_SDMMC1_SD_Init+0x34>)
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <MX_SDMMC1_SD_Init+0x38>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_SDMMC1_SD_Init+0x34>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_SDMMC1_SD_Init+0x34>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <MX_SDMMC1_SD_Init+0x34>)
 8000c1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c20:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <MX_SDMMC1_SD_Init+0x34>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <MX_SDMMC1_SD_Init+0x34>)
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	240002e0 	.word	0x240002e0
 8000c3c:	52007000 	.word	0x52007000

08000c40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c46:	4a28      	ldr	r2, [pc, #160]	@ (8000ce8 <MX_SPI4_Init+0xa8>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c4c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c6c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c74:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000c78:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_SPI4_Init+0xa4>)
 8000cd2:	f00b ff85 	bl	800cbe0 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000cdc:	f000 f996 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2400035c 	.word	0x2400035c
 8000ce8:	40013400 	.word	0x40013400

08000cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	@ 0x38
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1e:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2750-1;
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d28:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8000d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000d34:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d36:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d48:	4828      	ldr	r0, [pc, #160]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d4a:	f00c fb44 	bl	800d3d6 <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000d54:	f000 f95a 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4821      	ldr	r0, [pc, #132]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d66:	f00c fe1f 	bl	800d9a8 <HAL_TIM_ConfigClockSource>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d70:	f000 f94c 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d74:	481d      	ldr	r0, [pc, #116]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d76:	f00c fb85 	bl	800d484 <HAL_TIM_PWM_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d80:	f000 f944 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4816      	ldr	r0, [pc, #88]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000d94:	f00d fb46 	bl	800e424 <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d9e:	f000 f935 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da2:	2360      	movs	r3, #96	@ 0x60
 8000da4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000dba:	f00c fce1 	bl	800d780 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000dc4:	f000 f922 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2204      	movs	r2, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000dd0:	f00c fcd6 	bl	800d780 <HAL_TIM_PWM_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000dda:	f000 f917 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dde:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_TIM2_Init+0x100>)
 8000de0:	f001 f920 	bl	8002024 <HAL_TIM_MspPostInit>

}
 8000de4:	bf00      	nop
 8000de6:	3738      	adds	r7, #56	@ 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	240003e4 	.word	0x240003e4

08000df0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000df8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e38:	f006 fe5a 	bl	8007af0 <HAL_PCD_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e42:	f000 f8e3 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000430 	.word	0x24000430
 8000e50:	40040000 	.word	0x40040000

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <MX_DMA_Init+0x3c>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <MX_DMA_Init+0x3c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_DMA_Init+0x3c>)
 8000e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200b      	movs	r0, #11
 8000e7e:	f002 ffcc 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e82:	200b      	movs	r0, #11
 8000e84:	f002 ffe3 	bl	8003e4e <HAL_NVIC_EnableIRQ>

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eaa:	4b54      	ldr	r3, [pc, #336]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a52      	ldr	r2, [pc, #328]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000eb2:	f043 0310 	orr.w	r3, r3, #16
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b50      	ldr	r3, [pc, #320]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	4a4b      	ldr	r2, [pc, #300]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed8:	4b48      	ldr	r3, [pc, #288]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	4a43      	ldr	r2, [pc, #268]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef6:	4b41      	ldr	r3, [pc, #260]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b3d      	ldr	r3, [pc, #244]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f14:	4b39      	ldr	r3, [pc, #228]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a34      	ldr	r2, [pc, #208]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f40:	4b2e      	ldr	r3, [pc, #184]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	4a2d      	ldr	r2, [pc, #180]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f50:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a25      	ldr	r2, [pc, #148]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <MX_GPIO_Init+0x168>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin|lcd_rst_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2118      	movs	r1, #24
 8000f80:	481f      	ldr	r0, [pc, #124]	@ (8001000 <MX_GPIO_Init+0x16c>)
 8000f82:	f005 fd19 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8000f86:	2200      	movs	r2, #0
 8000f88:	21bc      	movs	r1, #188	@ 0xbc
 8000f8a:	481e      	ldr	r0, [pc, #120]	@ (8001004 <MX_GPIO_Init+0x170>)
 8000f8c:	f005 fd14 	bl	80069b8 <HAL_GPIO_WritePin>
                          |led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : lcd_cs_Pin lcd_rst_Pin */
  GPIO_InitStruct.Pin = lcd_cs_Pin|lcd_rst_Pin;
 8000f90:	2318      	movs	r3, #24
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4816      	ldr	r0, [pc, #88]	@ (8001000 <MX_GPIO_Init+0x16c>)
 8000fa8:	f005 fb5e 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_sensor_Pin */
  GPIO_InitStruct.Pin = ir_sensor_Pin;
 8000fac:	2308      	movs	r3, #8
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ir_sensor_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4811      	ldr	r0, [pc, #68]	@ (8001008 <MX_GPIO_Init+0x174>)
 8000fc2:	f005 fb51 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : xshut4_Pin xshut3_Pin xshut2_Pin xshut1_Pin
                           led_Pin */
  GPIO_InitStruct.Pin = xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8000fc6:	23bc      	movs	r3, #188	@ 0xbc
 8000fc8:	61fb      	str	r3, [r7, #28]
                          |led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4809      	ldr	r0, [pc, #36]	@ (8001004 <MX_GPIO_Init+0x170>)
 8000fde:	f005 fb43 	bl	8006668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(ir_sensor_EXTI_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2009      	movs	r0, #9
 8000fe8:	f002 ff17 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ir_sensor_EXTI_IRQn);
 8000fec:	2009      	movs	r0, #9
 8000fee:	f002 ff2e 	bl	8003e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3730      	adds	r7, #48	@ 0x30
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58021000 	.word	0x58021000
 8001004:	58021800 	.word	0x58021800
 8001008:	58020000 	.word	0x58020000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <my_printf>:
{
 8001018:	b40f      	push	{r0, r1, r2, r3}
 800101a:	b580      	push	{r7, lr}
 800101c:	b0c2      	sub	sp, #264	@ 0x108
 800101e:	af00      	add	r7, sp, #0
    va_start(args, format);
 8001020:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800102c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800102e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001036:	f107 0008 	add.w	r0, r7, #8
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	f01c fb8e 	bl	801d764 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff f95f 	bl	8000310 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	b29a      	uxth	r2, r3
 8001056:	f107 0108 	add.w	r1, r7, #8
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <my_printf+0x5c>)
 8001060:	f00d facc 	bl	800e5fc <HAL_UART_Transmit>
}
 8001064:	bf00      	nop
 8001066:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800106a:	46bd      	mov	sp, r7
 800106c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001070:	b004      	add	sp, #16
 8001072:	4770      	bx	lr
 8001074:	240001b8 	.word	0x240001b8

08001078 <mfcc_q15_init>:
#include "dct_coefficients.h"
#include "filter_bank.h"

arm_mfcc_instance_q15 mfcc_inst;

void mfcc_q15_init() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af06      	add	r7, sp, #24
	arm_status status;

	status = arm_mfcc_init_q15(
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <mfcc_q15_init+0x4c>)
 8001080:	9304      	str	r3, [sp, #16]
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <mfcc_q15_init+0x50>)
 8001084:	9303      	str	r3, [sp, #12]
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <mfcc_q15_init+0x54>)
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <mfcc_q15_init+0x58>)
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <mfcc_q15_init+0x5c>)
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	230d      	movs	r3, #13
 8001094:	221a      	movs	r2, #26
 8001096:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109a:	480f      	ldr	r0, [pc, #60]	@ (80010d8 <mfcc_q15_init+0x60>)
 800109c:	f015 f94c 	bl	8016338 <arm_mfcc_init_q15>
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	    mel_filter_lengths,          // filterLengths
	    mel_filter_coeffs,           // filterCoefs
	    hamming_window               // windowCoefs
	);

	if(status == ARM_MATH_SUCCESS)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <mfcc_q15_init+0x3c>
	{
		my_printf("mfcc init success\r\n");
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <mfcc_q15_init+0x64>)
 80010ae:	f7ff ffb3 	bl	8001018 <my_printf>
	} else {
		my_printf("mfcc init failed\r\n");
	}
}
 80010b2:	e002      	b.n	80010ba <mfcc_q15_init+0x42>
		my_printf("mfcc init failed\r\n");
 80010b4:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <mfcc_q15_init+0x68>)
 80010b6:	f7ff ffaf 	bl	8001018 <my_printf>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0801f5bc 	.word	0x0801f5bc
 80010c8:	0801f1f8 	.word	0x0801f1f8
 80010cc:	0801f190 	.word	0x0801f190
 80010d0:	0801f128 	.word	0x0801f128
 80010d4:	0801ee84 	.word	0x0801ee84
 80010d8:	24000914 	.word	0x24000914
 80010dc:	0801e890 	.word	0x0801e890
 80010e0:	0801e8a4 	.word	0x0801e8a4

080010e4 <convert_mfcc>:
q15_t mfcc_output[26];
// input buffer is 512
q31_t tmp_buffer[512 * 2];

void convert_mfcc(q15_t * pcm_input)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	arm_status status;
	status = arm_mfcc_q15(&mfcc_inst, pcm_input, mfcc_output, tmp_buffer);
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <convert_mfcc+0x30>)
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <convert_mfcc+0x34>)
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	480a      	ldr	r0, [pc, #40]	@ (800111c <convert_mfcc+0x38>)
 80010f4:	f015 f950 	bl	8016398 <arm_mfcc_q15>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
	if (status != ARM_MATH_SUCCESS)
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <convert_mfcc+0x26>
	{
		my_printf("failed mfcc conversion\r\n");
 8001104:	4806      	ldr	r0, [pc, #24]	@ (8001120 <convert_mfcc+0x3c>)
 8001106:	f7ff ff87 	bl	8001018 <my_printf>
	}
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	24000980 	.word	0x24000980
 8001118:	2400094c 	.word	0x2400094c
 800111c:	24000914 	.word	0x24000914
 8001120:	0801e8b8 	.word	0x0801e8b8

08001124 <my_printf>:
{
 8001124:	b40f      	push	{r0, r1, r2, r3}
 8001126:	b580      	push	{r7, lr}
 8001128:	b0c2      	sub	sp, #264	@ 0x108
 800112a:	af00      	add	r7, sp, #0
    va_start(args, format);
 800112c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001138:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800113a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800113e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001142:	f107 0008 	add.w	r0, r7, #8
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800114c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001150:	f01c fb08 	bl	801d764 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f8d9 	bl	8000310 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	f107 0108 	add.w	r1, r7, #8
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <my_printf+0x5c>)
 800116c:	f00d fa46 	bl	800e5fc <HAL_UART_Transmit>
}
 8001170:	bf00      	nop
 8001172:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800117c:	b004      	add	sp, #16
 800117e:	4770      	bx	lr
 8001180:	240001b8 	.word	0x240001b8

08001184 <sd_init>:

FATFS fatfs;
FRESULT fresult;
extern SD_HandleTypeDef hsd1;

void sd_init() {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    if (BSP_SD_Init() == MSD_OK) {
 8001188:	f00f fd42 	bl	8010c10 <BSP_SD_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <sd_init+0x16>
        my_printf("SD card initialized successfully!\r\n");
 8001192:	4810      	ldr	r0, [pc, #64]	@ (80011d4 <sd_init+0x50>)
 8001194:	f7ff ffc6 	bl	8001124 <my_printf>
 8001198:	e002      	b.n	80011a0 <sd_init+0x1c>
    } else {
        my_printf("SD card initialization failed!\r\n");
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <sd_init+0x54>)
 800119c:	f7ff ffc2 	bl	8001124 <my_printf>
    }

    fresult = f_mount(&fatfs, "", 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	490e      	ldr	r1, [pc, #56]	@ (80011dc <sd_init+0x58>)
 80011a4:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <sd_init+0x5c>)
 80011a6:	f01b f901 	bl	801c3ac <f_mount>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <sd_init+0x60>)
 80011b0:	701a      	strb	r2, [r3, #0]
    if(fresult != FR_OK) {
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <sd_init+0x60>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <sd_init+0x4c>
        my_printf("f_mount failed, %d\r\n", fresult);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <sd_init+0x60>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <sd_init+0x64>)
 80011c2:	f7ff ffaf 	bl	8001124 <my_printf>
        while(1){
            HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f002 fd27 	bl	8003c1c <HAL_Delay>
 80011ce:	e7fa      	b.n	80011c6 <sd_init+0x42>
        }
    }
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0801e8d4 	.word	0x0801e8d4
 80011d8:	0801e8f8 	.word	0x0801e8f8
 80011dc:	0801e91c 	.word	0x0801e91c
 80011e0:	24001980 	.word	0x24001980
 80011e4:	24001bb0 	.word	0x24001bb0
 80011e8:	0801e920 	.word	0x0801e920

080011ec <get_next_audio_filename>:

#define AUDIO_FOLDER "AUDIO"
#define FILE_TEMPLATE "AUDIO%03d.WAV"
#define MFCC_TEMPLATE "MFCC%03d.BIN"

int get_next_audio_filename() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	@ 0x50
 80011f0:	af00      	add	r7, sp, #0
  DIR dir;
  FILINFO fno;
  int max_number = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (f_opendir(&dir, AUDIO_FOLDER) == FR_OK) {
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	492c      	ldr	r1, [pc, #176]	@ (80012ac <get_next_audio_filename+0xc0>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f01b fefb 	bl	801cff8 <f_opendir>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d14a      	bne.n	800129e <get_next_audio_filename+0xb2>
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001208:	e01e      	b.n	8001248 <get_next_audio_filename+0x5c>
      if (strstr(fno.fname, "AUDIO") && strstr(fno.fname, ".WAV")) {
 800120a:	463b      	mov	r3, r7
 800120c:	3309      	adds	r3, #9
 800120e:	4927      	ldr	r1, [pc, #156]	@ (80012ac <get_next_audio_filename+0xc0>)
 8001210:	4618      	mov	r0, r3
 8001212:	f01c fb51 	bl	801d8b8 <strstr>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d015      	beq.n	8001248 <get_next_audio_filename+0x5c>
 800121c:	463b      	mov	r3, r7
 800121e:	3309      	adds	r3, #9
 8001220:	4923      	ldr	r1, [pc, #140]	@ (80012b0 <get_next_audio_filename+0xc4>)
 8001222:	4618      	mov	r0, r3
 8001224:	f01c fb48 	bl	801d8b8 <strstr>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00c      	beq.n	8001248 <get_next_audio_filename+0x5c>
        int num = atoi(fno.fname + 5);
 800122e:	463b      	mov	r3, r7
 8001230:	3309      	adds	r3, #9
 8001232:	3305      	adds	r3, #5
 8001234:	4618      	mov	r0, r3
 8001236:	f01c f810 	bl	801d25a <atoi>
 800123a:	64b8      	str	r0, [r7, #72]	@ 0x48
        if (num > max_number) {
 800123c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800123e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001240:	429a      	cmp	r2, r3
 8001242:	dd01      	ble.n	8001248 <get_next_audio_filename+0x5c>
          max_number = num;
 8001244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001246:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001248:	463a      	mov	r2, r7
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f01b ff6a 	bl	801d12a <f_readdir>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <get_next_audio_filename+0x76>
 800125c:	7a7b      	ldrb	r3, [r7, #9]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1d3      	bne.n	800120a <get_next_audio_filename+0x1e>
        }
      }
    }
    f_closedir(&dir);
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4618      	mov	r0, r3
 8001268:	f01b ff39 	bl	801d0de <f_closedir>
  } else {
    return -1;
  }

  snprintf(latest_audio_filename, sizeof(latest_audio_filename), AUDIO_FOLDER "/" FILE_TEMPLATE, max_number + 1);
 800126c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800126e:	3301      	adds	r3, #1
 8001270:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <get_next_audio_filename+0xc8>)
 8001272:	2120      	movs	r1, #32
 8001274:	4810      	ldr	r0, [pc, #64]	@ (80012b8 <get_next_audio_filename+0xcc>)
 8001276:	f01c f9ab 	bl	801d5d0 <sniprintf>
  snprintf(latest_mfcc_filename, sizeof(latest_mfcc_filename), AUDIO_FOLDER "/" MFCC_TEMPLATE, max_number + 1);
 800127a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800127c:	3301      	adds	r3, #1
 800127e:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <get_next_audio_filename+0xd0>)
 8001280:	2120      	movs	r1, #32
 8001282:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <get_next_audio_filename+0xd4>)
 8001284:	f01c f9a4 	bl	801d5d0 <sniprintf>
  my_printf("new audio file name in pcm should be: %s\r\n", latest_audio_filename);
 8001288:	490b      	ldr	r1, [pc, #44]	@ (80012b8 <get_next_audio_filename+0xcc>)
 800128a:	480e      	ldr	r0, [pc, #56]	@ (80012c4 <get_next_audio_filename+0xd8>)
 800128c:	f7ff ff4a 	bl	8001124 <my_printf>
  my_printf("new mfcc in f32 should be: %s\r\n", latest_mfcc_filename);
 8001290:	490b      	ldr	r1, [pc, #44]	@ (80012c0 <get_next_audio_filename+0xd4>)
 8001292:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <get_next_audio_filename+0xdc>)
 8001294:	f7ff ff46 	bl	8001124 <my_printf>
  return max_number + 1;
 8001298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800129a:	3301      	adds	r3, #1
 800129c:	e001      	b.n	80012a2 <get_next_audio_filename+0xb6>
    return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3750      	adds	r7, #80	@ 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0801e938 	.word	0x0801e938
 80012b0:	0801e940 	.word	0x0801e940
 80012b4:	0801e948 	.word	0x0801e948
 80012b8:	24001bb4 	.word	0x24001bb4
 80012bc:	0801e95c 	.word	0x0801e95c
 80012c0:	24001bd4 	.word	0x24001bd4
 80012c4:	0801e970 	.word	0x0801e970
 80012c8:	0801e99c 	.word	0x0801e99c

080012cc <HAL_I2S_RxHalfCpltCallback>:
UINT bytes_written;
int16_t left_pcm_buffer[BUFFER_SIZE / 4];
q15_t q15_buffer[BUFFER_SIZE / 4];

// Callback when half buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    buffer_ready = 1;
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	24005e28 	.word	0x24005e28

080012ec <HAL_I2S_RxCpltCallback>:

// Callback when full buffer is filled
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    buffer_ready = 2;
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <HAL_I2S_RxCpltCallback+0x1c>)
 80012f6:	2202      	movs	r2, #2
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	24005e28 	.word	0x24005e28

0800130c <write_wav_header>:

// Write WAV header for mono channel, 16-bit, 16kHz sampling rate
void write_wav_header(FIL *file, uint32_t data_size) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	@ 0x38
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    uint8_t wav_header[44] = {
 8001316:	2352      	movs	r3, #82	@ 0x52
 8001318:	733b      	strb	r3, [r7, #12]
 800131a:	2349      	movs	r3, #73	@ 0x49
 800131c:	737b      	strb	r3, [r7, #13]
 800131e:	2346      	movs	r3, #70	@ 0x46
 8001320:	73bb      	strb	r3, [r7, #14]
 8001322:	2346      	movs	r3, #70	@ 0x46
 8001324:	73fb      	strb	r3, [r7, #15]
        'R', 'I', 'F', 'F',
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	3324      	adds	r3, #36	@ 0x24
 800132c:	b2db      	uxtb	r3, r3
    uint8_t wav_header[44] = {
 800132e:	743b      	strb	r3, [r7, #16]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3324      	adds	r3, #36	@ 0x24
 8001334:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 8001336:	b2db      	uxtb	r3, r3
 8001338:	747b      	strb	r3, [r7, #17]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3324      	adds	r3, #36	@ 0x24
 800133e:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 8001340:	b2db      	uxtb	r3, r3
 8001342:	74bb      	strb	r3, [r7, #18]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3324      	adds	r3, #36	@ 0x24
 8001348:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 800134a:	b2db      	uxtb	r3, r3
 800134c:	74fb      	strb	r3, [r7, #19]
 800134e:	2357      	movs	r3, #87	@ 0x57
 8001350:	753b      	strb	r3, [r7, #20]
 8001352:	2341      	movs	r3, #65	@ 0x41
 8001354:	757b      	strb	r3, [r7, #21]
 8001356:	2356      	movs	r3, #86	@ 0x56
 8001358:	75bb      	strb	r3, [r7, #22]
 800135a:	2345      	movs	r3, #69	@ 0x45
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	2366      	movs	r3, #102	@ 0x66
 8001360:	763b      	strb	r3, [r7, #24]
 8001362:	236d      	movs	r3, #109	@ 0x6d
 8001364:	767b      	strb	r3, [r7, #25]
 8001366:	2374      	movs	r3, #116	@ 0x74
 8001368:	76bb      	strb	r3, [r7, #26]
 800136a:	2320      	movs	r3, #32
 800136c:	76fb      	strb	r3, [r7, #27]
 800136e:	2310      	movs	r3, #16
 8001370:	773b      	strb	r3, [r7, #28]
 8001372:	2300      	movs	r3, #0
 8001374:	777b      	strb	r3, [r7, #29]
 8001376:	2300      	movs	r3, #0
 8001378:	77bb      	strb	r3, [r7, #30]
 800137a:	2300      	movs	r3, #0
 800137c:	77fb      	strb	r3, [r7, #31]
 800137e:	2301      	movs	r3, #1
 8001380:	f887 3020 	strb.w	r3, [r7, #32]
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800138a:	2301      	movs	r3, #1
 800138c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800139c:	233e      	movs	r3, #62	@ 0x3e
 800139e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80013a2:	2300      	movs	r3, #0
 80013a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80013b4:	237d      	movs	r3, #125	@ 0x7d
 80013b6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80013c6:	2302      	movs	r3, #2
 80013c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80013d2:	2310      	movs	r3, #16
 80013d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013de:	2364      	movs	r3, #100	@ 0x64
 80013e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80013e4:	2361      	movs	r3, #97	@ 0x61
 80013e6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80013ea:	2374      	movs	r3, #116	@ 0x74
 80013ec:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80013f0:	2361      	movs	r3, #97	@ 0x61
 80013f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        16, 0, 0, 0, 1, 0, 1, 0,  // PCM format, 1 channel (mono)
        0x00, 0x3E, 0x00, 0x00,  // 16000 Hz sample rate (0x3E80 = 16000)
        0x00, 0x7D, 0x00, 0x00,  // Byte rate = 16000 * 1 * 16/8 = 32000 (0x7D00)
        2, 0, 16, 0,  // Block align = 2 bytes, Bits per sample = 16
        'd', 'a', 't', 'a',
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    };
    UINT bytes_written;
    f_write(file, wav_header, 44, &bytes_written);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	f107 010c 	add.w	r1, r7, #12
 8001424:	222c      	movs	r2, #44	@ 0x2c
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f01b f9c0 	bl	801c7ac <f_write>
    f_sync(file);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f01b fb32 	bl	801ca96 <f_sync>
}
 8001432:	bf00      	nop
 8001434:	3738      	adds	r7, #56	@ 0x38
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <start_audio_recording>:
}

extern I2S_HandleTypeDef hi2s1;

// Start audio recording (writing only left channel)
void start_audio_recording() {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
	UINT bytes_written_mfcc;
    buffer_ready = 0;
 8001442:	4b55      	ldr	r3, [pc, #340]	@ (8001598 <start_audio_recording+0x15c>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    my_printf("Starting audio recording...\r\n");
 8001448:	4854      	ldr	r0, [pc, #336]	@ (800159c <start_audio_recording+0x160>)
 800144a:	f7ff fe6b 	bl	8001124 <my_printf>

    if (f_open(&file, latest_audio_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 800144e:	220a      	movs	r2, #10
 8001450:	4953      	ldr	r1, [pc, #332]	@ (80015a0 <start_audio_recording+0x164>)
 8001452:	4854      	ldr	r0, [pc, #336]	@ (80015a4 <start_audio_recording+0x168>)
 8001454:	f01a fff0 	bl	801c438 <f_open>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8095 	bne.w	800158a <start_audio_recording+0x14e>
        my_printf("File created successfully\r\n");
 8001460:	4851      	ldr	r0, [pc, #324]	@ (80015a8 <start_audio_recording+0x16c>)
 8001462:	f7ff fe5f 	bl	8001124 <my_printf>

        // Write placeholder WAV header
        write_wav_header(&file, 0);
 8001466:	2100      	movs	r1, #0
 8001468:	484e      	ldr	r0, [pc, #312]	@ (80015a4 <start_audio_recording+0x168>)
 800146a:	f7ff ff4f 	bl	800130c <write_wav_header>

        if (f_open(&file_mfcc, latest_mfcc_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800146e:	220a      	movs	r2, #10
 8001470:	494e      	ldr	r1, [pc, #312]	@ (80015ac <start_audio_recording+0x170>)
 8001472:	484f      	ldr	r0, [pc, #316]	@ (80015b0 <start_audio_recording+0x174>)
 8001474:	f01a ffe0 	bl	801c438 <f_open>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <start_audio_recording+0x58>
        {
        	my_printf("start write mfcc failed, filename: %s, error: %d\r\n", latest_mfcc_filename, fresult);
 800147e:	4b4d      	ldr	r3, [pc, #308]	@ (80015b4 <start_audio_recording+0x178>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4949      	ldr	r1, [pc, #292]	@ (80015ac <start_audio_recording+0x170>)
 8001486:	484c      	ldr	r0, [pc, #304]	@ (80015b8 <start_audio_recording+0x17c>)
 8001488:	f7ff fe4c 	bl	8001124 <my_printf>
        	f_close(&file_mfcc);
 800148c:	4848      	ldr	r0, [pc, #288]	@ (80015b0 <start_audio_recording+0x174>)
 800148e:	f01b fb80 	bl	801cb92 <f_close>
 8001492:	e07d      	b.n	8001590 <start_audio_recording+0x154>
        	return;
        }

        // Start I2S DMA
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)i2s_data, BUFFER_SIZE);
 8001494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001498:	4948      	ldr	r1, [pc, #288]	@ (80015bc <start_audio_recording+0x180>)
 800149a:	4849      	ldr	r0, [pc, #292]	@ (80015c0 <start_audio_recording+0x184>)
 800149c:	f006 f9d8 	bl	8007850 <HAL_I2S_Receive_DMA>

        uint32_t total_samples = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

        while (total_samples < SAMPLING_RATE * PERIOD) {
 80014a4:	e053      	b.n	800154e <start_audio_recording+0x112>
            if (buffer_ready) {
 80014a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <start_audio_recording+0x15c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d04e      	beq.n	800154e <start_audio_recording+0x112>
                int16_t *start_ptr = (buffer_ready == 1) ? i2s_data : &i2s_data[BUFFER_SIZE / 2];
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <start_audio_recording+0x15c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <start_audio_recording+0x82>
 80014ba:	4b40      	ldr	r3, [pc, #256]	@ (80015bc <start_audio_recording+0x180>)
 80014bc:	e000      	b.n	80014c0 <start_audio_recording+0x84>
 80014be:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <start_audio_recording+0x188>)
 80014c0:	60bb      	str	r3, [r7, #8]

                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	e013      	b.n	80014f0 <start_audio_recording+0xb4>
                {
                	left_pcm_buffer[i / 2] = start_ptr[i] * GAIN;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4413      	add	r3, r2
 80014dc:	b29a      	uxth	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b211      	sxth	r1, r2
 80014e4:	4a38      	ldr	r2, [pc, #224]	@ (80015c8 <start_audio_recording+0x18c>)
 80014e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3302      	adds	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014f6:	d3e7      	bcc.n	80014c8 <start_audio_recording+0x8c>
                }

                // Write only left channel (even indices)

                f_write(&file, left_pcm_buffer, (BUFFER_SIZE / 4) * sizeof(int16_t), &bytes_written);
 80014f8:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <start_audio_recording+0x190>)
 80014fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014fe:	4932      	ldr	r1, [pc, #200]	@ (80015c8 <start_audio_recording+0x18c>)
 8001500:	4828      	ldr	r0, [pc, #160]	@ (80015a4 <start_audio_recording+0x168>)
 8001502:	f01b f953 	bl	801c7ac <f_write>

                total_samples += (BUFFER_SIZE / 4); // Since we write only half the samples
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800150c:	617b      	str	r3, [r7, #20]

                arm_copy_q15((q15_t*)left_pcm_buffer, q15_buffer, BUFFER_SIZE / 4);
 800150e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001512:	492f      	ldr	r1, [pc, #188]	@ (80015d0 <start_audio_recording+0x194>)
 8001514:	482c      	ldr	r0, [pc, #176]	@ (80015c8 <start_audio_recording+0x18c>)
 8001516:	f011 f981 	bl	801281c <arm_copy_q15>

                for (uint8_t i = 0; i < 4; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e010      	b.n	8001542 <start_audio_recording+0x106>
                {
                	convert_mfcc(&left_pcm_buffer[i * 512]);
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4a28      	ldr	r2, [pc, #160]	@ (80015c8 <start_audio_recording+0x18c>)
 8001528:	4413      	add	r3, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fdda 	bl	80010e4 <convert_mfcc>
                	f_write(&file_mfcc, mfcc_output, 13 * sizeof(q15_t), &bytes_written_mfcc);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	221a      	movs	r2, #26
 8001534:	4927      	ldr	r1, [pc, #156]	@ (80015d4 <start_audio_recording+0x198>)
 8001536:	481e      	ldr	r0, [pc, #120]	@ (80015b0 <start_audio_recording+0x174>)
 8001538:	f01b f938 	bl	801c7ac <f_write>
                for (uint8_t i = 0; i < 4; i++)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	3301      	adds	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d9eb      	bls.n	8001520 <start_audio_recording+0xe4>
                	// fixme unknown error, why after 13 is empty, so lets record until 13
                }

                buffer_ready = 0;
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <start_audio_recording+0x15c>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
        while (total_samples < SAMPLING_RATE * PERIOD) {
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001554:	d3a7      	bcc.n	80014a6 <start_audio_recording+0x6a>
            }
        }

        // Stop DMA
        HAL_I2S_DMAStop(&hi2s1);
 8001556:	481a      	ldr	r0, [pc, #104]	@ (80015c0 <start_audio_recording+0x184>)
 8001558:	f006 fa1c 	bl	8007994 <HAL_I2S_DMAStop>

        // Update WAV header with actual data size
        f_lseek(&file, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <start_audio_recording+0x168>)
 8001560:	f01b fb41 	bl	801cbe6 <f_lseek>
        write_wav_header(&file, total_samples * sizeof(int16_t));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4619      	mov	r1, r3
 800156a:	480e      	ldr	r0, [pc, #56]	@ (80015a4 <start_audio_recording+0x168>)
 800156c:	f7ff fece 	bl	800130c <write_wav_header>

        my_printf("recording stopped!\r\n");
 8001570:	4819      	ldr	r0, [pc, #100]	@ (80015d8 <start_audio_recording+0x19c>)
 8001572:	f7ff fdd7 	bl	8001124 <my_printf>

        // Close file
        f_close(&file);
 8001576:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <start_audio_recording+0x168>)
 8001578:	f01b fb0b 	bl	801cb92 <f_close>
        f_close(&file_mfcc);
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <start_audio_recording+0x174>)
 800157e:	f01b fb08 	bl	801cb92 <f_close>

        my_printf("Recording complete\r\n");
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <start_audio_recording+0x1a0>)
 8001584:	f7ff fdce 	bl	8001124 <my_printf>
 8001588:	e002      	b.n	8001590 <start_audio_recording+0x154>
    } else {
        my_printf("File open failed\r\n");
 800158a:	4815      	ldr	r0, [pc, #84]	@ (80015e0 <start_audio_recording+0x1a4>)
 800158c:	f7ff fdca 	bl	8001124 <my_printf>
    }
}
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	24005e28 	.word	0x24005e28
 800159c:	0801ea0c 	.word	0x0801ea0c
 80015a0:	24001bb4 	.word	0x24001bb4
 80015a4:	24001bf4 	.word	0x24001bf4
 80015a8:	0801ea2c 	.word	0x0801ea2c
 80015ac:	24001bd4 	.word	0x24001bd4
 80015b0:	24007e30 	.word	0x24007e30
 80015b4:	24001bb0 	.word	0x24001bb0
 80015b8:	0801ea48 	.word	0x0801ea48
 80015bc:	24001e28 	.word	0x24001e28
 80015c0:	240000ec 	.word	0x240000ec
 80015c4:	24003e28 	.word	0x24003e28
 80015c8:	24005e30 	.word	0x24005e30
 80015cc:	24005e2c 	.word	0x24005e2c
 80015d0:	24006e30 	.word	0x24006e30
 80015d4:	2400094c 	.word	0x2400094c
 80015d8:	0801ea7c 	.word	0x0801ea7c
 80015dc:	0801ea94 	.word	0x0801ea94
 80015e0:	0801eaac 	.word	0x0801eaac

080015e4 <record_and_convert>:

int record_and_convert()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	int num = get_next_audio_filename();
 80015ea:	f7ff fdff 	bl	80011ec <get_next_audio_filename>
 80015ee:	6078      	str	r0, [r7, #4]
	start_audio_recording();
 80015f0:	f7ff ff24 	bl	800143c <start_audio_recording>
	return num;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <servo360_init>:
#include "stm32h7xx_hal.h"
#include <stdint.h>

extern TIM_HandleTypeDef htim2;

void servo360_init(void) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
    for (int i = 100; i < 200; i++) {
 8001604:	2364      	movs	r3, #100	@ 0x64
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	e00a      	b.n	8001620 <servo360_init+0x22>
        set_servo_speed(i);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f80e 	bl	8001630 <set_servo_speed>
        HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f002 fb01 	bl	8003c1c <HAL_Delay>
    for (int i = 100; i < 200; i++) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2bc7      	cmp	r3, #199	@ 0xc7
 8001624:	ddf1      	ble.n	800160a <servo360_init+0xc>
    }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <set_servo_speed>:
/**
* for 360 degree servo
* pwm_value=150, stop
* pwm_value < 150 anticlockwise, > 150 clockwise
 */
void set_servo_speed(uint16_t pwm_value) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value - 5); // Small pre-step
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	1f5a      	subs	r2, r3, #5
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <set_servo_speed+0x2c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(20); // Let the servo register a small change
 8001644:	2014      	movs	r0, #20
 8001646:	f002 fae9 	bl	8003c1c <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value); // Set final speed
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <set_servo_speed+0x2c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	240003e4 	.word	0x240003e4

08001660 <st7920_writeCmd>:
#include "font.h"

extern SPI_HandleTypeDef hspi4;

void st7920_writeCmd(uint8_t cmd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2108      	movs	r1, #8
 800166e:	480f      	ldr	r0, [pc, #60]	@ (80016ac <st7920_writeCmd+0x4c>)
 8001670:	f005 f9a2 	bl	80069b8 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xF8;
 8001674:	23f8      	movs	r3, #248	@ 0xf8
 8001676:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (cmd & 0xF0);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f023 030f 	bic.w	r3, r3, #15
 800167e:	b2db      	uxtb	r3, r3
 8001680:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((cmd << 4) & 0xF0);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	b2db      	uxtb	r3, r3
 8001688:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 800168a:	f107 010c 	add.w	r1, r7, #12
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2203      	movs	r2, #3
 8001694:	4806      	ldr	r0, [pc, #24]	@ (80016b0 <st7920_writeCmd+0x50>)
 8001696:	f00b fbc7 	bl	800ce28 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2108      	movs	r1, #8
 800169e:	4803      	ldr	r0, [pc, #12]	@ (80016ac <st7920_writeCmd+0x4c>)
 80016a0:	f005 f98a 	bl	80069b8 <HAL_GPIO_WritePin>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	58021000 	.word	0x58021000
 80016b0:	2400035c 	.word	0x2400035c

080016b4 <st7920_writeData>:

void st7920_writeData(uint8_t data)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2108      	movs	r1, #8
 80016c2:	480f      	ldr	r0, [pc, #60]	@ (8001700 <st7920_writeData+0x4c>)
 80016c4:	f005 f978 	bl	80069b8 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xFA;
 80016c8:	23fa      	movs	r3, #250	@ 0xfa
 80016ca:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (data & 0xF0);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f023 030f 	bic.w	r3, r3, #15
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((data << 4) & 0xF0);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 80016de:	f107 010c 	add.w	r1, r7, #12
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	2203      	movs	r2, #3
 80016e8:	4806      	ldr	r0, [pc, #24]	@ (8001704 <st7920_writeData+0x50>)
 80016ea:	f00b fb9d 	bl	800ce28 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2108      	movs	r1, #8
 80016f2:	4803      	ldr	r0, [pc, #12]	@ (8001700 <st7920_writeData+0x4c>)
 80016f4:	f005 f960 	bl	80069b8 <HAL_GPIO_WritePin>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58021000 	.word	0x58021000
 8001704:	2400035c 	.word	0x2400035c

08001708 <st7920_gfx>:

void st7920_gfx()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	st7920_writeCmd(0x30);  // 8 bit mode
 800170c:	2030      	movs	r0, #48	@ 0x30
 800170e:	f7ff ffa7 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f002 fa82 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x34);  // switch to Extended instructions
 8001718:	2034      	movs	r0, #52	@ 0x34
 800171a:	f7ff ffa1 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f002 fa7c 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x36);  // enable graphics
 8001724:	2036      	movs	r0, #54	@ 0x36
 8001726:	f7ff ff9b 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f002 fa76 	bl	8003c1c <HAL_Delay>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <st7920_init>:

void st7920_init()
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2110      	movs	r1, #16
 800173c:	481d      	ldr	r0, [pc, #116]	@ (80017b4 <st7920_init+0x80>)
 800173e:	f005 f93b 	bl	80069b8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001742:	200a      	movs	r0, #10
 8001744:	f002 fa6a 	bl	8003c1c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2110      	movs	r1, #16
 800174c:	4819      	ldr	r0, [pc, #100]	@ (80017b4 <st7920_init+0x80>)
 800174e:	f005 f933 	bl	80069b8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001752:	2032      	movs	r0, #50	@ 0x32
 8001754:	f002 fa62 	bl	8003c1c <HAL_Delay>

	st7920_writeCmd(0x30);
 8001758:	2030      	movs	r0, #48	@ 0x30
 800175a:	f7ff ff81 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f002 fa5c 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x30);
 8001764:	2030      	movs	r0, #48	@ 0x30
 8001766:	f7ff ff7b 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f002 fa56 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x08);
 8001770:	2008      	movs	r0, #8
 8001772:	f7ff ff75 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f002 fa50 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x01);
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff ff6f 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f002 fa4a 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x06);
 8001788:	2006      	movs	r0, #6
 800178a:	f7ff ff69 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f002 fa44 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x0C);
 8001794:	200c      	movs	r0, #12
 8001796:	f7ff ff63 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f002 fa3e 	bl	8003c1c <HAL_Delay>
	st7920_writeCmd(0x02);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f7ff ff5d 	bl	8001660 <st7920_writeCmd>
	HAL_Delay(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f002 fa38 	bl	8003c1c <HAL_Delay>
	st7920_gfx();
 80017ac:	f7ff ffac 	bl	8001708 <st7920_gfx>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	58021000 	.word	0x58021000

080017b8 <st7920_drawPixel>:

uint8_t framebuffer[64][16];

void st7920_drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t color)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	460b      	mov	r3, r1
 80017c4:	71bb      	strb	r3, [r7, #6]
 80017c6:	4613      	mov	r3, r2
 80017c8:	717b      	strb	r3, [r7, #5]
	if(color > 1) return;
 80017ca:	797b      	ldrb	r3, [r7, #5]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d840      	bhi.n	8001852 <st7920_drawPixel+0x9a>
	uint8_t bit_position = 7 - (pos_x % 8);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	73fb      	strb	r3, [r7, #15]
	if (color)
 80017dc:	797b      	ldrb	r3, [r7, #5]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01a      	beq.n	8001818 <st7920_drawPixel+0x60>
	{
		framebuffer[pos_y][pos_x /8] |= (1 << bit_position);
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	08d2      	lsrs	r2, r2, #3
 80017e8:	b2d0      	uxtb	r0, r2
 80017ea:	4601      	mov	r1, r0
 80017ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <st7920_drawPixel+0xa8>)
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b25a      	sxtb	r2, r3
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	b25b      	sxtb	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b25a      	sxtb	r2, r3
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	b2d1      	uxtb	r1, r2
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <st7920_drawPixel+0xa8>)
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	4403      	add	r3, r0
 8001812:	460a      	mov	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	e01d      	b.n	8001854 <st7920_drawPixel+0x9c>
	} else {
		framebuffer[pos_y][pos_x /8] &= ~(1 << bit_position);
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	08d2      	lsrs	r2, r2, #3
 800181e:	b2d0      	uxtb	r0, r2
 8001820:	4601      	mov	r1, r0
 8001822:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <st7920_drawPixel+0xa8>)
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25a      	sxtb	r2, r3
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	b25b      	sxtb	r3, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	b25b      	sxtb	r3, r3
 800183c:	4013      	ands	r3, r2
 800183e:	b25a      	sxtb	r2, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	b2d1      	uxtb	r1, r2
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <st7920_drawPixel+0xa8>)
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	4403      	add	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e000      	b.n	8001854 <st7920_drawPixel+0x9c>
	if(color > 1) return;
 8001852:	bf00      	nop
	}
}
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	24008060 	.word	0x24008060

08001864 <st7920_sendBuffer>:

void st7920_sendBuffer()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 64; y++)
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	e044      	b.n	80018fa <st7920_sendBuffer+0x96>
	{
		if (y < 32)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b1f      	cmp	r3, #31
 8001874:	d81d      	bhi.n	80018b2 <st7920_sendBuffer+0x4e>
		{
			st7920_writeCmd(0x80 | y);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff feee 	bl	8001660 <st7920_writeCmd>
			st7920_writeCmd(0x80);
 8001884:	2080      	movs	r0, #128	@ 0x80
 8001886:	f7ff feeb 	bl	8001660 <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 800188a:	2300      	movs	r3, #0
 800188c:	71bb      	strb	r3, [r7, #6]
 800188e:	e00c      	b.n	80018aa <st7920_sendBuffer+0x46>
			{
				st7920_writeData(framebuffer[y][j]);
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	491d      	ldr	r1, [pc, #116]	@ (800190c <st7920_sendBuffer+0xa8>)
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	440a      	add	r2, r1
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff08 	bl	80016b4 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	3301      	adds	r3, #1
 80018a8:	71bb      	strb	r3, [r7, #6]
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d9ef      	bls.n	8001890 <st7920_sendBuffer+0x2c>
 80018b0:	e020      	b.n	80018f4 <st7920_sendBuffer+0x90>
			}
		} else {
			st7920_writeCmd(0x80 | (y-32));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	3b20      	subs	r3, #32
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fecc 	bl	8001660 <st7920_writeCmd>
			st7920_writeCmd(0x88);
 80018c8:	2088      	movs	r0, #136	@ 0x88
 80018ca:	f7ff fec9 	bl	8001660 <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	717b      	strb	r3, [r7, #5]
 80018d2:	e00c      	b.n	80018ee <st7920_sendBuffer+0x8a>
			{
				st7920_writeData(framebuffer[y][j]);
 80018d4:	79fa      	ldrb	r2, [r7, #7]
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	490c      	ldr	r1, [pc, #48]	@ (800190c <st7920_sendBuffer+0xa8>)
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	440a      	add	r2, r1
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fee6 	bl	80016b4 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 80018e8:	797b      	ldrb	r3, [r7, #5]
 80018ea:	3301      	adds	r3, #1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d9ef      	bls.n	80018d4 <st7920_sendBuffer+0x70>
	for (uint8_t y = 0; y < 64; y++)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3301      	adds	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80018fe:	d9b7      	bls.n	8001870 <st7920_sendBuffer+0xc>
			}
		}
	}
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	24008060 	.word	0x24008060

08001910 <st7920_drawChar>:

// more features

void st7920_drawChar(uint8_t x, uint8_t y, char c) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	460b      	mov	r3, r1
 800191c:	71bb      	strb	r3, [r7, #6]
 800191e:	4613      	mov	r3, r2
 8001920:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) return;
 8001922:	797b      	ldrb	r3, [r7, #5]
 8001924:	2b1f      	cmp	r3, #31
 8001926:	d945      	bls.n	80019b4 <st7920_drawChar+0xa4>
 8001928:	797b      	ldrb	r3, [r7, #5]
 800192a:	2b7e      	cmp	r3, #126	@ 0x7e
 800192c:	d842      	bhi.n	80019b4 <st7920_drawChar+0xa4>
    uint8_t charIndex = (c - 32);
 800192e:	797b      	ldrb	r3, [r7, #5]
 8001930:	3b20      	subs	r3, #32
 8001932:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 5; row++)
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e038      	b.n	80019ac <st7920_drawChar+0x9c>
    {
        for (uint8_t col = 0; col < 7; col++)
 800193a:	2300      	movs	r3, #0
 800193c:	73bb      	strb	r3, [r7, #14]
 800193e:	e02f      	b.n	80019a0 <st7920_drawChar+0x90>
        {
        	uint8_t fontByte = fontdata[charIndex][col];
 8001940:	7b7a      	ldrb	r2, [r7, #13]
 8001942:	7bb9      	ldrb	r1, [r7, #14]
 8001944:	481d      	ldr	r0, [pc, #116]	@ (80019bc <st7920_drawChar+0xac>)
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	4403      	add	r3, r0
 800194e:	440b      	add	r3, r1
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	733b      	strb	r3, [r7, #12]
        	if (fontByte & (1 << (4 - row)))
 8001954:	7b3a      	ldrb	r2, [r7, #12]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f1c3 0304 	rsb	r3, r3, #4
 800195c:	fa42 f303 	asr.w	r3, r2, r3
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <st7920_drawChar+0x72>
            {
                st7920_drawPixel(x + row, y + col, 1);
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4413      	add	r3, r2
 800196e:	b2d8      	uxtb	r0, r3
 8001970:	79ba      	ldrb	r2, [r7, #6]
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	4413      	add	r3, r2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2201      	movs	r2, #1
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff ff1c 	bl	80017b8 <st7920_drawPixel>
 8001980:	e00b      	b.n	800199a <st7920_drawChar+0x8a>
            } else {
            	st7920_drawPixel(x + row, y + col, 0);
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	4413      	add	r3, r2
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	79ba      	ldrb	r2, [r7, #6]
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	4413      	add	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff ff0f 	bl	80017b8 <st7920_drawPixel>
        for (uint8_t col = 0; col < 7; col++)
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	3301      	adds	r3, #1
 800199e:	73bb      	strb	r3, [r7, #14]
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d9cc      	bls.n	8001940 <st7920_drawChar+0x30>
    for (uint8_t row = 0; row < 5; row++)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3301      	adds	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d9c3      	bls.n	800193a <st7920_drawChar+0x2a>
 80019b2:	e000      	b.n	80019b6 <st7920_drawChar+0xa6>
	if (c < 32 || c > 126) return;
 80019b4:	bf00      	nop
            }
        }
    }
}
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0801f9bc 	.word	0x0801f9bc

080019c0 <st7920_print>:

void st7920_print(uint8_t x, uint8_t y, const char* str)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	603a      	str	r2, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	460b      	mov	r3, r1
 80019ce:	71bb      	strb	r3, [r7, #6]
	while(*str)
 80019d0:	e013      	b.n	80019fa <st7920_print+0x3a>
	{
		st7920_drawChar(x, y, *str++);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	603a      	str	r2, [r7, #0]
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	79b9      	ldrb	r1, [r7, #6]
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff96 	bl	8001910 <st7920_drawChar>
		x+=6;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3306      	adds	r3, #6
 80019e8:	71fb      	strb	r3, [r7, #7]
		if(x > 122)
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80019ee:	d904      	bls.n	80019fa <st7920_print+0x3a>
		{
			y+=8;
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	3308      	adds	r3, #8
 80019f4:	71bb      	strb	r3, [r7, #6]
			x=1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
	while(*str)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e7      	bne.n	80019d2 <st7920_print+0x12>
		}
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <st7920_clear>:

void st7920_clear() {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	memset(framebuffer, 0x00, sizeof(framebuffer));
 8001a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a14:	2100      	movs	r1, #0
 8001a16:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <st7920_clear+0x14>)
 8001a18:	f01b ff46 	bl	801d8a8 <memset>
	//st7920_writeCmd(0x01);
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	24008060 	.word	0x24008060

08001a24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_MspInit+0x30>)
 8001a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a30:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <HAL_MspInit+0x30>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_MspInit+0x30>)
 8001a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	58024400 	.word	0x58024400

08001a58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0b8      	sub	sp, #224	@ 0xe0
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	22b8      	movs	r2, #184	@ 0xb8
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f01b ff15 	bl	801d8a8 <memset>
  if(hi2c->Instance==I2C1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a26      	ldr	r2, [pc, #152]	@ (8001b1c <HAL_I2C_MspInit+0xc4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d145      	bne.n	8001b14 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a88:	f04f 0208 	mov.w	r2, #8
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 f906 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001aaa:	f7ff faaf 	bl	800100c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <HAL_I2C_MspInit+0xc8>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b20 <HAL_I2C_MspInit+0xc8>)
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_I2C_MspInit+0xc8>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001acc:	23c0      	movs	r3, #192	@ 0xc0
 8001ace:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad2:	2312      	movs	r3, #18
 8001ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <HAL_I2C_MspInit+0xcc>)
 8001af2:	f004 fdb9 	bl	8006668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_I2C_MspInit+0xc8>)
 8001af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001afc:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_I2C_MspInit+0xc8>)
 8001afe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_I2C_MspInit+0xc8>)
 8001b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	37e0      	adds	r7, #224	@ 0xe0
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58020400 	.word	0x58020400

08001b28 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0b8      	sub	sp, #224	@ 0xe0
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	22b8      	movs	r2, #184	@ 0xb8
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f01b fead 	bl	801d8a8 <memset>
  if(hi2s->Instance==SPI1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a47      	ldr	r2, [pc, #284]	@ (8001c70 <HAL_I2S_MspInit+0x148>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	f040 8086 	bne.w	8001c66 <HAL_I2S_MspInit+0x13e>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b7a:	23c0      	movs	r3, #192	@ 0xc0
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4618      	mov	r0, r3
 8001b92:	f007 f88d 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001b9c:	f7ff fa36 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_I2S_MspInit+0x14c>)
 8001ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ba6:	4a33      	ldr	r2, [pc, #204]	@ (8001c74 <HAL_I2S_MspInit+0x14c>)
 8001ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <HAL_I2S_MspInit+0x14c>)
 8001bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_I2S_MspInit+0x14c>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c74 <HAL_I2S_MspInit+0x14c>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bce:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <HAL_I2S_MspInit+0x14c>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bdc:	2370      	movs	r3, #112	@ 0x70
 8001bde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001bfe:	4619      	mov	r1, r3
 8001c00:	481d      	ldr	r0, [pc, #116]	@ (8001c78 <HAL_I2S_MspInit+0x150>)
 8001c02:	f004 fd31 	bl	8006668 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_I2S_MspInit+0x158>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c0e:	2225      	movs	r2, #37	@ 0x25
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c24:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c2c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c34:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c4a:	480c      	ldr	r0, [pc, #48]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c4c:	f002 f91a 	bl	8003e84 <HAL_DMA_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001c56:	f7ff f9d9 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c5e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c60:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_I2S_MspInit+0x154>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	37e0      	adds	r7, #224	@ 0xe0
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40013000 	.word	0x40013000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020000 	.word	0x58020000
 8001c7c:	24000140 	.word	0x24000140
 8001c80:	40020010 	.word	0x40020010

08001c84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0ba      	sub	sp, #232	@ 0xe8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	22b8      	movs	r2, #184	@ 0xb8
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f01b fdff 	bl	801d8a8 <memset>
  if(huart->Instance==LPUART1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a4d      	ldr	r2, [pc, #308]	@ (8001de4 <HAL_UART_MspInit+0x160>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d147      	bne.n	8001d44 <HAL_UART_MspInit+0xc0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cb4:	f04f 0204 	mov.w	r2, #4
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f006 fff0 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cd6:	f7ff f999 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cda:	4b43      	ldr	r3, [pc, #268]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ce0:	4a41      	ldr	r2, [pc, #260]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	4a3a      	ldr	r2, [pc, #232]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d08:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001d30:	2303      	movs	r3, #3
 8001d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	482b      	ldr	r0, [pc, #172]	@ (8001dec <HAL_UART_MspInit+0x168>)
 8001d3e:	f004 fc93 	bl	8006668 <HAL_GPIO_Init>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8001d42:	e04b      	b.n	8001ddc <HAL_UART_MspInit+0x158>
  else if(huart->Instance==UART5)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <HAL_UART_MspInit+0x16c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d146      	bne.n	8001ddc <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d4e:	f04f 0202 	mov.w	r2, #2
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f006 ffa3 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001d70:	f7ff f94c 	bl	800100c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d98:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_UART_MspInit+0x164>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001db0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001db4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001dca:	230e      	movs	r3, #14
 8001dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <HAL_UART_MspInit+0x170>)
 8001dd8:	f004 fc46 	bl	8006668 <HAL_GPIO_Init>
}
 8001ddc:	bf00      	nop
 8001dde:	37e8      	adds	r7, #232	@ 0xe8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58000c00 	.word	0x58000c00
 8001de8:	58024400 	.word	0x58024400
 8001dec:	58020000 	.word	0x58020000
 8001df0:	40005000 	.word	0x40005000
 8001df4:	58020400 	.word	0x58020400

08001df8 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	22b8      	movs	r2, #184	@ 0xb8
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f01b fd45 	bl	801d8a8 <memset>
  if(hsd->Instance==SDMMC1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a38      	ldr	r2, [pc, #224]	@ (8001f04 <HAL_SD_MspInit+0x10c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d169      	bne.n	8001efc <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001e28:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 ff37 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e48:	f7ff f8e0 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e52:	4a2d      	ldr	r2, [pc, #180]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	4b27      	ldr	r3, [pc, #156]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_SD_MspInit+0x110>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ea6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <HAL_SD_MspInit+0x114>)
 8001ece:	f004 fbcb 	bl	8006668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eea:	230c      	movs	r3, #12
 8001eec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <HAL_SD_MspInit+0x118>)
 8001ef8:	f004 fbb6 	bl	8006668 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001efc:	bf00      	nop
 8001efe:	37e8      	adds	r7, #232	@ 0xe8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	52007000 	.word	0x52007000
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58020800 	.word	0x58020800
 8001f10:	58020c00 	.word	0x58020c00

08001f14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0b8      	sub	sp, #224	@ 0xe0
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	22b8      	movs	r2, #184	@ 0xb8
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f01b fcb7 	bl	801d8a8 <memset>
  if(hspi->Instance==SPI4)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a26      	ldr	r2, [pc, #152]	@ (8001fd8 <HAL_SPI_MspInit+0xc4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d144      	bne.n	8001fce <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f006 fea9 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f64:	f7ff f852 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_SPI_MspInit+0xc8>)
 8001f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <HAL_SPI_MspInit+0xc8>)
 8001f70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_SPI_MspInit+0xc8>)
 8001f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_SPI_MspInit+0xc8>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8c:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <HAL_SPI_MspInit+0xc8>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_SPI_MspInit+0xc8>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001fa4:	2364      	movs	r3, #100	@ 0x64
 8001fa6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <HAL_SPI_MspInit+0xcc>)
 8001fca:	f004 fb4d 	bl	8006668 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001fce:	bf00      	nop
 8001fd0:	37e0      	adds	r7, #224	@ 0xe0
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40013400 	.word	0x40013400
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	58021000 	.word	0x58021000

08001fe4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_TIM_Base_MspInit+0x3c>)
 8001ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ffc:	4a08      	ldr	r2, [pc, #32]	@ (8002020 <HAL_TIM_Base_MspInit+0x3c>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_TIM_Base_MspInit+0x3c>)
 8002008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	58024400 	.word	0x58024400

08002024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002044:	d11e      	bne.n	8002084 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_TIM_MspPostInit+0x68>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204c:	4a0f      	ldr	r2, [pc, #60]	@ (800208c <HAL_TIM_MspPostInit+0x68>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_TIM_MspPostInit+0x68>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002064:	2303      	movs	r3, #3
 8002066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002074:	2301      	movs	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4619      	mov	r1, r3
 800207e:	4804      	ldr	r0, [pc, #16]	@ (8002090 <HAL_TIM_MspPostInit+0x6c>)
 8002080:	f004 faf2 	bl	8006668 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	58024400 	.word	0x58024400
 8002090:	58020000 	.word	0x58020000

08002094 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0b2      	sub	sp, #200	@ 0xc8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	22b8      	movs	r2, #184	@ 0xb8
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f01b fbff 	bl	801d8a8 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002118 <HAL_PCD_MspInit+0x84>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d12c      	bne.n	800210e <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80020b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80020c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4618      	mov	r0, r3
 80020ce:	f006 fdef 	bl	8008cb0 <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80020d8:	f7fe ff98 	bl	800100c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80020dc:	f005 fe72 	bl	8007dc4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80020e0:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_PCD_MspInit+0x88>)
 80020e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020e6:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <HAL_PCD_MspInit+0x88>)
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_PCD_MspInit+0x88>)
 80020f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	204d      	movs	r0, #77	@ 0x4d
 8002104:	f001 fe89 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002108:	204d      	movs	r0, #77	@ 0x4d
 800210a:	f001 fea0 	bl	8003e4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800210e:	bf00      	nop
 8002110:	37c8      	adds	r7, #200	@ 0xc8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40040000 	.word	0x40040000
 800211c:	58024400 	.word	0x58024400

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <NMI_Handler+0x4>

08002128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <MemManage_Handler+0x4>

08002138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <UsageFault_Handler+0x4>

08002148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002176:	f001 fd31 	bl	8003bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}

0800217e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ir_sensor_Pin);
 8002182:	2008      	movs	r0, #8
 8002184:	f004 fc31 	bl	80069ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <DMA1_Stream0_IRQHandler+0x10>)
 8002192:	f002 ff57 	bl	8005044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	24000140 	.word	0x24000140

080021a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	tud_int_handler(0);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f017 fe13 	bl	8019dd0 <dcd_int_handler>
	return;
 80021aa:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e00a      	b.n	80021d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021c0:	f3af 8000 	nop.w
 80021c4:	4601      	mov	r1, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	60ba      	str	r2, [r7, #8]
 80021cc:	b2ca      	uxtb	r2, r1
 80021ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbf0      	blt.n	80021c0 <_read+0x12>
  }

  return len;
 80021de:	687b      	ldr	r3, [r7, #4]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e009      	b.n	800220e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	60ba      	str	r2, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	dbf1      	blt.n	80021fa <_write+0x12>
  }
  return len;
 8002216:	687b      	ldr	r3, [r7, #4]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_close>:

int _close(int file)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002248:	605a      	str	r2, [r3, #4]
  return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_isatty>:

int _isatty(int file)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	@ (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f01b fb5a 	bl	801d970 <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	24050000 	.word	0x24050000
 80022e8:	00004000 	.word	0x00004000
 80022ec:	24008460 	.word	0x24008460
 80022f0:	24008af8 	.word	0x24008af8

080022f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022f8:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <SystemInit+0x100>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	4a3d      	ldr	r2, [pc, #244]	@ (80023f4 <SystemInit+0x100>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002308:	4b3b      	ldr	r3, [pc, #236]	@ (80023f8 <SystemInit+0x104>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	2b06      	cmp	r3, #6
 8002312:	d807      	bhi.n	8002324 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002314:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <SystemInit+0x104>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 030f 	bic.w	r3, r3, #15
 800231c:	4a36      	ldr	r2, [pc, #216]	@ (80023f8 <SystemInit+0x104>)
 800231e:	f043 0307 	orr.w	r3, r3, #7
 8002322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <SystemInit+0x108>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a34      	ldr	r2, [pc, #208]	@ (80023fc <SystemInit+0x108>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002330:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <SystemInit+0x108>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002336:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <SystemInit+0x108>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4930      	ldr	r1, [pc, #192]	@ (80023fc <SystemInit+0x108>)
 800233c:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <SystemInit+0x10c>)
 800233e:	4013      	ands	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <SystemInit+0x104>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800234e:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <SystemInit+0x104>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 030f 	bic.w	r3, r3, #15
 8002356:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <SystemInit+0x104>)
 8002358:	f043 0307 	orr.w	r3, r3, #7
 800235c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800235e:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <SystemInit+0x108>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002364:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <SystemInit+0x108>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800236a:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <SystemInit+0x108>)
 800236c:	2200      	movs	r2, #0
 800236e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002370:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <SystemInit+0x108>)
 8002372:	4a24      	ldr	r2, [pc, #144]	@ (8002404 <SystemInit+0x110>)
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002376:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <SystemInit+0x108>)
 8002378:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <SystemInit+0x114>)
 800237a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <SystemInit+0x108>)
 800237e:	4a23      	ldr	r2, [pc, #140]	@ (800240c <SystemInit+0x118>)
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002382:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <SystemInit+0x108>)
 8002384:	2200      	movs	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002388:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <SystemInit+0x108>)
 800238a:	4a20      	ldr	r2, [pc, #128]	@ (800240c <SystemInit+0x118>)
 800238c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <SystemInit+0x108>)
 8002390:	2200      	movs	r2, #0
 8002392:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <SystemInit+0x108>)
 8002396:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <SystemInit+0x118>)
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <SystemInit+0x108>)
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023a0:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <SystemInit+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a15      	ldr	r2, [pc, #84]	@ (80023fc <SystemInit+0x108>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <SystemInit+0x108>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <SystemInit+0x108>)
 80023b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d113      	bne.n	80023e8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <SystemInit+0x108>)
 80023c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023c6:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <SystemInit+0x108>)
 80023c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <SystemInit+0x11c>)
 80023d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <SystemInit+0x108>)
 80023da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023de:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <SystemInit+0x108>)
 80023e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00
 80023f8:	52002000 	.word	0x52002000
 80023fc:	58024400 	.word	0x58024400
 8002400:	eaf6ed7f 	.word	0xeaf6ed7f
 8002404:	02020200 	.word	0x02020200
 8002408:	01ff0000 	.word	0x01ff0000
 800240c:	01010280 	.word	0x01010280
 8002410:	52004000 	.word	0x52004000

08002414 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <ExitRun0Mode+0x2c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <ExitRun0Mode+0x2c>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002424:	bf00      	nop
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <ExitRun0Mode+0x2c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f9      	beq.n	8002426 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	58024800 	.word	0x58024800

08002444 <my_printf>:
{
 8002444:	b40f      	push	{r0, r1, r2, r3}
 8002446:	b580      	push	{r7, lr}
 8002448:	b0c2      	sub	sp, #264	@ 0x108
 800244a:	af00      	add	r7, sp, #0
    va_start(args, format);
 800244c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002458:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800245a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800245e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002462:	f107 0008 	add.w	r0, r7, #8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800246c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002470:	f01b f978 	bl	801d764 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd ff49 	bl	8000310 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29a      	uxth	r2, r3
 8002482:	f107 0108 	add.w	r1, r7, #8
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <my_printf+0x5c>)
 800248c:	f00c f8b6 	bl	800e5fc <HAL_UART_Transmit>
}
 8002490:	bf00      	nop
 8002492:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002496:	46bd      	mov	sp, r7
 8002498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800249c:	b004      	add	sp, #16
 800249e:	4770      	bx	lr
 80024a0:	240001b8 	.word	0x240001b8

080024a4 <i2c_set_slave_address>:

extern I2C_HandleTypeDef hi2c1;

uint8_t i2c_addr = 0;

void i2c_set_slave_address(uint8_t addr) {
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
    i2c_addr = addr;
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <i2c_set_slave_address+0x1c>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	7013      	strb	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	24008465 	.word	0x24008465

080024c4 <i2c_read_addr8_data8>:

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <i2c_read_addr8_data8+0x70>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	b299      	uxth	r1, r3
 80024d8:	1dfa      	adds	r2, r7, #7
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2301      	movs	r3, #1
 80024e2:	4815      	ldr	r0, [pc, #84]	@ (8002538 <i2c_read_addr8_data8+0x74>)
 80024e4:	f004 fb38 	bl	8006b58 <HAL_I2C_Master_Transmit>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <i2c_read_addr8_data8+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4812      	ldr	r0, [pc, #72]	@ (800253c <i2c_read_addr8_data8+0x78>)
 80024f4:	f7ff ffa6 	bl	8002444 <my_printf>
        return false;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e016      	b.n	800252a <i2c_read_addr8_data8+0x66>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80024fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <i2c_read_addr8_data8+0x70>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	b299      	uxth	r1, r3
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	480a      	ldr	r0, [pc, #40]	@ (8002538 <i2c_read_addr8_data8+0x74>)
 8002510:	f004 fc3a 	bl	8006d88 <HAL_I2C_Master_Receive>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <i2c_read_addr8_data8+0x64>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4619      	mov	r1, r3
 800251e:	4808      	ldr	r0, [pc, #32]	@ (8002540 <i2c_read_addr8_data8+0x7c>)
 8002520:	f7ff ff90 	bl	8002444 <my_printf>
        return false;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <i2c_read_addr8_data8+0x66>
    }
    return true;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	24008465 	.word	0x24008465
 8002538:	24000098 	.word	0x24000098
 800253c:	0801eac0 	.word	0x0801eac0
 8002540:	0801eb04 	.word	0x0801eb04

08002544 <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	4603      	mov	r3, r0
 800254c:	460a      	mov	r2, r1
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	4613      	mov	r3, r2
 8002552:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	733b      	strb	r3, [r7, #12]
 8002558:	79bb      	ldrb	r3, [r7, #6]
 800255a:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <i2c_write_addr8_data8+0x54>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	b299      	uxth	r1, r3
 8002564:	f107 020c 	add.w	r2, r7, #12
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2302      	movs	r3, #2
 8002570:	480a      	ldr	r0, [pc, #40]	@ (800259c <i2c_write_addr8_data8+0x58>)
 8002572:	f004 faf1 	bl	8006b58 <HAL_I2C_Master_Transmit>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <i2c_write_addr8_data8+0x4a>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, i2c_addr);
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4a06      	ldr	r2, [pc, #24]	@ (8002598 <i2c_write_addr8_data8+0x54>)
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <i2c_write_addr8_data8+0x5c>)
 8002586:	f7ff ff5d 	bl	8002444 <my_printf>
        return false;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <i2c_write_addr8_data8+0x4c>
    }
    return true;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	24008465 	.word	0x24008465
 800259c:	24000098 	.word	0x24000098
 80025a0:	0801ebd4 	.word	0x0801ebd4

080025a4 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <i2c_read_addr8_data32+0x8c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	b299      	uxth	r1, r3
 80025b8:	1dfa      	adds	r2, r7, #7
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	481c      	ldr	r0, [pc, #112]	@ (8002634 <i2c_read_addr8_data32+0x90>)
 80025c4:	f004 fac8 	bl	8006b58 <HAL_I2C_Master_Transmit>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <i2c_read_addr8_data32+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	4619      	mov	r1, r3
 80025d2:	4819      	ldr	r0, [pc, #100]	@ (8002638 <i2c_read_addr8_data32+0x94>)
 80025d4:	f7ff ff36 	bl	8002444 <my_printf>
        return false;
 80025d8:	2300      	movs	r3, #0
 80025da:	e024      	b.n	8002626 <i2c_read_addr8_data32+0x82>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <i2c_read_addr8_data32+0x8c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	b299      	uxth	r1, r3
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2304      	movs	r3, #4
 80025f0:	4810      	ldr	r0, [pc, #64]	@ (8002634 <i2c_read_addr8_data32+0x90>)
 80025f2:	f004 fbc9 	bl	8006d88 <HAL_I2C_Master_Receive>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <i2c_read_addr8_data32+0x66>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4619      	mov	r1, r3
 8002600:	480e      	ldr	r0, [pc, #56]	@ (800263c <i2c_read_addr8_data32+0x98>)
 8002602:	f7ff ff1f 	bl	8002444 <my_printf>
        return false;
 8002606:	2300      	movs	r3, #0
 8002608:	e00d      	b.n	8002626 <i2c_read_addr8_data32+0x82>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800260a:	7b3b      	ldrb	r3, [r7, #12]
 800260c:	061a      	lsls	r2, r3, #24
 800260e:	7b7b      	ldrb	r3, [r7, #13]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	7bbb      	ldrb	r3, [r7, #14]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	4313      	orrs	r3, r2
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	4313      	orrs	r3, r2
 800261e:	461a      	mov	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	601a      	str	r2, [r3, #0]
    return true;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	24008465 	.word	0x24008465
 8002634:	24000098 	.word	0x24000098
 8002638:	0801ec28 	.word	0x0801ec28
 800263c:	0801ec70 	.word	0x0801ec70

08002640 <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 8002640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002644:	b087      	sub	sp, #28
 8002646:	af02      	add	r7, sp, #8
 8002648:	4603      	mov	r3, r0
 800264a:	6039      	str	r1, [r7, #0]
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	4613      	mov	r3, r2
 8002650:	71bb      	strb	r3, [r7, #6]
 8002652:	466b      	mov	r3, sp
 8002654:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 8002656:	79bb      	ldrb	r3, [r7, #6]
 8002658:	1c59      	adds	r1, r3, #1
 800265a:	1e4b      	subs	r3, r1, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	460a      	mov	r2, r1
 8002660:	2300      	movs	r3, #0
 8002662:	4690      	mov	r8, r2
 8002664:	4699      	mov	r9, r3
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800267a:	460a      	mov	r2, r1
 800267c:	2300      	movs	r3, #0
 800267e:	4614      	mov	r4, r2
 8002680:	461d      	mov	r5, r3
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	00eb      	lsls	r3, r5, #3
 800268c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002690:	00e2      	lsls	r2, r4, #3
 8002692:	460b      	mov	r3, r1
 8002694:	3307      	adds	r3, #7
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	ebad 0d03 	sub.w	sp, sp, r3
 800269e:	ab02      	add	r3, sp, #8
 80026a0:	3300      	adds	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3301      	adds	r3, #1
 80026ae:	79ba      	ldrb	r2, [r7, #6]
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f01b f989 	bl	801d9ca <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <i2c_write_addr8_bytes+0xb8>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b299      	uxth	r1, r3
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	9200      	str	r2, [sp, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	480a      	ldr	r0, [pc, #40]	@ (80026fc <i2c_write_addr8_bytes+0xbc>)
 80026d2:	f004 fa41 	bl	8006b58 <HAL_I2C_Master_Transmit>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <i2c_write_addr8_bytes+0xaa>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	4619      	mov	r1, r3
 80026e0:	4807      	ldr	r0, [pc, #28]	@ (8002700 <i2c_write_addr8_bytes+0xc0>)
 80026e2:	f7ff feaf 	bl	8002444 <my_printf>
        return false;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <i2c_write_addr8_bytes+0xac>
    }
    return true;
 80026ea:	2301      	movs	r3, #1
 80026ec:	46b5      	mov	sp, r6
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026f8:	24008465 	.word	0x24008465
 80026fc:	24000098 	.word	0x24000098
 8002700:	0801ecb4 	.word	0x0801ecb4

08002704 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af02      	add	r7, sp, #8
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	4613      	mov	r3, r2
 8002712:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002714:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <i2c_read_addr8_bytes+0x74>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	b299      	uxth	r1, r3
 800271c:	1dfa      	adds	r2, r7, #7
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	4815      	ldr	r0, [pc, #84]	@ (800277c <i2c_read_addr8_bytes+0x78>)
 8002728:	f004 fa16 	bl	8006b58 <HAL_I2C_Master_Transmit>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <i2c_read_addr8_bytes+0x3c>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4619      	mov	r1, r3
 8002736:	4812      	ldr	r0, [pc, #72]	@ (8002780 <i2c_read_addr8_bytes+0x7c>)
 8002738:	f7ff fe84 	bl	8002444 <my_printf>
        return false;
 800273c:	2300      	movs	r3, #0
 800273e:	e017      	b.n	8002770 <i2c_read_addr8_bytes+0x6c>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <i2c_read_addr8_bytes+0x74>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	b299      	uxth	r1, r3
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	9200      	str	r2, [sp, #0]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4809      	ldr	r0, [pc, #36]	@ (800277c <i2c_read_addr8_bytes+0x78>)
 8002756:	f004 fb17 	bl	8006d88 <HAL_I2C_Master_Receive>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <i2c_read_addr8_bytes+0x6a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4619      	mov	r1, r3
 8002764:	4807      	ldr	r0, [pc, #28]	@ (8002784 <i2c_read_addr8_bytes+0x80>)
 8002766:	f7ff fe6d 	bl	8002444 <my_printf>
        return false;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <i2c_read_addr8_bytes+0x6c>
    }
    return true;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	24008465 	.word	0x24008465
 800277c:	24000098 	.word	0x24000098
 8002780:	0801ecf8 	.word	0x0801ecf8
 8002784:	0801ed3c 	.word	0x0801ed3c

08002788 <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 800278e:	4813      	ldr	r0, [pc, #76]	@ (80027dc <device_is_booted+0x54>)
 8002790:	f01a ff16 	bl	801d5c0 <puts>
    uint8_t device_id = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	4619      	mov	r1, r3
 800279c:	20c0      	movs	r0, #192	@ 0xc0
 800279e:	f7ff fe91 	bl	80024c4 <i2c_read_addr8_data8>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	4619      	mov	r1, r3
 80027b2:	480b      	ldr	r0, [pc, #44]	@ (80027e0 <device_is_booted+0x58>)
 80027b4:	f01a fe9c 	bl	801d4f0 <iprintf>
        return false;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e00a      	b.n	80027d2 <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4619      	mov	r1, r3
 80027c0:	4808      	ldr	r0, [pc, #32]	@ (80027e4 <device_is_booted+0x5c>)
 80027c2:	f01a fe95 	bl	801d4f0 <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2bee      	cmp	r3, #238	@ 0xee
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	0801ed80 	.word	0x0801ed80
 80027e0:	0801ed98 	.word	0x0801ed98
 80027e4:	0801edb0 	.word	0x0801edb0

080027e8 <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
    bool success = false;
 80027ee:	2300      	movs	r3, #0
 80027f0:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 80027f6:	1dbb      	adds	r3, r7, #6
 80027f8:	4619      	mov	r1, r3
 80027fa:	2089      	movs	r0, #137	@ 0x89
 80027fc:	f7ff fe62 	bl	80024c4 <i2c_read_addr8_data8>
 8002800:	4603      	mov	r3, r0
 8002802:	f083 0301 	eor.w	r3, r3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <data_init+0x28>
        return false;
 800280c:	2300      	movs	r3, #0
 800280e:	e073      	b.n	80028f8 <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 800281a:	79bb      	ldrb	r3, [r7, #6]
 800281c:	4619      	mov	r1, r3
 800281e:	2089      	movs	r0, #137	@ 0x89
 8002820:	f7ff fe90 	bl	8002544 <i2c_write_addr8_data8>
 8002824:	4603      	mov	r3, r0
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <data_init+0x4c>
        return false;
 8002830:	2300      	movs	r3, #0
 8002832:	e061      	b.n	80028f8 <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8002834:	2100      	movs	r1, #0
 8002836:	2088      	movs	r0, #136	@ 0x88
 8002838:	f7ff fe84 	bl	8002544 <i2c_write_addr8_data8>
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002840:	2101      	movs	r1, #1
 8002842:	2080      	movs	r0, #128	@ 0x80
 8002844:	f7ff fe7e 	bl	8002544 <i2c_write_addr8_data8>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800285a:	2101      	movs	r1, #1
 800285c:	20ff      	movs	r0, #255	@ 0xff
 800285e:	f7ff fe71 	bl	8002544 <i2c_write_addr8_data8>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002874:	2100      	movs	r1, #0
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff fe64 	bl	8002544 <i2c_write_addr8_data8>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 800288e:	491c      	ldr	r1, [pc, #112]	@ (8002900 <data_init+0x118>)
 8002890:	2091      	movs	r0, #145	@ 0x91
 8002892:	f7ff fe17 	bl	80024c4 <i2c_read_addr8_data8>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80028a8:	2101      	movs	r1, #1
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7ff fe4a 	bl	8002544 <i2c_write_addr8_data8>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80028c2:	2100      	movs	r1, #0
 80028c4:	20ff      	movs	r0, #255	@ 0xff
 80028c6:	f7ff fe3d 	bl	8002544 <i2c_write_addr8_data8>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 80028dc:	2100      	movs	r1, #0
 80028de:	2080      	movs	r0, #128	@ 0x80
 80028e0:	f7ff fe30 	bl	8002544 <i2c_write_addr8_data8>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	71fb      	strb	r3, [r7, #7]

    return success;
 80028f6:	79fb      	ldrb	r3, [r7, #7]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	24008464 	.word	0x24008464

08002904 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
    bool success = false;
 800290a:	2300      	movs	r3, #0
 800290c:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 8002912:	2100      	movs	r1, #0
 8002914:	2083      	movs	r0, #131	@ 0x83
 8002916:	f7ff fe15 	bl	8002544 <i2c_write_addr8_data8>
 800291a:	4603      	mov	r3, r0
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <read_strobe+0x26>
        return false;
 8002926:	2300      	movs	r3, #0
 8002928:	e021      	b.n	800296e <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	4619      	mov	r1, r3
 800292e:	2083      	movs	r0, #131	@ 0x83
 8002930:	f7ff fdc8 	bl	80024c4 <i2c_read_addr8_data8>
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <read_strobe+0x40>
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f2      	beq.n	800292a <read_strobe+0x26>
    if (!success) {
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f083 0301 	eor.w	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <read_strobe+0x50>
        return false;
 8002950:	2300      	movs	r3, #0
 8002952:	e00c      	b.n	800296e <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8002954:	2101      	movs	r1, #1
 8002956:	2083      	movs	r0, #131	@ 0x83
 8002958:	f7ff fdf4 	bl	8002544 <i2c_write_addr8_data8>
 800295c:	4603      	mov	r3, r0
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <read_strobe+0x68>
        return false;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <read_strobe+0x6a>
    }
    return true;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
    bool success = false;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 800298e:	2101      	movs	r1, #1
 8002990:	2080      	movs	r0, #128	@ 0x80
 8002992:	f7ff fdd7 	bl	8002544 <i2c_write_addr8_data8>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800299a:	2101      	movs	r1, #1
 800299c:	20ff      	movs	r0, #255	@ 0xff
 800299e:	f7ff fdd1 	bl	8002544 <i2c_write_addr8_data8>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 80029b4:	2100      	movs	r1, #0
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff fdc4 	bl	8002544 <i2c_write_addr8_data8>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 80029ce:	2106      	movs	r1, #6
 80029d0:	20ff      	movs	r0, #255	@ 0xff
 80029d2:	f7ff fdb7 	bl	8002544 <i2c_write_addr8_data8>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 80029e8:	f107 0316 	add.w	r3, r7, #22
 80029ec:	4619      	mov	r1, r3
 80029ee:	2083      	movs	r0, #131	@ 0x83
 80029f0:	f7ff fd68 	bl	80024c4 <i2c_read_addr8_data8>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 8002a06:	7dbb      	ldrb	r3, [r7, #22]
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2083      	movs	r0, #131	@ 0x83
 8002a12:	f7ff fd97 	bl	8002544 <i2c_write_addr8_data8>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 8002a28:	2107      	movs	r1, #7
 8002a2a:	20ff      	movs	r0, #255	@ 0xff
 8002a2c:	f7ff fd8a 	bl	8002544 <i2c_write_addr8_data8>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8002a42:	2101      	movs	r1, #1
 8002a44:	2081      	movs	r0, #129	@ 0x81
 8002a46:	f7ff fd7d 	bl	8002544 <i2c_write_addr8_data8>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2080      	movs	r0, #128	@ 0x80
 8002a60:	f7ff fd70 	bl	8002544 <i2c_write_addr8_data8>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <get_spad_info_from_nvm+0x110>
      return false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e0c1      	b.n	8002c0a <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 8002a86:	216b      	movs	r1, #107	@ 0x6b
 8002a88:	2094      	movs	r0, #148	@ 0x94
 8002a8a:	f7ff fd5b 	bl	8002544 <i2c_write_addr8_data8>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	f083 0301 	eor.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <get_spad_info_from_nvm+0x13a>
        return false;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e0ac      	b.n	8002c0a <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 8002ab0:	f7ff ff28 	bl	8002904 <read_strobe>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f083 0301 	eor.w	r3, r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <get_spad_info_from_nvm+0x14e>
        return false;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e0a2      	b.n	8002c0a <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	4619      	mov	r1, r3
 8002aca:	2090      	movs	r0, #144	@ 0x90
 8002acc:	f7ff fd6a 	bl	80025a4 <i2c_read_addr8_data32>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <get_spad_info_from_nvm+0x17c>
        return false;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e08b      	b.n	8002c0a <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	0bdb      	lsrs	r3, r3, #15
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 8002b12:	2100      	movs	r1, #0
 8002b14:	2081      	movs	r0, #129	@ 0x81
 8002b16:	f7ff fd15 	bl	8002544 <i2c_write_addr8_data8>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002b2c:	2106      	movs	r1, #6
 8002b2e:	20ff      	movs	r0, #255	@ 0xff
 8002b30:	f7ff fd08 	bl	8002544 <i2c_write_addr8_data8>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 8002b46:	f107 0316 	add.w	r3, r7, #22
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2083      	movs	r0, #131	@ 0x83
 8002b4e:	f7ff fcb9 	bl	80024c4 <i2c_read_addr8_data8>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8002b64:	7dbb      	ldrb	r3, [r7, #22]
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	2083      	movs	r0, #131	@ 0x83
 8002b70:	f7ff fce8 	bl	8002544 <i2c_write_addr8_data8>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 8002b86:	2101      	movs	r1, #1
 8002b88:	20ff      	movs	r0, #255	@ 0xff
 8002b8a:	f7ff fcdb 	bl	8002544 <i2c_write_addr8_data8>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7ff fcce 	bl	8002544 <i2c_write_addr8_data8>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002bba:	2100      	movs	r1, #0
 8002bbc:	20ff      	movs	r0, #255	@ 0xff
 8002bbe:	f7ff fcc1 	bl	8002544 <i2c_write_addr8_data8>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2080      	movs	r0, #128	@ 0x80
 8002bd8:	f7ff fcb4 	bl	8002544 <i2c_write_addr8_data8>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8002bee:	2206      	movs	r2, #6
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	20b0      	movs	r0, #176	@ 0xb0
 8002bf4:	f7ff fd86 	bl	8002704 <i2c_read_addr8_bytes>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <get_spad_info_from_nvm+0x292>
        return false;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <get_spad_info_from_nvm+0x294>
    }
    return success;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b08c      	sub	sp, #48	@ 0x30
 8002c16:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8002c3e:	f107 0208 	add.w	r2, r7, #8
 8002c42:	1db9      	adds	r1, r7, #6
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fe95 	bl	8002976 <get_spad_info_from_nvm>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f083 0301 	eor.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <set_spads_from_nvm+0x4a>
        return false;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e0c7      	b.n	8002dec <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c60:	e00b      	b.n	8002c7a <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 8002c62:	f107 0208 	add.w	r2, r7, #8
 8002c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	3301      	adds	r3, #1
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	ddf0      	ble.n	8002c62 <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002c80:	2101      	movs	r1, #1
 8002c82:	20ff      	movs	r0, #255	@ 0xff
 8002c84:	f7ff fc5e 	bl	8002544 <i2c_write_addr8_data8>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	204f      	movs	r0, #79	@ 0x4f
 8002c90:	f7ff fc58 	bl	8002544 <i2c_write_addr8_data8>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	7ffb      	ldrb	r3, [r7, #31]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002ca6:	212c      	movs	r1, #44	@ 0x2c
 8002ca8:	204e      	movs	r0, #78	@ 0x4e
 8002caa:	f7ff fc4b 	bl	8002544 <i2c_write_addr8_data8>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	20ff      	movs	r0, #255	@ 0xff
 8002cc4:	f7ff fc3e 	bl	8002544 <i2c_write_addr8_data8>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8002cda:	21b4      	movs	r1, #180	@ 0xb4
 8002cdc:	20b6      	movs	r0, #182	@ 0xb6
 8002cde:	f7ff fc31 	bl	8002544 <i2c_write_addr8_data8>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	7ffb      	ldrb	r3, [r7, #31]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
 8002cf6:	f083 0301 	eor.w	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <set_spads_from_nvm+0xf2>
        return false;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e073      	b.n	8002dec <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <set_spads_from_nvm+0xfc>
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	e000      	b.n	8002d10 <set_spads_from_nvm+0xfe>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002d12:	2300      	movs	r3, #0
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e04d      	b.n	8002db4 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	e03d      	b.n	8002d9a <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	4413      	add	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8002d2c:	dd01      	ble.n	8002d32 <set_spads_from_nvm+0x120>
                return false;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e05c      	b.n	8002dec <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d032      	beq.n	8002da2 <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8002d3c:	7fbb      	ldrb	r3, [r7, #30]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	db26      	blt.n	8002d92 <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8002d44:	f107 0208 	add.w	r2, r7, #8
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	fa42 f303 	asr.w	r3, r2, r3
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01a      	beq.n	8002d94 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 8002d5e:	f107 0210 	add.w	r2, r7, #16
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b25a      	sxtb	r2, r3
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	b2d9      	uxtb	r1, r3
 8002d7a:	f107 0210 	add.w	r2, r7, #16
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	4413      	add	r3, r2
 8002d82:	460a      	mov	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 8002d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002d90:	e000      	b.n	8002d94 <set_spads_from_nvm+0x182>
                continue;
 8002d92:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	3301      	adds	r3, #1
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2b07      	cmp	r3, #7
 8002d9e:	ddbe      	ble.n	8002d1e <set_spads_from_nvm+0x10c>
 8002da0:	e000      	b.n	8002da4 <set_spads_from_nvm+0x192>
                break;
 8002da2:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d006      	beq.n	8002dbc <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	3301      	adds	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	ddae      	ble.n	8002d18 <set_spads_from_nvm+0x106>
 8002dba:	e000      	b.n	8002dbe <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 8002dbc:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <set_spads_from_nvm+0x1ba>
        return false;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e00f      	b.n	8002dec <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	2206      	movs	r2, #6
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	20b0      	movs	r0, #176	@ 0xb0
 8002dd6:	f7ff fc33 	bl	8002640 <i2c_write_addr8_bytes>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f083 0301 	eor.w	r3, r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <set_spads_from_nvm+0x1d8>
        return false;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <set_spads_from_nvm+0x1da>
    }

    return true;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3730      	adds	r7, #48	@ 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	20ff      	movs	r0, #255	@ 0xff
 8002dfe:	f7ff fba1 	bl	8002544 <i2c_write_addr8_data8>
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002e06:	2100      	movs	r1, #0
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7ff fb9b 	bl	8002544 <i2c_write_addr8_data8>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002e20:	2100      	movs	r1, #0
 8002e22:	20ff      	movs	r0, #255	@ 0xff
 8002e24:	f7ff fb8e 	bl	8002544 <i2c_write_addr8_data8>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2009      	movs	r0, #9
 8002e3e:	f7ff fb81 	bl	8002544 <i2c_write_addr8_data8>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8002e54:	2100      	movs	r1, #0
 8002e56:	2010      	movs	r0, #16
 8002e58:	f7ff fb74 	bl	8002544 <i2c_write_addr8_data8>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2011      	movs	r0, #17
 8002e72:	f7ff fb67 	bl	8002544 <i2c_write_addr8_data8>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	2024      	movs	r0, #36	@ 0x24
 8002e8c:	f7ff fb5a 	bl	8002544 <i2c_write_addr8_data8>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 8002ea2:	21ff      	movs	r1, #255	@ 0xff
 8002ea4:	2025      	movs	r0, #37	@ 0x25
 8002ea6:	f7ff fb4d 	bl	8002544 <i2c_write_addr8_data8>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2075      	movs	r0, #117	@ 0x75
 8002ec0:	f7ff fb40 	bl	8002544 <i2c_write_addr8_data8>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	20ff      	movs	r0, #255	@ 0xff
 8002eda:	f7ff fb33 	bl	8002544 <i2c_write_addr8_data8>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 8002ef0:	212c      	movs	r1, #44	@ 0x2c
 8002ef2:	204e      	movs	r0, #78	@ 0x4e
 8002ef4:	f7ff fb26 	bl	8002544 <i2c_write_addr8_data8>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2048      	movs	r0, #72	@ 0x48
 8002f0e:	f7ff fb19 	bl	8002544 <i2c_write_addr8_data8>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8002f24:	2120      	movs	r1, #32
 8002f26:	2030      	movs	r0, #48	@ 0x30
 8002f28:	f7ff fb0c 	bl	8002544 <i2c_write_addr8_data8>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	20ff      	movs	r0, #255	@ 0xff
 8002f42:	f7ff faff 	bl	8002544 <i2c_write_addr8_data8>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 8002f58:	2109      	movs	r1, #9
 8002f5a:	2030      	movs	r0, #48	@ 0x30
 8002f5c:	f7ff faf2 	bl	8002544 <i2c_write_addr8_data8>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 8002f72:	2100      	movs	r1, #0
 8002f74:	2054      	movs	r0, #84	@ 0x54
 8002f76:	f7ff fae5 	bl	8002544 <i2c_write_addr8_data8>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	2031      	movs	r0, #49	@ 0x31
 8002f90:	f7ff fad8 	bl	8002544 <i2c_write_addr8_data8>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	2032      	movs	r0, #50	@ 0x32
 8002faa:	f7ff facb 	bl	8002544 <i2c_write_addr8_data8>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 8002fc0:	2183      	movs	r1, #131	@ 0x83
 8002fc2:	2040      	movs	r0, #64	@ 0x40
 8002fc4:	f7ff fabe 	bl	8002544 <i2c_write_addr8_data8>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 8002fda:	2125      	movs	r1, #37	@ 0x25
 8002fdc:	2046      	movs	r0, #70	@ 0x46
 8002fde:	f7ff fab1 	bl	8002544 <i2c_write_addr8_data8>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2060      	movs	r0, #96	@ 0x60
 8002ff8:	f7ff faa4 	bl	8002544 <i2c_write_addr8_data8>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 800300e:	2100      	movs	r1, #0
 8003010:	2027      	movs	r0, #39	@ 0x27
 8003012:	f7ff fa97 	bl	8002544 <i2c_write_addr8_data8>
 8003016:	4603      	mov	r3, r0
 8003018:	461a      	mov	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8003028:	2106      	movs	r1, #6
 800302a:	2050      	movs	r0, #80	@ 0x50
 800302c:	f7ff fa8a 	bl	8002544 <i2c_write_addr8_data8>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 8003042:	2100      	movs	r1, #0
 8003044:	2051      	movs	r0, #81	@ 0x51
 8003046:	f7ff fa7d 	bl	8002544 <i2c_write_addr8_data8>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 800305c:	2196      	movs	r1, #150	@ 0x96
 800305e:	2052      	movs	r0, #82	@ 0x52
 8003060:	f7ff fa70 	bl	8002544 <i2c_write_addr8_data8>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 8003076:	2108      	movs	r1, #8
 8003078:	2056      	movs	r0, #86	@ 0x56
 800307a:	f7ff fa63 	bl	8002544 <i2c_write_addr8_data8>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 8003090:	2130      	movs	r1, #48	@ 0x30
 8003092:	2057      	movs	r0, #87	@ 0x57
 8003094:	f7ff fa56 	bl	8002544 <i2c_write_addr8_data8>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 80030aa:	2100      	movs	r1, #0
 80030ac:	2061      	movs	r0, #97	@ 0x61
 80030ae:	f7ff fa49 	bl	8002544 <i2c_write_addr8_data8>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 80030c4:	2100      	movs	r1, #0
 80030c6:	2062      	movs	r0, #98	@ 0x62
 80030c8:	f7ff fa3c 	bl	8002544 <i2c_write_addr8_data8>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 80030de:	2100      	movs	r1, #0
 80030e0:	2064      	movs	r0, #100	@ 0x64
 80030e2:	f7ff fa2f 	bl	8002544 <i2c_write_addr8_data8>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 80030f8:	2100      	movs	r1, #0
 80030fa:	2065      	movs	r0, #101	@ 0x65
 80030fc:	f7ff fa22 	bl	8002544 <i2c_write_addr8_data8>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 8003112:	21a0      	movs	r1, #160	@ 0xa0
 8003114:	2066      	movs	r0, #102	@ 0x66
 8003116:	f7ff fa15 	bl	8002544 <i2c_write_addr8_data8>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800312c:	2101      	movs	r1, #1
 800312e:	20ff      	movs	r0, #255	@ 0xff
 8003130:	f7ff fa08 	bl	8002544 <i2c_write_addr8_data8>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 8003146:	2132      	movs	r1, #50	@ 0x32
 8003148:	2022      	movs	r0, #34	@ 0x22
 800314a:	f7ff f9fb 	bl	8002544 <i2c_write_addr8_data8>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 8003160:	2114      	movs	r1, #20
 8003162:	2047      	movs	r0, #71	@ 0x47
 8003164:	f7ff f9ee 	bl	8002544 <i2c_write_addr8_data8>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 800317a:	21ff      	movs	r1, #255	@ 0xff
 800317c:	2049      	movs	r0, #73	@ 0x49
 800317e:	f7ff f9e1 	bl	8002544 <i2c_write_addr8_data8>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 8003194:	2100      	movs	r1, #0
 8003196:	204a      	movs	r0, #74	@ 0x4a
 8003198:	f7ff f9d4 	bl	8002544 <i2c_write_addr8_data8>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80031ae:	2100      	movs	r1, #0
 80031b0:	20ff      	movs	r0, #255	@ 0xff
 80031b2:	f7ff f9c7 	bl	8002544 <i2c_write_addr8_data8>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf14      	ite	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	2300      	moveq	r3, #0
 80031c6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 80031c8:	210a      	movs	r1, #10
 80031ca:	207a      	movs	r0, #122	@ 0x7a
 80031cc:	f7ff f9ba 	bl	8002544 <i2c_write_addr8_data8>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 80031e2:	2100      	movs	r1, #0
 80031e4:	207b      	movs	r0, #123	@ 0x7b
 80031e6:	f7ff f9ad 	bl	8002544 <i2c_write_addr8_data8>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 80031fc:	2121      	movs	r1, #33	@ 0x21
 80031fe:	2078      	movs	r0, #120	@ 0x78
 8003200:	f7ff f9a0 	bl	8002544 <i2c_write_addr8_data8>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003216:	2101      	movs	r1, #1
 8003218:	20ff      	movs	r0, #255	@ 0xff
 800321a:	f7ff f993 	bl	8002544 <i2c_write_addr8_data8>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 8003230:	2134      	movs	r1, #52	@ 0x34
 8003232:	2023      	movs	r0, #35	@ 0x23
 8003234:	f7ff f986 	bl	8002544 <i2c_write_addr8_data8>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 800324a:	2100      	movs	r1, #0
 800324c:	2042      	movs	r0, #66	@ 0x42
 800324e:	f7ff f979 	bl	8002544 <i2c_write_addr8_data8>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8003264:	21ff      	movs	r1, #255	@ 0xff
 8003266:	2044      	movs	r0, #68	@ 0x44
 8003268:	f7ff f96c 	bl	8002544 <i2c_write_addr8_data8>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 800327e:	2126      	movs	r1, #38	@ 0x26
 8003280:	2045      	movs	r0, #69	@ 0x45
 8003282:	f7ff f95f 	bl	8002544 <i2c_write_addr8_data8>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 8003298:	2105      	movs	r1, #5
 800329a:	2046      	movs	r0, #70	@ 0x46
 800329c:	f7ff f952 	bl	8002544 <i2c_write_addr8_data8>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 80032b2:	2140      	movs	r1, #64	@ 0x40
 80032b4:	2040      	movs	r0, #64	@ 0x40
 80032b6:	f7ff f945 	bl	8002544 <i2c_write_addr8_data8>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 80032cc:	2106      	movs	r1, #6
 80032ce:	200e      	movs	r0, #14
 80032d0:	f7ff f938 	bl	8002544 <i2c_write_addr8_data8>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 80032e6:	211a      	movs	r1, #26
 80032e8:	2020      	movs	r0, #32
 80032ea:	f7ff f92b 	bl	8002544 <i2c_write_addr8_data8>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 8003300:	2140      	movs	r1, #64	@ 0x40
 8003302:	2043      	movs	r0, #67	@ 0x43
 8003304:	f7ff f91e 	bl	8002544 <i2c_write_addr8_data8>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800331a:	2100      	movs	r1, #0
 800331c:	20ff      	movs	r0, #255	@ 0xff
 800331e:	f7ff f911 	bl	8002544 <i2c_write_addr8_data8>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003334:	2103      	movs	r1, #3
 8003336:	2034      	movs	r0, #52	@ 0x34
 8003338:	f7ff f904 	bl	8002544 <i2c_write_addr8_data8>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 800334e:	2144      	movs	r1, #68	@ 0x44
 8003350:	2035      	movs	r0, #53	@ 0x35
 8003352:	f7ff f8f7 	bl	8002544 <i2c_write_addr8_data8>
 8003356:	4603      	mov	r3, r0
 8003358:	461a      	mov	r2, r3
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003368:	2101      	movs	r1, #1
 800336a:	20ff      	movs	r0, #255	@ 0xff
 800336c:	f7ff f8ea 	bl	8002544 <i2c_write_addr8_data8>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8003382:	2104      	movs	r1, #4
 8003384:	2031      	movs	r0, #49	@ 0x31
 8003386:	f7ff f8dd 	bl	8002544 <i2c_write_addr8_data8>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 800339c:	2109      	movs	r1, #9
 800339e:	204b      	movs	r0, #75	@ 0x4b
 80033a0:	f7ff f8d0 	bl	8002544 <i2c_write_addr8_data8>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 80033b6:	2105      	movs	r1, #5
 80033b8:	204c      	movs	r0, #76	@ 0x4c
 80033ba:	f7ff f8c3 	bl	8002544 <i2c_write_addr8_data8>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 80033d0:	2104      	movs	r1, #4
 80033d2:	204d      	movs	r0, #77	@ 0x4d
 80033d4:	f7ff f8b6 	bl	8002544 <i2c_write_addr8_data8>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80033ea:	2100      	movs	r1, #0
 80033ec:	20ff      	movs	r0, #255	@ 0xff
 80033ee:	f7ff f8a9 	bl	8002544 <i2c_write_addr8_data8>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 8003404:	2100      	movs	r1, #0
 8003406:	2044      	movs	r0, #68	@ 0x44
 8003408:	f7ff f89c 	bl	8002544 <i2c_write_addr8_data8>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 800341e:	2120      	movs	r1, #32
 8003420:	2045      	movs	r0, #69	@ 0x45
 8003422:	f7ff f88f 	bl	8002544 <i2c_write_addr8_data8>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 8003438:	2108      	movs	r1, #8
 800343a:	2047      	movs	r0, #71	@ 0x47
 800343c:	f7ff f882 	bl	8002544 <i2c_write_addr8_data8>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 8003452:	2128      	movs	r1, #40	@ 0x28
 8003454:	2048      	movs	r0, #72	@ 0x48
 8003456:	f7ff f875 	bl	8002544 <i2c_write_addr8_data8>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 800346c:	2100      	movs	r1, #0
 800346e:	2067      	movs	r0, #103	@ 0x67
 8003470:	f7ff f868 	bl	8002544 <i2c_write_addr8_data8>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 8003486:	2104      	movs	r1, #4
 8003488:	2070      	movs	r0, #112	@ 0x70
 800348a:	f7ff f85b 	bl	8002544 <i2c_write_addr8_data8>
 800348e:	4603      	mov	r3, r0
 8003490:	461a      	mov	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 80034a0:	2101      	movs	r1, #1
 80034a2:	2071      	movs	r0, #113	@ 0x71
 80034a4:	f7ff f84e 	bl	8002544 <i2c_write_addr8_data8>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 80034ba:	21fe      	movs	r1, #254	@ 0xfe
 80034bc:	2072      	movs	r0, #114	@ 0x72
 80034be:	f7ff f841 	bl	8002544 <i2c_write_addr8_data8>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 80034d4:	2100      	movs	r1, #0
 80034d6:	2076      	movs	r0, #118	@ 0x76
 80034d8:	f7ff f834 	bl	8002544 <i2c_write_addr8_data8>
 80034dc:	4603      	mov	r3, r0
 80034de:	461a      	mov	r2, r3
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	2077      	movs	r0, #119	@ 0x77
 80034f2:	f7ff f827 	bl	8002544 <i2c_write_addr8_data8>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003508:	2101      	movs	r1, #1
 800350a:	20ff      	movs	r0, #255	@ 0xff
 800350c:	f7ff f81a 	bl	8002544 <i2c_write_addr8_data8>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 8003522:	2101      	movs	r1, #1
 8003524:	200d      	movs	r0, #13
 8003526:	f7ff f80d 	bl	8002544 <i2c_write_addr8_data8>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800353c:	2100      	movs	r1, #0
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	f7ff f800 	bl	8002544 <i2c_write_addr8_data8>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003556:	2101      	movs	r1, #1
 8003558:	2080      	movs	r0, #128	@ 0x80
 800355a:	f7fe fff3 	bl	8002544 <i2c_write_addr8_data8>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf14      	ite	ne
 800356a:	2301      	movne	r3, #1
 800356c:	2300      	moveq	r3, #0
 800356e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 8003570:	21f8      	movs	r1, #248	@ 0xf8
 8003572:	2001      	movs	r0, #1
 8003574:	f7fe ffe6 	bl	8002544 <i2c_write_addr8_data8>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800358a:	2101      	movs	r1, #1
 800358c:	20ff      	movs	r0, #255	@ 0xff
 800358e:	f7fe ffd9 	bl	8002544 <i2c_write_addr8_data8>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 80035a4:	2101      	movs	r1, #1
 80035a6:	208e      	movs	r0, #142	@ 0x8e
 80035a8:	f7fe ffcc 	bl	8002544 <i2c_write_addr8_data8>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80035be:	2101      	movs	r1, #1
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7fe ffbf 	bl	8002544 <i2c_write_addr8_data8>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80035d8:	2100      	movs	r1, #0
 80035da:	20ff      	movs	r0, #255	@ 0xff
 80035dc:	f7fe ffb2 	bl	8002544 <i2c_write_addr8_data8>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 80035f2:	2100      	movs	r1, #0
 80035f4:	2080      	movs	r0, #128	@ 0x80
 80035f6:	f7fe ffa5 	bl	8002544 <i2c_write_addr8_data8>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	71fb      	strb	r3, [r7, #7]
    return success;
 800360c:	79fb      	ldrb	r3, [r7, #7]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <configure_interrupt>:

static bool configure_interrupt()
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 800361c:	2104      	movs	r1, #4
 800361e:	200a      	movs	r0, #10
 8003620:	f7fe ff90 	bl	8002544 <i2c_write_addr8_data8>
 8003624:	4603      	mov	r3, r0
 8003626:	f083 0301 	eor.w	r3, r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <configure_interrupt+0x1e>
        return false;
 8003630:	2300      	movs	r3, #0
 8003632:	e02d      	b.n	8003690 <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 8003638:	1dfb      	adds	r3, r7, #7
 800363a:	4619      	mov	r1, r3
 800363c:	2084      	movs	r0, #132	@ 0x84
 800363e:	f7fe ff41 	bl	80024c4 <i2c_read_addr8_data8>
 8003642:	4603      	mov	r3, r0
 8003644:	f083 0301 	eor.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <configure_interrupt+0x3c>
        return false;
 800364e:	2300      	movs	r3, #0
 8003650:	e01e      	b.n	8003690 <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f023 0310 	bic.w	r3, r3, #16
 8003658:	b2db      	uxtb	r3, r3
 800365a:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4619      	mov	r1, r3
 8003660:	2084      	movs	r0, #132	@ 0x84
 8003662:	f7fe ff6f 	bl	8002544 <i2c_write_addr8_data8>
 8003666:	4603      	mov	r3, r0
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <configure_interrupt+0x60>
        return false;
 8003672:	2300      	movs	r3, #0
 8003674:	e00c      	b.n	8003690 <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 8003676:	2101      	movs	r1, #1
 8003678:	200b      	movs	r0, #11
 800367a:	f7fe ff63 	bl	8002544 <i2c_write_addr8_data8>
 800367e:	4603      	mov	r3, r0
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <configure_interrupt+0x78>
        return false;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <configure_interrupt+0x7a>
    }
    return true;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	4619      	mov	r1, r3
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fe ff4c 	bl	8002544 <i2c_write_addr8_data8>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 80036ba:	f7ff faaa 	bl	8002c12 <set_spads_from_nvm>
 80036be:	4603      	mov	r3, r0
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <static_init+0x18>
        return false;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e01f      	b.n	800370e <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 80036ce:	f7ff fb91 	bl	8002df4 <load_default_tuning_settings>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <static_init+0x2c>
        return false;
 80036de:	2300      	movs	r3, #0
 80036e0:	e015      	b.n	800370e <static_init+0x58>
    }

    if (!configure_interrupt()) {
 80036e2:	f7ff ff98 	bl	8003616 <configure_interrupt>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f083 0301 	eor.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <static_init+0x40>
        return false;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e00b      	b.n	800370e <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 80036f6:	20e8      	movs	r0, #232	@ 0xe8
 80036f8:	f7ff ffce 	bl	8003698 <set_sequence_steps_enabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <static_init+0x58>
    }

    return true;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}

08003712 <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <perform_single_ref_calibration+0x1e>
 800372a:	2b01      	cmp	r3, #1
 800372c:	d005      	beq.n	800373a <perform_single_ref_calibration+0x28>
 800372e:	e009      	b.n	8003744 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8003730:	2301      	movs	r3, #1
 8003732:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003734:	2341      	movs	r3, #65	@ 0x41
 8003736:	73fb      	strb	r3, [r7, #15]
        break;
 8003738:	e004      	b.n	8003744 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 800373a:	2302      	movs	r3, #2
 800373c:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
        break;
 8003742:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8003744:	7bbb      	ldrb	r3, [r7, #14]
 8003746:	4619      	mov	r1, r3
 8003748:	2001      	movs	r0, #1
 800374a:	f7fe fefb 	bl	8002544 <i2c_write_addr8_data8>
 800374e:	4603      	mov	r3, r0
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <perform_single_ref_calibration+0x4c>
        return false;
 800375a:	2300      	movs	r3, #0
 800375c:	e041      	b.n	80037e2 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	4619      	mov	r1, r3
 8003762:	2000      	movs	r0, #0
 8003764:	f7fe feee 	bl	8002544 <i2c_write_addr8_data8>
 8003768:	4603      	mov	r3, r0
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <perform_single_ref_calibration+0x66>
        return false;
 8003774:	2300      	movs	r3, #0
 8003776:	e034      	b.n	80037e2 <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	733b      	strb	r3, [r7, #12]
    bool success = false;
 800377c:	2300      	movs	r3, #0
 800377e:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	4619      	mov	r1, r3
 8003786:	2013      	movs	r0, #19
 8003788:	f7fe fe9c 	bl	80024c4 <i2c_read_addr8_data8>
 800378c:	4603      	mov	r3, r0
 800378e:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 8003790:	7b7b      	ldrb	r3, [r7, #13]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <perform_single_ref_calibration+0x8e>
 8003796:	7b3b      	ldrb	r3, [r7, #12]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <perform_single_ref_calibration+0x6e>
    if (!success) {
 80037a0:	7b7b      	ldrb	r3, [r7, #13]
 80037a2:	f083 0301 	eor.w	r3, r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <perform_single_ref_calibration+0x9e>
        return false;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e018      	b.n	80037e2 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80037b0:	2101      	movs	r1, #1
 80037b2:	200b      	movs	r0, #11
 80037b4:	f7fe fec6 	bl	8002544 <i2c_write_addr8_data8>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f083 0301 	eor.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <perform_single_ref_calibration+0xb6>
        return false;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e00c      	b.n	80037e2 <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 80037c8:	2100      	movs	r1, #0
 80037ca:	2000      	movs	r0, #0
 80037cc:	f7fe feba 	bl	8002544 <i2c_write_addr8_data8>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f083 0301 	eor.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <perform_single_ref_calibration+0xce>
        return false;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <perform_single_ref_calibration+0xd0>
    }
    return true;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff ff8f 	bl	8003712 <perform_single_ref_calibration>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f083 0301 	eor.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <perform_ref_calibration+0x1a>
        return false;
 8003800:	2300      	movs	r3, #0
 8003802:	e016      	b.n	8003832 <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 8003804:	2001      	movs	r0, #1
 8003806:	f7ff ff84 	bl	8003712 <perform_single_ref_calibration>
 800380a:	4603      	mov	r3, r0
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <perform_ref_calibration+0x30>
        return false;
 8003816:	2300      	movs	r3, #0
 8003818:	e00b      	b.n	8003832 <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800381a:	20e8      	movs	r0, #232	@ 0xe8
 800381c:	f7ff ff3c 	bl	8003698 <set_sequence_steps_enabled>
 8003820:	4603      	mov	r3, r0
 8003822:	f083 0301 	eor.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <perform_ref_calibration+0x48>
    }
    return true;
 8003830:	2301      	movs	r3, #1
}
 8003832:	4618      	mov	r0, r3
 8003834:	bd80      	pop	{r7, pc}

08003836 <configure_address>:

static bool configure_address(uint8_t addr)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
    /* 7-bit address */
    return i2c_write_addr8_data8(REG_SLAVE_DEVICE_ADDRESS, addr & 0x7F);
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003846:	b2db      	uxtb	r3, r3
 8003848:	4619      	mov	r1, r3
 800384a:	208a      	movs	r0, #138	@ 0x8a
 800384c:	f7fe fe7a 	bl	8002544 <i2c_write_addr8_data8>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <set_hardware_standby>:

/**
 * Sets the sensor in hardware standby by flipping the XSHUT pin.
 */
static void set_hardware_standby(vl53l0x_idx_t idx, bool enable)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	460a      	mov	r2, r1
 8003866:	71fb      	strb	r3, [r7, #7]
 8003868:	4613      	mov	r3, r2
 800386a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOG, vl53l0x_infos[idx].xshut_gpio, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	4a08      	ldr	r2, [pc, #32]	@ (8003890 <set_hardware_standby+0x34>)
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	8859      	ldrh	r1, [r3, #2]
 8003876:	79bb      	ldrb	r3, [r7, #6]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	4804      	ldr	r0, [pc, #16]	@ (8003894 <set_hardware_standby+0x38>)
 8003882:	f003 f899 	bl	80069b8 <HAL_GPIO_WritePin>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	0801ff0c 	.word	0x0801ff0c
 8003894:	58021800 	.word	0x58021800

08003898 <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
    gpio_init();
    gpio_set_output(GPIO_XSHUT_FIRST, false);
    gpio_set_output(GPIO_XSHUT_SECOND, false);
    gpio_set_output(GPIO_XSHUT_THIRD, false);
    */
    HAL_GPIO_WritePin(GPIOG, xshut1_Pin, GPIO_PIN_RESET);
 800389c:	2200      	movs	r2, #0
 800389e:	2120      	movs	r1, #32
 80038a0:	4809      	ldr	r0, [pc, #36]	@ (80038c8 <configure_gpio+0x30>)
 80038a2:	f003 f889 	bl	80069b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut2_Pin, GPIO_PIN_RESET);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2110      	movs	r1, #16
 80038aa:	4807      	ldr	r0, [pc, #28]	@ (80038c8 <configure_gpio+0x30>)
 80038ac:	f003 f884 	bl	80069b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut3_Pin, GPIO_PIN_RESET);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2108      	movs	r1, #8
 80038b4:	4804      	ldr	r0, [pc, #16]	@ (80038c8 <configure_gpio+0x30>)
 80038b6:	f003 f87f 	bl	80069b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut4_Pin, GPIO_PIN_RESET);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2104      	movs	r1, #4
 80038be:	4802      	ldr	r0, [pc, #8]	@ (80038c8 <configure_gpio+0x30>)
 80038c0:	f003 f87a 	bl	80069b8 <HAL_GPIO_WritePin>
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58021800 	.word	0x58021800

080038cc <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
    set_hardware_standby(idx, false);
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ffbe 	bl	800385c <set_hardware_standby>
    i2c_set_slave_address(VL53L0X_DEFAULT_ADDRESS);
 80038e0:	2029      	movs	r0, #41	@ 0x29
 80038e2:	f7fe fddf 	bl	80024a4 <i2c_set_slave_address>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 80038e6:	2001      	movs	r0, #1
 80038e8:	f000 f998 	bl	8003c1c <HAL_Delay>

    if (!device_is_booted()) {
 80038ec:	f7fe ff4c 	bl	8002788 <device_is_booted>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f083 0301 	eor.w	r3, r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <init_address+0x3a>
        my_printf("device is not booted\n");
 80038fc:	480d      	ldr	r0, [pc, #52]	@ (8003934 <init_address+0x68>)
 80038fe:	f7fe fda1 	bl	8002444 <my_printf>
        return false;
 8003902:	2300      	movs	r3, #0
 8003904:	e012      	b.n	800392c <init_address+0x60>
    }

    if (!configure_address(vl53l0x_infos[idx].addr)) {
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <init_address+0x6c>)
 800390a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff91 	bl	8003836 <configure_address>
 8003914:	4603      	mov	r3, r0
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <init_address+0x5e>
        my_printf("configure address failed\n");
 8003920:	4806      	ldr	r0, [pc, #24]	@ (800393c <init_address+0x70>)
 8003922:	f7fe fd8f 	bl	8002444 <my_printf>
        return false;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <init_address+0x60>
    }
    return true;
 800392a:	2301      	movs	r3, #1
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0801edc0 	.word	0x0801edc0
 8003938:	0801ff0c 	.word	0x0801ff0c
 800393c:	0801edd8 	.word	0x0801edd8

08003940 <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 8003944:	f7ff ffa8 	bl	8003898 <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 8003948:	2000      	movs	r0, #0
 800394a:	f7ff ffbf 	bl	80038cc <init_address>
 800394e:	4603      	mov	r3, r0
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 800395a:	4814      	ldr	r0, [pc, #80]	@ (80039ac <init_addresses+0x6c>)
 800395c:	f7fe fd72 	bl	8002444 <my_printf>
        return false;
 8003960:	2300      	movs	r3, #0
 8003962:	e021      	b.n	80039a8 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff ffb1 	bl	80038cc <init_address>
 800396a:	4603      	mov	r3, r0
 800396c:	f083 0301 	eor.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <init_addresses+0x3a>
        return false;
 8003976:	2300      	movs	r3, #0
 8003978:	e016      	b.n	80039a8 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_THIRD)) {
 800397a:	2002      	movs	r0, #2
 800397c:	f7ff ffa6 	bl	80038cc <init_address>
 8003980:	4603      	mov	r3, r0
 8003982:	f083 0301 	eor.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <init_addresses+0x50>
        return false;
 800398c:	2300      	movs	r3, #0
 800398e:	e00b      	b.n	80039a8 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_FOURTH)) {
 8003990:	2003      	movs	r0, #3
 8003992:	f7ff ff9b 	bl	80038cc <init_address>
 8003996:	4603      	mov	r3, r0
 8003998:	f083 0301 	eor.w	r3, r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <init_addresses+0x66>
        return false;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <init_addresses+0x68>
    }
    return true;
 80039a6:	2301      	movs	r3, #1
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	0801edf4 	.word	0x0801edf4

080039b0 <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
    i2c_set_slave_address(vl53l0x_infos[idx].addr);
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <init_config+0x60>)
 80039be:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fd6e 	bl	80024a4 <i2c_set_slave_address>
    if (!data_init()) {
 80039c8:	f7fe ff0e 	bl	80027e8 <data_init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f083 0301 	eor.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <init_config+0x2c>
        return false;
 80039d8:	2300      	movs	r3, #0
 80039da:	e014      	b.n	8003a06 <init_config+0x56>
    }
    if (!static_init()) {
 80039dc:	f7ff fe6b 	bl	80036b6 <static_init>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <init_config+0x40>
        return false;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e00a      	b.n	8003a06 <init_config+0x56>
    }
    if (!perform_ref_calibration()) {
 80039f0:	f7ff fefb 	bl	80037ea <perform_ref_calibration>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <init_config+0x54>
        return false;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <init_config+0x56>
    }
    return true;
 8003a04:	2301      	movs	r3, #1
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	0801ff0c 	.word	0x0801ff0c

08003a14 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8003a18:	f7ff ff92 	bl	8003940 <init_addresses>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8003a28:	481b      	ldr	r0, [pc, #108]	@ (8003a98 <vl53l0x_init+0x84>)
 8003a2a:	f7fe fd0b 	bl	8002444 <my_printf>
        return false;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e02f      	b.n	8003a92 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7ff ffbc 	bl	80039b0 <init_config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f083 0301 	eor.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8003a44:	4815      	ldr	r0, [pc, #84]	@ (8003a9c <vl53l0x_init+0x88>)
 8003a46:	f7fe fcfd 	bl	8002444 <my_printf>
        return false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e021      	b.n	8003a92 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f7ff ffae 	bl	80039b0 <init_config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f083 0301 	eor.w	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <vl53l0x_init+0x50>
        return false;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e016      	b.n	8003a92 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_THIRD)) {
 8003a64:	2002      	movs	r0, #2
 8003a66:	f7ff ffa3 	bl	80039b0 <init_config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <vl53l0x_init+0x66>
        return false;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e00b      	b.n	8003a92 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FOURTH)) {
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	f7ff ff98 	bl	80039b0 <init_config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f083 0301 	eor.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <vl53l0x_init+0x7c>
        return false;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <vl53l0x_init+0x7e>
    }
    return true;
 8003a90:	2301      	movs	r3, #1
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	0801ee18 	.word	0x0801ee18
 8003a9c:	0801ee2c 	.word	0x0801ee2c

08003aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003aa0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003adc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003aa4:	f7fe fcb6 	bl	8002414 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003aa8:	f7fe fc24 	bl	80022f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aac:	480c      	ldr	r0, [pc, #48]	@ (8003ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aae:	490d      	ldr	r1, [pc, #52]	@ (8003ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab4:	e002      	b.n	8003abc <LoopCopyDataInit>

08003ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aba:	3304      	adds	r3, #4

08003abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac0:	d3f9      	bcc.n	8003ab6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8003aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8003af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac8:	e001      	b.n	8003ace <LoopFillZerobss>

08003aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003acc:	3204      	adds	r2, #4

08003ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad0:	d3fb      	bcc.n	8003aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ad2:	f019 ff53 	bl	801d97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ad6:	f7fc fe59 	bl	800078c <main>
  bx  lr
 8003ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003adc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003ae0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ae4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8003ae8:	0803205c 	.word	0x0803205c
  ldr r2, =_sbss
 8003aec:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8003af0:	24008af4 	.word	0x24008af4

08003af4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af4:	e7fe      	b.n	8003af4 <ADC3_IRQHandler>
	...

08003af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afe:	2003      	movs	r0, #3
 8003b00:	f000 f980 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b04:	f004 fefe 	bl	8008904 <HAL_RCC_GetSysClockFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <HAL_Init+0x68>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	4913      	ldr	r1, [pc, #76]	@ (8003b64 <HAL_Init+0x6c>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b22:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <HAL_Init+0x68>)
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <HAL_Init+0x6c>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <HAL_Init+0x70>)
 8003b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_Init+0x74>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b42:	200f      	movs	r0, #15
 8003b44:	f000 f814 	bl	8003b70 <HAL_InitTick>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e002      	b.n	8003b58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b52:	f7fd ff67 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58024400 	.word	0x58024400
 8003b64:	0801fefc 	.word	0x0801fefc
 8003b68:	24000004 	.word	0x24000004
 8003b6c:	24000000 	.word	0x24000000

08003b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b78:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <HAL_InitTick+0x60>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e021      	b.n	8003bc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <HAL_InitTick+0x64>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <HAL_InitTick+0x60>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f965 	bl	8003e6a <HAL_SYSTICK_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00e      	b.n	8003bc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d80a      	bhi.n	8003bc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f000 f92f 	bl	8003e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bbc:	4a06      	ldr	r2, [pc, #24]	@ (8003bd8 <HAL_InitTick+0x68>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	2400000c 	.word	0x2400000c
 8003bd4:	24000000 	.word	0x24000000
 8003bd8:	24000008 	.word	0x24000008

08003bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_IncTick+0x20>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_IncTick+0x24>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <HAL_IncTick+0x24>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	2400000c 	.word	0x2400000c
 8003c00:	24008468 	.word	0x24008468

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <HAL_GetTick+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	24008468 	.word	0x24008468

08003c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff ffee 	bl	8003c04 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d005      	beq.n	8003c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	@ (8003c60 <HAL_Delay+0x44>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c42:	bf00      	nop
 8003c44:	f7ff ffde 	bl	8003c04 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d8f7      	bhi.n	8003c44 <HAL_Delay+0x28>
  {
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2400000c 	.word	0x2400000c

08003c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00
 8003ca8:	05fa0000 	.word	0x05fa0000

08003cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	@ (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db0a      	blt.n	8003d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	490c      	ldr	r1, [pc, #48]	@ (8003d50 <__NVIC_SetPriority+0x4c>)
 8003d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d2c:	e00a      	b.n	8003d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4908      	ldr	r1, [pc, #32]	@ (8003d54 <__NVIC_SetPriority+0x50>)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	440b      	add	r3, r1
 8003d42:	761a      	strb	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	@ 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	bf28      	it	cs
 8003d76:	2304      	movcs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d902      	bls.n	8003d88 <NVIC_EncodePriority+0x30>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3b03      	subs	r3, #3
 8003d86:	e000      	b.n	8003d8a <NVIC_EncodePriority+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	4313      	orrs	r3, r2
         );
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	@ 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd0:	d301      	bcc.n	8003dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e00 <SysTick_Config+0x40>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dde:	210f      	movs	r1, #15
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f7ff ff8e 	bl	8003d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <SysTick_Config+0x40>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dee:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <SysTick_Config+0x40>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff29 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e28:	f7ff ff40 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f7ff ff90 	bl	8003d58 <NVIC_EncodePriority>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff5f 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff33 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa4 	bl	8003dc0 <SysTick_Config>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7ff feba 	bl	8003c04 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e312      	b.n	80044c2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a66      	ldr	r2, [pc, #408]	@ (800403c <HAL_DMA_Init+0x1b8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_DMA_Init+0x1bc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a63      	ldr	r2, [pc, #396]	@ (8004044 <HAL_DMA_Init+0x1c0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a62      	ldr	r2, [pc, #392]	@ (8004048 <HAL_DMA_Init+0x1c4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a60      	ldr	r2, [pc, #384]	@ (800404c <HAL_DMA_Init+0x1c8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5f      	ldr	r2, [pc, #380]	@ (8004050 <HAL_DMA_Init+0x1cc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5d      	ldr	r2, [pc, #372]	@ (8004054 <HAL_DMA_Init+0x1d0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8004058 <HAL_DMA_Init+0x1d4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800405c <HAL_DMA_Init+0x1d8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a59      	ldr	r2, [pc, #356]	@ (8004060 <HAL_DMA_Init+0x1dc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a57      	ldr	r2, [pc, #348]	@ (8004064 <HAL_DMA_Init+0x1e0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a56      	ldr	r2, [pc, #344]	@ (8004068 <HAL_DMA_Init+0x1e4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a54      	ldr	r2, [pc, #336]	@ (800406c <HAL_DMA_Init+0x1e8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a53      	ldr	r2, [pc, #332]	@ (8004070 <HAL_DMA_Init+0x1ec>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <HAL_DMA_Init+0x1f0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_Init+0xb8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a50      	ldr	r2, [pc, #320]	@ (8004078 <HAL_DMA_Init+0x1f4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Init+0xbc>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_Init+0xbe>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 813c 	beq.w	80041c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a37      	ldr	r2, [pc, #220]	@ (800403c <HAL_DMA_Init+0x1b8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a36      	ldr	r2, [pc, #216]	@ (8004040 <HAL_DMA_Init+0x1bc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a34      	ldr	r2, [pc, #208]	@ (8004044 <HAL_DMA_Init+0x1c0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a33      	ldr	r2, [pc, #204]	@ (8004048 <HAL_DMA_Init+0x1c4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a31      	ldr	r2, [pc, #196]	@ (800404c <HAL_DMA_Init+0x1c8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a30      	ldr	r2, [pc, #192]	@ (8004050 <HAL_DMA_Init+0x1cc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2e      	ldr	r2, [pc, #184]	@ (8004054 <HAL_DMA_Init+0x1d0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8004058 <HAL_DMA_Init+0x1d4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2b      	ldr	r2, [pc, #172]	@ (800405c <HAL_DMA_Init+0x1d8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <HAL_DMA_Init+0x1dc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a28      	ldr	r2, [pc, #160]	@ (8004064 <HAL_DMA_Init+0x1e0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a27      	ldr	r2, [pc, #156]	@ (8004068 <HAL_DMA_Init+0x1e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a25      	ldr	r2, [pc, #148]	@ (800406c <HAL_DMA_Init+0x1e8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a24      	ldr	r2, [pc, #144]	@ (8004070 <HAL_DMA_Init+0x1ec>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <HAL_DMA_Init+0x1f0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_DMA_Init+0x174>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <HAL_DMA_Init+0x1f4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <HAL_DMA_Init+0x186>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e007      	b.n	800401a <HAL_DMA_Init+0x196>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800401a:	e02f      	b.n	800407c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401c:	f7ff fdf2 	bl	8003c04 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b05      	cmp	r3, #5
 8004028:	d928      	bls.n	800407c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e242      	b.n	80044c2 <HAL_DMA_Init+0x63e>
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1c8      	bne.n	800401c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4b83      	ldr	r3, [pc, #524]	@ (80042a4 <HAL_DMA_Init+0x420>)
 8004096:	4013      	ands	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80040a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d107      	bne.n	80040e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	4313      	orrs	r3, r2
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b28      	cmp	r3, #40	@ 0x28
 80040e6:	d903      	bls.n	80040f0 <HAL_DMA_Init+0x26c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80040ee:	d91f      	bls.n	8004130 <HAL_DMA_Init+0x2ac>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040f6:	d903      	bls.n	8004100 <HAL_DMA_Init+0x27c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b42      	cmp	r3, #66	@ 0x42
 80040fe:	d917      	bls.n	8004130 <HAL_DMA_Init+0x2ac>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b46      	cmp	r3, #70	@ 0x46
 8004106:	d903      	bls.n	8004110 <HAL_DMA_Init+0x28c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b48      	cmp	r3, #72	@ 0x48
 800410e:	d90f      	bls.n	8004130 <HAL_DMA_Init+0x2ac>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b4e      	cmp	r3, #78	@ 0x4e
 8004116:	d903      	bls.n	8004120 <HAL_DMA_Init+0x29c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b52      	cmp	r3, #82	@ 0x52
 800411e:	d907      	bls.n	8004130 <HAL_DMA_Init+0x2ac>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b73      	cmp	r3, #115	@ 0x73
 8004126:	d905      	bls.n	8004134 <HAL_DMA_Init+0x2b0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b77      	cmp	r3, #119	@ 0x77
 800412e:	d801      	bhi.n	8004134 <HAL_DMA_Init+0x2b0>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_DMA_Init+0x2b2>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004140:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	2b04      	cmp	r3, #4
 800416a:	d117      	bne.n	800419c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f002 f8e8 	bl	8006354 <DMA_CheckFifoParam>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e192      	b.n	80044c2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f002 f823 	bl	80061f0 <DMA_CalcBaseAndBitshift>
 80041aa:	4603      	mov	r3, r0
 80041ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	223f      	movs	r2, #63	@ 0x3f
 80041b8:	409a      	lsls	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	e0c8      	b.n	8004352 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a38      	ldr	r2, [pc, #224]	@ (80042a8 <HAL_DMA_Init+0x424>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d022      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a37      	ldr	r2, [pc, #220]	@ (80042ac <HAL_DMA_Init+0x428>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d01d      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a35      	ldr	r2, [pc, #212]	@ (80042b0 <HAL_DMA_Init+0x42c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d018      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a34      	ldr	r2, [pc, #208]	@ (80042b4 <HAL_DMA_Init+0x430>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a32      	ldr	r2, [pc, #200]	@ (80042b8 <HAL_DMA_Init+0x434>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a31      	ldr	r2, [pc, #196]	@ (80042bc <HAL_DMA_Init+0x438>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2f      	ldr	r2, [pc, #188]	@ (80042c0 <HAL_DMA_Init+0x43c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_DMA_Init+0x38c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2e      	ldr	r2, [pc, #184]	@ (80042c4 <HAL_DMA_Init+0x440>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_DMA_Init+0x390>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_DMA_Init+0x392>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8092 	beq.w	8004340 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a21      	ldr	r2, [pc, #132]	@ (80042a8 <HAL_DMA_Init+0x424>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d021      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a20      	ldr	r2, [pc, #128]	@ (80042ac <HAL_DMA_Init+0x428>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01c      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1e      	ldr	r2, [pc, #120]	@ (80042b0 <HAL_DMA_Init+0x42c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d017      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1d      	ldr	r2, [pc, #116]	@ (80042b4 <HAL_DMA_Init+0x430>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d012      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1b      	ldr	r2, [pc, #108]	@ (80042b8 <HAL_DMA_Init+0x434>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1a      	ldr	r2, [pc, #104]	@ (80042bc <HAL_DMA_Init+0x438>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d008      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a18      	ldr	r2, [pc, #96]	@ (80042c0 <HAL_DMA_Init+0x43c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <HAL_DMA_Init+0x3e6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a17      	ldr	r2, [pc, #92]	@ (80042c4 <HAL_DMA_Init+0x440>)
 8004268:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_DMA_Init+0x444>)
 8004286:	4013      	ands	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b40      	cmp	r3, #64	@ 0x40
 8004290:	d01c      	beq.n	80042cc <HAL_DMA_Init+0x448>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d102      	bne.n	80042a0 <HAL_DMA_Init+0x41c>
 800429a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800429e:	e016      	b.n	80042ce <HAL_DMA_Init+0x44a>
 80042a0:	2300      	movs	r3, #0
 80042a2:	e014      	b.n	80042ce <HAL_DMA_Init+0x44a>
 80042a4:	fe10803f 	.word	0xfe10803f
 80042a8:	58025408 	.word	0x58025408
 80042ac:	5802541c 	.word	0x5802541c
 80042b0:	58025430 	.word	0x58025430
 80042b4:	58025444 	.word	0x58025444
 80042b8:	58025458 	.word	0x58025458
 80042bc:	5802546c 	.word	0x5802546c
 80042c0:	58025480 	.word	0x58025480
 80042c4:	58025494 	.word	0x58025494
 80042c8:	fffe000f 	.word	0xfffe000f
 80042cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68d2      	ldr	r2, [r2, #12]
 80042d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80042dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80042e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80042ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80042f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80042fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	4b6e      	ldr	r3, [pc, #440]	@ (80044cc <HAL_DMA_Init+0x648>)
 8004314:	4413      	add	r3, r2
 8004316:	4a6e      	ldr	r2, [pc, #440]	@ (80044d0 <HAL_DMA_Init+0x64c>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 ff63 	bl	80061f0 <DMA_CalcBaseAndBitshift>
 800432a:	4603      	mov	r3, r0
 800432c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2201      	movs	r2, #1
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	e008      	b.n	8004352 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2240      	movs	r2, #64	@ 0x40
 8004344:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0b7      	b.n	80044c2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <HAL_DMA_Init+0x650>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d072      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5d      	ldr	r2, [pc, #372]	@ (80044d8 <HAL_DMA_Init+0x654>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d06d      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5c      	ldr	r2, [pc, #368]	@ (80044dc <HAL_DMA_Init+0x658>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d068      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5a      	ldr	r2, [pc, #360]	@ (80044e0 <HAL_DMA_Init+0x65c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d063      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a59      	ldr	r2, [pc, #356]	@ (80044e4 <HAL_DMA_Init+0x660>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d05e      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a57      	ldr	r2, [pc, #348]	@ (80044e8 <HAL_DMA_Init+0x664>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d059      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a56      	ldr	r2, [pc, #344]	@ (80044ec <HAL_DMA_Init+0x668>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d054      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a54      	ldr	r2, [pc, #336]	@ (80044f0 <HAL_DMA_Init+0x66c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d04f      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a53      	ldr	r2, [pc, #332]	@ (80044f4 <HAL_DMA_Init+0x670>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d04a      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a51      	ldr	r2, [pc, #324]	@ (80044f8 <HAL_DMA_Init+0x674>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d045      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a50      	ldr	r2, [pc, #320]	@ (80044fc <HAL_DMA_Init+0x678>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d040      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004500 <HAL_DMA_Init+0x67c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d03b      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004504 <HAL_DMA_Init+0x680>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d036      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004508 <HAL_DMA_Init+0x684>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d031      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4a      	ldr	r2, [pc, #296]	@ (800450c <HAL_DMA_Init+0x688>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d02c      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a48      	ldr	r2, [pc, #288]	@ (8004510 <HAL_DMA_Init+0x68c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d027      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a47      	ldr	r2, [pc, #284]	@ (8004514 <HAL_DMA_Init+0x690>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d022      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a45      	ldr	r2, [pc, #276]	@ (8004518 <HAL_DMA_Init+0x694>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01d      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a44      	ldr	r2, [pc, #272]	@ (800451c <HAL_DMA_Init+0x698>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a42      	ldr	r2, [pc, #264]	@ (8004520 <HAL_DMA_Init+0x69c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a41      	ldr	r2, [pc, #260]	@ (8004524 <HAL_DMA_Init+0x6a0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3f      	ldr	r2, [pc, #252]	@ (8004528 <HAL_DMA_Init+0x6a4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3e      	ldr	r2, [pc, #248]	@ (800452c <HAL_DMA_Init+0x6a8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_DMA_Init+0x5be>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3c      	ldr	r2, [pc, #240]	@ (8004530 <HAL_DMA_Init+0x6ac>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_DMA_Init+0x5c2>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_DMA_Init+0x5c4>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d032      	beq.n	80044b2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 fffd 	bl	800644c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b80      	cmp	r3, #128	@ 0x80
 8004458:	d102      	bne.n	8004460 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004474:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_DMA_Init+0x61c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d80c      	bhi.n	80044a0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f002 f87a 	bl	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e008      	b.n	80044b2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	a7fdabf8 	.word	0xa7fdabf8
 80044d0:	cccccccd 	.word	0xcccccccd
 80044d4:	40020010 	.word	0x40020010
 80044d8:	40020028 	.word	0x40020028
 80044dc:	40020040 	.word	0x40020040
 80044e0:	40020058 	.word	0x40020058
 80044e4:	40020070 	.word	0x40020070
 80044e8:	40020088 	.word	0x40020088
 80044ec:	400200a0 	.word	0x400200a0
 80044f0:	400200b8 	.word	0x400200b8
 80044f4:	40020410 	.word	0x40020410
 80044f8:	40020428 	.word	0x40020428
 80044fc:	40020440 	.word	0x40020440
 8004500:	40020458 	.word	0x40020458
 8004504:	40020470 	.word	0x40020470
 8004508:	40020488 	.word	0x40020488
 800450c:	400204a0 	.word	0x400204a0
 8004510:	400204b8 	.word	0x400204b8
 8004514:	58025408 	.word	0x58025408
 8004518:	5802541c 	.word	0x5802541c
 800451c:	58025430 	.word	0x58025430
 8004520:	58025444 	.word	0x58025444
 8004524:	58025458 	.word	0x58025458
 8004528:	5802546c 	.word	0x5802546c
 800452c:	58025480 	.word	0x58025480
 8004530:	58025494 	.word	0x58025494

08004534 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e226      	b.n	800499e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_DMA_Start_IT+0x2a>
 800455a:	2302      	movs	r3, #2
 800455c:	e21f      	b.n	800499e <HAL_DMA_Start_IT+0x46a>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	f040 820a 	bne.w	8004988 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a68      	ldr	r2, [pc, #416]	@ (8004728 <HAL_DMA_Start_IT+0x1f4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a66      	ldr	r2, [pc, #408]	@ (800472c <HAL_DMA_Start_IT+0x1f8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a65      	ldr	r2, [pc, #404]	@ (8004730 <HAL_DMA_Start_IT+0x1fc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a63      	ldr	r2, [pc, #396]	@ (8004734 <HAL_DMA_Start_IT+0x200>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a62      	ldr	r2, [pc, #392]	@ (8004738 <HAL_DMA_Start_IT+0x204>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a60      	ldr	r2, [pc, #384]	@ (800473c <HAL_DMA_Start_IT+0x208>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004740 <HAL_DMA_Start_IT+0x20c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004744 <HAL_DMA_Start_IT+0x210>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004748 <HAL_DMA_Start_IT+0x214>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a5a      	ldr	r2, [pc, #360]	@ (800474c <HAL_DMA_Start_IT+0x218>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a59      	ldr	r2, [pc, #356]	@ (8004750 <HAL_DMA_Start_IT+0x21c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a57      	ldr	r2, [pc, #348]	@ (8004754 <HAL_DMA_Start_IT+0x220>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <HAL_DMA_Start_IT+0x224>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a54      	ldr	r2, [pc, #336]	@ (800475c <HAL_DMA_Start_IT+0x228>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a53      	ldr	r2, [pc, #332]	@ (8004760 <HAL_DMA_Start_IT+0x22c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_Start_IT+0xee>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a51      	ldr	r2, [pc, #324]	@ (8004764 <HAL_DMA_Start_IT+0x230>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <HAL_DMA_Start_IT+0x100>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e007      	b.n	8004644 <HAL_DMA_Start_IT+0x110>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f001 fc24 	bl	8005e98 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a34      	ldr	r2, [pc, #208]	@ (8004728 <HAL_DMA_Start_IT+0x1f4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d04a      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a33      	ldr	r2, [pc, #204]	@ (800472c <HAL_DMA_Start_IT+0x1f8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d045      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a31      	ldr	r2, [pc, #196]	@ (8004730 <HAL_DMA_Start_IT+0x1fc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d040      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a30      	ldr	r2, [pc, #192]	@ (8004734 <HAL_DMA_Start_IT+0x200>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d03b      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <HAL_DMA_Start_IT+0x204>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d036      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2d      	ldr	r2, [pc, #180]	@ (800473c <HAL_DMA_Start_IT+0x208>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d031      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2b      	ldr	r2, [pc, #172]	@ (8004740 <HAL_DMA_Start_IT+0x20c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02c      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2a      	ldr	r2, [pc, #168]	@ (8004744 <HAL_DMA_Start_IT+0x210>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d027      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a28      	ldr	r2, [pc, #160]	@ (8004748 <HAL_DMA_Start_IT+0x214>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d022      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a27      	ldr	r2, [pc, #156]	@ (800474c <HAL_DMA_Start_IT+0x218>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d01d      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a25      	ldr	r2, [pc, #148]	@ (8004750 <HAL_DMA_Start_IT+0x21c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d018      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <HAL_DMA_Start_IT+0x220>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a22      	ldr	r2, [pc, #136]	@ (8004758 <HAL_DMA_Start_IT+0x224>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	@ (800475c <HAL_DMA_Start_IT+0x228>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <HAL_DMA_Start_IT+0x22c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_DMA_Start_IT+0x1bc>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004764 <HAL_DMA_Start_IT+0x230>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d101      	bne.n	80046f4 <HAL_DMA_Start_IT+0x1c0>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_DMA_Start_IT+0x1c2>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d036      	beq.n	8004768 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 021e 	bic.w	r2, r3, #30
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0216 	orr.w	r2, r2, #22
 800470c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d03e      	beq.n	8004794 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0208 	orr.w	r2, r2, #8
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e035      	b.n	8004794 <HAL_DMA_Start_IT+0x260>
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 020e 	bic.w	r2, r3, #14
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 020a 	orr.w	r2, r2, #10
 800477a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0204 	orr.w	r2, r2, #4
 8004792:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a83      	ldr	r2, [pc, #524]	@ (80049a8 <HAL_DMA_Start_IT+0x474>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d072      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a82      	ldr	r2, [pc, #520]	@ (80049ac <HAL_DMA_Start_IT+0x478>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d06d      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a80      	ldr	r2, [pc, #512]	@ (80049b0 <HAL_DMA_Start_IT+0x47c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d068      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7f      	ldr	r2, [pc, #508]	@ (80049b4 <HAL_DMA_Start_IT+0x480>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d063      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a7d      	ldr	r2, [pc, #500]	@ (80049b8 <HAL_DMA_Start_IT+0x484>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d05e      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7c      	ldr	r2, [pc, #496]	@ (80049bc <HAL_DMA_Start_IT+0x488>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d059      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7a      	ldr	r2, [pc, #488]	@ (80049c0 <HAL_DMA_Start_IT+0x48c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d054      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a79      	ldr	r2, [pc, #484]	@ (80049c4 <HAL_DMA_Start_IT+0x490>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d04f      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a77      	ldr	r2, [pc, #476]	@ (80049c8 <HAL_DMA_Start_IT+0x494>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d04a      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a76      	ldr	r2, [pc, #472]	@ (80049cc <HAL_DMA_Start_IT+0x498>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d045      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a74      	ldr	r2, [pc, #464]	@ (80049d0 <HAL_DMA_Start_IT+0x49c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d040      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a73      	ldr	r2, [pc, #460]	@ (80049d4 <HAL_DMA_Start_IT+0x4a0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d03b      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a71      	ldr	r2, [pc, #452]	@ (80049d8 <HAL_DMA_Start_IT+0x4a4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d036      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a70      	ldr	r2, [pc, #448]	@ (80049dc <HAL_DMA_Start_IT+0x4a8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d031      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_DMA_Start_IT+0x4ac>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02c      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6d      	ldr	r2, [pc, #436]	@ (80049e4 <HAL_DMA_Start_IT+0x4b0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d027      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6b      	ldr	r2, [pc, #428]	@ (80049e8 <HAL_DMA_Start_IT+0x4b4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d022      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6a      	ldr	r2, [pc, #424]	@ (80049ec <HAL_DMA_Start_IT+0x4b8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d01d      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a68      	ldr	r2, [pc, #416]	@ (80049f0 <HAL_DMA_Start_IT+0x4bc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a67      	ldr	r2, [pc, #412]	@ (80049f4 <HAL_DMA_Start_IT+0x4c0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a65      	ldr	r2, [pc, #404]	@ (80049f8 <HAL_DMA_Start_IT+0x4c4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a64      	ldr	r2, [pc, #400]	@ (80049fc <HAL_DMA_Start_IT+0x4c8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a62      	ldr	r2, [pc, #392]	@ (8004a00 <HAL_DMA_Start_IT+0x4cc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_DMA_Start_IT+0x350>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a61      	ldr	r2, [pc, #388]	@ (8004a04 <HAL_DMA_Start_IT+0x4d0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_DMA_Start_IT+0x354>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_DMA_Start_IT+0x356>
 8004888:	2300      	movs	r3, #0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01a      	beq.n	80048c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a37      	ldr	r2, [pc, #220]	@ (80049a8 <HAL_DMA_Start_IT+0x474>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d04a      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a36      	ldr	r2, [pc, #216]	@ (80049ac <HAL_DMA_Start_IT+0x478>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d045      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <HAL_DMA_Start_IT+0x47c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d040      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a33      	ldr	r2, [pc, #204]	@ (80049b4 <HAL_DMA_Start_IT+0x480>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d03b      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a31      	ldr	r2, [pc, #196]	@ (80049b8 <HAL_DMA_Start_IT+0x484>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d036      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <HAL_DMA_Start_IT+0x488>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d031      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2e      	ldr	r2, [pc, #184]	@ (80049c0 <HAL_DMA_Start_IT+0x48c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02c      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <HAL_DMA_Start_IT+0x490>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d027      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2b      	ldr	r2, [pc, #172]	@ (80049c8 <HAL_DMA_Start_IT+0x494>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <HAL_DMA_Start_IT+0x498>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d01d      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_DMA_Start_IT+0x49c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a27      	ldr	r2, [pc, #156]	@ (80049d4 <HAL_DMA_Start_IT+0x4a0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a25      	ldr	r2, [pc, #148]	@ (80049d8 <HAL_DMA_Start_IT+0x4a4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a24      	ldr	r2, [pc, #144]	@ (80049dc <HAL_DMA_Start_IT+0x4a8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <HAL_DMA_Start_IT+0x4ac>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_DMA_Start_IT+0x430>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a21      	ldr	r2, [pc, #132]	@ (80049e4 <HAL_DMA_Start_IT+0x4b0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <HAL_DMA_Start_IT+0x442>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e012      	b.n	800499c <HAL_DMA_Start_IT+0x468>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e009      	b.n	800499c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800498e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40020010 	.word	0x40020010
 80049ac:	40020028 	.word	0x40020028
 80049b0:	40020040 	.word	0x40020040
 80049b4:	40020058 	.word	0x40020058
 80049b8:	40020070 	.word	0x40020070
 80049bc:	40020088 	.word	0x40020088
 80049c0:	400200a0 	.word	0x400200a0
 80049c4:	400200b8 	.word	0x400200b8
 80049c8:	40020410 	.word	0x40020410
 80049cc:	40020428 	.word	0x40020428
 80049d0:	40020440 	.word	0x40020440
 80049d4:	40020458 	.word	0x40020458
 80049d8:	40020470 	.word	0x40020470
 80049dc:	40020488 	.word	0x40020488
 80049e0:	400204a0 	.word	0x400204a0
 80049e4:	400204b8 	.word	0x400204b8
 80049e8:	58025408 	.word	0x58025408
 80049ec:	5802541c 	.word	0x5802541c
 80049f0:	58025430 	.word	0x58025430
 80049f4:	58025444 	.word	0x58025444
 80049f8:	58025458 	.word	0x58025458
 80049fc:	5802546c 	.word	0x5802546c
 8004a00:	58025480 	.word	0x58025480
 8004a04:	58025494 	.word	0x58025494

08004a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7ff f8f8 	bl	8003c04 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e2dc      	b.n	8004fda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d008      	beq.n	8004a3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2280      	movs	r2, #128	@ 0x80
 8004a30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e2cd      	b.n	8004fda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a76      	ldr	r2, [pc, #472]	@ (8004c1c <HAL_DMA_Abort+0x214>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04a      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a74      	ldr	r2, [pc, #464]	@ (8004c20 <HAL_DMA_Abort+0x218>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d045      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a73      	ldr	r2, [pc, #460]	@ (8004c24 <HAL_DMA_Abort+0x21c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a71      	ldr	r2, [pc, #452]	@ (8004c28 <HAL_DMA_Abort+0x220>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d03b      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a70      	ldr	r2, [pc, #448]	@ (8004c2c <HAL_DMA_Abort+0x224>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d036      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	@ (8004c30 <HAL_DMA_Abort+0x228>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8004c34 <HAL_DMA_Abort+0x22c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d02c      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6b      	ldr	r2, [pc, #428]	@ (8004c38 <HAL_DMA_Abort+0x230>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d027      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6a      	ldr	r2, [pc, #424]	@ (8004c3c <HAL_DMA_Abort+0x234>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	@ (8004c40 <HAL_DMA_Abort+0x238>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01d      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a67      	ldr	r2, [pc, #412]	@ (8004c44 <HAL_DMA_Abort+0x23c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a65      	ldr	r2, [pc, #404]	@ (8004c48 <HAL_DMA_Abort+0x240>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a64      	ldr	r2, [pc, #400]	@ (8004c4c <HAL_DMA_Abort+0x244>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a62      	ldr	r2, [pc, #392]	@ (8004c50 <HAL_DMA_Abort+0x248>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a61      	ldr	r2, [pc, #388]	@ (8004c54 <HAL_DMA_Abort+0x24c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_Abort+0xd6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8004c58 <HAL_DMA_Abort+0x250>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Abort+0xda>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_DMA_Abort+0xdc>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 021e 	bic.w	r2, r2, #30
 8004af6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e00a      	b.n	8004b26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 020e 	bic.w	r2, r2, #14
 8004b1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c1c <HAL_DMA_Abort+0x214>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d072      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a3a      	ldr	r2, [pc, #232]	@ (8004c20 <HAL_DMA_Abort+0x218>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d06d      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a39      	ldr	r2, [pc, #228]	@ (8004c24 <HAL_DMA_Abort+0x21c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d068      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a37      	ldr	r2, [pc, #220]	@ (8004c28 <HAL_DMA_Abort+0x220>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d063      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a36      	ldr	r2, [pc, #216]	@ (8004c2c <HAL_DMA_Abort+0x224>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d05e      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a34      	ldr	r2, [pc, #208]	@ (8004c30 <HAL_DMA_Abort+0x228>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d059      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a33      	ldr	r2, [pc, #204]	@ (8004c34 <HAL_DMA_Abort+0x22c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d054      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a31      	ldr	r2, [pc, #196]	@ (8004c38 <HAL_DMA_Abort+0x230>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d04f      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a30      	ldr	r2, [pc, #192]	@ (8004c3c <HAL_DMA_Abort+0x234>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d04a      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2e      	ldr	r2, [pc, #184]	@ (8004c40 <HAL_DMA_Abort+0x238>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d045      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004c44 <HAL_DMA_Abort+0x23c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d040      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <HAL_DMA_Abort+0x240>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d03b      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c4c <HAL_DMA_Abort+0x244>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d036      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a28      	ldr	r2, [pc, #160]	@ (8004c50 <HAL_DMA_Abort+0x248>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d031      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a27      	ldr	r2, [pc, #156]	@ (8004c54 <HAL_DMA_Abort+0x24c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d02c      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a25      	ldr	r2, [pc, #148]	@ (8004c58 <HAL_DMA_Abort+0x250>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d027      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a24      	ldr	r2, [pc, #144]	@ (8004c5c <HAL_DMA_Abort+0x254>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	@ (8004c60 <HAL_DMA_Abort+0x258>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	@ (8004c64 <HAL_DMA_Abort+0x25c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c68 <HAL_DMA_Abort+0x260>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <HAL_DMA_Abort+0x264>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c70 <HAL_DMA_Abort+0x268>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <HAL_DMA_Abort+0x26c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_DMA_Abort+0x20e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a19      	ldr	r2, [pc, #100]	@ (8004c78 <HAL_DMA_Abort+0x270>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d132      	bne.n	8004c7c <HAL_DMA_Abort+0x274>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e031      	b.n	8004c7e <HAL_DMA_Abort+0x276>
 8004c1a:	bf00      	nop
 8004c1c:	40020010 	.word	0x40020010
 8004c20:	40020028 	.word	0x40020028
 8004c24:	40020040 	.word	0x40020040
 8004c28:	40020058 	.word	0x40020058
 8004c2c:	40020070 	.word	0x40020070
 8004c30:	40020088 	.word	0x40020088
 8004c34:	400200a0 	.word	0x400200a0
 8004c38:	400200b8 	.word	0x400200b8
 8004c3c:	40020410 	.word	0x40020410
 8004c40:	40020428 	.word	0x40020428
 8004c44:	40020440 	.word	0x40020440
 8004c48:	40020458 	.word	0x40020458
 8004c4c:	40020470 	.word	0x40020470
 8004c50:	40020488 	.word	0x40020488
 8004c54:	400204a0 	.word	0x400204a0
 8004c58:	400204b8 	.word	0x400204b8
 8004c5c:	58025408 	.word	0x58025408
 8004c60:	5802541c 	.word	0x5802541c
 8004c64:	58025430 	.word	0x58025430
 8004c68:	58025444 	.word	0x58025444
 8004c6c:	58025458 	.word	0x58025458
 8004c70:	5802546c 	.word	0x5802546c
 8004c74:	58025480 	.word	0x58025480
 8004c78:	58025494 	.word	0x58025494
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6d      	ldr	r2, [pc, #436]	@ (8004e4c <HAL_DMA_Abort+0x444>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d04a      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e50 <HAL_DMA_Abort+0x448>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d045      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6a      	ldr	r2, [pc, #424]	@ (8004e54 <HAL_DMA_Abort+0x44c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d040      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a68      	ldr	r2, [pc, #416]	@ (8004e58 <HAL_DMA_Abort+0x450>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d03b      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a67      	ldr	r2, [pc, #412]	@ (8004e5c <HAL_DMA_Abort+0x454>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d036      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a65      	ldr	r2, [pc, #404]	@ (8004e60 <HAL_DMA_Abort+0x458>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d031      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a64      	ldr	r2, [pc, #400]	@ (8004e64 <HAL_DMA_Abort+0x45c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d02c      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a62      	ldr	r2, [pc, #392]	@ (8004e68 <HAL_DMA_Abort+0x460>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d027      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a61      	ldr	r2, [pc, #388]	@ (8004e6c <HAL_DMA_Abort+0x464>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5f      	ldr	r2, [pc, #380]	@ (8004e70 <HAL_DMA_Abort+0x468>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01d      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8004e74 <HAL_DMA_Abort+0x46c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a5c      	ldr	r2, [pc, #368]	@ (8004e78 <HAL_DMA_Abort+0x470>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004e7c <HAL_DMA_Abort+0x474>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a59      	ldr	r2, [pc, #356]	@ (8004e80 <HAL_DMA_Abort+0x478>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a58      	ldr	r2, [pc, #352]	@ (8004e84 <HAL_DMA_Abort+0x47c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_DMA_Abort+0x32a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a56      	ldr	r2, [pc, #344]	@ (8004e88 <HAL_DMA_Abort+0x480>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d108      	bne.n	8004d44 <HAL_DMA_Abort+0x33c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	e007      	b.n	8004d54 <HAL_DMA_Abort+0x34c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d54:	e013      	b.n	8004d7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d56:	f7fe ff55 	bl	8003c04 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d90c      	bls.n	8004d7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e12d      	b.n	8004fda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e4c <HAL_DMA_Abort+0x444>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <HAL_DMA_Abort+0x448>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <HAL_DMA_Abort+0x44c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	@ (8004e58 <HAL_DMA_Abort+0x450>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a29      	ldr	r2, [pc, #164]	@ (8004e5c <HAL_DMA_Abort+0x454>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <HAL_DMA_Abort+0x458>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a26      	ldr	r2, [pc, #152]	@ (8004e64 <HAL_DMA_Abort+0x45c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <HAL_DMA_Abort+0x460>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <HAL_DMA_Abort+0x464>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <HAL_DMA_Abort+0x468>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a20      	ldr	r2, [pc, #128]	@ (8004e74 <HAL_DMA_Abort+0x46c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <HAL_DMA_Abort+0x470>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <HAL_DMA_Abort+0x474>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	@ (8004e80 <HAL_DMA_Abort+0x478>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e84 <HAL_DMA_Abort+0x47c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_Abort+0x422>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a18      	ldr	r2, [pc, #96]	@ (8004e88 <HAL_DMA_Abort+0x480>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_DMA_Abort+0x426>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <HAL_DMA_Abort+0x428>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02b      	beq.n	8004e8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	223f      	movs	r2, #63	@ 0x3f
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	e02a      	b.n	8004ea2 <HAL_DMA_Abort+0x49a>
 8004e4c:	40020010 	.word	0x40020010
 8004e50:	40020028 	.word	0x40020028
 8004e54:	40020040 	.word	0x40020040
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	40020070 	.word	0x40020070
 8004e60:	40020088 	.word	0x40020088
 8004e64:	400200a0 	.word	0x400200a0
 8004e68:	400200b8 	.word	0x400200b8
 8004e6c:	40020410 	.word	0x40020410
 8004e70:	40020428 	.word	0x40020428
 8004e74:	40020440 	.word	0x40020440
 8004e78:	40020458 	.word	0x40020458
 8004e7c:	40020470 	.word	0x40020470
 8004e80:	40020488 	.word	0x40020488
 8004e84:	400204a0 	.word	0x400204a0
 8004e88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8004fe4 <HAL_DMA_Abort+0x5dc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d072      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a4d      	ldr	r2, [pc, #308]	@ (8004fe8 <HAL_DMA_Abort+0x5e0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d06d      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4c      	ldr	r2, [pc, #304]	@ (8004fec <HAL_DMA_Abort+0x5e4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d068      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff0 <HAL_DMA_Abort+0x5e8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d063      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a49      	ldr	r2, [pc, #292]	@ (8004ff4 <HAL_DMA_Abort+0x5ec>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d05e      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a47      	ldr	r2, [pc, #284]	@ (8004ff8 <HAL_DMA_Abort+0x5f0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d059      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a46      	ldr	r2, [pc, #280]	@ (8004ffc <HAL_DMA_Abort+0x5f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d054      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a44      	ldr	r2, [pc, #272]	@ (8005000 <HAL_DMA_Abort+0x5f8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04f      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a43      	ldr	r2, [pc, #268]	@ (8005004 <HAL_DMA_Abort+0x5fc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d04a      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a41      	ldr	r2, [pc, #260]	@ (8005008 <HAL_DMA_Abort+0x600>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d045      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a40      	ldr	r2, [pc, #256]	@ (800500c <HAL_DMA_Abort+0x604>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d040      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3e      	ldr	r2, [pc, #248]	@ (8005010 <HAL_DMA_Abort+0x608>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d03b      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005014 <HAL_DMA_Abort+0x60c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d036      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3b      	ldr	r2, [pc, #236]	@ (8005018 <HAL_DMA_Abort+0x610>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d031      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3a      	ldr	r2, [pc, #232]	@ (800501c <HAL_DMA_Abort+0x614>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d02c      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a38      	ldr	r2, [pc, #224]	@ (8005020 <HAL_DMA_Abort+0x618>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d027      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a37      	ldr	r2, [pc, #220]	@ (8005024 <HAL_DMA_Abort+0x61c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a35      	ldr	r2, [pc, #212]	@ (8005028 <HAL_DMA_Abort+0x620>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01d      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a34      	ldr	r2, [pc, #208]	@ (800502c <HAL_DMA_Abort+0x624>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a32      	ldr	r2, [pc, #200]	@ (8005030 <HAL_DMA_Abort+0x628>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a31      	ldr	r2, [pc, #196]	@ (8005034 <HAL_DMA_Abort+0x62c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	@ (8005038 <HAL_DMA_Abort+0x630>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2e      	ldr	r2, [pc, #184]	@ (800503c <HAL_DMA_Abort+0x634>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_DMA_Abort+0x58a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <HAL_DMA_Abort+0x638>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_Abort+0x58e>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_DMA_Abort+0x590>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004fa4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fc6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494

08005044 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	@ 0x28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005050:	4b67      	ldr	r3, [pc, #412]	@ (80051f0 <HAL_DMA_IRQHandler+0x1ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a67      	ldr	r2, [pc, #412]	@ (80051f4 <HAL_DMA_IRQHandler+0x1b0>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0a9b      	lsrs	r3, r3, #10
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005062:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005068:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5f      	ldr	r2, [pc, #380]	@ (80051f8 <HAL_DMA_IRQHandler+0x1b4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d04a      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a5d      	ldr	r2, [pc, #372]	@ (80051fc <HAL_DMA_IRQHandler+0x1b8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d045      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5c      	ldr	r2, [pc, #368]	@ (8005200 <HAL_DMA_IRQHandler+0x1bc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d040      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5a      	ldr	r2, [pc, #360]	@ (8005204 <HAL_DMA_IRQHandler+0x1c0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d03b      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a59      	ldr	r2, [pc, #356]	@ (8005208 <HAL_DMA_IRQHandler+0x1c4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d036      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a57      	ldr	r2, [pc, #348]	@ (800520c <HAL_DMA_IRQHandler+0x1c8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d031      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a56      	ldr	r2, [pc, #344]	@ (8005210 <HAL_DMA_IRQHandler+0x1cc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d02c      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a54      	ldr	r2, [pc, #336]	@ (8005214 <HAL_DMA_IRQHandler+0x1d0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d027      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a53      	ldr	r2, [pc, #332]	@ (8005218 <HAL_DMA_IRQHandler+0x1d4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a51      	ldr	r2, [pc, #324]	@ (800521c <HAL_DMA_IRQHandler+0x1d8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01d      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a50      	ldr	r2, [pc, #320]	@ (8005220 <HAL_DMA_IRQHandler+0x1dc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d018      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005224 <HAL_DMA_IRQHandler+0x1e0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005228 <HAL_DMA_IRQHandler+0x1e4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00e      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a4b      	ldr	r2, [pc, #300]	@ (800522c <HAL_DMA_IRQHandler+0x1e8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d009      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4a      	ldr	r2, [pc, #296]	@ (8005230 <HAL_DMA_IRQHandler+0x1ec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_DMA_IRQHandler+0xd2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a48      	ldr	r2, [pc, #288]	@ (8005234 <HAL_DMA_IRQHandler+0x1f0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <HAL_DMA_IRQHandler+0xd6>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_DMA_IRQHandler+0xd8>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 842b 	beq.w	8005978 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2208      	movs	r2, #8
 800512c:	409a      	lsls	r2, r3
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80a2 	beq.w	800527c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a2e      	ldr	r2, [pc, #184]	@ (80051f8 <HAL_DMA_IRQHandler+0x1b4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d04a      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2d      	ldr	r2, [pc, #180]	@ (80051fc <HAL_DMA_IRQHandler+0x1b8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d045      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2b      	ldr	r2, [pc, #172]	@ (8005200 <HAL_DMA_IRQHandler+0x1bc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d040      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2a      	ldr	r2, [pc, #168]	@ (8005204 <HAL_DMA_IRQHandler+0x1c0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d03b      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a28      	ldr	r2, [pc, #160]	@ (8005208 <HAL_DMA_IRQHandler+0x1c4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d036      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a27      	ldr	r2, [pc, #156]	@ (800520c <HAL_DMA_IRQHandler+0x1c8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d031      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a25      	ldr	r2, [pc, #148]	@ (8005210 <HAL_DMA_IRQHandler+0x1cc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d02c      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a24      	ldr	r2, [pc, #144]	@ (8005214 <HAL_DMA_IRQHandler+0x1d0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d027      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	@ (8005218 <HAL_DMA_IRQHandler+0x1d4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d022      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a21      	ldr	r2, [pc, #132]	@ (800521c <HAL_DMA_IRQHandler+0x1d8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d01d      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005220 <HAL_DMA_IRQHandler+0x1dc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d018      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <HAL_DMA_IRQHandler+0x1e0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005228 <HAL_DMA_IRQHandler+0x1e4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <HAL_DMA_IRQHandler+0x1e8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a19      	ldr	r2, [pc, #100]	@ (8005230 <HAL_DMA_IRQHandler+0x1ec>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x194>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <HAL_DMA_IRQHandler+0x1f0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d12f      	bne.n	8005238 <HAL_DMA_IRQHandler+0x1f4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	bf14      	ite	ne
 80051e6:	2301      	movne	r3, #1
 80051e8:	2300      	moveq	r3, #0
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	e02e      	b.n	800524c <HAL_DMA_IRQHandler+0x208>
 80051ee:	bf00      	nop
 80051f0:	24000000 	.word	0x24000000
 80051f4:	1b4e81b5 	.word	0x1b4e81b5
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf14      	ite	ne
 8005246:	2301      	movne	r3, #1
 8005248:	2300      	moveq	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2208      	movs	r2, #8
 800526a:	409a      	lsls	r2, r3
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	f043 0201 	orr.w	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d06e      	beq.n	8005370 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a69      	ldr	r2, [pc, #420]	@ (800543c <HAL_DMA_IRQHandler+0x3f8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d04a      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a67      	ldr	r2, [pc, #412]	@ (8005440 <HAL_DMA_IRQHandler+0x3fc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d045      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a66      	ldr	r2, [pc, #408]	@ (8005444 <HAL_DMA_IRQHandler+0x400>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d040      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a64      	ldr	r2, [pc, #400]	@ (8005448 <HAL_DMA_IRQHandler+0x404>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d03b      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a63      	ldr	r2, [pc, #396]	@ (800544c <HAL_DMA_IRQHandler+0x408>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d036      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a61      	ldr	r2, [pc, #388]	@ (8005450 <HAL_DMA_IRQHandler+0x40c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d031      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a60      	ldr	r2, [pc, #384]	@ (8005454 <HAL_DMA_IRQHandler+0x410>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d02c      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005458 <HAL_DMA_IRQHandler+0x414>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d027      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a5d      	ldr	r2, [pc, #372]	@ (800545c <HAL_DMA_IRQHandler+0x418>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d022      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a5b      	ldr	r2, [pc, #364]	@ (8005460 <HAL_DMA_IRQHandler+0x41c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01d      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005464 <HAL_DMA_IRQHandler+0x420>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d018      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a58      	ldr	r2, [pc, #352]	@ (8005468 <HAL_DMA_IRQHandler+0x424>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a57      	ldr	r2, [pc, #348]	@ (800546c <HAL_DMA_IRQHandler+0x428>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a55      	ldr	r2, [pc, #340]	@ (8005470 <HAL_DMA_IRQHandler+0x42c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a54      	ldr	r2, [pc, #336]	@ (8005474 <HAL_DMA_IRQHandler+0x430>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2ee>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a52      	ldr	r2, [pc, #328]	@ (8005478 <HAL_DMA_IRQHandler+0x434>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10a      	bne.n	8005348 <HAL_DMA_IRQHandler+0x304>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e003      	b.n	8005350 <HAL_DMA_IRQHandler+0x30c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2201      	movs	r2, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005368:	f043 0202 	orr.w	r2, r3, #2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2204      	movs	r2, #4
 800537a:	409a      	lsls	r2, r3
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 808f 	beq.w	80054a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2c      	ldr	r2, [pc, #176]	@ (800543c <HAL_DMA_IRQHandler+0x3f8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d04a      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2a      	ldr	r2, [pc, #168]	@ (8005440 <HAL_DMA_IRQHandler+0x3fc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d045      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <HAL_DMA_IRQHandler+0x400>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d040      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a27      	ldr	r2, [pc, #156]	@ (8005448 <HAL_DMA_IRQHandler+0x404>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d03b      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a26      	ldr	r2, [pc, #152]	@ (800544c <HAL_DMA_IRQHandler+0x408>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d036      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a24      	ldr	r2, [pc, #144]	@ (8005450 <HAL_DMA_IRQHandler+0x40c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d031      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a23      	ldr	r2, [pc, #140]	@ (8005454 <HAL_DMA_IRQHandler+0x410>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d02c      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a21      	ldr	r2, [pc, #132]	@ (8005458 <HAL_DMA_IRQHandler+0x414>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d027      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a20      	ldr	r2, [pc, #128]	@ (800545c <HAL_DMA_IRQHandler+0x418>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d022      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <HAL_DMA_IRQHandler+0x41c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01d      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005464 <HAL_DMA_IRQHandler+0x420>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d018      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005468 <HAL_DMA_IRQHandler+0x424>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <HAL_DMA_IRQHandler+0x428>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a18      	ldr	r2, [pc, #96]	@ (8005470 <HAL_DMA_IRQHandler+0x42c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a17      	ldr	r2, [pc, #92]	@ (8005474 <HAL_DMA_IRQHandler+0x430>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_DMA_IRQHandler+0x3e2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <HAL_DMA_IRQHandler+0x434>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d12a      	bne.n	800547c <HAL_DMA_IRQHandler+0x438>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e023      	b.n	8005484 <HAL_DMA_IRQHandler+0x440>
 800543c:	40020010 	.word	0x40020010
 8005440:	40020028 	.word	0x40020028
 8005444:	40020040 	.word	0x40020040
 8005448:	40020058 	.word	0x40020058
 800544c:	40020070 	.word	0x40020070
 8005450:	40020088 	.word	0x40020088
 8005454:	400200a0 	.word	0x400200a0
 8005458:	400200b8 	.word	0x400200b8
 800545c:	40020410 	.word	0x40020410
 8005460:	40020428 	.word	0x40020428
 8005464:	40020440 	.word	0x40020440
 8005468:	40020458 	.word	0x40020458
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204a0 	.word	0x400204a0
 8005478:	400204b8 	.word	0x400204b8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2204      	movs	r2, #4
 8005492:	409a      	lsls	r2, r3
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f043 0204 	orr.w	r2, r3, #4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2210      	movs	r2, #16
 80054ae:	409a      	lsls	r2, r3
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a6 	beq.w	8005606 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a85      	ldr	r2, [pc, #532]	@ (80056d4 <HAL_DMA_IRQHandler+0x690>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d04a      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a83      	ldr	r2, [pc, #524]	@ (80056d8 <HAL_DMA_IRQHandler+0x694>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d045      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a82      	ldr	r2, [pc, #520]	@ (80056dc <HAL_DMA_IRQHandler+0x698>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d040      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a80      	ldr	r2, [pc, #512]	@ (80056e0 <HAL_DMA_IRQHandler+0x69c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d03b      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a7f      	ldr	r2, [pc, #508]	@ (80056e4 <HAL_DMA_IRQHandler+0x6a0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d036      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7d      	ldr	r2, [pc, #500]	@ (80056e8 <HAL_DMA_IRQHandler+0x6a4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d031      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a7c      	ldr	r2, [pc, #496]	@ (80056ec <HAL_DMA_IRQHandler+0x6a8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d02c      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a7a      	ldr	r2, [pc, #488]	@ (80056f0 <HAL_DMA_IRQHandler+0x6ac>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d027      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a79      	ldr	r2, [pc, #484]	@ (80056f4 <HAL_DMA_IRQHandler+0x6b0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d022      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a77      	ldr	r2, [pc, #476]	@ (80056f8 <HAL_DMA_IRQHandler+0x6b4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01d      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a76      	ldr	r2, [pc, #472]	@ (80056fc <HAL_DMA_IRQHandler+0x6b8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d018      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a74      	ldr	r2, [pc, #464]	@ (8005700 <HAL_DMA_IRQHandler+0x6bc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a73      	ldr	r2, [pc, #460]	@ (8005704 <HAL_DMA_IRQHandler+0x6c0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00e      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a71      	ldr	r2, [pc, #452]	@ (8005708 <HAL_DMA_IRQHandler+0x6c4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a70      	ldr	r2, [pc, #448]	@ (800570c <HAL_DMA_IRQHandler+0x6c8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_DMA_IRQHandler+0x516>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6e      	ldr	r2, [pc, #440]	@ (8005710 <HAL_DMA_IRQHandler+0x6cc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10a      	bne.n	8005570 <HAL_DMA_IRQHandler+0x52c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e009      	b.n	8005584 <HAL_DMA_IRQHandler+0x540>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d03e      	beq.n	8005606 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	2210      	movs	r2, #16
 8005592:	409a      	lsls	r2, r3
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d024      	beq.n	8005606 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
 80055c4:	e01f      	b.n	8005606 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01b      	beq.n	8005606 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
 80055d6:	e016      	b.n	8005606 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0208 	bic.w	r2, r2, #8
 80055f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2220      	movs	r2, #32
 8005610:	409a      	lsls	r2, r3
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8110 	beq.w	800583c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <HAL_DMA_IRQHandler+0x690>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d04a      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2b      	ldr	r2, [pc, #172]	@ (80056d8 <HAL_DMA_IRQHandler+0x694>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d045      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a29      	ldr	r2, [pc, #164]	@ (80056dc <HAL_DMA_IRQHandler+0x698>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d040      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a28      	ldr	r2, [pc, #160]	@ (80056e0 <HAL_DMA_IRQHandler+0x69c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d03b      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <HAL_DMA_IRQHandler+0x6a0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d036      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a25      	ldr	r2, [pc, #148]	@ (80056e8 <HAL_DMA_IRQHandler+0x6a4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d031      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a23      	ldr	r2, [pc, #140]	@ (80056ec <HAL_DMA_IRQHandler+0x6a8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d02c      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a22      	ldr	r2, [pc, #136]	@ (80056f0 <HAL_DMA_IRQHandler+0x6ac>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d027      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a20      	ldr	r2, [pc, #128]	@ (80056f4 <HAL_DMA_IRQHandler+0x6b0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1f      	ldr	r2, [pc, #124]	@ (80056f8 <HAL_DMA_IRQHandler+0x6b4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d01d      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1d      	ldr	r2, [pc, #116]	@ (80056fc <HAL_DMA_IRQHandler+0x6b8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d018      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1c      	ldr	r2, [pc, #112]	@ (8005700 <HAL_DMA_IRQHandler+0x6bc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1a      	ldr	r2, [pc, #104]	@ (8005704 <HAL_DMA_IRQHandler+0x6c0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00e      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a19      	ldr	r2, [pc, #100]	@ (8005708 <HAL_DMA_IRQHandler+0x6c4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a17      	ldr	r2, [pc, #92]	@ (800570c <HAL_DMA_IRQHandler+0x6c8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_DMA_IRQHandler+0x678>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a16      	ldr	r2, [pc, #88]	@ (8005710 <HAL_DMA_IRQHandler+0x6cc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d12b      	bne.n	8005714 <HAL_DMA_IRQHandler+0x6d0>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bf14      	ite	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	2300      	moveq	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e02a      	b.n	8005728 <HAL_DMA_IRQHandler+0x6e4>
 80056d2:	bf00      	nop
 80056d4:	40020010 	.word	0x40020010
 80056d8:	40020028 	.word	0x40020028
 80056dc:	40020040 	.word	0x40020040
 80056e0:	40020058 	.word	0x40020058
 80056e4:	40020070 	.word	0x40020070
 80056e8:	40020088 	.word	0x40020088
 80056ec:	400200a0 	.word	0x400200a0
 80056f0:	400200b8 	.word	0x400200b8
 80056f4:	40020410 	.word	0x40020410
 80056f8:	40020428 	.word	0x40020428
 80056fc:	40020440 	.word	0x40020440
 8005700:	40020458 	.word	0x40020458
 8005704:	40020470 	.word	0x40020470
 8005708:	40020488 	.word	0x40020488
 800570c:	400204a0 	.word	0x400204a0
 8005710:	400204b8 	.word	0x400204b8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8087 	beq.w	800583c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	2220      	movs	r2, #32
 8005738:	409a      	lsls	r2, r3
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b04      	cmp	r3, #4
 8005748:	d139      	bne.n	80057be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0216 	bic.w	r2, r2, #22
 8005758:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005768:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <HAL_DMA_IRQHandler+0x736>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0208 	bic.w	r2, r2, #8
 8005788:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	223f      	movs	r2, #63	@ 0x3f
 8005794:	409a      	lsls	r2, r3
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 834a 	beq.w	8005e48 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
          }
          return;
 80057bc:	e344      	b.n	8005e48 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d018      	beq.n	80057fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02c      	beq.n	800583c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
 80057ea:	e027      	b.n	800583c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d023      	beq.n	800583c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
 80057fc:	e01e      	b.n	800583c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10f      	bne.n	800582c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0210 	bic.w	r2, r2, #16
 800581a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8306 	beq.w	8005e52 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8088 	beq.w	8005964 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2204      	movs	r2, #4
 8005858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a7a      	ldr	r2, [pc, #488]	@ (8005a4c <HAL_DMA_IRQHandler+0xa08>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d04a      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a79      	ldr	r2, [pc, #484]	@ (8005a50 <HAL_DMA_IRQHandler+0xa0c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d045      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a77      	ldr	r2, [pc, #476]	@ (8005a54 <HAL_DMA_IRQHandler+0xa10>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d040      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a76      	ldr	r2, [pc, #472]	@ (8005a58 <HAL_DMA_IRQHandler+0xa14>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d03b      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a74      	ldr	r2, [pc, #464]	@ (8005a5c <HAL_DMA_IRQHandler+0xa18>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d036      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a73      	ldr	r2, [pc, #460]	@ (8005a60 <HAL_DMA_IRQHandler+0xa1c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d031      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a71      	ldr	r2, [pc, #452]	@ (8005a64 <HAL_DMA_IRQHandler+0xa20>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d02c      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a70      	ldr	r2, [pc, #448]	@ (8005a68 <HAL_DMA_IRQHandler+0xa24>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d027      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a6c <HAL_DMA_IRQHandler+0xa28>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d022      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6d      	ldr	r2, [pc, #436]	@ (8005a70 <HAL_DMA_IRQHandler+0xa2c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d01d      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005a74 <HAL_DMA_IRQHandler+0xa30>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a6a      	ldr	r2, [pc, #424]	@ (8005a78 <HAL_DMA_IRQHandler+0xa34>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a68      	ldr	r2, [pc, #416]	@ (8005a7c <HAL_DMA_IRQHandler+0xa38>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a67      	ldr	r2, [pc, #412]	@ (8005a80 <HAL_DMA_IRQHandler+0xa3c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a65      	ldr	r2, [pc, #404]	@ (8005a84 <HAL_DMA_IRQHandler+0xa40>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_DMA_IRQHandler+0x8b8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a64      	ldr	r2, [pc, #400]	@ (8005a88 <HAL_DMA_IRQHandler+0xa44>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d108      	bne.n	800590e <HAL_DMA_IRQHandler+0x8ca>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e007      	b.n	800591e <HAL_DMA_IRQHandler+0x8da>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005926:	429a      	cmp	r2, r3
 8005928:	d307      	bcc.n	800593a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f2      	bne.n	800591e <HAL_DMA_IRQHandler+0x8da>
 8005938:	e000      	b.n	800593c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800593a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2203      	movs	r2, #3
 800594e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005952:	e003      	b.n	800595c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8272 	beq.w	8005e52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	e26c      	b.n	8005e52 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a43      	ldr	r2, [pc, #268]	@ (8005a8c <HAL_DMA_IRQHandler+0xa48>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a42      	ldr	r2, [pc, #264]	@ (8005a90 <HAL_DMA_IRQHandler+0xa4c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01d      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a40      	ldr	r2, [pc, #256]	@ (8005a94 <HAL_DMA_IRQHandler+0xa50>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a98 <HAL_DMA_IRQHandler+0xa54>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3d      	ldr	r2, [pc, #244]	@ (8005a9c <HAL_DMA_IRQHandler+0xa58>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a3c      	ldr	r2, [pc, #240]	@ (8005aa0 <HAL_DMA_IRQHandler+0xa5c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa4 <HAL_DMA_IRQHandler+0xa60>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x984>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a39      	ldr	r2, [pc, #228]	@ (8005aa8 <HAL_DMA_IRQHandler+0xa64>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_DMA_IRQHandler+0x988>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_DMA_IRQHandler+0x98a>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 823f 	beq.w	8005e52 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2204      	movs	r2, #4
 80059e6:	409a      	lsls	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80cd 	beq.w	8005b8c <HAL_DMA_IRQHandler+0xb48>
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80c7 	beq.w	8005b8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2204      	movs	r2, #4
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d049      	beq.n	8005aac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8210 	beq.w	8005e4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a34:	e20a      	b.n	8005e4c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8206 	beq.w	8005e4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a48:	e200      	b.n	8005e4c <HAL_DMA_IRQHandler+0xe08>
 8005a4a:	bf00      	nop
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	40020058 	.word	0x40020058
 8005a5c:	40020070 	.word	0x40020070
 8005a60:	40020088 	.word	0x40020088
 8005a64:	400200a0 	.word	0x400200a0
 8005a68:	400200b8 	.word	0x400200b8
 8005a6c:	40020410 	.word	0x40020410
 8005a70:	40020428 	.word	0x40020428
 8005a74:	40020440 	.word	0x40020440
 8005a78:	40020458 	.word	0x40020458
 8005a7c:	40020470 	.word	0x40020470
 8005a80:	40020488 	.word	0x40020488
 8005a84:	400204a0 	.word	0x400204a0
 8005a88:	400204b8 	.word	0x400204b8
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d160      	bne.n	8005b78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a7f      	ldr	r2, [pc, #508]	@ (8005cb8 <HAL_DMA_IRQHandler+0xc74>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d04a      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8005cbc <HAL_DMA_IRQHandler+0xc78>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d045      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7c      	ldr	r2, [pc, #496]	@ (8005cc0 <HAL_DMA_IRQHandler+0xc7c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d040      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7a      	ldr	r2, [pc, #488]	@ (8005cc4 <HAL_DMA_IRQHandler+0xc80>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d03b      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a79      	ldr	r2, [pc, #484]	@ (8005cc8 <HAL_DMA_IRQHandler+0xc84>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d036      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a77      	ldr	r2, [pc, #476]	@ (8005ccc <HAL_DMA_IRQHandler+0xc88>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d031      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a76      	ldr	r2, [pc, #472]	@ (8005cd0 <HAL_DMA_IRQHandler+0xc8c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d02c      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a74      	ldr	r2, [pc, #464]	@ (8005cd4 <HAL_DMA_IRQHandler+0xc90>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d027      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a73      	ldr	r2, [pc, #460]	@ (8005cd8 <HAL_DMA_IRQHandler+0xc94>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d022      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a71      	ldr	r2, [pc, #452]	@ (8005cdc <HAL_DMA_IRQHandler+0xc98>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01d      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a70      	ldr	r2, [pc, #448]	@ (8005ce0 <HAL_DMA_IRQHandler+0xc9c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6e      	ldr	r2, [pc, #440]	@ (8005ce4 <HAL_DMA_IRQHandler+0xca0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce8 <HAL_DMA_IRQHandler+0xca4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6b      	ldr	r2, [pc, #428]	@ (8005cec <HAL_DMA_IRQHandler+0xca8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6a      	ldr	r2, [pc, #424]	@ (8005cf0 <HAL_DMA_IRQHandler+0xcac>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xb12>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a68      	ldr	r2, [pc, #416]	@ (8005cf4 <HAL_DMA_IRQHandler+0xcb0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <HAL_DMA_IRQHandler+0xb24>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0208 	bic.w	r2, r2, #8
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e007      	b.n	8005b78 <HAL_DMA_IRQHandler+0xb34>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0204 	bic.w	r2, r2, #4
 8005b76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8165 	beq.w	8005e4c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b8a:	e15f      	b.n	8005e4c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2202      	movs	r2, #2
 8005b96:	409a      	lsls	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80c5 	beq.w	8005d2c <HAL_DMA_IRQHandler+0xce8>
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80bf 	beq.w	8005d2c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d018      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 813a 	beq.w	8005e50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005be4:	e134      	b.n	8005e50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8130 	beq.w	8005e50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bf8:	e12a      	b.n	8005e50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 8089 	bne.w	8005d18 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005cb8 <HAL_DMA_IRQHandler+0xc74>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d04a      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a29      	ldr	r2, [pc, #164]	@ (8005cbc <HAL_DMA_IRQHandler+0xc78>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d045      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a28      	ldr	r2, [pc, #160]	@ (8005cc0 <HAL_DMA_IRQHandler+0xc7c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d040      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a26      	ldr	r2, [pc, #152]	@ (8005cc4 <HAL_DMA_IRQHandler+0xc80>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d03b      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a25      	ldr	r2, [pc, #148]	@ (8005cc8 <HAL_DMA_IRQHandler+0xc84>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d036      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a23      	ldr	r2, [pc, #140]	@ (8005ccc <HAL_DMA_IRQHandler+0xc88>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d031      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a22      	ldr	r2, [pc, #136]	@ (8005cd0 <HAL_DMA_IRQHandler+0xc8c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d02c      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a20      	ldr	r2, [pc, #128]	@ (8005cd4 <HAL_DMA_IRQHandler+0xc90>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d027      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd8 <HAL_DMA_IRQHandler+0xc94>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1d      	ldr	r2, [pc, #116]	@ (8005cdc <HAL_DMA_IRQHandler+0xc98>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce0 <HAL_DMA_IRQHandler+0xc9c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1a      	ldr	r2, [pc, #104]	@ (8005ce4 <HAL_DMA_IRQHandler+0xca0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a19      	ldr	r2, [pc, #100]	@ (8005ce8 <HAL_DMA_IRQHandler+0xca4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a17      	ldr	r2, [pc, #92]	@ (8005cec <HAL_DMA_IRQHandler+0xca8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a16      	ldr	r2, [pc, #88]	@ (8005cf0 <HAL_DMA_IRQHandler+0xcac>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xc62>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a14      	ldr	r2, [pc, #80]	@ (8005cf4 <HAL_DMA_IRQHandler+0xcb0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d128      	bne.n	8005cf8 <HAL_DMA_IRQHandler+0xcb4>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0214 	bic.w	r2, r2, #20
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e027      	b.n	8005d08 <HAL_DMA_IRQHandler+0xcc4>
 8005cb8:	40020010 	.word	0x40020010
 8005cbc:	40020028 	.word	0x40020028
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	40020058 	.word	0x40020058
 8005cc8:	40020070 	.word	0x40020070
 8005ccc:	40020088 	.word	0x40020088
 8005cd0:	400200a0 	.word	0x400200a0
 8005cd4:	400200b8 	.word	0x400200b8
 8005cd8:	40020410 	.word	0x40020410
 8005cdc:	40020428 	.word	0x40020428
 8005ce0:	40020440 	.word	0x40020440
 8005ce4:	40020458 	.word	0x40020458
 8005ce8:	40020470 	.word	0x40020470
 8005cec:	40020488 	.word	0x40020488
 8005cf0:	400204a0 	.word	0x400204a0
 8005cf4:	400204b8 	.word	0x400204b8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 020a 	bic.w	r2, r2, #10
 8005d06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8097 	beq.w	8005e50 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d2a:	e091      	b.n	8005e50 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2208      	movs	r2, #8
 8005d36:	409a      	lsls	r2, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8088 	beq.w	8005e52 <HAL_DMA_IRQHandler+0xe0e>
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8082 	beq.w	8005e52 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a41      	ldr	r2, [pc, #260]	@ (8005e58 <HAL_DMA_IRQHandler+0xe14>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d04a      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e5c <HAL_DMA_IRQHandler+0xe18>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d045      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3e      	ldr	r2, [pc, #248]	@ (8005e60 <HAL_DMA_IRQHandler+0xe1c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d040      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a3c      	ldr	r2, [pc, #240]	@ (8005e64 <HAL_DMA_IRQHandler+0xe20>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d03b      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e68 <HAL_DMA_IRQHandler+0xe24>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d036      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a39      	ldr	r2, [pc, #228]	@ (8005e6c <HAL_DMA_IRQHandler+0xe28>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d031      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a38      	ldr	r2, [pc, #224]	@ (8005e70 <HAL_DMA_IRQHandler+0xe2c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d02c      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a36      	ldr	r2, [pc, #216]	@ (8005e74 <HAL_DMA_IRQHandler+0xe30>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d027      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a35      	ldr	r2, [pc, #212]	@ (8005e78 <HAL_DMA_IRQHandler+0xe34>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a33      	ldr	r2, [pc, #204]	@ (8005e7c <HAL_DMA_IRQHandler+0xe38>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01d      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <HAL_DMA_IRQHandler+0xe3c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a30      	ldr	r2, [pc, #192]	@ (8005e84 <HAL_DMA_IRQHandler+0xe40>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	@ (8005e88 <HAL_DMA_IRQHandler+0xe44>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e8c <HAL_DMA_IRQHandler+0xe48>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2c      	ldr	r2, [pc, #176]	@ (8005e90 <HAL_DMA_IRQHandler+0xe4c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_DMA_IRQHandler+0xdaa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	@ (8005e94 <HAL_DMA_IRQHandler+0xe50>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <HAL_DMA_IRQHandler+0xdbc>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 021c 	bic.w	r2, r2, #28
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e007      	b.n	8005e10 <HAL_DMA_IRQHandler+0xdcc>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 020e 	bic.w	r2, r2, #14
 8005e0e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	e004      	b.n	8005e52 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e50:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e52:	3728      	adds	r7, #40	@ 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40020010 	.word	0x40020010
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020040 	.word	0x40020040
 8005e64:	40020058 	.word	0x40020058
 8005e68:	40020070 	.word	0x40020070
 8005e6c:	40020088 	.word	0x40020088
 8005e70:	400200a0 	.word	0x400200a0
 8005e74:	400200b8 	.word	0x400200b8
 8005e78:	40020410 	.word	0x40020410
 8005e7c:	40020428 	.word	0x40020428
 8005e80:	40020440 	.word	0x40020440
 8005e84:	40020458 	.word	0x40020458
 8005e88:	40020470 	.word	0x40020470
 8005e8c:	40020488 	.word	0x40020488
 8005e90:	400204a0 	.word	0x400204a0
 8005e94:	400204b8 	.word	0x400204b8

08005e98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7f      	ldr	r2, [pc, #508]	@ (80060b4 <DMA_SetConfig+0x21c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d072      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a7d      	ldr	r2, [pc, #500]	@ (80060b8 <DMA_SetConfig+0x220>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d06d      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a7c      	ldr	r2, [pc, #496]	@ (80060bc <DMA_SetConfig+0x224>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d068      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a7a      	ldr	r2, [pc, #488]	@ (80060c0 <DMA_SetConfig+0x228>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d063      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a79      	ldr	r2, [pc, #484]	@ (80060c4 <DMA_SetConfig+0x22c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d05e      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a77      	ldr	r2, [pc, #476]	@ (80060c8 <DMA_SetConfig+0x230>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d059      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a76      	ldr	r2, [pc, #472]	@ (80060cc <DMA_SetConfig+0x234>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d054      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a74      	ldr	r2, [pc, #464]	@ (80060d0 <DMA_SetConfig+0x238>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04f      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a73      	ldr	r2, [pc, #460]	@ (80060d4 <DMA_SetConfig+0x23c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a71      	ldr	r2, [pc, #452]	@ (80060d8 <DMA_SetConfig+0x240>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a70      	ldr	r2, [pc, #448]	@ (80060dc <DMA_SetConfig+0x244>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a6e      	ldr	r2, [pc, #440]	@ (80060e0 <DMA_SetConfig+0x248>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6d      	ldr	r2, [pc, #436]	@ (80060e4 <DMA_SetConfig+0x24c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a6b      	ldr	r2, [pc, #428]	@ (80060e8 <DMA_SetConfig+0x250>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a6a      	ldr	r2, [pc, #424]	@ (80060ec <DMA_SetConfig+0x254>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a68      	ldr	r2, [pc, #416]	@ (80060f0 <DMA_SetConfig+0x258>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a67      	ldr	r2, [pc, #412]	@ (80060f4 <DMA_SetConfig+0x25c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a65      	ldr	r2, [pc, #404]	@ (80060f8 <DMA_SetConfig+0x260>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a64      	ldr	r2, [pc, #400]	@ (80060fc <DMA_SetConfig+0x264>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a62      	ldr	r2, [pc, #392]	@ (8006100 <DMA_SetConfig+0x268>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a61      	ldr	r2, [pc, #388]	@ (8006104 <DMA_SetConfig+0x26c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5f      	ldr	r2, [pc, #380]	@ (8006108 <DMA_SetConfig+0x270>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5e      	ldr	r2, [pc, #376]	@ (800610c <DMA_SetConfig+0x274>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a5c      	ldr	r2, [pc, #368]	@ (8006110 <DMA_SetConfig+0x278>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <DMA_SetConfig+0x10e>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <DMA_SetConfig+0x110>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005fb4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005fc6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a39      	ldr	r2, [pc, #228]	@ (80060b4 <DMA_SetConfig+0x21c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d04a      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a38      	ldr	r2, [pc, #224]	@ (80060b8 <DMA_SetConfig+0x220>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d045      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a36      	ldr	r2, [pc, #216]	@ (80060bc <DMA_SetConfig+0x224>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d040      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <DMA_SetConfig+0x228>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d03b      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a33      	ldr	r2, [pc, #204]	@ (80060c4 <DMA_SetConfig+0x22c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d036      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a32      	ldr	r2, [pc, #200]	@ (80060c8 <DMA_SetConfig+0x230>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d031      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a30      	ldr	r2, [pc, #192]	@ (80060cc <DMA_SetConfig+0x234>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02c      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <DMA_SetConfig+0x238>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d027      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2d      	ldr	r2, [pc, #180]	@ (80060d4 <DMA_SetConfig+0x23c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2c      	ldr	r2, [pc, #176]	@ (80060d8 <DMA_SetConfig+0x240>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2a      	ldr	r2, [pc, #168]	@ (80060dc <DMA_SetConfig+0x244>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a29      	ldr	r2, [pc, #164]	@ (80060e0 <DMA_SetConfig+0x248>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a27      	ldr	r2, [pc, #156]	@ (80060e4 <DMA_SetConfig+0x24c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a26      	ldr	r2, [pc, #152]	@ (80060e8 <DMA_SetConfig+0x250>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a24      	ldr	r2, [pc, #144]	@ (80060ec <DMA_SetConfig+0x254>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a23      	ldr	r2, [pc, #140]	@ (80060f0 <DMA_SetConfig+0x258>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <DMA_SetConfig+0x1d4>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <DMA_SetConfig+0x1d6>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d059      	beq.n	8006126 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	223f      	movs	r2, #63	@ 0x3f
 800607c:	409a      	lsls	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006090:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b40      	cmp	r3, #64	@ 0x40
 80060a0:	d138      	bne.n	8006114 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060b2:	e086      	b.n	80061c2 <DMA_SetConfig+0x32a>
 80060b4:	40020010 	.word	0x40020010
 80060b8:	40020028 	.word	0x40020028
 80060bc:	40020040 	.word	0x40020040
 80060c0:	40020058 	.word	0x40020058
 80060c4:	40020070 	.word	0x40020070
 80060c8:	40020088 	.word	0x40020088
 80060cc:	400200a0 	.word	0x400200a0
 80060d0:	400200b8 	.word	0x400200b8
 80060d4:	40020410 	.word	0x40020410
 80060d8:	40020428 	.word	0x40020428
 80060dc:	40020440 	.word	0x40020440
 80060e0:	40020458 	.word	0x40020458
 80060e4:	40020470 	.word	0x40020470
 80060e8:	40020488 	.word	0x40020488
 80060ec:	400204a0 	.word	0x400204a0
 80060f0:	400204b8 	.word	0x400204b8
 80060f4:	58025408 	.word	0x58025408
 80060f8:	5802541c 	.word	0x5802541c
 80060fc:	58025430 	.word	0x58025430
 8006100:	58025444 	.word	0x58025444
 8006104:	58025458 	.word	0x58025458
 8006108:	5802546c 	.word	0x5802546c
 800610c:	58025480 	.word	0x58025480
 8006110:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]
}
 8006124:	e04d      	b.n	80061c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a29      	ldr	r2, [pc, #164]	@ (80061d0 <DMA_SetConfig+0x338>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d022      	beq.n	8006176 <DMA_SetConfig+0x2de>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a27      	ldr	r2, [pc, #156]	@ (80061d4 <DMA_SetConfig+0x33c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <DMA_SetConfig+0x2de>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a26      	ldr	r2, [pc, #152]	@ (80061d8 <DMA_SetConfig+0x340>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d018      	beq.n	8006176 <DMA_SetConfig+0x2de>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a24      	ldr	r2, [pc, #144]	@ (80061dc <DMA_SetConfig+0x344>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <DMA_SetConfig+0x2de>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a23      	ldr	r2, [pc, #140]	@ (80061e0 <DMA_SetConfig+0x348>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <DMA_SetConfig+0x2de>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a21      	ldr	r2, [pc, #132]	@ (80061e4 <DMA_SetConfig+0x34c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <DMA_SetConfig+0x2de>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a20      	ldr	r2, [pc, #128]	@ (80061e8 <DMA_SetConfig+0x350>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <DMA_SetConfig+0x2de>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <DMA_SetConfig+0x354>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d101      	bne.n	800617a <DMA_SetConfig+0x2e2>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <DMA_SetConfig+0x2e4>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2201      	movs	r2, #1
 800618a:	409a      	lsls	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d108      	bne.n	80061b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	60da      	str	r2, [r3, #12]
}
 80061b0:	e007      	b.n	80061c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	58025408 	.word	0x58025408
 80061d4:	5802541c 	.word	0x5802541c
 80061d8:	58025430 	.word	0x58025430
 80061dc:	58025444 	.word	0x58025444
 80061e0:	58025458 	.word	0x58025458
 80061e4:	5802546c 	.word	0x5802546c
 80061e8:	58025480 	.word	0x58025480
 80061ec:	58025494 	.word	0x58025494

080061f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a42      	ldr	r2, [pc, #264]	@ (8006308 <DMA_CalcBaseAndBitshift+0x118>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04a      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a41      	ldr	r2, [pc, #260]	@ (800630c <DMA_CalcBaseAndBitshift+0x11c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d045      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3f      	ldr	r2, [pc, #252]	@ (8006310 <DMA_CalcBaseAndBitshift+0x120>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d040      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3e      	ldr	r2, [pc, #248]	@ (8006314 <DMA_CalcBaseAndBitshift+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d03b      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3c      	ldr	r2, [pc, #240]	@ (8006318 <DMA_CalcBaseAndBitshift+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d036      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3b      	ldr	r2, [pc, #236]	@ (800631c <DMA_CalcBaseAndBitshift+0x12c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d031      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a39      	ldr	r2, [pc, #228]	@ (8006320 <DMA_CalcBaseAndBitshift+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02c      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a38      	ldr	r2, [pc, #224]	@ (8006324 <DMA_CalcBaseAndBitshift+0x134>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d027      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a36      	ldr	r2, [pc, #216]	@ (8006328 <DMA_CalcBaseAndBitshift+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a35      	ldr	r2, [pc, #212]	@ (800632c <DMA_CalcBaseAndBitshift+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01d      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a33      	ldr	r2, [pc, #204]	@ (8006330 <DMA_CalcBaseAndBitshift+0x140>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a32      	ldr	r2, [pc, #200]	@ (8006334 <DMA_CalcBaseAndBitshift+0x144>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a30      	ldr	r2, [pc, #192]	@ (8006338 <DMA_CalcBaseAndBitshift+0x148>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2f      	ldr	r2, [pc, #188]	@ (800633c <DMA_CalcBaseAndBitshift+0x14c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2d      	ldr	r2, [pc, #180]	@ (8006340 <DMA_CalcBaseAndBitshift+0x150>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2c      	ldr	r2, [pc, #176]	@ (8006344 <DMA_CalcBaseAndBitshift+0x154>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d101      	bne.n	800629c <DMA_CalcBaseAndBitshift+0xac>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <DMA_CalcBaseAndBitshift+0xae>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d024      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	3b10      	subs	r3, #16
 80062aa:	4a27      	ldr	r2, [pc, #156]	@ (8006348 <DMA_CalcBaseAndBitshift+0x158>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	4a24      	ldr	r2, [pc, #144]	@ (800634c <DMA_CalcBaseAndBitshift+0x15c>)
 80062bc:	5cd3      	ldrb	r3, [r2, r3]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d908      	bls.n	80062dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006350 <DMA_CalcBaseAndBitshift+0x160>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80062da:	e00d      	b.n	80062f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <DMA_CalcBaseAndBitshift+0x160>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ea:	e005      	b.n	80062f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40020010 	.word	0x40020010
 800630c:	40020028 	.word	0x40020028
 8006310:	40020040 	.word	0x40020040
 8006314:	40020058 	.word	0x40020058
 8006318:	40020070 	.word	0x40020070
 800631c:	40020088 	.word	0x40020088
 8006320:	400200a0 	.word	0x400200a0
 8006324:	400200b8 	.word	0x400200b8
 8006328:	40020410 	.word	0x40020410
 800632c:	40020428 	.word	0x40020428
 8006330:	40020440 	.word	0x40020440
 8006334:	40020458 	.word	0x40020458
 8006338:	40020470 	.word	0x40020470
 800633c:	40020488 	.word	0x40020488
 8006340:	400204a0 	.word	0x400204a0
 8006344:	400204b8 	.word	0x400204b8
 8006348:	aaaaaaab 	.word	0xaaaaaaab
 800634c:	0801ff1c 	.word	0x0801ff1c
 8006350:	fffffc00 	.word	0xfffffc00

08006354 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d120      	bne.n	80063aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	2b03      	cmp	r3, #3
 800636e:	d858      	bhi.n	8006422 <DMA_CheckFifoParam+0xce>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <DMA_CheckFifoParam+0x24>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	08006389 	.word	0x08006389
 800637c:	0800639b 	.word	0x0800639b
 8006380:	08006389 	.word	0x08006389
 8006384:	08006423 	.word	0x08006423
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d048      	beq.n	8006426 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006398:	e045      	b.n	8006426 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063a2:	d142      	bne.n	800642a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063a8:	e03f      	b.n	800642a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b2:	d123      	bne.n	80063fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d838      	bhi.n	800642e <DMA_CheckFifoParam+0xda>
 80063bc:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <DMA_CheckFifoParam+0x70>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063db 	.word	0x080063db
 80063cc:	080063d5 	.word	0x080063d5
 80063d0:	080063ed 	.word	0x080063ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
        break;
 80063d8:	e030      	b.n	800643c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d025      	beq.n	8006432 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063ea:	e022      	b.n	8006432 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063f4:	d11f      	bne.n	8006436 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063fa:	e01c      	b.n	8006436 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	2b02      	cmp	r3, #2
 8006402:	d902      	bls.n	800640a <DMA_CheckFifoParam+0xb6>
 8006404:	2b03      	cmp	r3, #3
 8006406:	d003      	beq.n	8006410 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006408:	e018      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
        break;
 800640e:	e015      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
    break;
 8006420:	e00b      	b.n	800643a <DMA_CheckFifoParam+0xe6>
        break;
 8006422:	bf00      	nop
 8006424:	e00a      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 8006426:	bf00      	nop
 8006428:	e008      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 800642a:	bf00      	nop
 800642c:	e006      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 800642e:	bf00      	nop
 8006430:	e004      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <DMA_CheckFifoParam+0xe8>
    break;
 800643a:	bf00      	nop
    }
  }

  return status;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a38      	ldr	r2, [pc, #224]	@ (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a36      	ldr	r2, [pc, #216]	@ (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a35      	ldr	r2, [pc, #212]	@ (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a33      	ldr	r2, [pc, #204]	@ (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a32      	ldr	r2, [pc, #200]	@ (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a30      	ldr	r2, [pc, #192]	@ (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2f      	ldr	r2, [pc, #188]	@ (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	@ (800655c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d101      	bne.n	80064ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3b08      	subs	r3, #8
 80064bc:	4a28      	ldr	r2, [pc, #160]	@ (8006560 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	091b      	lsrs	r3, r3, #4
 80064c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4b26      	ldr	r3, [pc, #152]	@ (8006564 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a24      	ldr	r2, [pc, #144]	@ (8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064e8:	e024      	b.n	8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	3b10      	subs	r3, #16
 80064f2:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d806      	bhi.n	8006512 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d902      	bls.n	8006512 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3308      	adds	r3, #8
 8006510:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	@ (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006524:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2201      	movs	r2, #1
 800652e:	409a      	lsls	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	58025408 	.word	0x58025408
 8006544:	5802541c 	.word	0x5802541c
 8006548:	58025430 	.word	0x58025430
 800654c:	58025444 	.word	0x58025444
 8006550:	58025458 	.word	0x58025458
 8006554:	5802546c 	.word	0x5802546c
 8006558:	58025480 	.word	0x58025480
 800655c:	58025494 	.word	0x58025494
 8006560:	cccccccd 	.word	0xcccccccd
 8006564:	16009600 	.word	0x16009600
 8006568:	58025880 	.word	0x58025880
 800656c:	aaaaaaab 	.word	0xaaaaaaab
 8006570:	400204b8 	.word	0x400204b8
 8006574:	4002040f 	.word	0x4002040f
 8006578:	10008200 	.word	0x10008200
 800657c:	40020880 	.word	0x40020880

08006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d04a      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d847      	bhi.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a25      	ldr	r2, [pc, #148]	@ (8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a24      	ldr	r2, [pc, #144]	@ (800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01d      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a22      	ldr	r2, [pc, #136]	@ (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	@ (800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4b17      	ldr	r3, [pc, #92]	@ (8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a15      	ldr	r2, [pc, #84]	@ (800665c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006608:	671a      	str	r2, [r3, #112]	@ 0x70
 800660a:	e009      	b.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4b14      	ldr	r3, [pc, #80]	@ (8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	461a      	mov	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a11      	ldr	r2, [pc, #68]	@ (8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800661e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b01      	subs	r3, #1
 8006624:	2201      	movs	r2, #1
 8006626:	409a      	lsls	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	58025408 	.word	0x58025408
 800663c:	5802541c 	.word	0x5802541c
 8006640:	58025430 	.word	0x58025430
 8006644:	58025444 	.word	0x58025444
 8006648:	58025458 	.word	0x58025458
 800664c:	5802546c 	.word	0x5802546c
 8006650:	58025480 	.word	0x58025480
 8006654:	58025494 	.word	0x58025494
 8006658:	1600963f 	.word	0x1600963f
 800665c:	58025940 	.word	0x58025940
 8006660:	1000823f 	.word	0x1000823f
 8006664:	40020940 	.word	0x40020940

08006668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	@ 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006676:	4b86      	ldr	r3, [pc, #536]	@ (8006890 <HAL_GPIO_Init+0x228>)
 8006678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800667a:	e18c      	b.n	8006996 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2101      	movs	r1, #1
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	4013      	ands	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 817e 	beq.w	8006990 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d005      	beq.n	80066ac <HAL_GPIO_Init+0x44>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d130      	bne.n	800670e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	2203      	movs	r2, #3
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066e2:	2201      	movs	r2, #1
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 0201 	and.w	r2, r3, #1
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b03      	cmp	r3, #3
 8006718:	d017      	beq.n	800674a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	2203      	movs	r2, #3
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	4313      	orrs	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d123      	bne.n	800679e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	08da      	lsrs	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3208      	adds	r2, #8
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	220f      	movs	r2, #15
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4313      	orrs	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	08da      	lsrs	r2, r3, #3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3208      	adds	r2, #8
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 0203 	and.w	r2, r3, #3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80d8 	beq.w	8006990 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006894 <HAL_GPIO_Init+0x22c>)
 80067e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006894 <HAL_GPIO_Init+0x22c>)
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80067f0:	4b28      	ldr	r3, [pc, #160]	@ (8006894 <HAL_GPIO_Init+0x22c>)
 80067f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067fe:	4a26      	ldr	r2, [pc, #152]	@ (8006898 <HAL_GPIO_Init+0x230>)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	089b      	lsrs	r3, r3, #2
 8006804:	3302      	adds	r3, #2
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	220f      	movs	r2, #15
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a1d      	ldr	r2, [pc, #116]	@ (800689c <HAL_GPIO_Init+0x234>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d04a      	beq.n	80068c0 <HAL_GPIO_Init+0x258>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1c      	ldr	r2, [pc, #112]	@ (80068a0 <HAL_GPIO_Init+0x238>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d02b      	beq.n	800688a <HAL_GPIO_Init+0x222>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1b      	ldr	r2, [pc, #108]	@ (80068a4 <HAL_GPIO_Init+0x23c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d025      	beq.n	8006886 <HAL_GPIO_Init+0x21e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1a      	ldr	r2, [pc, #104]	@ (80068a8 <HAL_GPIO_Init+0x240>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01f      	beq.n	8006882 <HAL_GPIO_Init+0x21a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a19      	ldr	r2, [pc, #100]	@ (80068ac <HAL_GPIO_Init+0x244>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d019      	beq.n	800687e <HAL_GPIO_Init+0x216>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a18      	ldr	r2, [pc, #96]	@ (80068b0 <HAL_GPIO_Init+0x248>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_GPIO_Init+0x212>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a17      	ldr	r2, [pc, #92]	@ (80068b4 <HAL_GPIO_Init+0x24c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00d      	beq.n	8006876 <HAL_GPIO_Init+0x20e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a16      	ldr	r2, [pc, #88]	@ (80068b8 <HAL_GPIO_Init+0x250>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d007      	beq.n	8006872 <HAL_GPIO_Init+0x20a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a15      	ldr	r2, [pc, #84]	@ (80068bc <HAL_GPIO_Init+0x254>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d101      	bne.n	800686e <HAL_GPIO_Init+0x206>
 800686a:	2309      	movs	r3, #9
 800686c:	e029      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 800686e:	230a      	movs	r3, #10
 8006870:	e027      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 8006872:	2307      	movs	r3, #7
 8006874:	e025      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 8006876:	2306      	movs	r3, #6
 8006878:	e023      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 800687a:	2305      	movs	r3, #5
 800687c:	e021      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 800687e:	2304      	movs	r3, #4
 8006880:	e01f      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 8006882:	2303      	movs	r3, #3
 8006884:	e01d      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 8006886:	2302      	movs	r3, #2
 8006888:	e01b      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 800688a:	2301      	movs	r3, #1
 800688c:	e019      	b.n	80068c2 <HAL_GPIO_Init+0x25a>
 800688e:	bf00      	nop
 8006890:	58000080 	.word	0x58000080
 8006894:	58024400 	.word	0x58024400
 8006898:	58000400 	.word	0x58000400
 800689c:	58020000 	.word	0x58020000
 80068a0:	58020400 	.word	0x58020400
 80068a4:	58020800 	.word	0x58020800
 80068a8:	58020c00 	.word	0x58020c00
 80068ac:	58021000 	.word	0x58021000
 80068b0:	58021400 	.word	0x58021400
 80068b4:	58021800 	.word	0x58021800
 80068b8:	58021c00 	.word	0x58021c00
 80068bc:	58022400 	.word	0x58022400
 80068c0:	2300      	movs	r3, #0
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	f002 0203 	and.w	r2, r2, #3
 80068c8:	0092      	lsls	r2, r2, #2
 80068ca:	4093      	lsls	r3, r2
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068d2:	4938      	ldr	r1, [pc, #224]	@ (80069b4 <HAL_GPIO_Init+0x34c>)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	089b      	lsrs	r3, r3, #2
 80068d8:	3302      	adds	r3, #2
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	43db      	mvns	r3, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4013      	ands	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006906:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800690e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	43db      	mvns	r3, r3
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	4013      	ands	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006934:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	43db      	mvns	r3, r3
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	4013      	ands	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	43db      	mvns	r3, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	fa22 f303 	lsr.w	r3, r2, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f47f ae6b 	bne.w	800667c <HAL_GPIO_Init+0x14>
  }
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3724      	adds	r7, #36	@ 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	58000400 	.word	0x58000400

080069b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	807b      	strh	r3, [r7, #2]
 80069c4:	4613      	mov	r3, r2
 80069c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069c8:	787b      	ldrb	r3, [r7, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069d4:	e003      	b.n	80069de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069d6:	887b      	ldrh	r3, [r7, #2]
 80069d8:	041a      	lsls	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	619a      	str	r2, [r3, #24]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	4603      	mov	r3, r0
 80069f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7f9 fe9b 	bl	800074c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e08b      	b.n	8006b4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb f806 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2224      	movs	r2, #36	@ 0x24
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0201 	bic.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a96:	609a      	str	r2, [r3, #8]
 8006a98:	e006      	b.n	8006aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d108      	bne.n	8006ac2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006abe:	605a      	str	r2, [r3, #4]
 8006ac0:	e007      	b.n	8006ad2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <HAL_I2C_Init+0x134>)
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69d9      	ldr	r1, [r3, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	02008000 	.word	0x02008000

08006b58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	461a      	mov	r2, r3
 8006b64:	460b      	mov	r3, r1
 8006b66:	817b      	strh	r3, [r7, #10]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	f040 80fd 	bne.w	8006d74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_I2C_Master_Transmit+0x30>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e0f6      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x21e>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b90:	f7fd f838 	bl	8003c04 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2319      	movs	r3, #25
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fa0a 	bl	8006fbc <I2C_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0e1      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2221      	movs	r2, #33	@ 0x21
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	893a      	ldrh	r2, [r7, #8]
 8006bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2bff      	cmp	r3, #255	@ 0xff
 8006be2:	d906      	bls.n	8006bf2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	22ff      	movs	r2, #255	@ 0xff
 8006be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006bea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e007      	b.n	8006c02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d024      	beq.n	8006c54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	3301      	adds	r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	8979      	ldrh	r1, [r7, #10]
 8006c46:	4b4e      	ldr	r3, [pc, #312]	@ (8006d80 <HAL_I2C_Master_Transmit+0x228>)
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fc05 	bl	800745c <I2C_TransferConfig>
 8006c52:	e066      	b.n	8006d22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	8979      	ldrh	r1, [r7, #10]
 8006c5c:	4b48      	ldr	r3, [pc, #288]	@ (8006d80 <HAL_I2C_Master_Transmit+0x228>)
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fbfa 	bl	800745c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006c68:	e05b      	b.n	8006d22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	6a39      	ldr	r1, [r7, #32]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f9fd 	bl	800706e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e07b      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d034      	beq.n	8006d22 <HAL_I2C_Master_Transmit+0x1ca>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d130      	bne.n	8006d22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2180      	movs	r1, #128	@ 0x80
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f976 	bl	8006fbc <I2C_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e04d      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2bff      	cmp	r3, #255	@ 0xff
 8006ce2:	d90e      	bls.n	8006d02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	22ff      	movs	r2, #255	@ 0xff
 8006ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	8979      	ldrh	r1, [r7, #10]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fbae 	bl	800745c <I2C_TransferConfig>
 8006d00:	e00f      	b.n	8006d22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	8979      	ldrh	r1, [r7, #10]
 8006d14:	2300      	movs	r3, #0
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fb9d 	bl	800745c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d19e      	bne.n	8006c6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	6a39      	ldr	r1, [r7, #32]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 f9e3 	bl	80070fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e01a      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2220      	movs	r2, #32
 8006d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6859      	ldr	r1, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b0c      	ldr	r3, [pc, #48]	@ (8006d84 <HAL_I2C_Master_Transmit+0x22c>)
 8006d54:	400b      	ands	r3, r1
 8006d56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e000      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006d74:	2302      	movs	r3, #2
  }
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	80002000 	.word	0x80002000
 8006d84:	fe00e800 	.word	0xfe00e800

08006d88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	461a      	mov	r2, r3
 8006d94:	460b      	mov	r3, r1
 8006d96:	817b      	strh	r3, [r7, #10]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	f040 80db 	bne.w	8006f60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_I2C_Master_Receive+0x30>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e0d4      	b.n	8006f62 <HAL_I2C_Master_Receive+0x1da>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dc0:	f7fc ff20 	bl	8003c04 <HAL_GetTick>
 8006dc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2319      	movs	r3, #25
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f8f2 	bl	8006fbc <I2C_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e0bf      	b.n	8006f62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2222      	movs	r2, #34	@ 0x22
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2210      	movs	r2, #16
 8006dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	893a      	ldrh	r2, [r7, #8]
 8006e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2bff      	cmp	r3, #255	@ 0xff
 8006e12:	d90e      	bls.n	8006e32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	22ff      	movs	r2, #255	@ 0xff
 8006e18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	8979      	ldrh	r1, [r7, #10]
 8006e22:	4b52      	ldr	r3, [pc, #328]	@ (8006f6c <HAL_I2C_Master_Receive+0x1e4>)
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fb16 	bl	800745c <I2C_TransferConfig>
 8006e30:	e06d      	b.n	8006f0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	8979      	ldrh	r1, [r7, #10]
 8006e44:	4b49      	ldr	r3, [pc, #292]	@ (8006f6c <HAL_I2C_Master_Receive+0x1e4>)
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fb05 	bl	800745c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006e52:	e05c      	b.n	8006f0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	6a39      	ldr	r1, [r7, #32]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f993 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e07c      	b.n	8006f62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d034      	beq.n	8006f0e <HAL_I2C_Master_Receive+0x186>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d130      	bne.n	8006f0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2180      	movs	r1, #128	@ 0x80
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f880 	bl	8006fbc <I2C_WaitOnFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e04d      	b.n	8006f62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2bff      	cmp	r3, #255	@ 0xff
 8006ece:	d90e      	bls.n	8006eee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	22ff      	movs	r2, #255	@ 0xff
 8006ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	8979      	ldrh	r1, [r7, #10]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 fab8 	bl	800745c <I2C_TransferConfig>
 8006eec:	e00f      	b.n	8006f0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	8979      	ldrh	r1, [r7, #10]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 faa7 	bl	800745c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d19d      	bne.n	8006e54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	6a39      	ldr	r1, [r7, #32]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f8ed 	bl	80070fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e01a      	b.n	8006f62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2220      	movs	r2, #32
 8006f32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f70 <HAL_I2C_Master_Receive+0x1e8>)
 8006f40:	400b      	ands	r3, r1
 8006f42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	80002400 	.word	0x80002400
 8006f70:	fe00e800 	.word	0xfe00e800

08006f74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d103      	bne.n	8006f92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d007      	beq.n	8006fb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	619a      	str	r2, [r3, #24]
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fcc:	e03b      	b.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f962 	bl	800729c <I2C_IsErrorOccurred>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e041      	b.n	8007066 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d02d      	beq.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fea:	f7fc fe0b 	bl	8003c04 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d302      	bcc.n	8007000 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d122      	bne.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4013      	ands	r3, r2
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	429a      	cmp	r2, r3
 800701c:	d113      	bne.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e00f      	b.n	8007066 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	bf0c      	ite	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	2300      	movne	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	429a      	cmp	r2, r3
 8007062:	d0b4      	beq.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800707a:	e033      	b.n	80070e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f90b 	bl	800729c <I2C_IsErrorOccurred>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e031      	b.n	80070f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007096:	d025      	beq.n	80070e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007098:	f7fc fdb4 	bl	8003c04 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d302      	bcc.n	80070ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11a      	bne.n	80070e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d013      	beq.n	80070e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e007      	b.n	80070f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d1c4      	bne.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007108:	e02f      	b.n	800716a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f8c4 	bl	800729c <I2C_IsErrorOccurred>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e02d      	b.n	800717a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711e:	f7fc fd71 	bl	8003c04 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11a      	bne.n	800716a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b20      	cmp	r3, #32
 8007140:	d013      	beq.n	800716a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007146:	f043 0220 	orr.w	r2, r3, #32
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e007      	b.n	800717a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b20      	cmp	r3, #32
 8007176:	d1c8      	bne.n	800710a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007194:	e071      	b.n	800727a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f87e 	bl	800729c <I2C_IsErrorOccurred>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d13b      	bne.n	8007230 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d138      	bne.n	8007230 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d105      	bne.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b10      	cmp	r3, #16
 80071e4:	d121      	bne.n	800722a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2210      	movs	r2, #16
 80071ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2204      	movs	r2, #4
 80071f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2220      	movs	r2, #32
 80071fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6859      	ldr	r1, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b24      	ldr	r3, [pc, #144]	@ (8007298 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007208:	400b      	ands	r3, r1
 800720a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	75fb      	strb	r3, [r7, #23]
 8007228:	e002      	b.n	8007230 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007230:	f7fc fce8 	bl	8003c04 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d302      	bcc.n	8007246 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d119      	bne.n	800727a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d116      	bne.n	800727a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b04      	cmp	r3, #4
 8007258:	d00f      	beq.n	800727a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725e:	f043 0220 	orr.w	r2, r3, #32
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b04      	cmp	r3, #4
 8007286:	d002      	beq.n	800728e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d083      	beq.n	8007196 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	fe00e800 	.word	0xfe00e800

0800729c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	@ 0x28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d068      	beq.n	800739a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2210      	movs	r2, #16
 80072ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072d0:	e049      	b.n	8007366 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d045      	beq.n	8007366 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80072da:	f7fc fc93 	bl	8003c04 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <I2C_IsErrorOccurred+0x54>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d13a      	bne.n	8007366 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007302:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800730e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007312:	d121      	bne.n	8007358 <I2C_IsErrorOccurred+0xbc>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800731a:	d01d      	beq.n	8007358 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800731c:	7cfb      	ldrb	r3, [r7, #19]
 800731e:	2b20      	cmp	r3, #32
 8007320:	d01a      	beq.n	8007358 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007330:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007332:	f7fc fc67 	bl	8003c04 <HAL_GetTick>
 8007336:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007338:	e00e      	b.n	8007358 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800733a:	f7fc fc63 	bl	8003c04 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b19      	cmp	r3, #25
 8007346:	d907      	bls.n	8007358 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	f043 0320 	orr.w	r3, r3, #32
 800734e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007356:	e006      	b.n	8007366 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b20      	cmp	r3, #32
 8007364:	d1e9      	bne.n	800733a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	2b20      	cmp	r3, #32
 8007372:	d003      	beq.n	800737c <I2C_IsErrorOccurred+0xe0>
 8007374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0aa      	beq.n	80072d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800737c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2220      	movs	r2, #32
 800738a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	f043 0304 	orr.w	r3, r3, #4
 8007392:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	f043 0302 	orr.w	r3, r3, #2
 80073f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01c      	beq.n	800744a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff fdaf 	bl	8006f74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6859      	ldr	r1, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <I2C_IsErrorOccurred+0x1bc>)
 8007422:	400b      	ands	r3, r1
 8007424:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800744a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	@ 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	fe00e800 	.word	0xfe00e800

0800745c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	817b      	strh	r3, [r7, #10]
 800746a:	4613      	mov	r3, r2
 800746c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800746e:	897b      	ldrh	r3, [r7, #10]
 8007470:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007474:	7a7b      	ldrb	r3, [r7, #9]
 8007476:	041b      	lsls	r3, r3, #16
 8007478:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800747c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	4313      	orrs	r3, r2
 8007486:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800748a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	0d5b      	lsrs	r3, r3, #21
 8007496:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800749a:	4b08      	ldr	r3, [pc, #32]	@ (80074bc <I2C_TransferConfig+0x60>)
 800749c:	430b      	orrs	r3, r1
 800749e:	43db      	mvns	r3, r3
 80074a0:	ea02 0103 	and.w	r1, r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	03ff63ff 	.word	0x03ff63ff

080074c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d138      	bne.n	8007548 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e032      	b.n	800754a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	@ 0x24
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007512:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007548:	2302      	movs	r3, #2
  }
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b20      	cmp	r3, #32
 800756a:	d139      	bne.n	80075e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007576:	2302      	movs	r3, #2
 8007578:	e033      	b.n	80075e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2224      	movs	r2, #36	@ 0x24
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	e000      	b.n	80075e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075e0:	2302      	movs	r3, #2
  }
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e11a      	b.n	8007838 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fa fa86 	bl	8001b28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d107      	bne.n	8007642 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0201 	bic.w	r2, r2, #1
 8007640:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2200      	movs	r2, #0
 8007648:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b04      	cmp	r3, #4
 8007650:	d008      	beq.n	8007664 <HAL_I2S_Init+0x74>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b06      	cmp	r3, #6
 8007658:	d004      	beq.n	8007664 <HAL_I2S_Init+0x74>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b0a      	cmp	r3, #10
 8007660:	f040 8094 	bne.w	800778c <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d067      	beq.n	800773c <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8007674:	2302      	movs	r3, #2
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e001      	b.n	800767e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800767a:	2301      	movs	r3, #1
 800767c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b30      	cmp	r3, #48	@ 0x30
 8007684:	d003      	beq.n	800768e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800768a:	2bb0      	cmp	r3, #176	@ 0xb0
 800768c:	d102      	bne.n	8007694 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800768e:	2301      	movs	r3, #1
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	e001      	b.n	8007698 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8007694:	2300      	movs	r3, #0
 8007696:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a68      	ldr	r2, [pc, #416]	@ (8007840 <HAL_I2S_Init+0x250>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d107      	bne.n	80076b2 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80076a2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80076a6:	f04f 0100 	mov.w	r1, #0
 80076aa:	f002 fca1 	bl	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	e006      	b.n	80076c0 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80076b2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80076b6:	f04f 0100 	mov.w	r1, #0
 80076ba:	f002 fc99 	bl	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 80076be:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076c8:	d113      	bne.n	80076f2 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80076ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ec:	3305      	adds	r3, #5
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	e014      	b.n	800771c <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80076f2:	2220      	movs	r2, #32
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	fa22 f303 	lsr.w	r3, r2, r3
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	fb02 f303 	mul.w	r3, r2, r3
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	fbb2 f2f3 	udiv	r2, r2, r3
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	3305      	adds	r3, #5
 800771a:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	4a49      	ldr	r2, [pc, #292]	@ (8007844 <HAL_I2S_Init+0x254>)
 8007720:	fba2 2303 	umull	r2, r3, r2, r3
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e003      	b.n	8007744 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800773c:	2302      	movs	r3, #2
 800773e:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d102      	bne.n	8007750 <HAL_I2S_Init+0x160>
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d002      	beq.n	8007756 <HAL_I2S_Init+0x166>
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2bff      	cmp	r3, #255	@ 0xff
 8007754:	d907      	bls.n	8007766 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775a:	f043 0210 	orr.w	r2, r3, #16
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e068      	b.n	8007838 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 800776c:	2301      	movs	r3, #1
 800776e:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007776:	4b34      	ldr	r3, [pc, #208]	@ (8007848 <HAL_I2S_Init+0x258>)
 8007778:	4013      	ands	r3, r2
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	0411      	lsls	r1, r2, #16
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0612      	lsls	r2, r2, #24
 8007782:	4311      	orrs	r1, r2
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	430b      	orrs	r3, r1
 800778a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007792:	4b2e      	ldr	r3, [pc, #184]	@ (800784c <HAL_I2S_Init+0x25c>)
 8007794:	4013      	ands	r3, r2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6851      	ldr	r1, [r2, #4]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6892      	ldr	r2, [r2, #8]
 800779e:	4311      	orrs	r1, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68d2      	ldr	r2, [r2, #12]
 80077a4:	4311      	orrs	r1, r2
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6992      	ldr	r2, [r2, #24]
 80077aa:	4311      	orrs	r1, r2
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6a12      	ldr	r2, [r2, #32]
 80077b0:	4311      	orrs	r1, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80077b6:	4311      	orrs	r1, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6912      	ldr	r2, [r2, #16]
 80077bc:	430a      	orrs	r2, r1
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80077d2:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80077e2:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69da      	ldr	r2, [r3, #28]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d007      	beq.n	8007812 <HAL_I2S_Init+0x222>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b06      	cmp	r3, #6
 8007808:	d003      	beq.n	8007812 <HAL_I2S_Init+0x222>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b0a      	cmp	r3, #10
 8007810:	d10a      	bne.n	8007828 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	58001400 	.word	0x58001400
 8007844:	cccccccd 	.word	0xcccccccd
 8007848:	fe00ffff 	.word	0xfe00ffff
 800784c:	fdff9040 	.word	0xfdff9040

08007850 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_I2S_Receive_DMA+0x1e>
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e086      	b.n	8007980 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
 8007880:	e07e      	b.n	8007980 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_I2S_Receive_DMA+0x42>
 800788e:	2302      	movs	r3, #2
 8007890:	e076      	b.n	8007980 <HAL_I2S_Receive_DMA+0x130>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2204      	movs	r2, #4
 800789e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	88fa      	ldrh	r2, [r7, #6]
 80078b2:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007988 <HAL_I2S_Receive_DMA+0x138>)
 80078d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d8:	4a2c      	ldr	r2, [pc, #176]	@ (800798c <HAL_I2S_Receive_DMA+0x13c>)
 80078da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007990 <HAL_I2S_Receive_DMA+0x140>)
 80078e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3330      	adds	r3, #48	@ 0x30
 80078ee:	4619      	mov	r1, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f4:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80078fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80078fc:	f7fc fe1a 	bl	8004534 <HAL_DMA_Start_IT>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800790a:	f043 0208 	orr.w	r2, r3, #8
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	e02a      	b.n	8007980 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d107      	bne.n	8007948 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007946:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0201 	orr.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007974:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08007a89 	.word	0x08007a89
 800798c:	08007a47 	.word	0x08007a47
 8007990:	08007aa5 	.word	0x08007aa5

08007994 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079ae:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079be:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00f      	beq.n	80079e8 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd f81b 	bl	8004a08 <HAL_DMA_Abort>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079dc:	f043 0208 	orr.w	r2, r3, #8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00f      	beq.n	8007a10 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd f807 	bl	8004a08 <HAL_DMA_Abort>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a04:	f043 0208 	orr.w	r2, r3, #8
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10e      	bne.n	8007a7a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a6a:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7f9 fc36 	bl	80012ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7f9 fc18 	bl	80012cc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ac0:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ada:	f043 0208 	orr.w	r2, r3, #8
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff ffa5 	bl	8007a32 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e0fe      	b.n	8007d00 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fa fabc 	bl	8002094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2203      	movs	r2, #3
 8007b20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f008 fdc1 	bl	80106b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7c1a      	ldrb	r2, [r3, #16]
 8007b36:	f88d 2000 	strb.w	r2, [sp]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b3e:	f008 fd45 	bl	80105cc <USB_CoreInit>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0d5      	b.n	8007d00 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f008 fdb9 	bl	80106d2 <USB_SetCurrentMode>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e0c6      	b.n	8007d00 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
 8007b76:	e04a      	b.n	8007c0e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b78:	7bfa      	ldrb	r2, [r7, #15]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	3315      	adds	r3, #21
 8007b88:	2201      	movs	r2, #1
 8007b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007b8c:	7bfa      	ldrb	r2, [r7, #15]
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3314      	adds	r3, #20
 8007b9c:	7bfa      	ldrb	r2, [r7, #15]
 8007b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ba0:	7bfa      	ldrb	r2, [r7, #15]
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	b298      	uxth	r0, r3
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	332e      	adds	r3, #46	@ 0x2e
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	3318      	adds	r3, #24
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007bcc:	7bfa      	ldrb	r2, [r7, #15]
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	331c      	adds	r3, #28
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007be0:	7bfa      	ldrb	r2, [r7, #15]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	3320      	adds	r3, #32
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007bf4:	7bfa      	ldrb	r2, [r7, #15]
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	3324      	adds	r3, #36	@ 0x24
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	7bfa      	ldrb	r2, [r7, #15]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3af      	bcc.n	8007b78 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
 8007c1c:	e044      	b.n	8007ca8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c1e:	7bfa      	ldrb	r2, [r7, #15]
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c34:	7bfa      	ldrb	r2, [r7, #15]
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007c46:	7bfa      	ldrb	r2, [r7, #15]
 8007c48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c4a:	7bfa      	ldrb	r2, [r7, #15]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c60:	7bfa      	ldrb	r2, [r7, #15]
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	4613      	mov	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c76:	7bfa      	ldrb	r2, [r7, #15]
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c8c:	7bfa      	ldrb	r2, [r7, #15]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	791b      	ldrb	r3, [r3, #4]
 8007cac:	7bfa      	ldrb	r2, [r7, #15]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d3b5      	bcc.n	8007c1e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7c1a      	ldrb	r2, [r3, #16]
 8007cba:	f88d 2000 	strb.w	r2, [sp]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cc2:	f008 fd53 	bl	801076c <USB_DevInit>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e013      	b.n	8007d00 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7b1b      	ldrb	r3, [r3, #12]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d102      	bne.n	8007cf4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f80a 	bl	8007d08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f008 ff0e 	bl	8010b1a <USB_DevDisconnect>

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d36:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <HAL_PCDEx_ActivateLPM+0x44>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	10000003 	.word	0x10000003

08007d50 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d58:	4b19      	ldr	r3, [pc, #100]	@ (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d00a      	beq.n	8007d7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d64:	4b16      	ldr	r3, [pc, #88]	@ (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d001      	beq.n	8007d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e01f      	b.n	8007db6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e01d      	b.n	8007db6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d7a:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f023 0207 	bic.w	r2, r3, #7
 8007d82:	490f      	ldr	r1, [pc, #60]	@ (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d8a:	f7fb ff3b 	bl	8003c04 <HAL_GetTick>
 8007d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d90:	e009      	b.n	8007da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d92:	f7fb ff37 	bl	8003c04 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007da0:	d901      	bls.n	8007da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e007      	b.n	8007db6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007da6:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db2:	d1ee      	bne.n	8007d92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	58024800 	.word	0x58024800

08007dc4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007dc8:	4b05      	ldr	r3, [pc, #20]	@ (8007de0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	4a04      	ldr	r2, [pc, #16]	@ (8007de0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dd2:	60d3      	str	r3, [r2, #12]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	58024800 	.word	0x58024800

08007de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08c      	sub	sp, #48	@ 0x30
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e3c8      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8087 	beq.w	8007f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e04:	4b88      	ldr	r3, [pc, #544]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e0e:	4b86      	ldr	r3, [pc, #536]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	2b10      	cmp	r3, #16
 8007e18:	d007      	beq.n	8007e2a <HAL_RCC_OscConfig+0x46>
 8007e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1c:	2b18      	cmp	r3, #24
 8007e1e:	d110      	bne.n	8007e42 <HAL_RCC_OscConfig+0x5e>
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d10b      	bne.n	8007e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d06c      	beq.n	8007f10 <HAL_RCC_OscConfig+0x12c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d168      	bne.n	8007f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e3a2      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e4a:	d106      	bne.n	8007e5a <HAL_RCC_OscConfig+0x76>
 8007e4c:	4b76      	ldr	r3, [pc, #472]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a75      	ldr	r2, [pc, #468]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	e02e      	b.n	8007eb8 <HAL_RCC_OscConfig+0xd4>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10c      	bne.n	8007e7c <HAL_RCC_OscConfig+0x98>
 8007e62:	4b71      	ldr	r3, [pc, #452]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a70      	ldr	r2, [pc, #448]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a6d      	ldr	r2, [pc, #436]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e01d      	b.n	8007eb8 <HAL_RCC_OscConfig+0xd4>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e84:	d10c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0xbc>
 8007e86:	4b68      	ldr	r3, [pc, #416]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a67      	ldr	r2, [pc, #412]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	4b65      	ldr	r3, [pc, #404]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a64      	ldr	r2, [pc, #400]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e00b      	b.n	8007eb8 <HAL_RCC_OscConfig+0xd4>
 8007ea0:	4b61      	ldr	r3, [pc, #388]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a60      	ldr	r2, [pc, #384]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	4b5e      	ldr	r3, [pc, #376]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d013      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec0:	f7fb fea0 	bl	8003c04 <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec8:	f7fb fe9c 	bl	8003c04 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	@ 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e356      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eda:	4b53      	ldr	r3, [pc, #332]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0xe4>
 8007ee6:	e014      	b.n	8007f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fb fe8c 	bl	8003c04 <HAL_GetTick>
 8007eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ef0:	f7fb fe88 	bl	8003c04 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b64      	cmp	r3, #100	@ 0x64
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e342      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f02:	4b49      	ldr	r3, [pc, #292]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1f0      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x10c>
 8007f0e:	e000      	b.n	8007f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 808c 	beq.w	8008038 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f20:	4b41      	ldr	r3, [pc, #260]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d007      	beq.n	8007f46 <HAL_RCC_OscConfig+0x162>
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	2b18      	cmp	r3, #24
 8007f3a:	d137      	bne.n	8007fac <HAL_RCC_OscConfig+0x1c8>
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d132      	bne.n	8007fac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f46:	4b38      	ldr	r3, [pc, #224]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_RCC_OscConfig+0x17a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e314      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f5e:	4b32      	ldr	r3, [pc, #200]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f023 0219 	bic.w	r2, r3, #25
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	492f      	ldr	r1, [pc, #188]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f70:	f7fb fe48 	bl	8003c04 <HAL_GetTick>
 8007f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f78:	f7fb fe44 	bl	8003c04 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e2fe      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f8a:	4b27      	ldr	r3, [pc, #156]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f96:	4b24      	ldr	r3, [pc, #144]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	061b      	lsls	r3, r3, #24
 8007fa4:	4920      	ldr	r1, [pc, #128]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007faa:	e045      	b.n	8008038 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d026      	beq.n	8008002 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f023 0219 	bic.w	r2, r3, #25
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4919      	ldr	r1, [pc, #100]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc6:	f7fb fe1d 	bl	8003c04 <HAL_GetTick>
 8007fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fce:	f7fb fe19 	bl	8003c04 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e2d3      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fe0:	4b11      	ldr	r3, [pc, #68]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0f0      	beq.n	8007fce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fec:	4b0e      	ldr	r3, [pc, #56]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	061b      	lsls	r3, r3, #24
 8007ffa:	490b      	ldr	r1, [pc, #44]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	604b      	str	r3, [r1, #4]
 8008000:	e01a      	b.n	8008038 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a08      	ldr	r2, [pc, #32]	@ (8008028 <HAL_RCC_OscConfig+0x244>)
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800e:	f7fb fdf9 	bl	8003c04 <HAL_GetTick>
 8008012:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008014:	e00a      	b.n	800802c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008016:	f7fb fdf5 	bl	8003c04 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d903      	bls.n	800802c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e2af      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
 8008028:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800802c:	4b96      	ldr	r3, [pc, #600]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1ee      	bne.n	8008016 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d06a      	beq.n	800811a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008044:	4b90      	ldr	r3, [pc, #576]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800804c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800804e:	4b8e      	ldr	r3, [pc, #568]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008052:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2b08      	cmp	r3, #8
 8008058:	d007      	beq.n	800806a <HAL_RCC_OscConfig+0x286>
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b18      	cmp	r3, #24
 800805e:	d11b      	bne.n	8008098 <HAL_RCC_OscConfig+0x2b4>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b01      	cmp	r3, #1
 8008068:	d116      	bne.n	8008098 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800806a:	4b87      	ldr	r3, [pc, #540]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_RCC_OscConfig+0x29e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	2b80      	cmp	r3, #128	@ 0x80
 800807c:	d001      	beq.n	8008082 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e282      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008082:	4b81      	ldr	r3, [pc, #516]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	497d      	ldr	r1, [pc, #500]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008096:	e040      	b.n	800811a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d023      	beq.n	80080e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080a0:	4b79      	ldr	r3, [pc, #484]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a78      	ldr	r2, [pc, #480]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ac:	f7fb fdaa 	bl	8003c04 <HAL_GetTick>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080b4:	f7fb fda6 	bl	8003c04 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e260      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080c6:	4b70      	ldr	r3, [pc, #448]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080d2:	4b6d      	ldr	r3, [pc, #436]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	061b      	lsls	r3, r3, #24
 80080e0:	4969      	ldr	r1, [pc, #420]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60cb      	str	r3, [r1, #12]
 80080e6:	e018      	b.n	800811a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080e8:	4b67      	ldr	r3, [pc, #412]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a66      	ldr	r2, [pc, #408]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80080ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f4:	f7fb fd86 	bl	8003c04 <HAL_GetTick>
 80080f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080fc:	f7fb fd82 	bl	8003c04 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e23c      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800810e:	4b5e      	ldr	r3, [pc, #376]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f0      	bne.n	80080fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d036      	beq.n	8008194 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d019      	beq.n	8008162 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800812e:	4b56      	ldr	r3, [pc, #344]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008132:	4a55      	ldr	r2, [pc, #340]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008134:	f043 0301 	orr.w	r3, r3, #1
 8008138:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813a:	f7fb fd63 	bl	8003c04 <HAL_GetTick>
 800813e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008140:	e008      	b.n	8008154 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008142:	f7fb fd5f 	bl	8003c04 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d901      	bls.n	8008154 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e219      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008154:	4b4c      	ldr	r3, [pc, #304]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0f0      	beq.n	8008142 <HAL_RCC_OscConfig+0x35e>
 8008160:	e018      	b.n	8008194 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008162:	4b49      	ldr	r3, [pc, #292]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008166:	4a48      	ldr	r2, [pc, #288]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008168:	f023 0301 	bic.w	r3, r3, #1
 800816c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800816e:	f7fb fd49 	bl	8003c04 <HAL_GetTick>
 8008172:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008176:	f7fb fd45 	bl	8003c04 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e1ff      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008188:	4b3f      	ldr	r3, [pc, #252]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800818a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f0      	bne.n	8008176 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d036      	beq.n	800820e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d019      	beq.n	80081dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081a8:	4b37      	ldr	r3, [pc, #220]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a36      	ldr	r2, [pc, #216]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80081ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081b4:	f7fb fd26 	bl	8003c04 <HAL_GetTick>
 80081b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081ba:	e008      	b.n	80081ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081bc:	f7fb fd22 	bl	8003c04 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e1dc      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f0      	beq.n	80081bc <HAL_RCC_OscConfig+0x3d8>
 80081da:	e018      	b.n	800820e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a29      	ldr	r2, [pc, #164]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 80081e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081e8:	f7fb fd0c 	bl	8003c04 <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081f0:	f7fb fd08 	bl	8003c04 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e1c2      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008202:	4b21      	ldr	r3, [pc, #132]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f0      	bne.n	80081f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8086 	beq.w	8008328 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800821c:	4b1b      	ldr	r3, [pc, #108]	@ (800828c <HAL_RCC_OscConfig+0x4a8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1a      	ldr	r2, [pc, #104]	@ (800828c <HAL_RCC_OscConfig+0x4a8>)
 8008222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008228:	f7fb fcec 	bl	8003c04 <HAL_GetTick>
 800822c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800822e:	e008      	b.n	8008242 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008230:	f7fb fce8 	bl	8003c04 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b64      	cmp	r3, #100	@ 0x64
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e1a2      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008242:	4b12      	ldr	r3, [pc, #72]	@ (800828c <HAL_RCC_OscConfig+0x4a8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0f0      	beq.n	8008230 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d106      	bne.n	8008264 <HAL_RCC_OscConfig+0x480>
 8008256:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825a:	4a0b      	ldr	r2, [pc, #44]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	6713      	str	r3, [r2, #112]	@ 0x70
 8008262:	e032      	b.n	80082ca <HAL_RCC_OscConfig+0x4e6>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d111      	bne.n	8008290 <HAL_RCC_OscConfig+0x4ac>
 800826c:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a05      	ldr	r2, [pc, #20]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 8008272:	f023 0301 	bic.w	r3, r3, #1
 8008276:	6713      	str	r3, [r2, #112]	@ 0x70
 8008278:	4b03      	ldr	r3, [pc, #12]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827c:	4a02      	ldr	r2, [pc, #8]	@ (8008288 <HAL_RCC_OscConfig+0x4a4>)
 800827e:	f023 0304 	bic.w	r3, r3, #4
 8008282:	6713      	str	r3, [r2, #112]	@ 0x70
 8008284:	e021      	b.n	80082ca <HAL_RCC_OscConfig+0x4e6>
 8008286:	bf00      	nop
 8008288:	58024400 	.word	0x58024400
 800828c:	58024800 	.word	0x58024800
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b05      	cmp	r3, #5
 8008296:	d10c      	bne.n	80082b2 <HAL_RCC_OscConfig+0x4ce>
 8008298:	4b83      	ldr	r3, [pc, #524]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829c:	4a82      	ldr	r2, [pc, #520]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800829e:	f043 0304 	orr.w	r3, r3, #4
 80082a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a4:	4b80      	ldr	r3, [pc, #512]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a8:	4a7f      	ldr	r2, [pc, #508]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80082b0:	e00b      	b.n	80082ca <HAL_RCC_OscConfig+0x4e6>
 80082b2:	4b7d      	ldr	r3, [pc, #500]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b6:	4a7c      	ldr	r2, [pc, #496]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80082be:	4b7a      	ldr	r3, [pc, #488]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c2:	4a79      	ldr	r2, [pc, #484]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082c4:	f023 0304 	bic.w	r3, r3, #4
 80082c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d015      	beq.n	80082fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d2:	f7fb fc97 	bl	8003c04 <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082d8:	e00a      	b.n	80082f0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082da:	f7fb fc93 	bl	8003c04 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e14b      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082f0:	4b6d      	ldr	r3, [pc, #436]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80082f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0ee      	beq.n	80082da <HAL_RCC_OscConfig+0x4f6>
 80082fc:	e014      	b.n	8008328 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fe:	f7fb fc81 	bl	8003c04 <HAL_GetTick>
 8008302:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008304:	e00a      	b.n	800831c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008306:	f7fb fc7d 	bl	8003c04 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008314:	4293      	cmp	r3, r2
 8008316:	d901      	bls.n	800831c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e135      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800831c:	4b62      	ldr	r3, [pc, #392]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800831e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1ee      	bne.n	8008306 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 812a 	beq.w	8008586 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008332:	4b5d      	ldr	r3, [pc, #372]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800833a:	2b18      	cmp	r3, #24
 800833c:	f000 80ba 	beq.w	80084b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	2b02      	cmp	r3, #2
 8008346:	f040 8095 	bne.w	8008474 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800834a:	4b57      	ldr	r3, [pc, #348]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a56      	ldr	r2, [pc, #344]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008350:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008356:	f7fb fc55 	bl	8003c04 <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800835e:	f7fb fc51 	bl	8003c04 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e10b      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008370:	4b4d      	ldr	r3, [pc, #308]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800837c:	4b4a      	ldr	r3, [pc, #296]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800837e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008380:	4b4a      	ldr	r3, [pc, #296]	@ (80084ac <HAL_RCC_OscConfig+0x6c8>)
 8008382:	4013      	ands	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800838c:	0112      	lsls	r2, r2, #4
 800838e:	430a      	orrs	r2, r1
 8008390:	4945      	ldr	r1, [pc, #276]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008392:	4313      	orrs	r3, r2
 8008394:	628b      	str	r3, [r1, #40]	@ 0x28
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839a:	3b01      	subs	r3, #1
 800839c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a4:	3b01      	subs	r3, #1
 80083a6:	025b      	lsls	r3, r3, #9
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	3b01      	subs	r3, #1
 80083b2:	041b      	lsls	r3, r3, #16
 80083b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083be:	3b01      	subs	r3, #1
 80083c0:	061b      	lsls	r3, r3, #24
 80083c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083c6:	4938      	ldr	r1, [pc, #224]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083cc:	4b36      	ldr	r3, [pc, #216]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	4a35      	ldr	r2, [pc, #212]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083d8:	4b33      	ldr	r3, [pc, #204]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083dc:	4b34      	ldr	r3, [pc, #208]	@ (80084b0 <HAL_RCC_OscConfig+0x6cc>)
 80083de:	4013      	ands	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80083e4:	00d2      	lsls	r2, r2, #3
 80083e6:	4930      	ldr	r1, [pc, #192]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083ec:	4b2e      	ldr	r3, [pc, #184]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f0:	f023 020c 	bic.w	r2, r3, #12
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	492b      	ldr	r1, [pc, #172]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083fe:	4b2a      	ldr	r3, [pc, #168]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008402:	f023 0202 	bic.w	r2, r3, #2
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840a:	4927      	ldr	r1, [pc, #156]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800840c:	4313      	orrs	r3, r2
 800840e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008410:	4b25      	ldr	r3, [pc, #148]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	4a24      	ldr	r2, [pc, #144]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800841a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841c:	4b22      	ldr	r3, [pc, #136]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800841e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008420:	4a21      	ldr	r2, [pc, #132]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008428:	4b1f      	ldr	r3, [pc, #124]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842c:	4a1e      	ldr	r2, [pc, #120]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800842e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008434:	4b1c      	ldr	r3, [pc, #112]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008438:	4a1b      	ldr	r2, [pc, #108]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	f043 0301 	orr.w	r3, r3, #1
 800843e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008440:	4b19      	ldr	r3, [pc, #100]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a18      	ldr	r2, [pc, #96]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800844a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844c:	f7fb fbda 	bl	8003c04 <HAL_GetTick>
 8008450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008452:	e008      	b.n	8008466 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008454:	f7fb fbd6 	bl	8003c04 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e090      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008466:	4b10      	ldr	r3, [pc, #64]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0f0      	beq.n	8008454 <HAL_RCC_OscConfig+0x670>
 8008472:	e088      	b.n	8008586 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008474:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a0b      	ldr	r2, [pc, #44]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800847a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800847e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008480:	f7fb fbc0 	bl	8003c04 <HAL_GetTick>
 8008484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008486:	e008      	b.n	800849a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008488:	f7fb fbbc 	bl	8003c04 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e076      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800849a:	4b03      	ldr	r3, [pc, #12]	@ (80084a8 <HAL_RCC_OscConfig+0x6c4>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f0      	bne.n	8008488 <HAL_RCC_OscConfig+0x6a4>
 80084a6:	e06e      	b.n	8008586 <HAL_RCC_OscConfig+0x7a2>
 80084a8:	58024400 	.word	0x58024400
 80084ac:	fffffc0c 	.word	0xfffffc0c
 80084b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084b4:	4b36      	ldr	r3, [pc, #216]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084ba:	4b35      	ldr	r3, [pc, #212]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d031      	beq.n	800852c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f003 0203 	and.w	r2, r3, #3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d12a      	bne.n	800852c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d122      	bne.n	800852c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d11a      	bne.n	800852c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	0a5b      	lsrs	r3, r3, #9
 80084fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008502:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008504:	429a      	cmp	r2, r3
 8008506:	d111      	bne.n	800852c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008516:	429a      	cmp	r2, r3
 8008518:	d108      	bne.n	800852c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	0e1b      	lsrs	r3, r3, #24
 800851e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008526:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008528:	429a      	cmp	r2, r3
 800852a:	d001      	beq.n	8008530 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e02b      	b.n	8008588 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008530:	4b17      	ldr	r3, [pc, #92]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 8008532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008534:	08db      	lsrs	r3, r3, #3
 8008536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800853a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	429a      	cmp	r2, r3
 8008544:	d01f      	beq.n	8008586 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008546:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	4a11      	ldr	r2, [pc, #68]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008552:	f7fb fb57 	bl	8003c04 <HAL_GetTick>
 8008556:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008558:	bf00      	nop
 800855a:	f7fb fb53 	bl	8003c04 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	4293      	cmp	r3, r2
 8008564:	d0f9      	beq.n	800855a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008566:	4b0a      	ldr	r3, [pc, #40]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 8008568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800856a:	4b0a      	ldr	r3, [pc, #40]	@ (8008594 <HAL_RCC_OscConfig+0x7b0>)
 800856c:	4013      	ands	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008572:	00d2      	lsls	r2, r2, #3
 8008574:	4906      	ldr	r1, [pc, #24]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 8008576:	4313      	orrs	r3, r2
 8008578:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800857a:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 800857c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857e:	4a04      	ldr	r2, [pc, #16]	@ (8008590 <HAL_RCC_OscConfig+0x7ac>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3730      	adds	r7, #48	@ 0x30
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	58024400 	.word	0x58024400
 8008594:	ffff0007 	.word	0xffff0007

08008598 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e19c      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085ac:	4b8a      	ldr	r3, [pc, #552]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d910      	bls.n	80085dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ba:	4b87      	ldr	r3, [pc, #540]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f023 020f 	bic.w	r2, r3, #15
 80085c2:	4985      	ldr	r1, [pc, #532]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ca:	4b83      	ldr	r3, [pc, #524]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d001      	beq.n	80085dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e184      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	4b7b      	ldr	r3, [pc, #492]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d908      	bls.n	800860a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085f8:	4b78      	ldr	r3, [pc, #480]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	4975      	ldr	r1, [pc, #468]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008606:	4313      	orrs	r3, r2
 8008608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d010      	beq.n	8008638 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	4b70      	ldr	r3, [pc, #448]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008622:	429a      	cmp	r2, r3
 8008624:	d908      	bls.n	8008638 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008626:	4b6d      	ldr	r3, [pc, #436]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	496a      	ldr	r1, [pc, #424]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008634:	4313      	orrs	r3, r2
 8008636:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	d010      	beq.n	8008666 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699a      	ldr	r2, [r3, #24]
 8008648:	4b64      	ldr	r3, [pc, #400]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008650:	429a      	cmp	r2, r3
 8008652:	d908      	bls.n	8008666 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008654:	4b61      	ldr	r3, [pc, #388]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	495e      	ldr	r1, [pc, #376]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008662:	4313      	orrs	r3, r2
 8008664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	4b59      	ldr	r3, [pc, #356]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800867e:	429a      	cmp	r2, r3
 8008680:	d908      	bls.n	8008694 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008682:	4b56      	ldr	r3, [pc, #344]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	4953      	ldr	r1, [pc, #332]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008690:	4313      	orrs	r3, r2
 8008692:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d010      	beq.n	80086c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	4b4d      	ldr	r3, [pc, #308]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d908      	bls.n	80086c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086b0:	4b4a      	ldr	r3, [pc, #296]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f023 020f 	bic.w	r2, r3, #15
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	4947      	ldr	r1, [pc, #284]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d055      	beq.n	800877a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086ce:	4b43      	ldr	r3, [pc, #268]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	4940      	ldr	r1, [pc, #256]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d107      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086e8:	4b3c      	ldr	r3, [pc, #240]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d121      	bne.n	8008738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0f6      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d107      	bne.n	8008710 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008700:	4b36      	ldr	r3, [pc, #216]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d115      	bne.n	8008738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0ea      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d107      	bne.n	8008728 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008718:	4b30      	ldr	r3, [pc, #192]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d109      	bne.n	8008738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e0de      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008728:	4b2c      	ldr	r3, [pc, #176]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0d6      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008738:	4b28      	ldr	r3, [pc, #160]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	f023 0207 	bic.w	r2, r3, #7
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4925      	ldr	r1, [pc, #148]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008746:	4313      	orrs	r3, r2
 8008748:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800874a:	f7fb fa5b 	bl	8003c04 <HAL_GetTick>
 800874e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008750:	e00a      	b.n	8008768 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008752:	f7fb fa57 	bl	8003c04 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008760:	4293      	cmp	r3, r2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e0be      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008768:	4b1c      	ldr	r3, [pc, #112]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	429a      	cmp	r2, r3
 8008778:	d1eb      	bne.n	8008752 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d010      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	4b14      	ldr	r3, [pc, #80]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	429a      	cmp	r2, r3
 8008794:	d208      	bcs.n	80087a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008796:	4b11      	ldr	r3, [pc, #68]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f023 020f 	bic.w	r2, r3, #15
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	490e      	ldr	r1, [pc, #56]	@ (80087dc <HAL_RCC_ClockConfig+0x244>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d214      	bcs.n	80087e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b6:	4b08      	ldr	r3, [pc, #32]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f023 020f 	bic.w	r2, r3, #15
 80087be:	4906      	ldr	r1, [pc, #24]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c6:	4b04      	ldr	r3, [pc, #16]	@ (80087d8 <HAL_RCC_ClockConfig+0x240>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 030f 	and.w	r3, r3, #15
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d005      	beq.n	80087e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e086      	b.n	80088e6 <HAL_RCC_ClockConfig+0x34e>
 80087d8:	52002000 	.word	0x52002000
 80087dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	4b3f      	ldr	r3, [pc, #252]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d208      	bcs.n	800880e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087fc:	4b3c      	ldr	r3, [pc, #240]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	4939      	ldr	r1, [pc, #228]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 800880a:	4313      	orrs	r3, r2
 800880c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0308 	and.w	r3, r3, #8
 8008816:	2b00      	cmp	r3, #0
 8008818:	d010      	beq.n	800883c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	695a      	ldr	r2, [r3, #20]
 800881e:	4b34      	ldr	r3, [pc, #208]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008826:	429a      	cmp	r2, r3
 8008828:	d208      	bcs.n	800883c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800882a:	4b31      	ldr	r3, [pc, #196]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	492e      	ldr	r1, [pc, #184]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 8008838:	4313      	orrs	r3, r2
 800883a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0310 	and.w	r3, r3, #16
 8008844:	2b00      	cmp	r3, #0
 8008846:	d010      	beq.n	800886a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	4b28      	ldr	r3, [pc, #160]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008854:	429a      	cmp	r2, r3
 8008856:	d208      	bcs.n	800886a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008858:	4b25      	ldr	r3, [pc, #148]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	4922      	ldr	r1, [pc, #136]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 8008866:	4313      	orrs	r3, r2
 8008868:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d010      	beq.n	8008898 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	4b1d      	ldr	r3, [pc, #116]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008882:	429a      	cmp	r2, r3
 8008884:	d208      	bcs.n	8008898 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008886:	4b1a      	ldr	r3, [pc, #104]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	4917      	ldr	r1, [pc, #92]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 8008894:	4313      	orrs	r3, r2
 8008896:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008898:	f000 f834 	bl	8008904 <HAL_RCC_GetSysClockFreq>
 800889c:	4602      	mov	r2, r0
 800889e:	4b14      	ldr	r3, [pc, #80]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	0a1b      	lsrs	r3, r3, #8
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	4912      	ldr	r1, [pc, #72]	@ (80088f4 <HAL_RCC_ClockConfig+0x35c>)
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	fa22 f303 	lsr.w	r3, r2, r3
 80088b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088b6:	4b0e      	ldr	r3, [pc, #56]	@ (80088f0 <HAL_RCC_ClockConfig+0x358>)
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	4a0d      	ldr	r2, [pc, #52]	@ (80088f4 <HAL_RCC_ClockConfig+0x35c>)
 80088c0:	5cd3      	ldrb	r3, [r2, r3]
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	fa22 f303 	lsr.w	r3, r2, r3
 80088cc:	4a0a      	ldr	r2, [pc, #40]	@ (80088f8 <HAL_RCC_ClockConfig+0x360>)
 80088ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088d0:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <HAL_RCC_ClockConfig+0x364>)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008900 <HAL_RCC_ClockConfig+0x368>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fb f948 	bl	8003b70 <HAL_InitTick>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	58024400 	.word	0x58024400
 80088f4:	0801fefc 	.word	0x0801fefc
 80088f8:	24000004 	.word	0x24000004
 80088fc:	24000000 	.word	0x24000000
 8008900:	24000008 	.word	0x24000008

08008904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008904:	b480      	push	{r7}
 8008906:	b089      	sub	sp, #36	@ 0x24
 8008908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800890a:	4bb3      	ldr	r3, [pc, #716]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008912:	2b18      	cmp	r3, #24
 8008914:	f200 8155 	bhi.w	8008bc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008918:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <HAL_RCC_GetSysClockFreq+0x1c>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008985 	.word	0x08008985
 8008924:	08008bc3 	.word	0x08008bc3
 8008928:	08008bc3 	.word	0x08008bc3
 800892c:	08008bc3 	.word	0x08008bc3
 8008930:	08008bc3 	.word	0x08008bc3
 8008934:	08008bc3 	.word	0x08008bc3
 8008938:	08008bc3 	.word	0x08008bc3
 800893c:	08008bc3 	.word	0x08008bc3
 8008940:	080089ab 	.word	0x080089ab
 8008944:	08008bc3 	.word	0x08008bc3
 8008948:	08008bc3 	.word	0x08008bc3
 800894c:	08008bc3 	.word	0x08008bc3
 8008950:	08008bc3 	.word	0x08008bc3
 8008954:	08008bc3 	.word	0x08008bc3
 8008958:	08008bc3 	.word	0x08008bc3
 800895c:	08008bc3 	.word	0x08008bc3
 8008960:	080089b1 	.word	0x080089b1
 8008964:	08008bc3 	.word	0x08008bc3
 8008968:	08008bc3 	.word	0x08008bc3
 800896c:	08008bc3 	.word	0x08008bc3
 8008970:	08008bc3 	.word	0x08008bc3
 8008974:	08008bc3 	.word	0x08008bc3
 8008978:	08008bc3 	.word	0x08008bc3
 800897c:	08008bc3 	.word	0x08008bc3
 8008980:	080089b7 	.word	0x080089b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008984:	4b94      	ldr	r3, [pc, #592]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008990:	4b91      	ldr	r3, [pc, #580]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	4a90      	ldr	r2, [pc, #576]	@ (8008bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80089a2:	e111      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089a4:	4b8d      	ldr	r3, [pc, #564]	@ (8008bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089a6:	61bb      	str	r3, [r7, #24]
      break;
 80089a8:	e10e      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80089aa:	4b8d      	ldr	r3, [pc, #564]	@ (8008be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089ac:	61bb      	str	r3, [r7, #24]
      break;
 80089ae:	e10b      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089b0:	4b8c      	ldr	r3, [pc, #560]	@ (8008be4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089b2:	61bb      	str	r3, [r7, #24]
      break;
 80089b4:	e108      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089b6:	4b88      	ldr	r3, [pc, #544]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089c0:	4b85      	ldr	r3, [pc, #532]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	091b      	lsrs	r3, r3, #4
 80089c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089cc:	4b82      	ldr	r3, [pc, #520]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089d6:	4b80      	ldr	r3, [pc, #512]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089da:	08db      	lsrs	r3, r3, #3
 80089dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	fb02 f303 	mul.w	r3, r2, r3
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80e1 	beq.w	8008bbc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	f000 8083 	beq.w	8008b08 <HAL_RCC_GetSysClockFreq+0x204>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	f200 80a1 	bhi.w	8008b4c <HAL_RCC_GetSysClockFreq+0x248>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_RCC_GetSysClockFreq+0x114>
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d056      	beq.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a16:	e099      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a18:	4b6f      	ldr	r3, [pc, #444]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d02d      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a24:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	08db      	lsrs	r3, r3, #3
 8008a2a:	f003 0303 	and.w	r3, r3, #3
 8008a2e:	4a6b      	ldr	r2, [pc, #428]	@ (8008bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
 8008a34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b62      	ldr	r3, [pc, #392]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a7e:	e087      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008bec <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b51      	ldr	r3, [pc, #324]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ac2:	e065      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b40      	ldr	r3, [pc, #256]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b06:	e043      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008bf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b4a:	e021      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b90:	4b11      	ldr	r3, [pc, #68]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b94:	0a5b      	lsrs	r3, r3, #9
 8008b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	ee07 3a90 	vmov	s15, r3
 8008ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb4:	ee17 3a90 	vmov	r3, s15
 8008bb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008bba:	e005      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
      break;
 8008bc0:	e002      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bc2:	4b07      	ldr	r3, [pc, #28]	@ (8008be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bc4:	61bb      	str	r3, [r7, #24]
      break;
 8008bc6:	bf00      	nop
  }

  return sysclockfreq;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3724      	adds	r7, #36	@ 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	03d09000 	.word	0x03d09000
 8008be0:	003d0900 	.word	0x003d0900
 8008be4:	017d7840 	.word	0x017d7840
 8008be8:	46000000 	.word	0x46000000
 8008bec:	4c742400 	.word	0x4c742400
 8008bf0:	4a742400 	.word	0x4a742400
 8008bf4:	4bbebc20 	.word	0x4bbebc20

08008bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bfe:	f7ff fe81 	bl	8008904 <HAL_RCC_GetSysClockFreq>
 8008c02:	4602      	mov	r2, r0
 8008c04:	4b10      	ldr	r3, [pc, #64]	@ (8008c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	490f      	ldr	r1, [pc, #60]	@ (8008c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c10:	5ccb      	ldrb	r3, [r1, r3]
 8008c12:	f003 031f 	and.w	r3, r3, #31
 8008c16:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	4a09      	ldr	r2, [pc, #36]	@ (8008c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c26:	5cd3      	ldrb	r3, [r2, r3]
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c32:	4a07      	ldr	r2, [pc, #28]	@ (8008c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c36:	4a07      	ldr	r2, [pc, #28]	@ (8008c54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c3c:	4b04      	ldr	r3, [pc, #16]	@ (8008c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	0801fefc 	.word	0x0801fefc
 8008c50:	24000004 	.word	0x24000004
 8008c54:	24000000 	.word	0x24000000

08008c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c5c:	f7ff ffcc 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c60:	4602      	mov	r2, r0
 8008c62:	4b06      	ldr	r3, [pc, #24]	@ (8008c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	4904      	ldr	r1, [pc, #16]	@ (8008c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	0801fefc 	.word	0x0801fefc

08008c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c88:	f7ff ffb6 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	4904      	ldr	r1, [pc, #16]	@ (8008cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c9a:	5ccb      	ldrb	r3, [r1, r3]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	0801fefc 	.word	0x0801fefc

08008cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb4:	b0c6      	sub	sp, #280	@ 0x118
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	ea54 0305 	orrs.w	r3, r4, r5
 8008cda:	d049      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce6:	d02f      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cec:	d828      	bhi.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf2:	d01a      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf8:	d822      	bhi.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d02:	d007      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d04:	e01c      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d06:	4bab      	ldr	r3, [pc, #684]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0a:	4aaa      	ldr	r2, [pc, #680]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d12:	e01a      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d18:	3308      	adds	r3, #8
 8008d1a:	2102      	movs	r1, #2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f002 fa49 	bl	800b1b4 <RCCEx_PLL2_Config>
 8008d22:	4603      	mov	r3, r0
 8008d24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d28:	e00f      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2e:	3328      	adds	r3, #40	@ 0x28
 8008d30:	2102      	movs	r1, #2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f002 faf0 	bl	800b318 <RCCEx_PLL3_Config>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d3e:	e004      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d46:	e000      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d52:	4b98      	ldr	r3, [pc, #608]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d60:	4a94      	ldr	r2, [pc, #592]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d62:	430b      	orrs	r3, r1
 8008d64:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d66:	e003      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d7c:	f04f 0900 	mov.w	r9, #0
 8008d80:	ea58 0309 	orrs.w	r3, r8, r9
 8008d84:	d047      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d82a      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d90:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008dad 	.word	0x08008dad
 8008d9c:	08008dbb 	.word	0x08008dbb
 8008da0:	08008dd1 	.word	0x08008dd1
 8008da4:	08008def 	.word	0x08008def
 8008da8:	08008def 	.word	0x08008def
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dac:	4b81      	ldr	r3, [pc, #516]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	4a80      	ldr	r2, [pc, #512]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db8:	e01a      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f002 f9f6 	bl	800b1b4 <RCCEx_PLL2_Config>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dce:	e00f      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd4:	3328      	adds	r3, #40	@ 0x28
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f002 fa9d 	bl	800b318 <RCCEx_PLL3_Config>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008de4:	e004      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dec:	e000      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008df8:	4b6e      	ldr	r3, [pc, #440]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfc:	f023 0107 	bic.w	r1, r3, #7
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e06:	4a6b      	ldr	r2, [pc, #428]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e0c:	e003      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008e22:	f04f 0b00 	mov.w	fp, #0
 8008e26:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e2a:	d05b      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e34:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e38:	d03b      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e3a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e3e:	d834      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e44:	d037      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e4a:	d82e      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e4c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e50:	d033      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e56:	d828      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e5c:	d01a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e62:	d822      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e6c:	d007      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e6e:	e01c      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e70:	4b50      	ldr	r3, [pc, #320]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	4a4f      	ldr	r2, [pc, #316]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e7c:	e01e      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	3308      	adds	r3, #8
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f002 f994 	bl	800b1b4 <RCCEx_PLL2_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e92:	e013      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e98:	3328      	adds	r3, #40	@ 0x28
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f002 fa3b 	bl	800b318 <RCCEx_PLL3_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea8:	e008      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008eb0:	e004      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb2:	bf00      	nop
 8008eb4:	e002      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb6:	bf00      	nop
 8008eb8:	e000      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10b      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ed4:	4a37      	ldr	r2, [pc, #220]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008eda:	e003      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008efa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008efe:	460b      	mov	r3, r1
 8008f00:	4313      	orrs	r3, r2
 8008f02:	d05d      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f0c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f10:	d03b      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f12:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f16:	d834      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f1c:	d037      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f22:	d82e      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f28:	d033      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f2e:	d828      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f34:	d01a      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f3a:	d822      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f44:	d007      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f46:	e01c      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f48:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	4a19      	ldr	r2, [pc, #100]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f54:	e01e      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f002 f928 	bl	800b1b4 <RCCEx_PLL2_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f6a:	e013      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f70:	3328      	adds	r3, #40	@ 0x28
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 f9cf 	bl	800b318 <RCCEx_PLL3_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f80:	e008      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f88:	e004      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8a:	bf00      	nop
 8008f8c:	e002      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8e:	bf00      	nop
 8008f90:	e000      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10d      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f9c:	4b05      	ldr	r3, [pc, #20]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fac:	4a01      	ldr	r2, [pc, #4]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fb2:	e005      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008fd6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	d03a      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe6:	2b30      	cmp	r3, #48	@ 0x30
 8008fe8:	d01f      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008fea:	2b30      	cmp	r3, #48	@ 0x30
 8008fec:	d819      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d00c      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d815      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d019      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d111      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffe:	4baa      	ldr	r3, [pc, #680]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009002:	4aa9      	ldr	r2, [pc, #676]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800900a:	e011      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800900c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009010:	3308      	adds	r3, #8
 8009012:	2102      	movs	r1, #2
 8009014:	4618      	mov	r0, r3
 8009016:	f002 f8cd 	bl	800b1b4 <RCCEx_PLL2_Config>
 800901a:	4603      	mov	r3, r0
 800901c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009020:	e006      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009028:	e002      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800902a:	bf00      	nop
 800902c:	e000      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800902e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009038:	4b9b      	ldr	r3, [pc, #620]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800903a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009046:	4a98      	ldr	r2, [pc, #608]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009048:	430b      	orrs	r3, r1
 800904a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800904c:	e003      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009052:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009066:	2300      	movs	r3, #0
 8009068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800906c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009070:	460b      	mov	r3, r1
 8009072:	4313      	orrs	r3, r2
 8009074:	d051      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800907c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009080:	d035      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009086:	d82e      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009088:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800908c:	d031      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800908e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009092:	d828      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009098:	d01a      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800909a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800909e:	d822      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80090a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a8:	d007      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090aa:	e01c      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ac:	4b7e      	ldr	r3, [pc, #504]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	4a7d      	ldr	r2, [pc, #500]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090b8:	e01c      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090be:	3308      	adds	r3, #8
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f002 f876 	bl	800b1b4 <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090ce:	e011      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d4:	3328      	adds	r3, #40	@ 0x28
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 f91d 	bl	800b318 <RCCEx_PLL3_Config>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090e4:	e006      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090ec:	e002      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090ee:	bf00      	nop
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090fc:	4b6a      	ldr	r3, [pc, #424]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009100:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800910a:	4a67      	ldr	r2, [pc, #412]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800910c:	430b      	orrs	r3, r1
 800910e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009110:	e003      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009116:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800911a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009126:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800912a:	2300      	movs	r3, #0
 800912c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009130:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009134:	460b      	mov	r3, r1
 8009136:	4313      	orrs	r3, r2
 8009138:	d053      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800913a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009144:	d033      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009146:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800914a:	d82c      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800914c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009150:	d02f      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009156:	d826      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009158:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800915c:	d02b      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800915e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009162:	d820      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009168:	d012      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800916a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800916e:	d81a      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d022      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009178:	d115      	bne.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917e:	3308      	adds	r3, #8
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f002 f816 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800918e:	e015      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009194:	3328      	adds	r3, #40	@ 0x28
 8009196:	2101      	movs	r1, #1
 8009198:	4618      	mov	r0, r3
 800919a:	f002 f8bd 	bl	800b318 <RCCEx_PLL3_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091a4:	e00a      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091ac:	e006      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ae:	bf00      	nop
 80091b0:	e004      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b2:	bf00      	nop
 80091b4:	e002      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b6:	bf00      	nop
 80091b8:	e000      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091c4:	4b38      	ldr	r3, [pc, #224]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091d2:	4a35      	ldr	r2, [pc, #212]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091f2:	2300      	movs	r3, #0
 80091f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091fc:	460b      	mov	r3, r1
 80091fe:	4313      	orrs	r3, r2
 8009200:	d058      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009206:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800920a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800920e:	d033      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009214:	d82c      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800921a:	d02f      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009220:	d826      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009226:	d02b      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009228:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800922c:	d820      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800922e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009232:	d012      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009238:	d81a      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d022      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800923e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009242:	d115      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009248:	3308      	adds	r3, #8
 800924a:	2101      	movs	r1, #1
 800924c:	4618      	mov	r0, r3
 800924e:	f001 ffb1 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009258:	e015      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800925a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925e:	3328      	adds	r3, #40	@ 0x28
 8009260:	2101      	movs	r1, #1
 8009262:	4618      	mov	r0, r3
 8009264:	f002 f858 	bl	800b318 <RCCEx_PLL3_Config>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800926e:	e00a      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009276:	e006      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009278:	bf00      	nop
 800927a:	e004      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800927c:	bf00      	nop
 800927e:	e002      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009280:	bf00      	nop
 8009282:	e000      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009286:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10e      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800928e:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009292:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800929e:	4a02      	ldr	r2, [pc, #8]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092a0:	430b      	orrs	r3, r1
 80092a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80092a4:	e006      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092a6:	bf00      	nop
 80092a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092c4:	2300      	movs	r3, #0
 80092c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80092ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4313      	orrs	r3, r2
 80092d2:	d037      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092de:	d00e      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80092e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e4:	d816      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d018      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80092ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ee:	d111      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f0:	4bc4      	ldr	r3, [pc, #784]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	4ac3      	ldr	r2, [pc, #780]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092fc:	e00f      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009302:	3308      	adds	r3, #8
 8009304:	2101      	movs	r1, #1
 8009306:	4618      	mov	r0, r3
 8009308:	f001 ff54 	bl	800b1b4 <RCCEx_PLL2_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009312:	e004      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800931c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009326:	4bb7      	ldr	r3, [pc, #732]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009334:	4ab3      	ldr	r2, [pc, #716]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6513      	str	r3, [r2, #80]	@ 0x50
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009350:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800935a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d039      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800936a:	2b03      	cmp	r3, #3
 800936c:	d81c      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093b1 	.word	0x080093b1
 8009378:	08009385 	.word	0x08009385
 800937c:	08009393 	.word	0x08009393
 8009380:	080093b1 	.word	0x080093b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009384:	4b9f      	ldr	r3, [pc, #636]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009388:	4a9e      	ldr	r2, [pc, #632]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800938a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800938e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009390:	e00f      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009396:	3308      	adds	r3, #8
 8009398:	2102      	movs	r1, #2
 800939a:	4618      	mov	r0, r3
 800939c:	f001 ff0a 	bl	800b1b4 <RCCEx_PLL2_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093a6:	e004      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093ae:	e000      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093ba:	4b92      	ldr	r3, [pc, #584]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093be:	f023 0103 	bic.w	r1, r3, #3
 80093c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093c8:	4a8e      	ldr	r2, [pc, #568]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ca:	430b      	orrs	r3, r1
 80093cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093ce:	e003      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80093e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093e8:	2300      	movs	r3, #0
 80093ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	f000 8099 	beq.w	800952c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093fa:	4b83      	ldr	r3, [pc, #524]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a82      	ldr	r2, [pc, #520]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009406:	f7fa fbfd 	bl	8003c04 <HAL_GetTick>
 800940a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800940e:	e00b      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009410:	f7fa fbf8 	bl	8003c04 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b64      	cmp	r3, #100	@ 0x64
 800941e:	d903      	bls.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009426:	e005      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009428:	4b77      	ldr	r3, [pc, #476]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0ed      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009438:	2b00      	cmp	r3, #0
 800943a:	d173      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800943c:	4b71      	ldr	r3, [pc, #452]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800943e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009444:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009448:	4053      	eors	r3, r2
 800944a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800944e:	2b00      	cmp	r3, #0
 8009450:	d015      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009452:	4b6c      	ldr	r3, [pc, #432]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800945a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800945e:	4b69      	ldr	r3, [pc, #420]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009462:	4a68      	ldr	r2, [pc, #416]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009468:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800946a:	4b66      	ldr	r3, [pc, #408]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800946c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800946e:	4a65      	ldr	r2, [pc, #404]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009474:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009476:	4a63      	ldr	r2, [pc, #396]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800948a:	d118      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948c:	f7fa fbba 	bl	8003c04 <HAL_GetTick>
 8009490:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009494:	e00d      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009496:	f7fa fbb5 	bl	8003c04 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80094a0:	1ad2      	subs	r2, r2, r3
 80094a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d903      	bls.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80094b0:	e005      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094b2:	4b54      	ldr	r3, [pc, #336]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0eb      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d129      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094d6:	d10e      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80094d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80094e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094e8:	091a      	lsrs	r2, r3, #4
 80094ea:	4b48      	ldr	r3, [pc, #288]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80094ec:	4013      	ands	r3, r2
 80094ee:	4a45      	ldr	r2, [pc, #276]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6113      	str	r3, [r2, #16]
 80094f4:	e005      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80094f6:	4b43      	ldr	r3, [pc, #268]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	4a42      	ldr	r2, [pc, #264]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009500:	6113      	str	r3, [r2, #16]
 8009502:	4b40      	ldr	r3, [pc, #256]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009504:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800950a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800950e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009512:	4a3c      	ldr	r2, [pc, #240]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009514:	430b      	orrs	r3, r1
 8009516:	6713      	str	r3, [r2, #112]	@ 0x70
 8009518:	e008      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800951a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800951e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009522:	e003      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800952c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f002 0301 	and.w	r3, r2, #1
 8009538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800953c:	2300      	movs	r3, #0
 800953e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009542:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009546:	460b      	mov	r3, r1
 8009548:	4313      	orrs	r3, r2
 800954a:	f000 808f 	beq.w	800966c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800954e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009554:	2b28      	cmp	r3, #40	@ 0x28
 8009556:	d871      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009558:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009645 	.word	0x08009645
 8009564:	0800963d 	.word	0x0800963d
 8009568:	0800963d 	.word	0x0800963d
 800956c:	0800963d 	.word	0x0800963d
 8009570:	0800963d 	.word	0x0800963d
 8009574:	0800963d 	.word	0x0800963d
 8009578:	0800963d 	.word	0x0800963d
 800957c:	0800963d 	.word	0x0800963d
 8009580:	08009611 	.word	0x08009611
 8009584:	0800963d 	.word	0x0800963d
 8009588:	0800963d 	.word	0x0800963d
 800958c:	0800963d 	.word	0x0800963d
 8009590:	0800963d 	.word	0x0800963d
 8009594:	0800963d 	.word	0x0800963d
 8009598:	0800963d 	.word	0x0800963d
 800959c:	0800963d 	.word	0x0800963d
 80095a0:	08009627 	.word	0x08009627
 80095a4:	0800963d 	.word	0x0800963d
 80095a8:	0800963d 	.word	0x0800963d
 80095ac:	0800963d 	.word	0x0800963d
 80095b0:	0800963d 	.word	0x0800963d
 80095b4:	0800963d 	.word	0x0800963d
 80095b8:	0800963d 	.word	0x0800963d
 80095bc:	0800963d 	.word	0x0800963d
 80095c0:	08009645 	.word	0x08009645
 80095c4:	0800963d 	.word	0x0800963d
 80095c8:	0800963d 	.word	0x0800963d
 80095cc:	0800963d 	.word	0x0800963d
 80095d0:	0800963d 	.word	0x0800963d
 80095d4:	0800963d 	.word	0x0800963d
 80095d8:	0800963d 	.word	0x0800963d
 80095dc:	0800963d 	.word	0x0800963d
 80095e0:	08009645 	.word	0x08009645
 80095e4:	0800963d 	.word	0x0800963d
 80095e8:	0800963d 	.word	0x0800963d
 80095ec:	0800963d 	.word	0x0800963d
 80095f0:	0800963d 	.word	0x0800963d
 80095f4:	0800963d 	.word	0x0800963d
 80095f8:	0800963d 	.word	0x0800963d
 80095fc:	0800963d 	.word	0x0800963d
 8009600:	08009645 	.word	0x08009645
 8009604:	58024400 	.word	0x58024400
 8009608:	58024800 	.word	0x58024800
 800960c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009614:	3308      	adds	r3, #8
 8009616:	2101      	movs	r1, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fdcb 	bl	800b1b4 <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009624:	e00f      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962a:	3328      	adds	r3, #40	@ 0x28
 800962c:	2101      	movs	r1, #1
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fe72 	bl	800b318 <RCCEx_PLL3_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800963a:	e004      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009642:	e000      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009646:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800964e:	4bbf      	ldr	r3, [pc, #764]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009652:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800965c:	4abb      	ldr	r2, [pc, #748]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800965e:	430b      	orrs	r3, r1
 8009660:	6553      	str	r3, [r2, #84]	@ 0x54
 8009662:	e003      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800966c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f002 0302 	and.w	r3, r2, #2
 8009678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800967c:	2300      	movs	r3, #0
 800967e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009682:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009686:	460b      	mov	r3, r1
 8009688:	4313      	orrs	r3, r2
 800968a:	d041      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009692:	2b05      	cmp	r3, #5
 8009694:	d824      	bhi.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009696:	a201      	add	r2, pc, #4	@ (adr r2, 800969c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	080096e9 	.word	0x080096e9
 80096a0:	080096b5 	.word	0x080096b5
 80096a4:	080096cb 	.word	0x080096cb
 80096a8:	080096e9 	.word	0x080096e9
 80096ac:	080096e9 	.word	0x080096e9
 80096b0:	080096e9 	.word	0x080096e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b8:	3308      	adds	r3, #8
 80096ba:	2101      	movs	r1, #1
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fd79 	bl	800b1b4 <RCCEx_PLL2_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096c8:	e00f      	b.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ce:	3328      	adds	r3, #40	@ 0x28
 80096d0:	2101      	movs	r1, #1
 80096d2:	4618      	mov	r0, r3
 80096d4:	f001 fe20 	bl	800b318 <RCCEx_PLL3_Config>
 80096d8:	4603      	mov	r3, r0
 80096da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096de:	e004      	b.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096e6:	e000      	b.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80096e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096f2:	4b96      	ldr	r3, [pc, #600]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f6:	f023 0107 	bic.w	r1, r3, #7
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009700:	4a92      	ldr	r2, [pc, #584]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009702:	430b      	orrs	r3, r1
 8009704:	6553      	str	r3, [r2, #84]	@ 0x54
 8009706:	e003      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800970c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f002 0304 	and.w	r3, r2, #4
 800971c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009720:	2300      	movs	r3, #0
 8009722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009726:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800972a:	460b      	mov	r3, r1
 800972c:	4313      	orrs	r3, r2
 800972e:	d044      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009738:	2b05      	cmp	r3, #5
 800973a:	d825      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800973c:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009742:	bf00      	nop
 8009744:	08009791 	.word	0x08009791
 8009748:	0800975d 	.word	0x0800975d
 800974c:	08009773 	.word	0x08009773
 8009750:	08009791 	.word	0x08009791
 8009754:	08009791 	.word	0x08009791
 8009758:	08009791 	.word	0x08009791
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800975c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009760:	3308      	adds	r3, #8
 8009762:	2101      	movs	r1, #1
 8009764:	4618      	mov	r0, r3
 8009766:	f001 fd25 	bl	800b1b4 <RCCEx_PLL2_Config>
 800976a:	4603      	mov	r3, r0
 800976c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009770:	e00f      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009776:	3328      	adds	r3, #40	@ 0x28
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fdcc 	bl	800b318 <RCCEx_PLL3_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009786:	e004      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800978e:	e000      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10b      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800979a:	4b6c      	ldr	r3, [pc, #432]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800979c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800979e:	f023 0107 	bic.w	r1, r3, #7
 80097a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097aa:	4a68      	ldr	r2, [pc, #416]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097ac:	430b      	orrs	r3, r1
 80097ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f002 0320 	and.w	r3, r2, #32
 80097c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097ca:	2300      	movs	r3, #0
 80097cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4313      	orrs	r3, r2
 80097d8:	d055      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097e6:	d033      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80097e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ec:	d82c      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f2:	d02f      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80097f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f8:	d826      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097fe:	d02b      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009800:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009804:	d820      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800980a:	d012      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800980c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009810:	d81a      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d022      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800981a:	d115      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	3308      	adds	r3, #8
 8009822:	2100      	movs	r1, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f001 fcc5 	bl	800b1b4 <RCCEx_PLL2_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009830:	e015      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009836:	3328      	adds	r3, #40	@ 0x28
 8009838:	2102      	movs	r1, #2
 800983a:	4618      	mov	r0, r3
 800983c:	f001 fd6c 	bl	800b318 <RCCEx_PLL3_Config>
 8009840:	4603      	mov	r3, r0
 8009842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009846:	e00a      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800984e:	e006      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009850:	bf00      	nop
 8009852:	e004      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009854:	bf00      	nop
 8009856:	e002      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009858:	bf00      	nop
 800985a:	e000      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800985c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10b      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009866:	4b39      	ldr	r3, [pc, #228]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009876:	4a35      	ldr	r2, [pc, #212]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009878:	430b      	orrs	r3, r1
 800987a:	6553      	str	r3, [r2, #84]	@ 0x54
 800987c:	e003      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009892:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009896:	2300      	movs	r3, #0
 8009898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800989c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80098a0:	460b      	mov	r3, r1
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d058      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098b2:	d033      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098b8:	d82c      	bhi.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098be:	d02f      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c4:	d826      	bhi.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098ca:	d02b      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098d0:	d820      	bhi.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098d6:	d012      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098dc:	d81a      	bhi.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d022      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e6:	d115      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ec:	3308      	adds	r3, #8
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fc5f 	bl	800b1b4 <RCCEx_PLL2_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098fc:	e015      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009902:	3328      	adds	r3, #40	@ 0x28
 8009904:	2102      	movs	r1, #2
 8009906:	4618      	mov	r0, r3
 8009908:	f001 fd06 	bl	800b318 <RCCEx_PLL3_Config>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009912:	e00a      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800991a:	e006      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800991c:	bf00      	nop
 800991e:	e004      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009920:	bf00      	nop
 8009922:	e002      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009924:	bf00      	nop
 8009926:	e000      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800992a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10e      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009932:	4b06      	ldr	r3, [pc, #24]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009936:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009942:	4a02      	ldr	r2, [pc, #8]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009944:	430b      	orrs	r3, r1
 8009946:	6593      	str	r3, [r2, #88]	@ 0x58
 8009948:	e006      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800994a:	bf00      	nop
 800994c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009964:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800996e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009972:	460b      	mov	r3, r1
 8009974:	4313      	orrs	r3, r2
 8009976:	d055      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009980:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009984:	d033      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009986:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800998a:	d82c      	bhi.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800998c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009990:	d02f      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009996:	d826      	bhi.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009998:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800999c:	d02b      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800999e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099a2:	d820      	bhi.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a8:	d012      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ae:	d81a      	bhi.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d022      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099b8:	d115      	bne.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099be:	3308      	adds	r3, #8
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fbf6 	bl	800b1b4 <RCCEx_PLL2_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099ce:	e015      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d4:	3328      	adds	r3, #40	@ 0x28
 80099d6:	2102      	movs	r1, #2
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 fc9d 	bl	800b318 <RCCEx_PLL3_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099e4:	e00a      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099ec:	e006      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ee:	bf00      	nop
 80099f0:	e004      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f2:	bf00      	nop
 80099f4:	e002      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f6:	bf00      	nop
 80099f8:	e000      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10b      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a04:	4ba0      	ldr	r3, [pc, #640]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a08:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a14:	4a9c      	ldr	r2, [pc, #624]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a16:	430b      	orrs	r3, r1
 8009a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a1a:	e003      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f002 0308 	and.w	r3, r2, #8
 8009a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a34:	2300      	movs	r3, #0
 8009a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4313      	orrs	r3, r2
 8009a42:	d01e      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a50:	d10c      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a56:	3328      	adds	r3, #40	@ 0x28
 8009a58:	2102      	movs	r1, #2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fc5c 	bl	800b318 <RCCEx_PLL3_Config>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a6c:	4b86      	ldr	r3, [pc, #536]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7c:	4a82      	ldr	r2, [pc, #520]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	f002 0310 	and.w	r3, r2, #16
 8009a8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a92:	2300      	movs	r3, #0
 8009a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	d01e      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aae:	d10c      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab4:	3328      	adds	r3, #40	@ 0x28
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 fc2d 	bl	800b318 <RCCEx_PLL3_Config>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009aca:	4b6f      	ldr	r3, [pc, #444]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ace:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ada:	4a6b      	ldr	r2, [pc, #428]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009adc:	430b      	orrs	r3, r1
 8009ade:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009aec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009aee:	2300      	movs	r3, #0
 8009af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009af2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009af6:	460b      	mov	r3, r1
 8009af8:	4313      	orrs	r3, r2
 8009afa:	d03e      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b08:	d022      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b0e:	d81b      	bhi.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b18:	d00b      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b1a:	e015      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b20:	3308      	adds	r3, #8
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fb45 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b30:	e00f      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	3328      	adds	r3, #40	@ 0x28
 8009b38:	2102      	movs	r1, #2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fbec 	bl	800b318 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b46:	e004      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b4e:	e000      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10b      	bne.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b6a:	4a47      	ldr	r2, [pc, #284]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b70:	e003      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b86:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b88:	2300      	movs	r3, #0
 8009b8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b90:	460b      	mov	r3, r1
 8009b92:	4313      	orrs	r3, r2
 8009b94:	d03b      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba2:	d01f      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009ba4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba8:	d818      	bhi.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bae:	d003      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bb4:	d007      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bb6:	e011      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb8:	4b33      	ldr	r3, [pc, #204]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbc:	4a32      	ldr	r2, [pc, #200]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bc4:	e00f      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bca:	3328      	adds	r3, #40	@ 0x28
 8009bcc:	2101      	movs	r1, #1
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fba2 	bl	800b318 <RCCEx_PLL3_Config>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bda:	e004      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009be2:	e000      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bee:	4b26      	ldr	r3, [pc, #152]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bfe:	4a22      	ldr	r2, [pc, #136]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c00:	430b      	orrs	r3, r1
 8009c02:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c04:	e003      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c20:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009c24:	460b      	mov	r3, r1
 8009c26:	4313      	orrs	r3, r2
 8009c28:	d034      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c38:	d007      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c3a:	e011      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3c:	4b12      	ldr	r3, [pc, #72]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c40:	4a11      	ldr	r2, [pc, #68]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c48:	e00e      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4e:	3308      	adds	r3, #8
 8009c50:	2102      	movs	r1, #2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 faae 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c5e:	e003      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10d      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c70:	4b05      	ldr	r3, [pc, #20]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c7e:	4a02      	ldr	r2, [pc, #8]	@ (8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c84:	e006      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c86:	bf00      	nop
 8009c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ca6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009caa:	460b      	mov	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d00c      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb4:	3328      	adds	r3, #40	@ 0x28
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fb2d 	bl	800b318 <RCCEx_PLL3_Config>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cd8:	2300      	movs	r3, #0
 8009cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cdc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	d036      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cf0:	d018      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cf6:	d811      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfc:	d014      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d02:	d80b      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d011      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0c:	d106      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d0e:	4bb7      	ldr	r3, [pc, #732]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d12:	4ab6      	ldr	r2, [pc, #728]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d1a:	e008      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d22:	e004      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d24:	bf00      	nop
 8009d26:	e002      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d28:	bf00      	nop
 8009d2a:	e000      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d36:	4bad      	ldr	r3, [pc, #692]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d44:	4aa9      	ldr	r2, [pc, #676]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d46:	430b      	orrs	r3, r1
 8009d48:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d4a:	e003      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d62:	2300      	movs	r3, #0
 8009d64:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	d009      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d70:	4b9e      	ldr	r3, [pc, #632]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d7e:	4a9b      	ldr	r2, [pc, #620]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d92:	2300      	movs	r3, #0
 8009d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d96:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009da0:	4b92      	ldr	r3, [pc, #584]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dae:	4a8f      	ldr	r2, [pc, #572]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db0:	430b      	orrs	r3, r1
 8009db2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dc6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	d00e      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dd0:	4b86      	ldr	r3, [pc, #536]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	4a85      	ldr	r2, [pc, #532]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009dda:	6113      	str	r3, [r2, #16]
 8009ddc:	4b83      	ldr	r3, [pc, #524]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dde:	6919      	ldr	r1, [r3, #16]
 8009de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009de8:	4a80      	ldr	r2, [pc, #512]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dea:	430b      	orrs	r3, r1
 8009dec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e00:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e04:	460b      	mov	r3, r1
 8009e06:	4313      	orrs	r3, r2
 8009e08:	d009      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e0a:	4b78      	ldr	r3, [pc, #480]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e18:	4a74      	ldr	r2, [pc, #464]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e34:	460b      	mov	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	d00a      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e4a:	4a68      	ldr	r2, [pc, #416]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e62:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e66:	460b      	mov	r3, r1
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	d011      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e70:	3308      	adds	r3, #8
 8009e72:	2100      	movs	r1, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 f99d 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	2100      	movs	r1, #0
 8009e9a:	6239      	str	r1, [r7, #32]
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d011      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 f97d 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	61b9      	str	r1, [r7, #24]
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	d011      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	2102      	movs	r1, #2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 f95d 	bl	800b1b4 <RCCEx_PLL2_Config>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	2100      	movs	r1, #0
 8009f1a:	6139      	str	r1, [r7, #16]
 8009f1c:	f003 0308 	and.w	r3, r3, #8
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f26:	460b      	mov	r3, r1
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	d011      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f30:	3328      	adds	r3, #40	@ 0x28
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 f9ef 	bl	800b318 <RCCEx_PLL3_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	f003 0310 	and.w	r3, r3, #16
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f66:	460b      	mov	r3, r1
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	d011      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	3328      	adds	r3, #40	@ 0x28
 8009f72:	2101      	movs	r1, #1
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f9cf 	bl	800b318 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6039      	str	r1, [r7, #0]
 8009f9c:	f003 0320 	and.w	r3, r3, #32
 8009fa0:	607b      	str	r3, [r7, #4]
 8009fa2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	d011      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	3328      	adds	r3, #40	@ 0x28
 8009fb2:	2102      	movs	r1, #2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 f9af 	bl	800b318 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009fd0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e000      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fea:	bf00      	nop
 8009fec:	58024400 	.word	0x58024400

08009ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b090      	sub	sp, #64	@ 0x40
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a002:	430b      	orrs	r3, r1
 800a004:	f040 8094 	bne.w	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a008:	4b9b      	ldr	r3, [pc, #620]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a00c:	f003 0307 	and.w	r3, r3, #7
 800a010:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	2b04      	cmp	r3, #4
 800a016:	f200 8087 	bhi.w	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a01a:	a201      	add	r2, pc, #4	@ (adr r2, 800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a035 	.word	0x0800a035
 800a024:	0800a05d 	.word	0x0800a05d
 800a028:	0800a085 	.word	0x0800a085
 800a02c:	0800a121 	.word	0x0800a121
 800a030:	0800a0ad 	.word	0x0800a0ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a034:	4b90      	ldr	r3, [pc, #576]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a03c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a040:	d108      	bne.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a046:	4618      	mov	r0, r3
 800a048:	f000 ff62 	bl	800af10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a050:	f000 bc93 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a058:	f000 bc8f 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a05c:	4b86      	ldr	r3, [pc, #536]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a068:	d108      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a06a:	f107 0318 	add.w	r3, r7, #24
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fca6 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a078:	f000 bc7f 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a080:	f000 bc7b 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a084:	4b7c      	ldr	r3, [pc, #496]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a08c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a090:	d108      	bne.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a092:	f107 030c 	add.w	r3, r7, #12
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fde6 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a0:	f000 bc6b 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a8:	f000 bc67 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ac:	4b72      	ldr	r3, [pc, #456]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b6:	4b70      	ldr	r3, [pc, #448]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d10c      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d109      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0c8:	4b6b      	ldr	r3, [pc, #428]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	08db      	lsrs	r3, r3, #3
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	4a6a      	ldr	r2, [pc, #424]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a0d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0da:	e01f      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0dc:	4b66      	ldr	r3, [pc, #408]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e8:	d106      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0f0:	d102      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0f2:	4b63      	ldr	r3, [pc, #396]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0f6:	e011      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0f8:	4b5f      	ldr	r3, [pc, #380]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a104:	d106      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a10c:	d102      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a10e:	4b5d      	ldr	r3, [pc, #372]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a112:	e003      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a118:	f000 bc2f 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a11c:	f000 bc2d 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a120:	4b59      	ldr	r3, [pc, #356]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a124:	f000 bc29 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a12c:	f000 bc25 	b.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a134:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a138:	430b      	orrs	r3, r1
 800a13a:	f040 80a7 	bne.w	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a13e:	4b4e      	ldr	r3, [pc, #312]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a142:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a146:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a14e:	d054      	beq.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a156:	f200 808b 	bhi.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a160:	f000 8083 	beq.w	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a166:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a16a:	f200 8081 	bhi.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a174:	d02f      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a17c:	d878      	bhi.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	2b00      	cmp	r3, #0
 800a182:	d004      	beq.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a18a:	d012      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a18c:	e070      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a18e:	4b3a      	ldr	r3, [pc, #232]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a19a:	d107      	bne.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a19c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 feb5 	bl	800af10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1aa:	e3e6      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b0:	e3e3      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1b2:	4b31      	ldr	r3, [pc, #196]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1be:	d107      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1c0:	f107 0318 	add.w	r3, r7, #24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fbfb 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ce:	e3d4      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d4:	e3d1      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1d6:	4b28      	ldr	r3, [pc, #160]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1e2:	d107      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1e4:	f107 030c 	add.w	r3, r7, #12
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fd3d 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1f2:	e3c2      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f8:	e3bf      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a202:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a204:	4b1c      	ldr	r3, [pc, #112]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d10c      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a216:	4b18      	ldr	r3, [pc, #96]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	4a16      	ldr	r2, [pc, #88]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a222:	fa22 f303 	lsr.w	r3, r2, r3
 800a226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a228:	e01e      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a22a:	4b13      	ldr	r3, [pc, #76]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a236:	d106      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a23e:	d102      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a240:	4b0f      	ldr	r3, [pc, #60]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a244:	e010      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a246:	4b0c      	ldr	r3, [pc, #48]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a252:	d106      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a25a:	d102      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a25c:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a260:	e002      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a266:	e388      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a268:	e387      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a26a:	4b07      	ldr	r3, [pc, #28]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26e:	e384      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a274:	e381      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a276:	bf00      	nop
 800a278:	58024400 	.word	0x58024400
 800a27c:	03d09000 	.word	0x03d09000
 800a280:	003d0900 	.word	0x003d0900
 800a284:	017d7840 	.word	0x017d7840
 800a288:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a290:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a294:	430b      	orrs	r3, r1
 800a296:	f040 809c 	bne.w	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a29a:	4b9e      	ldr	r3, [pc, #632]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a2a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2aa:	d054      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2b2:	f200 808b 	bhi.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2bc:	f000 8083 	beq.w	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2c6:	f200 8081 	bhi.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2d0:	d02f      	beq.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2d8:	d878      	bhi.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2e6:	d012      	beq.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a2e8:	e070      	b.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ea:	4b8a      	ldr	r3, [pc, #552]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f6:	d107      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fe07 	bl	800af10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a306:	e338      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30c:	e335      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a30e:	4b81      	ldr	r3, [pc, #516]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a31a:	d107      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31c:	f107 0318 	add.w	r3, r7, #24
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fb4d 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a32a:	e326      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a330:	e323      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a332:	4b78      	ldr	r3, [pc, #480]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a33a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33e:	d107      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a340:	f107 030c 	add.w	r3, r7, #12
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fc8f 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a34e:	e314      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a354:	e311      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a356:	4b6f      	ldr	r3, [pc, #444]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a35a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a35e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a360:	4b6c      	ldr	r3, [pc, #432]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0304 	and.w	r3, r3, #4
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d10c      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d109      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a372:	4b68      	ldr	r3, [pc, #416]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	08db      	lsrs	r3, r3, #3
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	4a66      	ldr	r2, [pc, #408]	@ (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a37e:	fa22 f303 	lsr.w	r3, r2, r3
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a384:	e01e      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a386:	4b63      	ldr	r3, [pc, #396]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a38e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a39a:	d102      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a39c:	4b5f      	ldr	r3, [pc, #380]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a0:	e010      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3a2:	4b5c      	ldr	r3, [pc, #368]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3ae:	d106      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3b6:	d102      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3b8:	4b59      	ldr	r3, [pc, #356]	@ (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3bc:	e002      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3c2:	e2da      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3c4:	e2d9      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3c6:	4b57      	ldr	r3, [pc, #348]	@ (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ca:	e2d6      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d0:	e2d3      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	f040 80a7 	bne.w	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a3e0:	4b4c      	ldr	r3, [pc, #304]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a3e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3f0:	d055      	beq.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3f8:	f200 8096 	bhi.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a402:	f000 8084 	beq.w	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a40c:	f200 808c 	bhi.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a416:	d030      	beq.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a41e:	f200 8083 	bhi.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	d004      	beq.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42e:	d012      	beq.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a430:	e07a      	b.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a432:	4b38      	ldr	r3, [pc, #224]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a43a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a43e:	d107      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fd63 	bl	800af10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a44e:	e294      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a454:	e291      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a456:	4b2f      	ldr	r3, [pc, #188]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a45e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a462:	d107      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a464:	f107 0318 	add.w	r3, r7, #24
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 faa9 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a472:	e282      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a478:	e27f      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a47a:	4b26      	ldr	r3, [pc, #152]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a486:	d107      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a488:	f107 030c 	add.w	r3, r7, #12
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 fbeb 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a496:	e270      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49c:	e26d      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a49e:	4b1d      	ldr	r3, [pc, #116]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b04      	cmp	r3, #4
 800a4b2:	d10c      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d109      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4ba:	4b16      	ldr	r3, [pc, #88]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	08db      	lsrs	r3, r3, #3
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	4a14      	ldr	r2, [pc, #80]	@ (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4cc:	e01e      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4ce:	4b11      	ldr	r3, [pc, #68]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4da:	d106      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4e2:	d102      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e8:	e010      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4f6:	d106      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4fe:	d102      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a500:	4b07      	ldr	r3, [pc, #28]	@ (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a504:	e002      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a50a:	e236      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a50c:	e235      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a50e:	4b05      	ldr	r3, [pc, #20]	@ (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a512:	e232      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a514:	58024400 	.word	0x58024400
 800a518:	03d09000 	.word	0x03d09000
 800a51c:	003d0900 	.word	0x003d0900
 800a520:	017d7840 	.word	0x017d7840
 800a524:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a52c:	e225      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a52e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a532:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a536:	430b      	orrs	r3, r1
 800a538:	f040 8085 	bne.w	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a53c:	4b9c      	ldr	r3, [pc, #624]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a53e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a540:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a544:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a54c:	d06b      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a554:	d874      	bhi.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a55c:	d056      	beq.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a564:	d86c      	bhi.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a56c:	d03b      	beq.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a574:	d864      	bhi.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a57c:	d021      	beq.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a584:	d85c      	bhi.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a592:	d004      	beq.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a594:	e054      	b.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a596:	f7fe fb5f 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
 800a59a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a59c:	e1ed      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a59e:	4b84      	ldr	r3, [pc, #528]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5aa:	d107      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ac:	f107 0318 	add.w	r3, r7, #24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 fa05 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ba:	e1de      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c0:	e1db      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5c2:	4b7b      	ldr	r3, [pc, #492]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ce:	d107      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d0:	f107 030c 	add.w	r3, r7, #12
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fb47 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5de:	e1cc      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e4:	e1c9      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5e6:	4b72      	ldr	r3, [pc, #456]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d109      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5f2:	4b6f      	ldr	r3, [pc, #444]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	08db      	lsrs	r3, r3, #3
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	4a6d      	ldr	r2, [pc, #436]	@ (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a604:	e1b9      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60a:	e1b6      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a60c:	4b68      	ldr	r3, [pc, #416]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a618:	d102      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a61a:	4b67      	ldr	r3, [pc, #412]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e1ac      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e1a9      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a626:	4b62      	ldr	r3, [pc, #392]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a632:	d102      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a634:	4b61      	ldr	r3, [pc, #388]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a638:	e19f      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63e:	e19c      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a644:	e199      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a64e:	430b      	orrs	r3, r1
 800a650:	d173      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a652:	4b57      	ldr	r3, [pc, #348]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a65a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a662:	d02f      	beq.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a66a:	d863      	bhi.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a678:	d012      	beq.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a67a:	e05b      	b.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a67c:	4b4c      	ldr	r3, [pc, #304]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a688:	d107      	bne.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a68a:	f107 0318 	add.w	r3, r7, #24
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 f996 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a698:	e16f      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69e:	e16c      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6a0:	4b43      	ldr	r3, [pc, #268]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ac:	d107      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ae:	f107 030c 	add.w	r3, r7, #12
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fad8 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6bc:	e15d      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c2:	e15a      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6ce:	4b38      	ldr	r3, [pc, #224]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d10c      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d109      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6e0:	4b33      	ldr	r3, [pc, #204]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	08db      	lsrs	r3, r3, #3
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	4a32      	ldr	r2, [pc, #200]	@ (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f2:	e01e      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6f4:	4b2e      	ldr	r3, [pc, #184]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a700:	d106      	bne.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a708:	d102      	bne.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a70a:	4b2b      	ldr	r3, [pc, #172]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a70e:	e010      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a710:	4b27      	ldr	r3, [pc, #156]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a71c:	d106      	bne.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a724:	d102      	bne.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a726:	4b25      	ldr	r3, [pc, #148]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a72a:	e002      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a730:	e123      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a732:	e122      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e11f      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a742:	430b      	orrs	r3, r1
 800a744:	d13c      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a746:	4b1a      	ldr	r3, [pc, #104]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a74a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a74e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	2b00      	cmp	r3, #0
 800a754:	d004      	beq.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a75c:	d012      	beq.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a75e:	e023      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a760:	4b13      	ldr	r3, [pc, #76]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a76c:	d107      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a76e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fbcc 	bl	800af10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77c:	e0fd      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a782:	e0fa      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a784:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a78c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a790:	d107      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a792:	f107 0318 	add.w	r3, r7, #24
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f912 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a0:	e0eb      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a6:	e0e8      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ac:	e0e5      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7ae:	bf00      	nop
 800a7b0:	58024400 	.word	0x58024400
 800a7b4:	03d09000 	.word	0x03d09000
 800a7b8:	003d0900 	.word	0x003d0900
 800a7bc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	f040 8085 	bne.w	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7ce:	4b6d      	ldr	r3, [pc, #436]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a7d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7de:	d06b      	beq.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7e6:	d874      	bhi.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ee:	d056      	beq.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7f6:	d86c      	bhi.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7fe:	d03b      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a806:	d864      	bhi.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a80e:	d021      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a816:	d85c      	bhi.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d004      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a824:	d004      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a826:	e054      	b.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a828:	f000 f8b4 	bl	800a994 <HAL_RCCEx_GetD3PCLK1Freq>
 800a82c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a82e:	e0a4      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a830:	4b54      	ldr	r3, [pc, #336]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a83c:	d107      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83e:	f107 0318 	add.w	r3, r7, #24
 800a842:	4618      	mov	r0, r3
 800a844:	f000 f8bc 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84c:	e095      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a852:	e092      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a854:	4b4b      	ldr	r3, [pc, #300]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a85c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a860:	d107      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a862:	f107 030c 	add.w	r3, r7, #12
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f9fe 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a870:	e083      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a876:	e080      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a878:	4b42      	ldr	r3, [pc, #264]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b04      	cmp	r3, #4
 800a882:	d109      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a884:	4b3f      	ldr	r3, [pc, #252]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	08db      	lsrs	r3, r3, #3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	4a3e      	ldr	r2, [pc, #248]	@ (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a890:	fa22 f303 	lsr.w	r3, r2, r3
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a896:	e070      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89c:	e06d      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a89e:	4b39      	ldr	r3, [pc, #228]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8aa:	d102      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a8ac:	4b37      	ldr	r3, [pc, #220]	@ (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b0:	e063      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b6:	e060      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8b8:	4b32      	ldr	r3, [pc, #200]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8c4:	d102      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a8c6:	4b32      	ldr	r3, [pc, #200]	@ (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ca:	e056      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d0:	e053      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d6:	e050      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a8d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8dc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	d148      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a8e4:	4b27      	ldr	r3, [pc, #156]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8f4:	d02a      	beq.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8fc:	d838      	bhi.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a90a:	d00d      	beq.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a90c:	e030      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a90e:	4b1d      	ldr	r3, [pc, #116]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a91a:	d102      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a91c:	4b1c      	ldr	r3, [pc, #112]	@ (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a920:	e02b      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a926:	e028      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a928:	4b16      	ldr	r3, [pc, #88]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a934:	d107      	bne.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 fae8 	bl	800af10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a944:	e019      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94a:	e016      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a94c:	4b0d      	ldr	r3, [pc, #52]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a958:	d107      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a95a:	f107 0318 	add.w	r3, r7, #24
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f82e 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a968:	e007      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96e:	e004      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a974:	e001      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3740      	adds	r7, #64	@ 0x40
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	58024400 	.word	0x58024400
 800a988:	03d09000 	.word	0x03d09000
 800a98c:	003d0900 	.word	0x003d0900
 800a990:	017d7840 	.word	0x017d7840

0800a994 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a998:	f7fe f92e 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 800a99c:	4602      	mov	r2, r0
 800a99e:	4b06      	ldr	r3, [pc, #24]	@ (800a9b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	091b      	lsrs	r3, r3, #4
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	4904      	ldr	r1, [pc, #16]	@ (800a9bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9aa:	5ccb      	ldrb	r3, [r1, r3]
 800a9ac:	f003 031f 	and.w	r3, r3, #31
 800a9b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	0801fefc 	.word	0x0801fefc

0800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b089      	sub	sp, #36	@ 0x24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9c8:	4ba1      	ldr	r3, [pc, #644]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a9d2:	4b9f      	ldr	r3, [pc, #636]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d6:	0b1b      	lsrs	r3, r3, #12
 800a9d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9de:	4b9c      	ldr	r3, [pc, #624]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e2:	091b      	lsrs	r3, r3, #4
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a9ea:	4b99      	ldr	r3, [pc, #612]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	fb02 f303 	mul.w	r3, r2, r3
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8111 	beq.w	800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	f000 8083 	beq.w	800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	f200 80a1 	bhi.w	800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d003      	beq.n	800aa2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d056      	beq.n	800aad8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa2a:	e099      	b.n	800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa2c:	4b88      	ldr	r3, [pc, #544]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d02d      	beq.n	800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa38:	4b85      	ldr	r3, [pc, #532]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	08db      	lsrs	r3, r3, #3
 800aa3e:	f003 0303 	and.w	r3, r3, #3
 800aa42:	4a84      	ldr	r2, [pc, #528]	@ (800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa44:	fa22 f303 	lsr.w	r3, r2, r3
 800aa48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	ee07 3a90 	vmov	s15, r3
 800aa50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa62:	4b7b      	ldr	r3, [pc, #492]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa72:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa92:	e087      	b.n	800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aaa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa6:	4b6a      	ldr	r3, [pc, #424]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aad6:	e065      	b.n	800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaea:	4b59      	ldr	r3, [pc, #356]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab1a:	e043      	b.n	800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2e:	4b48      	ldr	r3, [pc, #288]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5e:	e021      	b.n	800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab72:	4b37      	ldr	r3, [pc, #220]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aba2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aba4:	4b2a      	ldr	r3, [pc, #168]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba8:	0a5b      	lsrs	r3, r3, #9
 800abaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abca:	ee17 2a90 	vmov	r2, s15
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800abd2:	4b1f      	ldr	r3, [pc, #124]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd6:	0c1b      	lsrs	r3, r3, #16
 800abd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abdc:	ee07 3a90 	vmov	s15, r3
 800abe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abec:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf8:	ee17 2a90 	vmov	r2, s15
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac00:	4b13      	ldr	r3, [pc, #76]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac04:	0e1b      	lsrs	r3, r3, #24
 800ac06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac26:	ee17 2a90 	vmov	r2, s15
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac2e:	e008      	b.n	800ac42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	609a      	str	r2, [r3, #8]
}
 800ac42:	bf00      	nop
 800ac44:	3724      	adds	r7, #36	@ 0x24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	58024400 	.word	0x58024400
 800ac54:	03d09000 	.word	0x03d09000
 800ac58:	46000000 	.word	0x46000000
 800ac5c:	4c742400 	.word	0x4c742400
 800ac60:	4a742400 	.word	0x4a742400
 800ac64:	4bbebc20 	.word	0x4bbebc20

0800ac68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b089      	sub	sp, #36	@ 0x24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac70:	4ba1      	ldr	r3, [pc, #644]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac7a:	4b9f      	ldr	r3, [pc, #636]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7e:	0d1b      	lsrs	r3, r3, #20
 800ac80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac86:	4b9c      	ldr	r3, [pc, #624]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac92:	4b99      	ldr	r3, [pc, #612]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 8111 	beq.w	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	f000 8083 	beq.w	800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	f200 80a1 	bhi.w	800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d056      	beq.n	800ad80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800acd2:	e099      	b.n	800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd4:	4b88      	ldr	r3, [pc, #544]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d02d      	beq.n	800ad3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace0:	4b85      	ldr	r3, [pc, #532]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	08db      	lsrs	r3, r3, #3
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	4a84      	ldr	r2, [pc, #528]	@ (800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800acec:	fa22 f303 	lsr.w	r3, r2, r3
 800acf0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	ee07 3a90 	vmov	s15, r3
 800acf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0a:	4b7b      	ldr	r3, [pc, #492]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad3a:	e087      	b.n	800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4e:	4b6a      	ldr	r3, [pc, #424]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad7e:	e065      	b.n	800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad92:	4b59      	ldr	r3, [pc, #356]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc2:	e043      	b.n	800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800add2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add6:	4b48      	ldr	r3, [pc, #288]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae06:	e021      	b.n	800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1a:	4b37      	ldr	r3, [pc, #220]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae4c:	4b2a      	ldr	r3, [pc, #168]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae50:	0a5b      	lsrs	r3, r3, #9
 800ae52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae72:	ee17 2a90 	vmov	r2, s15
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae7a:	4b1f      	ldr	r3, [pc, #124]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae7e:	0c1b      	lsrs	r3, r3, #16
 800ae80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae84:	ee07 3a90 	vmov	s15, r3
 800ae88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea0:	ee17 2a90 	vmov	r2, s15
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aea8:	4b13      	ldr	r3, [pc, #76]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeac:	0e1b      	lsrs	r3, r3, #24
 800aeae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aece:	ee17 2a90 	vmov	r2, s15
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aed6:	e008      	b.n	800aeea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	609a      	str	r2, [r3, #8]
}
 800aeea:	bf00      	nop
 800aeec:	3724      	adds	r7, #36	@ 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	58024400 	.word	0x58024400
 800aefc:	03d09000 	.word	0x03d09000
 800af00:	46000000 	.word	0x46000000
 800af04:	4c742400 	.word	0x4c742400
 800af08:	4a742400 	.word	0x4a742400
 800af0c:	4bbebc20 	.word	0x4bbebc20

0800af10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af10:	b480      	push	{r7}
 800af12:	b089      	sub	sp, #36	@ 0x24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af18:	4ba0      	ldr	r3, [pc, #640]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1c:	f003 0303 	and.w	r3, r3, #3
 800af20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af22:	4b9e      	ldr	r3, [pc, #632]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af26:	091b      	lsrs	r3, r3, #4
 800af28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af2e:	4b9b      	ldr	r3, [pc, #620]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af38:	4b98      	ldr	r3, [pc, #608]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3c:	08db      	lsrs	r3, r3, #3
 800af3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	fb02 f303 	mul.w	r3, r2, r3
 800af48:	ee07 3a90 	vmov	s15, r3
 800af4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 8111 	beq.w	800b17e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	f000 8083 	beq.w	800b06a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	2b02      	cmp	r3, #2
 800af68:	f200 80a1 	bhi.w	800b0ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d056      	beq.n	800b026 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af78:	e099      	b.n	800b0ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af7a:	4b88      	ldr	r3, [pc, #544]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0320 	and.w	r3, r3, #32
 800af82:	2b00      	cmp	r3, #0
 800af84:	d02d      	beq.n	800afe2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af86:	4b85      	ldr	r3, [pc, #532]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	08db      	lsrs	r3, r3, #3
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	4a83      	ldr	r2, [pc, #524]	@ (800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af92:	fa22 f303 	lsr.w	r3, r2, r3
 800af96:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	ee07 3a90 	vmov	s15, r3
 800afa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb0:	4b7a      	ldr	r3, [pc, #488]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afdc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afe0:	e087      	b.n	800b0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff4:	4b69      	ldr	r3, [pc, #420]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affc:	ee07 3a90 	vmov	s15, r3
 800b000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b004:	ed97 6a03 	vldr	s12, [r7, #12]
 800b008:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b00c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b014:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b020:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b024:	e065      	b.n	800b0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	ee07 3a90 	vmov	s15, r3
 800b02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b030:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b1ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b038:	4b58      	ldr	r3, [pc, #352]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b048:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b05c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b060:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b064:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b068:	e043      	b.n	800b0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	ee07 3a90 	vmov	s15, r3
 800b070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b074:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b07c:	4b47      	ldr	r3, [pc, #284]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b084:	ee07 3a90 	vmov	s15, r3
 800b088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b090:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b09c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ac:	e021      	b.n	800b0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	ee07 3a90 	vmov	s15, r3
 800b0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c0:	4b36      	ldr	r3, [pc, #216]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c8:	ee07 3a90 	vmov	s15, r3
 800b0cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0f2:	4b2a      	ldr	r3, [pc, #168]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	0a5b      	lsrs	r3, r3, #9
 800b0f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b104:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b10c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b118:	ee17 2a90 	vmov	r2, s15
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b120:	4b1e      	ldr	r3, [pc, #120]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b13a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b13e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b146:	ee17 2a90 	vmov	r2, s15
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b14e:	4b13      	ldr	r3, [pc, #76]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b152:	0e1b      	lsrs	r3, r3, #24
 800b154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b158:	ee07 3a90 	vmov	s15, r3
 800b15c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b164:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b168:	edd7 6a07 	vldr	s13, [r7, #28]
 800b16c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b174:	ee17 2a90 	vmov	r2, s15
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b17c:	e008      	b.n	800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	609a      	str	r2, [r3, #8]
}
 800b190:	bf00      	nop
 800b192:	3724      	adds	r7, #36	@ 0x24
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	58024400 	.word	0x58024400
 800b1a0:	03d09000 	.word	0x03d09000
 800b1a4:	46000000 	.word	0x46000000
 800b1a8:	4c742400 	.word	0x4c742400
 800b1ac:	4a742400 	.word	0x4a742400
 800b1b0:	4bbebc20 	.word	0x4bbebc20

0800b1b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1c2:	4b53      	ldr	r3, [pc, #332]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c6:	f003 0303 	and.w	r3, r3, #3
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d101      	bne.n	800b1d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e099      	b.n	800b306 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a4e      	ldr	r2, [pc, #312]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b1d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1de:	f7f8 fd11 	bl	8003c04 <HAL_GetTick>
 800b1e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1e4:	e008      	b.n	800b1f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1e6:	f7f8 fd0d 	bl	8003c04 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d901      	bls.n	800b1f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e086      	b.n	800b306 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1f8:	4b45      	ldr	r3, [pc, #276]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1f0      	bne.n	800b1e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b204:	4b42      	ldr	r3, [pc, #264]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b208:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	031b      	lsls	r3, r3, #12
 800b212:	493f      	ldr	r1, [pc, #252]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b214:	4313      	orrs	r3, r2
 800b216:	628b      	str	r3, [r1, #40]	@ 0x28
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	3b01      	subs	r3, #1
 800b228:	025b      	lsls	r3, r3, #9
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	431a      	orrs	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	3b01      	subs	r3, #1
 800b234:	041b      	lsls	r3, r3, #16
 800b236:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b23a:	431a      	orrs	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	3b01      	subs	r3, #1
 800b242:	061b      	lsls	r3, r3, #24
 800b244:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b248:	4931      	ldr	r1, [pc, #196]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b24e:	4b30      	ldr	r3, [pc, #192]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b252:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	492d      	ldr	r1, [pc, #180]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b260:	4b2b      	ldr	r3, [pc, #172]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b264:	f023 0220 	bic.w	r2, r3, #32
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	4928      	ldr	r1, [pc, #160]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b272:	4b27      	ldr	r3, [pc, #156]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	4a26      	ldr	r2, [pc, #152]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b278:	f023 0310 	bic.w	r3, r3, #16
 800b27c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b27e:	4b24      	ldr	r3, [pc, #144]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b282:	4b24      	ldr	r3, [pc, #144]	@ (800b314 <RCCEx_PLL2_Config+0x160>)
 800b284:	4013      	ands	r3, r2
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	69d2      	ldr	r2, [r2, #28]
 800b28a:	00d2      	lsls	r2, r2, #3
 800b28c:	4920      	ldr	r1, [pc, #128]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b28e:	4313      	orrs	r3, r2
 800b290:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b292:	4b1f      	ldr	r3, [pc, #124]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	4a1e      	ldr	r2, [pc, #120]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b298:	f043 0310 	orr.w	r3, r3, #16
 800b29c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d106      	bne.n	800b2b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a8:	4a19      	ldr	r2, [pc, #100]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2b0:	e00f      	b.n	800b2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d106      	bne.n	800b2c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2b8:	4b15      	ldr	r3, [pc, #84]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2bc:	4a14      	ldr	r2, [pc, #80]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2c4:	e005      	b.n	800b2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2c6:	4b12      	ldr	r3, [pc, #72]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ca:	4a11      	ldr	r2, [pc, #68]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a0e      	ldr	r2, [pc, #56]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2de:	f7f8 fc91 	bl	8003c04 <HAL_GetTick>
 800b2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2e4:	e008      	b.n	800b2f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2e6:	f7f8 fc8d 	bl	8003c04 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d901      	bls.n	800b2f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e006      	b.n	800b306 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2f8:	4b05      	ldr	r3, [pc, #20]	@ (800b310 <RCCEx_PLL2_Config+0x15c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0f0      	beq.n	800b2e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	58024400 	.word	0x58024400
 800b314:	ffff0007 	.word	0xffff0007

0800b318 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b326:	4b53      	ldr	r3, [pc, #332]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32a:	f003 0303 	and.w	r3, r3, #3
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d101      	bne.n	800b336 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e099      	b.n	800b46a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b336:	4b4f      	ldr	r3, [pc, #316]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a4e      	ldr	r2, [pc, #312]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b33c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b342:	f7f8 fc5f 	bl	8003c04 <HAL_GetTick>
 800b346:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b348:	e008      	b.n	800b35c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b34a:	f7f8 fc5b 	bl	8003c04 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	2b02      	cmp	r3, #2
 800b356:	d901      	bls.n	800b35c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	e086      	b.n	800b46a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b35c:	4b45      	ldr	r3, [pc, #276]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1f0      	bne.n	800b34a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b368:	4b42      	ldr	r3, [pc, #264]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	051b      	lsls	r3, r3, #20
 800b376:	493f      	ldr	r1, [pc, #252]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	3b01      	subs	r3, #1
 800b382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	025b      	lsls	r3, r3, #9
 800b38e:	b29b      	uxth	r3, r3
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	3b01      	subs	r3, #1
 800b398:	041b      	lsls	r3, r3, #16
 800b39a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	061b      	lsls	r3, r3, #24
 800b3a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3ac:	4931      	ldr	r1, [pc, #196]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3b2:	4b30      	ldr	r3, [pc, #192]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	492d      	ldr	r1, [pc, #180]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	4928      	ldr	r1, [pc, #160]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3d6:	4b27      	ldr	r3, [pc, #156]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	4a26      	ldr	r2, [pc, #152]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3e2:	4b24      	ldr	r3, [pc, #144]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3e6:	4b24      	ldr	r3, [pc, #144]	@ (800b478 <RCCEx_PLL3_Config+0x160>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	69d2      	ldr	r2, [r2, #28]
 800b3ee:	00d2      	lsls	r2, r2, #3
 800b3f0:	4920      	ldr	r1, [pc, #128]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b3fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d106      	bne.n	800b416 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b408:	4b1a      	ldr	r3, [pc, #104]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40c:	4a19      	ldr	r2, [pc, #100]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b40e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b414:	e00f      	b.n	800b436 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d106      	bne.n	800b42a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b41c:	4b15      	ldr	r3, [pc, #84]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b420:	4a14      	ldr	r2, [pc, #80]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b422:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b428:	e005      	b.n	800b436 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b42a:	4b12      	ldr	r3, [pc, #72]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42e:	4a11      	ldr	r2, [pc, #68]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b434:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b436:	4b0f      	ldr	r3, [pc, #60]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a0e      	ldr	r2, [pc, #56]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b43c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b442:	f7f8 fbdf 	bl	8003c04 <HAL_GetTick>
 800b446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b448:	e008      	b.n	800b45c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b44a:	f7f8 fbdb 	bl	8003c04 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b02      	cmp	r3, #2
 800b456:	d901      	bls.n	800b45c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e006      	b.n	800b46a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b45c:	4b05      	ldr	r3, [pc, #20]	@ (800b474 <RCCEx_PLL3_Config+0x15c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0f0      	beq.n	800b44a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b468:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	58024400 	.word	0x58024400
 800b478:	ffff0007 	.word	0xffff0007

0800b47c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b08a      	sub	sp, #40	@ 0x28
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e075      	b.n	800b57a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b494:	b2db      	uxtb	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d105      	bne.n	800b4a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7f6 fca9 	bl	8001df8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2204      	movs	r2, #4
 800b4aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f868 	bl	800b584 <HAL_SD_InitCard>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e05d      	b.n	800b57a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b4be:	f107 0308 	add.w	r3, r7, #8
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fdb5 	bl	800c034 <HAL_SD_GetCardStatus>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e052      	b.n	800b57a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b4d4:	7e3b      	ldrb	r3, [r7, #24]
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b4da:	7e7b      	ldrb	r3, [r7, #25]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d10a      	bne.n	800b4fe <HAL_SD_Init+0x82>
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <HAL_SD_Init+0x78>
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d004      	beq.n	800b4fe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4fa:	659a      	str	r2, [r3, #88]	@ 0x58
 800b4fc:	e00b      	b.n	800b516 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b502:	2b01      	cmp	r3, #1
 800b504:	d104      	bne.n	800b510 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b50c:	659a      	str	r2, [r3, #88]	@ 0x58
 800b50e:	e002      	b.n	800b516 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fe73 	bl	800c208 <HAL_SD_ConfigWideBusOperation>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e026      	b.n	800b57a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b52c:	f7f8 fb6a 	bl	8003c04 <HAL_GetTick>
 800b530:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b532:	e011      	b.n	800b558 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b534:	f7f8 fb66 	bl	8003c04 <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b542:	d109      	bne.n	800b558 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b54a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e010      	b.n	800b57a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 ff67 	bl	800c42c <HAL_SD_GetCardState>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b04      	cmp	r3, #4
 800b562:	d1e7      	bne.n	800b534 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3728      	adds	r7, #40	@ 0x28
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b584:	b590      	push	{r4, r7, lr}
 800b586:	b08d      	sub	sp, #52	@ 0x34
 800b588:	af02      	add	r7, sp, #8
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b58c:	2300      	movs	r3, #0
 800b58e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b590:	2300      	movs	r3, #0
 800b592:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b594:	2300      	movs	r3, #0
 800b596:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b598:	2300      	movs	r3, #0
 800b59a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b59c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b5a0:	f04f 0100 	mov.w	r1, #0
 800b5a4:	f7fe fd24 	bl	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b5a8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d109      	bne.n	800b5c4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b5be:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e070      	b.n	800b6a6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c6:	0a1b      	lsrs	r3, r3, #8
 800b5c8:	4a39      	ldr	r2, [pc, #228]	@ (800b6b0 <HAL_SD_InitCard+0x12c>)
 800b5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ce:	091b      	lsrs	r3, r3, #4
 800b5d0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681c      	ldr	r4, [r3, #0]
 800b5d6:	466a      	mov	r2, sp
 800b5d8:	f107 0318 	add.w	r3, r7, #24
 800b5dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5e0:	e882 0003 	stmia.w	r2, {r0, r1}
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f004 fa24 	bl	800fa38 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f004 fa67 	bl	800fac8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b606:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d007      	beq.n	800b622 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b612:	4a28      	ldr	r2, [pc, #160]	@ (800b6b4 <HAL_SD_InitCard+0x130>)
 800b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b616:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61a:	3301      	adds	r3, #1
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f8 fafd 	bl	8003c1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fff0 	bl	800c608 <SD_PowerON>
 800b628:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	431a      	orrs	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e02e      	b.n	800b6a6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 ff0f 	bl	800c46c <SD_InitCard>
 800b64e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e01b      	b.n	800b6a6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b676:	4618      	mov	r0, r3
 800b678:	f004 fabc 	bl	800fbf4 <SDMMC_CmdBlockLength>
 800b67c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00f      	beq.n	800b6a4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a0b      	ldr	r2, [pc, #44]	@ (800b6b8 <HAL_SD_InitCard+0x134>)
 800b68a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b690:	6a3b      	ldr	r3, [r7, #32]
 800b692:	431a      	orrs	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e000      	b.n	800b6a6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	372c      	adds	r7, #44	@ 0x2c
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd90      	pop	{r4, r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	014f8b59 	.word	0x014f8b59
 800b6b4:	00012110 	.word	0x00012110
 800b6b8:	1fe00fff 	.word	0x1fe00fff

0800b6bc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b092      	sub	sp, #72	@ 0x48
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b6ca:	f7f8 fa9b 	bl	8003c04 <HAL_GetTick>
 800b6ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d107      	bne.n	800b6ee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e167      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	f040 815a 	bne.w	800b9b0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b702:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	441a      	add	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d907      	bls.n	800b720 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b714:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e14e      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2203      	movs	r2, #3
 800b724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2200      	movs	r2, #0
 800b72e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b734:	2b01      	cmp	r3, #1
 800b736:	d002      	beq.n	800b73e <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800b738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73a:	025b      	lsls	r3, r3, #9
 800b73c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b73e:	f04f 33ff 	mov.w	r3, #4294967295
 800b742:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	025b      	lsls	r3, r3, #9
 800b748:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b74a:	2390      	movs	r3, #144	@ 0x90
 800b74c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b74e:	2302      	movs	r3, #2
 800b750:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b752:	2300      	movs	r3, #0
 800b754:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b756:	2300      	movs	r3, #0
 800b758:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f107 0214 	add.w	r2, r7, #20
 800b762:	4611      	mov	r1, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f004 fa19 	bl	800fb9c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b778:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d90a      	bls.n	800b796 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2202      	movs	r2, #2
 800b784:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b78c:	4618      	mov	r0, r3
 800b78e:	f004 fa77 	bl	800fc80 <SDMMC_CmdReadMultiBlock>
 800b792:	6478      	str	r0, [r7, #68]	@ 0x44
 800b794:	e009      	b.n	800b7aa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f004 fa49 	bl	800fc3a <SDMMC_CmdReadSingleBlock>
 800b7a8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d012      	beq.n	800b7d6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a84      	ldr	r2, [pc, #528]	@ (800b9c8 <HAL_SD_ReadBlocks+0x30c>)
 800b7b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e0f3      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b7da:	e058      	b.n	800b88e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d033      	beq.n	800b852 <HAL_SD_ReadBlocks+0x196>
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ec:	2b1f      	cmp	r3, #31
 800b7ee:	d930      	bls.n	800b852 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7f4:	e027      	b.n	800b846 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f004 f946 	bl	800fa8c <SDMMC_ReadFIFO>
 800b800:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b804:	b2da      	uxtb	r2, r3
 800b806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b808:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80c:	3301      	adds	r3, #1
 800b80e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	b2da      	uxtb	r2, r3
 800b816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b818:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b81c:	3301      	adds	r3, #1
 800b81e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b822:	0c1b      	lsrs	r3, r3, #16
 800b824:	b2da      	uxtb	r2, r3
 800b826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b828:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82c:	3301      	adds	r3, #1
 800b82e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b832:	0e1b      	lsrs	r3, r3, #24
 800b834:	b2da      	uxtb	r2, r3
 800b836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b838:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b83c:	3301      	adds	r3, #1
 800b83e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b842:	3301      	adds	r3, #1
 800b844:	643b      	str	r3, [r7, #64]	@ 0x40
 800b846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b848:	2b07      	cmp	r3, #7
 800b84a:	d9d4      	bls.n	800b7f6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800b84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84e:	3b20      	subs	r3, #32
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b852:	f7f8 f9d7 	bl	8003c04 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b85e:	429a      	cmp	r2, r3
 800b860:	d902      	bls.n	800b868 <HAL_SD_ReadBlocks+0x1ac>
 800b862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b864:	2b00      	cmp	r3, #0
 800b866:	d112      	bne.n	800b88e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a56      	ldr	r2, [pc, #344]	@ (800b9c8 <HAL_SD_ReadBlocks+0x30c>)
 800b86e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b874:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e097      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b894:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d09f      	beq.n	800b7dc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8aa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d022      	beq.n	800b900 <HAL_SD_ReadBlocks+0x244>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d91f      	bls.n	800b900 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d01b      	beq.n	800b900 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f004 fa41 	bl	800fd54 <SDMMC_CmdStopTransfer>
 800b8d2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800b8d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d012      	beq.n	800b900 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a3a      	ldr	r2, [pc, #232]	@ (800b9c8 <HAL_SD_ReadBlocks+0x30c>)
 800b8e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e05e      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b906:	f003 0308 	and.w	r3, r3, #8
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d012      	beq.n	800b934 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a2d      	ldr	r2, [pc, #180]	@ (800b9c8 <HAL_SD_ReadBlocks+0x30c>)
 800b914:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b91a:	f043 0208 	orr.w	r2, r3, #8
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e044      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b93a:	f003 0302 	and.w	r3, r3, #2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d012      	beq.n	800b968 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a20      	ldr	r2, [pc, #128]	@ (800b9c8 <HAL_SD_ReadBlocks+0x30c>)
 800b948:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b94e:	f043 0202 	orr.w	r2, r3, #2
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e02a      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	2b00      	cmp	r3, #0
 800b974:	d012      	beq.n	800b99c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a13      	ldr	r2, [pc, #76]	@ (800b9c8 <HAL_SD_ReadBlocks+0x30c>)
 800b97c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b982:	f043 0220 	orr.w	r2, r3, #32
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e010      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b9cc <HAL_SD_ReadBlocks+0x310>)
 800b9a2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e006      	b.n	800b9be <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
  }
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3748      	adds	r7, #72	@ 0x48
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	1fe00fff 	.word	0x1fe00fff
 800b9cc:	18000f3a 	.word	0x18000f3a

0800b9d0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b092      	sub	sp, #72	@ 0x48
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b9de:	f7f8 f911 	bl	8003c04 <HAL_GetTick>
 800b9e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d107      	bne.n	800ba02 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e16b      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	f040 815e 	bne.w	800bccc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ba16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	441a      	add	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d907      	bls.n	800ba34 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e152      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2203      	movs	r2, #3
 800ba38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2200      	movs	r2, #0
 800ba42:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d002      	beq.n	800ba52 <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	025b      	lsls	r3, r3, #9
 800ba50:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba52:	f04f 33ff 	mov.w	r3, #4294967295
 800ba56:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	025b      	lsls	r3, r3, #9
 800ba5c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ba5e:	2390      	movs	r3, #144	@ 0x90
 800ba60:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ba62:	2300      	movs	r3, #0
 800ba64:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f107 0218 	add.w	r2, r7, #24
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f004 f88f 	bl	800fb9c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba8c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d90a      	bls.n	800baaa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2220      	movs	r2, #32
 800ba98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800baa0:	4618      	mov	r0, r3
 800baa2:	f004 f933 	bl	800fd0c <SDMMC_CmdWriteMultiBlock>
 800baa6:	6478      	str	r0, [r7, #68]	@ 0x44
 800baa8:	e009      	b.n	800babe <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2210      	movs	r2, #16
 800baae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bab6:	4618      	mov	r0, r3
 800bab8:	f004 f905 	bl	800fcc6 <SDMMC_CmdWriteSingleBlock>
 800babc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800babe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d012      	beq.n	800baea <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a86      	ldr	r2, [pc, #536]	@ (800bce4 <HAL_SD_WriteBlocks+0x314>)
 800baca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bad2:	431a      	orrs	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e0f7      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800baee:	e05c      	b.n	800bbaa <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d037      	beq.n	800bb6e <HAL_SD_WriteBlocks+0x19e>
 800bafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb00:	2b1f      	cmp	r3, #31
 800bb02:	d934      	bls.n	800bb6e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bb04:	2300      	movs	r3, #0
 800bb06:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb08:	e02b      	b.n	800bb62 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800bb0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb12:	3301      	adds	r3, #1
 800bb14:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	021a      	lsls	r2, r3, #8
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb24:	3301      	adds	r3, #1
 800bb26:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	041a      	lsls	r2, r3, #16
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb36:	3301      	adds	r3, #1
 800bb38:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bb3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	061a      	lsls	r2, r3, #24
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb48:	3301      	adds	r3, #1
 800bb4a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f107 0214 	add.w	r2, r7, #20
 800bb54:	4611      	mov	r1, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f003 ffa5 	bl	800faa6 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bb5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb5e:	3301      	adds	r3, #1
 800bb60:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb64:	2b07      	cmp	r3, #7
 800bb66:	d9d0      	bls.n	800bb0a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800bb68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6a:	3b20      	subs	r3, #32
 800bb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800bb6e:	f7f8 f849 	bl	8003c04 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d902      	bls.n	800bb84 <HAL_SD_WriteBlocks+0x1b4>
 800bb7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d112      	bne.n	800bbaa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a56      	ldr	r2, [pc, #344]	@ (800bce4 <HAL_SD_WriteBlocks+0x314>)
 800bb8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb92:	431a      	orrs	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e097      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbb0:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d09b      	beq.n	800baf0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68da      	ldr	r2, [r3, #12]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bbc6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d022      	beq.n	800bc1c <HAL_SD_WriteBlocks+0x24c>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d91f      	bls.n	800bc1c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d01b      	beq.n	800bc1c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f004 f8b3 	bl	800fd54 <SDMMC_CmdStopTransfer>
 800bbee:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800bbf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d012      	beq.n	800bc1c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a3a      	ldr	r2, [pc, #232]	@ (800bce4 <HAL_SD_WriteBlocks+0x314>)
 800bbfc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc04:	431a      	orrs	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e05e      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc22:	f003 0308 	and.w	r3, r3, #8
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d012      	beq.n	800bc50 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a2d      	ldr	r2, [pc, #180]	@ (800bce4 <HAL_SD_WriteBlocks+0x314>)
 800bc30:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc36:	f043 0208 	orr.w	r2, r3, #8
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e044      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d012      	beq.n	800bc84 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a20      	ldr	r2, [pc, #128]	@ (800bce4 <HAL_SD_WriteBlocks+0x314>)
 800bc64:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc6a:	f043 0202 	orr.w	r2, r3, #2
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e02a      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc8a:	f003 0310 	and.w	r3, r3, #16
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d012      	beq.n	800bcb8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a13      	ldr	r2, [pc, #76]	@ (800bce4 <HAL_SD_WriteBlocks+0x314>)
 800bc98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc9e:	f043 0210 	orr.w	r2, r3, #16
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e010      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a0a      	ldr	r2, [pc, #40]	@ (800bce8 <HAL_SD_WriteBlocks+0x318>)
 800bcbe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e006      	b.n	800bcda <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcd0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
  }
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3748      	adds	r7, #72	@ 0x48
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	1fe00fff 	.word	0x1fe00fff
 800bce8:	18000f3a 	.word	0x18000f3a

0800bcec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcfa:	0f9b      	lsrs	r3, r3, #30
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd06:	0e9b      	lsrs	r3, r3, #26
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	f003 030f 	and.w	r3, r3, #15
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd18:	0e1b      	lsrs	r3, r3, #24
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	f003 0303 	and.w	r3, r3, #3
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd2a:	0c1b      	lsrs	r3, r3, #16
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd36:	0a1b      	lsrs	r3, r3, #8
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd4c:	0d1b      	lsrs	r3, r3, #20
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd58:	0c1b      	lsrs	r3, r3, #16
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	f003 030f 	and.w	r3, r3, #15
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd6a:	0bdb      	lsrs	r3, r3, #15
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd7c:	0b9b      	lsrs	r3, r3, #14
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd8e:	0b5b      	lsrs	r3, r3, #13
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bda0:	0b1b      	lsrs	r3, r3, #12
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d163      	bne.n	800be84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdc0:	009a      	lsls	r2, r3, #2
 800bdc2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800bdcc:	0f92      	lsrs	r2, r2, #30
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd8:	0edb      	lsrs	r3, r3, #27
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	f003 0307 	and.w	r3, r3, #7
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdea:	0e1b      	lsrs	r3, r3, #24
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdfc:	0d5b      	lsrs	r3, r3, #21
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0307 	and.w	r3, r3, #7
 800be04:	b2da      	uxtb	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0e:	0c9b      	lsrs	r3, r3, #18
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 0307 	and.w	r3, r3, #7
 800be16:	b2da      	uxtb	r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be20:	0bdb      	lsrs	r3, r3, #15
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 0307 	and.w	r3, r3, #7
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	7e1b      	ldrb	r3, [r3, #24]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	f003 0307 	and.w	r3, r3, #7
 800be42:	3302      	adds	r3, #2
 800be44:	2201      	movs	r2, #1
 800be46:	fa02 f303 	lsl.w	r3, r2, r3
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800be4e:	fb03 f202 	mul.w	r2, r3, r2
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	7a1b      	ldrb	r3, [r3, #8]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f003 030f 	and.w	r3, r3, #15
 800be60:	2201      	movs	r2, #1
 800be62:	409a      	lsls	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800be70:	0a52      	lsrs	r2, r2, #9
 800be72:	fb03 f202 	mul.w	r2, r3, r2
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be80:	655a      	str	r2, [r3, #84]	@ 0x54
 800be82:	e031      	b.n	800bee8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d11d      	bne.n	800bec8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be9a:	0c1b      	lsrs	r3, r3, #16
 800be9c:	431a      	orrs	r2, r3
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	3301      	adds	r3, #1
 800bea8:	029a      	lsls	r2, r3, #10
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bebc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	655a      	str	r2, [r3, #84]	@ 0x54
 800bec6:	e00f      	b.n	800bee8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a58      	ldr	r2, [pc, #352]	@ (800c030 <HAL_SD_GetCardCSD+0x344>)
 800bece:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e09d      	b.n	800c024 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beec:	0b9b      	lsrs	r3, r3, #14
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800befe:	09db      	lsrs	r3, r3, #7
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf20:	0fdb      	lsrs	r3, r3, #31
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf2c:	0f5b      	lsrs	r3, r3, #29
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf3e:	0e9b      	lsrs	r3, r3, #26
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf50:	0d9b      	lsrs	r3, r3, #22
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf62:	0d5b      	lsrs	r3, r3, #21
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf7e:	0c1b      	lsrs	r3, r3, #16
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf92:	0bdb      	lsrs	r3, r3, #15
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bfa6:	0b9b      	lsrs	r3, r3, #14
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bfba:	0b5b      	lsrs	r3, r3, #13
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bfce:	0b1b      	lsrs	r3, r3, #12
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bfe2:	0a9b      	lsrs	r3, r3, #10
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	f003 0303 	and.w	r3, r3, #3
 800bffe:	b2da      	uxtb	r2, r3
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c00a:	085b      	lsrs	r3, r3, #1
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c012:	b2da      	uxtb	r2, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	1fe00fff 	.word	0x1fe00fff

0800c034 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b094      	sub	sp, #80	@ 0x50
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b03      	cmp	r3, #3
 800c04e:	d101      	bne.n	800c054 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e0a7      	b.n	800c1a4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fb62 	bl	800c724 <SD_SendSDStatus>
 800c060:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c064:	2b00      	cmp	r3, #0
 800c066:	d011      	beq.n	800c08c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a4f      	ldr	r2, [pc, #316]	@ (800c1ac <HAL_SD_GetCardStatus+0x178>)
 800c06e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c076:	431a      	orrs	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c08a:	e070      	b.n	800c16e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	099b      	lsrs	r3, r3, #6
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	b2da      	uxtb	r2, r3
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	095b      	lsrs	r3, r3, #5
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	0e1b      	lsrs	r3, r3, #24
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	061a      	lsls	r2, r3, #24
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c0d2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c0dc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	0e1b      	lsrs	r3, r3, #24
 800c0e2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	0d1b      	lsrs	r3, r3, #20
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	f003 030f 	and.w	r3, r3, #15
 800c104:	b2da      	uxtb	r2, r3
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	0c1b      	lsrs	r3, r3, #16
 800c10e:	b29b      	uxth	r3, r3
 800c110:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c114:	b29a      	uxth	r2, r3
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	4313      	orrs	r3, r2
 800c120:	b29a      	uxth	r2, r3
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	0a9b      	lsrs	r3, r3, #10
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c130:	b2da      	uxtb	r2, r3
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	0a1b      	lsrs	r3, r3, #8
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	b2da      	uxtb	r2, r3
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	091b      	lsrs	r3, r3, #4
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	f003 030f 	and.w	r3, r3, #15
 800c150:	b2da      	uxtb	r2, r3
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	f003 030f 	and.w	r3, r3, #15
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	0e1b      	lsrs	r3, r3, #24
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c176:	4618      	mov	r0, r3
 800c178:	f003 fd3c 	bl	800fbf4 <SDMMC_CmdBlockLength>
 800c17c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00d      	beq.n	800c1a0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a08      	ldr	r2, [pc, #32]	@ (800c1ac <HAL_SD_GetCardStatus+0x178>)
 800c18a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c190:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800c1a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3750      	adds	r7, #80	@ 0x50
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	1fe00fff 	.word	0x1fe00fff

0800c1b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c208:	b590      	push	{r4, r7, lr}
 800c20a:	b08d      	sub	sp, #52	@ 0x34
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2203      	movs	r2, #3
 800c21c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c224:	2b03      	cmp	r3, #3
 800c226:	d02e      	beq.n	800c286 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c22e:	d106      	bne.n	800c23e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c234:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	635a      	str	r2, [r3, #52]	@ 0x34
 800c23c:	e029      	b.n	800c292 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c244:	d10a      	bne.n	800c25c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fb64 	bl	800c914 <SD_WideBus_Enable>
 800c24c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	431a      	orrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	635a      	str	r2, [r3, #52]	@ 0x34
 800c25a:	e01a      	b.n	800c292 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10a      	bne.n	800c278 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fba1 	bl	800c9aa <SD_WideBus_Disable>
 800c268:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	431a      	orrs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	635a      	str	r2, [r3, #52]	@ 0x34
 800c276:	e00c      	b.n	800c292 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c27c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	635a      	str	r2, [r3, #52]	@ 0x34
 800c284:	e005      	b.n	800c292 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c28a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c296:	2b00      	cmp	r3, #0
 800c298:	d007      	beq.n	800c2aa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a5f      	ldr	r2, [pc, #380]	@ (800c41c <HAL_SD_ConfigWideBusOperation+0x214>)
 800c2a0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c2a8:	e096      	b.n	800c3d8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c2aa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c2ae:	f04f 0100 	mov.w	r1, #0
 800c2b2:	f7fd fe9d 	bl	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c2b6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 8083 	beq.w	800c3c6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	695a      	ldr	r2, [r3, #20]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4950      	ldr	r1, [pc, #320]	@ (800c420 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c2de:	fba1 1303 	umull	r1, r3, r1, r3
 800c2e2:	0e1b      	lsrs	r3, r3, #24
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d303      	bcc.n	800c2f0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	695b      	ldr	r3, [r3, #20]
 800c2ec:	61bb      	str	r3, [r7, #24]
 800c2ee:	e05a      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2f8:	d103      	bne.n	800c302 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	e051      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c30a:	d126      	bne.n	800c35a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10e      	bne.n	800c332 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	4a43      	ldr	r2, [pc, #268]	@ (800c424 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d906      	bls.n	800c32a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4a40      	ldr	r2, [pc, #256]	@ (800c420 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c320:	fba2 2303 	umull	r2, r3, r2, r3
 800c324:	0e5b      	lsrs	r3, r3, #25
 800c326:	61bb      	str	r3, [r7, #24]
 800c328:	e03d      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	61bb      	str	r3, [r7, #24]
 800c330:	e039      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33e:	4a39      	ldr	r2, [pc, #228]	@ (800c424 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d906      	bls.n	800c352 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	4a36      	ldr	r2, [pc, #216]	@ (800c420 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c348:	fba2 2303 	umull	r2, r3, r2, r3
 800c34c:	0e5b      	lsrs	r3, r3, #25
 800c34e:	61bb      	str	r3, [r7, #24]
 800c350:	e029      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	61bb      	str	r3, [r7, #24]
 800c358:	e025      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10e      	bne.n	800c380 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	4a30      	ldr	r2, [pc, #192]	@ (800c428 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d906      	bls.n	800c378 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	4a2c      	ldr	r2, [pc, #176]	@ (800c420 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c36e:	fba2 2303 	umull	r2, r3, r2, r3
 800c372:	0e1b      	lsrs	r3, r3, #24
 800c374:	61bb      	str	r3, [r7, #24]
 800c376:	e016      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	61bb      	str	r3, [r7, #24]
 800c37e:	e012      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	69fa      	ldr	r2, [r7, #28]
 800c388:	fbb2 f3f3 	udiv	r3, r2, r3
 800c38c:	4a26      	ldr	r2, [pc, #152]	@ (800c428 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d906      	bls.n	800c3a0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	4a22      	ldr	r2, [pc, #136]	@ (800c420 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c396:	fba2 2303 	umull	r2, r3, r2, r3
 800c39a:	0e1b      	lsrs	r3, r3, #24
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	e002      	b.n	800c3a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681c      	ldr	r4, [r3, #0]
 800c3aa:	466a      	mov	r2, sp
 800c3ac:	f107 0314 	add.w	r3, r7, #20
 800c3b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3b4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c3b8:	f107 0308 	add.w	r3, r7, #8
 800c3bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f003 fb3a 	bl	800fa38 <SDMMC_Init>
 800c3c4:	e008      	b.n	800c3d8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f003 fc07 	bl	800fbf4 <SDMMC_CmdBlockLength>
 800c3e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00c      	beq.n	800c408 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a0a      	ldr	r2, [pc, #40]	@ (800c41c <HAL_SD_ConfigWideBusOperation+0x214>)
 800c3f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3fa:	6a3b      	ldr	r3, [r7, #32]
 800c3fc:	431a      	orrs	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c414:	4618      	mov	r0, r3
 800c416:	372c      	adds	r7, #44	@ 0x2c
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd90      	pop	{r4, r7, pc}
 800c41c:	1fe00fff 	.word	0x1fe00fff
 800c420:	55e63b89 	.word	0x55e63b89
 800c424:	02faf080 	.word	0x02faf080
 800c428:	017d7840 	.word	0x017d7840

0800c42c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c438:	f107 030c 	add.w	r3, r7, #12
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa40 	bl	800c8c4 <SD_SendStatus>
 800c444:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d005      	beq.n	800c458 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	0a5b      	lsrs	r3, r3, #9
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c462:	693b      	ldr	r3, [r7, #16]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b090      	sub	sp, #64	@ 0x40
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c474:	2300      	movs	r3, #0
 800c476:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c478:	f7f7 fbc4 	bl	8003c04 <HAL_GetTick>
 800c47c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4618      	mov	r0, r3
 800c484:	f003 fb31 	bl	800faea <SDMMC_GetPowerState>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c48e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c492:	e0b5      	b.n	800c600 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c498:	2b03      	cmp	r3, #3
 800c49a:	d02e      	beq.n	800c4fa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f003 fd7c 	bl	800ff9e <SDMMC_CmdSendCID>
 800c4a6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <SD_InitCard+0x46>
    {
      return errorstate;
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b0:	e0a6      	b.n	800c600 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f003 fb5c 	bl	800fb76 <SDMMC_GetResponse>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2104      	movs	r1, #4
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f003 fb53 	bl	800fb76 <SDMMC_GetResponse>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2108      	movs	r1, #8
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f003 fb4a 	bl	800fb76 <SDMMC_GetResponse>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	210c      	movs	r1, #12
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f003 fb41 	bl	800fb76 <SDMMC_GetResponse>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d01d      	beq.n	800c53e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c502:	e019      	b.n	800c538 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f107 020a 	add.w	r2, r7, #10
 800c50c:	4611      	mov	r1, r2
 800c50e:	4618      	mov	r0, r3
 800c510:	f003 fd84 	bl	801001c <SDMMC_CmdSetRelAdd>
 800c514:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <SD_InitCard+0xb4>
      {
        return errorstate;
 800c51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51e:	e06f      	b.n	800c600 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c520:	f7f7 fb70 	bl	8003c04 <HAL_GetTick>
 800c524:	4602      	mov	r2, r0
 800c526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c52e:	4293      	cmp	r3, r2
 800c530:	d902      	bls.n	800c538 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c532:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c536:	e063      	b.n	800c600 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c538:	897b      	ldrh	r3, [r7, #10]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0e2      	beq.n	800c504 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c542:	2b03      	cmp	r3, #3
 800c544:	d036      	beq.n	800c5b4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c546:	897b      	ldrh	r3, [r7, #10]
 800c548:	461a      	mov	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c556:	041b      	lsls	r3, r3, #16
 800c558:	4619      	mov	r1, r3
 800c55a:	4610      	mov	r0, r2
 800c55c:	f003 fd3e 	bl	800ffdc <SDMMC_CmdSendCSD>
 800c560:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <SD_InitCard+0x100>
    {
      return errorstate;
 800c568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56a:	e049      	b.n	800c600 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f003 faff 	bl	800fb76 <SDMMC_GetResponse>
 800c578:	4602      	mov	r2, r0
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2104      	movs	r1, #4
 800c584:	4618      	mov	r0, r3
 800c586:	f003 faf6 	bl	800fb76 <SDMMC_GetResponse>
 800c58a:	4602      	mov	r2, r0
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2108      	movs	r1, #8
 800c596:	4618      	mov	r0, r3
 800c598:	f003 faed 	bl	800fb76 <SDMMC_GetResponse>
 800c59c:	4602      	mov	r2, r0
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	210c      	movs	r1, #12
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f003 fae4 	bl	800fb76 <SDMMC_GetResponse>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f003 fadb 	bl	800fb76 <SDMMC_GetResponse>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	0d1a      	lsrs	r2, r3, #20
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c5c8:	f107 030c 	add.w	r3, r7, #12
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7ff fb8c 	bl	800bcec <HAL_SD_GetCardCSD>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c5de:	e00f      	b.n	800c600 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e8:	041b      	lsls	r3, r3, #16
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	f003 fbed 	bl	800fdcc <SDMMC_CmdSelDesel>
 800c5f2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <SD_InitCard+0x192>
  {
    return errorstate;
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fc:	e000      	b.n	800c600 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3740      	adds	r7, #64	@ 0x40
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c610:	2300      	movs	r3, #0
 800c612:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c614:	2300      	movs	r3, #0
 800c616:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c618:	2300      	movs	r3, #0
 800c61a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4618      	mov	r0, r3
 800c622:	f003 fbf6 	bl	800fe12 <SDMMC_CmdGoIdleState>
 800c626:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	e072      	b.n	800c718 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	f003 fc09 	bl	800fe4e <SDMMC_CmdOperCond>
 800c63c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c644:	d10d      	bne.n	800c662 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4618      	mov	r0, r3
 800c652:	f003 fbde 	bl	800fe12 <SDMMC_CmdGoIdleState>
 800c656:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <SD_PowerON+0x60>
    {
      return errorstate;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	e05a      	b.n	800c718 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d137      	bne.n	800c6e0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f003 fc09 	bl	800fe8e <SDMMC_CmdAppCommand>
 800c67c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d02d      	beq.n	800c6e0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c684:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c688:	e046      	b.n	800c718 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2100      	movs	r1, #0
 800c690:	4618      	mov	r0, r3
 800c692:	f003 fbfc 	bl	800fe8e <SDMMC_CmdAppCommand>
 800c696:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	e03a      	b.n	800c718 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	491e      	ldr	r1, [pc, #120]	@ (800c720 <SD_PowerON+0x118>)
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f003 fc13 	bl	800fed4 <SDMMC_CmdAppOperCommand>
 800c6ae:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d002      	beq.n	800c6bc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c6ba:	e02d      	b.n	800c718 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f003 fa57 	bl	800fb76 <SDMMC_GetResponse>
 800c6c8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	0fdb      	lsrs	r3, r3, #31
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <SD_PowerON+0xce>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e000      	b.n	800c6d8 <SD_PowerON+0xd0>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	613b      	str	r3, [r7, #16]

    count++;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d802      	bhi.n	800c6f0 <SD_PowerON+0xe8>
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0cc      	beq.n	800c68a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d902      	bls.n	800c700 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c6fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c6fe:	e00b      	b.n	800c718 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	c1100000 	.word	0xc1100000

0800c724 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08c      	sub	sp, #48	@ 0x30
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c72e:	f7f7 fa69 	bl	8003c04 <HAL_GetTick>
 800c732:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2100      	movs	r1, #0
 800c73e:	4618      	mov	r0, r3
 800c740:	f003 fa19 	bl	800fb76 <SDMMC_GetResponse>
 800c744:	4603      	mov	r3, r0
 800c746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c74a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c74e:	d102      	bne.n	800c756 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c750:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c754:	e0b0      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2140      	movs	r1, #64	@ 0x40
 800c75c:	4618      	mov	r0, r3
 800c75e:	f003 fa49 	bl	800fbf4 <SDMMC_CmdBlockLength>
 800c762:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d005      	beq.n	800c776 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	e0a0      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c77e:	041b      	lsls	r3, r3, #16
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f003 fb83 	bl	800fe8e <SDMMC_CmdAppCommand>
 800c788:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	e08d      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c79c:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c7a2:	2340      	movs	r3, #64	@ 0x40
 800c7a4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c7a6:	2360      	movs	r3, #96	@ 0x60
 800c7a8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f107 0208 	add.w	r2, r7, #8
 800c7be:	4611      	mov	r1, r2
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f003 f9eb 	bl	800fb9c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f003 fc6b 	bl	80100a6 <SDMMC_CmdStatusRegister>
 800c7d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d02b      	beq.n	800c830 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	e069      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d013      	beq.n	800c81a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7f6:	e00d      	b.n	800c814 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f003 f945 	bl	800fa8c <SDMMC_ReadFIFO>
 800c802:	4602      	mov	r2, r0
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	601a      	str	r2, [r3, #0]
        pData++;
 800c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80a:	3304      	adds	r3, #4
 800c80c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800c80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c810:	3301      	adds	r3, #1
 800c812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c816:	2b07      	cmp	r3, #7
 800c818:	d9ee      	bls.n	800c7f8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c81a:	f7f7 f9f3 	bl	8003c04 <HAL_GetTick>
 800c81e:	4602      	mov	r2, r0
 800c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c828:	d102      	bne.n	800c830 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c82a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c82e:	e043      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c836:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0d2      	beq.n	800c7e4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c844:	f003 0308 	and.w	r3, r3, #8
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c84c:	2308      	movs	r3, #8
 800c84e:	e033      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c85e:	2302      	movs	r3, #2
 800c860:	e02a      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c868:	f003 0320 	and.w	r3, r3, #32
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d017      	beq.n	800c8a0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c870:	2320      	movs	r3, #32
 800c872:	e021      	b.n	800c8b8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4618      	mov	r0, r3
 800c87a:	f003 f907 	bl	800fa8c <SDMMC_ReadFIFO>
 800c87e:	4602      	mov	r2, r0
 800c880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c882:	601a      	str	r2, [r3, #0]
    pData++;
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	3304      	adds	r3, #4
 800c888:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c88a:	f7f7 f9bb 	bl	8003c04 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c898:	d102      	bne.n	800c8a0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c89a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c89e:	e00b      	b.n	800c8b8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e2      	bne.n	800c874 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a03      	ldr	r2, [pc, #12]	@ (800c8c0 <SD_SendSDStatus+0x19c>)
 800c8b4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3730      	adds	r7, #48	@ 0x30
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	18000f3a 	.word	0x18000f3a

0800c8c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d102      	bne.n	800c8da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c8d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c8d8:	e018      	b.n	800c90c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8e2:	041b      	lsls	r3, r3, #16
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f003 fbba 	bl	8010060 <SDMMC_CmdSendStatus>
 800c8ec:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	e009      	b.n	800c90c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	f003 f939 	bl	800fb76 <SDMMC_GetResponse>
 800c904:	4602      	mov	r2, r0
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c91c:	2300      	movs	r3, #0
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	2300      	movs	r3, #0
 800c922:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2100      	movs	r1, #0
 800c92a:	4618      	mov	r0, r3
 800c92c:	f003 f923 	bl	800fb76 <SDMMC_GetResponse>
 800c930:	4603      	mov	r3, r0
 800c932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c93a:	d102      	bne.n	800c942 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c93c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c940:	e02f      	b.n	800c9a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c942:	f107 030c 	add.w	r3, r7, #12
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f879 	bl	800ca40 <SD_FindSCR>
 800c94e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	e023      	b.n	800c9a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d01c      	beq.n	800c99e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c96c:	041b      	lsls	r3, r3, #16
 800c96e:	4619      	mov	r1, r3
 800c970:	4610      	mov	r0, r2
 800c972:	f003 fa8c 	bl	800fe8e <SDMMC_CmdAppCommand>
 800c976:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	e00f      	b.n	800c9a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2102      	movs	r1, #2
 800c988:	4618      	mov	r0, r3
 800c98a:	f003 fac3 	bl	800ff14 <SDMMC_CmdBusWidth>
 800c98e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	e003      	b.n	800c9a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c99a:	2300      	movs	r3, #0
 800c99c:	e001      	b.n	800c9a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c99e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b086      	sub	sp, #24
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f003 f8d8 	bl	800fb76 <SDMMC_GetResponse>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c9d0:	d102      	bne.n	800c9d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c9d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c9d6:	e02f      	b.n	800ca38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c9d8:	f107 030c 	add.w	r3, r7, #12
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f82e 	bl	800ca40 <SD_FindSCR>
 800c9e4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	e023      	b.n	800ca38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d01c      	beq.n	800ca34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca02:	041b      	lsls	r3, r3, #16
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f003 fa41 	bl	800fe8e <SDMMC_CmdAppCommand>
 800ca0c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	e00f      	b.n	800ca38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f003 fa78 	bl	800ff14 <SDMMC_CmdBusWidth>
 800ca24:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	e003      	b.n	800ca38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ca30:	2300      	movs	r3, #0
 800ca32:	e001      	b.n	800ca38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ca34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08e      	sub	sp, #56	@ 0x38
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca4a:	f7f7 f8db 	bl	8003c04 <HAL_GetTick>
 800ca4e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ca50:	2300      	movs	r3, #0
 800ca52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ca54:	2300      	movs	r3, #0
 800ca56:	60bb      	str	r3, [r7, #8]
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2108      	movs	r1, #8
 800ca66:	4618      	mov	r0, r3
 800ca68:	f003 f8c4 	bl	800fbf4 <SDMMC_CmdBlockLength>
 800ca6c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca76:	e0ad      	b.n	800cbd4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca80:	041b      	lsls	r3, r3, #16
 800ca82:	4619      	mov	r1, r3
 800ca84:	4610      	mov	r0, r2
 800ca86:	f003 fa02 	bl	800fe8e <SDMMC_CmdAppCommand>
 800ca8a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca94:	e09e      	b.n	800cbd4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca96:	f04f 33ff 	mov.w	r3, #4294967295
 800ca9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ca9c:	2308      	movs	r3, #8
 800ca9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800caa0:	2330      	movs	r3, #48	@ 0x30
 800caa2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800caa4:	2302      	movs	r3, #2
 800caa6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800caac:	2301      	movs	r3, #1
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f107 0210 	add.w	r2, r7, #16
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f003 f86e 	bl	800fb9c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f003 fa48 	bl	800ff5a <SDMMC_CmdSendSCR>
 800caca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d027      	beq.n	800cb22 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad4:	e07e      	b.n	800cbd4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cadc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d113      	bne.n	800cb0c <SD_FindSCR+0xcc>
 800cae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d110      	bne.n	800cb0c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4618      	mov	r0, r3
 800caf0:	f002 ffcc 	bl	800fa8c <SDMMC_ReadFIFO>
 800caf4:	4603      	mov	r3, r0
 800caf6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f002 ffc5 	bl	800fa8c <SDMMC_ReadFIFO>
 800cb02:	4603      	mov	r3, r0
 800cb04:	60fb      	str	r3, [r7, #12]
      index++;
 800cb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb08:	3301      	adds	r3, #1
 800cb0a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cb0c:	f7f7 f87a 	bl	8003c04 <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d102      	bne.n	800cb22 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cb1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb20:	e058      	b.n	800cbd4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb28:	f240 532a 	movw	r3, #1322	@ 0x52a
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d0d1      	beq.n	800cad6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb38:	f003 0308 	and.w	r3, r3, #8
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d005      	beq.n	800cb4c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2208      	movs	r2, #8
 800cb46:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cb48:	2308      	movs	r3, #8
 800cb4a:	e043      	b.n	800cbd4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb52:	f003 0302 	and.w	r3, r3, #2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb62:	2302      	movs	r3, #2
 800cb64:	e036      	b.n	800cbd4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb6c:	f003 0320 	and.w	r3, r3, #32
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d005      	beq.n	800cb80 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	e029      	b.n	800cbd4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a15      	ldr	r2, [pc, #84]	@ (800cbdc <SD_FindSCR+0x19c>)
 800cb86:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	061a      	lsls	r2, r3, #24
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	021b      	lsls	r3, r3, #8
 800cb90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	0a1b      	lsrs	r3, r3, #8
 800cb9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cb9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	0e1b      	lsrs	r3, r3, #24
 800cba4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	601a      	str	r2, [r3, #0]
    scr++;
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	3304      	adds	r3, #4
 800cbae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	061a      	lsls	r2, r3, #24
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	021b      	lsls	r3, r3, #8
 800cbb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cbbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	0a1b      	lsrs	r3, r3, #8
 800cbc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cbc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	0e1b      	lsrs	r3, r3, #24
 800cbcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3738      	adds	r7, #56	@ 0x38
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	18000f3a 	.word	0x18000f3a

0800cbe0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e10f      	b.n	800ce12 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a87      	ldr	r2, [pc, #540]	@ (800ce1c <HAL_SPI_Init+0x23c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d00f      	beq.n	800cc22 <HAL_SPI_Init+0x42>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a86      	ldr	r2, [pc, #536]	@ (800ce20 <HAL_SPI_Init+0x240>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d00a      	beq.n	800cc22 <HAL_SPI_Init+0x42>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a84      	ldr	r2, [pc, #528]	@ (800ce24 <HAL_SPI_Init+0x244>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d005      	beq.n	800cc22 <HAL_SPI_Init+0x42>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	2b0f      	cmp	r3, #15
 800cc1c:	d901      	bls.n	800cc22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e0f7      	b.n	800ce12 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fbbc 	bl	800d3a0 <SPI_GetPacketSize>
 800cc28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a7b      	ldr	r2, [pc, #492]	@ (800ce1c <HAL_SPI_Init+0x23c>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d00c      	beq.n	800cc4e <HAL_SPI_Init+0x6e>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a79      	ldr	r2, [pc, #484]	@ (800ce20 <HAL_SPI_Init+0x240>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d007      	beq.n	800cc4e <HAL_SPI_Init+0x6e>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a78      	ldr	r2, [pc, #480]	@ (800ce24 <HAL_SPI_Init+0x244>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d002      	beq.n	800cc4e <HAL_SPI_Init+0x6e>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b08      	cmp	r3, #8
 800cc4c:	d811      	bhi.n	800cc72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc52:	4a72      	ldr	r2, [pc, #456]	@ (800ce1c <HAL_SPI_Init+0x23c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d009      	beq.n	800cc6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a70      	ldr	r2, [pc, #448]	@ (800ce20 <HAL_SPI_Init+0x240>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d004      	beq.n	800cc6c <HAL_SPI_Init+0x8c>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a6f      	ldr	r2, [pc, #444]	@ (800ce24 <HAL_SPI_Init+0x244>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d104      	bne.n	800cc76 <HAL_SPI_Init+0x96>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b10      	cmp	r3, #16
 800cc70:	d901      	bls.n	800cc76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e0cd      	b.n	800ce12 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d106      	bne.n	800cc90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7f5 f942 	bl	8001f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2202      	movs	r2, #2
 800cc94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f022 0201 	bic.w	r2, r2, #1
 800cca6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ccb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ccbc:	d119      	bne.n	800ccf2 <HAL_SPI_Init+0x112>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ccc6:	d103      	bne.n	800ccd0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d008      	beq.n	800cce2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10c      	bne.n	800ccf2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cce0:	d107      	bne.n	800ccf2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ccf0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00f      	beq.n	800cd1e <HAL_SPI_Init+0x13e>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	2b06      	cmp	r3, #6
 800cd04:	d90b      	bls.n	800cd1e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	601a      	str	r2, [r3, #0]
 800cd1c:	e007      	b.n	800cd2e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	69da      	ldr	r2, [r3, #28]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd36:	431a      	orrs	r2, r3
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd40:	ea42 0103 	orr.w	r1, r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	431a      	orrs	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	431a      	orrs	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd8e:	ea42 0103 	orr.w	r1, r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d113      	bne.n	800cdce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cdb8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cdcc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f022 0201 	bic.w	r2, r2, #1
 800cddc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	430a      	orrs	r2, r1
 800cdfe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	40013000 	.word	0x40013000
 800ce20:	40003800 	.word	0x40003800
 800ce24:	40003c00 	.word	0x40003c00

0800ce28 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af02      	add	r7, sp, #8
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	603b      	str	r3, [r7, #0]
 800ce34:	4613      	mov	r3, r2
 800ce36:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3320      	adds	r3, #32
 800ce3e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce40:	f7f6 fee0 	bl	8003c04 <HAL_GetTick>
 800ce44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d001      	beq.n	800ce56 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ce52:	2302      	movs	r3, #2
 800ce54:	e1d1      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <HAL_SPI_Transmit+0x3a>
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	e1c9      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d101      	bne.n	800ce74 <HAL_SPI_Transmit+0x4c>
 800ce70:	2302      	movs	r3, #2
 800ce72:	e1c2      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2203      	movs	r2, #3
 800ce80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	88fa      	ldrh	r2, [r7, #6]
 800ce96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	88fa      	ldrh	r2, [r7, #6]
 800ce9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cecc:	d108      	bne.n	800cee0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	e009      	b.n	800cef4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cef2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	4b96      	ldr	r3, [pc, #600]	@ (800d154 <HAL_SPI_Transmit+0x32c>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	88f9      	ldrh	r1, [r7, #6]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	6812      	ldr	r2, [r2, #0]
 800cf04:	430b      	orrs	r3, r1
 800cf06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f042 0201 	orr.w	r2, r2, #1
 800cf16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf20:	d107      	bne.n	800cf32 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	2b0f      	cmp	r3, #15
 800cf38:	d947      	bls.n	800cfca <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cf3a:	e03f      	b.n	800cfbc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d114      	bne.n	800cf74 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6812      	ldr	r2, [r2, #0]
 800cf54:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf5a:	1d1a      	adds	r2, r3, #4
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cf72:	e023      	b.n	800cfbc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf74:	f7f6 fe46 	bl	8003c04 <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d803      	bhi.n	800cf8c <HAL_SPI_Transmit+0x164>
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8a:	d102      	bne.n	800cf92 <HAL_SPI_Transmit+0x16a>
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d114      	bne.n	800cfbc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 f936 	bl	800d204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cfb8:	2303      	movs	r3, #3
 800cfba:	e11e      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1b9      	bne.n	800cf3c <HAL_SPI_Transmit+0x114>
 800cfc8:	e0f1      	b.n	800d1ae <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	2b07      	cmp	r3, #7
 800cfd0:	f240 80e6 	bls.w	800d1a0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cfd4:	e05d      	b.n	800d092 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	695b      	ldr	r3, [r3, #20]
 800cfdc:	f003 0302 	and.w	r3, r3, #2
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d132      	bne.n	800d04a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d918      	bls.n	800d022 <HAL_SPI_Transmit+0x1fa>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d014      	beq.n	800d022 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d008:	1d1a      	adds	r2, r3, #4
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d014:	b29b      	uxth	r3, r3
 800d016:	3b02      	subs	r3, #2
 800d018:	b29a      	uxth	r2, r3
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d020:	e037      	b.n	800d092 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d026:	881a      	ldrh	r2, [r3, #0]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d030:	1c9a      	adds	r2, r3, #2
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	3b01      	subs	r3, #1
 800d040:	b29a      	uxth	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d048:	e023      	b.n	800d092 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d04a:	f7f6 fddb 	bl	8003c04 <HAL_GetTick>
 800d04e:	4602      	mov	r2, r0
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d803      	bhi.n	800d062 <HAL_SPI_Transmit+0x23a>
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d060:	d102      	bne.n	800d068 <HAL_SPI_Transmit+0x240>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d114      	bne.n	800d092 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	f000 f8cb 	bl	800d204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d074:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2201      	movs	r2, #1
 800d082:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d08e:	2303      	movs	r3, #3
 800d090:	e0b3      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d098:	b29b      	uxth	r3, r3
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d19b      	bne.n	800cfd6 <HAL_SPI_Transmit+0x1ae>
 800d09e:	e086      	b.n	800d1ae <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	f003 0302 	and.w	r3, r3, #2
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d154      	bne.n	800d158 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	2b03      	cmp	r3, #3
 800d0b8:	d918      	bls.n	800d0ec <HAL_SPI_Transmit+0x2c4>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	d914      	bls.n	800d0ec <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6812      	ldr	r2, [r2, #0]
 800d0cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0d2:	1d1a      	adds	r2, r3, #4
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b04      	subs	r3, #4
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d0ea:	e059      	b.n	800d1a0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d917      	bls.n	800d128 <HAL_SPI_Transmit+0x300>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d013      	beq.n	800d128 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d104:	881a      	ldrh	r2, [r3, #0]
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d10e:	1c9a      	adds	r2, r3, #2
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	3b02      	subs	r3, #2
 800d11e:	b29a      	uxth	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d126:	e03b      	b.n	800d1a0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3320      	adds	r3, #32
 800d132:	7812      	ldrb	r2, [r2, #0]
 800d134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d146:	b29b      	uxth	r3, r3
 800d148:	3b01      	subs	r3, #1
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d152:	e025      	b.n	800d1a0 <HAL_SPI_Transmit+0x378>
 800d154:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d158:	f7f6 fd54 	bl	8003c04 <HAL_GetTick>
 800d15c:	4602      	mov	r2, r0
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d803      	bhi.n	800d170 <HAL_SPI_Transmit+0x348>
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d102      	bne.n	800d176 <HAL_SPI_Transmit+0x34e>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d114      	bne.n	800d1a0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f000 f844 	bl	800d204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d182:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e02c      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f47f af79 	bne.w	800d0a0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2108      	movs	r1, #8
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 f8c3 	bl	800d344 <SPI_WaitOnFlagUntilTimeout>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d007      	beq.n	800d1d4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1ca:	f043 0220 	orr.w	r2, r3, #32
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f000 f815 	bl	800d204 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e000      	b.n	800d1fa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
  }
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop

0800d204 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	695b      	ldr	r3, [r3, #20]
 800d212:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	699a      	ldr	r2, [r3, #24]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f042 0208 	orr.w	r2, r2, #8
 800d222:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	699a      	ldr	r2, [r3, #24]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f042 0210 	orr.w	r2, r2, #16
 800d232:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0201 	bic.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6919      	ldr	r1, [r3, #16]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	4b3c      	ldr	r3, [pc, #240]	@ (800d340 <SPI_CloseTransfer+0x13c>)
 800d250:	400b      	ands	r3, r1
 800d252:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689a      	ldr	r2, [r3, #8]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d262:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b04      	cmp	r3, #4
 800d26e:	d014      	beq.n	800d29a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00f      	beq.n	800d29a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d280:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	699a      	ldr	r2, [r3, #24]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f042 0220 	orr.w	r2, r2, #32
 800d298:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d014      	beq.n	800d2d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00f      	beq.n	800d2d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2b6:	f043 0204 	orr.w	r2, r3, #4
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	699a      	ldr	r2, [r3, #24]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00f      	beq.n	800d2fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2e0:	f043 0201 	orr.w	r2, r3, #1
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	699a      	ldr	r2, [r3, #24]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00f      	beq.n	800d324 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d30a:	f043 0208 	orr.w	r2, r3, #8
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	699a      	ldr	r2, [r3, #24]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d322:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d334:	bf00      	nop
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	fffffc90 	.word	0xfffffc90

0800d344 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	603b      	str	r3, [r7, #0]
 800d350:	4613      	mov	r3, r2
 800d352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d354:	e010      	b.n	800d378 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d356:	f7f6 fc55 	bl	8003c04 <HAL_GetTick>
 800d35a:	4602      	mov	r2, r0
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d803      	bhi.n	800d36e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36c:	d102      	bne.n	800d374 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d374:	2303      	movs	r3, #3
 800d376:	e00f      	b.n	800d398 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	695a      	ldr	r2, [r3, #20]
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	4013      	ands	r3, r2
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	429a      	cmp	r2, r3
 800d386:	bf0c      	ite	eq
 800d388:	2301      	moveq	r3, #1
 800d38a:	2300      	movne	r3, #0
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	461a      	mov	r2, r3
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	429a      	cmp	r2, r3
 800d394:	d0df      	beq.n	800d356 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ac:	095b      	lsrs	r3, r3, #5
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	3307      	adds	r3, #7
 800d3be:	08db      	lsrs	r3, r3, #3
 800d3c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b082      	sub	sp, #8
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e049      	b.n	800d47c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7f4 fdf1 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2202      	movs	r2, #2
 800d406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	3304      	adds	r3, #4
 800d412:	4619      	mov	r1, r3
 800d414:	4610      	mov	r0, r2
 800d416:	f000 fbbf 	bl	800db98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2201      	movs	r2, #1
 800d43e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2201      	movs	r2, #1
 800d45e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2201      	movs	r2, #1
 800d466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d101      	bne.n	800d496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e049      	b.n	800d52a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d106      	bne.n	800d4b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 f841 	bl	800d532 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3304      	adds	r3, #4
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	4610      	mov	r0, r2
 800d4c4:	f000 fb68 	bl	800db98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d53a:	bf00      	nop
 800d53c:	370c      	adds	r7, #12
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
	...

0800d548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d109      	bne.n	800d56c <HAL_TIM_PWM_Start+0x24>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b01      	cmp	r3, #1
 800d562:	bf14      	ite	ne
 800d564:	2301      	movne	r3, #1
 800d566:	2300      	moveq	r3, #0
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	e03c      	b.n	800d5e6 <HAL_TIM_PWM_Start+0x9e>
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d109      	bne.n	800d586 <HAL_TIM_PWM_Start+0x3e>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	bf14      	ite	ne
 800d57e:	2301      	movne	r3, #1
 800d580:	2300      	moveq	r3, #0
 800d582:	b2db      	uxtb	r3, r3
 800d584:	e02f      	b.n	800d5e6 <HAL_TIM_PWM_Start+0x9e>
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b08      	cmp	r3, #8
 800d58a:	d109      	bne.n	800d5a0 <HAL_TIM_PWM_Start+0x58>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b01      	cmp	r3, #1
 800d596:	bf14      	ite	ne
 800d598:	2301      	movne	r3, #1
 800d59a:	2300      	moveq	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	e022      	b.n	800d5e6 <HAL_TIM_PWM_Start+0x9e>
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	2b0c      	cmp	r3, #12
 800d5a4:	d109      	bne.n	800d5ba <HAL_TIM_PWM_Start+0x72>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	bf14      	ite	ne
 800d5b2:	2301      	movne	r3, #1
 800d5b4:	2300      	moveq	r3, #0
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	e015      	b.n	800d5e6 <HAL_TIM_PWM_Start+0x9e>
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b10      	cmp	r3, #16
 800d5be:	d109      	bne.n	800d5d4 <HAL_TIM_PWM_Start+0x8c>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	bf14      	ite	ne
 800d5cc:	2301      	movne	r3, #1
 800d5ce:	2300      	moveq	r3, #0
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	e008      	b.n	800d5e6 <HAL_TIM_PWM_Start+0x9e>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	bf14      	ite	ne
 800d5e0:	2301      	movne	r3, #1
 800d5e2:	2300      	moveq	r3, #0
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d001      	beq.n	800d5ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e0ab      	b.n	800d746 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <HAL_TIM_PWM_Start+0xb6>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5fc:	e023      	b.n	800d646 <HAL_TIM_PWM_Start+0xfe>
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b04      	cmp	r3, #4
 800d602:	d104      	bne.n	800d60e <HAL_TIM_PWM_Start+0xc6>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2202      	movs	r2, #2
 800d608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d60c:	e01b      	b.n	800d646 <HAL_TIM_PWM_Start+0xfe>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b08      	cmp	r3, #8
 800d612:	d104      	bne.n	800d61e <HAL_TIM_PWM_Start+0xd6>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2202      	movs	r2, #2
 800d618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d61c:	e013      	b.n	800d646 <HAL_TIM_PWM_Start+0xfe>
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b0c      	cmp	r3, #12
 800d622:	d104      	bne.n	800d62e <HAL_TIM_PWM_Start+0xe6>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2202      	movs	r2, #2
 800d628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d62c:	e00b      	b.n	800d646 <HAL_TIM_PWM_Start+0xfe>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b10      	cmp	r3, #16
 800d632:	d104      	bne.n	800d63e <HAL_TIM_PWM_Start+0xf6>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d63c:	e003      	b.n	800d646 <HAL_TIM_PWM_Start+0xfe>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2202      	movs	r2, #2
 800d642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2201      	movs	r2, #1
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fec2 	bl	800e3d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a3d      	ldr	r2, [pc, #244]	@ (800d750 <HAL_TIM_PWM_Start+0x208>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d013      	beq.n	800d686 <HAL_TIM_PWM_Start+0x13e>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a3c      	ldr	r2, [pc, #240]	@ (800d754 <HAL_TIM_PWM_Start+0x20c>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00e      	beq.n	800d686 <HAL_TIM_PWM_Start+0x13e>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a3a      	ldr	r2, [pc, #232]	@ (800d758 <HAL_TIM_PWM_Start+0x210>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d009      	beq.n	800d686 <HAL_TIM_PWM_Start+0x13e>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a39      	ldr	r2, [pc, #228]	@ (800d75c <HAL_TIM_PWM_Start+0x214>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d004      	beq.n	800d686 <HAL_TIM_PWM_Start+0x13e>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a37      	ldr	r2, [pc, #220]	@ (800d760 <HAL_TIM_PWM_Start+0x218>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d101      	bne.n	800d68a <HAL_TIM_PWM_Start+0x142>
 800d686:	2301      	movs	r3, #1
 800d688:	e000      	b.n	800d68c <HAL_TIM_PWM_Start+0x144>
 800d68a:	2300      	movs	r3, #0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d007      	beq.n	800d6a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d69e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a2a      	ldr	r2, [pc, #168]	@ (800d750 <HAL_TIM_PWM_Start+0x208>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d02c      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6b2:	d027      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a2a      	ldr	r2, [pc, #168]	@ (800d764 <HAL_TIM_PWM_Start+0x21c>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d022      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a29      	ldr	r2, [pc, #164]	@ (800d768 <HAL_TIM_PWM_Start+0x220>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d01d      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a27      	ldr	r2, [pc, #156]	@ (800d76c <HAL_TIM_PWM_Start+0x224>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d018      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a1f      	ldr	r2, [pc, #124]	@ (800d754 <HAL_TIM_PWM_Start+0x20c>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d013      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a23      	ldr	r2, [pc, #140]	@ (800d770 <HAL_TIM_PWM_Start+0x228>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d00e      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a1b      	ldr	r2, [pc, #108]	@ (800d758 <HAL_TIM_PWM_Start+0x210>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d009      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a1f      	ldr	r2, [pc, #124]	@ (800d774 <HAL_TIM_PWM_Start+0x22c>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d004      	beq.n	800d704 <HAL_TIM_PWM_Start+0x1bc>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a1e      	ldr	r2, [pc, #120]	@ (800d778 <HAL_TIM_PWM_Start+0x230>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d115      	bne.n	800d730 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	4b1c      	ldr	r3, [pc, #112]	@ (800d77c <HAL_TIM_PWM_Start+0x234>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b06      	cmp	r3, #6
 800d714:	d015      	beq.n	800d742 <HAL_TIM_PWM_Start+0x1fa>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d71c:	d011      	beq.n	800d742 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f042 0201 	orr.w	r2, r2, #1
 800d72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d72e:	e008      	b.n	800d742 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0201 	orr.w	r2, r2, #1
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	e000      	b.n	800d744 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	40010000 	.word	0x40010000
 800d754:	40010400 	.word	0x40010400
 800d758:	40014000 	.word	0x40014000
 800d75c:	40014400 	.word	0x40014400
 800d760:	40014800 	.word	0x40014800
 800d764:	40000400 	.word	0x40000400
 800d768:	40000800 	.word	0x40000800
 800d76c:	40000c00 	.word	0x40000c00
 800d770:	40001800 	.word	0x40001800
 800d774:	4000e000 	.word	0x4000e000
 800d778:	4000e400 	.word	0x4000e400
 800d77c:	00010007 	.word	0x00010007

0800d780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d796:	2b01      	cmp	r3, #1
 800d798:	d101      	bne.n	800d79e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d79a:	2302      	movs	r3, #2
 800d79c:	e0ff      	b.n	800d99e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b14      	cmp	r3, #20
 800d7aa:	f200 80f0 	bhi.w	800d98e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d7b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b4:	0800d809 	.word	0x0800d809
 800d7b8:	0800d98f 	.word	0x0800d98f
 800d7bc:	0800d98f 	.word	0x0800d98f
 800d7c0:	0800d98f 	.word	0x0800d98f
 800d7c4:	0800d849 	.word	0x0800d849
 800d7c8:	0800d98f 	.word	0x0800d98f
 800d7cc:	0800d98f 	.word	0x0800d98f
 800d7d0:	0800d98f 	.word	0x0800d98f
 800d7d4:	0800d88b 	.word	0x0800d88b
 800d7d8:	0800d98f 	.word	0x0800d98f
 800d7dc:	0800d98f 	.word	0x0800d98f
 800d7e0:	0800d98f 	.word	0x0800d98f
 800d7e4:	0800d8cb 	.word	0x0800d8cb
 800d7e8:	0800d98f 	.word	0x0800d98f
 800d7ec:	0800d98f 	.word	0x0800d98f
 800d7f0:	0800d98f 	.word	0x0800d98f
 800d7f4:	0800d90d 	.word	0x0800d90d
 800d7f8:	0800d98f 	.word	0x0800d98f
 800d7fc:	0800d98f 	.word	0x0800d98f
 800d800:	0800d98f 	.word	0x0800d98f
 800d804:	0800d94d 	.word	0x0800d94d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68b9      	ldr	r1, [r7, #8]
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 fa6e 	bl	800dcf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	699a      	ldr	r2, [r3, #24]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f042 0208 	orr.w	r2, r2, #8
 800d822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	699a      	ldr	r2, [r3, #24]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0204 	bic.w	r2, r2, #4
 800d832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6999      	ldr	r1, [r3, #24]
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	691a      	ldr	r2, [r3, #16]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	430a      	orrs	r2, r1
 800d844:	619a      	str	r2, [r3, #24]
      break;
 800d846:	e0a5      	b.n	800d994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68b9      	ldr	r1, [r7, #8]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fade 	bl	800de10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	699a      	ldr	r2, [r3, #24]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	699a      	ldr	r2, [r3, #24]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6999      	ldr	r1, [r3, #24]
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	021a      	lsls	r2, r3, #8
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	430a      	orrs	r2, r1
 800d886:	619a      	str	r2, [r3, #24]
      break;
 800d888:	e084      	b.n	800d994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	68b9      	ldr	r1, [r7, #8]
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fb47 	bl	800df24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	69da      	ldr	r2, [r3, #28]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f042 0208 	orr.w	r2, r2, #8
 800d8a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	69da      	ldr	r2, [r3, #28]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f022 0204 	bic.w	r2, r2, #4
 800d8b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	69d9      	ldr	r1, [r3, #28]
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	430a      	orrs	r2, r1
 800d8c6:	61da      	str	r2, [r3, #28]
      break;
 800d8c8:	e064      	b.n	800d994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 fbaf 	bl	800e034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	69da      	ldr	r2, [r3, #28]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	69da      	ldr	r2, [r3, #28]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d8f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	69d9      	ldr	r1, [r3, #28]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	021a      	lsls	r2, r3, #8
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	430a      	orrs	r2, r1
 800d908:	61da      	str	r2, [r3, #28]
      break;
 800d90a:	e043      	b.n	800d994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68b9      	ldr	r1, [r7, #8]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 fbf8 	bl	800e108 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f042 0208 	orr.w	r2, r2, #8
 800d926:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f022 0204 	bic.w	r2, r2, #4
 800d936:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	691a      	ldr	r2, [r3, #16]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	430a      	orrs	r2, r1
 800d948:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d94a:	e023      	b.n	800d994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68b9      	ldr	r1, [r7, #8]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 fc3c 	bl	800e1d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d966:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d976:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	021a      	lsls	r2, r3, #8
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	430a      	orrs	r2, r1
 800d98a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d98c:	e002      	b.n	800d994 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	75fb      	strb	r3, [r7, #23]
      break;
 800d992:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop

0800d9a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d101      	bne.n	800d9c4 <HAL_TIM_ConfigClockSource+0x1c>
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	e0dc      	b.n	800db7e <HAL_TIM_ConfigClockSource+0x1d6>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	4b6a      	ldr	r3, [pc, #424]	@ (800db88 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d9ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a64      	ldr	r2, [pc, #400]	@ (800db8c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	f000 80a9 	beq.w	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da00:	4a62      	ldr	r2, [pc, #392]	@ (800db8c <HAL_TIM_ConfigClockSource+0x1e4>)
 800da02:	4293      	cmp	r3, r2
 800da04:	f200 80ae 	bhi.w	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da08:	4a61      	ldr	r2, [pc, #388]	@ (800db90 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	f000 80a1 	beq.w	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da10:	4a5f      	ldr	r2, [pc, #380]	@ (800db90 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da12:	4293      	cmp	r3, r2
 800da14:	f200 80a6 	bhi.w	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da18:	4a5e      	ldr	r2, [pc, #376]	@ (800db94 <HAL_TIM_ConfigClockSource+0x1ec>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	f000 8099 	beq.w	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da20:	4a5c      	ldr	r2, [pc, #368]	@ (800db94 <HAL_TIM_ConfigClockSource+0x1ec>)
 800da22:	4293      	cmp	r3, r2
 800da24:	f200 809e 	bhi.w	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800da2c:	f000 8091 	beq.w	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800da34:	f200 8096 	bhi.w	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da3c:	f000 8089 	beq.w	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da44:	f200 808e 	bhi.w	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da4c:	d03e      	beq.n	800dacc <HAL_TIM_ConfigClockSource+0x124>
 800da4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da52:	f200 8087 	bhi.w	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da5a:	f000 8086 	beq.w	800db6a <HAL_TIM_ConfigClockSource+0x1c2>
 800da5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da62:	d87f      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da64:	2b70      	cmp	r3, #112	@ 0x70
 800da66:	d01a      	beq.n	800da9e <HAL_TIM_ConfigClockSource+0xf6>
 800da68:	2b70      	cmp	r3, #112	@ 0x70
 800da6a:	d87b      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da6c:	2b60      	cmp	r3, #96	@ 0x60
 800da6e:	d050      	beq.n	800db12 <HAL_TIM_ConfigClockSource+0x16a>
 800da70:	2b60      	cmp	r3, #96	@ 0x60
 800da72:	d877      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da74:	2b50      	cmp	r3, #80	@ 0x50
 800da76:	d03c      	beq.n	800daf2 <HAL_TIM_ConfigClockSource+0x14a>
 800da78:	2b50      	cmp	r3, #80	@ 0x50
 800da7a:	d873      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da7c:	2b40      	cmp	r3, #64	@ 0x40
 800da7e:	d058      	beq.n	800db32 <HAL_TIM_ConfigClockSource+0x18a>
 800da80:	2b40      	cmp	r3, #64	@ 0x40
 800da82:	d86f      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da84:	2b30      	cmp	r3, #48	@ 0x30
 800da86:	d064      	beq.n	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da88:	2b30      	cmp	r3, #48	@ 0x30
 800da8a:	d86b      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da8c:	2b20      	cmp	r3, #32
 800da8e:	d060      	beq.n	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da90:	2b20      	cmp	r3, #32
 800da92:	d867      	bhi.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
 800da94:	2b00      	cmp	r3, #0
 800da96:	d05c      	beq.n	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da98:	2b10      	cmp	r3, #16
 800da9a:	d05a      	beq.n	800db52 <HAL_TIM_ConfigClockSource+0x1aa>
 800da9c:	e062      	b.n	800db64 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800daae:	f000 fc73 	bl	800e398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	609a      	str	r2, [r3, #8]
      break;
 800daca:	e04f      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dadc:	f000 fc5c 	bl	800e398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800daee:	609a      	str	r2, [r3, #8]
      break;
 800daf0:	e03c      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dafe:	461a      	mov	r2, r3
 800db00:	f000 fbcc 	bl	800e29c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2150      	movs	r1, #80	@ 0x50
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fc26 	bl	800e35c <TIM_ITRx_SetConfig>
      break;
 800db10:	e02c      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db1e:	461a      	mov	r2, r3
 800db20:	f000 fbeb 	bl	800e2fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2160      	movs	r1, #96	@ 0x60
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 fc16 	bl	800e35c <TIM_ITRx_SetConfig>
      break;
 800db30:	e01c      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db3e:	461a      	mov	r2, r3
 800db40:	f000 fbac 	bl	800e29c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2140      	movs	r1, #64	@ 0x40
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 fc06 	bl	800e35c <TIM_ITRx_SetConfig>
      break;
 800db50:	e00c      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f000 fbfd 	bl	800e35c <TIM_ITRx_SetConfig>
      break;
 800db62:	e003      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800db64:	2301      	movs	r3, #1
 800db66:	73fb      	strb	r3, [r7, #15]
      break;
 800db68:	e000      	b.n	800db6c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800db6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	ffceff88 	.word	0xffceff88
 800db8c:	00100040 	.word	0x00100040
 800db90:	00100030 	.word	0x00100030
 800db94:	00100020 	.word	0x00100020

0800db98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a47      	ldr	r2, [pc, #284]	@ (800dcc8 <TIM_Base_SetConfig+0x130>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d013      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbb6:	d00f      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a44      	ldr	r2, [pc, #272]	@ (800dccc <TIM_Base_SetConfig+0x134>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d00b      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a43      	ldr	r2, [pc, #268]	@ (800dcd0 <TIM_Base_SetConfig+0x138>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d007      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a42      	ldr	r2, [pc, #264]	@ (800dcd4 <TIM_Base_SetConfig+0x13c>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d003      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a41      	ldr	r2, [pc, #260]	@ (800dcd8 <TIM_Base_SetConfig+0x140>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d108      	bne.n	800dbea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a36      	ldr	r2, [pc, #216]	@ (800dcc8 <TIM_Base_SetConfig+0x130>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d027      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbf8:	d023      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a33      	ldr	r2, [pc, #204]	@ (800dccc <TIM_Base_SetConfig+0x134>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d01f      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a32      	ldr	r2, [pc, #200]	@ (800dcd0 <TIM_Base_SetConfig+0x138>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d01b      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a31      	ldr	r2, [pc, #196]	@ (800dcd4 <TIM_Base_SetConfig+0x13c>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d017      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a30      	ldr	r2, [pc, #192]	@ (800dcd8 <TIM_Base_SetConfig+0x140>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d013      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a2f      	ldr	r2, [pc, #188]	@ (800dcdc <TIM_Base_SetConfig+0x144>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d00f      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a2e      	ldr	r2, [pc, #184]	@ (800dce0 <TIM_Base_SetConfig+0x148>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d00b      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a2d      	ldr	r2, [pc, #180]	@ (800dce4 <TIM_Base_SetConfig+0x14c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d007      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a2c      	ldr	r2, [pc, #176]	@ (800dce8 <TIM_Base_SetConfig+0x150>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d003      	beq.n	800dc42 <TIM_Base_SetConfig+0xaa>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a2b      	ldr	r2, [pc, #172]	@ (800dcec <TIM_Base_SetConfig+0x154>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d108      	bne.n	800dc54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	689a      	ldr	r2, [r3, #8]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a14      	ldr	r2, [pc, #80]	@ (800dcc8 <TIM_Base_SetConfig+0x130>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d00f      	beq.n	800dc9a <TIM_Base_SetConfig+0x102>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a16      	ldr	r2, [pc, #88]	@ (800dcd8 <TIM_Base_SetConfig+0x140>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d00b      	beq.n	800dc9a <TIM_Base_SetConfig+0x102>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a15      	ldr	r2, [pc, #84]	@ (800dcdc <TIM_Base_SetConfig+0x144>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d007      	beq.n	800dc9a <TIM_Base_SetConfig+0x102>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a14      	ldr	r2, [pc, #80]	@ (800dce0 <TIM_Base_SetConfig+0x148>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d003      	beq.n	800dc9a <TIM_Base_SetConfig+0x102>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a13      	ldr	r2, [pc, #76]	@ (800dce4 <TIM_Base_SetConfig+0x14c>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d103      	bne.n	800dca2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	691a      	ldr	r2, [r3, #16]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f043 0204 	orr.w	r2, r3, #4
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]
}
 800dcba:	bf00      	nop
 800dcbc:	3714      	adds	r7, #20
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	40010000 	.word	0x40010000
 800dccc:	40000400 	.word	0x40000400
 800dcd0:	40000800 	.word	0x40000800
 800dcd4:	40000c00 	.word	0x40000c00
 800dcd8:	40010400 	.word	0x40010400
 800dcdc:	40014000 	.word	0x40014000
 800dce0:	40014400 	.word	0x40014400
 800dce4:	40014800 	.word	0x40014800
 800dce8:	4000e000 	.word	0x4000e000
 800dcec:	4000e400 	.word	0x4000e400

0800dcf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	f023 0201 	bic.w	r2, r3, #1
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	699b      	ldr	r3, [r3, #24]
 800dd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	4b37      	ldr	r3, [pc, #220]	@ (800ddf8 <TIM_OC1_SetConfig+0x108>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 0303 	bic.w	r3, r3, #3
 800dd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f023 0302 	bic.w	r3, r3, #2
 800dd38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a2d      	ldr	r2, [pc, #180]	@ (800ddfc <TIM_OC1_SetConfig+0x10c>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d00f      	beq.n	800dd6c <TIM_OC1_SetConfig+0x7c>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a2c      	ldr	r2, [pc, #176]	@ (800de00 <TIM_OC1_SetConfig+0x110>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d00b      	beq.n	800dd6c <TIM_OC1_SetConfig+0x7c>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a2b      	ldr	r2, [pc, #172]	@ (800de04 <TIM_OC1_SetConfig+0x114>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d007      	beq.n	800dd6c <TIM_OC1_SetConfig+0x7c>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a2a      	ldr	r2, [pc, #168]	@ (800de08 <TIM_OC1_SetConfig+0x118>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d003      	beq.n	800dd6c <TIM_OC1_SetConfig+0x7c>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a29      	ldr	r2, [pc, #164]	@ (800de0c <TIM_OC1_SetConfig+0x11c>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d10c      	bne.n	800dd86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	f023 0308 	bic.w	r3, r3, #8
 800dd72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f023 0304 	bic.w	r3, r3, #4
 800dd84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a1c      	ldr	r2, [pc, #112]	@ (800ddfc <TIM_OC1_SetConfig+0x10c>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d00f      	beq.n	800ddae <TIM_OC1_SetConfig+0xbe>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a1b      	ldr	r2, [pc, #108]	@ (800de00 <TIM_OC1_SetConfig+0x110>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00b      	beq.n	800ddae <TIM_OC1_SetConfig+0xbe>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a1a      	ldr	r2, [pc, #104]	@ (800de04 <TIM_OC1_SetConfig+0x114>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d007      	beq.n	800ddae <TIM_OC1_SetConfig+0xbe>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a19      	ldr	r2, [pc, #100]	@ (800de08 <TIM_OC1_SetConfig+0x118>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d003      	beq.n	800ddae <TIM_OC1_SetConfig+0xbe>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a18      	ldr	r2, [pc, #96]	@ (800de0c <TIM_OC1_SetConfig+0x11c>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d111      	bne.n	800ddd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ddbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	685a      	ldr	r2, [r3, #4]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	621a      	str	r2, [r3, #32]
}
 800ddec:	bf00      	nop
 800ddee:	371c      	adds	r7, #28
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	fffeff8f 	.word	0xfffeff8f
 800ddfc:	40010000 	.word	0x40010000
 800de00:	40010400 	.word	0x40010400
 800de04:	40014000 	.word	0x40014000
 800de08:	40014400 	.word	0x40014400
 800de0c:	40014800 	.word	0x40014800

0800de10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a1b      	ldr	r3, [r3, #32]
 800de1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	f023 0210 	bic.w	r2, r3, #16
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4b34      	ldr	r3, [pc, #208]	@ (800df0c <TIM_OC2_SetConfig+0xfc>)
 800de3c:	4013      	ands	r3, r2
 800de3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	021b      	lsls	r3, r3, #8
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	4313      	orrs	r3, r2
 800de52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f023 0320 	bic.w	r3, r3, #32
 800de5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	011b      	lsls	r3, r3, #4
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	4313      	orrs	r3, r2
 800de66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a29      	ldr	r2, [pc, #164]	@ (800df10 <TIM_OC2_SetConfig+0x100>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d003      	beq.n	800de78 <TIM_OC2_SetConfig+0x68>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a28      	ldr	r2, [pc, #160]	@ (800df14 <TIM_OC2_SetConfig+0x104>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d10d      	bne.n	800de94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	011b      	lsls	r3, r3, #4
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	4313      	orrs	r3, r2
 800de8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a1e      	ldr	r2, [pc, #120]	@ (800df10 <TIM_OC2_SetConfig+0x100>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d00f      	beq.n	800debc <TIM_OC2_SetConfig+0xac>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a1d      	ldr	r2, [pc, #116]	@ (800df14 <TIM_OC2_SetConfig+0x104>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d00b      	beq.n	800debc <TIM_OC2_SetConfig+0xac>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a1c      	ldr	r2, [pc, #112]	@ (800df18 <TIM_OC2_SetConfig+0x108>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d007      	beq.n	800debc <TIM_OC2_SetConfig+0xac>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a1b      	ldr	r2, [pc, #108]	@ (800df1c <TIM_OC2_SetConfig+0x10c>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d003      	beq.n	800debc <TIM_OC2_SetConfig+0xac>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a1a      	ldr	r2, [pc, #104]	@ (800df20 <TIM_OC2_SetConfig+0x110>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d113      	bne.n	800dee4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800deca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	693a      	ldr	r2, [r7, #16]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	699b      	ldr	r3, [r3, #24]
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	685a      	ldr	r2, [r3, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	621a      	str	r2, [r3, #32]
}
 800defe:	bf00      	nop
 800df00:	371c      	adds	r7, #28
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	feff8fff 	.word	0xfeff8fff
 800df10:	40010000 	.word	0x40010000
 800df14:	40010400 	.word	0x40010400
 800df18:	40014000 	.word	0x40014000
 800df1c:	40014400 	.word	0x40014400
 800df20:	40014800 	.word	0x40014800

0800df24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df24:	b480      	push	{r7}
 800df26:	b087      	sub	sp, #28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a1b      	ldr	r3, [r3, #32]
 800df38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	69db      	ldr	r3, [r3, #28]
 800df4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	4b33      	ldr	r3, [pc, #204]	@ (800e01c <TIM_OC3_SetConfig+0xf8>)
 800df50:	4013      	ands	r3, r2
 800df52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f023 0303 	bic.w	r3, r3, #3
 800df5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	4313      	orrs	r3, r2
 800df64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800df6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	021b      	lsls	r3, r3, #8
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	4313      	orrs	r3, r2
 800df78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4a28      	ldr	r2, [pc, #160]	@ (800e020 <TIM_OC3_SetConfig+0xfc>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d003      	beq.n	800df8a <TIM_OC3_SetConfig+0x66>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	4a27      	ldr	r2, [pc, #156]	@ (800e024 <TIM_OC3_SetConfig+0x100>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d10d      	bne.n	800dfa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	021b      	lsls	r3, r3, #8
 800df98:	697a      	ldr	r2, [r7, #20]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dfa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4a1d      	ldr	r2, [pc, #116]	@ (800e020 <TIM_OC3_SetConfig+0xfc>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d00f      	beq.n	800dfce <TIM_OC3_SetConfig+0xaa>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4a1c      	ldr	r2, [pc, #112]	@ (800e024 <TIM_OC3_SetConfig+0x100>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d00b      	beq.n	800dfce <TIM_OC3_SetConfig+0xaa>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4a1b      	ldr	r2, [pc, #108]	@ (800e028 <TIM_OC3_SetConfig+0x104>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d007      	beq.n	800dfce <TIM_OC3_SetConfig+0xaa>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a1a      	ldr	r2, [pc, #104]	@ (800e02c <TIM_OC3_SetConfig+0x108>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d003      	beq.n	800dfce <TIM_OC3_SetConfig+0xaa>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4a19      	ldr	r2, [pc, #100]	@ (800e030 <TIM_OC3_SetConfig+0x10c>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d113      	bne.n	800dff6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dfd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dfdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	011b      	lsls	r3, r3, #4
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	011b      	lsls	r3, r3, #4
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	621a      	str	r2, [r3, #32]
}
 800e010:	bf00      	nop
 800e012:	371c      	adds	r7, #28
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	fffeff8f 	.word	0xfffeff8f
 800e020:	40010000 	.word	0x40010000
 800e024:	40010400 	.word	0x40010400
 800e028:	40014000 	.word	0x40014000
 800e02c:	40014400 	.word	0x40014400
 800e030:	40014800 	.word	0x40014800

0800e034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e034:	b480      	push	{r7}
 800e036:	b087      	sub	sp, #28
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a1b      	ldr	r3, [r3, #32]
 800e042:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a1b      	ldr	r3, [r3, #32]
 800e048:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	4b24      	ldr	r3, [pc, #144]	@ (800e0f0 <TIM_OC4_SetConfig+0xbc>)
 800e060:	4013      	ands	r3, r2
 800e062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e06a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	021b      	lsls	r3, r3, #8
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	4313      	orrs	r3, r2
 800e076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e07e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	031b      	lsls	r3, r3, #12
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	4313      	orrs	r3, r2
 800e08a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4a19      	ldr	r2, [pc, #100]	@ (800e0f4 <TIM_OC4_SetConfig+0xc0>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d00f      	beq.n	800e0b4 <TIM_OC4_SetConfig+0x80>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a18      	ldr	r2, [pc, #96]	@ (800e0f8 <TIM_OC4_SetConfig+0xc4>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d00b      	beq.n	800e0b4 <TIM_OC4_SetConfig+0x80>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a17      	ldr	r2, [pc, #92]	@ (800e0fc <TIM_OC4_SetConfig+0xc8>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d007      	beq.n	800e0b4 <TIM_OC4_SetConfig+0x80>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4a16      	ldr	r2, [pc, #88]	@ (800e100 <TIM_OC4_SetConfig+0xcc>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d003      	beq.n	800e0b4 <TIM_OC4_SetConfig+0x80>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a15      	ldr	r2, [pc, #84]	@ (800e104 <TIM_OC4_SetConfig+0xd0>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d109      	bne.n	800e0c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e0ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	019b      	lsls	r3, r3, #6
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	697a      	ldr	r2, [r7, #20]
 800e0cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	685a      	ldr	r2, [r3, #4]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	621a      	str	r2, [r3, #32]
}
 800e0e2:	bf00      	nop
 800e0e4:	371c      	adds	r7, #28
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	feff8fff 	.word	0xfeff8fff
 800e0f4:	40010000 	.word	0x40010000
 800e0f8:	40010400 	.word	0x40010400
 800e0fc:	40014000 	.word	0x40014000
 800e100:	40014400 	.word	0x40014400
 800e104:	40014800 	.word	0x40014800

0800e108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a1b      	ldr	r3, [r3, #32]
 800e116:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	4b21      	ldr	r3, [pc, #132]	@ (800e1b8 <TIM_OC5_SetConfig+0xb0>)
 800e134:	4013      	ands	r3, r2
 800e136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	4313      	orrs	r3, r2
 800e140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	4313      	orrs	r3, r2
 800e154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a18      	ldr	r2, [pc, #96]	@ (800e1bc <TIM_OC5_SetConfig+0xb4>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d00f      	beq.n	800e17e <TIM_OC5_SetConfig+0x76>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a17      	ldr	r2, [pc, #92]	@ (800e1c0 <TIM_OC5_SetConfig+0xb8>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d00b      	beq.n	800e17e <TIM_OC5_SetConfig+0x76>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a16      	ldr	r2, [pc, #88]	@ (800e1c4 <TIM_OC5_SetConfig+0xbc>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d007      	beq.n	800e17e <TIM_OC5_SetConfig+0x76>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a15      	ldr	r2, [pc, #84]	@ (800e1c8 <TIM_OC5_SetConfig+0xc0>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d003      	beq.n	800e17e <TIM_OC5_SetConfig+0x76>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a14      	ldr	r2, [pc, #80]	@ (800e1cc <TIM_OC5_SetConfig+0xc4>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d109      	bne.n	800e192 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e184:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	695b      	ldr	r3, [r3, #20]
 800e18a:	021b      	lsls	r3, r3, #8
 800e18c:	697a      	ldr	r2, [r7, #20]
 800e18e:	4313      	orrs	r3, r2
 800e190:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	697a      	ldr	r2, [r7, #20]
 800e196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	621a      	str	r2, [r3, #32]
}
 800e1ac:	bf00      	nop
 800e1ae:	371c      	adds	r7, #28
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	fffeff8f 	.word	0xfffeff8f
 800e1bc:	40010000 	.word	0x40010000
 800e1c0:	40010400 	.word	0x40010400
 800e1c4:	40014000 	.word	0x40014000
 800e1c8:	40014400 	.word	0x40014400
 800e1cc:	40014800 	.word	0x40014800

0800e1d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	4b22      	ldr	r3, [pc, #136]	@ (800e284 <TIM_OC6_SetConfig+0xb4>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	021b      	lsls	r3, r3, #8
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	4313      	orrs	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	051b      	lsls	r3, r3, #20
 800e21a:	693a      	ldr	r2, [r7, #16]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a19      	ldr	r2, [pc, #100]	@ (800e288 <TIM_OC6_SetConfig+0xb8>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d00f      	beq.n	800e248 <TIM_OC6_SetConfig+0x78>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a18      	ldr	r2, [pc, #96]	@ (800e28c <TIM_OC6_SetConfig+0xbc>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d00b      	beq.n	800e248 <TIM_OC6_SetConfig+0x78>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a17      	ldr	r2, [pc, #92]	@ (800e290 <TIM_OC6_SetConfig+0xc0>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d007      	beq.n	800e248 <TIM_OC6_SetConfig+0x78>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a16      	ldr	r2, [pc, #88]	@ (800e294 <TIM_OC6_SetConfig+0xc4>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d003      	beq.n	800e248 <TIM_OC6_SetConfig+0x78>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4a15      	ldr	r2, [pc, #84]	@ (800e298 <TIM_OC6_SetConfig+0xc8>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d109      	bne.n	800e25c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e24e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	695b      	ldr	r3, [r3, #20]
 800e254:	029b      	lsls	r3, r3, #10
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	4313      	orrs	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	621a      	str	r2, [r3, #32]
}
 800e276:	bf00      	nop
 800e278:	371c      	adds	r7, #28
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	feff8fff 	.word	0xfeff8fff
 800e288:	40010000 	.word	0x40010000
 800e28c:	40010400 	.word	0x40010400
 800e290:	40014000 	.word	0x40014000
 800e294:	40014400 	.word	0x40014400
 800e298:	40014800 	.word	0x40014800

0800e29c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b087      	sub	sp, #28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6a1b      	ldr	r3, [r3, #32]
 800e2ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	f023 0201 	bic.w	r2, r3, #1
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	699b      	ldr	r3, [r3, #24]
 800e2be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e2c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	011b      	lsls	r3, r3, #4
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f023 030a 	bic.w	r3, r3, #10
 800e2d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e2da:	697a      	ldr	r2, [r7, #20]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	697a      	ldr	r2, [r7, #20]
 800e2ec:	621a      	str	r2, [r3, #32]
}
 800e2ee:	bf00      	nop
 800e2f0:	371c      	adds	r7, #28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e2fa:	b480      	push	{r7}
 800e2fc:	b087      	sub	sp, #28
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	60f8      	str	r0, [r7, #12]
 800e302:	60b9      	str	r1, [r7, #8]
 800e304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6a1b      	ldr	r3, [r3, #32]
 800e30a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6a1b      	ldr	r3, [r3, #32]
 800e310:	f023 0210 	bic.w	r2, r3, #16
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	699b      	ldr	r3, [r3, #24]
 800e31c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	031b      	lsls	r3, r3, #12
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e336:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	011b      	lsls	r3, r3, #4
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	4313      	orrs	r3, r2
 800e340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	621a      	str	r2, [r3, #32]
}
 800e34e:	bf00      	nop
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
	...

0800e35c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	4b09      	ldr	r3, [pc, #36]	@ (800e394 <TIM_ITRx_SetConfig+0x38>)
 800e370:	4013      	ands	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	4313      	orrs	r3, r2
 800e37a:	f043 0307 	orr.w	r3, r3, #7
 800e37e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	609a      	str	r2, [r3, #8]
}
 800e386:	bf00      	nop
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	ffcfff8f 	.word	0xffcfff8f

0800e398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e398:	b480      	push	{r7}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e3b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	021a      	lsls	r2, r3, #8
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	431a      	orrs	r2, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	609a      	str	r2, [r3, #8]
}
 800e3cc:	bf00      	nop
 800e3ce:	371c      	adds	r7, #28
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	f003 031f 	and.w	r3, r3, #31
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6a1a      	ldr	r2, [r3, #32]
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	43db      	mvns	r3, r3
 800e3fa:	401a      	ands	r2, r3
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6a1a      	ldr	r2, [r3, #32]
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	f003 031f 	and.w	r3, r3, #31
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	fa01 f303 	lsl.w	r3, r1, r3
 800e410:	431a      	orrs	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	621a      	str	r2, [r3, #32]
}
 800e416:	bf00      	nop
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
	...

0800e424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e434:	2b01      	cmp	r3, #1
 800e436:	d101      	bne.n	800e43c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e438:	2302      	movs	r3, #2
 800e43a:	e077      	b.n	800e52c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2202      	movs	r2, #2
 800e448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a35      	ldr	r2, [pc, #212]	@ (800e538 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d004      	beq.n	800e470 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a34      	ldr	r2, [pc, #208]	@ (800e53c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d108      	bne.n	800e482 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e476:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	4313      	orrs	r3, r2
 800e480:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e488:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	4313      	orrs	r3, r2
 800e492:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a25      	ldr	r2, [pc, #148]	@ (800e538 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d02c      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ae:	d027      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a22      	ldr	r2, [pc, #136]	@ (800e540 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d022      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a21      	ldr	r2, [pc, #132]	@ (800e544 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d01d      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a1f      	ldr	r2, [pc, #124]	@ (800e548 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d018      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a1a      	ldr	r2, [pc, #104]	@ (800e53c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d013      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800e54c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d00e      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a1a      	ldr	r2, [pc, #104]	@ (800e550 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d009      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a18      	ldr	r2, [pc, #96]	@ (800e554 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d004      	beq.n	800e500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a17      	ldr	r2, [pc, #92]	@ (800e558 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d10c      	bne.n	800e51a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	4313      	orrs	r3, r2
 800e510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3714      	adds	r7, #20
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	40010000 	.word	0x40010000
 800e53c:	40010400 	.word	0x40010400
 800e540:	40000400 	.word	0x40000400
 800e544:	40000800 	.word	0x40000800
 800e548:	40000c00 	.word	0x40000c00
 800e54c:	40001800 	.word	0x40001800
 800e550:	40014000 	.word	0x40014000
 800e554:	4000e000 	.word	0x4000e000
 800e558:	4000e400 	.word	0x4000e400

0800e55c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	e042      	b.n	800e5f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e574:	2b00      	cmp	r3, #0
 800e576:	d106      	bne.n	800e586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7f3 fb7f 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2224      	movs	r2, #36	@ 0x24
 800e58a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f022 0201 	bic.w	r2, r2, #1
 800e59c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d002      	beq.n	800e5ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 ff22 	bl	800f3f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f8b3 	bl	800e718 <UART_SetConfig>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d101      	bne.n	800e5bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e01b      	b.n	800e5f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e5ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	689a      	ldr	r2, [r3, #8]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f042 0201 	orr.w	r2, r2, #1
 800e5ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 ffa1 	bl	800f534 <UART_CheckIdleState>
 800e5f2:	4603      	mov	r3, r0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08a      	sub	sp, #40	@ 0x28
 800e600:	af02      	add	r7, sp, #8
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	603b      	str	r3, [r7, #0]
 800e608:	4613      	mov	r3, r2
 800e60a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e612:	2b20      	cmp	r3, #32
 800e614:	d17b      	bne.n	800e70e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <HAL_UART_Transmit+0x26>
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e074      	b.n	800e710 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2221      	movs	r2, #33	@ 0x21
 800e632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e636:	f7f5 fae5 	bl	8003c04 <HAL_GetTick>
 800e63a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	88fa      	ldrh	r2, [r7, #6]
 800e640:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	88fa      	ldrh	r2, [r7, #6]
 800e648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e654:	d108      	bne.n	800e668 <HAL_UART_Transmit+0x6c>
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d104      	bne.n	800e668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e65e:	2300      	movs	r3, #0
 800e660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	61bb      	str	r3, [r7, #24]
 800e666:	e003      	b.n	800e670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e66c:	2300      	movs	r3, #0
 800e66e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e670:	e030      	b.n	800e6d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2200      	movs	r2, #0
 800e67a:	2180      	movs	r1, #128	@ 0x80
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f001 f803 	bl	800f688 <UART_WaitOnFlagUntilTimeout>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d005      	beq.n	800e694 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2220      	movs	r2, #32
 800e68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e690:	2303      	movs	r3, #3
 800e692:	e03d      	b.n	800e710 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10b      	bne.n	800e6b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	881b      	ldrh	r3, [r3, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e6a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	3302      	adds	r3, #2
 800e6ae:	61bb      	str	r3, [r7, #24]
 800e6b0:	e007      	b.n	800e6c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	781a      	ldrb	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1c8      	bne.n	800e672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2140      	movs	r1, #64	@ 0x40
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 ffcc 	bl	800f688 <UART_WaitOnFlagUntilTimeout>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d005      	beq.n	800e702 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2220      	movs	r2, #32
 800e6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e6fe:	2303      	movs	r3, #3
 800e700:	e006      	b.n	800e710 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2220      	movs	r2, #32
 800e706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e70a:	2300      	movs	r3, #0
 800e70c:	e000      	b.n	800e710 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e70e:	2302      	movs	r3, #2
  }
}
 800e710:	4618      	mov	r0, r3
 800e712:	3720      	adds	r7, #32
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e71c:	b092      	sub	sp, #72	@ 0x48
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e722:	2300      	movs	r3, #0
 800e724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	689a      	ldr	r2, [r3, #8]
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	431a      	orrs	r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	431a      	orrs	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	69db      	ldr	r3, [r3, #28]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	4bbe      	ldr	r3, [pc, #760]	@ (800ea40 <UART_SetConfig+0x328>)
 800e748:	4013      	ands	r3, r2
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	6812      	ldr	r2, [r2, #0]
 800e74e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e750:	430b      	orrs	r3, r1
 800e752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	68da      	ldr	r2, [r3, #12]
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	430a      	orrs	r2, r1
 800e768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4ab3      	ldr	r2, [pc, #716]	@ (800ea44 <UART_SetConfig+0x32c>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d004      	beq.n	800e784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e780:	4313      	orrs	r3, r2
 800e782:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	689a      	ldr	r2, [r3, #8]
 800e78a:	4baf      	ldr	r3, [pc, #700]	@ (800ea48 <UART_SetConfig+0x330>)
 800e78c:	4013      	ands	r3, r2
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	6812      	ldr	r2, [r2, #0]
 800e792:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e794:	430b      	orrs	r3, r1
 800e796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e79e:	f023 010f 	bic.w	r1, r3, #15
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	430a      	orrs	r2, r1
 800e7ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4aa6      	ldr	r2, [pc, #664]	@ (800ea4c <UART_SetConfig+0x334>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d177      	bne.n	800e8a8 <UART_SetConfig+0x190>
 800e7b8:	4ba5      	ldr	r3, [pc, #660]	@ (800ea50 <UART_SetConfig+0x338>)
 800e7ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e7c0:	2b28      	cmp	r3, #40	@ 0x28
 800e7c2:	d86d      	bhi.n	800e8a0 <UART_SetConfig+0x188>
 800e7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <UART_SetConfig+0xb4>)
 800e7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ca:	bf00      	nop
 800e7cc:	0800e871 	.word	0x0800e871
 800e7d0:	0800e8a1 	.word	0x0800e8a1
 800e7d4:	0800e8a1 	.word	0x0800e8a1
 800e7d8:	0800e8a1 	.word	0x0800e8a1
 800e7dc:	0800e8a1 	.word	0x0800e8a1
 800e7e0:	0800e8a1 	.word	0x0800e8a1
 800e7e4:	0800e8a1 	.word	0x0800e8a1
 800e7e8:	0800e8a1 	.word	0x0800e8a1
 800e7ec:	0800e879 	.word	0x0800e879
 800e7f0:	0800e8a1 	.word	0x0800e8a1
 800e7f4:	0800e8a1 	.word	0x0800e8a1
 800e7f8:	0800e8a1 	.word	0x0800e8a1
 800e7fc:	0800e8a1 	.word	0x0800e8a1
 800e800:	0800e8a1 	.word	0x0800e8a1
 800e804:	0800e8a1 	.word	0x0800e8a1
 800e808:	0800e8a1 	.word	0x0800e8a1
 800e80c:	0800e881 	.word	0x0800e881
 800e810:	0800e8a1 	.word	0x0800e8a1
 800e814:	0800e8a1 	.word	0x0800e8a1
 800e818:	0800e8a1 	.word	0x0800e8a1
 800e81c:	0800e8a1 	.word	0x0800e8a1
 800e820:	0800e8a1 	.word	0x0800e8a1
 800e824:	0800e8a1 	.word	0x0800e8a1
 800e828:	0800e8a1 	.word	0x0800e8a1
 800e82c:	0800e889 	.word	0x0800e889
 800e830:	0800e8a1 	.word	0x0800e8a1
 800e834:	0800e8a1 	.word	0x0800e8a1
 800e838:	0800e8a1 	.word	0x0800e8a1
 800e83c:	0800e8a1 	.word	0x0800e8a1
 800e840:	0800e8a1 	.word	0x0800e8a1
 800e844:	0800e8a1 	.word	0x0800e8a1
 800e848:	0800e8a1 	.word	0x0800e8a1
 800e84c:	0800e891 	.word	0x0800e891
 800e850:	0800e8a1 	.word	0x0800e8a1
 800e854:	0800e8a1 	.word	0x0800e8a1
 800e858:	0800e8a1 	.word	0x0800e8a1
 800e85c:	0800e8a1 	.word	0x0800e8a1
 800e860:	0800e8a1 	.word	0x0800e8a1
 800e864:	0800e8a1 	.word	0x0800e8a1
 800e868:	0800e8a1 	.word	0x0800e8a1
 800e86c:	0800e899 	.word	0x0800e899
 800e870:	2301      	movs	r3, #1
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e876:	e326      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e878:	2304      	movs	r3, #4
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e87e:	e322      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e880:	2308      	movs	r3, #8
 800e882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e886:	e31e      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e888:	2310      	movs	r3, #16
 800e88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e88e:	e31a      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e890:	2320      	movs	r3, #32
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e896:	e316      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e898:	2340      	movs	r3, #64	@ 0x40
 800e89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e89e:	e312      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e8a0:	2380      	movs	r3, #128	@ 0x80
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8a6:	e30e      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a69      	ldr	r2, [pc, #420]	@ (800ea54 <UART_SetConfig+0x33c>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d130      	bne.n	800e914 <UART_SetConfig+0x1fc>
 800e8b2:	4b67      	ldr	r3, [pc, #412]	@ (800ea50 <UART_SetConfig+0x338>)
 800e8b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	2b05      	cmp	r3, #5
 800e8bc:	d826      	bhi.n	800e90c <UART_SetConfig+0x1f4>
 800e8be:	a201      	add	r2, pc, #4	@ (adr r2, 800e8c4 <UART_SetConfig+0x1ac>)
 800e8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c4:	0800e8dd 	.word	0x0800e8dd
 800e8c8:	0800e8e5 	.word	0x0800e8e5
 800e8cc:	0800e8ed 	.word	0x0800e8ed
 800e8d0:	0800e8f5 	.word	0x0800e8f5
 800e8d4:	0800e8fd 	.word	0x0800e8fd
 800e8d8:	0800e905 	.word	0x0800e905
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e2:	e2f0      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e8e4:	2304      	movs	r3, #4
 800e8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ea:	e2ec      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e8ec:	2308      	movs	r3, #8
 800e8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8f2:	e2e8      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e8f4:	2310      	movs	r3, #16
 800e8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8fa:	e2e4      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e902:	e2e0      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e904:	2340      	movs	r3, #64	@ 0x40
 800e906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90a:	e2dc      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e90c:	2380      	movs	r3, #128	@ 0x80
 800e90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e912:	e2d8      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a4f      	ldr	r2, [pc, #316]	@ (800ea58 <UART_SetConfig+0x340>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d130      	bne.n	800e980 <UART_SetConfig+0x268>
 800e91e:	4b4c      	ldr	r3, [pc, #304]	@ (800ea50 <UART_SetConfig+0x338>)
 800e920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e922:	f003 0307 	and.w	r3, r3, #7
 800e926:	2b05      	cmp	r3, #5
 800e928:	d826      	bhi.n	800e978 <UART_SetConfig+0x260>
 800e92a:	a201      	add	r2, pc, #4	@ (adr r2, 800e930 <UART_SetConfig+0x218>)
 800e92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e930:	0800e949 	.word	0x0800e949
 800e934:	0800e951 	.word	0x0800e951
 800e938:	0800e959 	.word	0x0800e959
 800e93c:	0800e961 	.word	0x0800e961
 800e940:	0800e969 	.word	0x0800e969
 800e944:	0800e971 	.word	0x0800e971
 800e948:	2300      	movs	r3, #0
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94e:	e2ba      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e950:	2304      	movs	r3, #4
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e956:	e2b6      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e958:	2308      	movs	r3, #8
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95e:	e2b2      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e960:	2310      	movs	r3, #16
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e966:	e2ae      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e968:	2320      	movs	r3, #32
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e96e:	e2aa      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e970:	2340      	movs	r3, #64	@ 0x40
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e976:	e2a6      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e978:	2380      	movs	r3, #128	@ 0x80
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e97e:	e2a2      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a35      	ldr	r2, [pc, #212]	@ (800ea5c <UART_SetConfig+0x344>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d130      	bne.n	800e9ec <UART_SetConfig+0x2d4>
 800e98a:	4b31      	ldr	r3, [pc, #196]	@ (800ea50 <UART_SetConfig+0x338>)
 800e98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	2b05      	cmp	r3, #5
 800e994:	d826      	bhi.n	800e9e4 <UART_SetConfig+0x2cc>
 800e996:	a201      	add	r2, pc, #4	@ (adr r2, 800e99c <UART_SetConfig+0x284>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800e9b5 	.word	0x0800e9b5
 800e9a0:	0800e9bd 	.word	0x0800e9bd
 800e9a4:	0800e9c5 	.word	0x0800e9c5
 800e9a8:	0800e9cd 	.word	0x0800e9cd
 800e9ac:	0800e9d5 	.word	0x0800e9d5
 800e9b0:	0800e9dd 	.word	0x0800e9dd
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ba:	e284      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9bc:	2304      	movs	r3, #4
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c2:	e280      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9c4:	2308      	movs	r3, #8
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ca:	e27c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9cc:	2310      	movs	r3, #16
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d2:	e278      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9d4:	2320      	movs	r3, #32
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9da:	e274      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9dc:	2340      	movs	r3, #64	@ 0x40
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e2:	e270      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9e4:	2380      	movs	r3, #128	@ 0x80
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ea:	e26c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a1b      	ldr	r2, [pc, #108]	@ (800ea60 <UART_SetConfig+0x348>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d142      	bne.n	800ea7c <UART_SetConfig+0x364>
 800e9f6:	4b16      	ldr	r3, [pc, #88]	@ (800ea50 <UART_SetConfig+0x338>)
 800e9f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9fa:	f003 0307 	and.w	r3, r3, #7
 800e9fe:	2b05      	cmp	r3, #5
 800ea00:	d838      	bhi.n	800ea74 <UART_SetConfig+0x35c>
 800ea02:	a201      	add	r2, pc, #4	@ (adr r2, 800ea08 <UART_SetConfig+0x2f0>)
 800ea04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea08:	0800ea21 	.word	0x0800ea21
 800ea0c:	0800ea29 	.word	0x0800ea29
 800ea10:	0800ea31 	.word	0x0800ea31
 800ea14:	0800ea39 	.word	0x0800ea39
 800ea18:	0800ea65 	.word	0x0800ea65
 800ea1c:	0800ea6d 	.word	0x0800ea6d
 800ea20:	2300      	movs	r3, #0
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e24e      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea28:	2304      	movs	r3, #4
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2e:	e24a      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea30:	2308      	movs	r3, #8
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea36:	e246      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea38:	2310      	movs	r3, #16
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea3e:	e242      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea40:	cfff69f3 	.word	0xcfff69f3
 800ea44:	58000c00 	.word	0x58000c00
 800ea48:	11fff4ff 	.word	0x11fff4ff
 800ea4c:	40011000 	.word	0x40011000
 800ea50:	58024400 	.word	0x58024400
 800ea54:	40004400 	.word	0x40004400
 800ea58:	40004800 	.word	0x40004800
 800ea5c:	40004c00 	.word	0x40004c00
 800ea60:	40005000 	.word	0x40005000
 800ea64:	2320      	movs	r3, #32
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6a:	e22c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea6c:	2340      	movs	r3, #64	@ 0x40
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea72:	e228      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea74:	2380      	movs	r3, #128	@ 0x80
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7a:	e224      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4ab1      	ldr	r2, [pc, #708]	@ (800ed48 <UART_SetConfig+0x630>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d176      	bne.n	800eb74 <UART_SetConfig+0x45c>
 800ea86:	4bb1      	ldr	r3, [pc, #708]	@ (800ed4c <UART_SetConfig+0x634>)
 800ea88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea8e:	2b28      	cmp	r3, #40	@ 0x28
 800ea90:	d86c      	bhi.n	800eb6c <UART_SetConfig+0x454>
 800ea92:	a201      	add	r2, pc, #4	@ (adr r2, 800ea98 <UART_SetConfig+0x380>)
 800ea94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea98:	0800eb3d 	.word	0x0800eb3d
 800ea9c:	0800eb6d 	.word	0x0800eb6d
 800eaa0:	0800eb6d 	.word	0x0800eb6d
 800eaa4:	0800eb6d 	.word	0x0800eb6d
 800eaa8:	0800eb6d 	.word	0x0800eb6d
 800eaac:	0800eb6d 	.word	0x0800eb6d
 800eab0:	0800eb6d 	.word	0x0800eb6d
 800eab4:	0800eb6d 	.word	0x0800eb6d
 800eab8:	0800eb45 	.word	0x0800eb45
 800eabc:	0800eb6d 	.word	0x0800eb6d
 800eac0:	0800eb6d 	.word	0x0800eb6d
 800eac4:	0800eb6d 	.word	0x0800eb6d
 800eac8:	0800eb6d 	.word	0x0800eb6d
 800eacc:	0800eb6d 	.word	0x0800eb6d
 800ead0:	0800eb6d 	.word	0x0800eb6d
 800ead4:	0800eb6d 	.word	0x0800eb6d
 800ead8:	0800eb4d 	.word	0x0800eb4d
 800eadc:	0800eb6d 	.word	0x0800eb6d
 800eae0:	0800eb6d 	.word	0x0800eb6d
 800eae4:	0800eb6d 	.word	0x0800eb6d
 800eae8:	0800eb6d 	.word	0x0800eb6d
 800eaec:	0800eb6d 	.word	0x0800eb6d
 800eaf0:	0800eb6d 	.word	0x0800eb6d
 800eaf4:	0800eb6d 	.word	0x0800eb6d
 800eaf8:	0800eb55 	.word	0x0800eb55
 800eafc:	0800eb6d 	.word	0x0800eb6d
 800eb00:	0800eb6d 	.word	0x0800eb6d
 800eb04:	0800eb6d 	.word	0x0800eb6d
 800eb08:	0800eb6d 	.word	0x0800eb6d
 800eb0c:	0800eb6d 	.word	0x0800eb6d
 800eb10:	0800eb6d 	.word	0x0800eb6d
 800eb14:	0800eb6d 	.word	0x0800eb6d
 800eb18:	0800eb5d 	.word	0x0800eb5d
 800eb1c:	0800eb6d 	.word	0x0800eb6d
 800eb20:	0800eb6d 	.word	0x0800eb6d
 800eb24:	0800eb6d 	.word	0x0800eb6d
 800eb28:	0800eb6d 	.word	0x0800eb6d
 800eb2c:	0800eb6d 	.word	0x0800eb6d
 800eb30:	0800eb6d 	.word	0x0800eb6d
 800eb34:	0800eb6d 	.word	0x0800eb6d
 800eb38:	0800eb65 	.word	0x0800eb65
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e1c0      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e1bc      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e1b8      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb54:	2310      	movs	r3, #16
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5a:	e1b4      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb62:	e1b0      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb64:	2340      	movs	r3, #64	@ 0x40
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6a:	e1ac      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb6c:	2380      	movs	r3, #128	@ 0x80
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb72:	e1a8      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a75      	ldr	r2, [pc, #468]	@ (800ed50 <UART_SetConfig+0x638>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d130      	bne.n	800ebe0 <UART_SetConfig+0x4c8>
 800eb7e:	4b73      	ldr	r3, [pc, #460]	@ (800ed4c <UART_SetConfig+0x634>)
 800eb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb82:	f003 0307 	and.w	r3, r3, #7
 800eb86:	2b05      	cmp	r3, #5
 800eb88:	d826      	bhi.n	800ebd8 <UART_SetConfig+0x4c0>
 800eb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb90 <UART_SetConfig+0x478>)
 800eb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb90:	0800eba9 	.word	0x0800eba9
 800eb94:	0800ebb1 	.word	0x0800ebb1
 800eb98:	0800ebb9 	.word	0x0800ebb9
 800eb9c:	0800ebc1 	.word	0x0800ebc1
 800eba0:	0800ebc9 	.word	0x0800ebc9
 800eba4:	0800ebd1 	.word	0x0800ebd1
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebae:	e18a      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebb0:	2304      	movs	r3, #4
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb6:	e186      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebb8:	2308      	movs	r3, #8
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebbe:	e182      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebc0:	2310      	movs	r3, #16
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebc6:	e17e      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebc8:	2320      	movs	r3, #32
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebce:	e17a      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebd0:	2340      	movs	r3, #64	@ 0x40
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebd6:	e176      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebd8:	2380      	movs	r3, #128	@ 0x80
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebde:	e172      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a5b      	ldr	r2, [pc, #364]	@ (800ed54 <UART_SetConfig+0x63c>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d130      	bne.n	800ec4c <UART_SetConfig+0x534>
 800ebea:	4b58      	ldr	r3, [pc, #352]	@ (800ed4c <UART_SetConfig+0x634>)
 800ebec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebee:	f003 0307 	and.w	r3, r3, #7
 800ebf2:	2b05      	cmp	r3, #5
 800ebf4:	d826      	bhi.n	800ec44 <UART_SetConfig+0x52c>
 800ebf6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebfc <UART_SetConfig+0x4e4>)
 800ebf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebfc:	0800ec15 	.word	0x0800ec15
 800ec00:	0800ec1d 	.word	0x0800ec1d
 800ec04:	0800ec25 	.word	0x0800ec25
 800ec08:	0800ec2d 	.word	0x0800ec2d
 800ec0c:	0800ec35 	.word	0x0800ec35
 800ec10:	0800ec3d 	.word	0x0800ec3d
 800ec14:	2300      	movs	r3, #0
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1a:	e154      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec1c:	2304      	movs	r3, #4
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec22:	e150      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec24:	2308      	movs	r3, #8
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e14c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec32:	e148      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec34:	2320      	movs	r3, #32
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3a:	e144      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec3c:	2340      	movs	r3, #64	@ 0x40
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec42:	e140      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec44:	2380      	movs	r3, #128	@ 0x80
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec4a:	e13c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a41      	ldr	r2, [pc, #260]	@ (800ed58 <UART_SetConfig+0x640>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	f040 8082 	bne.w	800ed5c <UART_SetConfig+0x644>
 800ec58:	4b3c      	ldr	r3, [pc, #240]	@ (800ed4c <UART_SetConfig+0x634>)
 800ec5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec60:	2b28      	cmp	r3, #40	@ 0x28
 800ec62:	d86d      	bhi.n	800ed40 <UART_SetConfig+0x628>
 800ec64:	a201      	add	r2, pc, #4	@ (adr r2, 800ec6c <UART_SetConfig+0x554>)
 800ec66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6a:	bf00      	nop
 800ec6c:	0800ed11 	.word	0x0800ed11
 800ec70:	0800ed41 	.word	0x0800ed41
 800ec74:	0800ed41 	.word	0x0800ed41
 800ec78:	0800ed41 	.word	0x0800ed41
 800ec7c:	0800ed41 	.word	0x0800ed41
 800ec80:	0800ed41 	.word	0x0800ed41
 800ec84:	0800ed41 	.word	0x0800ed41
 800ec88:	0800ed41 	.word	0x0800ed41
 800ec8c:	0800ed19 	.word	0x0800ed19
 800ec90:	0800ed41 	.word	0x0800ed41
 800ec94:	0800ed41 	.word	0x0800ed41
 800ec98:	0800ed41 	.word	0x0800ed41
 800ec9c:	0800ed41 	.word	0x0800ed41
 800eca0:	0800ed41 	.word	0x0800ed41
 800eca4:	0800ed41 	.word	0x0800ed41
 800eca8:	0800ed41 	.word	0x0800ed41
 800ecac:	0800ed21 	.word	0x0800ed21
 800ecb0:	0800ed41 	.word	0x0800ed41
 800ecb4:	0800ed41 	.word	0x0800ed41
 800ecb8:	0800ed41 	.word	0x0800ed41
 800ecbc:	0800ed41 	.word	0x0800ed41
 800ecc0:	0800ed41 	.word	0x0800ed41
 800ecc4:	0800ed41 	.word	0x0800ed41
 800ecc8:	0800ed41 	.word	0x0800ed41
 800eccc:	0800ed29 	.word	0x0800ed29
 800ecd0:	0800ed41 	.word	0x0800ed41
 800ecd4:	0800ed41 	.word	0x0800ed41
 800ecd8:	0800ed41 	.word	0x0800ed41
 800ecdc:	0800ed41 	.word	0x0800ed41
 800ece0:	0800ed41 	.word	0x0800ed41
 800ece4:	0800ed41 	.word	0x0800ed41
 800ece8:	0800ed41 	.word	0x0800ed41
 800ecec:	0800ed31 	.word	0x0800ed31
 800ecf0:	0800ed41 	.word	0x0800ed41
 800ecf4:	0800ed41 	.word	0x0800ed41
 800ecf8:	0800ed41 	.word	0x0800ed41
 800ecfc:	0800ed41 	.word	0x0800ed41
 800ed00:	0800ed41 	.word	0x0800ed41
 800ed04:	0800ed41 	.word	0x0800ed41
 800ed08:	0800ed41 	.word	0x0800ed41
 800ed0c:	0800ed39 	.word	0x0800ed39
 800ed10:	2301      	movs	r3, #1
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed16:	e0d6      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed18:	2304      	movs	r3, #4
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1e:	e0d2      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed20:	2308      	movs	r3, #8
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed26:	e0ce      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed28:	2310      	movs	r3, #16
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2e:	e0ca      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed30:	2320      	movs	r3, #32
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed36:	e0c6      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed38:	2340      	movs	r3, #64	@ 0x40
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3e:	e0c2      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed40:	2380      	movs	r3, #128	@ 0x80
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed46:	e0be      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ed48:	40011400 	.word	0x40011400
 800ed4c:	58024400 	.word	0x58024400
 800ed50:	40007800 	.word	0x40007800
 800ed54:	40007c00 	.word	0x40007c00
 800ed58:	40011800 	.word	0x40011800
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4aad      	ldr	r2, [pc, #692]	@ (800f018 <UART_SetConfig+0x900>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d176      	bne.n	800ee54 <UART_SetConfig+0x73c>
 800ed66:	4bad      	ldr	r3, [pc, #692]	@ (800f01c <UART_SetConfig+0x904>)
 800ed68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed6e:	2b28      	cmp	r3, #40	@ 0x28
 800ed70:	d86c      	bhi.n	800ee4c <UART_SetConfig+0x734>
 800ed72:	a201      	add	r2, pc, #4	@ (adr r2, 800ed78 <UART_SetConfig+0x660>)
 800ed74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed78:	0800ee1d 	.word	0x0800ee1d
 800ed7c:	0800ee4d 	.word	0x0800ee4d
 800ed80:	0800ee4d 	.word	0x0800ee4d
 800ed84:	0800ee4d 	.word	0x0800ee4d
 800ed88:	0800ee4d 	.word	0x0800ee4d
 800ed8c:	0800ee4d 	.word	0x0800ee4d
 800ed90:	0800ee4d 	.word	0x0800ee4d
 800ed94:	0800ee4d 	.word	0x0800ee4d
 800ed98:	0800ee25 	.word	0x0800ee25
 800ed9c:	0800ee4d 	.word	0x0800ee4d
 800eda0:	0800ee4d 	.word	0x0800ee4d
 800eda4:	0800ee4d 	.word	0x0800ee4d
 800eda8:	0800ee4d 	.word	0x0800ee4d
 800edac:	0800ee4d 	.word	0x0800ee4d
 800edb0:	0800ee4d 	.word	0x0800ee4d
 800edb4:	0800ee4d 	.word	0x0800ee4d
 800edb8:	0800ee2d 	.word	0x0800ee2d
 800edbc:	0800ee4d 	.word	0x0800ee4d
 800edc0:	0800ee4d 	.word	0x0800ee4d
 800edc4:	0800ee4d 	.word	0x0800ee4d
 800edc8:	0800ee4d 	.word	0x0800ee4d
 800edcc:	0800ee4d 	.word	0x0800ee4d
 800edd0:	0800ee4d 	.word	0x0800ee4d
 800edd4:	0800ee4d 	.word	0x0800ee4d
 800edd8:	0800ee35 	.word	0x0800ee35
 800eddc:	0800ee4d 	.word	0x0800ee4d
 800ede0:	0800ee4d 	.word	0x0800ee4d
 800ede4:	0800ee4d 	.word	0x0800ee4d
 800ede8:	0800ee4d 	.word	0x0800ee4d
 800edec:	0800ee4d 	.word	0x0800ee4d
 800edf0:	0800ee4d 	.word	0x0800ee4d
 800edf4:	0800ee4d 	.word	0x0800ee4d
 800edf8:	0800ee3d 	.word	0x0800ee3d
 800edfc:	0800ee4d 	.word	0x0800ee4d
 800ee00:	0800ee4d 	.word	0x0800ee4d
 800ee04:	0800ee4d 	.word	0x0800ee4d
 800ee08:	0800ee4d 	.word	0x0800ee4d
 800ee0c:	0800ee4d 	.word	0x0800ee4d
 800ee10:	0800ee4d 	.word	0x0800ee4d
 800ee14:	0800ee4d 	.word	0x0800ee4d
 800ee18:	0800ee45 	.word	0x0800ee45
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee22:	e050      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee24:	2304      	movs	r3, #4
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2a:	e04c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee2c:	2308      	movs	r3, #8
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee32:	e048      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee34:	2310      	movs	r3, #16
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3a:	e044      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee3c:	2320      	movs	r3, #32
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee42:	e040      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee44:	2340      	movs	r3, #64	@ 0x40
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4a:	e03c      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee4c:	2380      	movs	r3, #128	@ 0x80
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e038      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a71      	ldr	r2, [pc, #452]	@ (800f020 <UART_SetConfig+0x908>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d130      	bne.n	800eec0 <UART_SetConfig+0x7a8>
 800ee5e:	4b6f      	ldr	r3, [pc, #444]	@ (800f01c <UART_SetConfig+0x904>)
 800ee60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee62:	f003 0307 	and.w	r3, r3, #7
 800ee66:	2b05      	cmp	r3, #5
 800ee68:	d826      	bhi.n	800eeb8 <UART_SetConfig+0x7a0>
 800ee6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee70 <UART_SetConfig+0x758>)
 800ee6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee70:	0800ee89 	.word	0x0800ee89
 800ee74:	0800ee91 	.word	0x0800ee91
 800ee78:	0800ee99 	.word	0x0800ee99
 800ee7c:	0800eea1 	.word	0x0800eea1
 800ee80:	0800eea9 	.word	0x0800eea9
 800ee84:	0800eeb1 	.word	0x0800eeb1
 800ee88:	2302      	movs	r3, #2
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8e:	e01a      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee90:	2304      	movs	r3, #4
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee96:	e016      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800ee98:	2308      	movs	r3, #8
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9e:	e012      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eea0:	2310      	movs	r3, #16
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea6:	e00e      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eea8:	2320      	movs	r3, #32
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeae:	e00a      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eeb0:	2340      	movs	r3, #64	@ 0x40
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb6:	e006      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eeb8:	2380      	movs	r3, #128	@ 0x80
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eebe:	e002      	b.n	800eec6 <UART_SetConfig+0x7ae>
 800eec0:	2380      	movs	r3, #128	@ 0x80
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a55      	ldr	r2, [pc, #340]	@ (800f020 <UART_SetConfig+0x908>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	f040 80f8 	bne.w	800f0c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eed2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eed6:	2b20      	cmp	r3, #32
 800eed8:	dc46      	bgt.n	800ef68 <UART_SetConfig+0x850>
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	db75      	blt.n	800efca <UART_SetConfig+0x8b2>
 800eede:	3b02      	subs	r3, #2
 800eee0:	2b1e      	cmp	r3, #30
 800eee2:	d872      	bhi.n	800efca <UART_SetConfig+0x8b2>
 800eee4:	a201      	add	r2, pc, #4	@ (adr r2, 800eeec <UART_SetConfig+0x7d4>)
 800eee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeea:	bf00      	nop
 800eeec:	0800ef6f 	.word	0x0800ef6f
 800eef0:	0800efcb 	.word	0x0800efcb
 800eef4:	0800ef77 	.word	0x0800ef77
 800eef8:	0800efcb 	.word	0x0800efcb
 800eefc:	0800efcb 	.word	0x0800efcb
 800ef00:	0800efcb 	.word	0x0800efcb
 800ef04:	0800ef87 	.word	0x0800ef87
 800ef08:	0800efcb 	.word	0x0800efcb
 800ef0c:	0800efcb 	.word	0x0800efcb
 800ef10:	0800efcb 	.word	0x0800efcb
 800ef14:	0800efcb 	.word	0x0800efcb
 800ef18:	0800efcb 	.word	0x0800efcb
 800ef1c:	0800efcb 	.word	0x0800efcb
 800ef20:	0800efcb 	.word	0x0800efcb
 800ef24:	0800ef97 	.word	0x0800ef97
 800ef28:	0800efcb 	.word	0x0800efcb
 800ef2c:	0800efcb 	.word	0x0800efcb
 800ef30:	0800efcb 	.word	0x0800efcb
 800ef34:	0800efcb 	.word	0x0800efcb
 800ef38:	0800efcb 	.word	0x0800efcb
 800ef3c:	0800efcb 	.word	0x0800efcb
 800ef40:	0800efcb 	.word	0x0800efcb
 800ef44:	0800efcb 	.word	0x0800efcb
 800ef48:	0800efcb 	.word	0x0800efcb
 800ef4c:	0800efcb 	.word	0x0800efcb
 800ef50:	0800efcb 	.word	0x0800efcb
 800ef54:	0800efcb 	.word	0x0800efcb
 800ef58:	0800efcb 	.word	0x0800efcb
 800ef5c:	0800efcb 	.word	0x0800efcb
 800ef60:	0800efcb 	.word	0x0800efcb
 800ef64:	0800efbd 	.word	0x0800efbd
 800ef68:	2b40      	cmp	r3, #64	@ 0x40
 800ef6a:	d02a      	beq.n	800efc2 <UART_SetConfig+0x8aa>
 800ef6c:	e02d      	b.n	800efca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ef6e:	f7fb fd11 	bl	800a994 <HAL_RCCEx_GetD3PCLK1Freq>
 800ef72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ef74:	e02f      	b.n	800efd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fb fd20 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef84:	e027      	b.n	800efd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef86:	f107 0318 	add.w	r3, r7, #24
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fb fe6c 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef94:	e01f      	b.n	800efd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef96:	4b21      	ldr	r3, [pc, #132]	@ (800f01c <UART_SetConfig+0x904>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 0320 	and.w	r3, r3, #32
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efa2:	4b1e      	ldr	r3, [pc, #120]	@ (800f01c <UART_SetConfig+0x904>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	08db      	lsrs	r3, r3, #3
 800efa8:	f003 0303 	and.w	r3, r3, #3
 800efac:	4a1d      	ldr	r2, [pc, #116]	@ (800f024 <UART_SetConfig+0x90c>)
 800efae:	fa22 f303 	lsr.w	r3, r2, r3
 800efb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efb4:	e00f      	b.n	800efd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800efb6:	4b1b      	ldr	r3, [pc, #108]	@ (800f024 <UART_SetConfig+0x90c>)
 800efb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efba:	e00c      	b.n	800efd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efbc:	4b1a      	ldr	r3, [pc, #104]	@ (800f028 <UART_SetConfig+0x910>)
 800efbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc0:	e009      	b.n	800efd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc8:	e005      	b.n	800efd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800efca:	2300      	movs	r3, #0
 800efcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800efce:	2301      	movs	r3, #1
 800efd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800efd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800efd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 81ee 	beq.w	800f3ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe2:	4a12      	ldr	r2, [pc, #72]	@ (800f02c <UART_SetConfig+0x914>)
 800efe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efe8:	461a      	mov	r2, r3
 800efea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efec:	fbb3 f3f2 	udiv	r3, r3, r2
 800eff0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	685a      	ldr	r2, [r3, #4]
 800eff6:	4613      	mov	r3, r2
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	4413      	add	r3, r2
 800effc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800effe:	429a      	cmp	r2, r3
 800f000:	d305      	bcc.n	800f00e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d910      	bls.n	800f030 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f014:	e1d1      	b.n	800f3ba <UART_SetConfig+0xca2>
 800f016:	bf00      	nop
 800f018:	40011c00 	.word	0x40011c00
 800f01c:	58024400 	.word	0x58024400
 800f020:	58000c00 	.word	0x58000c00
 800f024:	03d09000 	.word	0x03d09000
 800f028:	003d0900 	.word	0x003d0900
 800f02c:	0801ff24 	.word	0x0801ff24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f032:	2200      	movs	r2, #0
 800f034:	60bb      	str	r3, [r7, #8]
 800f036:	60fa      	str	r2, [r7, #12]
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f03c:	4ac0      	ldr	r2, [pc, #768]	@ (800f340 <UART_SetConfig+0xc28>)
 800f03e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f042:	b29b      	uxth	r3, r3
 800f044:	2200      	movs	r2, #0
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	607a      	str	r2, [r7, #4]
 800f04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f04e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f052:	f7f1 f9b5 	bl	80003c0 <__aeabi_uldivmod>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4610      	mov	r0, r2
 800f05c:	4619      	mov	r1, r3
 800f05e:	f04f 0200 	mov.w	r2, #0
 800f062:	f04f 0300 	mov.w	r3, #0
 800f066:	020b      	lsls	r3, r1, #8
 800f068:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f06c:	0202      	lsls	r2, r0, #8
 800f06e:	6979      	ldr	r1, [r7, #20]
 800f070:	6849      	ldr	r1, [r1, #4]
 800f072:	0849      	lsrs	r1, r1, #1
 800f074:	2000      	movs	r0, #0
 800f076:	460c      	mov	r4, r1
 800f078:	4605      	mov	r5, r0
 800f07a:	eb12 0804 	adds.w	r8, r2, r4
 800f07e:	eb43 0905 	adc.w	r9, r3, r5
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	469a      	mov	sl, r3
 800f08a:	4693      	mov	fp, r2
 800f08c:	4652      	mov	r2, sl
 800f08e:	465b      	mov	r3, fp
 800f090:	4640      	mov	r0, r8
 800f092:	4649      	mov	r1, r9
 800f094:	f7f1 f994 	bl	80003c0 <__aeabi_uldivmod>
 800f098:	4602      	mov	r2, r0
 800f09a:	460b      	mov	r3, r1
 800f09c:	4613      	mov	r3, r2
 800f09e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f0a6:	d308      	bcc.n	800f0ba <UART_SetConfig+0x9a2>
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0ae:	d204      	bcs.n	800f0ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0b6:	60da      	str	r2, [r3, #12]
 800f0b8:	e17f      	b.n	800f3ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f0c0:	e17b      	b.n	800f3ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	69db      	ldr	r3, [r3, #28]
 800f0c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0ca:	f040 80bd 	bne.w	800f248 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f0ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f0d2:	2b20      	cmp	r3, #32
 800f0d4:	dc48      	bgt.n	800f168 <UART_SetConfig+0xa50>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	db7b      	blt.n	800f1d2 <UART_SetConfig+0xaba>
 800f0da:	2b20      	cmp	r3, #32
 800f0dc:	d879      	bhi.n	800f1d2 <UART_SetConfig+0xaba>
 800f0de:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e4 <UART_SetConfig+0x9cc>)
 800f0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e4:	0800f16f 	.word	0x0800f16f
 800f0e8:	0800f177 	.word	0x0800f177
 800f0ec:	0800f1d3 	.word	0x0800f1d3
 800f0f0:	0800f1d3 	.word	0x0800f1d3
 800f0f4:	0800f17f 	.word	0x0800f17f
 800f0f8:	0800f1d3 	.word	0x0800f1d3
 800f0fc:	0800f1d3 	.word	0x0800f1d3
 800f100:	0800f1d3 	.word	0x0800f1d3
 800f104:	0800f18f 	.word	0x0800f18f
 800f108:	0800f1d3 	.word	0x0800f1d3
 800f10c:	0800f1d3 	.word	0x0800f1d3
 800f110:	0800f1d3 	.word	0x0800f1d3
 800f114:	0800f1d3 	.word	0x0800f1d3
 800f118:	0800f1d3 	.word	0x0800f1d3
 800f11c:	0800f1d3 	.word	0x0800f1d3
 800f120:	0800f1d3 	.word	0x0800f1d3
 800f124:	0800f19f 	.word	0x0800f19f
 800f128:	0800f1d3 	.word	0x0800f1d3
 800f12c:	0800f1d3 	.word	0x0800f1d3
 800f130:	0800f1d3 	.word	0x0800f1d3
 800f134:	0800f1d3 	.word	0x0800f1d3
 800f138:	0800f1d3 	.word	0x0800f1d3
 800f13c:	0800f1d3 	.word	0x0800f1d3
 800f140:	0800f1d3 	.word	0x0800f1d3
 800f144:	0800f1d3 	.word	0x0800f1d3
 800f148:	0800f1d3 	.word	0x0800f1d3
 800f14c:	0800f1d3 	.word	0x0800f1d3
 800f150:	0800f1d3 	.word	0x0800f1d3
 800f154:	0800f1d3 	.word	0x0800f1d3
 800f158:	0800f1d3 	.word	0x0800f1d3
 800f15c:	0800f1d3 	.word	0x0800f1d3
 800f160:	0800f1d3 	.word	0x0800f1d3
 800f164:	0800f1c5 	.word	0x0800f1c5
 800f168:	2b40      	cmp	r3, #64	@ 0x40
 800f16a:	d02e      	beq.n	800f1ca <UART_SetConfig+0xab2>
 800f16c:	e031      	b.n	800f1d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f16e:	f7f9 fd73 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
 800f172:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f174:	e033      	b.n	800f1de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f176:	f7f9 fd85 	bl	8008c84 <HAL_RCC_GetPCLK2Freq>
 800f17a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f17c:	e02f      	b.n	800f1de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f17e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f182:	4618      	mov	r0, r3
 800f184:	f7fb fc1c 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f18c:	e027      	b.n	800f1de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f18e:	f107 0318 	add.w	r3, r7, #24
 800f192:	4618      	mov	r0, r3
 800f194:	f7fb fd68 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f19c:	e01f      	b.n	800f1de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f19e:	4b69      	ldr	r3, [pc, #420]	@ (800f344 <UART_SetConfig+0xc2c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f003 0320 	and.w	r3, r3, #32
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d009      	beq.n	800f1be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1aa:	4b66      	ldr	r3, [pc, #408]	@ (800f344 <UART_SetConfig+0xc2c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	08db      	lsrs	r3, r3, #3
 800f1b0:	f003 0303 	and.w	r3, r3, #3
 800f1b4:	4a64      	ldr	r2, [pc, #400]	@ (800f348 <UART_SetConfig+0xc30>)
 800f1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800f1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1bc:	e00f      	b.n	800f1de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f1be:	4b62      	ldr	r3, [pc, #392]	@ (800f348 <UART_SetConfig+0xc30>)
 800f1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1c2:	e00c      	b.n	800f1de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1c4:	4b61      	ldr	r3, [pc, #388]	@ (800f34c <UART_SetConfig+0xc34>)
 800f1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1c8:	e009      	b.n	800f1de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1d0:	e005      	b.n	800f1de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f1dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 80ea 	beq.w	800f3ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ea:	4a55      	ldr	r2, [pc, #340]	@ (800f340 <UART_SetConfig+0xc28>)
 800f1ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1f8:	005a      	lsls	r2, r3, #1
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	085b      	lsrs	r3, r3, #1
 800f200:	441a      	add	r2, r3
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	fbb2 f3f3 	udiv	r3, r2, r3
 800f20a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20e:	2b0f      	cmp	r3, #15
 800f210:	d916      	bls.n	800f240 <UART_SetConfig+0xb28>
 800f212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f218:	d212      	bcs.n	800f240 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	f023 030f 	bic.w	r3, r3, #15
 800f222:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f226:	085b      	lsrs	r3, r3, #1
 800f228:	b29b      	uxth	r3, r3
 800f22a:	f003 0307 	and.w	r3, r3, #7
 800f22e:	b29a      	uxth	r2, r3
 800f230:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f232:	4313      	orrs	r3, r2
 800f234:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f23c:	60da      	str	r2, [r3, #12]
 800f23e:	e0bc      	b.n	800f3ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f246:	e0b8      	b.n	800f3ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f248:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f24c:	2b20      	cmp	r3, #32
 800f24e:	dc4b      	bgt.n	800f2e8 <UART_SetConfig+0xbd0>
 800f250:	2b00      	cmp	r3, #0
 800f252:	f2c0 8087 	blt.w	800f364 <UART_SetConfig+0xc4c>
 800f256:	2b20      	cmp	r3, #32
 800f258:	f200 8084 	bhi.w	800f364 <UART_SetConfig+0xc4c>
 800f25c:	a201      	add	r2, pc, #4	@ (adr r2, 800f264 <UART_SetConfig+0xb4c>)
 800f25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f262:	bf00      	nop
 800f264:	0800f2ef 	.word	0x0800f2ef
 800f268:	0800f2f7 	.word	0x0800f2f7
 800f26c:	0800f365 	.word	0x0800f365
 800f270:	0800f365 	.word	0x0800f365
 800f274:	0800f2ff 	.word	0x0800f2ff
 800f278:	0800f365 	.word	0x0800f365
 800f27c:	0800f365 	.word	0x0800f365
 800f280:	0800f365 	.word	0x0800f365
 800f284:	0800f30f 	.word	0x0800f30f
 800f288:	0800f365 	.word	0x0800f365
 800f28c:	0800f365 	.word	0x0800f365
 800f290:	0800f365 	.word	0x0800f365
 800f294:	0800f365 	.word	0x0800f365
 800f298:	0800f365 	.word	0x0800f365
 800f29c:	0800f365 	.word	0x0800f365
 800f2a0:	0800f365 	.word	0x0800f365
 800f2a4:	0800f31f 	.word	0x0800f31f
 800f2a8:	0800f365 	.word	0x0800f365
 800f2ac:	0800f365 	.word	0x0800f365
 800f2b0:	0800f365 	.word	0x0800f365
 800f2b4:	0800f365 	.word	0x0800f365
 800f2b8:	0800f365 	.word	0x0800f365
 800f2bc:	0800f365 	.word	0x0800f365
 800f2c0:	0800f365 	.word	0x0800f365
 800f2c4:	0800f365 	.word	0x0800f365
 800f2c8:	0800f365 	.word	0x0800f365
 800f2cc:	0800f365 	.word	0x0800f365
 800f2d0:	0800f365 	.word	0x0800f365
 800f2d4:	0800f365 	.word	0x0800f365
 800f2d8:	0800f365 	.word	0x0800f365
 800f2dc:	0800f365 	.word	0x0800f365
 800f2e0:	0800f365 	.word	0x0800f365
 800f2e4:	0800f357 	.word	0x0800f357
 800f2e8:	2b40      	cmp	r3, #64	@ 0x40
 800f2ea:	d037      	beq.n	800f35c <UART_SetConfig+0xc44>
 800f2ec:	e03a      	b.n	800f364 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2ee:	f7f9 fcb3 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
 800f2f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2f4:	e03c      	b.n	800f370 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2f6:	f7f9 fcc5 	bl	8008c84 <HAL_RCC_GetPCLK2Freq>
 800f2fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2fc:	e038      	b.n	800f370 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f302:	4618      	mov	r0, r3
 800f304:	f7fb fb5c 	bl	800a9c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f30c:	e030      	b.n	800f370 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f30e:	f107 0318 	add.w	r3, r7, #24
 800f312:	4618      	mov	r0, r3
 800f314:	f7fb fca8 	bl	800ac68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f31c:	e028      	b.n	800f370 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f31e:	4b09      	ldr	r3, [pc, #36]	@ (800f344 <UART_SetConfig+0xc2c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f003 0320 	and.w	r3, r3, #32
 800f326:	2b00      	cmp	r3, #0
 800f328:	d012      	beq.n	800f350 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f32a:	4b06      	ldr	r3, [pc, #24]	@ (800f344 <UART_SetConfig+0xc2c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	08db      	lsrs	r3, r3, #3
 800f330:	f003 0303 	and.w	r3, r3, #3
 800f334:	4a04      	ldr	r2, [pc, #16]	@ (800f348 <UART_SetConfig+0xc30>)
 800f336:	fa22 f303 	lsr.w	r3, r2, r3
 800f33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f33c:	e018      	b.n	800f370 <UART_SetConfig+0xc58>
 800f33e:	bf00      	nop
 800f340:	0801ff24 	.word	0x0801ff24
 800f344:	58024400 	.word	0x58024400
 800f348:	03d09000 	.word	0x03d09000
 800f34c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f350:	4b24      	ldr	r3, [pc, #144]	@ (800f3e4 <UART_SetConfig+0xccc>)
 800f352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f354:	e00c      	b.n	800f370 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f356:	4b24      	ldr	r3, [pc, #144]	@ (800f3e8 <UART_SetConfig+0xcd0>)
 800f358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f35a:	e009      	b.n	800f370 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f35c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f362:	e005      	b.n	800f370 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f364:	2300      	movs	r3, #0
 800f366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f368:	2301      	movs	r3, #1
 800f36a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f36e:	bf00      	nop
    }

    if (pclk != 0U)
 800f370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f372:	2b00      	cmp	r3, #0
 800f374:	d021      	beq.n	800f3ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f37a:	4a1c      	ldr	r2, [pc, #112]	@ (800f3ec <UART_SetConfig+0xcd4>)
 800f37c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f380:	461a      	mov	r2, r3
 800f382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f384:	fbb3 f2f2 	udiv	r2, r3, r2
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	085b      	lsrs	r3, r3, #1
 800f38e:	441a      	add	r2, r3
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	fbb2 f3f3 	udiv	r3, r2, r3
 800f398:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39c:	2b0f      	cmp	r3, #15
 800f39e:	d909      	bls.n	800f3b4 <UART_SetConfig+0xc9c>
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3a6:	d205      	bcs.n	800f3b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	60da      	str	r2, [r3, #12]
 800f3b2:	e002      	b.n	800f3ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f3d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3748      	adds	r7, #72	@ 0x48
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3e4:	03d09000 	.word	0x03d09000
 800f3e8:	003d0900 	.word	0x003d0900
 800f3ec:	0801ff24 	.word	0x0801ff24

0800f3f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3fc:	f003 0308 	and.w	r3, r3, #8
 800f400:	2b00      	cmp	r3, #0
 800f402:	d00a      	beq.n	800f41a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	430a      	orrs	r2, r1
 800f418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00a      	beq.n	800f43c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	430a      	orrs	r2, r1
 800f43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f440:	f003 0302 	and.w	r3, r3, #2
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00a      	beq.n	800f45e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	430a      	orrs	r2, r1
 800f45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f462:	f003 0304 	and.w	r3, r3, #4
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00a      	beq.n	800f480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	430a      	orrs	r2, r1
 800f47e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f484:	f003 0310 	and.w	r3, r3, #16
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00a      	beq.n	800f4a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	430a      	orrs	r2, r1
 800f4a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4a6:	f003 0320 	and.w	r3, r3, #32
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00a      	beq.n	800f4c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	430a      	orrs	r2, r1
 800f4c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d01a      	beq.n	800f506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	430a      	orrs	r2, r1
 800f4e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4ee:	d10a      	bne.n	800f506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	430a      	orrs	r2, r1
 800f504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00a      	beq.n	800f528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	430a      	orrs	r2, r1
 800f526:	605a      	str	r2, [r3, #4]
  }
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b098      	sub	sp, #96	@ 0x60
 800f538:	af02      	add	r7, sp, #8
 800f53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f544:	f7f4 fb5e 	bl	8003c04 <HAL_GetTick>
 800f548:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f003 0308 	and.w	r3, r3, #8
 800f554:	2b08      	cmp	r3, #8
 800f556:	d12f      	bne.n	800f5b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f560:	2200      	movs	r2, #0
 800f562:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 f88e 	bl	800f688 <UART_WaitOnFlagUntilTimeout>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d022      	beq.n	800f5b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f57a:	e853 3f00 	ldrex	r3, [r3]
 800f57e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f586:	653b      	str	r3, [r7, #80]	@ 0x50
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	461a      	mov	r2, r3
 800f58e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f590:	647b      	str	r3, [r7, #68]	@ 0x44
 800f592:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f598:	e841 2300 	strex	r3, r2, [r1]
 800f59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1e6      	bne.n	800f572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2220      	movs	r2, #32
 800f5a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	e063      	b.n	800f680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f003 0304 	and.w	r3, r3, #4
 800f5c2:	2b04      	cmp	r3, #4
 800f5c4:	d149      	bne.n	800f65a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f857 	bl	800f688 <UART_WaitOnFlagUntilTimeout>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d03c      	beq.n	800f65a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	e853 3f00 	ldrex	r3, [r3]
 800f5ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f5ee:	6a3b      	ldr	r3, [r7, #32]
 800f5f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f5f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800f600:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f606:	e841 2300 	strex	r3, r2, [r1]
 800f60a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1e6      	bne.n	800f5e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	3308      	adds	r3, #8
 800f618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	e853 3f00 	ldrex	r3, [r3]
 800f620:	60fb      	str	r3, [r7, #12]
   return(result);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f023 0301 	bic.w	r3, r3, #1
 800f628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3308      	adds	r3, #8
 800f630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f632:	61fa      	str	r2, [r7, #28]
 800f634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f636:	69b9      	ldr	r1, [r7, #24]
 800f638:	69fa      	ldr	r2, [r7, #28]
 800f63a:	e841 2300 	strex	r3, r2, [r1]
 800f63e:	617b      	str	r3, [r7, #20]
   return(result);
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1e5      	bne.n	800f612 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2220      	movs	r2, #32
 800f64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f656:	2303      	movs	r3, #3
 800f658:	e012      	b.n	800f680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2220      	movs	r2, #32
 800f65e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2220      	movs	r2, #32
 800f666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3758      	adds	r7, #88	@ 0x58
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	4613      	mov	r3, r2
 800f696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f698:	e04f      	b.n	800f73a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a0:	d04b      	beq.n	800f73a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6a2:	f7f4 faaf 	bl	8003c04 <HAL_GetTick>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	1ad3      	subs	r3, r2, r3
 800f6ac:	69ba      	ldr	r2, [r7, #24]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d302      	bcc.n	800f6b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d101      	bne.n	800f6bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e04e      	b.n	800f75a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0304 	and.w	r3, r3, #4
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d037      	beq.n	800f73a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	2b80      	cmp	r3, #128	@ 0x80
 800f6ce:	d034      	beq.n	800f73a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2b40      	cmp	r3, #64	@ 0x40
 800f6d4:	d031      	beq.n	800f73a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	69db      	ldr	r3, [r3, #28]
 800f6dc:	f003 0308 	and.w	r3, r3, #8
 800f6e0:	2b08      	cmp	r3, #8
 800f6e2:	d110      	bne.n	800f706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2208      	movs	r2, #8
 800f6ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f000 f839 	bl	800f764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2208      	movs	r2, #8
 800f6f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f702:	2301      	movs	r3, #1
 800f704:	e029      	b.n	800f75a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f714:	d111      	bne.n	800f73a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f71e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f000 f81f 	bl	800f764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2220      	movs	r2, #32
 800f72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f736:	2303      	movs	r3, #3
 800f738:	e00f      	b.n	800f75a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	69da      	ldr	r2, [r3, #28]
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	4013      	ands	r3, r2
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	429a      	cmp	r2, r3
 800f748:	bf0c      	ite	eq
 800f74a:	2301      	moveq	r3, #1
 800f74c:	2300      	movne	r3, #0
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	461a      	mov	r2, r3
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	429a      	cmp	r2, r3
 800f756:	d0a0      	beq.n	800f69a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
	...

0800f764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f764:	b480      	push	{r7}
 800f766:	b095      	sub	sp, #84	@ 0x54
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f774:	e853 3f00 	ldrex	r3, [r3]
 800f778:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f78a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f78c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f792:	e841 2300 	strex	r3, r2, [r1]
 800f796:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1e6      	bne.n	800f76c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a6:	6a3b      	ldr	r3, [r7, #32]
 800f7a8:	e853 3f00 	ldrex	r3, [r3]
 800f7ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7ae:	69fa      	ldr	r2, [r7, #28]
 800f7b0:	4b1e      	ldr	r3, [pc, #120]	@ (800f82c <UART_EndRxTransfer+0xc8>)
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f7c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7c6:	e841 2300 	strex	r3, r2, [r1]
 800f7ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1e5      	bne.n	800f79e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d118      	bne.n	800f80c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	e853 3f00 	ldrex	r3, [r3]
 800f7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	f023 0310 	bic.w	r3, r3, #16
 800f7ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7f8:	61bb      	str	r3, [r7, #24]
 800f7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fc:	6979      	ldr	r1, [r7, #20]
 800f7fe:	69ba      	ldr	r2, [r7, #24]
 800f800:	e841 2300 	strex	r3, r2, [r1]
 800f804:	613b      	str	r3, [r7, #16]
   return(result);
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1e6      	bne.n	800f7da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2220      	movs	r2, #32
 800f810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2200      	movs	r2, #0
 800f818:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f820:	bf00      	nop
 800f822:	3754      	adds	r7, #84	@ 0x54
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	effffffe 	.word	0xeffffffe

0800f830 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d101      	bne.n	800f846 <HAL_UARTEx_DisableFifoMode+0x16>
 800f842:	2302      	movs	r3, #2
 800f844:	e027      	b.n	800f896 <HAL_UARTEx_DisableFifoMode+0x66>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2224      	movs	r2, #36	@ 0x24
 800f852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f022 0201 	bic.w	r2, r2, #1
 800f86c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f874:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2220      	movs	r2, #32
 800f888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3714      	adds	r7, #20
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d101      	bne.n	800f8ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8b6:	2302      	movs	r3, #2
 800f8b8:	e02d      	b.n	800f916 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2224      	movs	r2, #36	@ 0x24
 800f8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f022 0201 	bic.w	r2, r2, #1
 800f8e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	430a      	orrs	r2, r1
 800f8f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f850 	bl	800f99c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2220      	movs	r2, #32
 800f908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d101      	bne.n	800f936 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f932:	2302      	movs	r3, #2
 800f934:	e02d      	b.n	800f992 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2224      	movs	r2, #36	@ 0x24
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 0201 	bic.w	r2, r2, #1
 800f95c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	683a      	ldr	r2, [r7, #0]
 800f96e:	430a      	orrs	r2, r1
 800f970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f812 	bl	800f99c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2220      	movs	r2, #32
 800f984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
	...

0800f99c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d108      	bne.n	800f9be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9bc:	e031      	b.n	800fa22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9be:	2310      	movs	r3, #16
 800f9c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9c2:	2310      	movs	r3, #16
 800f9c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	0e5b      	lsrs	r3, r3, #25
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f003 0307 	and.w	r3, r3, #7
 800f9d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	0f5b      	lsrs	r3, r3, #29
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	f003 0307 	and.w	r3, r3, #7
 800f9e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9e6:	7bbb      	ldrb	r3, [r7, #14]
 800f9e8:	7b3a      	ldrb	r2, [r7, #12]
 800f9ea:	4911      	ldr	r1, [pc, #68]	@ (800fa30 <UARTEx_SetNbDataToProcess+0x94>)
 800f9ec:	5c8a      	ldrb	r2, [r1, r2]
 800f9ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f9f2:	7b3a      	ldrb	r2, [r7, #12]
 800f9f4:	490f      	ldr	r1, [pc, #60]	@ (800fa34 <UARTEx_SetNbDataToProcess+0x98>)
 800f9f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
 800fa06:	7b7a      	ldrb	r2, [r7, #13]
 800fa08:	4909      	ldr	r1, [pc, #36]	@ (800fa30 <UARTEx_SetNbDataToProcess+0x94>)
 800fa0a:	5c8a      	ldrb	r2, [r1, r2]
 800fa0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fa10:	7b7a      	ldrb	r2, [r7, #13]
 800fa12:	4908      	ldr	r1, [pc, #32]	@ (800fa34 <UARTEx_SetNbDataToProcess+0x98>)
 800fa14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa16:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fa22:	bf00      	nop
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	0801ff3c 	.word	0x0801ff3c
 800fa34:	0801ff44 	.word	0x0801ff44

0800fa38 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fa38:	b084      	sub	sp, #16
 800fa3a:	b480      	push	{r7}
 800fa3c:	b085      	sub	sp, #20
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	f107 001c 	add.w	r0, r7, #28
 800fa46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fa4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fa50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fa52:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fa56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fa5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fa5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	4b07      	ldr	r3, [pc, #28]	@ (800fa88 <SDMMC_Init+0x50>)
 800fa6c:	4013      	ands	r3, r2
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	431a      	orrs	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa76:	2300      	movs	r3, #0
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	b004      	add	sp, #16
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	ffc02c00 	.word	0xffc02c00

0800fa8c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800faa6:	b480      	push	{r7}
 800faa8:	b083      	sub	sp, #12
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f043 0203 	orr.w	r2, r3, #3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	370c      	adds	r7, #12
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f003 0303 	and.w	r3, r3, #3
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
	...

0800fb08 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fb26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fb2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fb32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	4313      	orrs	r3, r2
 800fb38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	68da      	ldr	r2, [r3, #12]
 800fb3e:	4b06      	ldr	r3, [pc, #24]	@ (800fb58 <SDMMC_SendCommand+0x50>)
 800fb40:	4013      	ands	r3, r2
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	431a      	orrs	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3714      	adds	r7, #20
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	fffee0c0 	.word	0xfffee0c0

0800fb5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b083      	sub	sp, #12
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	b2db      	uxtb	r3, r3
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b085      	sub	sp, #20
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3314      	adds	r3, #20
 800fb84:	461a      	mov	r2, r3
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	4413      	add	r3, r2
 800fb8a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3714      	adds	r7, #20
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	685a      	ldr	r2, [r3, #4]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbc2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fbc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fbce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	431a      	orrs	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fbe6:	2300      	movs	r3, #0

}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b088      	sub	sp, #32
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fc02:	2310      	movs	r3, #16
 800fc04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc16:	f107 0308 	add.w	r3, r7, #8
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ff73 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fc22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc26:	2110      	movs	r1, #16
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 fa5f 	bl	80100ec <SDMMC_GetCmdResp1>
 800fc2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc30:	69fb      	ldr	r3, [r7, #28]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3720      	adds	r7, #32
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b088      	sub	sp, #32
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fc48:	2311      	movs	r3, #17
 800fc4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc52:	2300      	movs	r3, #0
 800fc54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc5c:	f107 0308 	add.w	r3, r7, #8
 800fc60:	4619      	mov	r1, r3
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f7ff ff50 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc6c:	2111      	movs	r1, #17
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fa3c 	bl	80100ec <SDMMC_GetCmdResp1>
 800fc74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc76:	69fb      	ldr	r3, [r7, #28]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3720      	adds	r7, #32
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fc8e:	2312      	movs	r3, #18
 800fc90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fca2:	f107 0308 	add.w	r3, r7, #8
 800fca6:	4619      	mov	r1, r3
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ff2d 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fcae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcb2:	2112      	movs	r1, #18
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fa19 	bl	80100ec <SDMMC_GetCmdResp1>
 800fcba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcbc:	69fb      	ldr	r3, [r7, #28]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3720      	adds	r7, #32
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b088      	sub	sp, #32
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fcd4:	2318      	movs	r3, #24
 800fcd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcde:	2300      	movs	r3, #0
 800fce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fce8:	f107 0308 	add.w	r3, r7, #8
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7ff ff0a 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fcf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcf8:	2118      	movs	r1, #24
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f9f6 	bl	80100ec <SDMMC_GetCmdResp1>
 800fd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd02:	69fb      	ldr	r3, [r7, #28]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3720      	adds	r7, #32
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fd1a:	2319      	movs	r3, #25
 800fd1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd24:	2300      	movs	r3, #0
 800fd26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd2e:	f107 0308 	add.w	r3, r7, #8
 800fd32:	4619      	mov	r1, r3
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff fee7 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fd3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd3e:	2119      	movs	r1, #25
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f9d3 	bl	80100ec <SDMMC_GetCmdResp1>
 800fd46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd48:	69fb      	ldr	r3, [r7, #28]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3720      	adds	r7, #32
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
	...

0800fd54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b088      	sub	sp, #32
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fd60:	230c      	movs	r3, #12
 800fd62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd72:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd8c:	f107 0308 	add.w	r3, r7, #8
 800fd90:	4619      	mov	r1, r3
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7ff feb8 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fd98:	4a0b      	ldr	r2, [pc, #44]	@ (800fdc8 <SDMMC_CmdStopTransfer+0x74>)
 800fd9a:	210c      	movs	r1, #12
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 f9a5 	bl	80100ec <SDMMC_GetCmdResp1>
 800fda2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fdb6:	d101      	bne.n	800fdbc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fdbc:	69fb      	ldr	r3, [r7, #28]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3720      	adds	r7, #32
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	05f5e100 	.word	0x05f5e100

0800fdcc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b088      	sub	sp, #32
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fdda:	2307      	movs	r3, #7
 800fddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fde2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fde4:	2300      	movs	r3, #0
 800fde6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fde8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdee:	f107 0308 	add.w	r3, r7, #8
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7ff fe87 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fdfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdfe:	2107      	movs	r1, #7
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f973 	bl	80100ec <SDMMC_GetCmdResp1>
 800fe06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe08:	69fb      	ldr	r3, [r7, #28]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3720      	adds	r7, #32
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b088      	sub	sp, #32
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fe22:	2300      	movs	r3, #0
 800fe24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe26:	2300      	movs	r3, #0
 800fe28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe30:	f107 0308 	add.w	r3, r7, #8
 800fe34:	4619      	mov	r1, r3
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f7ff fe66 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fb97 	bl	8010570 <SDMMC_GetCmdError>
 800fe42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe44:	69fb      	ldr	r3, [r7, #28]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3720      	adds	r7, #32
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b088      	sub	sp, #32
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fe56:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fe5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fe5c:	2308      	movs	r3, #8
 800fe5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe66:	2300      	movs	r3, #0
 800fe68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe70:	f107 0308 	add.w	r3, r7, #8
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7ff fe46 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 fb29 	bl	80104d4 <SDMMC_GetCmdResp7>
 800fe82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe84:	69fb      	ldr	r3, [r7, #28]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3720      	adds	r7, #32
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b088      	sub	sp, #32
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fe9c:	2337      	movs	r3, #55	@ 0x37
 800fe9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fea6:	2300      	movs	r3, #0
 800fea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800feaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800feae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800feb0:	f107 0308 	add.w	r3, r7, #8
 800feb4:	4619      	mov	r1, r3
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f7ff fe26 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800febc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fec0:	2137      	movs	r1, #55	@ 0x37
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 f912 	bl	80100ec <SDMMC_GetCmdResp1>
 800fec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feca:	69fb      	ldr	r3, [r7, #28]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3720      	adds	r7, #32
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b088      	sub	sp, #32
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fee2:	2329      	movs	r3, #41	@ 0x29
 800fee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800feea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800feec:	2300      	movs	r3, #0
 800feee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fef6:	f107 0308 	add.w	r3, r7, #8
 800fefa:	4619      	mov	r1, r3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7ff fe03 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fa2e 	bl	8010364 <SDMMC_GetCmdResp3>
 800ff08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff0a:	69fb      	ldr	r3, [r7, #28]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3720      	adds	r7, #32
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b088      	sub	sp, #32
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ff22:	2306      	movs	r3, #6
 800ff24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff36:	f107 0308 	add.w	r3, r7, #8
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7ff fde3 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ff42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff46:	2106      	movs	r1, #6
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f8cf 	bl	80100ec <SDMMC_GetCmdResp1>
 800ff4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff50:	69fb      	ldr	r3, [r7, #28]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3720      	adds	r7, #32
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b088      	sub	sp, #32
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ff66:	2333      	movs	r3, #51	@ 0x33
 800ff68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff70:	2300      	movs	r3, #0
 800ff72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff7a:	f107 0308 	add.w	r3, r7, #8
 800ff7e:	4619      	mov	r1, r3
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff fdc1 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ff86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff8a:	2133      	movs	r1, #51	@ 0x33
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f8ad 	bl	80100ec <SDMMC_GetCmdResp1>
 800ff92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff94:	69fb      	ldr	r3, [r7, #28]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3720      	adds	r7, #32
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b088      	sub	sp, #32
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ffaa:	2302      	movs	r3, #2
 800ffac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ffae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ffb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffbe:	f107 0308 	add.w	r3, r7, #8
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff fd9f 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f980 	bl	80102d0 <SDMMC_GetCmdResp2>
 800ffd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffd2:	69fb      	ldr	r3, [r7, #28]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3720      	adds	r7, #32
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b088      	sub	sp, #32
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ffea:	2309      	movs	r3, #9
 800ffec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ffee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fff4:	2300      	movs	r3, #0
 800fff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fffe:	f107 0308 	add.w	r3, r7, #8
 8010002:	4619      	mov	r1, r3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff fd7f 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f960 	bl	80102d0 <SDMMC_GetCmdResp2>
 8010010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010012:	69fb      	ldr	r3, [r7, #28]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3720      	adds	r7, #32
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010026:	2300      	movs	r3, #0
 8010028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801002a:	2303      	movs	r3, #3
 801002c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801002e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010034:	2300      	movs	r3, #0
 8010036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801003c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801003e:	f107 0308 	add.w	r3, r7, #8
 8010042:	4619      	mov	r1, r3
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff fd5f 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	2103      	movs	r1, #3
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f9c8 	bl	80103e4 <SDMMC_GetCmdResp6>
 8010054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010056:	69fb      	ldr	r3, [r7, #28]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3720      	adds	r7, #32
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b088      	sub	sp, #32
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801006e:	230d      	movs	r3, #13
 8010070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010078:	2300      	movs	r3, #0
 801007a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801007c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010082:	f107 0308 	add.w	r3, r7, #8
 8010086:	4619      	mov	r1, r3
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff fd3d 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801008e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010092:	210d      	movs	r1, #13
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f829 	bl	80100ec <SDMMC_GetCmdResp1>
 801009a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801009c:	69fb      	ldr	r3, [r7, #28]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3720      	adds	r7, #32
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b088      	sub	sp, #32
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80100ae:	2300      	movs	r3, #0
 80100b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80100b2:	230d      	movs	r3, #13
 80100b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100bc:	2300      	movs	r3, #0
 80100be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100c6:	f107 0308 	add.w	r3, r7, #8
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7ff fd1b 	bl	800fb08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80100d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100d6:	210d      	movs	r1, #13
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 f807 	bl	80100ec <SDMMC_GetCmdResp1>
 80100de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100e0:	69fb      	ldr	r3, [r7, #28]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3720      	adds	r7, #32
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
	...

080100ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b088      	sub	sp, #32
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	460b      	mov	r3, r1
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80100fa:	4b70      	ldr	r3, [pc, #448]	@ (80102bc <SDMMC_GetCmdResp1+0x1d0>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a70      	ldr	r2, [pc, #448]	@ (80102c0 <SDMMC_GetCmdResp1+0x1d4>)
 8010100:	fba2 2303 	umull	r2, r3, r2, r3
 8010104:	0a5a      	lsrs	r2, r3, #9
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	fb02 f303 	mul.w	r3, r2, r3
 801010c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	1e5a      	subs	r2, r3, #1
 8010112:	61fa      	str	r2, [r7, #28]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d102      	bne.n	801011e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010118:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801011c:	e0c9      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010122:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010124:	69ba      	ldr	r2, [r7, #24]
 8010126:	4b67      	ldr	r3, [pc, #412]	@ (80102c4 <SDMMC_GetCmdResp1+0x1d8>)
 8010128:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801012a:	2b00      	cmp	r3, #0
 801012c:	d0ef      	beq.n	801010e <SDMMC_GetCmdResp1+0x22>
 801012e:	69bb      	ldr	r3, [r7, #24]
 8010130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010134:	2b00      	cmp	r3, #0
 8010136:	d1ea      	bne.n	801010e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801013c:	f003 0304 	and.w	r3, r3, #4
 8010140:	2b00      	cmp	r3, #0
 8010142:	d004      	beq.n	801014e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2204      	movs	r2, #4
 8010148:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801014a:	2304      	movs	r3, #4
 801014c:	e0b1      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d004      	beq.n	8010164 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2201      	movs	r2, #1
 801015e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010160:	2301      	movs	r3, #1
 8010162:	e0a6      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	4a58      	ldr	r2, [pc, #352]	@ (80102c8 <SDMMC_GetCmdResp1+0x1dc>)
 8010168:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	f7ff fcf6 	bl	800fb5c <SDMMC_GetCommandResponse>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	7afb      	ldrb	r3, [r7, #11]
 8010176:	4293      	cmp	r3, r2
 8010178:	d001      	beq.n	801017e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801017a:	2301      	movs	r3, #1
 801017c:	e099      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801017e:	2100      	movs	r1, #0
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f7ff fcf8 	bl	800fb76 <SDMMC_GetResponse>
 8010186:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	4b50      	ldr	r3, [pc, #320]	@ (80102cc <SDMMC_GetCmdResp1+0x1e0>)
 801018c:	4013      	ands	r3, r2
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010192:	2300      	movs	r3, #0
 8010194:	e08d      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2b00      	cmp	r3, #0
 801019a:	da02      	bge.n	80101a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801019c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80101a0:	e087      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d001      	beq.n	80101b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80101ac:	2340      	movs	r3, #64	@ 0x40
 80101ae:	e080      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80101ba:	2380      	movs	r3, #128	@ 0x80
 80101bc:	e079      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d002      	beq.n	80101ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80101c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101cc:	e071      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d002      	beq.n	80101de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80101d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80101dc:	e069      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d002      	beq.n	80101ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80101e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101ec:	e061      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d002      	beq.n	80101fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80101f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80101fc:	e059      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010204:	2b00      	cmp	r3, #0
 8010206:	d002      	beq.n	801020e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801020c:	e051      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010214:	2b00      	cmp	r3, #0
 8010216:	d002      	beq.n	801021e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801021c:	e049      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010224:	2b00      	cmp	r3, #0
 8010226:	d002      	beq.n	801022e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010228:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801022c:	e041      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010234:	2b00      	cmp	r3, #0
 8010236:	d002      	beq.n	801023e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801023c:	e039      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010244:	2b00      	cmp	r3, #0
 8010246:	d002      	beq.n	801024e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801024c:	e031      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010254:	2b00      	cmp	r3, #0
 8010256:	d002      	beq.n	801025e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010258:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801025c:	e029      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010264:	2b00      	cmp	r3, #0
 8010266:	d002      	beq.n	801026e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010268:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801026c:	e021      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010274:	2b00      	cmp	r3, #0
 8010276:	d002      	beq.n	801027e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010278:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801027c:	e019      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010284:	2b00      	cmp	r3, #0
 8010286:	d002      	beq.n	801028e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010288:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801028c:	e011      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801029c:	e009      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	f003 0308 	and.w	r3, r3, #8
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d002      	beq.n	80102ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80102a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80102ac:	e001      	b.n	80102b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80102ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3720      	adds	r7, #32
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	24000000 	.word	0x24000000
 80102c0:	10624dd3 	.word	0x10624dd3
 80102c4:	00200045 	.word	0x00200045
 80102c8:	002000c5 	.word	0x002000c5
 80102cc:	fdffe008 	.word	0xfdffe008

080102d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102d8:	4b1f      	ldr	r3, [pc, #124]	@ (8010358 <SDMMC_GetCmdResp2+0x88>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a1f      	ldr	r2, [pc, #124]	@ (801035c <SDMMC_GetCmdResp2+0x8c>)
 80102de:	fba2 2303 	umull	r2, r3, r2, r3
 80102e2:	0a5b      	lsrs	r3, r3, #9
 80102e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102e8:	fb02 f303 	mul.w	r3, r2, r3
 80102ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	1e5a      	subs	r2, r3, #1
 80102f2:	60fa      	str	r2, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d102      	bne.n	80102fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80102fc:	e026      	b.n	801034c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010302:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0ef      	beq.n	80102ee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010314:	2b00      	cmp	r3, #0
 8010316:	d1ea      	bne.n	80102ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801031c:	f003 0304 	and.w	r3, r3, #4
 8010320:	2b00      	cmp	r3, #0
 8010322:	d004      	beq.n	801032e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2204      	movs	r2, #4
 8010328:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801032a:	2304      	movs	r3, #4
 801032c:	e00e      	b.n	801034c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010332:	f003 0301 	and.w	r3, r3, #1
 8010336:	2b00      	cmp	r3, #0
 8010338:	d004      	beq.n	8010344 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2201      	movs	r2, #1
 801033e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010340:	2301      	movs	r3, #1
 8010342:	e003      	b.n	801034c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a06      	ldr	r2, [pc, #24]	@ (8010360 <SDMMC_GetCmdResp2+0x90>)
 8010348:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801034a:	2300      	movs	r3, #0
}
 801034c:	4618      	mov	r0, r3
 801034e:	3714      	adds	r7, #20
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr
 8010358:	24000000 	.word	0x24000000
 801035c:	10624dd3 	.word	0x10624dd3
 8010360:	002000c5 	.word	0x002000c5

08010364 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801036c:	4b1a      	ldr	r3, [pc, #104]	@ (80103d8 <SDMMC_GetCmdResp3+0x74>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a1a      	ldr	r2, [pc, #104]	@ (80103dc <SDMMC_GetCmdResp3+0x78>)
 8010372:	fba2 2303 	umull	r2, r3, r2, r3
 8010376:	0a5b      	lsrs	r3, r3, #9
 8010378:	f241 3288 	movw	r2, #5000	@ 0x1388
 801037c:	fb02 f303 	mul.w	r3, r2, r3
 8010380:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	1e5a      	subs	r2, r3, #1
 8010386:	60fa      	str	r2, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d102      	bne.n	8010392 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801038c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010390:	e01b      	b.n	80103ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010396:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d0ef      	beq.n	8010382 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1ea      	bne.n	8010382 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103b0:	f003 0304 	and.w	r3, r3, #4
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d004      	beq.n	80103c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2204      	movs	r2, #4
 80103bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103be:	2304      	movs	r3, #4
 80103c0:	e003      	b.n	80103ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a06      	ldr	r2, [pc, #24]	@ (80103e0 <SDMMC_GetCmdResp3+0x7c>)
 80103c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3714      	adds	r7, #20
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	24000000 	.word	0x24000000
 80103dc:	10624dd3 	.word	0x10624dd3
 80103e0:	002000c5 	.word	0x002000c5

080103e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	460b      	mov	r3, r1
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103f2:	4b35      	ldr	r3, [pc, #212]	@ (80104c8 <SDMMC_GetCmdResp6+0xe4>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a35      	ldr	r2, [pc, #212]	@ (80104cc <SDMMC_GetCmdResp6+0xe8>)
 80103f8:	fba2 2303 	umull	r2, r3, r2, r3
 80103fc:	0a5b      	lsrs	r3, r3, #9
 80103fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010402:	fb02 f303 	mul.w	r3, r2, r3
 8010406:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	1e5a      	subs	r2, r3, #1
 801040c:	61fa      	str	r2, [r7, #28]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d102      	bne.n	8010418 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010412:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010416:	e052      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801041c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010424:	2b00      	cmp	r3, #0
 8010426:	d0ef      	beq.n	8010408 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1ea      	bne.n	8010408 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010436:	f003 0304 	and.w	r3, r3, #4
 801043a:	2b00      	cmp	r3, #0
 801043c:	d004      	beq.n	8010448 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2204      	movs	r2, #4
 8010442:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010444:	2304      	movs	r3, #4
 8010446:	e03a      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801044c:	f003 0301 	and.w	r3, r3, #1
 8010450:	2b00      	cmp	r3, #0
 8010452:	d004      	beq.n	801045e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2201      	movs	r2, #1
 8010458:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801045a:	2301      	movs	r3, #1
 801045c:	e02f      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f7ff fb7c 	bl	800fb5c <SDMMC_GetCommandResponse>
 8010464:	4603      	mov	r3, r0
 8010466:	461a      	mov	r2, r3
 8010468:	7afb      	ldrb	r3, [r7, #11]
 801046a:	4293      	cmp	r3, r2
 801046c:	d001      	beq.n	8010472 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801046e:	2301      	movs	r3, #1
 8010470:	e025      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	4a16      	ldr	r2, [pc, #88]	@ (80104d0 <SDMMC_GetCmdResp6+0xec>)
 8010476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010478:	2100      	movs	r1, #0
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff fb7b 	bl	800fb76 <SDMMC_GetResponse>
 8010480:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010488:	2b00      	cmp	r3, #0
 801048a:	d106      	bne.n	801049a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	0c1b      	lsrs	r3, r3, #16
 8010490:	b29a      	uxth	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010496:	2300      	movs	r3, #0
 8010498:	e011      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d002      	beq.n	80104aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80104a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80104a8:	e009      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d002      	beq.n	80104ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80104b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104b8:	e001      	b.n	80104be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80104ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3720      	adds	r7, #32
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	24000000 	.word	0x24000000
 80104cc:	10624dd3 	.word	0x10624dd3
 80104d0:	002000c5 	.word	0x002000c5

080104d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b085      	sub	sp, #20
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80104dc:	4b22      	ldr	r3, [pc, #136]	@ (8010568 <SDMMC_GetCmdResp7+0x94>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a22      	ldr	r2, [pc, #136]	@ (801056c <SDMMC_GetCmdResp7+0x98>)
 80104e2:	fba2 2303 	umull	r2, r3, r2, r3
 80104e6:	0a5b      	lsrs	r3, r3, #9
 80104e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104ec:	fb02 f303 	mul.w	r3, r2, r3
 80104f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	1e5a      	subs	r2, r3, #1
 80104f6:	60fa      	str	r2, [r7, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010500:	e02c      	b.n	801055c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010506:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801050e:	2b00      	cmp	r3, #0
 8010510:	d0ef      	beq.n	80104f2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1ea      	bne.n	80104f2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010520:	f003 0304 	and.w	r3, r3, #4
 8010524:	2b00      	cmp	r3, #0
 8010526:	d004      	beq.n	8010532 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2204      	movs	r2, #4
 801052c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801052e:	2304      	movs	r3, #4
 8010530:	e014      	b.n	801055c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d004      	beq.n	8010548 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2201      	movs	r2, #1
 8010542:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010544:	2301      	movs	r3, #1
 8010546:	e009      	b.n	801055c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801054c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2240      	movs	r2, #64	@ 0x40
 8010558:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801055a:	2300      	movs	r3, #0

}
 801055c:	4618      	mov	r0, r3
 801055e:	3714      	adds	r7, #20
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr
 8010568:	24000000 	.word	0x24000000
 801056c:	10624dd3 	.word	0x10624dd3

08010570 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010578:	4b11      	ldr	r3, [pc, #68]	@ (80105c0 <SDMMC_GetCmdError+0x50>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4a11      	ldr	r2, [pc, #68]	@ (80105c4 <SDMMC_GetCmdError+0x54>)
 801057e:	fba2 2303 	umull	r2, r3, r2, r3
 8010582:	0a5b      	lsrs	r3, r3, #9
 8010584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010588:	fb02 f303 	mul.w	r3, r2, r3
 801058c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	1e5a      	subs	r2, r3, #1
 8010592:	60fa      	str	r2, [r7, #12]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d102      	bne.n	801059e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010598:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801059c:	e009      	b.n	80105b2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d0f1      	beq.n	801058e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4a06      	ldr	r2, [pc, #24]	@ (80105c8 <SDMMC_GetCmdError+0x58>)
 80105ae:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3714      	adds	r7, #20
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	24000000 	.word	0x24000000
 80105c4:	10624dd3 	.word	0x10624dd3
 80105c8:	002000c5 	.word	0x002000c5

080105cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80105cc:	b084      	sub	sp, #16
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	f107 001c 	add.w	r0, r7, #28
 80105da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80105de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d121      	bne.n	801062a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68da      	ldr	r2, [r3, #12]
 80105f6:	4b2c      	ldr	r3, [pc, #176]	@ (80106a8 <USB_CoreInit+0xdc>)
 80105f8:	4013      	ands	r3, r2
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801060a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801060e:	2b01      	cmp	r3, #1
 8010610:	d105      	bne.n	801061e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 faaa 	bl	8010b78 <USB_CoreReset>
 8010624:	4603      	mov	r3, r0
 8010626:	73fb      	strb	r3, [r7, #15]
 8010628:	e01b      	b.n	8010662 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 fa9e 	bl	8010b78 <USB_CoreReset>
 801063c:	4603      	mov	r3, r0
 801063e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010640:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010644:	2b00      	cmp	r3, #0
 8010646:	d106      	bne.n	8010656 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801064c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	639a      	str	r2, [r3, #56]	@ 0x38
 8010654:	e005      	b.n	8010662 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801065a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010662:	7fbb      	ldrb	r3, [r7, #30]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d116      	bne.n	8010696 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801066c:	b29a      	uxth	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010676:	4b0d      	ldr	r3, [pc, #52]	@ (80106ac <USB_CoreInit+0xe0>)
 8010678:	4313      	orrs	r3, r2
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	689b      	ldr	r3, [r3, #8]
 8010682:	f043 0206 	orr.w	r2, r3, #6
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	f043 0220 	orr.w	r2, r3, #32
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010696:	7bfb      	ldrb	r3, [r7, #15]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80106a2:	b004      	add	sp, #16
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	ffbdffbf 	.word	0xffbdffbf
 80106ac:	03ee0000 	.word	0x03ee0000

080106b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	f023 0201 	bic.w	r2, r3, #1
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b084      	sub	sp, #16
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	460b      	mov	r3, r1
 80106dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80106de:	2300      	movs	r3, #0
 80106e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80106ee:	78fb      	ldrb	r3, [r7, #3]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d115      	bne.n	8010720 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010700:	200a      	movs	r0, #10
 8010702:	f7f3 fa8b 	bl	8003c1c <HAL_Delay>
      ms += 10U;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	330a      	adds	r3, #10
 801070a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fa25 	bl	8010b5c <USB_GetMode>
 8010712:	4603      	mov	r3, r0
 8010714:	2b01      	cmp	r3, #1
 8010716:	d01e      	beq.n	8010756 <USB_SetCurrentMode+0x84>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2bc7      	cmp	r3, #199	@ 0xc7
 801071c:	d9f0      	bls.n	8010700 <USB_SetCurrentMode+0x2e>
 801071e:	e01a      	b.n	8010756 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010720:	78fb      	ldrb	r3, [r7, #3]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d115      	bne.n	8010752 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010732:	200a      	movs	r0, #10
 8010734:	f7f3 fa72 	bl	8003c1c <HAL_Delay>
      ms += 10U;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	330a      	adds	r3, #10
 801073c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fa0c 	bl	8010b5c <USB_GetMode>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d005      	beq.n	8010756 <USB_SetCurrentMode+0x84>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2bc7      	cmp	r3, #199	@ 0xc7
 801074e:	d9f0      	bls.n	8010732 <USB_SetCurrentMode+0x60>
 8010750:	e001      	b.n	8010756 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	e005      	b.n	8010762 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2bc8      	cmp	r3, #200	@ 0xc8
 801075a:	d101      	bne.n	8010760 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801075c:	2301      	movs	r3, #1
 801075e:	e000      	b.n	8010762 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
	...

0801076c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801076c:	b084      	sub	sp, #16
 801076e:	b580      	push	{r7, lr}
 8010770:	b086      	sub	sp, #24
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801077a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801077e:	2300      	movs	r3, #0
 8010780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010786:	2300      	movs	r3, #0
 8010788:	613b      	str	r3, [r7, #16]
 801078a:	e009      	b.n	80107a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	3340      	adds	r3, #64	@ 0x40
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4413      	add	r3, r2
 8010796:	2200      	movs	r2, #0
 8010798:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	3301      	adds	r3, #1
 801079e:	613b      	str	r3, [r7, #16]
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	2b0e      	cmp	r3, #14
 80107a4:	d9f2      	bls.n	801078c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80107a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d11c      	bne.n	80107e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107bc:	f043 0302 	orr.w	r3, r3, #2
 80107c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e005      	b.n	80107f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80107fa:	461a      	mov	r2, r3
 80107fc:	2300      	movs	r3, #0
 80107fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010800:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010804:	2b01      	cmp	r3, #1
 8010806:	d10d      	bne.n	8010824 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801080c:	2b00      	cmp	r3, #0
 801080e:	d104      	bne.n	801081a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010810:	2100      	movs	r1, #0
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f968 	bl	8010ae8 <USB_SetDevSpeed>
 8010818:	e008      	b.n	801082c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801081a:	2101      	movs	r1, #1
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 f963 	bl	8010ae8 <USB_SetDevSpeed>
 8010822:	e003      	b.n	801082c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010824:	2103      	movs	r1, #3
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f000 f95e 	bl	8010ae8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801082c:	2110      	movs	r1, #16
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f8fa 	bl	8010a28 <USB_FlushTxFifo>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801083a:	2301      	movs	r3, #1
 801083c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f000 f924 	bl	8010a8c <USB_FlushRxFifo>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d001      	beq.n	801084e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801084a:	2301      	movs	r3, #1
 801084c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010854:	461a      	mov	r2, r3
 8010856:	2300      	movs	r3, #0
 8010858:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010860:	461a      	mov	r2, r3
 8010862:	2300      	movs	r3, #0
 8010864:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801086c:	461a      	mov	r2, r3
 801086e:	2300      	movs	r3, #0
 8010870:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010872:	2300      	movs	r3, #0
 8010874:	613b      	str	r3, [r7, #16]
 8010876:	e043      	b.n	8010900 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	015a      	lsls	r2, r3, #5
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	4413      	add	r3, r2
 8010880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801088a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801088e:	d118      	bne.n	80108c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10a      	bne.n	80108ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	015a      	lsls	r2, r3, #5
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	4413      	add	r3, r2
 801089e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108a2:	461a      	mov	r2, r3
 80108a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80108a8:	6013      	str	r3, [r2, #0]
 80108aa:	e013      	b.n	80108d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	015a      	lsls	r2, r3, #5
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4413      	add	r3, r2
 80108b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108b8:	461a      	mov	r2, r3
 80108ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80108be:	6013      	str	r3, [r2, #0]
 80108c0:	e008      	b.n	80108d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	015a      	lsls	r2, r3, #5
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	4413      	add	r3, r2
 80108ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108ce:	461a      	mov	r2, r3
 80108d0:	2300      	movs	r3, #0
 80108d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	015a      	lsls	r2, r3, #5
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	4413      	add	r3, r2
 80108dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108e0:	461a      	mov	r2, r3
 80108e2:	2300      	movs	r3, #0
 80108e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	015a      	lsls	r2, r3, #5
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	4413      	add	r3, r2
 80108ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108f2:	461a      	mov	r2, r3
 80108f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80108f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	3301      	adds	r3, #1
 80108fe:	613b      	str	r3, [r7, #16]
 8010900:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010904:	461a      	mov	r2, r3
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	4293      	cmp	r3, r2
 801090a:	d3b5      	bcc.n	8010878 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801090c:	2300      	movs	r3, #0
 801090e:	613b      	str	r3, [r7, #16]
 8010910:	e043      	b.n	801099a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	015a      	lsls	r2, r3, #5
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	4413      	add	r3, r2
 801091a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010928:	d118      	bne.n	801095c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10a      	bne.n	8010946 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	015a      	lsls	r2, r3, #5
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	4413      	add	r3, r2
 8010938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801093c:	461a      	mov	r2, r3
 801093e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	e013      	b.n	801096e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	015a      	lsls	r2, r3, #5
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	4413      	add	r3, r2
 801094e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010952:	461a      	mov	r2, r3
 8010954:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	e008      	b.n	801096e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	015a      	lsls	r2, r3, #5
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	4413      	add	r3, r2
 8010964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010968:	461a      	mov	r2, r3
 801096a:	2300      	movs	r3, #0
 801096c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	015a      	lsls	r2, r3, #5
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	4413      	add	r3, r2
 8010976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801097a:	461a      	mov	r2, r3
 801097c:	2300      	movs	r3, #0
 801097e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	015a      	lsls	r2, r3, #5
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	4413      	add	r3, r2
 8010988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801098c:	461a      	mov	r2, r3
 801098e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	3301      	adds	r3, #1
 8010998:	613b      	str	r3, [r7, #16]
 801099a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801099e:	461a      	mov	r2, r3
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d3b5      	bcc.n	8010912 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109ac:	691b      	ldr	r3, [r3, #16]
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80109b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80109b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80109c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80109c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d105      	bne.n	80109dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	f043 0210 	orr.w	r2, r3, #16
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	699a      	ldr	r2, [r3, #24]
 80109e0:	4b0f      	ldr	r3, [pc, #60]	@ (8010a20 <USB_DevInit+0x2b4>)
 80109e2:	4313      	orrs	r3, r2
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80109e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d005      	beq.n	80109fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	f043 0208 	orr.w	r2, r3, #8
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80109fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d105      	bne.n	8010a10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	699a      	ldr	r2, [r3, #24]
 8010a08:	4b06      	ldr	r3, [pc, #24]	@ (8010a24 <USB_DevInit+0x2b8>)
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3718      	adds	r7, #24
 8010a16:	46bd      	mov	sp, r7
 8010a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a1c:	b004      	add	sp, #16
 8010a1e:	4770      	bx	lr
 8010a20:	803c3800 	.word	0x803c3800
 8010a24:	40000004 	.word	0x40000004

08010a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010a32:	2300      	movs	r3, #0
 8010a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a42:	d901      	bls.n	8010a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010a44:	2303      	movs	r3, #3
 8010a46:	e01b      	b.n	8010a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	daf2      	bge.n	8010a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010a50:	2300      	movs	r3, #0
 8010a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	019b      	lsls	r3, r3, #6
 8010a58:	f043 0220 	orr.w	r2, r3, #32
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	3301      	adds	r3, #1
 8010a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a6c:	d901      	bls.n	8010a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010a6e:	2303      	movs	r3, #3
 8010a70:	e006      	b.n	8010a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	691b      	ldr	r3, [r3, #16]
 8010a76:	f003 0320 	and.w	r3, r3, #32
 8010a7a:	2b20      	cmp	r3, #32
 8010a7c:	d0f0      	beq.n	8010a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3714      	adds	r7, #20
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a94:	2300      	movs	r3, #0
 8010a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010aa4:	d901      	bls.n	8010aaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	e018      	b.n	8010adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	daf2      	bge.n	8010a98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2210      	movs	r2, #16
 8010aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ac8:	d901      	bls.n	8010ace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010aca:	2303      	movs	r3, #3
 8010acc:	e006      	b.n	8010adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	f003 0310 	and.w	r3, r3, #16
 8010ad6:	2b10      	cmp	r3, #16
 8010ad8:	d0f0      	beq.n	8010abc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	460b      	mov	r3, r1
 8010af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	68f9      	ldr	r1, [r7, #12]
 8010b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr

08010b1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b1a:	b480      	push	{r7}
 8010b1c:	b085      	sub	sp, #20
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010b34:	f023 0303 	bic.w	r3, r3, #3
 8010b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b48:	f043 0302 	orr.w	r3, r3, #2
 8010b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3714      	adds	r7, #20
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	695b      	ldr	r3, [r3, #20]
 8010b68:	f003 0301 	and.w	r3, r3, #1
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010b80:	2300      	movs	r3, #0
 8010b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	3301      	adds	r3, #1
 8010b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b90:	d901      	bls.n	8010b96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010b92:	2303      	movs	r3, #3
 8010b94:	e01b      	b.n	8010bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	691b      	ldr	r3, [r3, #16]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	daf2      	bge.n	8010b84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	f043 0201 	orr.w	r2, r3, #1
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010bba:	d901      	bls.n	8010bc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010bbc:	2303      	movs	r3, #3
 8010bbe:	e006      	b.n	8010bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	f003 0301 	and.w	r3, r3, #1
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d0f0      	beq.n	8010bae <USB_CoreReset+0x36>

  return HAL_OK;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3714      	adds	r7, #20
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
	...

08010bdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010be0:	4904      	ldr	r1, [pc, #16]	@ (8010bf4 <MX_FATFS_Init+0x18>)
 8010be2:	4805      	ldr	r0, [pc, #20]	@ (8010bf8 <MX_FATFS_Init+0x1c>)
 8010be4:	f00c fb2a 	bl	801d23c <FATFS_LinkDriver>
 8010be8:	4603      	mov	r3, r0
 8010bea:	461a      	mov	r2, r3
 8010bec:	4b03      	ldr	r3, [pc, #12]	@ (8010bfc <MX_FATFS_Init+0x20>)
 8010bee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010bf0:	bf00      	nop
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	24008470 	.word	0x24008470
 8010bf8:	0801ff4c 	.word	0x0801ff4c
 8010bfc:	2400846c 	.word	0x2400846c

08010c00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010c00:	b480      	push	{r7}
 8010c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010c04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c16:	2300      	movs	r3, #0
 8010c18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c1a:	f000 f879 	bl	8010d10 <BSP_SD_IsDetected>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d001      	beq.n	8010c28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010c24:	2302      	movs	r3, #2
 8010c26:	e012      	b.n	8010c4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010c28:	480b      	ldr	r0, [pc, #44]	@ (8010c58 <BSP_SD_Init+0x48>)
 8010c2a:	f7fa fc27 	bl	800b47c <HAL_SD_Init>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d109      	bne.n	8010c4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010c38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010c3c:	4806      	ldr	r0, [pc, #24]	@ (8010c58 <BSP_SD_Init+0x48>)
 8010c3e:	f7fb fae3 	bl	800c208 <HAL_SD_ConfigWideBusOperation>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	240002e0 	.word	0x240002e0

08010c5c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b088      	sub	sp, #32
 8010c60:	af02      	add	r7, sp, #8
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
 8010c68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	68ba      	ldr	r2, [r7, #8]
 8010c76:	68f9      	ldr	r1, [r7, #12]
 8010c78:	4806      	ldr	r0, [pc, #24]	@ (8010c94 <BSP_SD_ReadBlocks+0x38>)
 8010c7a:	f7fa fd1f 	bl	800b6bc <HAL_SD_ReadBlocks>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d001      	beq.n	8010c88 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010c84:	2301      	movs	r3, #1
 8010c86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3718      	adds	r7, #24
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	240002e0 	.word	0x240002e0

08010c98 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b088      	sub	sp, #32
 8010c9c:	af02      	add	r7, sp, #8
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
 8010ca4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	9300      	str	r3, [sp, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	68ba      	ldr	r2, [r7, #8]
 8010cb2:	68f9      	ldr	r1, [r7, #12]
 8010cb4:	4806      	ldr	r0, [pc, #24]	@ (8010cd0 <BSP_SD_WriteBlocks+0x38>)
 8010cb6:	f7fa fe8b 	bl	800b9d0 <HAL_SD_WriteBlocks>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d001      	beq.n	8010cc4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	240002e0 	.word	0x240002e0

08010cd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010cd8:	4805      	ldr	r0, [pc, #20]	@ (8010cf0 <BSP_SD_GetCardState+0x1c>)
 8010cda:	f7fb fba7 	bl	800c42c <HAL_SD_GetCardState>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b04      	cmp	r3, #4
 8010ce2:	bf14      	ite	ne
 8010ce4:	2301      	movne	r3, #1
 8010ce6:	2300      	moveq	r3, #0
 8010ce8:	b2db      	uxtb	r3, r3
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	240002e0 	.word	0x240002e0

08010cf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010cfc:	6879      	ldr	r1, [r7, #4]
 8010cfe:	4803      	ldr	r0, [pc, #12]	@ (8010d0c <BSP_SD_GetCardInfo+0x18>)
 8010d00:	f7fb fa56 	bl	800c1b0 <HAL_SD_GetCardInfo>
}
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	240002e0 	.word	0x240002e0

08010d10 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010d16:	2301      	movs	r3, #1
 8010d18:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010d1a:	79fb      	ldrb	r3, [r7, #7]
 8010d1c:	b2db      	uxtb	r3, r3
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	370c      	adds	r7, #12
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr
	...

08010d2c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	4603      	mov	r3, r0
 8010d34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010d36:	4b0b      	ldr	r3, [pc, #44]	@ (8010d64 <SD_CheckStatus+0x38>)
 8010d38:	2201      	movs	r2, #1
 8010d3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010d3c:	f7ff ffca 	bl	8010cd4 <BSP_SD_GetCardState>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d107      	bne.n	8010d56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010d46:	4b07      	ldr	r3, [pc, #28]	@ (8010d64 <SD_CheckStatus+0x38>)
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	f023 0301 	bic.w	r3, r3, #1
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	4b04      	ldr	r3, [pc, #16]	@ (8010d64 <SD_CheckStatus+0x38>)
 8010d54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010d56:	4b03      	ldr	r3, [pc, #12]	@ (8010d64 <SD_CheckStatus+0x38>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	b2db      	uxtb	r3, r3
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	2400000d 	.word	0x2400000d

08010d68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	4603      	mov	r3, r0
 8010d70:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010d72:	4b0b      	ldr	r3, [pc, #44]	@ (8010da0 <SD_initialize+0x38>)
 8010d74:	2201      	movs	r2, #1
 8010d76:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010d78:	f7ff ff4a 	bl	8010c10 <BSP_SD_Init>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d107      	bne.n	8010d92 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010d82:	79fb      	ldrb	r3, [r7, #7]
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7ff ffd1 	bl	8010d2c <SD_CheckStatus>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	4b04      	ldr	r3, [pc, #16]	@ (8010da0 <SD_initialize+0x38>)
 8010d90:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010d92:	4b03      	ldr	r3, [pc, #12]	@ (8010da0 <SD_initialize+0x38>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	b2db      	uxtb	r3, r3
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	2400000d 	.word	0x2400000d

08010da4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010dae:	79fb      	ldrb	r3, [r7, #7]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff ffbb 	bl	8010d2c <SD_CheckStatus>
 8010db6:	4603      	mov	r3, r0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60b9      	str	r1, [r7, #8]
 8010dc8:	607a      	str	r2, [r7, #4]
 8010dca:	603b      	str	r3, [r7, #0]
 8010dcc:	4603      	mov	r3, r0
 8010dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	6879      	ldr	r1, [r7, #4]
 8010ddc:	68b8      	ldr	r0, [r7, #8]
 8010dde:	f7ff ff3d 	bl	8010c5c <BSP_SD_ReadBlocks>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d107      	bne.n	8010df8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010de8:	bf00      	nop
 8010dea:	f7ff ff73 	bl	8010cd4 <BSP_SD_GetCardState>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1fa      	bne.n	8010dea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010df4:	2300      	movs	r3, #0
 8010df6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3718      	adds	r7, #24
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b086      	sub	sp, #24
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	603b      	str	r3, [r7, #0]
 8010e0e:	4603      	mov	r3, r0
 8010e10:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e12:	2301      	movs	r3, #1
 8010e14:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010e16:	f04f 33ff 	mov.w	r3, #4294967295
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	6879      	ldr	r1, [r7, #4]
 8010e1e:	68b8      	ldr	r0, [r7, #8]
 8010e20:	f7ff ff3a 	bl	8010c98 <BSP_SD_WriteBlocks>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d107      	bne.n	8010e3a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010e2a:	bf00      	nop
 8010e2c:	f7ff ff52 	bl	8010cd4 <BSP_SD_GetCardState>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1fa      	bne.n	8010e2c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3718      	adds	r7, #24
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b08c      	sub	sp, #48	@ 0x30
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	603a      	str	r2, [r7, #0]
 8010e4e:	71fb      	strb	r3, [r7, #7]
 8010e50:	460b      	mov	r3, r1
 8010e52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e54:	2301      	movs	r3, #1
 8010e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010e5a:	4b25      	ldr	r3, [pc, #148]	@ (8010ef0 <SD_ioctl+0xac>)
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	f003 0301 	and.w	r3, r3, #1
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <SD_ioctl+0x28>
 8010e68:	2303      	movs	r3, #3
 8010e6a:	e03c      	b.n	8010ee6 <SD_ioctl+0xa2>

  switch (cmd)
 8010e6c:	79bb      	ldrb	r3, [r7, #6]
 8010e6e:	2b03      	cmp	r3, #3
 8010e70:	d834      	bhi.n	8010edc <SD_ioctl+0x98>
 8010e72:	a201      	add	r2, pc, #4	@ (adr r2, 8010e78 <SD_ioctl+0x34>)
 8010e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e78:	08010e89 	.word	0x08010e89
 8010e7c:	08010e91 	.word	0x08010e91
 8010e80:	08010ea9 	.word	0x08010ea9
 8010e84:	08010ec3 	.word	0x08010ec3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010e8e:	e028      	b.n	8010ee2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e90:	f107 0308 	add.w	r3, r7, #8
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7ff ff2d 	bl	8010cf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010e9a:	6a3a      	ldr	r2, [r7, #32]
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ea6:	e01c      	b.n	8010ee2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ea8:	f107 0308 	add.w	r3, r7, #8
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff ff21 	bl	8010cf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ec0:	e00f      	b.n	8010ee2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ec2:	f107 0308 	add.w	r3, r7, #8
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff ff14 	bl	8010cf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ece:	0a5a      	lsrs	r2, r3, #9
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010eda:	e002      	b.n	8010ee2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010edc:	2304      	movs	r3, #4
 8010ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3730      	adds	r7, #48	@ 0x30
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	2400000d 	.word	0x2400000d

08010ef4 <arm_abs_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_abs_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b08b      	sub	sp, #44	@ 0x2c
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8010f04:	e01e      	b.n	8010f44 <arm_abs_q15+0x50>
  {
    /* C = |A| */

    /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination buffer. */
    in = *pSrc++;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	1c9a      	adds	r2, r3, #2
 8010f0a:	60fa      	str	r2, [r7, #12]
 8010f0c:	881b      	ldrh	r3, [r3, #0]
 8010f0e:	847b      	strh	r3, [r7, #34]	@ 0x22
#if defined (ARM_MATH_DSP)
    *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 8010f10:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	dc0c      	bgt.n	8010f32 <arm_abs_q15+0x3e>
 8010f18:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	61fa      	str	r2, [r7, #28]
 8010f20:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	69ba      	ldr	r2, [r7, #24]
 8010f26:	fad3 f312 	qsub16	r3, r3, r2
 8010f2a:	617b      	str	r3, [r7, #20]
  return(result);
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	b21a      	sxth	r2, r3
 8010f30:	e001      	b.n	8010f36 <arm_abs_q15+0x42>
 8010f32:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	1c99      	adds	r1, r3, #2
 8010f3a:	60b9      	str	r1, [r7, #8]
 8010f3c:	801a      	strh	r2, [r3, #0]
#else
    *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
#endif

    /* Decrement loop counter */
    blkCnt--;
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f40:	3b01      	subs	r3, #1
 8010f42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d1dd      	bne.n	8010f06 <arm_abs_q15+0x12>
  }

}
 8010f4a:	bf00      	nop
 8010f4c:	bf00      	nop
 8010f4e:	372c      	adds	r7, #44	@ 0x2c
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <arm_dot_prod_q15>:
ARM_DSP_ATTRIBUTE void arm_dot_prod_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        uint32_t blockSize,
        q63_t * result)
{
 8010f58:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8010f5c:	b089      	sub	sp, #36	@ 0x24
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	60f8      	str	r0, [r7, #12]
 8010f62:	60b9      	str	r1, [r7, #8]
 8010f64:	607a      	str	r2, [r7, #4]
 8010f66:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        q63_t sum = 0;                                 /* Temporary return variable */
 8010f68:	f04f 0200 	mov.w	r2, #0
 8010f6c:	f04f 0300 	mov.w	r3, #0
 8010f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8010f78:	e01a      	b.n	8010fb0 <arm_dot_prod_q15+0x58>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	1c9a      	adds	r2, r3, #2
 8010f7e:	60fa      	str	r2, [r7, #12]
 8010f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f84:	4619      	mov	r1, r3
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	1c9a      	adds	r2, r3, #2
 8010f8a:	60ba      	str	r2, [r7, #8]
 8010f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f90:	fb01 f303 	mul.w	r3, r1, r3
 8010f94:	17da      	asrs	r2, r3, #31
 8010f96:	461c      	mov	r4, r3
 8010f98:	4615      	mov	r5, r2
 8010f9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f9e:	eb12 0804 	adds.w	r8, r2, r4
 8010fa2:	eb43 0905 	adc.w	r9, r3, r5
 8010fa6:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1e1      	bne.n	8010f7a <arm_dot_prod_q15+0x22>
  }

  /* Store result in destination buffer in 34.30 format */
  *result = sum;
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010fbc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8010fc0:	bf00      	nop
 8010fc2:	3724      	adds	r7, #36	@ 0x24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8010fca:	4770      	bx	lr

08010fcc <arm_mult_q15>:
ARM_DSP_ATTRIBUTE void arm_mult_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        q15_t * pDst,
        uint32_t blockSize)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b089      	sub	sp, #36	@ 0x24
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
 8010fd8:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8010fde:	e01b      	b.n	8011018 <arm_mult_q15+0x4c>
  {
    /* C = A * B */

    /* Multiply inputs and store result in destination buffer. */
    *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	1c9a      	adds	r2, r3, #2
 8010fe4:	60fa      	str	r2, [r7, #12]
 8010fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fea:	4619      	mov	r1, r3
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	1c9a      	adds	r2, r3, #2
 8010ff0:	60ba      	str	r2, [r7, #8]
 8010ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ff6:	fb01 f303 	mul.w	r3, r1, r3
 8010ffa:	13db      	asrs	r3, r3, #15
 8010ffc:	61bb      	str	r3, [r7, #24]
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	f303 030f 	ssat	r3, #16, r3
 8011004:	617b      	str	r3, [r7, #20]
 8011006:	6979      	ldr	r1, [r7, #20]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	1c9a      	adds	r2, r3, #2
 801100c:	607a      	str	r2, [r7, #4]
 801100e:	b20a      	sxth	r2, r1
 8011010:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	3b01      	subs	r3, #1
 8011016:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d1e0      	bne.n	8010fe0 <arm_mult_q15+0x14>
  }

}
 801101e:	bf00      	nop
 8011020:	bf00      	nop
 8011022:	3724      	adds	r7, #36	@ 0x24
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <arm_offset_q31>:
ARM_DSP_ATTRIBUTE void arm_offset_q31(
  const q31_t * pSrc,
        q31_t offset,
        q31_t * pDst,
        uint32_t blockSize)
{
 801102c:	b480      	push	{r7}
 801102e:	b089      	sub	sp, #36	@ 0x24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
 8011038:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801103e:	e013      	b.n	8011068 <arm_offset_q31+0x3c>
  {
    /* C = A + offset */

    /* Add offset and store result in destination buffer. */
#if defined (ARM_MATH_DSP)
    *pDst++ = __QADD(*pSrc++, offset);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	1d1a      	adds	r2, r3, #4
 8011044:	60fa      	str	r2, [r7, #12]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	1d19      	adds	r1, r3, #4
 801104c:	6079      	str	r1, [r7, #4]
 801104e:	61ba      	str	r2, [r7, #24]
 8011050:	68ba      	ldr	r2, [r7, #8]
 8011052:	617a      	str	r2, [r7, #20]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011054:	69ba      	ldr	r2, [r7, #24]
 8011056:	6979      	ldr	r1, [r7, #20]
 8011058:	fa81 f282 	qadd	r2, r2, r1
 801105c:	613a      	str	r2, [r7, #16]
  return(result);
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	601a      	str	r2, [r3, #0]
#else
    *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
#endif

    /* Decrement loop counter */
    blkCnt--;
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	3b01      	subs	r3, #1
 8011066:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1e8      	bne.n	8011040 <arm_offset_q31+0x14>
  }

}
 801106e:	bf00      	nop
 8011070:	bf00      	nop
 8011072:	3724      	adds	r7, #36	@ 0x24
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <arm_scale_q15>:
  const q15_t *pSrc,
        q15_t scaleFract,
        int8_t shift,
        q15_t *pDst,
        uint32_t blockSize)
{
 801107c:	b480      	push	{r7}
 801107e:	b089      	sub	sp, #36	@ 0x24
 8011080:	af00      	add	r7, sp, #0
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	607b      	str	r3, [r7, #4]
 8011086:	460b      	mov	r3, r1
 8011088:	817b      	strh	r3, [r7, #10]
 801108a:	4613      	mov	r3, r2
 801108c:	727b      	strb	r3, [r7, #9]
        uint32_t blkCnt;                               /* Loop counter */
        int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
 801108e:	7a7b      	ldrb	r3, [r7, #9]
 8011090:	f1c3 030f 	rsb	r3, r3, #15
 8011094:	b2db      	uxtb	r3, r3
 8011096:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801109a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801109c:	e01b      	b.n	80110d6 <arm_scale_q15+0x5a>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	1c9a      	adds	r2, r3, #2
 80110a2:	60fa      	str	r2, [r7, #12]
 80110a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110a8:	461a      	mov	r2, r3
 80110aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80110ae:	fb03 f202 	mul.w	r2, r3, r2
 80110b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80110b6:	fa42 f303 	asr.w	r3, r2, r3
 80110ba:	617b      	str	r3, [r7, #20]
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	f303 030f 	ssat	r3, #16, r3
 80110c2:	613b      	str	r3, [r7, #16]
 80110c4:	6939      	ldr	r1, [r7, #16]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	1c9a      	adds	r2, r3, #2
 80110ca:	607a      	str	r2, [r7, #4]
 80110cc:	b20a      	sxth	r2, r1
 80110ce:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	3b01      	subs	r3, #1
 80110d4:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1e0      	bne.n	801109e <arm_scale_q15+0x22>
  }

}
 80110dc:	bf00      	nop
 80110de:	bf00      	nop
 80110e0:	3724      	adds	r7, #36	@ 0x24
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <arm_scale_q31>:
  const q31_t *pSrc,
        q31_t scaleFract,
        int8_t shift,
        q31_t *pDst,
        uint32_t blockSize)
{
 80110ea:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80110ee:	b08f      	sub	sp, #60	@ 0x3c
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6278      	str	r0, [r7, #36]	@ 0x24
 80110f4:	6239      	str	r1, [r7, #32]
 80110f6:	61bb      	str	r3, [r7, #24]
 80110f8:	4613      	mov	r3, r2
 80110fa:	77fb      	strb	r3, [r7, #31]
        uint32_t blkCnt;                               /* Loop counter */
        q31_t in, out;                                 /* Temporary variables */
        int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
 80110fc:	7ffb      	ldrb	r3, [r7, #31]
 80110fe:	3301      	adds	r3, #1
 8011100:	b2db      	uxtb	r3, r3
 8011102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        int8_t sign = (kShift & 0x80);
 8011106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801110a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801110e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011114:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  if (sign == 0U)
 8011116:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 801111a:	2b00      	cmp	r3, #0
 801111c:	d17b      	bne.n	8011216 <arm_scale_q31+0x12c>
  {
    while (blkCnt > 0U)
 801111e:	e044      	b.n	80111aa <arm_scale_q31+0xc0>
    {
      /* C = A * scale */

      /* Scale input and store result in destination buffer. */
      in = *pSrc++;
 8011120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011122:	1d1a      	adds	r2, r3, #4
 8011124:	627a      	str	r2, [r7, #36]	@ 0x24
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 801112a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801112c:	17da      	asrs	r2, r3, #31
 801112e:	613b      	str	r3, [r7, #16]
 8011130:	617a      	str	r2, [r7, #20]
 8011132:	6a3b      	ldr	r3, [r7, #32]
 8011134:	17da      	asrs	r2, r3, #31
 8011136:	60bb      	str	r3, [r7, #8]
 8011138:	60fa      	str	r2, [r7, #12]
 801113a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801113e:	462b      	mov	r3, r5
 8011140:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8011144:	4652      	mov	r2, sl
 8011146:	fb02 f203 	mul.w	r2, r2, r3
 801114a:	465b      	mov	r3, fp
 801114c:	4621      	mov	r1, r4
 801114e:	fb01 f303 	mul.w	r3, r1, r3
 8011152:	4413      	add	r3, r2
 8011154:	4622      	mov	r2, r4
 8011156:	4651      	mov	r1, sl
 8011158:	fba2 8901 	umull	r8, r9, r2, r1
 801115c:	444b      	add	r3, r9
 801115e:	4699      	mov	r9, r3
 8011160:	f04f 0200 	mov.w	r2, #0
 8011164:	f04f 0300 	mov.w	r3, #0
 8011168:	464a      	mov	r2, r9
 801116a:	ea4f 73e9 	mov.w	r3, r9, asr #31
 801116e:	4613      	mov	r3, r2
 8011170:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in << kShift;
 8011172:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011178:	fa02 f303 	lsl.w	r3, r2, r3
 801117c:	633b      	str	r3, [r7, #48]	@ 0x30
      if (in != (out >> kShift))
 801117e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011184:	fa42 f303 	asr.w	r3, r2, r3
 8011188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801118a:	429a      	cmp	r2, r3
 801118c:	d005      	beq.n	801119a <arm_scale_q31+0xb0>
          out = 0x7FFFFFFF ^ (in >> 31);
 801118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011190:	17da      	asrs	r2, r3, #31
 8011192:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011196:	4053      	eors	r3, r2
 8011198:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	1d1a      	adds	r2, r3, #4
 801119e:	61ba      	str	r2, [r7, #24]
 80111a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111a2:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80111a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111a6:	3b01      	subs	r3, #1
 80111a8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 80111aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1b7      	bne.n	8011120 <arm_scale_q31+0x36>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 80111b0:	e034      	b.n	801121c <arm_scale_q31+0x132>
      in = *pSrc++;
 80111b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b4:	1d1a      	adds	r2, r3, #4
 80111b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 80111bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111be:	17da      	asrs	r2, r3, #31
 80111c0:	469a      	mov	sl, r3
 80111c2:	4693      	mov	fp, r2
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	17da      	asrs	r2, r3, #31
 80111c8:	603b      	str	r3, [r7, #0]
 80111ca:	607a      	str	r2, [r7, #4]
 80111cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80111d0:	4603      	mov	r3, r0
 80111d2:	fb03 f20b 	mul.w	r2, r3, fp
 80111d6:	460b      	mov	r3, r1
 80111d8:	fb0a f303 	mul.w	r3, sl, r3
 80111dc:	4413      	add	r3, r2
 80111de:	4602      	mov	r2, r0
 80111e0:	fbaa 4502 	umull	r4, r5, sl, r2
 80111e4:	442b      	add	r3, r5
 80111e6:	461d      	mov	r5, r3
 80111e8:	f04f 0200 	mov.w	r2, #0
 80111ec:	f04f 0300 	mov.w	r3, #0
 80111f0:	002a      	movs	r2, r5
 80111f2:	17eb      	asrs	r3, r5, #31
 80111f4:	4613      	mov	r3, r2
 80111f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in >> -kShift;
 80111f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80111fc:	425b      	negs	r3, r3
 80111fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011200:	fa42 f303 	asr.w	r3, r2, r3
 8011204:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	1d1a      	adds	r2, r3, #4
 801120a:	61ba      	str	r2, [r7, #24]
 801120c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801120e:	601a      	str	r2, [r3, #0]
      blkCnt--;
 8011210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011212:	3b01      	subs	r3, #1
 8011214:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 8011216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011218:	2b00      	cmp	r3, #0
 801121a:	d1ca      	bne.n	80111b2 <arm_scale_q31+0xc8>
}
 801121c:	bf00      	nop
 801121e:	373c      	adds	r7, #60	@ 0x3c
 8011220:	46bd      	mov	sp, r7
 8011222:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011226:	4770      	bx	lr

08011228 <arm_shift_q15>:
ARM_DSP_ATTRIBUTE void arm_shift_q15(
  const q15_t * pSrc,
        int8_t shiftBits,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011228:	b480      	push	{r7}
 801122a:	b089      	sub	sp, #36	@ 0x24
 801122c:	af00      	add	r7, sp, #0
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	607a      	str	r2, [r7, #4]
 8011232:	603b      	str	r3, [r7, #0]
 8011234:	460b      	mov	r3, r1
 8011236:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 8011238:	7afb      	ldrb	r3, [r7, #11]
 801123a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801123e:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8011244:	7efb      	ldrb	r3, [r7, #27]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d12f      	bne.n	80112aa <arm_shift_q15+0x82>
  {
    while (blkCnt > 0U)
 801124a:	e017      	b.n	801127c <arm_shift_q15+0x54>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	1c9a      	adds	r2, r3, #2
 8011250:	60fa      	str	r2, [r7, #12]
 8011252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011256:	461a      	mov	r2, r3
 8011258:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801125c:	fa02 f303 	lsl.w	r3, r2, r3
 8011260:	617b      	str	r3, [r7, #20]
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	f303 030f 	ssat	r3, #16, r3
 8011268:	613b      	str	r3, [r7, #16]
 801126a:	6939      	ldr	r1, [r7, #16]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	1c9a      	adds	r2, r3, #2
 8011270:	607a      	str	r2, [r7, #4]
 8011272:	b20a      	sxth	r2, r1
 8011274:	801a      	strh	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	3b01      	subs	r3, #1
 801127a:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d1e4      	bne.n	801124c <arm_shift_q15+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8011282:	e015      	b.n	80112b0 <arm_shift_q15+0x88>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	1c9a      	adds	r2, r3, #2
 8011288:	60fa      	str	r2, [r7, #12]
 801128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801128e:	461a      	mov	r2, r3
 8011290:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011294:	425b      	negs	r3, r3
 8011296:	fa42 f103 	asr.w	r1, r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	1c9a      	adds	r2, r3, #2
 801129e:	607a      	str	r2, [r7, #4]
 80112a0:	b20a      	sxth	r2, r1
 80112a2:	801a      	strh	r2, [r3, #0]
      blkCnt--;
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	3b01      	subs	r3, #1
 80112a8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d1e9      	bne.n	8011284 <arm_shift_q15+0x5c>
}
 80112b0:	bf00      	nop
 80112b2:	3724      	adds	r7, #36	@ 0x24
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <arm_shift_q31>:
ARM_DSP_ATTRIBUTE void arm_shift_q31(
  const q31_t * pSrc,
        int8_t shiftBits,
        q31_t * pDst,
        uint32_t blockSize)
{
 80112bc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80112c0:	b088      	sub	sp, #32
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	60f8      	str	r0, [r7, #12]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	603b      	str	r3, [r7, #0]
 80112ca:	460b      	mov	r3, r1
 80112cc:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 80112ce:	7afb      	ldrb	r3, [r7, #11]
 80112d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80112d4:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 80112da:	7efb      	ldrb	r3, [r7, #27]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d14d      	bne.n	801137c <arm_shift_q31+0xc0>
  {
    while (blkCnt > 0U)
 80112e0:	e038      	b.n	8011354 <arm_shift_q31+0x98>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	1d1a      	adds	r2, r3, #4
 80112e6:	60fa      	str	r2, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	17da      	asrs	r2, r3, #31
 80112ec:	4698      	mov	r8, r3
 80112ee:	4691      	mov	r9, r2
 80112f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80112f4:	f1a3 0120 	sub.w	r1, r3, #32
 80112f8:	f1c3 0220 	rsb	r2, r3, #32
 80112fc:	fa09 f503 	lsl.w	r5, r9, r3
 8011300:	fa08 f101 	lsl.w	r1, r8, r1
 8011304:	430d      	orrs	r5, r1
 8011306:	fa28 f202 	lsr.w	r2, r8, r2
 801130a:	4315      	orrs	r5, r2
 801130c:	fa08 f403 	lsl.w	r4, r8, r3
 8011310:	687e      	ldr	r6, [r7, #4]
 8011312:	1d33      	adds	r3, r6, #4
 8011314:	607b      	str	r3, [r7, #4]
 8011316:	e9c7 4504 	strd	r4, r5, [r7, #16]
   * @brief Clips Q63 to Q31 values.
   */
  __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 801131a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801131e:	f04f 0200 	mov.w	r2, #0
 8011322:	f04f 0300 	mov.w	r3, #0
 8011326:	000a      	movs	r2, r1
 8011328:	17cb      	asrs	r3, r1, #31
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	17db      	asrs	r3, r3, #31
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 801132e:	429a      	cmp	r2, r3
 8011330:	d00b      	beq.n	801134a <arm_shift_q31+0x8e>
 8011332:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011336:	f04f 0200 	mov.w	r2, #0
 801133a:	f04f 0300 	mov.w	r3, #0
 801133e:	17ca      	asrs	r2, r1, #31
 8011340:	17cb      	asrs	r3, r1, #31
 8011342:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011346:	4053      	eors	r3, r2
 8011348:	e000      	b.n	801134c <arm_shift_q31+0x90>
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	6033      	str	r3, [r6, #0]

      /* Decrement loop counter */
      blkCnt--;
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	3b01      	subs	r3, #1
 8011352:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1c3      	bne.n	80112e2 <arm_shift_q31+0x26>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 801135a:	e012      	b.n	8011382 <arm_shift_q31+0xc6>
      *pDst++ = (*pSrc++ >> -shiftBits);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	1d1a      	adds	r2, r3, #4
 8011360:	60fa      	str	r2, [r7, #12]
 8011362:	6819      	ldr	r1, [r3, #0]
 8011364:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011368:	425a      	negs	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	1d18      	adds	r0, r3, #4
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	fa41 f202 	asr.w	r2, r1, r2
 8011374:	601a      	str	r2, [r3, #0]
      blkCnt--;
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	3b01      	subs	r3, #1
 801137a:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d1ec      	bne.n	801135c <arm_shift_q31+0xa0>
}
 8011382:	bf00      	nop
 8011384:	3720      	adds	r7, #32
 8011386:	46bd      	mov	sp, r7
 8011388:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801138c:	4770      	bx	lr

0801138e <arm_cmplx_mag_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t numSamples)
{
 801138e:	b580      	push	{r7, lr}
 8011390:	b08e      	sub	sp, #56	@ 0x38
 8011392:	af00      	add	r7, sp, #0
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	60b9      	str	r1, [r7, #8]
 8011398:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801139e:	e028      	b.n	80113f2 <arm_cmplx_mag_q15+0x64>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

#if defined (ARM_MATH_DSP)
    in = read_q15x2_ia (&pSrc);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	3304      	adds	r3, #4
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3b04      	subs	r3, #4
 80113aa:	61fb      	str	r3, [r7, #28]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	617b      	str	r3, [r7, #20]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	633b      	str	r3, [r7, #48]	@ 0x30
    acc0 = __SMUAD(in, in);
 80113b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80113bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80113be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113c2:	fb23 f302 	smuad	r3, r3, r2
 80113c6:	623b      	str	r3, [r7, #32]
  return(result);
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* store result in 2.14 format in destination buffer. */
    arm_sqrt_q31((uint32_t)acc0  >> 1 , &res);
 80113cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ce:	085b      	lsrs	r3, r3, #1
 80113d0:	461a      	mov	r2, r3
 80113d2:	f107 0318 	add.w	r3, r7, #24
 80113d6:	4619      	mov	r1, r3
 80113d8:	4610      	mov	r0, r2
 80113da:	f000 f883 	bl	80114e4 <arm_sqrt_q31>
    *pDst++ = res >> 16;
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	1419      	asrs	r1, r3, #16
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	1c9a      	adds	r2, r3, #2
 80113e6:	60ba      	str	r2, [r7, #8]
 80113e8:	b20a      	sxth	r2, r1
 80113ea:	801a      	strh	r2, [r3, #0]
    *pDst++ = res >> 16;
 
#endif

    /* Decrement loop counter */
    blkCnt--;
 80113ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ee:	3b01      	subs	r3, #1
 80113f0:	637b      	str	r3, [r7, #52]	@ 0x34
  while (blkCnt > 0U)
 80113f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d1d3      	bne.n	80113a0 <arm_cmplx_mag_q15+0x12>
  }

}
 80113f8:	bf00      	nop
 80113fa:	bf00      	nop
 80113fc:	3738      	adds	r7, #56	@ 0x38
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <arm_divide_q15>:

ARM_DSP_ATTRIBUTE arm_status arm_divide_q15(q15_t numerator,
  q15_t denominator,
  q15_t *quotient,
  int16_t *shift)
{
 8011402:	b580      	push	{r7, lr}
 8011404:	b088      	sub	sp, #32
 8011406:	af00      	add	r7, sp, #0
 8011408:	60ba      	str	r2, [r7, #8]
 801140a:	607b      	str	r3, [r7, #4]
 801140c:	4603      	mov	r3, r0
 801140e:	81fb      	strh	r3, [r7, #14]
 8011410:	460b      	mov	r3, r1
 8011412:	81bb      	strh	r3, [r7, #12]
  int16_t sign=0;
 8011414:	2300      	movs	r3, #0
 8011416:	837b      	strh	r3, [r7, #26]
  q31_t temp;
  int16_t shiftForNormalizing;

  *shift = 0;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2200      	movs	r2, #0
 801141c:	801a      	strh	r2, [r3, #0]

  sign = (numerator<0) ^ (denominator<0);
 801141e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011426:	4053      	eors	r3, r2
 8011428:	b21b      	sxth	r3, r3
 801142a:	b29b      	uxth	r3, r3
 801142c:	0bdb      	lsrs	r3, r3, #15
 801142e:	b2db      	uxtb	r3, r3
 8011430:	837b      	strh	r3, [r7, #26]

  if (denominator == 0)
 8011432:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d10f      	bne.n	801145a <arm_divide_q15+0x58>
  {
     if (sign)
 801143a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d004      	beq.n	801144c <arm_divide_q15+0x4a>
     {
        *quotient = -32768;
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011448:	801a      	strh	r2, [r3, #0]
 801144a:	e003      	b.n	8011454 <arm_divide_q15+0x52>
     }
     else
     {
        *quotient = 32767;
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011452:	801a      	strh	r2, [r3, #0]
     }
     return(ARM_MATH_NANINF);
 8011454:	f06f 0303 	mvn.w	r3, #3
 8011458:	e03f      	b.n	80114da <arm_divide_q15+0xd8>
  }

  arm_abs_q15(&numerator,&numerator,1);
 801145a:	f107 010e 	add.w	r1, r7, #14
 801145e:	f107 030e 	add.w	r3, r7, #14
 8011462:	2201      	movs	r2, #1
 8011464:	4618      	mov	r0, r3
 8011466:	f7ff fd45 	bl	8010ef4 <arm_abs_q15>
  arm_abs_q15(&denominator,&denominator,1);
 801146a:	f107 010c 	add.w	r1, r7, #12
 801146e:	f107 030c 	add.w	r3, r7, #12
 8011472:	2201      	movs	r2, #1
 8011474:	4618      	mov	r0, r3
 8011476:	f7ff fd3d 	bl	8010ef4 <arm_abs_q15>
  
  temp = ((q31_t)numerator << 15) / ((q31_t)denominator);
 801147a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801147e:	03db      	lsls	r3, r3, #15
 8011480:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011484:	fb93 f3f2 	sdiv	r3, r3, r2
 8011488:	61fb      	str	r3, [r7, #28]

  shiftForNormalizing= 17 - __CLZ(temp);
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d101      	bne.n	8011498 <arm_divide_q15+0x96>
    return 32U;
 8011494:	2320      	movs	r3, #32
 8011496:	e003      	b.n	80114a0 <arm_divide_q15+0x9e>
  return __builtin_clz(value);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	fab3 f383 	clz	r3, r3
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	f1c3 0311 	rsb	r3, r3, #17
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	833b      	strh	r3, [r7, #24]
  if (shiftForNormalizing > 0)
 80114a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	dd08      	ble.n	80114c2 <arm_divide_q15+0xc0>
  {
     *shift = shiftForNormalizing;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	8b3a      	ldrh	r2, [r7, #24]
 80114b4:	801a      	strh	r2, [r3, #0]
     temp = temp >> shiftForNormalizing;
 80114b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80114ba:	69fa      	ldr	r2, [r7, #28]
 80114bc:	fa42 f303 	asr.w	r3, r2, r3
 80114c0:	61fb      	str	r3, [r7, #28]
  }

  if (sign)
 80114c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d002      	beq.n	80114d0 <arm_divide_q15+0xce>
  {
    temp = -temp;
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	425b      	negs	r3, r3
 80114ce:	61fb      	str	r3, [r7, #28]
  }

  *quotient=temp;
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	b21a      	sxth	r2, r3
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	801a      	strh	r2, [r3, #0]

  return(ARM_MATH_SUCCESS);
 80114d8:	2300      	movs	r3, #0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3720      	adds	r7, #32
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
	...

080114e4 <arm_sqrt_q31>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut)
{
 80114e4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80114e8:	b0bf      	sub	sp, #252	@ 0xfc
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 80114f0:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  q31_t number, var1, signBits1 ,temp;
 
  number = in;
 80114f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80114f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 80114fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011500:	2b00      	cmp	r3, #0
 8011502:	f340 8270 	ble.w	80119e6 <arm_sqrt_q31+0x502>
  {
    signBits1 = __CLZ(number) - 1;
 8011506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801150a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (value == 0U)
 801150e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011512:	2b00      	cmp	r3, #0
 8011514:	d101      	bne.n	801151a <arm_sqrt_q31+0x36>
    return 32U;
 8011516:	2320      	movs	r3, #32
 8011518:	e004      	b.n	8011524 <arm_sqrt_q31+0x40>
  return __builtin_clz(value);
 801151a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801151e:	fab3 f383 	clz	r3, r3
 8011522:	b2db      	uxtb	r3, r3
 8011524:	3b01      	subs	r3, #1
 8011526:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 801152a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801152e:	f003 0301 	and.w	r3, r3, #1
 8011532:	2b00      	cmp	r3, #0
 8011534:	d108      	bne.n	8011548 <arm_sqrt_q31+0x64>
    {
      number = number << signBits1;
 8011536:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801153a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801153e:	fa02 f303 	lsl.w	r3, r2, r3
 8011542:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011546:	e007      	b.n	8011558 <arm_sqrt_q31+0x74>
    }
    else
    {
      number = number << (signBits1 - 1);
 8011548:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801154c:	1e5a      	subs	r2, r3, #1
 801154e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011552:	4093      	lsls	r3, r2
 8011554:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    }

    /* Start value for 1/sqrt(x) for the Newton iteration */
    var1 = sqrt_initial_lut_q31[(number>> 26) - (Q28QUARTER >> 26)];
 8011558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801155c:	169b      	asrs	r3, r3, #26
 801155e:	f1a3 0208 	sub.w	r2, r3, #8
 8011562:	4bf0      	ldr	r3, [pc, #960]	@ (8011924 <arm_sqrt_q31+0x440>)
 8011564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011568:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 0.5 var1 * (3 - number * var1 * var1) */

    /* 1st iteration */

    temp = ((q63_t) var1 * var1) >> 28;
 801156c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011570:	17da      	asrs	r2, r3, #31
 8011572:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011576:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801157a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801157e:	17da      	asrs	r2, r3, #31
 8011580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011584:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8011588:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 801158c:	460b      	mov	r3, r1
 801158e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011592:	fb02 f203 	mul.w	r2, r2, r3
 8011596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801159a:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0
 801159e:	4601      	mov	r1, r0
 80115a0:	fb01 f303 	mul.w	r3, r1, r3
 80115a4:	4413      	add	r3, r2
 80115a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80115aa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80115ae:	fba2 4501 	umull	r4, r5, r2, r1
 80115b2:	442b      	add	r3, r5
 80115b4:	461d      	mov	r5, r3
 80115b6:	f04f 0200 	mov.w	r2, #0
 80115ba:	f04f 0300 	mov.w	r3, #0
 80115be:	0f22      	lsrs	r2, r4, #28
 80115c0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80115c4:	172b      	asrs	r3, r5, #28
 80115c6:	4613      	mov	r3, r2
 80115c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 80115cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115d0:	17da      	asrs	r2, r3, #31
 80115d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80115d6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80115da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80115de:	17da      	asrs	r2, r3, #31
 80115e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80115e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80115e8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80115ec:	460b      	mov	r3, r1
 80115ee:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80115f2:	4622      	mov	r2, r4
 80115f4:	fb02 f203 	mul.w	r2, r2, r3
 80115f8:	e9c7 4530 	strd	r4, r5, [r7, #192]	@ 0xc0
 80115fc:	462b      	mov	r3, r5
 80115fe:	4604      	mov	r4, r0
 8011600:	460d      	mov	r5, r1
 8011602:	4621      	mov	r1, r4
 8011604:	fb01 f303 	mul.w	r3, r1, r3
 8011608:	4413      	add	r3, r2
 801160a:	4622      	mov	r2, r4
 801160c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8011610:	fba2 8901 	umull	r8, r9, r2, r1
 8011614:	444b      	add	r3, r9
 8011616:	4699      	mov	r9, r3
 8011618:	f04f 0200 	mov.w	r2, #0
 801161c:	f04f 0300 	mov.w	r3, #0
 8011620:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8011624:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8011628:	ea4f 73e9 	mov.w	r3, r9, asr #31
 801162c:	4613      	mov	r3, r2
 801162e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011636:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 801163a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 801163e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011642:	17da      	asrs	r2, r3, #31
 8011644:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011646:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011648:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801164c:	17da      	asrs	r2, r3, #31
 801164e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011650:	677a      	str	r2, [r7, #116]	@ 0x74
 8011652:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8011656:	462b      	mov	r3, r5
 8011658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801165c:	4642      	mov	r2, r8
 801165e:	fb02 f203 	mul.w	r2, r2, r3
 8011662:	464b      	mov	r3, r9
 8011664:	4621      	mov	r1, r4
 8011666:	fb01 f303 	mul.w	r3, r1, r3
 801166a:	4413      	add	r3, r2
 801166c:	4622      	mov	r2, r4
 801166e:	4641      	mov	r1, r8
 8011670:	fba2 ab01 	umull	sl, fp, r2, r1
 8011674:	445b      	add	r3, fp
 8011676:	469b      	mov	fp, r3
 8011678:	f04f 0200 	mov.w	r2, #0
 801167c:	f04f 0300 	mov.w	r3, #0
 8011680:	ea4f 725a 	mov.w	r2, sl, lsr #29
 8011684:	ea42 02cb 	orr.w	r2, r2, fp, lsl #3
 8011688:	ea4f 736b 	mov.w	r3, fp, asr #29
 801168c:	4613      	mov	r3, r2
 801168e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    
    /* 2nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8011692:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011696:	17da      	asrs	r2, r3, #31
 8011698:	66bb      	str	r3, [r7, #104]	@ 0x68
 801169a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801169c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80116a0:	17da      	asrs	r2, r3, #31
 80116a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80116a4:	667a      	str	r2, [r7, #100]	@ 0x64
 80116a6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80116aa:	462b      	mov	r3, r5
 80116ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80116b0:	4642      	mov	r2, r8
 80116b2:	fb02 f203 	mul.w	r2, r2, r3
 80116b6:	464b      	mov	r3, r9
 80116b8:	4621      	mov	r1, r4
 80116ba:	fb01 f303 	mul.w	r3, r1, r3
 80116be:	4413      	add	r3, r2
 80116c0:	4622      	mov	r2, r4
 80116c2:	4641      	mov	r1, r8
 80116c4:	fba2 1201 	umull	r1, r2, r2, r1
 80116c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80116cc:	460a      	mov	r2, r1
 80116ce:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80116d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80116d6:	4413      	add	r3, r2
 80116d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80116dc:	f04f 0200 	mov.w	r2, #0
 80116e0:	f04f 0300 	mov.w	r3, #0
 80116e4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80116e8:	4621      	mov	r1, r4
 80116ea:	0f0a      	lsrs	r2, r1, #28
 80116ec:	4629      	mov	r1, r5
 80116ee:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80116f2:	4629      	mov	r1, r5
 80116f4:	170b      	asrs	r3, r1, #28
 80116f6:	4613      	mov	r3, r2
 80116f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 80116fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011700:	17da      	asrs	r2, r3, #31
 8011702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011704:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801170a:	17da      	asrs	r2, r3, #31
 801170c:	653b      	str	r3, [r7, #80]	@ 0x50
 801170e:	657a      	str	r2, [r7, #84]	@ 0x54
 8011710:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8011714:	462b      	mov	r3, r5
 8011716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 801171a:	4642      	mov	r2, r8
 801171c:	fb02 f203 	mul.w	r2, r2, r3
 8011720:	464b      	mov	r3, r9
 8011722:	4621      	mov	r1, r4
 8011724:	fb01 f303 	mul.w	r3, r1, r3
 8011728:	4413      	add	r3, r2
 801172a:	4622      	mov	r2, r4
 801172c:	4641      	mov	r1, r8
 801172e:	fba2 1201 	umull	r1, r2, r2, r1
 8011732:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011736:	460a      	mov	r2, r1
 8011738:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 801173c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011740:	4413      	add	r3, r2
 8011742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011746:	f04f 0200 	mov.w	r2, #0
 801174a:	f04f 0300 	mov.w	r3, #0
 801174e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8011752:	4621      	mov	r1, r4
 8011754:	0fca      	lsrs	r2, r1, #31
 8011756:	4629      	mov	r1, r5
 8011758:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801175c:	4629      	mov	r1, r5
 801175e:	17cb      	asrs	r3, r1, #31
 8011760:	4613      	mov	r3, r2
 8011762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801176a:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 801176e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8011772:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011776:	17da      	asrs	r2, r3, #31
 8011778:	64bb      	str	r3, [r7, #72]	@ 0x48
 801177a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801177c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011780:	17da      	asrs	r2, r3, #31
 8011782:	643b      	str	r3, [r7, #64]	@ 0x40
 8011784:	647a      	str	r2, [r7, #68]	@ 0x44
 8011786:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 801178a:	462b      	mov	r3, r5
 801178c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8011790:	4642      	mov	r2, r8
 8011792:	fb02 f203 	mul.w	r2, r2, r3
 8011796:	464b      	mov	r3, r9
 8011798:	4621      	mov	r1, r4
 801179a:	fb01 f303 	mul.w	r3, r1, r3
 801179e:	4413      	add	r3, r2
 80117a0:	4622      	mov	r2, r4
 80117a2:	4641      	mov	r1, r8
 80117a4:	fba2 1201 	umull	r1, r2, r2, r1
 80117a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80117ac:	460a      	mov	r2, r1
 80117ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80117b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80117b6:	4413      	add	r3, r2
 80117b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80117bc:	f04f 0200 	mov.w	r2, #0
 80117c0:	f04f 0300 	mov.w	r3, #0
 80117c4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 80117c8:	4621      	mov	r1, r4
 80117ca:	0f4a      	lsrs	r2, r1, #29
 80117cc:	4629      	mov	r1, r5
 80117ce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80117d2:	4629      	mov	r1, r5
 80117d4:	174b      	asrs	r3, r1, #29
 80117d6:	4613      	mov	r3, r2
 80117d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 3rd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 80117dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80117e0:	17da      	asrs	r2, r3, #31
 80117e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80117e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80117e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80117ea:	17da      	asrs	r2, r3, #31
 80117ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80117ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80117f0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80117f4:	462b      	mov	r3, r5
 80117f6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80117fa:	4642      	mov	r2, r8
 80117fc:	fb02 f203 	mul.w	r2, r2, r3
 8011800:	464b      	mov	r3, r9
 8011802:	4621      	mov	r1, r4
 8011804:	fb01 f303 	mul.w	r3, r1, r3
 8011808:	4413      	add	r3, r2
 801180a:	4622      	mov	r2, r4
 801180c:	4641      	mov	r1, r8
 801180e:	fba2 1201 	umull	r1, r2, r2, r1
 8011812:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011816:	460a      	mov	r2, r1
 8011818:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801181c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011820:	4413      	add	r3, r2
 8011822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011826:	f04f 0200 	mov.w	r2, #0
 801182a:	f04f 0300 	mov.w	r3, #0
 801182e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8011832:	4621      	mov	r1, r4
 8011834:	0f0a      	lsrs	r2, r1, #28
 8011836:	4629      	mov	r1, r5
 8011838:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801183c:	4629      	mov	r1, r5
 801183e:	170b      	asrs	r3, r1, #28
 8011840:	4613      	mov	r3, r2
 8011842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8011846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801184a:	17da      	asrs	r2, r3, #31
 801184c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801184e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011854:	17da      	asrs	r2, r3, #31
 8011856:	623b      	str	r3, [r7, #32]
 8011858:	627a      	str	r2, [r7, #36]	@ 0x24
 801185a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801185e:	462b      	mov	r3, r5
 8011860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011864:	4642      	mov	r2, r8
 8011866:	fb02 f203 	mul.w	r2, r2, r3
 801186a:	464b      	mov	r3, r9
 801186c:	4621      	mov	r1, r4
 801186e:	fb01 f303 	mul.w	r3, r1, r3
 8011872:	4413      	add	r3, r2
 8011874:	4622      	mov	r2, r4
 8011876:	4641      	mov	r1, r8
 8011878:	fba2 1201 	umull	r1, r2, r2, r1
 801187c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8011880:	460a      	mov	r2, r1
 8011882:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8011886:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801188a:	4413      	add	r3, r2
 801188c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011890:	f04f 0200 	mov.w	r2, #0
 8011894:	f04f 0300 	mov.w	r3, #0
 8011898:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 801189c:	4621      	mov	r1, r4
 801189e:	0fca      	lsrs	r2, r1, #31
 80118a0:	4629      	mov	r1, r5
 80118a2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80118a6:	4629      	mov	r1, r5
 80118a8:	17cb      	asrs	r3, r1, #31
 80118aa:	4613      	mov	r3, r2
 80118ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 80118b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80118b4:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 80118b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 80118bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80118c0:	17da      	asrs	r2, r3, #31
 80118c2:	61bb      	str	r3, [r7, #24]
 80118c4:	61fa      	str	r2, [r7, #28]
 80118c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80118ca:	17da      	asrs	r2, r3, #31
 80118cc:	613b      	str	r3, [r7, #16]
 80118ce:	617a      	str	r2, [r7, #20]
 80118d0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80118d4:	462b      	mov	r3, r5
 80118d6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80118da:	4642      	mov	r2, r8
 80118dc:	fb02 f203 	mul.w	r2, r2, r3
 80118e0:	464b      	mov	r3, r9
 80118e2:	4621      	mov	r1, r4
 80118e4:	fb01 f303 	mul.w	r3, r1, r3
 80118e8:	4413      	add	r3, r2
 80118ea:	4622      	mov	r2, r4
 80118ec:	4641      	mov	r1, r8
 80118ee:	fba2 1201 	umull	r1, r2, r2, r1
 80118f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80118f6:	460a      	mov	r2, r1
 80118f8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80118fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011900:	4413      	add	r3, r2
 8011902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011906:	f04f 0200 	mov.w	r2, #0
 801190a:	f04f 0300 	mov.w	r3, #0
 801190e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011912:	4621      	mov	r1, r4
 8011914:	0f4a      	lsrs	r2, r1, #29
 8011916:	4629      	mov	r1, r5
 8011918:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 801191c:	4629      	mov	r1, r5
 801191e:	174b      	asrs	r3, r1, #29
 8011920:	e002      	b.n	8011928 <arm_sqrt_q31+0x444>
 8011922:	bf00      	nop
 8011924:	08031d28 	.word	0x08031d28
 8011928:	4613      	mov	r3, r2
 801192a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Multiply the inverse square root with the original value */
    var1 = ((q31_t) (((q63_t) number * var1) >> 28));
 801192e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011932:	17da      	asrs	r2, r3, #31
 8011934:	60bb      	str	r3, [r7, #8]
 8011936:	60fa      	str	r2, [r7, #12]
 8011938:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801193c:	17da      	asrs	r2, r3, #31
 801193e:	603b      	str	r3, [r7, #0]
 8011940:	607a      	str	r2, [r7, #4]
 8011942:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011946:	462b      	mov	r3, r5
 8011948:	e9d7 8900 	ldrd	r8, r9, [r7]
 801194c:	4642      	mov	r2, r8
 801194e:	fb02 f203 	mul.w	r2, r2, r3
 8011952:	464b      	mov	r3, r9
 8011954:	4621      	mov	r1, r4
 8011956:	fb01 f303 	mul.w	r3, r1, r3
 801195a:	4413      	add	r3, r2
 801195c:	4622      	mov	r2, r4
 801195e:	4641      	mov	r1, r8
 8011960:	fba2 1201 	umull	r1, r2, r2, r1
 8011964:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011968:	460a      	mov	r2, r1
 801196a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 801196e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011972:	4413      	add	r3, r2
 8011974:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011978:	f04f 0200 	mov.w	r2, #0
 801197c:	f04f 0300 	mov.w	r3, #0
 8011980:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8011984:	4621      	mov	r1, r4
 8011986:	0f0a      	lsrs	r2, r1, #28
 8011988:	4629      	mov	r1, r5
 801198a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801198e:	4629      	mov	r1, r5
 8011990:	170b      	asrs	r3, r1, #28
 8011992:	4613      	mov	r3, r2
 8011994:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 8011998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801199c:	f003 0301 	and.w	r3, r3, #1
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10c      	bne.n	80119be <arm_sqrt_q31+0x4da>
    {
      var1 = var1 >> (signBits1 / 2);
 80119a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	da00      	bge.n	80119ae <arm_sqrt_q31+0x4ca>
 80119ac:	3301      	adds	r3, #1
 80119ae:	105b      	asrs	r3, r3, #1
 80119b0:	461a      	mov	r2, r3
 80119b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80119b6:	4113      	asrs	r3, r2
 80119b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80119bc:	e00c      	b.n	80119d8 <arm_sqrt_q31+0x4f4>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 80119be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80119c2:	3b01      	subs	r3, #1
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	da00      	bge.n	80119ca <arm_sqrt_q31+0x4e6>
 80119c8:	3301      	adds	r3, #1
 80119ca:	105b      	asrs	r3, r3, #1
 80119cc:	461a      	mov	r2, r3
 80119ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80119d2:	4113      	asrs	r3, r2
 80119d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }
    *pOut = var1;
 80119d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80119dc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80119e0:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 80119e2:	2300      	movs	r3, #0
 80119e4:	e00b      	b.n	80119fe <arm_sqrt_q31+0x51a>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 80119e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80119ea:	2200      	movs	r2, #0
 80119ec:	601a      	str	r2, [r3, #0]

    if (number==0)
 80119ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d101      	bne.n	80119fa <arm_sqrt_q31+0x516>
    {
       return (ARM_MATH_SUCCESS);
 80119f6:	2300      	movs	r3, #0
 80119f8:	e001      	b.n	80119fe <arm_sqrt_q31+0x51a>
    }
    else
    {
       return (ARM_MATH_ARGUMENT_ERROR);
 80119fa:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	37fc      	adds	r7, #252	@ 0xfc
 8011a02:	46bd      	mov	sp, r7
 8011a04:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop

08011a0c <arm_scalar_log_q31>:
/* 1.0 / Log2[Exp[1]] in Q31 */
#define LOG_Q31_INVLOG2EXP 0x58b90bfbuL

/* Clay Turner algorithm */
static uint32_t arm_scalar_log_q31(uint32_t src)
{
 8011a0c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011a10:	b08d      	sub	sp, #52	@ 0x34
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	60f8      	str	r0, [r7, #12]
 8011a16:	68f9      	ldr	r1, [r7, #12]
 8011a18:	6139      	str	r1, [r7, #16]
  if (value == 0U)
 8011a1a:	6939      	ldr	r1, [r7, #16]
 8011a1c:	2900      	cmp	r1, #0
 8011a1e:	d101      	bne.n	8011a24 <arm_scalar_log_q31+0x18>
    return 32U;
 8011a20:	2120      	movs	r1, #32
 8011a22:	e003      	b.n	8011a2c <arm_scalar_log_q31+0x20>
  return __builtin_clz(value);
 8011a24:	6939      	ldr	r1, [r7, #16]
 8011a26:	fab1 f181 	clz	r1, r1
 8011a2a:	b2c9      	uxtb	r1, r1
   int32_t i;

   int32_t c = __CLZ(src);
 8011a2c:	61f9      	str	r1, [r7, #28]
   int32_t normalization=0;
 8011a2e:	2100      	movs	r1, #0
 8011a30:	61b9      	str	r1, [r7, #24]

   /* 0.5 in q26 */
   uint32_t inc = LOQ_Q31_Q32_HALF >> (LOG_Q31_INTEGER_PART + 1);
 8011a32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8011a36:	62b9      	str	r1, [r7, #40]	@ 0x28

   /* Will compute y = log2(x) for 1 <= x < 2.0 */
   uint32_t x;

   /* q26 */
   uint32_t y=0;
 8011a38:	2100      	movs	r1, #0
 8011a3a:	6239      	str	r1, [r7, #32]
   /* q26 */
   int32_t tmp;


   /* Normalize and convert to q30 format */
   x = src;
 8011a3c:	68f9      	ldr	r1, [r7, #12]
 8011a3e:	6279      	str	r1, [r7, #36]	@ 0x24
   if ((c-1) < 0)
 8011a40:	69f9      	ldr	r1, [r7, #28]
 8011a42:	2900      	cmp	r1, #0
 8011a44:	dc07      	bgt.n	8011a56 <arm_scalar_log_q31+0x4a>
   {
     x = x >> (1-c);
 8011a46:	69f9      	ldr	r1, [r7, #28]
 8011a48:	f1c1 0101 	rsb	r1, r1, #1
 8011a4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a4e:	fa20 f101 	lsr.w	r1, r0, r1
 8011a52:	6279      	str	r1, [r7, #36]	@ 0x24
 8011a54:	e005      	b.n	8011a62 <arm_scalar_log_q31+0x56>
   }
   else
   {
     x = x << (c-1);
 8011a56:	69f9      	ldr	r1, [r7, #28]
 8011a58:	3901      	subs	r1, #1
 8011a5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a5c:	fa00 f101 	lsl.w	r1, r0, r1
 8011a60:	6279      	str	r1, [r7, #36]	@ 0x24
   }
   normalization = c;
 8011a62:	69f9      	ldr	r1, [r7, #28]
 8011a64:	61b9      	str	r1, [r7, #24]
   /* Compute the Log2. Result is in q26
      because we know 0 <= y < 1.0 but
      do not want to use q32 to allow
      following computation with less instructions.
   */
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011a66:	2100      	movs	r1, #0
 8011a68:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011a6a:	e02d      	b.n	8011ac8 <arm_scalar_log_q31+0xbc>
   {
      x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 8011a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011a6e:	2000      	movs	r0, #0
 8011a70:	468a      	mov	sl, r1
 8011a72:	4683      	mov	fp, r0
 8011a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011a76:	2000      	movs	r0, #0
 8011a78:	6039      	str	r1, [r7, #0]
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	fb01 f00b 	mul.w	r0, r1, fp
 8011a82:	6879      	ldr	r1, [r7, #4]
 8011a84:	fb0a f101 	mul.w	r1, sl, r1
 8011a88:	4401      	add	r1, r0
 8011a8a:	6838      	ldr	r0, [r7, #0]
 8011a8c:	fbaa 4500 	umull	r4, r5, sl, r0
 8011a90:	4429      	add	r1, r5
 8011a92:	460d      	mov	r5, r1
 8011a94:	f04f 0000 	mov.w	r0, #0
 8011a98:	f04f 0100 	mov.w	r1, #0
 8011a9c:	0fa0      	lsrs	r0, r4, #30
 8011a9e:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
 8011aa2:	17a9      	asrs	r1, r5, #30
 8011aa4:	4601      	mov	r1, r0
 8011aa6:	6279      	str	r1, [r7, #36]	@ 0x24

      if (x >= LOQ_Q31_THRESHOLD)
 8011aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011aaa:	2900      	cmp	r1, #0
 8011aac:	da06      	bge.n	8011abc <arm_scalar_log_q31+0xb0>
      {
         y += inc ;
 8011aae:	6a38      	ldr	r0, [r7, #32]
 8011ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ab2:	4401      	add	r1, r0
 8011ab4:	6239      	str	r1, [r7, #32]
         x = x >> 1;
 8011ab6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ab8:	0849      	lsrs	r1, r1, #1
 8011aba:	6279      	str	r1, [r7, #36]	@ 0x24
      }
      inc = inc >> 1;
 8011abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011abe:	0849      	lsrs	r1, r1, #1
 8011ac0:	62b9      	str	r1, [r7, #40]	@ 0x28
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ac4:	3101      	adds	r1, #1
 8011ac6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011aca:	291e      	cmp	r1, #30
 8011acc:	ddce      	ble.n	8011a6c <arm_scalar_log_q31+0x60>
      We compute (y - normalisation) * (1 / Log2[e]).

   */

   /* q26 */
   tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 8011ace:	6a38      	ldr	r0, [r7, #32]
 8011ad0:	69b9      	ldr	r1, [r7, #24]
 8011ad2:	0689      	lsls	r1, r1, #26
 8011ad4:	1a41      	subs	r1, r0, r1
 8011ad6:	6179      	str	r1, [r7, #20]


   /* q5.26 */
   y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 8011ad8:	6979      	ldr	r1, [r7, #20]
 8011ada:	17c8      	asrs	r0, r1, #31
 8011adc:	4688      	mov	r8, r1
 8011ade:	4681      	mov	r9, r0
 8011ae0:	490e      	ldr	r1, [pc, #56]	@ (8011b1c <arm_scalar_log_q31+0x110>)
 8011ae2:	fb01 f009 	mul.w	r0, r1, r9
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	fb01 f108 	mul.w	r1, r1, r8
 8011aec:	4401      	add	r1, r0
 8011aee:	480b      	ldr	r0, [pc, #44]	@ (8011b1c <arm_scalar_log_q31+0x110>)
 8011af0:	fba8 2300 	umull	r2, r3, r8, r0
 8011af4:	4419      	add	r1, r3
 8011af6:	460b      	mov	r3, r1
 8011af8:	f04f 0000 	mov.w	r0, #0
 8011afc:	f04f 0100 	mov.w	r1, #0
 8011b00:	0fd0      	lsrs	r0, r2, #31
 8011b02:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011b06:	17d9      	asrs	r1, r3, #31
 8011b08:	4603      	mov	r3, r0
 8011b0a:	623b      	str	r3, [r7, #32]



   return(y);
 8011b0c:	6a3b      	ldr	r3, [r7, #32]

}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3734      	adds	r7, #52	@ 0x34
 8011b12:	46bd      	mov	sp, r7
 8011b14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	58b90bfb 	.word	0x58b90bfb

08011b20 <arm_vlog_q31>:
 */
ARM_DSP_ATTRIBUTE void arm_vlog_q31(
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b086      	sub	sp, #24
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
      blkCnt--;
  }

  blkCnt = blockSize & 3;
  #else
  blkCnt = blockSize;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	617b      	str	r3, [r7, #20]
  #endif

  while (blkCnt > 0U)
 8011b30:	e00f      	b.n	8011b52 <arm_vlog_q31+0x32>
  {
     *pDst++=arm_scalar_log_q31(*pSrc++);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	1d1a      	adds	r2, r3, #4
 8011b36:	60fa      	str	r2, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff ff66 	bl	8011a0c <arm_scalar_log_q31>
 8011b40:	4601      	mov	r1, r0
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	1d1a      	adds	r2, r3, #4
 8011b46:	60ba      	str	r2, [r7, #8]
 8011b48:	460a      	mov	r2, r1
 8011b4a:	601a      	str	r2, [r3, #0]

     blkCnt--;
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	3b01      	subs	r3, #1
 8011b50:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d1ec      	bne.n	8011b32 <arm_vlog_q31+0x12>
  }

}
 8011b58:	bf00      	nop
 8011b5a:	bf00      	nop
 8011b5c:	3718      	adds	r7, #24
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}

08011b62 <arm_mat_vec_mult_q15>:
    }
}

#else
ARM_DSP_ATTRIBUTE void arm_mat_vec_mult_q15(const arm_matrix_instance_q15 *pSrcMat, const q15_t *pVec, q15_t *pDst)
{
 8011b62:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011b66:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011b70:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b74:	6018      	str	r0, [r3, #0]
 8011b76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011b7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011b7e:	6019      	str	r1, [r3, #0]
 8011b80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011b84:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011b88:	601a      	str	r2, [r3, #0]
    uint32_t numRows = pSrcMat->numRows;
 8011b8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011b8e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    uint32_t numCols = pSrcMat->numCols;
 8011b9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011b9e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	885b      	ldrh	r3, [r3, #2]
 8011ba6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    const q15_t *pSrcA = pSrcMat->pData;
 8011baa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011bae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    uint16_t i, row, colCnt; /* loop counters */
    q31_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 8011bba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8011bbe:	089b      	lsrs	r3, r3, #2
 8011bc0:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    i = 0u;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    px = pDst;
 8011bca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011bce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    /* The following loop performs the dot-product of each row in pSrcA with the vector */
    /* row loop */
    while (row > 0) {
 8011bd8:	e34b      	b.n	8012272 <arm_mat_vec_mult_q15+0x710>
        /* Initialize accumulators */
        q63_t sum1 = 0;
 8011bda:	f04f 0200 	mov.w	r2, #0
 8011bde:	f04f 0300 	mov.w	r3, #0
 8011be2:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
        q63_t sum2 = 0;
 8011be6:	f04f 0200 	mov.w	r2, #0
 8011bea:	f04f 0300 	mov.w	r3, #0
 8011bee:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
        q63_t sum3 = 0;
 8011bf2:	f04f 0200 	mov.w	r2, #0
 8011bf6:	f04f 0300 	mov.w	r3, #0
 8011bfa:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
        q63_t sum4 = 0;
 8011bfe:	f04f 0200 	mov.w	r2, #0
 8011c02:	f04f 0300 	mov.w	r3, #0
 8011c06:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

        /* For every row wise process, the pInVec pointer is set
         ** to the starting address of the vector */
        pInVec = pVec;
 8011c0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c0e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8011c12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c16:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6013      	str	r3, [r2, #0]

        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols >> 1;
 8011c1e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011c22:	085b      	lsrs	r3, r3, #1
 8011c24:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
 8011c28:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8011c2c:	005a      	lsls	r2, r3, #1
 8011c2e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8011c32:	441a      	add	r2, r3
 8011c34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011c3c:	601a      	str	r2, [r3, #0]
        pInA2 = pInA1 + numCols;
 8011c3e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011c4c:	005b      	lsls	r3, r3, #1
 8011c4e:	441a      	add	r2, r3
 8011c50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c58:	601a      	str	r2, [r3, #0]
        pInA3 = pInA2 + numCols;
 8011c5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c5e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	441a      	add	r2, r3
 8011c6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011c74:	601a      	str	r2, [r3, #0]
        pInA4 = pInA3 + numCols;
 8011c76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011c7e:	681a      	ldr	r2, [r3, #0]
 8011c80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011c84:	005b      	lsls	r3, r3, #1
 8011c86:	441a      	add	r2, r3
 8011c88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c8c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011c90:	601a      	str	r2, [r3, #0]

        // Main loop: matrix-vector multiplication
        while (colCnt > 0u) {
 8011c92:	e16b      	b.n	8011f6c <arm_mat_vec_mult_q15+0x40a>
            // Read 2 values from vector
            vecData = read_q15x2_ia (&pInVec);
 8011c94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011c98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	1d1a      	adds	r2, r3, #4
 8011ca0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ca4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	3b04      	subs	r3, #4
 8011cb6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  memcpy (&val, pQ15, 4);
 8011cba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011cca:	601a      	str	r2, [r3, #0]
  return (val);
 8011ccc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

            // Read 8 values from the matrix - 2 values from each of 4 rows, and do multiply accumulate
            matData =  read_q15x2_ia (&pInA1);
 8011cda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	1d1a      	adds	r2, r3, #4
 8011ce6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011cee:	601a      	str	r2, [r3, #0]
 8011cf0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cf4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	3b04      	subs	r3, #4
 8011cfc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  memcpy (&val, pQ15, 4);
 8011d00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	461a      	mov	r2, r3
 8011d08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d10:	601a      	str	r2, [r3, #0]
  return (val);
 8011d12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum1 = __SMLALD(matData, vecData, sum1);
 8011d20:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011d24:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011d28:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8011d2c:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
 8011d30:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8011d34:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
  llr.w64 = acc;
 8011d38:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8011d3c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011d40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d44:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d48:	6819      	ldr	r1, [r3, #0]
 8011d4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d52:	685a      	ldr	r2, [r3, #4]
 8011d54:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8011d58:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8011d5c:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011d60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d64:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d68:	6019      	str	r1, [r3, #0]
 8011d6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d72:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011d74:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8011d78:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            matData = read_q15x2_ia (&pInA2);
 8011d7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	1d1a      	adds	r2, r3, #4
 8011d88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011d90:	601a      	str	r2, [r3, #0]
 8011d92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d96:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	3b04      	subs	r3, #4
 8011d9e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  memcpy (&val, pQ15, 4);
 8011da2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	461a      	mov	r2, r3
 8011daa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8011db2:	601a      	str	r2, [r3, #0]
  return (val);
 8011db4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011db8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum2 = __SMLALD(matData, vecData, sum2);
 8011dc2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011dc6:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011dca:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8011dce:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
 8011dd2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 8011dd6:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
  llr.w64 = acc;
 8011dda:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8011dde:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011de2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011de6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011dea:	6819      	ldr	r1, [r3, #0]
 8011dec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011df0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011df4:	685a      	ldr	r2, [r3, #4]
 8011df6:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8011dfa:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011dfe:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011e02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e06:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011e0a:	6019      	str	r1, [r3, #0]
 8011e0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011e14:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011e16:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8011e1a:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            matData = read_q15x2_ia (&pInA3);
 8011e1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	1d1a      	adds	r2, r3, #4
 8011e2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011e32:	601a      	str	r2, [r3, #0]
 8011e34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e38:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	3b04      	subs	r3, #4
 8011e40:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  memcpy (&val, pQ15, 4);
 8011e44:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e50:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011e54:	601a      	str	r2, [r3, #0]
  return (val);
 8011e56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum3 = __SMLALD(matData, vecData, sum3);
 8011e64:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011e68:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011e6c:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8011e70:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
 8011e74:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 8011e78:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
  llr.w64 = acc;
 8011e7c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8011e80:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011e84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e88:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011e8c:	6819      	ldr	r1, [r3, #0]
 8011e8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e92:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011e96:	685a      	ldr	r2, [r3, #4]
 8011e98:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8011e9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011ea0:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011ea4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ea8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011eac:	6019      	str	r1, [r3, #0]
 8011eae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011eb2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011eb6:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011eb8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8011ebc:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            matData = read_q15x2_ia (&pInA4);
 8011ec0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ec4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	1d1a      	adds	r2, r3, #4
 8011ecc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ed0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011ed4:	601a      	str	r2, [r3, #0]
 8011ed6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011eda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	3b04      	subs	r3, #4
 8011ee2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  memcpy (&val, pQ15, 4);
 8011ee6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	461a      	mov	r2, r3
 8011eee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ef2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8011ef6:	601a      	str	r2, [r3, #0]
  return (val);
 8011ef8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011efc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum4 = __SMLALD(matData, vecData, sum4);
 8011f06:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011f0a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011f0e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8011f12:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
 8011f16:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 8011f1a:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
  llr.w64 = acc;
 8011f1e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8011f22:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011f26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f2a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011f2e:	6819      	ldr	r1, [r3, #0]
 8011f30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f34:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011f38:	685a      	ldr	r2, [r3, #4]
 8011f3a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8011f3e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8011f42:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011f46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011f4e:	6019      	str	r1, [r3, #0]
 8011f50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f54:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011f58:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011f5a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8011f5e:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

            // Decrement the loop counter
            colCnt--;
 8011f62:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8011f66:	3b01      	subs	r3, #1
 8011f68:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0u) {
 8011f6c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f47f ae8f 	bne.w	8011c94 <arm_mat_vec_mult_q15+0x132>
        }

        /* process any remaining columns */
        colCnt = numCols & 1u;
 8011f76:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	f003 0301 	and.w	r3, r3, #1
 8011f80:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        if (numCols & 1u) {
 8011f84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011f88:	f003 0301 	and.w	r3, r3, #1
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f000 80f1 	beq.w	8012174 <arm_mat_vec_mult_q15+0x612>
            vecData = *pInVec++;
 8011f92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f96:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011f9a:	6819      	ldr	r1, [r3, #0]
 8011f9c:	1c8a      	adds	r2, r1, #2
 8011f9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fa2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011fa6:	601a      	str	r2, [r3, #0]
 8011fa8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011fac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            sum1 += (q63_t)*pInA1++ * vecData;
 8011fb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011fb8:	6819      	ldr	r1, [r3, #0]
 8011fba:	1c8a      	adds	r2, r1, #2
 8011fbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fc0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011fc4:	601a      	str	r2, [r3, #0]
 8011fc6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011fca:	b21b      	sxth	r3, r3
 8011fcc:	17da      	asrs	r2, r3, #31
 8011fce:	673b      	str	r3, [r7, #112]	@ 0x70
 8011fd0:	677a      	str	r2, [r7, #116]	@ 0x74
 8011fd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8011fd6:	17da      	asrs	r2, r3, #31
 8011fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011fda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011fdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011fe4:	fb02 f203 	mul.w	r2, r2, r3
 8011fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fea:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 8011fee:	4601      	mov	r1, r0
 8011ff0:	fb01 f303 	mul.w	r3, r1, r3
 8011ff4:	4413      	add	r3, r2
 8011ff6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011ff8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011ffa:	fba2 1201 	umull	r1, r2, r2, r1
 8011ffe:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012002:	460a      	mov	r2, r1
 8012004:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012008:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801200c:	4413      	add	r3, r2
 801200e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012012:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012016:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801201a:	1851      	adds	r1, r2, r1
 801201c:	6239      	str	r1, [r7, #32]
 801201e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8012022:	414b      	adcs	r3, r1
 8012024:	627b      	str	r3, [r7, #36]	@ 0x24
 8012026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801202a:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            sum2 += (q63_t)*pInA2++ * vecData;
 801202e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012032:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012036:	6819      	ldr	r1, [r3, #0]
 8012038:	1c8a      	adds	r2, r1, #2
 801203a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801203e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012048:	b21b      	sxth	r3, r3
 801204a:	17da      	asrs	r2, r3, #31
 801204c:	663b      	str	r3, [r7, #96]	@ 0x60
 801204e:	667a      	str	r2, [r7, #100]	@ 0x64
 8012050:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012054:	17da      	asrs	r2, r3, #31
 8012056:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012058:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801205a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801205e:	460b      	mov	r3, r1
 8012060:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012062:	fb02 f203 	mul.w	r2, r2, r3
 8012066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012068:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 801206c:	4601      	mov	r1, r0
 801206e:	fb01 f303 	mul.w	r3, r1, r3
 8012072:	4413      	add	r3, r2
 8012074:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012076:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012078:	fba2 1201 	umull	r1, r2, r2, r1
 801207c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801207e:	460a      	mov	r2, r1
 8012080:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012082:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012084:	4413      	add	r3, r2
 8012086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012088:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 801208c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801208e:	1851      	adds	r1, r2, r1
 8012090:	61b9      	str	r1, [r7, #24]
 8012092:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012094:	414b      	adcs	r3, r1
 8012096:	61fb      	str	r3, [r7, #28]
 8012098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801209c:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            sum3 += (q63_t)*pInA3++ * vecData;
 80120a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80120a8:	6819      	ldr	r1, [r3, #0]
 80120aa:	1c8a      	adds	r2, r1, #2
 80120ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80120b4:	601a      	str	r2, [r3, #0]
 80120b6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80120ba:	b21b      	sxth	r3, r3
 80120bc:	17da      	asrs	r2, r3, #31
 80120be:	653b      	str	r3, [r7, #80]	@ 0x50
 80120c0:	657a      	str	r2, [r7, #84]	@ 0x54
 80120c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80120c6:	17da      	asrs	r2, r3, #31
 80120c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80120ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80120cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80120d0:	460b      	mov	r3, r1
 80120d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80120d4:	fb02 f203 	mul.w	r2, r2, r3
 80120d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120da:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80120de:	4601      	mov	r1, r0
 80120e0:	fb01 f303 	mul.w	r3, r1, r3
 80120e4:	4413      	add	r3, r2
 80120e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80120e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80120ea:	fba2 ab01 	umull	sl, fp, r2, r1
 80120ee:	445b      	add	r3, fp
 80120f0:	469b      	mov	fp, r3
 80120f2:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80120f6:	eb12 010a 	adds.w	r1, r2, sl
 80120fa:	6139      	str	r1, [r7, #16]
 80120fc:	eb43 030b 	adc.w	r3, r3, fp
 8012100:	617b      	str	r3, [r7, #20]
 8012102:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012106:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            sum4 += (q63_t)*pInA4++ * vecData;
 801210a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801210e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012112:	6819      	ldr	r1, [r3, #0]
 8012114:	1c8a      	adds	r2, r1, #2
 8012116:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801211a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801211e:	601a      	str	r2, [r3, #0]
 8012120:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012124:	b21b      	sxth	r3, r3
 8012126:	17da      	asrs	r2, r3, #31
 8012128:	643b      	str	r3, [r7, #64]	@ 0x40
 801212a:	647a      	str	r2, [r7, #68]	@ 0x44
 801212c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012130:	17da      	asrs	r2, r3, #31
 8012132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012134:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012136:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801213a:	460b      	mov	r3, r1
 801213c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801213e:	fb02 f203 	mul.w	r2, r2, r3
 8012142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012144:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8012148:	4601      	mov	r1, r0
 801214a:	fb01 f303 	mul.w	r3, r1, r3
 801214e:	4413      	add	r3, r2
 8012150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012152:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012154:	fba2 8901 	umull	r8, r9, r2, r1
 8012158:	444b      	add	r3, r9
 801215a:	4699      	mov	r9, r3
 801215c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8012160:	eb12 0108 	adds.w	r1, r2, r8
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	eb43 0309 	adc.w	r3, r3, r9
 801216a:	60fb      	str	r3, [r7, #12]
 801216c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012170:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
        }

        /* Saturate and store the result in the destination buffer */
        *px++ = (q15_t)(__SSAT((sum1 >> 15), 16));
 8012174:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012178:	f04f 0000 	mov.w	r0, #0
 801217c:	f04f 0100 	mov.w	r1, #0
 8012180:	0bd0      	lsrs	r0, r2, #15
 8012182:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8012186:	13d9      	asrs	r1, r3, #15
 8012188:	4603      	mov	r3, r0
 801218a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801218e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8012192:	f303 030f 	ssat	r3, #16, r3
 8012196:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 801219a:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 801219e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80121a2:	1c93      	adds	r3, r2, #2
 80121a4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80121a8:	b20b      	sxth	r3, r1
 80121aa:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum2 >> 15), 16));
 80121ac:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80121b0:	f04f 0000 	mov.w	r0, #0
 80121b4:	f04f 0100 	mov.w	r1, #0
 80121b8:	0bd0      	lsrs	r0, r2, #15
 80121ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80121be:	13d9      	asrs	r1, r3, #15
 80121c0:	4603      	mov	r3, r0
 80121c2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80121c6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80121ca:	f303 030f 	ssat	r3, #16, r3
 80121ce:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80121d2:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 80121d6:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80121da:	1c93      	adds	r3, r2, #2
 80121dc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80121e0:	b20b      	sxth	r3, r1
 80121e2:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum3 >> 15), 16));
 80121e4:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80121e8:	f04f 0000 	mov.w	r0, #0
 80121ec:	f04f 0100 	mov.w	r1, #0
 80121f0:	0bd0      	lsrs	r0, r2, #15
 80121f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80121f6:	13d9      	asrs	r1, r3, #15
 80121f8:	4603      	mov	r3, r0
 80121fa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80121fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8012202:	f303 030f 	ssat	r3, #16, r3
 8012206:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 801220a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 801220e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8012212:	1c93      	adds	r3, r2, #2
 8012214:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012218:	b20b      	sxth	r3, r1
 801221a:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum4 >> 15), 16));
 801221c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8012220:	f04f 0000 	mov.w	r0, #0
 8012224:	f04f 0100 	mov.w	r1, #0
 8012228:	0bd0      	lsrs	r0, r2, #15
 801222a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 801222e:	13d9      	asrs	r1, r3, #15
 8012230:	4603      	mov	r3, r0
 8012232:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8012236:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801223a:	f303 030f 	ssat	r3, #16, r3
 801223e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8012242:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8012246:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801224a:	1c93      	adds	r3, r2, #2
 801224c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012250:	b20b      	sxth	r3, r1
 8012252:	8013      	strh	r3, [r2, #0]

        i = i + numCols * 4;
 8012254:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012258:	b29b      	uxth	r3, r3
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	b29a      	uxth	r2, r3
 801225e:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8012262:	4413      	add	r3, r2
 8012264:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a

        /* Decrement the row loop counter */
        row--;
 8012268:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 801226c:	3b01      	subs	r3, #1
 801226e:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 8012272:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8012276:	2b00      	cmp	r3, #0
 8012278:	f47f acaf 	bne.w	8011bda <arm_mat_vec_mult_q15+0x78>
    }

    /* process any remaining rows */
    row = numRows & 3u;
 801227c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8012280:	b29b      	uxth	r3, r3
 8012282:	f003 0303 	and.w	r3, r3, #3
 8012286:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 801228a:	e1a3      	b.n	80125d4 <arm_mat_vec_mult_q15+0xa72>

        q63_t sum = 0;
 801228c:	f04f 0200 	mov.w	r2, #0
 8012290:	f04f 0300 	mov.w	r3, #0
 8012294:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        pInVec = pVec;
 8012298:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801229c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122a0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80122a4:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 80122a8:	6812      	ldr	r2, [r2, #0]
 80122aa:	601a      	str	r2, [r3, #0]
        pInA1 = pSrcA + i;
 80122ac:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80122b0:	005b      	lsls	r3, r3, #1
 80122b2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80122b6:	441a      	add	r2, r3
 80122b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80122c0:	601a      	str	r2, [r3, #0]

        // loop unrolling - process 4 elements at a time
        colCnt = numCols >> 2;
 80122c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80122c6:	089b      	lsrs	r3, r3, #2
 80122c8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        while (colCnt > 0) {
 80122cc:	e104      	b.n	80124d8 <arm_mat_vec_mult_q15+0x976>
            vecData = read_q15x2_ia (&pInVec);
 80122ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	1d1a      	adds	r2, r3, #4
 80122da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122de:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122e2:	601a      	str	r2, [r3, #0]
 80122e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	1f1a      	subs	r2, r3, #4
 80122f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80122f8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80122fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	461a      	mov	r2, r3
 8012308:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801230c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8012310:	601a      	str	r2, [r3, #0]
  return (val);
 8012312:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012316:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            vecData2 = read_q15x2_ia (&pInVec);
 8012320:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012324:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	1d1a      	adds	r2, r3, #4
 801232c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012330:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801233a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	1f1a      	subs	r2, r3, #4
 8012342:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012346:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801234a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801234c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	461a      	mov	r2, r3
 801235a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801235e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8012362:	601a      	str	r2, [r3, #0]
  return (val);
 8012364:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012368:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
            matData = read_q15x2_ia (&pInA1);
 8012372:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	1d1a      	adds	r2, r3, #4
 801237e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012382:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801238c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	1f1a      	subs	r2, r3, #4
 8012394:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801239c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801239e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	461a      	mov	r2, r3
 80123ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80123b4:	601a      	str	r2, [r3, #0]
  return (val);
 80123b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            matData2 = read_q15x2_ia (&pInA1);
 80123c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	1d1a      	adds	r2, r3, #4
 80123d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80123d8:	601a      	str	r2, [r3, #0]
 80123da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	1f1a      	subs	r2, r3, #4
 80123e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80123ee:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80123f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	461a      	mov	r2, r3
 80123fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012402:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8012406:	601a      	str	r2, [r3, #0]
  return (val);
 8012408:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801240c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            sum = __SMLALD(matData, vecData, sum);
 8012416:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 801241a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801241e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8012422:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8012426:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 801242a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  llr.w64 = acc;
 801242e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8012432:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012436:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801243a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012444:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 801244e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8012452:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8012456:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 801245a:	f5a1 71c0 	sub.w	r1, r1, #384	@ 0x180
 801245e:	600a      	str	r2, [r1, #0]
 8012460:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012464:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8012468:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 801246a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801246e:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            sum = __SMLALD(matData2, vecData2, sum);
 8012472:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8012476:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 801247a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801247e:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 8012482:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8012486:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
  llr.w64 = acc;
 801248a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 801248e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012492:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012496:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80124aa:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80124ae:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80124b2:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80124b6:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80124ba:	600a      	str	r2, [r1, #0]
 80124bc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80124c0:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80124c4:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80124c6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80124ca:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 80124ce:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80124d2:	3b01      	subs	r3, #1
 80124d4:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 80124d8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f47f aef6 	bne.w	80122ce <arm_mat_vec_mult_q15+0x76c>
        }

        // process remainder of row
        colCnt = numCols & 3u;
 80124e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	f003 0303 	and.w	r3, r3, #3
 80124ec:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 80124f0:	e043      	b.n	801257a <arm_mat_vec_mult_q15+0xa18>
            sum += (q63_t)*pInA1++ * *pInVec++;
 80124f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	1c99      	adds	r1, r3, #2
 80124fe:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012502:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8012506:	6011      	str	r1, [r2, #0]
 8012508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801250c:	b21b      	sxth	r3, r3
 801250e:	17da      	asrs	r2, r3, #31
 8012510:	633b      	str	r3, [r7, #48]	@ 0x30
 8012512:	637a      	str	r2, [r7, #52]	@ 0x34
 8012514:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012518:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	1c99      	adds	r1, r3, #2
 8012520:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012524:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8012528:	6011      	str	r1, [r2, #0]
 801252a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801252e:	b21b      	sxth	r3, r3
 8012530:	17da      	asrs	r2, r3, #31
 8012532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012536:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 801253a:	464b      	mov	r3, r9
 801253c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8012540:	4652      	mov	r2, sl
 8012542:	fb02 f203 	mul.w	r2, r2, r3
 8012546:	465b      	mov	r3, fp
 8012548:	4641      	mov	r1, r8
 801254a:	fb01 f303 	mul.w	r3, r1, r3
 801254e:	4413      	add	r3, r2
 8012550:	4642      	mov	r2, r8
 8012552:	4651      	mov	r1, sl
 8012554:	fba2 4501 	umull	r4, r5, r2, r1
 8012558:	442b      	add	r3, r5
 801255a:	461d      	mov	r5, r3
 801255c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8012560:	1911      	adds	r1, r2, r4
 8012562:	6039      	str	r1, [r7, #0]
 8012564:	416b      	adcs	r3, r5
 8012566:	607b      	str	r3, [r7, #4]
 8012568:	e9d7 2300 	ldrd	r2, r3, [r7]
 801256c:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 8012570:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8012574:	3b01      	subs	r3, #1
 8012576:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 801257a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1b7      	bne.n	80124f2 <arm_mat_vec_mult_q15+0x990>
        }
        *px++ = (q15_t)(__SSAT((sum >> 15), 16));
 8012582:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8012586:	f04f 0200 	mov.w	r2, #0
 801258a:	f04f 0300 	mov.w	r3, #0
 801258e:	0bc2      	lsrs	r2, r0, #15
 8012590:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8012594:	13cb      	asrs	r3, r1, #15
 8012596:	4613      	mov	r3, r2
 8012598:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801259c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80125a0:	f303 030f 	ssat	r3, #16, r3
 80125a4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80125a8:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 80125ac:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80125b0:	1c9a      	adds	r2, r3, #2
 80125b2:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80125b6:	b20a      	sxth	r2, r1
 80125b8:	801a      	strh	r2, [r3, #0]
        i = i + numCols;
 80125ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80125be:	b29a      	uxth	r2, r3
 80125c0:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80125c4:	4413      	add	r3, r2
 80125c6:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
        row--;
 80125ca:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80125ce:	3b01      	subs	r3, #1
 80125d0:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 80125d4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80125d8:	2b00      	cmp	r3, #0
 80125da:	f47f ae57 	bne.w	801228c <arm_mat_vec_mult_q15+0x72a>
    }
}
 80125de:	bf00      	nop
 80125e0:	bf00      	nop
 80125e2:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 80125e6:	46bd      	mov	sp, r7
 80125e8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80125ec:	4770      	bx	lr

080125ee <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 80125ee:	b480      	push	{r7}
 80125f0:	b09d      	sub	sp, #116	@ 0x74
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	60f8      	str	r0, [r7, #12]
 80125f6:	60b9      	str	r1, [r7, #8]
 80125f8:	607a      	str	r2, [r7, #4]
 80125fa:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 80125fc:	2300      	movs	r3, #0
 80125fe:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	1c9a      	adds	r2, r3, #2
 8012604:	60fa      	str	r2, [r7, #12]
 8012606:	881b      	ldrh	r3, [r3, #0]
 8012608:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 801260c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012610:	2b00      	cmp	r3, #0
 8012612:	dc0c      	bgt.n	801262e <arm_absmax_q15+0x40>
 8012614:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012618:	2200      	movs	r2, #0
 801261a:	65ba      	str	r2, [r7, #88]	@ 0x58
 801261c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801261e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012620:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012622:	fad3 f312 	qsub16	r3, r3, r2
 8012626:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8012628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801262a:	b21b      	sxth	r3, r3
 801262c:	e001      	b.n	8012632 <arm_absmax_q15+0x44>
 801262e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012632:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8012636:	2300      	movs	r3, #0
 8012638:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	3b01      	subs	r3, #1
 801263e:	089b      	lsrs	r3, r3, #2
 8012640:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8012642:	e0a5      	b.n	8012790 <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	1c9a      	adds	r2, r3, #2
 8012648:	60fa      	str	r2, [r7, #12]
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8012650:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012654:	2b00      	cmp	r3, #0
 8012656:	dc0c      	bgt.n	8012672 <arm_absmax_q15+0x84>
 8012658:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 801265c:	2200      	movs	r2, #0
 801265e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8012660:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012666:	fad3 f312 	qsub16	r3, r3, r2
 801266a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 801266c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801266e:	b21b      	sxth	r3, r3
 8012670:	e001      	b.n	8012676 <arm_absmax_q15+0x88>
 8012672:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012676:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 801267a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801267e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012682:	429a      	cmp	r2, r3
 8012684:	dd06      	ble.n	8012694 <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8012686:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801268a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 801268e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012690:	3301      	adds	r3, #1
 8012692:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	1c9a      	adds	r2, r3, #2
 8012698:	60fa      	str	r2, [r7, #12]
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80126a0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	dc0c      	bgt.n	80126c2 <arm_absmax_q15+0xd4>
 80126a8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80126ac:	2200      	movs	r2, #0
 80126ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80126b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80126b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126b6:	fad3 f312 	qsub16	r3, r3, r2
 80126ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80126bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126be:	b21b      	sxth	r3, r3
 80126c0:	e001      	b.n	80126c6 <arm_absmax_q15+0xd8>
 80126c2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80126c6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 80126ca:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80126ce:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80126d2:	429a      	cmp	r2, r3
 80126d4:	dd06      	ble.n	80126e4 <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80126d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80126da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 80126de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80126e0:	3302      	adds	r3, #2
 80126e2:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	1c9a      	adds	r2, r3, #2
 80126e8:	60fa      	str	r2, [r7, #12]
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80126f0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	dc0c      	bgt.n	8012712 <arm_absmax_q15+0x124>
 80126f8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80126fc:	2200      	movs	r2, #0
 80126fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8012700:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012706:	fad3 f312 	qsub16	r3, r3, r2
 801270a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801270e:	b21b      	sxth	r3, r3
 8012710:	e001      	b.n	8012716 <arm_absmax_q15+0x128>
 8012712:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012716:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 801271a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801271e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012722:	429a      	cmp	r2, r3
 8012724:	dd06      	ble.n	8012734 <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012726:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801272a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 801272e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012730:	3303      	adds	r3, #3
 8012732:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	1c9a      	adds	r2, r3, #2
 8012738:	60fa      	str	r2, [r7, #12]
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8012740:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012744:	2b00      	cmp	r3, #0
 8012746:	dc0c      	bgt.n	8012762 <arm_absmax_q15+0x174>
 8012748:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 801274c:	2200      	movs	r2, #0
 801274e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012750:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012756:	fad3 f312 	qsub16	r3, r3, r2
 801275a:	623b      	str	r3, [r7, #32]
  return(result);
 801275c:	6a3b      	ldr	r3, [r7, #32]
 801275e:	b21b      	sxth	r3, r3
 8012760:	e001      	b.n	8012766 <arm_absmax_q15+0x178>
 8012762:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012766:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 801276a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801276e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012772:	429a      	cmp	r2, r3
 8012774:	dd06      	ble.n	8012784 <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012776:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801277a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 801277e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012780:	3304      	adds	r3, #4
 8012782:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 8012784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012786:	3304      	adds	r3, #4
 8012788:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 801278a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801278c:	3b01      	subs	r3, #1
 801278e:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8012790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012792:	2b00      	cmp	r3, #0
 8012794:	f47f af56 	bne.w	8012644 <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	3b01      	subs	r3, #1
 801279c:	f003 0303 	and.w	r3, r3, #3
 80127a0:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80127a2:	e02b      	b.n	80127fc <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	1c9a      	adds	r2, r3, #2
 80127a8:	60fa      	str	r2, [r7, #12]
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80127b0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	dc0c      	bgt.n	80127d2 <arm_absmax_q15+0x1e4>
 80127b8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127bc:	2200      	movs	r2, #0
 80127be:	61fa      	str	r2, [r7, #28]
 80127c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	69ba      	ldr	r2, [r7, #24]
 80127c6:	fad3 f312 	qsub16	r3, r3, r2
 80127ca:	617b      	str	r3, [r7, #20]
  return(result);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	b21b      	sxth	r3, r3
 80127d0:	e001      	b.n	80127d6 <arm_absmax_q15+0x1e8>
 80127d2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127d6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 80127da:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80127de:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80127e2:	429a      	cmp	r2, r3
 80127e4:	dd07      	ble.n	80127f6 <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80127e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80127ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127f2:	1ad3      	subs	r3, r2, r3
 80127f4:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 80127f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127f8:	3b01      	subs	r3, #1
 80127fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 80127fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1d0      	bne.n	80127a4 <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8012808:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801280e:	601a      	str	r2, [r3, #0]
}
 8012810:	bf00      	nop
 8012812:	3774      	adds	r7, #116	@ 0x74
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <arm_copy_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_copy_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 801281c:	b480      	push	{r7}
 801281e:	b087      	sub	sp, #28
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801282c:	e00b      	b.n	8012846 <arm_copy_q15+0x2a>
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	1c93      	adds	r3, r2, #2
 8012832:	60fb      	str	r3, [r7, #12]
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	1c99      	adds	r1, r3, #2
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801283e:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3b01      	subs	r3, #1
 8012844:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d1f0      	bne.n	801282e <arm_copy_q15+0x12>
  }
}
 801284c:	bf00      	nop
 801284e:	bf00      	nop
 8012850:	371c      	adds	r7, #28
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	4770      	bx	lr

0801285a <arm_bitreversal_16>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_16(
        uint16_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 801285a:	b480      	push	{r7}
 801285c:	b089      	sub	sp, #36	@ 0x24
 801285e:	af00      	add	r7, sp, #0
 8012860:	60f8      	str	r0, [r7, #12]
 8012862:	460b      	mov	r3, r1
 8012864:	607a      	str	r2, [r7, #4]
 8012866:	817b      	strh	r3, [r7, #10]
  uint16_t a, b, tmp;
  uint32_t i;

  for (i = 0; i < bitRevLen; )
 8012868:	2300      	movs	r3, #0
 801286a:	61fb      	str	r3, [r7, #28]
 801286c:	e041      	b.n	80128f2 <arm_bitreversal_16+0x98>
  {
     a = pBitRevTab[i    ] >> 2;
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	4413      	add	r3, r2
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	089b      	lsrs	r3, r3, #2
 801287a:	837b      	strh	r3, [r7, #26]
     b = pBitRevTab[i + 1] >> 2;
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	3301      	adds	r3, #1
 8012880:	005b      	lsls	r3, r3, #1
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	089b      	lsrs	r3, r3, #2
 801288a:	833b      	strh	r3, [r7, #24]

     //real
     tmp = pSrc[a];
 801288c:	8b7b      	ldrh	r3, [r7, #26]
 801288e:	005b      	lsls	r3, r3, #1
 8012890:	68fa      	ldr	r2, [r7, #12]
 8012892:	4413      	add	r3, r2
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	82fb      	strh	r3, [r7, #22]
     pSrc[a] = pSrc[b];
 8012898:	8b3b      	ldrh	r3, [r7, #24]
 801289a:	005b      	lsls	r3, r3, #1
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	441a      	add	r2, r3
 80128a0:	8b7b      	ldrh	r3, [r7, #26]
 80128a2:	005b      	lsls	r3, r3, #1
 80128a4:	68f9      	ldr	r1, [r7, #12]
 80128a6:	440b      	add	r3, r1
 80128a8:	8812      	ldrh	r2, [r2, #0]
 80128aa:	801a      	strh	r2, [r3, #0]
     pSrc[b] = tmp;
 80128ac:	8b3b      	ldrh	r3, [r7, #24]
 80128ae:	005b      	lsls	r3, r3, #1
 80128b0:	68fa      	ldr	r2, [r7, #12]
 80128b2:	4413      	add	r3, r2
 80128b4:	8afa      	ldrh	r2, [r7, #22]
 80128b6:	801a      	strh	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80128b8:	8b7b      	ldrh	r3, [r7, #26]
 80128ba:	3301      	adds	r3, #1
 80128bc:	005b      	lsls	r3, r3, #1
 80128be:	68fa      	ldr	r2, [r7, #12]
 80128c0:	4413      	add	r3, r2
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	82fb      	strh	r3, [r7, #22]
     pSrc[a+1] = pSrc[b+1];
 80128c6:	8b3b      	ldrh	r3, [r7, #24]
 80128c8:	3301      	adds	r3, #1
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	441a      	add	r2, r3
 80128d0:	8b7b      	ldrh	r3, [r7, #26]
 80128d2:	3301      	adds	r3, #1
 80128d4:	005b      	lsls	r3, r3, #1
 80128d6:	68f9      	ldr	r1, [r7, #12]
 80128d8:	440b      	add	r3, r1
 80128da:	8812      	ldrh	r2, [r2, #0]
 80128dc:	801a      	strh	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80128de:	8b3b      	ldrh	r3, [r7, #24]
 80128e0:	3301      	adds	r3, #1
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	4413      	add	r3, r2
 80128e8:	8afa      	ldrh	r2, [r7, #22]
 80128ea:	801a      	strh	r2, [r3, #0]

    i += 2;
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	3302      	adds	r3, #2
 80128f0:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80128f2:	897b      	ldrh	r3, [r7, #10]
 80128f4:	69fa      	ldr	r2, [r7, #28]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d3b9      	bcc.n	801286e <arm_bitreversal_16+0x14>
  }
}
 80128fa:	bf00      	nop
 80128fc:	bf00      	nop
 80128fe:	3724      	adds	r7, #36	@ 0x24
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <arm_cfft_q15>:
ARM_DSP_ATTRIBUTE void arm_cfft_q15(
  const arm_cfft_instance_q15 * S,
        q15_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b086      	sub	sp, #24
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	4611      	mov	r1, r2
 8012914:	461a      	mov	r2, r3
 8012916:	460b      	mov	r3, r1
 8012918:	71fb      	strb	r3, [r7, #7]
 801291a:	4613      	mov	r3, r2
 801291c:	71bb      	strb	r3, [r7, #6]
  uint32_t L = S->fftLen;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	617b      	str	r3, [r7, #20]

  if (ifftFlag == 1U)
 8012924:	79fb      	ldrb	r3, [r7, #7]
 8012926:	2b01      	cmp	r3, #1
 8012928:	d14c      	bne.n	80129c4 <arm_cfft_q15+0xbc>
  {
     switch (L)
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012930:	d038      	beq.n	80129a4 <arm_cfft_q15+0x9c>
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012938:	f200 808f 	bhi.w	8012a5a <arm_cfft_q15+0x152>
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012942:	d037      	beq.n	80129b4 <arm_cfft_q15+0xac>
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801294a:	f200 8086 	bhi.w	8012a5a <arm_cfft_q15+0x152>
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012954:	d026      	beq.n	80129a4 <arm_cfft_q15+0x9c>
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801295c:	d87d      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012964:	d026      	beq.n	80129b4 <arm_cfft_q15+0xac>
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801296c:	d875      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012974:	d016      	beq.n	80129a4 <arm_cfft_q15+0x9c>
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801297c:	d86d      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	2b80      	cmp	r3, #128	@ 0x80
 8012982:	d017      	beq.n	80129b4 <arm_cfft_q15+0xac>
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	2b80      	cmp	r3, #128	@ 0x80
 8012988:	d867      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	2b40      	cmp	r3, #64	@ 0x40
 801298e:	d009      	beq.n	80129a4 <arm_cfft_q15+0x9c>
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	2b40      	cmp	r3, #64	@ 0x40
 8012994:	d861      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	2b10      	cmp	r3, #16
 801299a:	d003      	beq.n	80129a4 <arm_cfft_q15+0x9c>
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	2b20      	cmp	r3, #32
 80129a0:	d008      	beq.n	80129b4 <arm_cfft_q15+0xac>
 80129a2:	e05a      	b.n	8012a5a <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_inverse_q15 ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	685a      	ldr	r2, [r3, #4]
 80129a8:	2301      	movs	r3, #1
 80129aa:	6979      	ldr	r1, [r7, #20]
 80129ac:	68b8      	ldr	r0, [r7, #8]
 80129ae:	f001 ffdf 	bl	8014970 <arm_radix4_butterfly_inverse_q15>
       break;
 80129b2:	e052      	b.n	8012a5a <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_inverse_q15 ( p1, L, S->pTwiddle );
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	461a      	mov	r2, r3
 80129ba:	6979      	ldr	r1, [r7, #20]
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	f000 f9a7 	bl	8012d10 <arm_cfft_radix4by2_inverse_q15>
       break;
 80129c2:	e04a      	b.n	8012a5a <arm_cfft_q15+0x152>
     }
  }
  else
  {
     switch (L)
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129ca:	d036      	beq.n	8012a3a <arm_cfft_q15+0x132>
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129d2:	d842      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80129da:	d036      	beq.n	8012a4a <arm_cfft_q15+0x142>
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80129e2:	d83a      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80129ea:	d026      	beq.n	8012a3a <arm_cfft_q15+0x132>
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80129f2:	d832      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80129fa:	d026      	beq.n	8012a4a <arm_cfft_q15+0x142>
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a02:	d82a      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a0a:	d016      	beq.n	8012a3a <arm_cfft_q15+0x132>
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a12:	d822      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	2b80      	cmp	r3, #128	@ 0x80
 8012a18:	d017      	beq.n	8012a4a <arm_cfft_q15+0x142>
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	2b80      	cmp	r3, #128	@ 0x80
 8012a1e:	d81c      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	2b40      	cmp	r3, #64	@ 0x40
 8012a24:	d009      	beq.n	8012a3a <arm_cfft_q15+0x132>
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	2b40      	cmp	r3, #64	@ 0x40
 8012a2a:	d816      	bhi.n	8012a5a <arm_cfft_q15+0x152>
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	2b10      	cmp	r3, #16
 8012a30:	d003      	beq.n	8012a3a <arm_cfft_q15+0x132>
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	2b20      	cmp	r3, #32
 8012a36:	d008      	beq.n	8012a4a <arm_cfft_q15+0x142>
 8012a38:	e00f      	b.n	8012a5a <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	685a      	ldr	r2, [r3, #4]
 8012a3e:	2301      	movs	r3, #1
 8012a40:	6979      	ldr	r1, [r7, #20]
 8012a42:	68b8      	ldr	r0, [r7, #8]
 8012a44:	f000 fab0 	bl	8012fa8 <arm_radix4_butterfly_q15>
       break;
 8012a48:	e007      	b.n	8012a5a <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	461a      	mov	r2, r3
 8012a50:	6979      	ldr	r1, [r7, #20]
 8012a52:	68b8      	ldr	r0, [r7, #8]
 8012a54:	f000 f810 	bl	8012a78 <arm_cfft_radix4by2_q15>
       break;
 8012a58:	bf00      	nop
     }
  }

  if ( bitReverseFlag )
 8012a5a:	79bb      	ldrb	r3, [r7, #6]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d007      	beq.n	8012a70 <arm_cfft_q15+0x168>
    arm_bitreversal_16 ((uint16_t*) p1, S->bitRevLength, S->pBitRevTable);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	8999      	ldrh	r1, [r3, #12]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	689b      	ldr	r3, [r3, #8]
 8012a68:	461a      	mov	r2, r3
 8012a6a:	68b8      	ldr	r0, [r7, #8]
 8012a6c:	f7ff fef5 	bl	801285a <arm_bitreversal_16>
}
 8012a70:	bf00      	nop
 8012a72:	3718      	adds	r7, #24
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <arm_cfft_radix4by2_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b0b0      	sub	sp, #192	@ 0xc0
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	005b      	lsls	r3, r3, #1
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	4413      	add	r3, r2
 8012a94:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	085b      	lsrs	r3, r3, #1
 8012a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012aa6:	e0a9      	b.n	8012bfc <arm_cfft_radix4by2_q15+0x184>
  {
      coeff = read_q15x2_ia (&pC);
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aaa:	3304      	adds	r3, #4
 8012aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8012aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab0:	3b04      	subs	r3, #4
 8012ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012abc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      T = read_q15x2 (pSi);
 8012ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	623b      	str	r3, [r7, #32]
  return (val);
 8012aca:	6a3b      	ldr	r3, [r7, #32]
 8012acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012ade:	fa93 f322 	shadd16	r3, r3, r2
 8012ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      S = read_q15x2 (pSl);
 8012aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	61fb      	str	r3, [r7, #28]
  return (val);
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012afe:	657b      	str	r3, [r7, #84]	@ 0x54
 8012b00:	2300      	movs	r3, #0
 8012b02:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b08:	fa93 f322 	shadd16	r3, r3, r2
 8012b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      R = __QSUB16(T, S);
 8012b14:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012b1c:	663a      	str	r2, [r7, #96]	@ 0x60
 8012b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012b24:	fad3 f312 	qsub16	r3, r3, r2
 8012b28:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012b30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012b34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012b38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012b40:	fa93 f322 	shadd16	r3, r3, r2
 8012b44:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b48:	461a      	mov	r2, r3
 8012b4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b50:	673a      	str	r2, [r7, #112]	@ 0x70
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8012b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b54:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8012b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	69ba      	ldr	r2, [r7, #24]
 8012b5c:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8012b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	1d1a      	adds	r2, r3, #4
 8012b64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b66:	601a      	str	r2, [r3, #0]
}
 8012b68:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
      out1 = __SMUAD(coeff, R) >> 16U;
 8012b6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012b7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012b7e:	fb23 f302 	smuad	r3, r3, r2
 8012b82:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b86:	0c1b      	lsrs	r3, r3, #16
 8012b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      out2 = __SMUSDX(coeff, R);
 8012b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012b94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012ba0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012ba4:	fb43 f312 	smusdx	r3, r3, r2
 8012ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
      out1 = __SMUSDX(R, coeff) >> 16U;
      out2 = __SMUAD(coeff, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ) );
 8012bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012bbe:	4b53      	ldr	r3, [pc, #332]	@ (8012d0c <arm_cfft_radix4by2_q15+0x294>)
 8012bc0:	400b      	ands	r3, r1
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012bce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012bd6:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8012bd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	697a      	ldr	r2, [r7, #20]
 8012be0:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	1d1a      	adds	r2, r3, #4
 8012bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012bee:	601a      	str	r2, [r3, #0]
}
 8012bf0:	bf00      	nop
  for (i = n2; i > 0; i--)
 8012bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	f47f af51 	bne.w	8012aa8 <arm_cfft_radix4by2_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8012c06:	2302      	movs	r3, #2
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012c0e:	68f8      	ldr	r0, [r7, #12]
 8012c10:	f000 f9ca 	bl	8012fa8 <arm_radix4_butterfly_q15>

  /* second col */
  arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	18d0      	adds	r0, r2, r3
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012c24:	f000 f9c0 	bl	8012fa8 <arm_radix4_butterfly_q15>

  n2 = fftLen >> 1U;
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	085b      	lsrs	r3, r3, #1
 8012c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8012c30:	2300      	movs	r3, #0
 8012c32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012c36:	e05e      	b.n	8012cf6 <arm_cfft_radix4by2_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8012c38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012c3c:	00db      	lsls	r3, r3, #3
 8012c3e:	68fa      	ldr	r2, [r7, #12]
 8012c40:	4413      	add	r3, r2
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8012c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012c4c:	00db      	lsls	r3, r3, #3
 8012c4e:	3302      	adds	r3, #2
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	4413      	add	r3, r2
 8012c54:	881b      	ldrh	r3, [r3, #0]
 8012c56:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 8012c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012c5e:	00db      	lsls	r3, r3, #3
 8012c60:	3304      	adds	r3, #4
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	4413      	add	r3, r2
 8012c66:	881b      	ldrh	r3, [r3, #0]
 8012c68:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8012c6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012c70:	00db      	lsls	r3, r3, #3
 8012c72:	3306      	adds	r3, #6
 8012c74:	68fa      	ldr	r2, [r7, #12]
 8012c76:	4413      	add	r3, r2
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8012c7e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8012c82:	005b      	lsls	r3, r3, #1
 8012c84:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 8012c88:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8012c8c:	005b      	lsls	r3, r3, #1
 8012c8e:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8012c92:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8012c9c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8012ca0:	005b      	lsls	r3, r3, #1
 8012ca2:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 8012ca6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012caa:	00db      	lsls	r3, r3, #3
 8012cac:	68fa      	ldr	r2, [r7, #12]
 8012cae:	4413      	add	r3, r2
 8012cb0:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8012cb4:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 8012cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012cba:	00db      	lsls	r3, r3, #3
 8012cbc:	3302      	adds	r3, #2
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8012cc6:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 8012cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ccc:	00db      	lsls	r3, r3, #3
 8012cce:	3304      	adds	r3, #4
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	4413      	add	r3, r2
 8012cd4:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8012cd8:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8012cda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	3306      	adds	r3, #6
 8012ce2:	68fa      	ldr	r2, [r7, #12]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8012cea:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8012cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012cf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d39a      	bcc.n	8012c38 <arm_cfft_radix4by2_q15+0x1c0>
  }

}
 8012d02:	bf00      	nop
 8012d04:	bf00      	nop
 8012d06:	37c0      	adds	r7, #192	@ 0xc0
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	ffff0000 	.word	0xffff0000

08012d10 <arm_cfft_radix4by2_inverse_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_inverse_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b0b0      	sub	sp, #192	@ 0xc0
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	68fa      	ldr	r2, [r7, #12]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	085b      	lsrs	r3, r3, #1
 8012d32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012d3e:	e0a9      	b.n	8012e94 <arm_cfft_radix4by2_inverse_q15+0x184>
  {
     coeff = read_q15x2_ia (&pC);
 8012d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d42:	3304      	adds	r3, #4
 8012d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d48:	3b04      	subs	r3, #4
 8012d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

     T = read_q15x2 (pSi);
 8012d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	623b      	str	r3, [r7, #32]
  return (val);
 8012d62:	6a3b      	ldr	r3, [r7, #32]
 8012d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
     T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012d6e:	2300      	movs	r3, #0
 8012d70:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d76:	fa93 f322 	shadd16	r3, r3, r2
 8012d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

     S = read_q15x2 (pSl);
 8012d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d84:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	61fb      	str	r3, [r7, #28]
  return (val);
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
     S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8012d98:	2300      	movs	r3, #0
 8012d9a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012da0:	fa93 f322 	shadd16	r3, r3, r2
 8012da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

     R = __QSUB16(T, S);
 8012dac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012db4:	663a      	str	r2, [r7, #96]	@ 0x60
 8012db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012db8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012dba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012dbc:	fad3 f312 	qsub16	r3, r3, r2
 8012dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

     write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012dc8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012dd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012dd6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012dd8:	fa93 f322 	shadd16	r3, r3, r2
 8012ddc:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012de0:	461a      	mov	r2, r3
 8012de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012de6:	677b      	str	r3, [r7, #116]	@ 0x74
 8012de8:	673a      	str	r2, [r7, #112]	@ 0x70
  q31_t val = value;
 8012dea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012dec:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ15, &val, 4);
 8012dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	69ba      	ldr	r2, [r7, #24]
 8012df4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	1d1a      	adds	r2, r3, #4
 8012dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012dfe:	601a      	str	r2, [r3, #0]
}
 8012e00:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
     out1 = __SMUSD(coeff, R) >> 16U;
 8012e02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012e0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012e14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012e16:	fb43 f302 	smusd	r3, r3, r2
 8012e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012e1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012e1e:	0c1b      	lsrs	r3, r3, #16
 8012e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
     out2 = __SMUADX(coeff, R);
 8012e24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012e28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012e2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012e38:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012e3c:	fb23 f312 	smuadx	r3, r3, r2
 8012e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
     out1 = __SMUADX(R, coeff) >> 16U;
     out2 = __SMUSD(__QSUB(0, coeff), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

     write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ));
 8012e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012e56:	4b53      	ldr	r3, [pc, #332]	@ (8012fa4 <arm_cfft_radix4by2_inverse_q15+0x294>)
 8012e58:	400b      	ands	r3, r1
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012e66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012e6e:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8012e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	697a      	ldr	r2, [r7, #20]
 8012e78:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	1d1a      	adds	r2, r3, #4
 8012e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e86:	601a      	str	r2, [r3, #0]
}
 8012e88:	bf00      	nop
  for (i = n2; i > 0; i--)
 8012e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012e8e:	3b01      	subs	r3, #1
 8012e90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	f47f af51 	bne.w	8012d40 <arm_cfft_radix4by2_inverse_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_inverse_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8012e9e:	2302      	movs	r3, #2
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012ea6:	68f8      	ldr	r0, [r7, #12]
 8012ea8:	f001 fd62 	bl	8014970 <arm_radix4_butterfly_inverse_q15>

  /* second col */
  arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	005b      	lsls	r3, r3, #1
 8012eb0:	68fa      	ldr	r2, [r7, #12]
 8012eb2:	18d0      	adds	r0, r2, r3
 8012eb4:	2302      	movs	r3, #2
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012ebc:	f001 fd58 	bl	8014970 <arm_radix4_butterfly_inverse_q15>

  n2 = fftLen >> 1U;
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	085b      	lsrs	r3, r3, #1
 8012ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8012ec8:	2300      	movs	r3, #0
 8012eca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012ece:	e05e      	b.n	8012f8e <arm_cfft_radix4by2_inverse_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8012ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	4413      	add	r3, r2
 8012eda:	881b      	ldrh	r3, [r3, #0]
 8012edc:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8012ee0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ee4:	00db      	lsls	r3, r3, #3
 8012ee6:	3302      	adds	r3, #2
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	4413      	add	r3, r2
 8012eec:	881b      	ldrh	r3, [r3, #0]
 8012eee:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 8012ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ef6:	00db      	lsls	r3, r3, #3
 8012ef8:	3304      	adds	r3, #4
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	4413      	add	r3, r2
 8012efe:	881b      	ldrh	r3, [r3, #0]
 8012f00:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8012f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f08:	00db      	lsls	r3, r3, #3
 8012f0a:	3306      	adds	r3, #6
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	4413      	add	r3, r2
 8012f10:	881b      	ldrh	r3, [r3, #0]
 8012f12:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8012f16:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8012f1a:	005b      	lsls	r3, r3, #1
 8012f1c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 8012f20:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8012f24:	005b      	lsls	r3, r3, #1
 8012f26:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8012f2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8012f34:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 8012f3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	68fa      	ldr	r2, [r7, #12]
 8012f46:	4413      	add	r3, r2
 8012f48:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8012f4c:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 8012f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	3302      	adds	r3, #2
 8012f56:	68fa      	ldr	r2, [r7, #12]
 8012f58:	4413      	add	r3, r2
 8012f5a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8012f5e:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 8012f60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f64:	00db      	lsls	r3, r3, #3
 8012f66:	3304      	adds	r3, #4
 8012f68:	68fa      	ldr	r2, [r7, #12]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8012f70:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8012f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f76:	00db      	lsls	r3, r3, #3
 8012f78:	3306      	adds	r3, #6
 8012f7a:	68fa      	ldr	r2, [r7, #12]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8012f82:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8012f84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f88:	3301      	adds	r3, #1
 8012f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012f8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d39a      	bcc.n	8012ed0 <arm_cfft_radix4by2_inverse_q15+0x1c0>
  }
}
 8012f9a:	bf00      	nop
 8012f9c:	bf00      	nop
 8012f9e:	37c0      	adds	r7, #192	@ 0xc0
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	ffff0000 	.word	0xffff0000

08012fa8 <arm_radix4_butterfly_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 8012fa8:	b490      	push	{r4, r7}
 8012faa:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 8012fb4:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 8012fb8:	6020      	str	r0, [r4, #0]
 8012fba:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8012fbe:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8012fc2:	6001      	str	r1, [r0, #0]
 8012fc4:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8012fc8:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8012fcc:	600a      	str	r2, [r1, #0]
 8012fce:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8012fd2:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8012fd6:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8012fd8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8012fdc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8012fe6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8012fea:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8012fee:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8012ff2:	089b      	lsrs	r3, r3, #2
 8012ff4:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 8012ffe:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013002:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8013006:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801300a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801300e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013012:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013016:	6812      	ldr	r2, [r2, #0]
 8013018:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 801301a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801301e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013022:	681a      	ldr	r2, [r3, #0]
 8013024:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013028:	009b      	lsls	r3, r3, #2
 801302a:	441a      	add	r2, r3
 801302c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013030:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013034:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8013036:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801303a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	441a      	add	r2, r3
 8013048:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801304c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013050:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8013052:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013056:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	441a      	add	r2, r3
 8013064:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013068:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801306c:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /* Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 801306e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013072:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801307c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8013080:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013082:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013086:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	461a      	mov	r2, r3
 8013090:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013094:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8013098:	601a      	str	r2, [r3, #0]
  return (val);
 801309a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801309e:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80130a8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80130ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130ba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80130be:	2200      	movs	r2, #0
 80130c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80130c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80130d0:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 80130d4:	6812      	ldr	r2, [r2, #0]
 80130d6:	fa93 f222 	shadd16	r2, r3, r2
 80130da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80130e2:	601a      	str	r2, [r3, #0]
  return(result);
 80130e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130e8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* it turns out doing this twice is 2 cycles, the alternative takes 3 cycles */
 80130f2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80130f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80130fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013104:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8013108:	2200      	movs	r2, #0
 801310a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801310c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013110:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801311a:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 801311e:	6812      	ldr	r2, [r2, #0]
 8013120:	fa93 f222 	shadd16	r2, r3, r2
 8013124:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013128:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801312c:	601a      	str	r2, [r3, #0]
  return(result);
 801312e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013132:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
     T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);
*/

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 801313c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013140:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801314a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801314e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013150:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013154:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	461a      	mov	r2, r3
 801315e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013162:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8013166:	601a      	str	r2, [r3, #0]
  return (val);
 8013168:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801316c:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8013176:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801317a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801317e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8013182:	601a      	str	r2, [r3, #0]
 8013184:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013188:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 801318c:	2200      	movs	r2, #0
 801318e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013190:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013194:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801319e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80131a2:	6812      	ldr	r2, [r2, #0]
 80131a4:	fa93 f222 	shadd16	r2, r3, r2
 80131a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80131b0:	601a      	str	r2, [r3, #0]
  return(result);
 80131b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 80131c0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80131c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131c8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131d2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80131d6:	2200      	movs	r2, #0
 80131d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80131da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80131e8:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 80131ec:	6812      	ldr	r2, [r2, #0]
 80131ee:	fa93 f222 	shadd16	r2, r3, r2
 80131f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80131fa:	601a      	str	r2, [r3, #0]
  return(result);
 80131fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013200:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 801320a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801320e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013212:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013216:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801321a:	6019      	str	r1, [r3, #0]
 801321c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013220:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013224:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013226:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801322a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013234:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8013238:	6812      	ldr	r2, [r2, #0]
 801323a:	fa93 f212 	qadd16	r2, r3, r2
 801323e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013242:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013246:	601a      	str	r2, [r3, #0]
  return(result);
 8013248:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801324c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8013256:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801325a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801325e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013262:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8013266:	6019      	str	r1, [r3, #0]
 8013268:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801326c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8013270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013272:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013276:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013280:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8013284:	6812      	ldr	r2, [r2, #0]
 8013286:	fad3 f212 	qsub16	r2, r3, r2
 801328a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801328e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8013292:	601a      	str	r2, [r3, #0]
  return(result);
 8013294:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013298:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 80132a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132a6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132b0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80132b4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80132b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132ba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	461a      	mov	r2, r3
 80132c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132c8:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80132cc:	601a      	str	r2, [r3, #0]
  return (val);
 80132ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132d2:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80132dc:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80132e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80132f2:	2200      	movs	r2, #0
 80132f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80132f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013304:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8013308:	6812      	ldr	r2, [r2, #0]
 801330a:	fa93 f222 	shadd16	r2, r3, r2
 801330e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013312:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013316:	601a      	str	r2, [r3, #0]
  return(result);
 8013318:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801331c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013326:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801332a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801332e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8013332:	601a      	str	r2, [r3, #0]
 8013334:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013338:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 801333c:	2200      	movs	r2, #0
 801333e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013340:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013344:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801334e:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8013352:	6812      	ldr	r2, [r2, #0]
 8013354:	fa93 f222 	shadd16	r2, r3, r2
 8013358:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801335c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8013360:	601a      	str	r2, [r3, #0]
  return(result);
 8013362:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013366:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8013370:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013374:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013378:	681a      	ldr	r2, [r3, #0]
 801337a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801337e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8013382:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013384:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013388:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	461a      	mov	r2, r3
 8013392:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013396:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 801339a:	601a      	str	r2, [r3, #0]
  return (val);
 801339c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133a0:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80133aa:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80133ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133b2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80133b6:	601a      	str	r2, [r3, #0]
 80133b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80133c0:	2200      	movs	r2, #0
 80133c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80133c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80133d2:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80133d6:	6812      	ldr	r2, [r2, #0]
 80133d8:	fa93 f222 	shadd16	r2, r3, r2
 80133dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133e0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80133e4:	601a      	str	r2, [r3, #0]
  return(result);
 80133e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133ea:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80133f4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80133f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013400:	601a      	str	r2, [r3, #0]
 8013402:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013406:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801340e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013412:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801341c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8013420:	6812      	ldr	r2, [r2, #0]
 8013422:	fa93 f222 	shadd16	r2, r3, r2
 8013426:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801342a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801342e:	601a      	str	r2, [r3, #0]
  return(result);
 8013430:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013434:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 801343e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013442:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013446:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801344a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801344e:	6019      	str	r1, [r3, #0]
 8013450:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013454:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013458:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801345a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801345e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013468:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 801346c:	6812      	ldr	r2, [r2, #0]
 801346e:	fa93 f212 	qadd16	r2, r3, r2
 8013472:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013476:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801347a:	601a      	str	r2, [r3, #0]
  return(result);
 801347c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013480:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 801348a:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801348e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013492:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013496:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801349a:	6019      	str	r1, [r3, #0]
 801349c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80134a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80134b4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80134b8:	6812      	ldr	r2, [r2, #0]
 80134ba:	fa93 f222 	shadd16	r2, r3, r2
 80134be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80134c6:	601a      	str	r2, [r3, #0]
  return(result);
 80134c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	4619      	mov	r1, r3
 80134d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80134dc:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80134ea:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80134ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134f0:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 80134f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80134f8:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80134fc:	6812      	ldr	r2, [r2, #0]
 80134fe:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013500:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013504:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013510:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8013514:	6812      	ldr	r2, [r2, #0]
 8013516:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013518:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801351c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	1d1a      	adds	r2, r3, #4
 8013526:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801352a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	601a      	str	r2, [r3, #0]
}
 8013532:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8013534:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013538:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801353c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013540:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013544:	6019      	str	r1, [r3, #0]
 8013546:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801354a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801354e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013550:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013554:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801355e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8013562:	6812      	ldr	r2, [r2, #0]
 8013564:	fad3 f212 	qsub16	r2, r3, r2
 8013568:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801356c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013570:	601a      	str	r2, [r3, #0]
  return(result);
 8013572:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013576:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8013580:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013584:	00db      	lsls	r3, r3, #3
 8013586:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801358a:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801358e:	6812      	ldr	r2, [r2, #0]
 8013590:	441a      	add	r2, r3
 8013592:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013596:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801359a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801359c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	461a      	mov	r2, r3
 80135aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135ae:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80135b2:	601a      	str	r2, [r3, #0]
  return (val);
 80135b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135b8:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 80135c2:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80135c6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80135ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80135d2:	6019      	str	r1, [r3, #0]
 80135d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80135dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80135ec:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80135f0:	6812      	ldr	r2, [r2, #0]
 80135f2:	fb23 f202 	smuad	r2, r3, r2
 80135f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80135fe:	601a      	str	r2, [r3, #0]
  return(result);
 8013600:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013604:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	0c1b      	lsrs	r3, r3, #16
 801360c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 8013610:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8013614:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013618:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801361c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013620:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013626:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801362a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801362e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8013632:	6812      	ldr	r2, [r2, #0]
 8013634:	fb43 f212 	smusdx	r2, r3, r2
 8013638:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801363c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013640:	601a      	str	r2, [r3, #0]
  return(result);
 8013642:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8013650:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013654:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 801365e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	461a      	mov	r2, r3
 8013666:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801366a:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 801366e:	601a      	str	r2, [r3, #0]
  return (val);
 8013670:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013674:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801367e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013682:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8013686:	2300      	movs	r3, #0
 8013688:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801368c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8013690:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8013694:	fa93 f322 	shadd16	r3, r3, r2
 8013698:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 801369c:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80136a0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80136a4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80136a8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80136ac:	2300      	movs	r3, #0
 80136ae:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80136b2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80136b6:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80136ba:	fa93 f322 	shadd16	r3, r3, r2
 80136be:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 80136c2:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80136c6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 80136ca:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80136d4:	4bd7      	ldr	r3, [pc, #860]	@ (8013a34 <arm_radix4_butterfly_q15+0xa8c>)
 80136d6:	400b      	ands	r3, r1
 80136d8:	4313      	orrs	r3, r2
 80136da:	461a      	mov	r2, r3
 80136dc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80136e0:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80136e4:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 80136e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136ec:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80136f0:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80136f4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80136f6:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013700:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 8013704:	6812      	ldr	r2, [r2, #0]
 8013706:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013708:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	1d1a      	adds	r2, r3, #4
 8013710:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013714:	601a      	str	r2, [r3, #0]
}
 8013716:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8013718:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801371c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 8013726:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	461a      	mov	r2, r3
 801372e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013732:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013736:	601a      	str	r2, [r3, #0]
  return (val);
 8013738:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801373c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013746:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801374a:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 801374e:	2300      	movs	r3, #0
 8013750:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013754:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013758:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 801375c:	fa93 f322 	shadd16	r3, r3, r2
 8013760:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8013764:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8013768:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801376c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8013770:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8013774:	2300      	movs	r3, #0
 8013776:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801377a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 801377e:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8013782:	fa93 f322 	shadd16	r3, r3, r2
 8013786:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 801378a:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 801378e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8013792:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013796:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801379a:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 801379e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137a2:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 80137a6:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80137aa:	fad3 f312 	qsub16	r3, r3, r2
 80137ae:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 80137b2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80137b6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 80137ba:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80137be:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80137c2:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80137c6:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137ca:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80137ce:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 80137d2:	faa3 f312 	qasx	r3, r3, r2
 80137d6:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 80137da:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80137de:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 80137e2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80137e6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80137ea:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80137ee:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137f2:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80137f6:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 80137fa:	fae3 f312 	qsax	r3, r3, r2
 80137fe:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 8013802:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8013806:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QASX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 801380a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013814:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013818:	6812      	ldr	r2, [r2, #0]
 801381a:	4413      	add	r3, r2
 801381c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8013820:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	461a      	mov	r2, r3
 8013828:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801382c:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8013830:	601a      	str	r2, [r3, #0]
  return (val);
 8013832:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013836:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 8013840:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8013844:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8013848:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 801384c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013850:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013854:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8013858:	fb23 f302 	smuad	r3, r3, r2
 801385c:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8013860:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013864:	0c1b      	lsrs	r3, r3, #16
 8013866:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 801386a:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 801386e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8013872:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8013876:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801387a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801387e:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8013882:	fb43 f312 	smusdx	r3, r3, r2
 8013886:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 801388a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801388e:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8013892:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013896:	b29a      	uxth	r2, r3
 8013898:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 801389c:	4b65      	ldr	r3, [pc, #404]	@ (8013a34 <arm_radix4_butterfly_q15+0xa8c>)
 801389e:	400b      	ands	r3, r1
 80138a0:	4313      	orrs	r3, r2
 80138a2:	461a      	mov	r2, r3
 80138a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80138a8:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80138ac:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 80138b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138b4:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80138b8:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80138bc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80138be:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80138c8:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 80138cc:	6812      	ldr	r2, [r2, #0]
 80138ce:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80138d0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	1d1a      	adds	r2, r3, #4
 80138d8:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80138dc:	601a      	str	r2, [r3, #0]
}
 80138de:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80138e0:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80138e4:	4613      	mov	r3, r2
 80138e6:	005b      	lsls	r3, r3, #1
 80138e8:	4413      	add	r3, r2
 80138ea:	009b      	lsls	r3, r3, #2
 80138ec:	461a      	mov	r2, r3
 80138ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138f2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	4413      	add	r3, r2
 80138fa:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 80138fe:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	461a      	mov	r2, r3
 8013906:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801390a:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 801390e:	601a      	str	r2, [r3, #0]
  return (val);
 8013910:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013914:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 801391e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013922:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013926:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 801392a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801392e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8013932:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8013936:	fb23 f302 	smuad	r3, r3, r2
 801393a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 801393e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013942:	0c1b      	lsrs	r3, r3, #16
 8013944:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8013948:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 801394c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013950:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8013954:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013958:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 801395c:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8013960:	fb43 f312 	smusdx	r3, r3, r2
 8013964:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8013968:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 801396c:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8013970:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013974:	b29a      	uxth	r2, r3
 8013976:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 801397a:	4b2e      	ldr	r3, [pc, #184]	@ (8013a34 <arm_radix4_butterfly_q15+0xa8c>)
 801397c:	400b      	ands	r3, r1
 801397e:	4313      	orrs	r3, r2
 8013980:	461a      	mov	r2, r3
 8013982:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013986:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 801398a:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 801398e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013992:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8013996:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 801399a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801399c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80139a6:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 80139aa:	6812      	ldr	r2, [r2, #0]
 80139ac:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80139ae:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	1d1a      	adds	r2, r3, #4
 80139b6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80139ba:	601a      	str	r2, [r3, #0]
}
 80139bc:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 80139be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139c2:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80139c6:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	4413      	add	r3, r2
 80139ce:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 80139d2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80139d6:	3b01      	subs	r3, #1
 80139d8:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80139dc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f47f ab44 	bne.w	801306e <arm_radix4_butterfly_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 80139e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139ea:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80139ee:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80139f2:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80139f6:	6812      	ldr	r2, [r2, #0]
 80139f8:	0092      	lsls	r2, r2, #2
 80139fa:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80139fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a00:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	089b      	lsrs	r3, r3, #2
 8013a08:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8013a0c:	f000 bcc6 	b.w	801439c <arm_radix4_butterfly_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8013a10:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013a14:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 8013a18:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013a1c:	089b      	lsrs	r3, r3, #2
 8013a1e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8013a22:	2300      	movs	r3, #0
 8013a24:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8013a28:	2300      	movs	r3, #0
 8013a2a:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013a2e:	f000 bc9d 	b.w	801436c <arm_radix4_butterfly_q15+0x13c4>
 8013a32:	bf00      	nop
 8013a34:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8013a38:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013a3c:	009b      	lsls	r3, r3, #2
 8013a3e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013a42:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013a46:	6812      	ldr	r2, [r2, #0]
 8013a48:	441a      	add	r2, r3
 8013a4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013a52:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013a54:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	461a      	mov	r2, r3
 8013a62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a66:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013a6a:	601a      	str	r2, [r3, #0]
  return (val);
 8013a6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a70:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8013a7a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013a7e:	00db      	lsls	r3, r3, #3
 8013a80:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013a84:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013a88:	6812      	ldr	r2, [r2, #0]
 8013a8a:	441a      	add	r2, r3
 8013a8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a90:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013a94:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013a96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a9a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013aa8:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013aac:	601a      	str	r2, [r3, #0]
  return (val);
 8013aae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ab2:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8013abc:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	005b      	lsls	r3, r3, #1
 8013ac4:	4413      	add	r3, r2
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	461a      	mov	r2, r3
 8013aca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ace:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	441a      	add	r2, r3
 8013ad6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ada:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013ade:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013ae0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ae4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	461a      	mov	r2, r3
 8013aee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013af2:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013af6:	601a      	str	r2, [r3, #0]
  return (val);
 8013af8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013afc:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8013b06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b0a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013b0e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4413      	add	r3, r2
 8013b16:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 8013b1a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013b24:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013b28:	6812      	ldr	r2, [r2, #0]
 8013b2a:	441a      	add	r2, r3
 8013b2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b30:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013b34:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8013b36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b3a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b44:	009b      	lsls	r3, r3, #2
 8013b46:	441a      	add	r2, r3
 8013b48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b4c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013b50:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8013b52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b56:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	441a      	add	r2, r3
 8013b64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b68:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013b6c:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8013b6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b72:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	441a      	add	r2, r3
 8013b80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b84:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013b88:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8013b8a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013b8e:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8013b92:	e3dc      	b.n	801434e <arm_radix4_butterfly_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8013b94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b98:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ba2:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013ba6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013ba8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bac:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bba:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013bbe:	601a      	str	r2, [r3, #0]
  return (val);
 8013bc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bc4:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8013bce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bd2:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013bd6:	681a      	ldr	r2, [r3, #0]
 8013bd8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bdc:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013be0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013be2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013be6:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	461a      	mov	r2, r3
 8013bf0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bf4:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8013bf8:	601a      	str	r2, [r3, #0]
  return (val);
 8013bfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bfe:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8013c08:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013c0c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013c10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c14:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013c18:	6019      	str	r1, [r3, #0]
 8013c1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c1e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8013c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c28:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013c32:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8013c36:	6812      	ldr	r2, [r2, #0]
 8013c38:	fa93 f212 	qadd16	r2, r3, r2
 8013c3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c40:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013c44:	601a      	str	r2, [r3, #0]
  return(result);
 8013c46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c4a:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8013c54:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013c58:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013c5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c60:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013c64:	6019      	str	r1, [r3, #0]
 8013c66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c6a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8013c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c74:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013c7e:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8013c82:	6812      	ldr	r2, [r2, #0]
 8013c84:	fad3 f212 	qsub16	r2, r3, r2
 8013c88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c8c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8013c90:	601a      	str	r2, [r3, #0]
  return(result);
 8013c92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c96:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8013ca0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ca4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cae:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8013cb2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013cb4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cb8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cc6:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8013cca:	601a      	str	r2, [r3, #0]
  return (val);
 8013ccc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cd0:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8013cda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cde:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ce8:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013cec:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013cee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cf2:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d00:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8013d04:	601a      	str	r2, [r3, #0]
  return (val);
 8013d06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d0a:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8013d14:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013d18:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013d1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d20:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013d24:	6019      	str	r1, [r3, #0]
 8013d26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d2a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8013d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d34:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013d3e:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8013d42:	6812      	ldr	r2, [r2, #0]
 8013d44:	fa93 f212 	qadd16	r2, r3, r2
 8013d48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d4c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8013d50:	601a      	str	r2, [r3, #0]
  return(result);
 8013d52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d56:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8013d60:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013d64:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013d68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d6c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013d70:	6019      	str	r1, [r3, #0]
 8013d72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d76:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8013d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d80:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013d8a:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8013d8e:	6812      	ldr	r2, [r2, #0]
 8013d90:	fa93 f222 	shadd16	r2, r3, r2
 8013d94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d98:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013d9c:	601a      	str	r2, [r3, #0]
  return(result);
 8013d9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013da2:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8013dac:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8013db0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013db4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dbe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013dc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dca:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013dd4:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8013dd8:	6812      	ldr	r2, [r2, #0]
 8013dda:	fa93 f222 	shadd16	r2, r3, r2
 8013dde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013de2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013de6:	601a      	str	r2, [r3, #0]
  return(result);
 8013de8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dec:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 8013df6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dfa:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e04:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013e08:	601a      	str	r2, [r3, #0]
 8013e0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e0e:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8013e12:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8013e16:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE void write_q15x2 (
  q15_t * pQ15,
  q31_t   value)
{
  q31_t val = value;
 8013e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e1c:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8013e20:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013e24:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8013e28:	6812      	ldr	r2, [r2, #0]
 8013e2a:	601a      	str	r2, [r3, #0]

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (pQ15, &val, 4);
 8013e2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e30:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e3a:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	601a      	str	r2, [r3, #0]
#else
  pQ15[0] = (q15_t)(val & 0x0FFFF);
  pQ15[1] = (q15_t)(val >> 16);
#endif
}
 8013e42:	bf00      	nop
        pSi0 += 2 * n1;
 8013e44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e48:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013e4c:	681a      	ldr	r2, [r3, #0]
 8013e4e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	441a      	add	r2, r3
 8013e56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e5a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013e5e:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8013e60:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013e64:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013e68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e6c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013e70:	6019      	str	r1, [r3, #0]
 8013e72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e76:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8013e7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013e7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e80:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013e8a:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8013e8e:	6812      	ldr	r2, [r2, #0]
 8013e90:	fad3 f222 	shsub16	r2, r3, r2
 8013e94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e98:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013e9c:	601a      	str	r2, [r3, #0]
  return(result);
 8013e9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ea2:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16U;
 8013eac:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8013eb0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013eb4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013eb8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8013ebc:	6019      	str	r1, [r3, #0]
 8013ebe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ec2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8013ec6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ec8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ecc:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ed6:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8013eda:	6812      	ldr	r2, [r2, #0]
 8013edc:	fb23 f202 	smuad	r2, r3, r2
 8013ee0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ee4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8013ee8:	601a      	str	r2, [r3, #0]
  return(result);
 8013eea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013eee:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	0c1b      	lsrs	r3, r3, #16
 8013ef6:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 8013efa:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8013efe:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013f02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f06:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8013f0a:	6019      	str	r1, [r3, #0]
 8013f0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f10:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8013f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013f16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f1a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013f24:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8013f28:	6812      	ldr	r2, [r2, #0]
 8013f2a:	fb43 f212 	smusdx	r2, r3, r2
 8013f2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f32:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8013f36:	601a      	str	r2, [r3, #0]
  return(result);
 8013f38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f3c:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8013f46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f4a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f54:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8013f58:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013f5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f5e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	461a      	mov	r2, r3
 8013f68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f6c:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8013f70:	601a      	str	r2, [r3, #0]
  return (val);
 8013f72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f76:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8013f80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f84:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013f8e:	b299      	uxth	r1, r3
 8013f90:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8013f94:	4bd9      	ldr	r3, [pc, #868]	@ (80142fc <arm_radix4_butterfly_q15+0x1354>)
 8013f96:	4003      	ands	r3, r0
 8013f98:	430b      	orrs	r3, r1
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fa0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8013fa4:	601a      	str	r2, [r3, #0]
 8013fa6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013faa:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8013fae:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8013fb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fb4:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8013fb8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013fbc:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8013fc0:	6812      	ldr	r2, [r2, #0]
 8013fc2:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8013fc4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fc8:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fd2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	601a      	str	r2, [r3, #0]
}
 8013fda:	bf00      	nop
        pSi1 += 2 * n1;
 8013fdc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fe0:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013fe4:	681a      	ldr	r2, [r3, #0]
 8013fe6:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	441a      	add	r2, r3
 8013fee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ff2:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013ff6:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8013ff8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ffc:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014006:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 801400a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801400c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014010:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	461a      	mov	r2, r3
 801401a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801401e:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8014022:	601a      	str	r2, [r3, #0]
  return (val);
 8014024:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014028:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8014032:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014036:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801403a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801403e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8014042:	6019      	str	r1, [r3, #0]
 8014044:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014048:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801404c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801404e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014052:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801405c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8014060:	6812      	ldr	r2, [r2, #0]
 8014062:	fad3 f212 	qsub16	r2, r3, r2
 8014066:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801406a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801406e:	601a      	str	r2, [r3, #0]
  return(result);
 8014070:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014074:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 801407e:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8014082:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014086:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801408a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801408e:	6019      	str	r1, [r3, #0]
 8014090:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014094:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8014098:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801409a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801409e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80140a8:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 80140ac:	6812      	ldr	r2, [r2, #0]
 80140ae:	faa3 f222 	shasx	r2, r3, r2
 80140b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140b6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80140ba:	601a      	str	r2, [r3, #0]
  return(result);
 80140bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140c0:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 80140ca:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80140ce:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80140d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140d6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80140da:	6019      	str	r1, [r3, #0]
 80140dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140e0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80140e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80140e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140ea:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80140f4:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80140f8:	6812      	ldr	r2, [r2, #0]
 80140fa:	fae3 f222 	shsax	r2, r3, r2
 80140fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014102:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8014106:	601a      	str	r2, [r3, #0]
  return(result);
 8014108:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801410c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16U;
 8014116:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 801411a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801411e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014122:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014126:	6019      	str	r1, [r3, #0]
 8014128:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801412c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8014130:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014132:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014136:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014140:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8014144:	6812      	ldr	r2, [r2, #0]
 8014146:	fb23 f202 	smuad	r2, r3, r2
 801414a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801414e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8014152:	601a      	str	r2, [r3, #0]
  return(result);
 8014154:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014158:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	0c1b      	lsrs	r3, r3, #16
 8014160:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C1, S);
 8014164:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8014168:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801416c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014170:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8014174:	6019      	str	r1, [r3, #0]
 8014176:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801417a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 801417e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014180:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014184:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801418e:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8014192:	6812      	ldr	r2, [r2, #0]
 8014194:	fb43 f212 	smusdx	r2, r3, r2
 8014198:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801419c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80141a0:	601a      	str	r2, [r3, #0]
  return(result);
 80141a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141a6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 80141b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141b4:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80141be:	b299      	uxth	r1, r3
 80141c0:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80141c4:	4b4d      	ldr	r3, [pc, #308]	@ (80142fc <arm_radix4_butterfly_q15+0x1354>)
 80141c6:	4003      	ands	r3, r0
 80141c8:	430b      	orrs	r3, r1
 80141ca:	4619      	mov	r1, r3
 80141cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80141d4:	601a      	str	r2, [r3, #0]
 80141d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80141de:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80141e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141e4:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80141e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80141ec:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 80141f0:	6812      	ldr	r2, [r2, #0]
 80141f2:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80141f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141f8:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80141fc:	681a      	ldr	r2, [r3, #0]
 80141fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014202:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	601a      	str	r2, [r3, #0]
}
 801420a:	bf00      	nop
        pSi2 += 2 * n1;
 801420c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014210:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	441a      	add	r2, r3
 801421e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014222:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014226:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUAD(C3, R) >> 16U;
 8014228:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 801422c:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014230:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014234:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8014238:	6019      	str	r1, [r3, #0]
 801423a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801423e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8014242:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014244:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014248:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014252:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8014256:	6812      	ldr	r2, [r2, #0]
 8014258:	fb23 f202 	smuad	r2, r3, r2
 801425c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014260:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8014264:	601a      	str	r2, [r3, #0]
  return(result);
 8014266:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801426a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	0c1b      	lsrs	r3, r3, #16
 8014272:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C3, R);
 8014276:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 801427a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801427e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014282:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8014286:	6019      	str	r1, [r3, #0]
 8014288:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801428c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8014290:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014292:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014296:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80142a0:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 80142a4:	6812      	ldr	r2, [r2, #0]
 80142a6:	fb43 f212 	smusdx	r2, r3, r2
 80142aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ae:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80142b2:	601a      	str	r2, [r3, #0]
  return(result);
 80142b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142b8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 80142c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142c6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80142d0:	b299      	uxth	r1, r3
 80142d2:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80142d6:	4b09      	ldr	r3, [pc, #36]	@ (80142fc <arm_radix4_butterfly_q15+0x1354>)
 80142d8:	4003      	ands	r3, r0
 80142da:	430b      	orrs	r3, r1
 80142dc:	4619      	mov	r1, r3
 80142de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80142e6:	601a      	str	r2, [r3, #0]
 80142e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80142f0:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80142f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142f6:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80142fa:	e001      	b.n	8014300 <arm_radix4_butterfly_q15+0x1358>
 80142fc:	ffff0000 	.word	0xffff0000
 8014300:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014304:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8014308:	6812      	ldr	r2, [r2, #0]
 801430a:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 801430c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014310:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8014314:	681a      	ldr	r2, [r3, #0]
 8014316:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801431a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	601a      	str	r2, [r3, #0]
}
 8014322:	bf00      	nop
        pSi3 += 2 * n1;
 8014324:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014328:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	441a      	add	r2, r3
 8014336:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801433a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801433e:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8014340:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8014344:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014348:	4413      	add	r3, r2
 801434a:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 801434e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014352:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014356:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	429a      	cmp	r2, r3
 801435e:	f4ff ac19 	bcc.w	8013b94 <arm_radix4_butterfly_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 8014362:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014366:	3301      	adds	r3, #1
 8014368:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 801436c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014370:	3b01      	subs	r3, #1
 8014372:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8014376:	429a      	cmp	r2, r3
 8014378:	f67f ab5e 	bls.w	8013a38 <arm_radix4_butterfly_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 801437c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014380:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8014384:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014388:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 801438c:	6812      	ldr	r2, [r2, #0]
 801438e:	0092      	lsls	r2, r2, #2
 8014390:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8014392:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8014396:	089b      	lsrs	r3, r3, #2
 8014398:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 801439c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80143a0:	2b04      	cmp	r3, #4
 80143a2:	f63f ab35 	bhi.w	8013a10 <arm_radix4_butterfly_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 80143a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143aa:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	089b      	lsrs	r3, r3, #2
 80143b2:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 80143b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143ba:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80143be:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80143c2:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80143c6:	6812      	ldr	r2, [r2, #0]
 80143c8:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 80143ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143ce:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	1d1a      	adds	r2, r3, #4
 80143d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143da:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80143de:	601a      	str	r2, [r3, #0]
 80143e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143e4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	1f1a      	subs	r2, r3, #4
 80143ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143f0:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80143f4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80143f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143fa:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	461a      	mov	r2, r3
 8014404:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014408:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801440c:	601a      	str	r2, [r3, #0]
  return (val);
 801440e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014412:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 801441c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014420:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	1d1a      	adds	r2, r3, #4
 8014428:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801442c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014436:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	1f1a      	subs	r2, r3, #4
 801443e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014442:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8014446:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014448:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801444c:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	461a      	mov	r2, r3
 8014456:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801445a:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 801445e:	601a      	str	r2, [r3, #0]
  return (val);
 8014460:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014464:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 801446e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014472:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	1d1a      	adds	r2, r3, #4
 801447a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801447e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014482:	601a      	str	r2, [r3, #0]
 8014484:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014488:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	1f1a      	subs	r2, r3, #4
 8014490:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014494:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8014498:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801449a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801449e:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	461a      	mov	r2, r3
 80144a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144ac:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80144b0:	601a      	str	r2, [r3, #0]
  return (val);
 80144b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144b6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 80144c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144c4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	1d1a      	adds	r2, r3, #4
 80144cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144d0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144d4:	601a      	str	r2, [r3, #0]
 80144d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144da:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	1f1a      	subs	r2, r3, #4
 80144e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144e6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80144ea:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80144ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144f0:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	461a      	mov	r2, r3
 80144fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144fe:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8014502:	601a      	str	r2, [r3, #0]
  return (val);
 8014504:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014508:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8014512:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014516:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 801451a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801451e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8014522:	6019      	str	r1, [r3, #0]
 8014524:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014528:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 801452c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801452e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014532:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801453c:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8014540:	6812      	ldr	r2, [r2, #0]
 8014542:	fa93 f212 	qadd16	r2, r3, r2
 8014546:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801454a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 801454e:	601a      	str	r2, [r3, #0]
  return(result);
 8014550:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014554:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 801455e:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8014562:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014566:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801456a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801456e:	6019      	str	r1, [r3, #0]
 8014570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014574:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8014578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801457a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801457e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014588:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 801458c:	6812      	ldr	r2, [r2, #0]
 801458e:	fa93 f212 	qadd16	r2, r3, r2
 8014592:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014596:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 801459a:	601a      	str	r2, [r3, #0]
  return(result);
 801459c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145a0:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 80145aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145ae:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	f1a3 0210 	sub.w	r2, r3, #16
 80145b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145bc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145c0:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 80145c2:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80145c6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80145ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145ce:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80145d2:	6019      	str	r1, [r3, #0]
 80145d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145d8:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80145dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80145de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145e2:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80145ec:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 80145f0:	6812      	ldr	r2, [r2, #0]
 80145f2:	fa93 f222 	shadd16	r2, r3, r2
 80145f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145fa:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80145fe:	601a      	str	r2, [r3, #0]
  return(result);
 8014600:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014604:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	4619      	mov	r1, r3
 801460c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014610:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014614:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801461e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8014622:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014624:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014628:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 801462c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014630:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8014634:	6812      	ldr	r2, [r2, #0]
 8014636:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014638:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801463c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014648:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 801464c:	6812      	ldr	r2, [r2, #0]
 801464e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014650:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014654:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	1d1a      	adds	r2, r3, #4
 801465e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014662:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	601a      	str	r2, [r3, #0]
}
 801466a:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 801466c:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8014670:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014674:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014678:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 801467c:	6019      	str	r1, [r3, #0]
 801467e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014682:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8014686:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014688:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801468c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014696:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 801469a:	6812      	ldr	r2, [r2, #0]
 801469c:	fa93 f212 	qadd16	r2, r3, r2
 80146a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146a4:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80146a8:	601a      	str	r2, [r3, #0]
  return(result);
 80146aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ae:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 80146b8:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80146bc:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80146c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146c4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80146c8:	6019      	str	r1, [r3, #0]
 80146ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ce:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80146d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146d8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80146e2:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80146e6:	6812      	ldr	r2, [r2, #0]
 80146e8:	fad3 f222 	shsub16	r2, r3, r2
 80146ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146f0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80146f4:	601a      	str	r2, [r3, #0]
  return(result);
 80146f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146fa:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4619      	mov	r1, r3
 8014702:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014706:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801470a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 801470e:	601a      	str	r2, [r3, #0]
 8014710:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014714:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8014718:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801471a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801471e:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8014722:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014726:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 801472a:	6812      	ldr	r2, [r2, #0]
 801472c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801472e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014732:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801473e:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8014742:	6812      	ldr	r2, [r2, #0]
 8014744:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014746:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801474a:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	1d1a      	adds	r2, r3, #4
 8014754:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014758:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	601a      	str	r2, [r3, #0]
}
 8014760:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8014762:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014766:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 801476a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801476e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8014772:	6019      	str	r1, [r3, #0]
 8014774:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014778:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801477c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801477e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014782:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801478c:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8014790:	6812      	ldr	r2, [r2, #0]
 8014792:	fad3 f212 	qsub16	r2, r3, r2
 8014796:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801479a:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 801479e:	601a      	str	r2, [r3, #0]
  return(result);
 80147a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147a4:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80147ae:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80147b2:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80147b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ba:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80147be:	6019      	str	r1, [r3, #0]
 80147c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147c4:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80147c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ce:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147d8:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 80147dc:	6812      	ldr	r2, [r2, #0]
 80147de:	fad3 f212 	qsub16	r2, r3, r2
 80147e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147e6:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80147ea:	601a      	str	r2, [r3, #0]
  return(result);
 80147ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147f0:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 80147fa:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80147fe:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014802:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014806:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801480a:	6019      	str	r1, [r3, #0]
 801480c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014810:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8014814:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014816:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801481a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014824:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 8014828:	6812      	ldr	r2, [r2, #0]
 801482a:	fae3 f222 	shsax	r2, r3, r2
 801482e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014832:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014836:	601a      	str	r2, [r3, #0]
  return(result);
 8014838:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801483c:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	4619      	mov	r1, r3
 8014844:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014848:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801484c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014850:	601a      	str	r2, [r3, #0]
 8014852:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014856:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801485a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801485c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014860:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8014864:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014868:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 801486c:	6812      	ldr	r2, [r2, #0]
 801486e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014870:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014874:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014880:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 8014884:	6812      	ldr	r2, [r2, #0]
 8014886:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014888:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801488c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	1d1a      	adds	r2, r3, #4
 8014896:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801489a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	601a      	str	r2, [r3, #0]
}
 80148a2:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 80148a4:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80148a8:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80148ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148b0:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80148b4:	6019      	str	r1, [r3, #0]
 80148b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148ba:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80148be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80148c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148c4:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80148ce:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 80148d2:	6812      	ldr	r2, [r2, #0]
 80148d4:	faa3 f222 	shasx	r2, r3, r2
 80148d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148dc:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80148e0:	601a      	str	r2, [r3, #0]
  return(result);
 80148e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148e6:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	4619      	mov	r1, r3
 80148ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148f2:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80148f6:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80148fa:	601a      	str	r2, [r3, #0]
 80148fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014900:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8014904:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014906:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801490a:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 801490e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014912:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 8014916:	6812      	ldr	r2, [r2, #0]
 8014918:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801491a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801491e:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801492a:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 801492e:	6812      	ldr	r2, [r2, #0]
 8014930:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014932:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014936:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	1d1a      	adds	r2, r3, #4
 8014940:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014944:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	601a      	str	r2, [r3, #0]
}
 801494c:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 801494e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014952:	3b01      	subs	r3, #1
 8014954:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014958:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801495c:	2b00      	cmp	r3, #0
 801495e:	f47f ad34 	bne.w	80143ca <arm_radix4_butterfly_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8014962:	bf00      	nop
 8014964:	bf00      	nop
 8014966:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 801496a:	46bd      	mov	sp, r7
 801496c:	bc90      	pop	{r4, r7}
 801496e:	4770      	bx	lr

08014970 <arm_radix4_butterfly_inverse_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_inverse_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 8014970:	b490      	push	{r4, r7}
 8014972:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8014976:	af00      	add	r7, sp, #0
 8014978:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 801497c:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 8014980:	6020      	str	r0, [r4, #0]
 8014982:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8014986:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 801498a:	6001      	str	r1, [r0, #0]
 801498c:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8014990:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8014994:	600a      	str	r2, [r1, #0]
 8014996:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801499a:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 801499e:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 80149a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149a4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 80149ae:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80149b2:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 80149b6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80149ba:	089b      	lsrs	r3, r3, #2
 80149bc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 80149c0:	2300      	movs	r3, #0
 80149c2:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 80149c6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80149ca:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 80149ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149d2:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80149d6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149da:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80149de:	6812      	ldr	r2, [r2, #0]
 80149e0:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 80149e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149e6:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80149ea:	681a      	ldr	r2, [r3, #0]
 80149ec:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80149f0:	009b      	lsls	r3, r3, #2
 80149f2:	441a      	add	r2, r3
 80149f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149f8:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80149fc:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 80149fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a02:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014a06:	681a      	ldr	r2, [r3, #0]
 8014a08:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014a0c:	009b      	lsls	r3, r3, #2
 8014a0e:	441a      	add	r2, r3
 8014a10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a14:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014a18:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8014a1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a1e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	441a      	add	r2, r3
 8014a2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a30:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014a34:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 8014a36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a3a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014a3e:	681a      	ldr	r2, [r3, #0]
 8014a40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a44:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014a48:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014a4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a4e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	461a      	mov	r2, r3
 8014a58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a5c:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014a60:	601a      	str	r2, [r3, #0]
  return (val);
 8014a62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a66:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014a70:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014a74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014a7c:	601a      	str	r2, [r3, #0]
 8014a7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a82:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8014a86:	2200      	movs	r2, #0
 8014a88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a8e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a98:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8014a9c:	6812      	ldr	r2, [r2, #0]
 8014a9e:	fa93 f222 	shadd16	r2, r3, r2
 8014aa2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aa6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014aaa:	601a      	str	r2, [r3, #0]
  return(result);
 8014aac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ab0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014aba:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014abe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ac2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014ac6:	601a      	str	r2, [r3, #0]
 8014ac8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014acc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ad4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ad8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ae2:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 8014ae6:	6812      	ldr	r2, [r2, #0]
 8014ae8:	fa93 f222 	shadd16	r2, r3, r2
 8014aec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014af0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014af4:	601a      	str	r2, [r3, #0]
  return(result);
 8014af6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014afa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8014b04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b08:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b12:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014b16:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014b18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b1c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	461a      	mov	r2, r3
 8014b26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b2a:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014b2e:	601a      	str	r2, [r3, #0]
  return (val);
 8014b30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b34:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014b3e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014b42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b46:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014b4a:	601a      	str	r2, [r3, #0]
 8014b4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b50:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8014b54:	2200      	movs	r2, #0
 8014b56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014b58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b5c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b66:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8014b6a:	6812      	ldr	r2, [r2, #0]
 8014b6c:	fa93 f222 	shadd16	r2, r3, r2
 8014b70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b74:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014b78:	601a      	str	r2, [r3, #0]
  return(result);
 8014b7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014b88:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014b8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b90:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014b94:	601a      	str	r2, [r3, #0]
 8014b96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b9a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ba2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ba6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bb0:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8014bb4:	6812      	ldr	r2, [r2, #0]
 8014bb6:	fa93 f222 	shadd16	r2, r3, r2
 8014bba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bbe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014bc2:	601a      	str	r2, [r3, #0]
  return(result);
 8014bc4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bc8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8014bd2:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014bd6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014bda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bde:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014be2:	6019      	str	r1, [r3, #0]
 8014be4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014be8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bf2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bfc:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8014c00:	6812      	ldr	r2, [r2, #0]
 8014c02:	fa93 f212 	qadd16	r2, r3, r2
 8014c06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c0a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014c0e:	601a      	str	r2, [r3, #0]
  return(result);
 8014c10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c14:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8014c1e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014c22:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014c26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c2a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014c2e:	6019      	str	r1, [r3, #0]
 8014c30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c34:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8014c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c3e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c48:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8014c4c:	6812      	ldr	r2, [r2, #0]
 8014c4e:	fad3 f212 	qsub16	r2, r3, r2
 8014c52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c56:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014c5a:	601a      	str	r2, [r3, #0]
  return(result);
 8014c5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c60:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8014c6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c6e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014c72:	681a      	ldr	r2, [r3, #0]
 8014c74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c78:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014c7c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014c7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c82:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c90:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8014c94:	601a      	str	r2, [r3, #0]
  return (val);
 8014c96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c9a:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014ca4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014ca8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014cb0:	601a      	str	r2, [r3, #0]
 8014cb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cb6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8014cba:	2200      	movs	r2, #0
 8014cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014cbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ccc:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8014cd0:	6812      	ldr	r2, [r2, #0]
 8014cd2:	fa93 f222 	shadd16	r2, r3, r2
 8014cd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cda:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014cde:	601a      	str	r2, [r3, #0]
  return(result);
 8014ce0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ce4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014cee:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014cf2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cf6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014cfa:	601a      	str	r2, [r3, #0]
 8014cfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8014d04:	2200      	movs	r2, #0
 8014d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d0c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d16:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8014d1a:	6812      	ldr	r2, [r2, #0]
 8014d1c:	fa93 f222 	shadd16	r2, r3, r2
 8014d20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d24:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014d28:	601a      	str	r2, [r3, #0]
  return(result);
 8014d2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8014d38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d3c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d46:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014d4a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014d4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d50:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	461a      	mov	r2, r3
 8014d5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d5e:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014d62:	601a      	str	r2, [r3, #0]
  return (val);
 8014d64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d68:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014d72:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014d76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d7a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8014d7e:	601a      	str	r2, [r3, #0]
 8014d80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d84:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014d88:	2200      	movs	r2, #0
 8014d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d9a:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8014d9e:	6812      	ldr	r2, [r2, #0]
 8014da0:	fa93 f222 	shadd16	r2, r3, r2
 8014da4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014da8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014dac:	601a      	str	r2, [r3, #0]
  return(result);
 8014dae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014db2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014dbc:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014dc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dc4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014dc8:	601a      	str	r2, [r3, #0]
 8014dca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014dd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014de4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8014de8:	6812      	ldr	r2, [r2, #0]
 8014dea:	fa93 f222 	shadd16	r2, r3, r2
 8014dee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014df2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014df6:	601a      	str	r2, [r3, #0]
  return(result);
 8014df8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dfc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8014e06:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014e0a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014e0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014e16:	6019      	str	r1, [r3, #0]
 8014e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014e20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e30:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8014e34:	6812      	ldr	r2, [r2, #0]
 8014e36:	fa93 f212 	qadd16	r2, r3, r2
 8014e3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e3e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014e42:	601a      	str	r2, [r3, #0]
  return(result);
 8014e44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 8014e52:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014e56:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014e5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e62:	6019      	str	r1, [r3, #0]
 8014e64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e68:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e7c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014e80:	6812      	ldr	r2, [r2, #0]
 8014e82:	fa93 f222 	shadd16	r2, r3, r2
 8014e86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e8a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e8e:	601a      	str	r2, [r3, #0]
  return(result);
 8014e90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ea0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014ea4:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8014ea8:	601a      	str	r2, [r3, #0]
 8014eaa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014eb2:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014eb4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eb8:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8014ebc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ec0:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8014ec4:	6812      	ldr	r2, [r2, #0]
 8014ec6:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014ec8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ecc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ed8:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8014edc:	6812      	ldr	r2, [r2, #0]
 8014ede:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014ee0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ee4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	1d1a      	adds	r2, r3, #4
 8014eee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ef2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	601a      	str	r2, [r3, #0]
}
 8014efa:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8014efc:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014f00:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014f04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014f0c:	6019      	str	r1, [r3, #0]
 8014f0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014f16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f26:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8014f2a:	6812      	ldr	r2, [r2, #0]
 8014f2c:	fad3 f212 	qsub16	r2, r3, r2
 8014f30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f34:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014f38:	601a      	str	r2, [r3, #0]
  return(result);
 8014f3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8014f48:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8014f4c:	00db      	lsls	r3, r3, #3
 8014f4e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f52:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8014f56:	6812      	ldr	r2, [r2, #0]
 8014f58:	441a      	add	r2, r3
 8014f5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014f62:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014f64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f68:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	461a      	mov	r2, r3
 8014f72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f76:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8014f7a:	601a      	str	r2, [r3, #0]
  return (val);
 8014f7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f80:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 8014f8a:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8014f8e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014f92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014f9a:	6019      	str	r1, [r3, #0]
 8014f9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fa0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014fa6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014fb4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8014fb8:	6812      	ldr	r2, [r2, #0]
 8014fba:	fb43 f202 	smusd	r2, r3, r2
 8014fbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014fc6:	601a      	str	r2, [r3, #0]
  return(result);
 8014fc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	0c1b      	lsrs	r3, r3, #16
 8014fd4:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 8014fd8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8014fdc:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014fe0:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8014fe4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fe8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014fec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014fee:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8014ff2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ff6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8014ffa:	6812      	ldr	r2, [r2, #0]
 8014ffc:	fb23 f212 	smuadx	r2, r3, r2
 8015000:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015008:	601a      	str	r2, [r3, #0]
  return(result);
 801500a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801500e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8015018:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801501c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 8015026:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	461a      	mov	r2, r3
 801502e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015032:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8015036:	601a      	str	r2, [r3, #0]
  return (val);
 8015038:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801503c:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8015046:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801504a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801504e:	2300      	movs	r3, #0
 8015050:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015054:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8015058:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 801505c:	fa93 f322 	shadd16	r3, r3, r2
 8015060:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 8015064:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8015068:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801506c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8015070:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8015074:	2300      	movs	r3, #0
 8015076:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801507a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801507e:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8015082:	fa93 f322 	shadd16	r3, r3, r2
 8015086:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 801508a:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 801508e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 8015092:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015096:	b29a      	uxth	r2, r3
 8015098:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 801509c:	4bd7      	ldr	r3, [pc, #860]	@ (80153fc <arm_radix4_butterfly_inverse_q15+0xa8c>)
 801509e:	400b      	ands	r3, r1
 80150a0:	4313      	orrs	r3, r2
 80150a2:	461a      	mov	r2, r3
 80150a4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80150a8:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80150ac:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 80150b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150b4:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80150b8:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80150bc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80150be:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80150c8:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 80150cc:	6812      	ldr	r2, [r2, #0]
 80150ce:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80150d0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	1d1a      	adds	r2, r3, #4
 80150d8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80150dc:	601a      	str	r2, [r3, #0]
}
 80150de:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 80150e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150e4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 80150ee:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	461a      	mov	r2, r3
 80150f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150fa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80150fe:	601a      	str	r2, [r3, #0]
  return (val);
 8015100:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015104:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801510e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015112:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8015116:	2300      	movs	r3, #0
 8015118:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801511c:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8015120:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8015124:	fa93 f322 	shadd16	r3, r3, r2
 8015128:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 801512c:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8015130:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8015134:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015138:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 801513c:	2300      	movs	r3, #0
 801513e:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015142:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8015146:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 801514a:	fa93 f322 	shadd16	r3, r3, r2
 801514e:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 8015152:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8015156:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 801515a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801515e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015162:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8015166:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801516a:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801516e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8015172:	fad3 f312 	qsub16	r3, r3, r2
 8015176:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 801517a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801517e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 8015182:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015186:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801518a:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 801518e:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015192:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8015196:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 801519a:	fae3 f312 	qsax	r3, r3, r2
 801519e:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 80151a2:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80151a6:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 80151aa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80151ae:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80151b2:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80151b6:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80151ba:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80151be:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 80151c2:	faa3 f312 	qasx	r3, r3, r2
 80151c6:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 80151ca:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80151ce:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 80151d2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80151d6:	009b      	lsls	r3, r3, #2
 80151d8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80151dc:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80151e0:	6812      	ldr	r2, [r2, #0]
 80151e2:	4413      	add	r3, r2
 80151e4:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 80151e8:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	461a      	mov	r2, r3
 80151f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151f4:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80151f8:	601a      	str	r2, [r3, #0]
  return (val);
 80151fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151fe:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 8015208:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 801520c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8015210:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8015214:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015218:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801521c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8015220:	fb43 f302 	smusd	r3, r3, r2
 8015224:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8015228:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801522c:	0c1b      	lsrs	r3, r3, #16
 801522e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 8015232:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8015236:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 801523a:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 801523e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015242:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8015246:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 801524a:	fb23 f312 	smuadx	r3, r3, r2
 801524e:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 8015252:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8015256:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 801525a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801525e:	b29a      	uxth	r2, r3
 8015260:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8015264:	4b65      	ldr	r3, [pc, #404]	@ (80153fc <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015266:	400b      	ands	r3, r1
 8015268:	4313      	orrs	r3, r2
 801526a:	461a      	mov	r2, r3
 801526c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8015270:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8015274:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 8015278:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801527c:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8015280:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8015284:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015286:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015290:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 8015294:	6812      	ldr	r2, [r2, #0]
 8015296:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015298:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	1d1a      	adds	r2, r3, #4
 80152a0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80152a4:	601a      	str	r2, [r3, #0]
}
 80152a6:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80152a8:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80152ac:	4613      	mov	r3, r2
 80152ae:	005b      	lsls	r3, r3, #1
 80152b0:	4413      	add	r3, r2
 80152b2:	009b      	lsls	r3, r3, #2
 80152b4:	461a      	mov	r2, r3
 80152b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152ba:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	4413      	add	r3, r2
 80152c2:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 80152c6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	461a      	mov	r2, r3
 80152ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152d2:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80152d6:	601a      	str	r2, [r3, #0]
  return (val);
 80152d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152dc:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 80152e6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80152ea:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80152ee:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 80152f2:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152f6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80152fa:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80152fe:	fb43 f302 	smusd	r3, r3, r2
 8015302:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8015306:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801530a:	0c1b      	lsrs	r3, r3, #16
 801530c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 8015310:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8015314:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8015318:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 801531c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015320:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8015324:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8015328:	fb23 f312 	smuadx	r3, r3, r2
 801532c:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8015330:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8015334:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8015338:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801533c:	b29a      	uxth	r2, r3
 801533e:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8015342:	4b2e      	ldr	r3, [pc, #184]	@ (80153fc <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015344:	400b      	ands	r3, r1
 8015346:	4313      	orrs	r3, r2
 8015348:	461a      	mov	r2, r3
 801534a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801534e:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8015352:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8015356:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801535a:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 801535e:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8015362:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015364:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801536e:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8015372:	6812      	ldr	r2, [r2, #0]
 8015374:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015376:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	1d1a      	adds	r2, r3, #4
 801537e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8015382:	601a      	str	r2, [r3, #0]
}
 8015384:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8015386:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801538a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 801538e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	4413      	add	r3, r2
 8015396:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 801539a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801539e:	3b01      	subs	r3, #1
 80153a0:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80153a4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	f47f ab44 	bne.w	8014a36 <arm_radix4_butterfly_inverse_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 80153ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153b2:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80153b6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80153ba:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80153be:	6812      	ldr	r2, [r2, #0]
 80153c0:	0092      	lsls	r2, r2, #2
 80153c2:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80153c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153c8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	089b      	lsrs	r3, r3, #2
 80153d0:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80153d4:	f000 bcc6 	b.w	8015d64 <arm_radix4_butterfly_inverse_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 80153d8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80153dc:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 80153e0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80153e4:	089b      	lsrs	r3, r3, #2
 80153e6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 80153ea:	2300      	movs	r3, #0
 80153ec:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 80153f0:	2300      	movs	r3, #0
 80153f2:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80153f6:	f000 bc9d 	b.w	8015d34 <arm_radix4_butterfly_inverse_q15+0x13c4>
 80153fa:	bf00      	nop
 80153fc:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8015400:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801540a:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801540e:	6812      	ldr	r2, [r2, #0]
 8015410:	441a      	add	r2, r3
 8015412:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015416:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801541a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801541c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015420:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	461a      	mov	r2, r3
 801542a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801542e:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8015432:	601a      	str	r2, [r3, #0]
  return (val);
 8015434:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015438:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8015442:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015446:	00db      	lsls	r3, r3, #3
 8015448:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801544c:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8015450:	6812      	ldr	r2, [r2, #0]
 8015452:	441a      	add	r2, r3
 8015454:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015458:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 801545c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801545e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015462:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	461a      	mov	r2, r3
 801546c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015470:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8015474:	601a      	str	r2, [r3, #0]
  return (val);
 8015476:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801547a:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8015484:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8015488:	4613      	mov	r3, r2
 801548a:	005b      	lsls	r3, r3, #1
 801548c:	4413      	add	r3, r2
 801548e:	009b      	lsls	r3, r3, #2
 8015490:	461a      	mov	r2, r3
 8015492:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015496:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	441a      	add	r2, r3
 801549e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154a2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80154a6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80154a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154ac:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	461a      	mov	r2, r3
 80154b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154ba:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80154be:	601a      	str	r2, [r3, #0]
  return (val);
 80154c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154c4:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 80154ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154d2:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80154d6:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4413      	add	r3, r2
 80154de:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 80154e2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80154e6:	009b      	lsls	r3, r3, #2
 80154e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154ec:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80154f0:	6812      	ldr	r2, [r2, #0]
 80154f2:	441a      	add	r2, r3
 80154f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154f8:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80154fc:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 80154fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015502:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015506:	681a      	ldr	r2, [r3, #0]
 8015508:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	441a      	add	r2, r3
 8015510:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015514:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015518:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 801551a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801551e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	441a      	add	r2, r3
 801552c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015530:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015534:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8015536:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801553a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801553e:	681a      	ldr	r2, [r3, #0]
 8015540:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015544:	009b      	lsls	r3, r3, #2
 8015546:	441a      	add	r2, r3
 8015548:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801554c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015550:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8015552:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015556:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 801555a:	e3dc      	b.n	8015d16 <arm_radix4_butterfly_inverse_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 801555c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015560:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801556a:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 801556e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015574:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	461a      	mov	r2, r3
 801557e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015582:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8015586:	601a      	str	r2, [r3, #0]
  return (val);
 8015588:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801558c:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8015596:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801559a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155a4:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80155a8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80155aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155ae:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	461a      	mov	r2, r3
 80155b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155bc:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80155c0:	601a      	str	r2, [r3, #0]
  return (val);
 80155c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155c6:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 80155d0:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80155d4:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80155d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155dc:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80155e0:	6019      	str	r1, [r3, #0]
 80155e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155e6:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80155ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80155ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155f0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80155fa:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80155fe:	6812      	ldr	r2, [r2, #0]
 8015600:	fa93 f212 	qadd16	r2, r3, r2
 8015604:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015608:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 801560c:	601a      	str	r2, [r3, #0]
  return(result);
 801560e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015612:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 801561c:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015620:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015624:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015628:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801562c:	6019      	str	r1, [r3, #0]
 801562e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015632:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8015636:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015638:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801563c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015646:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 801564a:	6812      	ldr	r2, [r2, #0]
 801564c:	fad3 f212 	qsub16	r2, r3, r2
 8015650:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015654:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015658:	601a      	str	r2, [r3, #0]
  return(result);
 801565a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801565e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015668:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801566c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015676:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 801567a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801567c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015680:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	461a      	mov	r2, r3
 801568a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801568e:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8015692:	601a      	str	r2, [r3, #0]
  return (val);
 8015694:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015698:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80156a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156a6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156b0:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80156b4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80156b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156ba:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	461a      	mov	r2, r3
 80156c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156c8:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80156cc:	601a      	str	r2, [r3, #0]
  return (val);
 80156ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156d2:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 80156dc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80156e0:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80156e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156e8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80156ec:	6019      	str	r1, [r3, #0]
 80156ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156f2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80156f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80156f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156fc:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015706:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 801570a:	6812      	ldr	r2, [r2, #0]
 801570c:	fa93 f212 	qadd16	r2, r3, r2
 8015710:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015714:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015718:	601a      	str	r2, [r3, #0]
  return(result);
 801571a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801571e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8015728:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801572c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015730:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015734:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015738:	6019      	str	r1, [r3, #0]
 801573a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801573e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8015742:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015744:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015748:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015752:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8015756:	6812      	ldr	r2, [r2, #0]
 8015758:	fa93 f222 	shadd16	r2, r3, r2
 801575c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015760:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8015764:	601a      	str	r2, [r3, #0]
  return(result);
 8015766:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801576a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8015774:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8015778:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801577c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8015780:	601a      	str	r2, [r3, #0]
 8015782:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015786:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801578a:	2200      	movs	r2, #0
 801578c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801578e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015792:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801579c:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 80157a0:	6812      	ldr	r2, [r2, #0]
 80157a2:	fa93 f222 	shadd16	r2, r3, r2
 80157a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157aa:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80157ae:	601a      	str	r2, [r3, #0]
  return(result);
 80157b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157b4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 80157be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157c2:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80157c6:	681a      	ldr	r2, [r3, #0]
 80157c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157cc:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 80157d0:	601a      	str	r2, [r3, #0]
 80157d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157d6:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80157da:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80157de:	601a      	str	r2, [r3, #0]
  q31_t val = value;
 80157e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157e4:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 80157e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80157ec:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 80157f0:	6812      	ldr	r2, [r2, #0]
 80157f2:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80157f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157f8:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015802:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	601a      	str	r2, [r3, #0]
}
 801580a:	bf00      	nop
        pSi0 += 2 * n1;
 801580c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015810:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801581a:	009b      	lsls	r3, r3, #2
 801581c:	441a      	add	r2, r3
 801581e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015822:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015826:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8015828:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801582c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015830:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015834:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015838:	6019      	str	r1, [r3, #0]
 801583a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801583e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8015842:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015844:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015848:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015852:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8015856:	6812      	ldr	r2, [r2, #0]
 8015858:	fad3 f222 	shsub16	r2, r3, r2
 801585c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015860:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8015864:	601a      	str	r2, [r3, #0]
  return(result);
 8015866:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801586a:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16U;
 8015874:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8015878:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801587c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015880:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8015884:	6019      	str	r1, [r3, #0]
 8015886:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801588a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801588e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015890:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015894:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801589e:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80158a2:	6812      	ldr	r2, [r2, #0]
 80158a4:	fb43 f202 	smusd	r2, r3, r2
 80158a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ac:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80158b0:	601a      	str	r2, [r3, #0]
  return(result);
 80158b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158b6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	0c1b      	lsrs	r3, r3, #16
 80158be:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 80158c2:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80158c6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80158ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80158d2:	6019      	str	r1, [r3, #0]
 80158d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158d8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80158dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80158de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158e2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80158ec:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80158f0:	6812      	ldr	r2, [r2, #0]
 80158f2:	fb23 f212 	smuadx	r2, r3, r2
 80158f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158fa:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80158fe:	601a      	str	r2, [r3, #0]
  return(result);
 8015900:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015904:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 801590e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015912:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801591c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015920:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015922:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015926:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	461a      	mov	r2, r3
 8015930:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015934:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015938:	601a      	str	r2, [r3, #0]
  return (val);
 801593a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801593e:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8015948:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801594c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015956:	b299      	uxth	r1, r3
 8015958:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 801595c:	4bd9      	ldr	r3, [pc, #868]	@ (8015cc4 <arm_radix4_butterfly_inverse_q15+0x1354>)
 801595e:	4003      	ands	r3, r0
 8015960:	430b      	orrs	r3, r1
 8015962:	4619      	mov	r1, r3
 8015964:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015968:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801596c:	601a      	str	r2, [r3, #0]
 801596e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015972:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8015976:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015978:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801597c:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015980:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015984:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8015988:	6812      	ldr	r2, [r2, #0]
 801598a:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 801598c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015990:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801599a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	601a      	str	r2, [r3, #0]
}
 80159a2:	bf00      	nop
        pSi1 += 2 * n1;
 80159a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159a8:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	441a      	add	r2, r3
 80159b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ba:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80159be:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80159c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159c4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ce:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80159d2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80159d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159d8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	461a      	mov	r2, r3
 80159e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159e6:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 80159ea:	601a      	str	r2, [r3, #0]
  return (val);
 80159ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159f0:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 80159fa:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80159fe:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015a02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a06:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015a0a:	6019      	str	r1, [r3, #0]
 8015a0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a10:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8015a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a1a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015a24:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8015a28:	6812      	ldr	r2, [r2, #0]
 8015a2a:	fad3 f212 	qsub16	r2, r3, r2
 8015a2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a32:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015a36:	601a      	str	r2, [r3, #0]
  return(result);
 8015a38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a3c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 8015a46:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015a4a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015a4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a52:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015a56:	6019      	str	r1, [r3, #0]
 8015a58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a5c:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8015a60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a66:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015a70:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8015a74:	6812      	ldr	r2, [r2, #0]
 8015a76:	fae3 f222 	shsax	r2, r3, r2
 8015a7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a7e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015a82:	601a      	str	r2, [r3, #0]
  return(result);
 8015a84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a88:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 8015a92:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015a96:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015a9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a9e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015aa2:	6019      	str	r1, [r3, #0]
 8015aa4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aa8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8015aac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015aae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ab2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015abc:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8015ac0:	6812      	ldr	r2, [r2, #0]
 8015ac2:	faa3 f222 	shasx	r2, r3, r2
 8015ac6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015ace:	601a      	str	r2, [r3, #0]
  return(result);
 8015ad0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ad4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16U;
 8015ade:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015ae2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015ae6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aea:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015aee:	6019      	str	r1, [r3, #0]
 8015af0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015af4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015af8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015afa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015afe:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b08:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8015b0c:	6812      	ldr	r2, [r2, #0]
 8015b0e:	fb43 f202 	smusd	r2, r3, r2
 8015b12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b16:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015b1a:	601a      	str	r2, [r3, #0]
  return(result);
 8015b1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	0c1b      	lsrs	r3, r3, #16
 8015b28:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C1, S);
 8015b2c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015b30:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015b34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b38:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015b3c:	6019      	str	r1, [r3, #0]
 8015b3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8015b46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b4c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b56:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8015b5a:	6812      	ldr	r2, [r2, #0]
 8015b5c:	fb23 f212 	smuadx	r2, r3, r2
 8015b60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b64:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015b68:	601a      	str	r2, [r3, #0]
  return(result);
 8015b6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b6e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 8015b78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b7c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015b86:	b299      	uxth	r1, r3
 8015b88:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8015cc4 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015b8e:	4003      	ands	r3, r0
 8015b90:	430b      	orrs	r3, r1
 8015b92:	4619      	mov	r1, r3
 8015b94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b98:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015b9c:	601a      	str	r2, [r3, #0]
 8015b9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ba2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015ba6:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015ba8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bac:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015bb0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015bb4:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 8015bb8:	6812      	ldr	r2, [r2, #0]
 8015bba:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015bbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bc0:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	601a      	str	r2, [r3, #0]
}
 8015bd2:	bf00      	nop
        pSi2 += 2 * n1;
 8015bd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bd8:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	441a      	add	r2, r3
 8015be6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bea:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015bee:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUSD(C3, R) >> 16U;
 8015bf0:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015bf4:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015bf8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bfc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015c00:	6019      	str	r1, [r3, #0]
 8015c02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c06:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8015c0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c10:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c1a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8015c1e:	6812      	ldr	r2, [r2, #0]
 8015c20:	fb43 f202 	smusd	r2, r3, r2
 8015c24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c28:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015c2c:	601a      	str	r2, [r3, #0]
  return(result);
 8015c2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c32:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	0c1b      	lsrs	r3, r3, #16
 8015c3a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C3, R);
 8015c3e:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015c42:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015c46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015c4e:	6019      	str	r1, [r3, #0]
 8015c50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c54:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8015c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c5e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c68:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8015c6c:	6812      	ldr	r2, [r2, #0]
 8015c6e:	fb23 f212 	smuadx	r2, r3, r2
 8015c72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c76:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015c7a:	601a      	str	r2, [r3, #0]
  return(result);
 8015c7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c80:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 8015c8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c8e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015c98:	b299      	uxth	r1, r3
 8015c9a:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015c9e:	4b09      	ldr	r3, [pc, #36]	@ (8015cc4 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015ca0:	4003      	ands	r3, r0
 8015ca2:	430b      	orrs	r3, r1
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015caa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015cae:	601a      	str	r2, [r3, #0]
 8015cb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cb4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8015cb8:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015cba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cbe:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8015cc2:	e001      	b.n	8015cc8 <arm_radix4_butterfly_inverse_q15+0x1358>
 8015cc4:	ffff0000 	.word	0xffff0000
 8015cc8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ccc:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8015cd0:	6812      	ldr	r2, [r2, #0]
 8015cd2:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015cd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cd8:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8015cdc:	681a      	ldr	r2, [r3, #0]
 8015cde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ce2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	601a      	str	r2, [r3, #0]
}
 8015cea:	bf00      	nop
        pSi3 += 2 * n1;
 8015cec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cf0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	441a      	add	r2, r3
 8015cfe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d02:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015d06:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8015d08:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015d0c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015d10:	4413      	add	r3, r2
 8015d12:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015d16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d1a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015d1e:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	f4ff ac19 	bcc.w	801555c <arm_radix4_butterfly_inverse_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 8015d2a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015d2e:	3301      	adds	r3, #1
 8015d30:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015d34:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015d38:	3b01      	subs	r3, #1
 8015d3a:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	f67f ab5e 	bls.w	8015400 <arm_radix4_butterfly_inverse_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8015d44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d48:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8015d4c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d50:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8015d54:	6812      	ldr	r2, [r2, #0]
 8015d56:	0092      	lsls	r2, r2, #2
 8015d58:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8015d5a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015d5e:	089b      	lsrs	r3, r3, #2
 8015d60:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8015d64:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015d68:	2b04      	cmp	r3, #4
 8015d6a:	f63f ab35 	bhi.w	80153d8 <arm_radix4_butterfly_inverse_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8015d6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d72:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	089b      	lsrs	r3, r3, #2
 8015d7a:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 8015d7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d82:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015d86:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d8a:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8015d8e:	6812      	ldr	r2, [r2, #0]
 8015d90:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 8015d92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d96:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	1d1a      	adds	r2, r3, #4
 8015d9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015da2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015da6:	601a      	str	r2, [r3, #0]
 8015da8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dac:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	1f1a      	subs	r2, r3, #4
 8015db4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015db8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8015dbc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015dbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dc2:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	461a      	mov	r2, r3
 8015dcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dd0:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8015dd4:	601a      	str	r2, [r3, #0]
  return (val);
 8015dd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dda:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8015de4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015de8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	1d1a      	adds	r2, r3, #4
 8015df0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015df4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015df8:	601a      	str	r2, [r3, #0]
 8015dfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dfe:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	1f1a      	subs	r2, r3, #4
 8015e06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e0a:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015e0e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015e10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e14:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e22:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015e26:	601a      	str	r2, [r3, #0]
  return (val);
 8015e28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e2c:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 8015e36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e3a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	1d1a      	adds	r2, r3, #4
 8015e42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e46:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015e4a:	601a      	str	r2, [r3, #0]
 8015e4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e50:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	1f1a      	subs	r2, r3, #4
 8015e58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e5c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015e60:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015e62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e66:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	461a      	mov	r2, r3
 8015e70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e74:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015e78:	601a      	str	r2, [r3, #0]
  return (val);
 8015e7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e7e:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 8015e88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e8c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	1d1a      	adds	r2, r3, #4
 8015e94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e98:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015e9c:	601a      	str	r2, [r3, #0]
 8015e9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ea2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	1f1a      	subs	r2, r3, #4
 8015eaa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eae:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015eb2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015eb4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eb8:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ec6:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8015eca:	601a      	str	r2, [r3, #0]
  return (val);
 8015ecc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ed0:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8015eda:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8015ede:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8015ee2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ee6:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8015eea:	6019      	str	r1, [r3, #0]
 8015eec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ef0:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8015ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015ef6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015efa:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015f04:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8015f08:	6812      	ldr	r2, [r2, #0]
 8015f0a:	fa93 f212 	qadd16	r2, r3, r2
 8015f0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f12:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8015f16:	601a      	str	r2, [r3, #0]
  return(result);
 8015f18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f1c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8015f26:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8015f2a:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8015f2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f32:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8015f36:	6019      	str	r1, [r3, #0]
 8015f38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f3c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8015f40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015f42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f46:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015f50:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8015f54:	6812      	ldr	r2, [r2, #0]
 8015f56:	fa93 f212 	qadd16	r2, r3, r2
 8015f5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f5e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8015f62:	601a      	str	r2, [r3, #0]
  return(result);
 8015f64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f68:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 8015f72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f76:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	f1a3 0210 	sub.w	r2, r3, #16
 8015f80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f84:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f88:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 8015f8a:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015f8e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015f92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f96:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8015f9a:	6019      	str	r1, [r3, #0]
 8015f9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fa0:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8015fa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015fa6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015faa:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015fb4:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8015fb8:	6812      	ldr	r2, [r2, #0]
 8015fba:	fa93 f222 	shadd16	r2, r3, r2
 8015fbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fc2:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8015fc6:	601a      	str	r2, [r3, #0]
  return(result);
 8015fc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fcc:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fd8:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8015fdc:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8015fe0:	601a      	str	r2, [r3, #0]
 8015fe2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fe6:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8015fea:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015fec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ff0:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8015ff4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ff8:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8015ffc:	6812      	ldr	r2, [r2, #0]
 8015ffe:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016000:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016004:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016010:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8016014:	6812      	ldr	r2, [r2, #0]
 8016016:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016018:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801601c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	1d1a      	adds	r2, r3, #4
 8016026:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801602a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	601a      	str	r2, [r3, #0]
}
 8016032:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016034:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016038:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801603c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016040:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016044:	6019      	str	r1, [r3, #0]
 8016046:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801604a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801604e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016050:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016054:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801605e:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8016062:	6812      	ldr	r2, [r2, #0]
 8016064:	fa93 f212 	qadd16	r2, r3, r2
 8016068:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801606c:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8016070:	601a      	str	r2, [r3, #0]
  return(result);
 8016072:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016076:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 8016080:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8016084:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016088:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801608c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8016090:	6019      	str	r1, [r3, #0]
 8016092:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016096:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801609a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801609c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160a0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80160aa:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80160ae:	6812      	ldr	r2, [r2, #0]
 80160b0:	fad3 f222 	shsub16	r2, r3, r2
 80160b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160b8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80160bc:	601a      	str	r2, [r3, #0]
  return(result);
 80160be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160c2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4619      	mov	r1, r3
 80160ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ce:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80160d2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80160d6:	601a      	str	r2, [r3, #0]
 80160d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160dc:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80160e0:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80160e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160e6:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 80160ea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80160ee:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 80160f2:	6812      	ldr	r2, [r2, #0]
 80160f4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80160f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160fa:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016106:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 801610a:	6812      	ldr	r2, [r2, #0]
 801610c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801610e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016112:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	1d1a      	adds	r2, r3, #4
 801611c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016120:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	601a      	str	r2, [r3, #0]
}
 8016128:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 801612a:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 801612e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8016132:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016136:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801613a:	6019      	str	r1, [r3, #0]
 801613c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016140:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8016144:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016146:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801614a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016154:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8016158:	6812      	ldr	r2, [r2, #0]
 801615a:	fad3 f212 	qsub16	r2, r3, r2
 801615e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016162:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8016166:	601a      	str	r2, [r3, #0]
  return(result);
 8016168:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801616c:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 8016176:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801617a:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801617e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016182:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8016186:	6019      	str	r1, [r3, #0]
 8016188:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801618c:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8016190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016192:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016196:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80161a0:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 80161a4:	6812      	ldr	r2, [r2, #0]
 80161a6:	fad3 f212 	qsub16	r2, r3, r2
 80161aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ae:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80161b2:	601a      	str	r2, [r3, #0]
  return(result);
 80161b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161b8:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 80161c2:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80161c6:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80161ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ce:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80161d2:	6019      	str	r1, [r3, #0]
 80161d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161d8:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80161dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80161de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161e2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80161ec:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 80161f0:	6812      	ldr	r2, [r2, #0]
 80161f2:	faa3 f222 	shasx	r2, r3, r2
 80161f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161fa:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80161fe:	601a      	str	r2, [r3, #0]
  return(result);
 8016200:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016204:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4619      	mov	r1, r3
 801620c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016210:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016214:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016218:	601a      	str	r2, [r3, #0]
 801621a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801621e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016222:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016224:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016228:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 801622c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016230:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8016234:	6812      	ldr	r2, [r2, #0]
 8016236:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016238:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801623c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016248:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 801624c:	6812      	ldr	r2, [r2, #0]
 801624e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016250:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016254:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	1d1a      	adds	r2, r3, #4
 801625e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016262:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	601a      	str	r2, [r3, #0]
}
 801626a:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 801626c:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8016270:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8016274:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016278:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 801627c:	6019      	str	r1, [r3, #0]
 801627e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016282:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8016286:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016288:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801628c:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016296:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 801629a:	6812      	ldr	r2, [r2, #0]
 801629c:	fae3 f222 	shsax	r2, r3, r2
 80162a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162a4:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80162a8:	601a      	str	r2, [r3, #0]
  return(result);
 80162aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ae:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	4619      	mov	r1, r3
 80162b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ba:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80162be:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80162c2:	601a      	str	r2, [r3, #0]
 80162c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162c8:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80162cc:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80162ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162d2:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80162d6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80162da:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 80162de:	6812      	ldr	r2, [r2, #0]
 80162e0:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80162e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162e6:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80162f2:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 80162f6:	6812      	ldr	r2, [r2, #0]
 80162f8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80162fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162fe:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	1d1a      	adds	r2, r3, #4
 8016308:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801630c:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	601a      	str	r2, [r3, #0]
}
 8016314:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8016316:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801631a:	3b01      	subs	r3, #1
 801631c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8016320:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016324:	2b00      	cmp	r3, #0
 8016326:	f47f ad34 	bne.w	8015d92 <arm_radix4_butterfly_inverse_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 801632a:	bf00      	nop
 801632c:	bf00      	nop
 801632e:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8016332:	46bd      	mov	sp, r7
 8016334:	bc90      	pop	{r4, r7}
 8016336:	4770      	bx	lr

08016338 <arm_mfcc_init_q15>:
  const uint32_t *filterPos,
  const uint32_t *filterLengths,
  const q15_t *filterCoefs,
  const q15_t *windowCoefs
  )
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b086      	sub	sp, #24
 801633c:	af00      	add	r7, sp, #0
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	60b9      	str	r1, [r7, #8]
 8016342:	607a      	str	r2, [r7, #4]
 8016344:	603b      	str	r3, [r7, #0]
 arm_status status;

 S->fftLen=fftLen;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	68ba      	ldr	r2, [r7, #8]
 801634a:	615a      	str	r2, [r3, #20]
 S->nbMelFilters=nbMelFilters;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	619a      	str	r2, [r3, #24]
 S->nbDctOutputs=nbDctOutputs;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	683a      	ldr	r2, [r7, #0]
 8016356:	61da      	str	r2, [r3, #28]
 S->dctCoefs=dctCoefs;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	6a3a      	ldr	r2, [r7, #32]
 801635c:	601a      	str	r2, [r3, #0]
 S->filterPos=filterPos;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016362:	60da      	str	r2, [r3, #12]
 S->filterLengths=filterLengths;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016368:	611a      	str	r2, [r3, #16]
 S->filterCoefs=filterCoefs;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801636e:	605a      	str	r2, [r3, #4]
 S->windowCoefs=windowCoefs;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016374:	609a      	str	r2, [r3, #8]

 #if defined(ARM_MFCC_CFFT_BASED)
 status=arm_cfft_init_q15(&(S->cfft),fftLen);
 #else
 RFFT_INIT(fftLen);
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	f103 0020 	add.w	r0, r3, #32
 801637c:	2301      	movs	r3, #1
 801637e:	2200      	movs	r2, #0
 8016380:	68b9      	ldr	r1, [r7, #8]
 8016382:	f000 fab5 	bl	80168f0 <arm_rfft_init_q15>
 8016386:	4603      	mov	r3, r0
 8016388:	75fb      	strb	r3, [r7, #23]
 #endif
 
 return(status);
 801638a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801638e:	4618      	mov	r0, r3
 8016390:	3718      	adds	r7, #24
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
	...

08016398 <arm_mfcc_q15>:
  q15_t *pSrc,
  q15_t *pDst,
  q31_t *pTmp
  )
#endif
{
 8016398:	b5b0      	push	{r4, r5, r7, lr}
 801639a:	b09a      	sub	sp, #104	@ 0x68
 801639c:	af02      	add	r7, sp, #8
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
 80163a4:	603b      	str	r3, [r7, #0]
    q15_t m;
    uint32_t index;
    uint32_t fftShift=0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	653b      	str	r3, [r7, #80]	@ 0x50
    q63_t result;
    arm_matrix_instance_q15 pDctMat;
    uint32_t i;
    uint32_t coefsPos;
    uint32_t filterLimit;
    q15_t *pTmp2=(q15_t*)pTmp;
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

    arm_status status = ARM_MATH_SUCCESS;
 80163ae:	2300      	movs	r3, #0
 80163b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    // q15
    arm_absmax_q15(pSrc,S->fftLen,&m,&index);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	6959      	ldr	r1, [r3, #20]
 80163b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80163bc:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 80163c0:	68b8      	ldr	r0, [r7, #8]
 80163c2:	f7fc f914 	bl	80125ee <arm_absmax_q15>

    if ((m != 0) && (m != 0x7FFF))
 80163c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d025      	beq.n	801641a <arm_mfcc_q15+0x82>
 80163ce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80163d2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80163d6:	4293      	cmp	r3, r2
 80163d8:	d01f      	beq.n	801641a <arm_mfcc_q15+0x82>
    {
       q15_t quotient;
       int16_t shift;

       status = arm_divide_q15(0x7FFF,m,&quotient,&shift);
 80163da:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 80163de:	f107 0314 	add.w	r3, r7, #20
 80163e2:	f107 0216 	add.w	r2, r7, #22
 80163e6:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80163ea:	f7fb f80a 	bl	8011402 <arm_divide_q15>
 80163ee:	4603      	mov	r3, r0
 80163f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
       if (status != ARM_MATH_SUCCESS)
 80163f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d002      	beq.n	8016402 <arm_mfcc_q15+0x6a>
       {
          return(status);
 80163fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8016400:	e0e8      	b.n	80165d4 <arm_mfcc_q15+0x23c>
       }
 
       arm_scale_q15(pSrc,quotient,shift,pSrc,S->fftLen);
 8016402:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8016406:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801640a:	b25a      	sxtb	r2, r3
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	695b      	ldr	r3, [r3, #20]
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	68b8      	ldr	r0, [r7, #8]
 8016416:	f7fa fe31 	bl	801107c <arm_scale_q15>
    }


    // q15
    arm_mult_q15(pSrc,S->windowCoefs, pSrc, S->fftLen);
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	6899      	ldr	r1, [r3, #8]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	695b      	ldr	r3, [r3, #20]
 8016422:	68ba      	ldr	r2, [r7, #8]
 8016424:	68b8      	ldr	r0, [r7, #8]
 8016426:	f7fa fdd1 	bl	8010fcc <arm_mult_q15>


    /* Compute spectrum magnitude 
    */
    fftShift = 31 - __CLZ(S->fftLen);
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	695b      	ldr	r3, [r3, #20]
 801642e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8016430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016432:	2b00      	cmp	r3, #0
 8016434:	d101      	bne.n	801643a <arm_mfcc_q15+0xa2>
    return 32U;
 8016436:	2320      	movs	r3, #32
 8016438:	e003      	b.n	8016442 <arm_mfcc_q15+0xaa>
  return __builtin_clz(value);
 801643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801643c:	fab3 f383 	clz	r3, r3
 8016440:	b2db      	uxtb	r3, r3
 8016442:	f1c3 031f 	rsb	r3, r3, #31
 8016446:	653b      	str	r3, [r7, #80]	@ 0x50
      pTmp2[2*i+1] = 0;
    }
    arm_cfft_q15(&(S->cfft),pTmp2,0,1);
#else
    /* Default RFFT based implementation */
    arm_rfft_q15(&(S->rfft),pSrc,pTmp2);
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	3320      	adds	r3, #32
 801644c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801644e:	68b9      	ldr	r1, [r7, #8]
 8016450:	4618      	mov	r0, r3
 8016452:	f000 fae4 	bl	8016a1e <arm_rfft_q15>
#endif
#endif
    filterLimit = 1 + (S->fftLen >> 1);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	695b      	ldr	r3, [r3, #20]
 801645a:	085b      	lsrs	r3, r3, #1
 801645c:	3301      	adds	r3, #1
 801645e:	64bb      	str	r3, [r7, #72]	@ 0x48


    // q15 - fftShift
    arm_cmplx_mag_q15(pTmp2,pSrc,filterLimit);
 8016460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016462:	68b9      	ldr	r1, [r7, #8]
 8016464:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016466:	f7fa ff92 	bl	801138e <arm_cmplx_mag_q15>
    // q14 - fftShift

    /* Apply MEL filters */
    coefsPos = 0;
 801646a:	2300      	movs	r3, #0
 801646c:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(i=0; i<S->nbMelFilters; i++)
 801646e:	2300      	movs	r3, #0
 8016470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016472:	e046      	b.n	8016502 <arm_mfcc_q15+0x16a>
    {
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	68da      	ldr	r2, [r3, #12]
 8016478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801647a:	009b      	lsls	r3, r3, #2
 801647c:	4413      	add	r3, r2
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	005b      	lsls	r3, r3, #1
 8016482:	68ba      	ldr	r2, [r7, #8]
 8016484:	18d0      	adds	r0, r2, r3
        &(S->filterCoefs[coefsPos]),
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	685a      	ldr	r2, [r3, #4]
 801648a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	18d1      	adds	r1, r2, r3
        S->filterLengths[i],
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	691a      	ldr	r2, [r3, #16]
 8016494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016496:	009b      	lsls	r3, r3, #2
 8016498:	4413      	add	r3, r2
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	f107 0320 	add.w	r3, r7, #32
 80164a0:	f7fa fd5a 	bl	8010f58 <arm_dot_prod_q15>
        &result);

      coefsPos += S->filterLengths[i];
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	691a      	ldr	r2, [r3, #16]
 80164a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80164aa:	009b      	lsls	r3, r3, #2
 80164ac:	4413      	add	r3, r2
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80164b2:	4413      	add	r3, r2
 80164b4:	65bb      	str	r3, [r7, #88]	@ 0x58

      // q34.29 - fftShift
      result += MICRO_Q15;
 80164b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80164ba:	f240 2119 	movw	r1, #537	@ 0x219
 80164be:	1854      	adds	r4, r2, r1
 80164c0:	f143 0500 	adc.w	r5, r3, #0
 80164c4:	e9c7 4508 	strd	r4, r5, [r7, #32]
      result >>= SHIFT_MELFILTER_SATURATION_Q15;
 80164c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80164cc:	f04f 0200 	mov.w	r2, #0
 80164d0:	f04f 0300 	mov.w	r3, #0
 80164d4:	0a82      	lsrs	r2, r0, #10
 80164d6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80164da:	128b      	asrs	r3, r1, #10
 80164dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      // q34.29 - fftShift - satShift
      pTmp[i] = __SSAT(result,31) ;
 80164e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80164e4:	4613      	mov	r3, r2
 80164e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80164e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164ea:	f303 031e 	ssat	r3, #31, r3
 80164ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80164f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80164f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80164f4:	009b      	lsls	r3, r3, #2
 80164f6:	6839      	ldr	r1, [r7, #0]
 80164f8:	440b      	add	r3, r1
 80164fa:	601a      	str	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 80164fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80164fe:	3301      	adds	r3, #1
 8016500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	699b      	ldr	r3, [r3, #24]
 8016506:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016508:	429a      	cmp	r2, r3
 801650a:	d3b3      	bcc.n	8016474 <arm_mfcc_q15+0xdc>

    }

    if ((m != 0) && (m != 0x7FFF))
 801650c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016510:	2b00      	cmp	r3, #0
 8016512:	d010      	beq.n	8016536 <arm_mfcc_q15+0x19e>
 8016514:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016518:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801651c:	4293      	cmp	r3, r2
 801651e:	d00a      	beq.n	8016536 <arm_mfcc_q15+0x19e>
    {
      arm_scale_q31(pTmp,m<<16,0,pTmp,S->nbMelFilters);
 8016520:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016524:	0419      	lsls	r1, r3, #16
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	699b      	ldr	r3, [r3, #24]
 801652a:	9300      	str	r3, [sp, #0]
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	2200      	movs	r2, #0
 8016530:	6838      	ldr	r0, [r7, #0]
 8016532:	f7fa fdda 	bl	80110ea <arm_scale_q31>
    }
   
    // q34.29 - fftShift - satShift
    /* Compute the log */
    arm_vlog_q31(pTmp,pTmp,S->nbMelFilters);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	699b      	ldr	r3, [r3, #24]
 801653a:	461a      	mov	r2, r3
 801653c:	6839      	ldr	r1, [r7, #0]
 801653e:	6838      	ldr	r0, [r7, #0]
 8016540:	f7fb faee 	bl	8011b20 <arm_vlog_q31>


    // q5.26
   
    logExponent = fftShift + 2 + SHIFT_MELFILTER_SATURATION_Q15;
 8016544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016546:	330c      	adds	r3, #12
 8016548:	647b      	str	r3, [r7, #68]	@ 0x44
    logExponent = logExponent * LOG2TOLOG_Q15;
 801654a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801654c:	4a23      	ldr	r2, [pc, #140]	@ (80165dc <arm_mfcc_q15+0x244>)
 801654e:	fb02 f303 	mul.w	r3, r2, r3
 8016552:	647b      	str	r3, [r7, #68]	@ 0x44


    // q8.26
    arm_offset_q31(pTmp,logExponent,pTmp,S->nbMelFilters);
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	699b      	ldr	r3, [r3, #24]
 8016558:	683a      	ldr	r2, [r7, #0]
 801655a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801655c:	6838      	ldr	r0, [r7, #0]
 801655e:	f7fa fd65 	bl	801102c <arm_offset_q31>
    arm_shift_q31(pTmp,-19,pTmp,S->nbMelFilters);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	699b      	ldr	r3, [r3, #24]
 8016566:	683a      	ldr	r2, [r7, #0]
 8016568:	f06f 0112 	mvn.w	r1, #18
 801656c:	6838      	ldr	r0, [r7, #0]
 801656e:	f7fa fea5 	bl	80112bc <arm_shift_q31>
    for(i=0; i<S->nbMelFilters; i++)
 8016572:	2300      	movs	r3, #0
 8016574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016576:	e014      	b.n	80165a2 <arm_mfcc_q15+0x20a>
    { 
      pSrc[i] = __SSAT((q15_t)pTmp[i],16);
 8016578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801657a:	009b      	lsls	r3, r3, #2
 801657c:	683a      	ldr	r2, [r7, #0]
 801657e:	4413      	add	r3, r2
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	b21b      	sxth	r3, r3
 8016584:	643b      	str	r3, [r7, #64]	@ 0x40
 8016586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016588:	f303 030f 	ssat	r3, #16, r3
 801658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801658e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016592:	005b      	lsls	r3, r3, #1
 8016594:	68ba      	ldr	r2, [r7, #8]
 8016596:	4413      	add	r3, r2
 8016598:	b20a      	sxth	r2, r1
 801659a:	801a      	strh	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 801659c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801659e:	3301      	adds	r3, #1
 80165a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	699b      	ldr	r3, [r3, #24]
 80165a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d3e5      	bcc.n	8016578 <arm_mfcc_q15+0x1e0>
    }

    // q8.7

    pDctMat.numRows=S->nbDctOutputs;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	69db      	ldr	r3, [r3, #28]
 80165b0:	b29b      	uxth	r3, r3
 80165b2:	833b      	strh	r3, [r7, #24]
    pDctMat.numCols=S->nbMelFilters;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	699b      	ldr	r3, [r3, #24]
 80165b8:	b29b      	uxth	r3, r3
 80165ba:	837b      	strh	r3, [r7, #26]
    pDctMat.pData=(q15_t*)S->dctCoefs;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	61fb      	str	r3, [r7, #28]

    arm_mat_vec_mult_q15(&pDctMat, pSrc, pDst);
 80165c2:	f107 0318 	add.w	r3, r7, #24
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	68b9      	ldr	r1, [r7, #8]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7fb fac9 	bl	8011b62 <arm_mat_vec_mult_q15>

    return(status);
 80165d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	3760      	adds	r7, #96	@ 0x60
 80165d8:	46bd      	mov	sp, r7
 80165da:	bdb0      	pop	{r4, r5, r7, pc}
 80165dc:	02c5c860 	.word	0x02c5c860

080165e0 <arm_rfft_init_8192_q15>:
  @par
                   This function also initializes Twiddle factor table.

 */

RFFTINIT_Q15(8192,4096,1)
 80165e0:	b480      	push	{r7}
 80165e2:	b085      	sub	sp, #20
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	60f8      	str	r0, [r7, #12]
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80165f2:	601a      	str	r2, [r3, #0]
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	4a0d      	ldr	r2, [pc, #52]	@ (801662c <arm_rfft_init_8192_q15+0x4c>)
 80165f8:	60da      	str	r2, [r3, #12]
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	4a0c      	ldr	r2, [pc, #48]	@ (8016630 <arm_rfft_init_8192_q15+0x50>)
 80165fe:	611a      	str	r2, [r3, #16]
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	b2da      	uxtb	r2, r3
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	711a      	strb	r2, [r3, #4]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	b2da      	uxtb	r2, r3
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	715a      	strb	r2, [r3, #5]
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2201      	movs	r2, #1
 8016614:	609a      	str	r2, [r3, #8]
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	4a06      	ldr	r2, [pc, #24]	@ (8016634 <arm_rfft_init_8192_q15+0x54>)
 801661a:	615a      	str	r2, [r3, #20]
 801661c:	2300      	movs	r3, #0
 801661e:	4618      	mov	r0, r3
 8016620:	3714      	adds	r7, #20
 8016622:	46bd      	mov	sp, r7
 8016624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016628:	4770      	bx	lr
 801662a:	bf00      	nop
 801662c:	08029d28 	.word	0x08029d28
 8016630:	0802dd28 	.word	0x0802dd28
 8016634:	08031e28 	.word	0x08031e28

08016638 <arm_rfft_init_4096_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(4096,2048,2)
 8016638:	b480      	push	{r7}
 801663a:	b085      	sub	sp, #20
 801663c:	af00      	add	r7, sp, #0
 801663e:	60f8      	str	r0, [r7, #12]
 8016640:	60b9      	str	r1, [r7, #8]
 8016642:	607a      	str	r2, [r7, #4]
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801664a:	601a      	str	r2, [r3, #0]
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	4a0d      	ldr	r2, [pc, #52]	@ (8016684 <arm_rfft_init_4096_q15+0x4c>)
 8016650:	60da      	str	r2, [r3, #12]
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	4a0c      	ldr	r2, [pc, #48]	@ (8016688 <arm_rfft_init_4096_q15+0x50>)
 8016656:	611a      	str	r2, [r3, #16]
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	b2da      	uxtb	r2, r3
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	711a      	strb	r2, [r3, #4]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	b2da      	uxtb	r2, r3
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	715a      	strb	r2, [r3, #5]
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2202      	movs	r2, #2
 801666c:	609a      	str	r2, [r3, #8]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	4a06      	ldr	r2, [pc, #24]	@ (801668c <arm_rfft_init_4096_q15+0x54>)
 8016672:	615a      	str	r2, [r3, #20]
 8016674:	2300      	movs	r3, #0
 8016676:	4618      	mov	r0, r3
 8016678:	3714      	adds	r7, #20
 801667a:	46bd      	mov	sp, r7
 801667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop
 8016684:	08029d28 	.word	0x08029d28
 8016688:	0802dd28 	.word	0x0802dd28
 801668c:	08031e18 	.word	0x08031e18

08016690 <arm_rfft_init_2048_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(2048,1024,4)
 8016690:	b480      	push	{r7}
 8016692:	b085      	sub	sp, #20
 8016694:	af00      	add	r7, sp, #0
 8016696:	60f8      	str	r0, [r7, #12]
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80166a2:	601a      	str	r2, [r3, #0]
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	4a0d      	ldr	r2, [pc, #52]	@ (80166dc <arm_rfft_init_2048_q15+0x4c>)
 80166a8:	60da      	str	r2, [r3, #12]
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	4a0c      	ldr	r2, [pc, #48]	@ (80166e0 <arm_rfft_init_2048_q15+0x50>)
 80166ae:	611a      	str	r2, [r3, #16]
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	b2da      	uxtb	r2, r3
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	711a      	strb	r2, [r3, #4]
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	b2da      	uxtb	r2, r3
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	715a      	strb	r2, [r3, #5]
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	2204      	movs	r2, #4
 80166c4:	609a      	str	r2, [r3, #8]
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	4a06      	ldr	r2, [pc, #24]	@ (80166e4 <arm_rfft_init_2048_q15+0x54>)
 80166ca:	615a      	str	r2, [r3, #20]
 80166cc:	2300      	movs	r3, #0
 80166ce:	4618      	mov	r0, r3
 80166d0:	3714      	adds	r7, #20
 80166d2:	46bd      	mov	sp, r7
 80166d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop
 80166dc:	08029d28 	.word	0x08029d28
 80166e0:	0802dd28 	.word	0x0802dd28
 80166e4:	08031e08 	.word	0x08031e08

080166e8 <arm_rfft_init_1024_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(1024,512,8)
 80166e8:	b480      	push	{r7}
 80166ea:	b085      	sub	sp, #20
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	60f8      	str	r0, [r7, #12]
 80166f0:	60b9      	str	r1, [r7, #8]
 80166f2:	607a      	str	r2, [r7, #4]
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80166fa:	601a      	str	r2, [r3, #0]
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	4a0d      	ldr	r2, [pc, #52]	@ (8016734 <arm_rfft_init_1024_q15+0x4c>)
 8016700:	60da      	str	r2, [r3, #12]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	4a0c      	ldr	r2, [pc, #48]	@ (8016738 <arm_rfft_init_1024_q15+0x50>)
 8016706:	611a      	str	r2, [r3, #16]
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	b2da      	uxtb	r2, r3
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	711a      	strb	r2, [r3, #4]
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	b2da      	uxtb	r2, r3
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	715a      	strb	r2, [r3, #5]
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	2208      	movs	r2, #8
 801671c:	609a      	str	r2, [r3, #8]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	4a06      	ldr	r2, [pc, #24]	@ (801673c <arm_rfft_init_1024_q15+0x54>)
 8016722:	615a      	str	r2, [r3, #20]
 8016724:	2300      	movs	r3, #0
 8016726:	4618      	mov	r0, r3
 8016728:	3714      	adds	r7, #20
 801672a:	46bd      	mov	sp, r7
 801672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016730:	4770      	bx	lr
 8016732:	bf00      	nop
 8016734:	08029d28 	.word	0x08029d28
 8016738:	0802dd28 	.word	0x0802dd28
 801673c:	08031df8 	.word	0x08031df8

08016740 <arm_rfft_init_512_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(512,256,16)
 8016740:	b480      	push	{r7}
 8016742:	b085      	sub	sp, #20
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	607a      	str	r2, [r7, #4]
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016752:	601a      	str	r2, [r3, #0]
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	4a0d      	ldr	r2, [pc, #52]	@ (801678c <arm_rfft_init_512_q15+0x4c>)
 8016758:	60da      	str	r2, [r3, #12]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	4a0c      	ldr	r2, [pc, #48]	@ (8016790 <arm_rfft_init_512_q15+0x50>)
 801675e:	611a      	str	r2, [r3, #16]
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	b2da      	uxtb	r2, r3
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	711a      	strb	r2, [r3, #4]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	b2da      	uxtb	r2, r3
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	715a      	strb	r2, [r3, #5]
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	2210      	movs	r2, #16
 8016774:	609a      	str	r2, [r3, #8]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	4a06      	ldr	r2, [pc, #24]	@ (8016794 <arm_rfft_init_512_q15+0x54>)
 801677a:	615a      	str	r2, [r3, #20]
 801677c:	2300      	movs	r3, #0
 801677e:	4618      	mov	r0, r3
 8016780:	3714      	adds	r7, #20
 8016782:	46bd      	mov	sp, r7
 8016784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016788:	4770      	bx	lr
 801678a:	bf00      	nop
 801678c:	08029d28 	.word	0x08029d28
 8016790:	0802dd28 	.word	0x0802dd28
 8016794:	08031de8 	.word	0x08031de8

08016798 <arm_rfft_init_256_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(256,128,32)
 8016798:	b480      	push	{r7}
 801679a:	b085      	sub	sp, #20
 801679c:	af00      	add	r7, sp, #0
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	60b9      	str	r1, [r7, #8]
 80167a2:	607a      	str	r2, [r7, #4]
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80167aa:	601a      	str	r2, [r3, #0]
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	4a0d      	ldr	r2, [pc, #52]	@ (80167e4 <arm_rfft_init_256_q15+0x4c>)
 80167b0:	60da      	str	r2, [r3, #12]
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	4a0c      	ldr	r2, [pc, #48]	@ (80167e8 <arm_rfft_init_256_q15+0x50>)
 80167b6:	611a      	str	r2, [r3, #16]
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	b2da      	uxtb	r2, r3
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	711a      	strb	r2, [r3, #4]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	b2da      	uxtb	r2, r3
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	715a      	strb	r2, [r3, #5]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	2220      	movs	r2, #32
 80167cc:	609a      	str	r2, [r3, #8]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	4a06      	ldr	r2, [pc, #24]	@ (80167ec <arm_rfft_init_256_q15+0x54>)
 80167d2:	615a      	str	r2, [r3, #20]
 80167d4:	2300      	movs	r3, #0
 80167d6:	4618      	mov	r0, r3
 80167d8:	3714      	adds	r7, #20
 80167da:	46bd      	mov	sp, r7
 80167dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e0:	4770      	bx	lr
 80167e2:	bf00      	nop
 80167e4:	08029d28 	.word	0x08029d28
 80167e8:	0802dd28 	.word	0x0802dd28
 80167ec:	08031dd8 	.word	0x08031dd8

080167f0 <arm_rfft_init_128_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(128,64,64)
 80167f0:	b480      	push	{r7}
 80167f2:	b085      	sub	sp, #20
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	607a      	str	r2, [r7, #4]
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2280      	movs	r2, #128	@ 0x80
 8016800:	601a      	str	r2, [r3, #0]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	4a0c      	ldr	r2, [pc, #48]	@ (8016838 <arm_rfft_init_128_q15+0x48>)
 8016806:	60da      	str	r2, [r3, #12]
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	4a0c      	ldr	r2, [pc, #48]	@ (801683c <arm_rfft_init_128_q15+0x4c>)
 801680c:	611a      	str	r2, [r3, #16]
 801680e:	68bb      	ldr	r3, [r7, #8]
 8016810:	b2da      	uxtb	r2, r3
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	711a      	strb	r2, [r3, #4]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	b2da      	uxtb	r2, r3
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	715a      	strb	r2, [r3, #5]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	2240      	movs	r2, #64	@ 0x40
 8016822:	609a      	str	r2, [r3, #8]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	4a06      	ldr	r2, [pc, #24]	@ (8016840 <arm_rfft_init_128_q15+0x50>)
 8016828:	615a      	str	r2, [r3, #20]
 801682a:	2300      	movs	r3, #0
 801682c:	4618      	mov	r0, r3
 801682e:	3714      	adds	r7, #20
 8016830:	46bd      	mov	sp, r7
 8016832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016836:	4770      	bx	lr
 8016838:	08029d28 	.word	0x08029d28
 801683c:	0802dd28 	.word	0x0802dd28
 8016840:	08031dc8 	.word	0x08031dc8

08016844 <arm_rfft_init_64_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(64,32,128)
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	2240      	movs	r2, #64	@ 0x40
 8016854:	601a      	str	r2, [r3, #0]
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	4a0c      	ldr	r2, [pc, #48]	@ (801688c <arm_rfft_init_64_q15+0x48>)
 801685a:	60da      	str	r2, [r3, #12]
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	4a0c      	ldr	r2, [pc, #48]	@ (8016890 <arm_rfft_init_64_q15+0x4c>)
 8016860:	611a      	str	r2, [r3, #16]
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	b2da      	uxtb	r2, r3
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	711a      	strb	r2, [r3, #4]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	b2da      	uxtb	r2, r3
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	715a      	strb	r2, [r3, #5]
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	2280      	movs	r2, #128	@ 0x80
 8016876:	609a      	str	r2, [r3, #8]
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	4a06      	ldr	r2, [pc, #24]	@ (8016894 <arm_rfft_init_64_q15+0x50>)
 801687c:	615a      	str	r2, [r3, #20]
 801687e:	2300      	movs	r3, #0
 8016880:	4618      	mov	r0, r3
 8016882:	3714      	adds	r7, #20
 8016884:	46bd      	mov	sp, r7
 8016886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688a:	4770      	bx	lr
 801688c:	08029d28 	.word	0x08029d28
 8016890:	0802dd28 	.word	0x0802dd28
 8016894:	08031db8 	.word	0x08031db8

08016898 <arm_rfft_init_32_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(32,16,256)
 8016898:	b480      	push	{r7}
 801689a:	b085      	sub	sp, #20
 801689c:	af00      	add	r7, sp, #0
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	60b9      	str	r1, [r7, #8]
 80168a2:	607a      	str	r2, [r7, #4]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	2220      	movs	r2, #32
 80168a8:	601a      	str	r2, [r3, #0]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	4a0d      	ldr	r2, [pc, #52]	@ (80168e4 <arm_rfft_init_32_q15+0x4c>)
 80168ae:	60da      	str	r2, [r3, #12]
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	4a0d      	ldr	r2, [pc, #52]	@ (80168e8 <arm_rfft_init_32_q15+0x50>)
 80168b4:	611a      	str	r2, [r3, #16]
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	711a      	strb	r2, [r3, #4]
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	b2da      	uxtb	r2, r3
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	715a      	strb	r2, [r3, #5]
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80168cc:	609a      	str	r2, [r3, #8]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	4a06      	ldr	r2, [pc, #24]	@ (80168ec <arm_rfft_init_32_q15+0x54>)
 80168d2:	615a      	str	r2, [r3, #20]
 80168d4:	2300      	movs	r3, #0
 80168d6:	4618      	mov	r0, r3
 80168d8:	3714      	adds	r7, #20
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop
 80168e4:	08029d28 	.word	0x08029d28
 80168e8:	0802dd28 	.word	0x0802dd28
 80168ec:	08031da8 	.word	0x08031da8

080168f0 <arm_rfft_init_q15>:
ARM_DSP_ATTRIBUTE arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	607a      	str	r2, [r7, #4]
 80168fc:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 80168fe:	23ff      	movs	r3, #255	@ 0xff
 8016900:	75fb      	strb	r3, [r7, #23]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (fftLenReal)
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016908:	d038      	beq.n	801697c <arm_rfft_init_q15+0x8c>
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016910:	d87c      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016918:	d038      	beq.n	801698c <arm_rfft_init_q15+0x9c>
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016920:	d874      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016928:	d038      	beq.n	801699c <arm_rfft_init_q15+0xac>
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016930:	d86c      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 8016932:	68bb      	ldr	r3, [r7, #8]
 8016934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016938:	d038      	beq.n	80169ac <arm_rfft_init_q15+0xbc>
 801693a:	68bb      	ldr	r3, [r7, #8]
 801693c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016940:	d864      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016948:	d038      	beq.n	80169bc <arm_rfft_init_q15+0xcc>
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016950:	d85c      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016958:	d038      	beq.n	80169cc <arm_rfft_init_q15+0xdc>
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016960:	d854      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	2b80      	cmp	r3, #128	@ 0x80
 8016966:	d039      	beq.n	80169dc <arm_rfft_init_q15+0xec>
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	2b80      	cmp	r3, #128	@ 0x80
 801696c:	d84e      	bhi.n	8016a0c <arm_rfft_init_q15+0x11c>
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	2b20      	cmp	r3, #32
 8016972:	d043      	beq.n	80169fc <arm_rfft_init_q15+0x10c>
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	2b40      	cmp	r3, #64	@ 0x40
 8016978:	d038      	beq.n	80169ec <arm_rfft_init_q15+0xfc>
 801697a:	e047      	b.n	8016a0c <arm_rfft_init_q15+0x11c>
    {
    case 8192U:
        status = arm_rfft_init_8192_q15( S,ifftFlagR,bitReverseFlag );
 801697c:	683a      	ldr	r2, [r7, #0]
 801697e:	6879      	ldr	r1, [r7, #4]
 8016980:	68f8      	ldr	r0, [r7, #12]
 8016982:	f7ff fe2d 	bl	80165e0 <arm_rfft_init_8192_q15>
 8016986:	4603      	mov	r3, r0
 8016988:	75fb      	strb	r3, [r7, #23]
        break;
 801698a:	e042      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 4096U:
        status = arm_rfft_init_4096_q15( S,ifftFlagR,bitReverseFlag );
 801698c:	683a      	ldr	r2, [r7, #0]
 801698e:	6879      	ldr	r1, [r7, #4]
 8016990:	68f8      	ldr	r0, [r7, #12]
 8016992:	f7ff fe51 	bl	8016638 <arm_rfft_init_4096_q15>
 8016996:	4603      	mov	r3, r0
 8016998:	75fb      	strb	r3, [r7, #23]
        break;
 801699a:	e03a      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 2048U:
        status = arm_rfft_init_2048_q15( S,ifftFlagR,bitReverseFlag );
 801699c:	683a      	ldr	r2, [r7, #0]
 801699e:	6879      	ldr	r1, [r7, #4]
 80169a0:	68f8      	ldr	r0, [r7, #12]
 80169a2:	f7ff fe75 	bl	8016690 <arm_rfft_init_2048_q15>
 80169a6:	4603      	mov	r3, r0
 80169a8:	75fb      	strb	r3, [r7, #23]
        break;
 80169aa:	e032      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 1024U:
        status = arm_rfft_init_1024_q15( S,ifftFlagR,bitReverseFlag );
 80169ac:	683a      	ldr	r2, [r7, #0]
 80169ae:	6879      	ldr	r1, [r7, #4]
 80169b0:	68f8      	ldr	r0, [r7, #12]
 80169b2:	f7ff fe99 	bl	80166e8 <arm_rfft_init_1024_q15>
 80169b6:	4603      	mov	r3, r0
 80169b8:	75fb      	strb	r3, [r7, #23]
        break;
 80169ba:	e02a      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 512U:
        status = arm_rfft_init_512_q15( S,ifftFlagR,bitReverseFlag );
 80169bc:	683a      	ldr	r2, [r7, #0]
 80169be:	6879      	ldr	r1, [r7, #4]
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f7ff febd 	bl	8016740 <arm_rfft_init_512_q15>
 80169c6:	4603      	mov	r3, r0
 80169c8:	75fb      	strb	r3, [r7, #23]
        break;
 80169ca:	e022      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 256U:
        status = arm_rfft_init_256_q15( S,ifftFlagR,bitReverseFlag );
 80169cc:	683a      	ldr	r2, [r7, #0]
 80169ce:	6879      	ldr	r1, [r7, #4]
 80169d0:	68f8      	ldr	r0, [r7, #12]
 80169d2:	f7ff fee1 	bl	8016798 <arm_rfft_init_256_q15>
 80169d6:	4603      	mov	r3, r0
 80169d8:	75fb      	strb	r3, [r7, #23]
        break;
 80169da:	e01a      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 128U:
        status = arm_rfft_init_128_q15( S,ifftFlagR,bitReverseFlag );
 80169dc:	683a      	ldr	r2, [r7, #0]
 80169de:	6879      	ldr	r1, [r7, #4]
 80169e0:	68f8      	ldr	r0, [r7, #12]
 80169e2:	f7ff ff05 	bl	80167f0 <arm_rfft_init_128_q15>
 80169e6:	4603      	mov	r3, r0
 80169e8:	75fb      	strb	r3, [r7, #23]
        break;
 80169ea:	e012      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    case 64U:
        status = arm_rfft_init_64_q15( S,ifftFlagR,bitReverseFlag );
 80169ec:	683a      	ldr	r2, [r7, #0]
 80169ee:	6879      	ldr	r1, [r7, #4]
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	f7ff ff27 	bl	8016844 <arm_rfft_init_64_q15>
 80169f6:	4603      	mov	r3, r0
 80169f8:	75fb      	strb	r3, [r7, #23]
        break;
 80169fa:	e00a      	b.n	8016a12 <arm_rfft_init_q15+0x122>
   case 32U:
        status = arm_rfft_init_32_q15( S,ifftFlagR,bitReverseFlag );
 80169fc:	683a      	ldr	r2, [r7, #0]
 80169fe:	6879      	ldr	r1, [r7, #4]
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	f7ff ff49 	bl	8016898 <arm_rfft_init_32_q15>
 8016a06:	4603      	mov	r3, r0
 8016a08:	75fb      	strb	r3, [r7, #23]
        break;
 8016a0a:	e002      	b.n	8016a12 <arm_rfft_init_q15+0x122>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8016a0c:	23ff      	movs	r3, #255	@ 0xff
 8016a0e:	75fb      	strb	r3, [r7, #23]
        break;
 8016a10:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 8016a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3718      	adds	r7, #24
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}

08016a1e <arm_rfft_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
        q15_t * pSrc,
        q15_t * pDst)
{
 8016a1e:	b580      	push	{r7, lr}
 8016a20:	b088      	sub	sp, #32
 8016a22:	af02      	add	r7, sp, #8
 8016a24:	60f8      	str	r0, [r7, #12]
 8016a26:	60b9      	str	r1, [r7, #8]
 8016a28:	607a      	str	r2, [r7, #4]
#if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  const arm_cfft_instance_q15 *S_CFFT = &(S->cfftInst);
#else
  const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	695b      	ldr	r3, [r3, #20]
 8016a2e:	617b      	str	r3, [r7, #20]
#endif
        uint32_t L2 = S->fftLenReal >> 1U;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	085b      	lsrs	r3, r3, #1
 8016a36:	613b      	str	r3, [r7, #16]

  /* Calculation of RIFFT of input */
  if (S->ifftFlagR == 1U)
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	791b      	ldrb	r3, [r3, #4]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d11d      	bne.n	8016a7c <arm_rfft_q15+0x5e>
  {
     /*  Real IFFT core process */
     arm_split_rifft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	68da      	ldr	r2, [r3, #12]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	6919      	ldr	r1, [r3, #16]
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	689b      	ldr	r3, [r3, #8]
 8016a4c:	9301      	str	r3, [sp, #4]
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	9300      	str	r3, [sp, #0]
 8016a52:	460b      	mov	r3, r1
 8016a54:	6939      	ldr	r1, [r7, #16]
 8016a56:	68b8      	ldr	r0, [r7, #8]
 8016a58:	f000 f951 	bl	8016cfe <arm_split_rifft_q15>

     /* Complex IFFT process */
     arm_cfft_q15 (S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	791a      	ldrb	r2, [r3, #4]
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	795b      	ldrb	r3, [r3, #5]
 8016a64:	6879      	ldr	r1, [r7, #4]
 8016a66:	6978      	ldr	r0, [r7, #20]
 8016a68:	f7fb ff4e 	bl	8012908 <arm_cfft_q15>

     arm_shift_q15(pDst, 1, pDst, S->fftLenReal);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	687a      	ldr	r2, [r7, #4]
 8016a72:	2101      	movs	r1, #1
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f7fa fbd7 	bl	8011228 <arm_shift_q15>

     /*  Real FFT core process */
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 8016a7a:	e015      	b.n	8016aa8 <arm_rfft_q15+0x8a>
     arm_cfft_q15 (S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	791a      	ldrb	r2, [r3, #4]
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	795b      	ldrb	r3, [r3, #5]
 8016a84:	68b9      	ldr	r1, [r7, #8]
 8016a86:	6978      	ldr	r0, [r7, #20]
 8016a88:	f7fb ff3e 	bl	8012908 <arm_cfft_q15>
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	68da      	ldr	r2, [r3, #12]
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	6919      	ldr	r1, [r3, #16]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	689b      	ldr	r3, [r3, #8]
 8016a98:	9301      	str	r3, [sp, #4]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	460b      	mov	r3, r1
 8016aa0:	6939      	ldr	r1, [r7, #16]
 8016aa2:	68b8      	ldr	r0, [r7, #8]
 8016aa4:	f000 f804 	bl	8016ab0 <arm_split_rfft_q15>
}
 8016aa8:	bf00      	nop
 8016aaa:	3718      	adds	r7, #24
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <arm_split_rfft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{       
 8016ab0:	b480      	push	{r7}
 8016ab2:	b0ad      	sub	sp, #180	@ 0xb4
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	60f8      	str	r0, [r7, #12]
 8016ab8:	60b9      	str	r1, [r7, #8]
 8016aba:	607a      	str	r2, [r7, #4]
 8016abc:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_DSP)
        q15_t *pD1, *pD2;
#endif

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2];
 8016abe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016ac2:	009b      	lsls	r3, r3, #2
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	4413      	add	r3, r2
 8016ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pCoefB = &pBTable[modifier * 2];
 8016acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016ad0:	009b      	lsls	r3, r3, #2
 8016ad2:	683a      	ldr	r2, [r7, #0]
 8016ad4:	4413      	add	r3, r2
 8016ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  pSrc1 = &pSrc[2];
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	3304      	adds	r3, #4
 8016ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  pSrc2 = &pSrc[(2U * fftLen) - 2U];
 8016ae0:	68ba      	ldr	r2, [r7, #8]
 8016ae2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016ae6:	4413      	add	r3, r2
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	68fa      	ldr	r2, [r7, #12]
 8016aec:	4413      	add	r3, r2
 8016aee:	637b      	str	r3, [r7, #52]	@ 0x34

#if defined (ARM_MATH_DSP)

    i = 1U;
 8016af0:	2301      	movs	r3, #1
 8016af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pD1 = pDst + 2;
 8016af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016afa:	3304      	adds	r3, #4
 8016afc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    pD2 = pDst + (4U * fftLen) - 2;
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	00db      	lsls	r3, r3, #3
 8016b04:	3b04      	subs	r3, #4
 8016b06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016b0a:	4413      	add	r3, r2
 8016b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (i = fftLen - 1; i > 0; i--)
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	3b01      	subs	r3, #1
 8016b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016b18:	e0ba      	b.n	8016c90 <arm_split_rfft_q15+0x1e0>
         */


#ifndef ARM_MATH_BIG_ENDIAN
        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA));
 8016b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  memcpy (&val, pQ15, 4);
 8016b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b26:	461a      	mov	r2, r3
 8016b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016b2c:	643b      	str	r3, [r7, #64]	@ 0x40
  memcpy (&val, pQ15, 4);
 8016b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016b38:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016b3e:	fb43 f302 	smusd	r3, r3, r2
 8016b42:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8016b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        /* -(pSrc[2 * i + 1] * pATable[2 * i + 1] - pSrc[2 * i] * pATable[2 * i]) */
        outR = -(__SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] + pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(read_q15x2 (pSrc2), read_q15x2((q15_t *) pCoefB), outR) >> 16U;
 8016b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b4c:	653b      	str	r3, [r7, #80]	@ 0x50
  memcpy (&val, pQ15, 4);
 8016b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b56:	4619      	mov	r1, r3
 8016b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016b5c:	657b      	str	r3, [r7, #84]	@ 0x54
  memcpy (&val, pQ15, 4);
 8016b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b66:	461a      	mov	r2, r3
 8016b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016b6c:	6679      	str	r1, [r7, #100]	@ 0x64
 8016b6e:	663a      	str	r2, [r7, #96]	@ 0x60
 8016b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016b72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016b76:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8016b78:	fb23 1302 	smlad	r3, r3, r2, r1
 8016b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8016b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b80:	0c1b      	lsrs	r3, r3, #16
 8016b82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
#ifndef ARM_MATH_BIG_ENDIAN
        outI = __SMUSDX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b88:	3b04      	subs	r3, #4
 8016b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b8e:	3304      	adds	r3, #4
 8016b90:	66bb      	str	r3, [r7, #104]	@ 0x68
  memcpy (&val, pQ15, 4);
 8016b92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	623b      	str	r3, [r7, #32]
  return (val);
 8016b98:	6a3b      	ldr	r3, [r7, #32]
 8016b9a:	461a      	mov	r2, r3
 8016b9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memcpy (&val, pQ15, 4);
 8016ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	61fb      	str	r3, [r7, #28]
  return (val);
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016bac:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016bb0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016bb2:	fb43 f312 	smusdx	r3, r3, r2
 8016bb6:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 8016bb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#else
        outI = __SMUSDX(read_q15x2 ((q15_t *) pCoefB), read_q15x2_da (&pSrc2));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), outI);
 8016bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016bc0:	3304      	adds	r3, #4
 8016bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016bc6:	3b04      	subs	r3, #4
 8016bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memcpy (&val, pQ15, 4);
 8016bca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	61bb      	str	r3, [r7, #24]
  return (val);
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  memcpy (&val, pQ15, 4);
 8016bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	617b      	str	r3, [r7, #20]
  return (val);
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	461a      	mov	r2, r3
 8016be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016bec:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8016bf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016bfc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016c00:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8016c04:	fb23 1312 	smladx	r3, r3, r2, r1
 8016c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8016c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016c10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        /* write output */
        *pD1++ = (q15_t) outR;
 8016c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016c18:	1c9a      	adds	r2, r3, #2
 8016c1a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8016c1e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8016c22:	b212      	sxth	r2, r2
 8016c24:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16U;
 8016c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016c2a:	1419      	asrs	r1, r3, #16
 8016c2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016c30:	1c9a      	adds	r2, r3, #2
 8016c32:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8016c36:	b20a      	sxth	r2, r1
 8016c38:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8016c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016c3e:	b21a      	sxth	r2, r3
 8016c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016c44:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16U);
 8016c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016c4a:	141b      	asrs	r3, r3, #16
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	425b      	negs	r3, r3
 8016c50:	b29a      	uxth	r2, r3
 8016c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016c56:	3302      	adds	r3, #2
 8016c58:	b212      	sxth	r2, r2
 8016c5a:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8016c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016c60:	3b04      	subs	r3, #4
 8016c62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 8016c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8016c70:	4413      	add	r3, r2
 8016c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        pCoefA = pCoefA + (2U * modifier);
 8016c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016c7a:	009b      	lsls	r3, r3, #2
 8016c7c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8016c80:	4413      	add	r3, r2
 8016c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (i = fftLen - 1; i > 0; i--)
 8016c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016c8a:	3b01      	subs	r3, #1
 8016c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	f47f af40 	bne.w	8016b1a <arm_split_rfft_q15+0x6a>
    }

    pDst[2U * fftLen]      = (pSrc[0] - pSrc[1]) >> 1U;
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ca0:	461a      	mov	r2, r3
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	3302      	adds	r3, #2
 8016ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016caa:	1ad3      	subs	r3, r2, r3
 8016cac:	1059      	asrs	r1, r3, #1
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016cb6:	4413      	add	r3, r2
 8016cb8:	b20a      	sxth	r2, r1
 8016cba:	801a      	strh	r2, [r3, #0]
    pDst[2U * fftLen + 1U] = 0;
 8016cbc:	68bb      	ldr	r3, [r7, #8]
 8016cbe:	009b      	lsls	r3, r3, #2
 8016cc0:	3302      	adds	r3, #2
 8016cc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016cc6:	4413      	add	r3, r2
 8016cc8:	2200      	movs	r2, #0
 8016cca:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1U;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	3302      	adds	r3, #2
 8016cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cdc:	4413      	add	r3, r2
 8016cde:	105b      	asrs	r3, r3, #1
 8016ce0:	b21a      	sxth	r2, r3
 8016ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016ce6:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 8016ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016cec:	3302      	adds	r3, #2
 8016cee:	2200      	movs	r2, #0
 8016cf0:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 8016cf2:	bf00      	nop
 8016cf4:	37b4      	adds	r7, #180	@ 0xb4
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfc:	4770      	bx	lr

08016cfe <arm_split_rifft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{
 8016cfe:	b480      	push	{r7}
 8016d00:	b0af      	sub	sp, #188	@ 0xbc
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	60f8      	str	r0, [r7, #12]
 8016d06:	60b9      	str	r1, [r7, #8]
 8016d08:	607a      	str	r2, [r7, #4]
 8016d0a:	603b      	str	r3, [r7, #0]
        uint32_t i;                                    /* Loop Counter */
        q31_t outR, outI;                              /* Temporary variables for output */
  const q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
        q15_t *pSrc1, *pSrc2;
        q15_t *pDst1 = &pDst[0];
 8016d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8016d10:	63bb      	str	r3, [r7, #56]	@ 0x38

  pCoefA = &pATable[0];
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pCoefB = &pBTable[0];
 8016d18:	683b      	ldr	r3, [r7, #0]
 8016d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  pSrc1 = &pSrc[0];
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	643b      	str	r3, [r7, #64]	@ 0x40
  pSrc2 = &pSrc[2 * fftLen];
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	009b      	lsls	r3, r3, #2
 8016d26:	68fa      	ldr	r2, [r7, #12]
 8016d28:	4413      	add	r3, r2
 8016d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  i = fftLen;
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8016d32:	e0b5      	b.n	8016ea0 <arm_split_rifft_q15+0x1a2>

#if defined (ARM_MATH_DSP)

#ifndef ARM_MATH_BIG_ENDIAN
      /* pIn[2 * n - 2 * i] * pBTable[2 * i] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
      outR = __SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB));
 8016d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d36:	647b      	str	r3, [r7, #68]	@ 0x44
  memcpy (&val, pQ15, 4);
 8016d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  return (val);
 8016d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d40:	461a      	mov	r2, r3
 8016d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016d46:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8016d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d50:	657a      	str	r2, [r7, #84]	@ 0x54
 8016d52:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016d56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016d58:	fb43 f302 	smusd	r3, r3, r2
 8016d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8016d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      /* -(-pIn[2 * n - 2 * i] * pBTable[2 * i] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1])) */
      outR = -(__SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] + pIn[2 * n - 2 * i] * pBTable[2 * i] */
      outR = __SMLAD(read_q15x2(pSrc1), read_q15x2 ((q15_t *) pCoefA), outR) >> 16U;
 8016d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d66:	65bb      	str	r3, [r7, #88]	@ 0x58
  memcpy (&val, pQ15, 4);
 8016d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d70:	4619      	mov	r1, r3
 8016d72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memcpy (&val, pQ15, 4);
 8016d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d80:	461a      	mov	r2, r3
 8016d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016d86:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8016d88:	66ba      	str	r2, [r7, #104]	@ 0x68
 8016d8a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016d8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016d90:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8016d92:	fb23 1302 	smlad	r3, r3, r2, r1
 8016d96:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d9a:	0c1b      	lsrs	r3, r3, #16
 8016d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      /* -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
      outI = __SMUADX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016da2:	3b04      	subs	r3, #4
 8016da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016da8:	3304      	adds	r3, #4
 8016daa:	673b      	str	r3, [r7, #112]	@ 0x70
  memcpy (&val, pQ15, 4);
 8016dac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db4:	461a      	mov	r2, r3
 8016db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016dba:	677b      	str	r3, [r7, #116]	@ 0x74
  memcpy (&val, pQ15, 4);
 8016dbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	623b      	str	r3, [r7, #32]
  return (val);
 8016dc2:	6a3b      	ldr	r3, [r7, #32]
 8016dc4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8016dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016dce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016dd0:	fb23 f312 	smuadx	r3, r3, r2
 8016dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8016dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  memcpy (&val, pQ15, 4);
 8016de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	61fb      	str	r3, [r7, #28]
  return (val);
 8016dec:	69fb      	ldr	r3, [r7, #28]

      /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */
#ifndef ARM_MATH_BIG_ENDIAN
      outI = __SMLSDX(read_q15x2 ((q15_t *) pCoefA), read_q15x2_ia (&pSrc1), -outI);
 8016dee:	4619      	mov	r1, r3
 8016df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016df2:	3304      	adds	r3, #4
 8016df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8016df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016df8:	3b04      	subs	r3, #4
 8016dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  memcpy (&val, pQ15, 4);
 8016dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	61bb      	str	r3, [r7, #24]
  return (val);
 8016e06:	69bb      	ldr	r3, [r7, #24]
 8016e08:	461a      	mov	r2, r3
 8016e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016e0e:	425b      	negs	r3, r3
 8016e10:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8016e14:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8016e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016e20:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8016e24:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8016e28:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8016e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 8016e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016e34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      outI = __SMLSDX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), -outI);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* write output */
#ifndef ARM_MATH_BIG_ENDIAN
      write_q15x2_ia (&pDst1, __PKHBT(outR, (outI >> 16U), 16));
 8016e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016e3c:	b29a      	uxth	r2, r3
 8016e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016e42:	141b      	asrs	r3, r3, #16
 8016e44:	041b      	lsls	r3, r3, #16
 8016e46:	4313      	orrs	r3, r2
 8016e48:	461a      	mov	r2, r3
 8016e4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016e52:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
  q31_t val = value;
 8016e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016e5a:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8016e5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	697a      	ldr	r2, [r7, #20]
 8016e64:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	1d1a      	adds	r2, r3, #4
 8016e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016e72:	601a      	str	r2, [r3, #0]
}
 8016e74:	bf00      	nop
      *pDst1++ = (q15_t) (outI >> 16);

#endif /* #if defined (ARM_MATH_DSP) */

      /* update coefficient pointer */
      pCoefB = pCoefB + (2 * modifier);
 8016e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8016e80:	4413      	add	r3, r2
 8016e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      pCoefA = pCoefA + (2 * modifier);
 8016e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016e8a:	009b      	lsls	r3, r3, #2
 8016e8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8016e90:	4413      	add	r3, r2
 8016e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

      i--;
 8016e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016e9a:	3b01      	subs	r3, #1
 8016e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8016ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f47f af45 	bne.w	8016d34 <arm_split_rifft_q15+0x36>
  }

}
 8016eaa:	bf00      	nop
 8016eac:	bf00      	nop
 8016eae:	37bc      	adds	r7, #188	@ 0xbc
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb6:	4770      	bx	lr

08016eb8 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b086      	sub	sp, #24
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8016ec6:	79fb      	ldrb	r3, [r7, #7]
 8016ec8:	22a8      	movs	r2, #168	@ 0xa8
 8016eca:	fb02 f303 	mul.w	r3, r2, r3
 8016ece:	4a30      	ldr	r2, [pc, #192]	@ (8016f90 <_prep_out_transaction+0xd8>)
 8016ed0:	4413      	add	r3, r2
 8016ed2:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8016ed4:	79fb      	ldrb	r3, [r7, #7]
 8016ed6:	01db      	lsls	r3, r3, #7
 8016ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8016f94 <_prep_out_transaction+0xdc>)
 8016eda:	4413      	add	r3, r2
 8016edc:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8016ede:	f001 f9b1 	bl	8018244 <tud_mounted>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d009      	beq.n	8016efc <_prep_out_transaction+0x44>
 8016ee8:	f001 f9be 	bl	8018268 <tud_suspended>
 8016eec:	4603      	mov	r3, r0
 8016eee:	f083 0301 	eor.w	r3, r3, #1
 8016ef2:	b2db      	uxtb	r3, r3
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d001      	beq.n	8016efc <_prep_out_transaction+0x44>
 8016ef8:	2301      	movs	r3, #1
 8016efa:	e000      	b.n	8016efe <_prep_out_transaction+0x46>
 8016efc:	2300      	movs	r3, #0
 8016efe:	f003 0301 	and.w	r3, r3, #1
 8016f02:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8016f04:	f083 0301 	eor.w	r3, r3, #1
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d103      	bne.n	8016f16 <_prep_out_transaction+0x5e>
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	78db      	ldrb	r3, [r3, #3]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d101      	bne.n	8016f1a <_prep_out_transaction+0x62>
 8016f16:	2300      	movs	r3, #0
 8016f18:	e035      	b.n	8016f86 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	3310      	adds	r3, #16
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f001 f88e 	bl	8018040 <tu_fifo_remaining>
 8016f24:	4603      	mov	r3, r0
 8016f26:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8016f28:	897b      	ldrh	r3, [r7, #10]
 8016f2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8016f2c:	d801      	bhi.n	8016f32 <_prep_out_transaction+0x7a>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	e029      	b.n	8016f86 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8016f32:	693b      	ldr	r3, [r7, #16]
 8016f34:	78da      	ldrb	r2, [r3, #3]
 8016f36:	7dfb      	ldrb	r3, [r7, #23]
 8016f38:	4611      	mov	r1, r2
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f001 fd22 	bl	8018984 <usbd_edpt_claim>
 8016f40:	4603      	mov	r3, r0
 8016f42:	f083 0301 	eor.w	r3, r3, #1
 8016f46:	b2db      	uxtb	r3, r3
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d001      	beq.n	8016f50 <_prep_out_transaction+0x98>
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	e01a      	b.n	8016f86 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	3310      	adds	r3, #16
 8016f54:	4618      	mov	r0, r3
 8016f56:	f001 f873 	bl	8018040 <tu_fifo_remaining>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8016f5e:	897b      	ldrh	r3, [r7, #10]
 8016f60:	2b3f      	cmp	r3, #63	@ 0x3f
 8016f62:	d908      	bls.n	8016f76 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8016f64:	693b      	ldr	r3, [r7, #16]
 8016f66:	78d9      	ldrb	r1, [r3, #3]
 8016f68:	68fa      	ldr	r2, [r7, #12]
 8016f6a:	7df8      	ldrb	r0, [r7, #23]
 8016f6c:	2340      	movs	r3, #64	@ 0x40
 8016f6e:	f001 fd5d 	bl	8018a2c <usbd_edpt_xfer>
 8016f72:	4603      	mov	r3, r0
 8016f74:	e007      	b.n	8016f86 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	78da      	ldrb	r2, [r3, #3]
 8016f7a:	7dfb      	ldrb	r3, [r7, #23]
 8016f7c:	4611      	mov	r1, r2
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f001 fd2a 	bl	80189d8 <usbd_edpt_release>
    return false;
 8016f84:	2300      	movs	r3, #0
  }
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3718      	adds	r7, #24
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	bf00      	nop
 8016f90:	24008474 	.word	0x24008474
 8016f94:	240085c4 	.word	0x240085c4

08016f98 <tud_cdc_n_write_flush>:
  }

  return ret;
}

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8016fa2:	79fb      	ldrb	r3, [r7, #7]
 8016fa4:	22a8      	movs	r2, #168	@ 0xa8
 8016fa6:	fb02 f303 	mul.w	r3, r2, r3
 8016faa:	4a39      	ldr	r2, [pc, #228]	@ (8017090 <tud_cdc_n_write_flush+0xf8>)
 8016fac:	4413      	add	r3, r2
 8016fae:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8016fb0:	79fb      	ldrb	r3, [r7, #7]
 8016fb2:	01db      	lsls	r3, r3, #7
 8016fb4:	4a37      	ldr	r2, [pc, #220]	@ (8017094 <tud_cdc_n_write_flush+0xfc>)
 8016fb6:	4413      	add	r3, r2
 8016fb8:	613b      	str	r3, [r7, #16]
 8016fba:	f001 f943 	bl	8018244 <tud_mounted>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d009      	beq.n	8016fd8 <tud_cdc_n_write_flush+0x40>
 8016fc4:	f001 f950 	bl	8018268 <tud_suspended>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	f083 0301 	eor.w	r3, r3, #1
 8016fce:	b2db      	uxtb	r3, r3
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d001      	beq.n	8016fd8 <tud_cdc_n_write_flush+0x40>
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	e000      	b.n	8016fda <tud_cdc_n_write_flush+0x42>
 8016fd8:	2300      	movs	r3, #0
 8016fda:	f003 0301 	and.w	r3, r3, #1
 8016fde:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8016fe0:	f083 0301 	eor.w	r3, r3, #1
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d001      	beq.n	8016fee <tud_cdc_n_write_flush+0x56>
 8016fea:	2300      	movs	r3, #0
 8016fec:	e04c      	b.n	8017088 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	331c      	adds	r3, #28
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f000 ffaf 	bl	8017f56 <tu_fifo_count>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d101      	bne.n	8017002 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	e042      	b.n	8017088 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8017002:	2300      	movs	r3, #0
 8017004:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	789a      	ldrb	r2, [r3, #2]
 801700a:	7bfb      	ldrb	r3, [r7, #15]
 801700c:	4611      	mov	r1, r2
 801700e:	4618      	mov	r0, r3
 8017010:	f001 fcb8 	bl	8018984 <usbd_edpt_claim>
 8017014:	4603      	mov	r3, r0
 8017016:	f083 0301 	eor.w	r3, r3, #1
 801701a:	b2db      	uxtb	r3, r3
 801701c:	2b00      	cmp	r3, #0
 801701e:	d001      	beq.n	8017024 <tud_cdc_n_write_flush+0x8c>
 8017020:	2300      	movs	r3, #0
 8017022:	e031      	b.n	8017088 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	f103 001c 	add.w	r0, r3, #28
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	3340      	adds	r3, #64	@ 0x40
 801702e:	2240      	movs	r2, #64	@ 0x40
 8017030:	4619      	mov	r1, r3
 8017032:	f001 f83d 	bl	80180b0 <tu_fifo_read_n>
 8017036:	4603      	mov	r3, r0
 8017038:	81bb      	strh	r3, [r7, #12]

  if (count) {
 801703a:	89bb      	ldrh	r3, [r7, #12]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d01b      	beq.n	8017078 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	7899      	ldrb	r1, [r3, #2]
 8017044:	693b      	ldr	r3, [r7, #16]
 8017046:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 801704a:	89bb      	ldrh	r3, [r7, #12]
 801704c:	7bf8      	ldrb	r0, [r7, #15]
 801704e:	f001 fced 	bl	8018a2c <usbd_edpt_xfer>
 8017052:	4603      	mov	r3, r0
 8017054:	f083 0301 	eor.w	r3, r3, #1
 8017058:	b2db      	uxtb	r3, r3
 801705a:	2b00      	cmp	r3, #0
 801705c:	d00a      	beq.n	8017074 <tud_cdc_n_write_flush+0xdc>
 801705e:	4b0e      	ldr	r3, [pc, #56]	@ (8017098 <tud_cdc_n_write_flush+0x100>)
 8017060:	60bb      	str	r3, [r7, #8]
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	f003 0301 	and.w	r3, r3, #1
 801706a:	2b00      	cmp	r3, #0
 801706c:	d000      	beq.n	8017070 <tud_cdc_n_write_flush+0xd8>
 801706e:	be00      	bkpt	0x0000
 8017070:	2300      	movs	r3, #0
 8017072:	e009      	b.n	8017088 <tud_cdc_n_write_flush+0xf0>
    return count;
 8017074:	89bb      	ldrh	r3, [r7, #12]
 8017076:	e007      	b.n	8017088 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	789a      	ldrb	r2, [r3, #2]
 801707c:	7bfb      	ldrb	r3, [r7, #15]
 801707e:	4611      	mov	r1, r2
 8017080:	4618      	mov	r0, r3
 8017082:	f001 fca9 	bl	80189d8 <usbd_edpt_release>
    return 0;
 8017086:	2300      	movs	r3, #0
  }
}
 8017088:	4618      	mov	r0, r3
 801708a:	3718      	adds	r7, #24
 801708c:	46bd      	mov	sp, r7
 801708e:	bd80      	pop	{r7, pc}
 8017090:	24008474 	.word	0x24008474
 8017094:	240085c4 	.word	0x240085c4
 8017098:	e000edf0 	.word	0xe000edf0

0801709c <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80170a2:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80170a6:	2100      	movs	r1, #0
 80170a8:	4822      	ldr	r0, [pc, #136]	@ (8017134 <cdcd_init+0x98>)
 80170aa:	f006 fbfd 	bl	801d8a8 <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 80170ae:	2201      	movs	r2, #1
 80170b0:	2100      	movs	r1, #0
 80170b2:	4821      	ldr	r0, [pc, #132]	@ (8017138 <cdcd_init+0x9c>)
 80170b4:	f006 fbf8 	bl	801d8a8 <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80170b8:	2300      	movs	r3, #0
 80170ba:	71fb      	strb	r3, [r7, #7]
 80170bc:	e031      	b.n	8017122 <cdcd_init+0x86>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80170be:	79fb      	ldrb	r3, [r7, #7]
 80170c0:	22a8      	movs	r2, #168	@ 0xa8
 80170c2:	fb02 f303 	mul.w	r3, r2, r3
 80170c6:	4a1b      	ldr	r2, [pc, #108]	@ (8017134 <cdcd_init+0x98>)
 80170c8:	4413      	add	r3, r2
 80170ca:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80170cc:	683b      	ldr	r3, [r7, #0]
 80170ce:	22ff      	movs	r2, #255	@ 0xff
 80170d0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80170d8:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	2200      	movs	r2, #0
 80170de:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	2200      	movs	r2, #0
 80170e4:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	2208      	movs	r2, #8
 80170ea:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	f103 0010 	add.w	r0, r3, #16
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80170f8:	2300      	movs	r3, #0
 80170fa:	9300      	str	r3, [sp, #0]
 80170fc:	2301      	movs	r3, #1
 80170fe:	2240      	movs	r2, #64	@ 0x40
 8017100:	f000 fb1c 	bl	801773c <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	f103 001c 	add.w	r0, r3, #28
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8017110:	2301      	movs	r3, #1
 8017112:	9300      	str	r3, [sp, #0]
 8017114:	2301      	movs	r3, #1
 8017116:	2240      	movs	r2, #64	@ 0x40
 8017118:	f000 fb10 	bl	801773c <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 801711c:	79fb      	ldrb	r3, [r7, #7]
 801711e:	3301      	adds	r3, #1
 8017120:	71fb      	strb	r3, [r7, #7]
 8017122:	79fb      	ldrb	r3, [r7, #7]
 8017124:	2b01      	cmp	r3, #1
 8017126:	d9ca      	bls.n	80170be <cdcd_init+0x22>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8017128:	bf00      	nop
 801712a:	bf00      	nop
 801712c:	3708      	adds	r7, #8
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}
 8017132:	bf00      	nop
 8017134:	24008474 	.word	0x24008474
 8017138:	240086c4 	.word	0x240086c4

0801713c <cdcd_deinit>:

bool cdcd_deinit(void) {
 801713c:	b480      	push	{r7}
 801713e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8017140:	2301      	movs	r3, #1
}
 8017142:	4618      	mov	r0, r3
 8017144:	46bd      	mov	sp, r7
 8017146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714a:	4770      	bx	lr

0801714c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 801714c:	b580      	push	{r7, lr}
 801714e:	b084      	sub	sp, #16
 8017150:	af00      	add	r7, sp, #0
 8017152:	4603      	mov	r3, r0
 8017154:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8017156:	2300      	movs	r3, #0
 8017158:	73fb      	strb	r3, [r7, #15]
 801715a:	e02c      	b.n	80171b6 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 801715c:	7bfb      	ldrb	r3, [r7, #15]
 801715e:	22a8      	movs	r2, #168	@ 0xa8
 8017160:	fb02 f303 	mul.w	r3, r2, r3
 8017164:	4a18      	ldr	r2, [pc, #96]	@ (80171c8 <cdcd_reset+0x7c>)
 8017166:	4413      	add	r3, r2
 8017168:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 801716a:	2205      	movs	r2, #5
 801716c:	2100      	movs	r1, #0
 801716e:	68b8      	ldr	r0, [r7, #8]
 8017170:	f006 fb9a 	bl	801d8a8 <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 8017174:	4b15      	ldr	r3, [pc, #84]	@ (80171cc <cdcd_reset+0x80>)
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	f003 0301 	and.w	r3, r3, #1
 801717c:	b2db      	uxtb	r3, r3
 801717e:	2b00      	cmp	r3, #0
 8017180:	d104      	bne.n	801718c <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	3310      	adds	r3, #16
 8017186:	4618      	mov	r0, r3
 8017188:	f001 f81d 	bl	80181c6 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 801718c:	4b0f      	ldr	r3, [pc, #60]	@ (80171cc <cdcd_reset+0x80>)
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	f003 0302 	and.w	r3, r3, #2
 8017194:	b2db      	uxtb	r3, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	d104      	bne.n	80171a4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	331c      	adds	r3, #28
 801719e:	4618      	mov	r0, r3
 80171a0:	f001 f811 	bl	80181c6 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	331c      	adds	r3, #28
 80171a8:	2101      	movs	r1, #1
 80171aa:	4618      	mov	r0, r3
 80171ac:	f001 f81c 	bl	80181e8 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80171b0:	7bfb      	ldrb	r3, [r7, #15]
 80171b2:	3301      	adds	r3, #1
 80171b4:	73fb      	strb	r3, [r7, #15]
 80171b6:	7bfb      	ldrb	r3, [r7, #15]
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	d9cf      	bls.n	801715c <cdcd_reset+0x10>
  }
}
 80171bc:	bf00      	nop
 80171be:	bf00      	nop
 80171c0:	3710      	adds	r7, #16
 80171c2:	46bd      	mov	sp, r7
 80171c4:	bd80      	pop	{r7, pc}
 80171c6:	bf00      	nop
 80171c8:	24008474 	.word	0x24008474
 80171cc:	240086c4 	.word	0x240086c4

080171d0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b09a      	sub	sp, #104	@ 0x68
 80171d4:	af02      	add	r7, sp, #8
 80171d6:	4603      	mov	r3, r0
 80171d8:	6039      	str	r1, [r7, #0]
 80171da:	71fb      	strb	r3, [r7, #7]
 80171dc:	4613      	mov	r3, r2
 80171de:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	795b      	ldrb	r3, [r3, #5]
 80171e4:	2b02      	cmp	r3, #2
 80171e6:	d103      	bne.n	80171f0 <cdcd_open+0x20>
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	799b      	ldrb	r3, [r3, #6]
 80171ec:	2b02      	cmp	r3, #2
 80171ee:	d001      	beq.n	80171f4 <cdcd_open+0x24>
 80171f0:	2300      	movs	r3, #0
 80171f2:	e0da      	b.n	80173aa <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 80171f4:	2300      	movs	r3, #0
 80171f6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80171fa:	e010      	b.n	801721e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 80171fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017200:	22a8      	movs	r2, #168	@ 0xa8
 8017202:	fb02 f303 	mul.w	r3, r2, r3
 8017206:	4a6b      	ldr	r2, [pc, #428]	@ (80173b4 <cdcd_open+0x1e4>)
 8017208:	4413      	add	r3, r2
 801720a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 801720c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801720e:	789b      	ldrb	r3, [r3, #2]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d009      	beq.n	8017228 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017214:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017218:	3301      	adds	r3, #1
 801721a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801721e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017222:	2b01      	cmp	r3, #1
 8017224:	d9ea      	bls.n	80171fc <cdcd_open+0x2c>
 8017226:	e000      	b.n	801722a <cdcd_open+0x5a>
      break;
 8017228:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 801722a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801722e:	2b01      	cmp	r3, #1
 8017230:	d90a      	bls.n	8017248 <cdcd_open+0x78>
 8017232:	4b61      	ldr	r3, [pc, #388]	@ (80173b8 <cdcd_open+0x1e8>)
 8017234:	647b      	str	r3, [r7, #68]	@ 0x44
 8017236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	f003 0301 	and.w	r3, r3, #1
 801723e:	2b00      	cmp	r3, #0
 8017240:	d000      	beq.n	8017244 <cdcd_open+0x74>
 8017242:	be00      	bkpt	0x0000
 8017244:	2300      	movs	r3, #0
 8017246:	e0b0      	b.n	80173aa <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	789a      	ldrb	r2, [r3, #2]
 801724c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801724e:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8017250:	2309      	movs	r3, #9
 8017252:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 801725a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 801725e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	461a      	mov	r2, r3
 8017264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017266:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8017268:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 801726a:	e013      	b.n	8017294 <cdcd_open+0xc4>
 801726c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801726e:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017272:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8017274:	461a      	mov	r2, r3
 8017276:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801727a:	4413      	add	r3, r2
 801727c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017282:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017286:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8017288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	461a      	mov	r2, r3
 801728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017290:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017292:	657b      	str	r3, [r7, #84]	@ 0x54
 8017294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017296:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8017298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801729a:	3301      	adds	r3, #1
 801729c:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 801729e:	2b24      	cmp	r3, #36	@ 0x24
 80172a0:	d104      	bne.n	80172ac <cdcd_open+0xdc>
 80172a2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80172a6:	88bb      	ldrh	r3, [r7, #4]
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d9df      	bls.n	801726c <cdcd_open+0x9c>
 80172ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80172b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172b2:	3301      	adds	r3, #1
 80172b4:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80172b6:	2b05      	cmp	r3, #5
 80172b8:	d12f      	bne.n	801731a <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80172ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172bc:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80172be:	79fb      	ldrb	r3, [r7, #7]
 80172c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80172c2:	4618      	mov	r0, r3
 80172c4:	f001 fb18 	bl	80188f8 <usbd_edpt_open>
 80172c8:	4603      	mov	r3, r0
 80172ca:	f083 0301 	eor.w	r3, r3, #1
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d00a      	beq.n	80172ea <cdcd_open+0x11a>
 80172d4:	4b38      	ldr	r3, [pc, #224]	@ (80173b8 <cdcd_open+0x1e8>)
 80172d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80172d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	f003 0301 	and.w	r3, r3, #1
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d000      	beq.n	80172e6 <cdcd_open+0x116>
 80172e4:	be00      	bkpt	0x0000
 80172e6:	2300      	movs	r3, #0
 80172e8:	e05f      	b.n	80173aa <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80172ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172ec:	789a      	ldrb	r2, [r3, #2]
 80172ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172f0:	705a      	strb	r2, [r3, #1]
 80172f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172f4:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80172f6:	69fb      	ldr	r3, [r7, #28]
 80172f8:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 80172fa:	461a      	mov	r2, r3
 80172fc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8017300:	4413      	add	r3, r2
 8017302:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 801730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730c:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801730e:	6a3b      	ldr	r3, [r7, #32]
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	461a      	mov	r2, r3
 8017314:	6a3b      	ldr	r3, [r7, #32]
 8017316:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017318:	657b      	str	r3, [r7, #84]	@ 0x54
 801731a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801731c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 801731e:	69bb      	ldr	r3, [r7, #24]
 8017320:	3301      	adds	r3, #1
 8017322:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8017324:	2b04      	cmp	r3, #4
 8017326:	d139      	bne.n	801739c <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8017328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801732a:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 801732c:	2b0a      	cmp	r3, #10
 801732e:	d135      	bne.n	801739c <cdcd_open+0x1cc>
 8017330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017332:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8017338:	461a      	mov	r2, r3
 801733a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801733e:	4413      	add	r3, r2
 8017340:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017346:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	461a      	mov	r2, r3
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017356:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8017358:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801735a:	3303      	adds	r3, #3
 801735c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801735e:	3202      	adds	r2, #2
 8017360:	79f8      	ldrb	r0, [r7, #7]
 8017362:	9201      	str	r2, [sp, #4]
 8017364:	9300      	str	r3, [sp, #0]
 8017366:	2302      	movs	r3, #2
 8017368:	2202      	movs	r2, #2
 801736a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801736c:	f001 fa5c 	bl	8018828 <usbd_open_edpt_pair>
 8017370:	4603      	mov	r3, r0
 8017372:	f083 0301 	eor.w	r3, r3, #1
 8017376:	b2db      	uxtb	r3, r3
 8017378:	2b00      	cmp	r3, #0
 801737a:	d00a      	beq.n	8017392 <cdcd_open+0x1c2>
 801737c:	4b0e      	ldr	r3, [pc, #56]	@ (80173b8 <cdcd_open+0x1e8>)
 801737e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	f003 0301 	and.w	r3, r3, #1
 8017388:	2b00      	cmp	r3, #0
 801738a:	d000      	beq.n	801738e <cdcd_open+0x1be>
 801738c:	be00      	bkpt	0x0000
 801738e:	2300      	movs	r3, #0
 8017390:	e00b      	b.n	80173aa <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8017392:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8017396:	330e      	adds	r3, #14
 8017398:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 801739c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7ff fd89 	bl	8016eb8 <_prep_out_transaction>

  return drv_len;
 80173a6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	3760      	adds	r7, #96	@ 0x60
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}
 80173b2:	bf00      	nop
 80173b4:	24008474 	.word	0x24008474
 80173b8:	e000edf0 	.word	0xe000edf0

080173bc <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80173bc:	b580      	push	{r7, lr}
 80173be:	b08a      	sub	sp, #40	@ 0x28
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	4603      	mov	r3, r0
 80173c4:	603a      	str	r2, [r7, #0]
 80173c6:	71fb      	strb	r3, [r7, #7]
 80173c8:	460b      	mov	r3, r1
 80173ca:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	2b20      	cmp	r3, #32
 80173d8:	d001      	beq.n	80173de <cdcd_control_xfer_cb+0x22>
 80173da:	2300      	movs	r3, #0
 80173dc:	e0d7      	b.n	801758e <cdcd_control_xfer_cb+0x1d2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80173de:	2300      	movs	r3, #0
 80173e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80173e4:	e014      	b.n	8017410 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 80173e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80173ea:	22a8      	movs	r2, #168	@ 0xa8
 80173ec:	fb02 f303 	mul.w	r3, r2, r3
 80173f0:	4a69      	ldr	r2, [pc, #420]	@ (8017598 <cdcd_control_xfer_cb+0x1dc>)
 80173f2:	4413      	add	r3, r2
 80173f4:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 80173f6:	6a3b      	ldr	r3, [r7, #32]
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	461a      	mov	r2, r3
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	889b      	ldrh	r3, [r3, #4]
 8017400:	b29b      	uxth	r3, r3
 8017402:	429a      	cmp	r2, r3
 8017404:	d009      	beq.n	801741a <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801740a:	3301      	adds	r3, #1
 801740c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017414:	2b01      	cmp	r3, #1
 8017416:	d9e6      	bls.n	80173e6 <cdcd_control_xfer_cb+0x2a>
 8017418:	e000      	b.n	801741c <cdcd_control_xfer_cb+0x60>
      break;
 801741a:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 801741c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017420:	2b01      	cmp	r3, #1
 8017422:	d901      	bls.n	8017428 <cdcd_control_xfer_cb+0x6c>
 8017424:	2300      	movs	r3, #0
 8017426:	e0b2      	b.n	801758e <cdcd_control_xfer_cb+0x1d2>

  switch (request->bRequest) {
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	785b      	ldrb	r3, [r3, #1]
 801742c:	3b20      	subs	r3, #32
 801742e:	2b03      	cmp	r3, #3
 8017430:	f200 80a3 	bhi.w	801757a <cdcd_control_xfer_cb+0x1be>
 8017434:	a201      	add	r2, pc, #4	@ (adr r2, 801743c <cdcd_control_xfer_cb+0x80>)
 8017436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801743a:	bf00      	nop
 801743c:	0801744d 	.word	0x0801744d
 8017440:	08017489 	.word	0x08017489
 8017444:	080174a1 	.word	0x080174a1
 8017448:	08017549 	.word	0x08017549
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 801744c:	79bb      	ldrb	r3, [r7, #6]
 801744e:	2b01      	cmp	r3, #1
 8017450:	d108      	bne.n	8017464 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8017452:	6a3b      	ldr	r3, [r7, #32]
 8017454:	f103 0208 	add.w	r2, r3, #8
 8017458:	79f8      	ldrb	r0, [r7, #7]
 801745a:	2307      	movs	r3, #7
 801745c:	6839      	ldr	r1, [r7, #0]
 801745e:	f001 fbe9 	bl	8018c34 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8017462:	e08c      	b.n	801757e <cdcd_control_xfer_cb+0x1c2>
      } else if (stage == CONTROL_STAGE_ACK) {
 8017464:	79bb      	ldrb	r3, [r7, #6]
 8017466:	2b03      	cmp	r3, #3
 8017468:	f040 8089 	bne.w	801757e <cdcd_control_xfer_cb+0x1c2>
        if (tud_cdc_line_coding_cb) {
 801746c:	4b4b      	ldr	r3, [pc, #300]	@ (801759c <cdcd_control_xfer_cb+0x1e0>)
 801746e:	2b00      	cmp	r3, #0
 8017470:	f000 8085 	beq.w	801757e <cdcd_control_xfer_cb+0x1c2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8017474:	6a3b      	ldr	r3, [r7, #32]
 8017476:	f103 0208 	add.w	r2, r3, #8
 801747a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801747e:	4611      	mov	r1, r2
 8017480:	4618      	mov	r0, r3
 8017482:	f3af 8000 	nop.w
      break;
 8017486:	e07a      	b.n	801757e <cdcd_control_xfer_cb+0x1c2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8017488:	79bb      	ldrb	r3, [r7, #6]
 801748a:	2b01      	cmp	r3, #1
 801748c:	d179      	bne.n	8017582 <cdcd_control_xfer_cb+0x1c6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 801748e:	6a3b      	ldr	r3, [r7, #32]
 8017490:	f103 0208 	add.w	r2, r3, #8
 8017494:	79f8      	ldrb	r0, [r7, #7]
 8017496:	2307      	movs	r3, #7
 8017498:	6839      	ldr	r1, [r7, #0]
 801749a:	f001 fbcb 	bl	8018c34 <tud_control_xfer>
      }
      break;
 801749e:	e070      	b.n	8017582 <cdcd_control_xfer_cb+0x1c6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80174a0:	79bb      	ldrb	r3, [r7, #6]
 80174a2:	2b01      	cmp	r3, #1
 80174a4:	d105      	bne.n	80174b2 <cdcd_control_xfer_cb+0xf6>
        tud_control_status(rhport, request);
 80174a6:	79fb      	ldrb	r3, [r7, #7]
 80174a8:	6839      	ldr	r1, [r7, #0]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f001 fb50 	bl	8018b50 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80174b0:	e069      	b.n	8017586 <cdcd_control_xfer_cb+0x1ca>
      } else if (stage == CONTROL_STAGE_ACK) {
 80174b2:	79bb      	ldrb	r3, [r7, #6]
 80174b4:	2b03      	cmp	r3, #3
 80174b6:	d166      	bne.n	8017586 <cdcd_control_xfer_cb+0x1ca>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	885b      	ldrh	r3, [r3, #2]
 80174bc:	b29b      	uxth	r3, r3
 80174be:	613b      	str	r3, [r7, #16]
 80174c0:	2300      	movs	r3, #0
 80174c2:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80174c4:	7bfb      	ldrb	r3, [r7, #15]
 80174c6:	693a      	ldr	r2, [r7, #16]
 80174c8:	fa22 f303 	lsr.w	r3, r2, r3
 80174cc:	f003 0301 	and.w	r3, r3, #1
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	bf14      	ite	ne
 80174d4:	2301      	movne	r3, #1
 80174d6:	2300      	moveq	r3, #0
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80174dc:	683b      	ldr	r3, [r7, #0]
 80174de:	885b      	ldrh	r3, [r3, #2]
 80174e0:	b29b      	uxth	r3, r3
 80174e2:	61bb      	str	r3, [r7, #24]
 80174e4:	2301      	movs	r3, #1
 80174e6:	75fb      	strb	r3, [r7, #23]
 80174e8:	7dfb      	ldrb	r3, [r7, #23]
 80174ea:	69ba      	ldr	r2, [r7, #24]
 80174ec:	fa22 f303 	lsr.w	r3, r2, r3
 80174f0:	f003 0301 	and.w	r3, r3, #1
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	bf14      	ite	ne
 80174f8:	2301      	movne	r3, #1
 80174fa:	2300      	moveq	r3, #0
 80174fc:	b2db      	uxtb	r3, r3
 80174fe:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	885b      	ldrh	r3, [r3, #2]
 8017504:	b29b      	uxth	r3, r3
 8017506:	b2da      	uxtb	r2, r3
 8017508:	6a3b      	ldr	r3, [r7, #32]
 801750a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 801750c:	6a3b      	ldr	r3, [r7, #32]
 801750e:	f103 021c 	add.w	r2, r3, #28
 8017512:	7ffb      	ldrb	r3, [r7, #31]
 8017514:	2b00      	cmp	r3, #0
 8017516:	bf14      	ite	ne
 8017518:	2301      	movne	r3, #1
 801751a:	2300      	moveq	r3, #0
 801751c:	b2db      	uxtb	r3, r3
 801751e:	f083 0301 	eor.w	r3, r3, #1
 8017522:	b2db      	uxtb	r3, r3
 8017524:	f003 0301 	and.w	r3, r3, #1
 8017528:	b2db      	uxtb	r3, r3
 801752a:	4619      	mov	r1, r3
 801752c:	4610      	mov	r0, r2
 801752e:	f000 fe5b 	bl	80181e8 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8017532:	4b1b      	ldr	r3, [pc, #108]	@ (80175a0 <cdcd_control_xfer_cb+0x1e4>)
 8017534:	2b00      	cmp	r3, #0
 8017536:	d026      	beq.n	8017586 <cdcd_control_xfer_cb+0x1ca>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8017538:	7fba      	ldrb	r2, [r7, #30]
 801753a:	7ff9      	ldrb	r1, [r7, #31]
 801753c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017540:	4618      	mov	r0, r3
 8017542:	f3af 8000 	nop.w
      break;
 8017546:	e01e      	b.n	8017586 <cdcd_control_xfer_cb+0x1ca>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8017548:	79bb      	ldrb	r3, [r7, #6]
 801754a:	2b01      	cmp	r3, #1
 801754c:	d105      	bne.n	801755a <cdcd_control_xfer_cb+0x19e>
        tud_control_status(rhport, request);
 801754e:	79fb      	ldrb	r3, [r7, #7]
 8017550:	6839      	ldr	r1, [r7, #0]
 8017552:	4618      	mov	r0, r3
 8017554:	f001 fafc 	bl	8018b50 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8017558:	e017      	b.n	801758a <cdcd_control_xfer_cb+0x1ce>
      } else if (stage == CONTROL_STAGE_ACK) {
 801755a:	79bb      	ldrb	r3, [r7, #6]
 801755c:	2b03      	cmp	r3, #3
 801755e:	d114      	bne.n	801758a <cdcd_control_xfer_cb+0x1ce>
        if (tud_cdc_send_break_cb) {
 8017560:	4b10      	ldr	r3, [pc, #64]	@ (80175a4 <cdcd_control_xfer_cb+0x1e8>)
 8017562:	2b00      	cmp	r3, #0
 8017564:	d011      	beq.n	801758a <cdcd_control_xfer_cb+0x1ce>
          tud_cdc_send_break_cb(itf, request->wValue);
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	885b      	ldrh	r3, [r3, #2]
 801756a:	b29a      	uxth	r2, r3
 801756c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017570:	4611      	mov	r1, r2
 8017572:	4618      	mov	r0, r3
 8017574:	f3af 8000 	nop.w
      break;
 8017578:	e007      	b.n	801758a <cdcd_control_xfer_cb+0x1ce>

    default:
      return false; // stall unsupported request
 801757a:	2300      	movs	r3, #0
 801757c:	e007      	b.n	801758e <cdcd_control_xfer_cb+0x1d2>
      break;
 801757e:	bf00      	nop
 8017580:	e004      	b.n	801758c <cdcd_control_xfer_cb+0x1d0>
      break;
 8017582:	bf00      	nop
 8017584:	e002      	b.n	801758c <cdcd_control_xfer_cb+0x1d0>
      break;
 8017586:	bf00      	nop
 8017588:	e000      	b.n	801758c <cdcd_control_xfer_cb+0x1d0>
      break;
 801758a:	bf00      	nop
  }

  return true;
 801758c:	2301      	movs	r3, #1
}
 801758e:	4618      	mov	r0, r3
 8017590:	3728      	adds	r7, #40	@ 0x28
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	24008474 	.word	0x24008474
	...

080175a8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b088      	sub	sp, #32
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	603b      	str	r3, [r7, #0]
 80175b0:	4603      	mov	r3, r0
 80175b2:	71fb      	strb	r3, [r7, #7]
 80175b4:	460b      	mov	r3, r1
 80175b6:	71bb      	strb	r3, [r7, #6]
 80175b8:	4613      	mov	r3, r2
 80175ba:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80175bc:	2300      	movs	r3, #0
 80175be:	77fb      	strb	r3, [r7, #31]
 80175c0:	e013      	b.n	80175ea <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80175c2:	7ffb      	ldrb	r3, [r7, #31]
 80175c4:	22a8      	movs	r2, #168	@ 0xa8
 80175c6:	fb02 f303 	mul.w	r3, r2, r3
 80175ca:	4a56      	ldr	r2, [pc, #344]	@ (8017724 <cdcd_xfer_cb+0x17c>)
 80175cc:	4413      	add	r3, r2
 80175ce:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80175d0:	69bb      	ldr	r3, [r7, #24]
 80175d2:	78db      	ldrb	r3, [r3, #3]
 80175d4:	79ba      	ldrb	r2, [r7, #6]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d00a      	beq.n	80175f0 <cdcd_xfer_cb+0x48>
 80175da:	69bb      	ldr	r3, [r7, #24]
 80175dc:	789b      	ldrb	r3, [r3, #2]
 80175de:	79ba      	ldrb	r2, [r7, #6]
 80175e0:	429a      	cmp	r2, r3
 80175e2:	d005      	beq.n	80175f0 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80175e4:	7ffb      	ldrb	r3, [r7, #31]
 80175e6:	3301      	adds	r3, #1
 80175e8:	77fb      	strb	r3, [r7, #31]
 80175ea:	7ffb      	ldrb	r3, [r7, #31]
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d9e8      	bls.n	80175c2 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80175f0:	7ffb      	ldrb	r3, [r7, #31]
 80175f2:	2b01      	cmp	r3, #1
 80175f4:	d90a      	bls.n	801760c <cdcd_xfer_cb+0x64>
 80175f6:	4b4c      	ldr	r3, [pc, #304]	@ (8017728 <cdcd_xfer_cb+0x180>)
 80175f8:	60fb      	str	r3, [r7, #12]
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	f003 0301 	and.w	r3, r3, #1
 8017602:	2b00      	cmp	r3, #0
 8017604:	d000      	beq.n	8017608 <cdcd_xfer_cb+0x60>
 8017606:	be00      	bkpt	0x0000
 8017608:	2300      	movs	r3, #0
 801760a:	e087      	b.n	801771c <cdcd_xfer_cb+0x174>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 801760c:	7ffb      	ldrb	r3, [r7, #31]
 801760e:	01db      	lsls	r3, r3, #7
 8017610:	4a46      	ldr	r2, [pc, #280]	@ (801772c <cdcd_xfer_cb+0x184>)
 8017612:	4413      	add	r3, r2
 8017614:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	78db      	ldrb	r3, [r3, #3]
 801761a:	79ba      	ldrb	r2, [r7, #6]
 801761c:	429a      	cmp	r2, r3
 801761e:	d148      	bne.n	80176b2 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8017620:	69bb      	ldr	r3, [r7, #24]
 8017622:	3310      	adds	r3, #16
 8017624:	6939      	ldr	r1, [r7, #16]
 8017626:	683a      	ldr	r2, [r7, #0]
 8017628:	b292      	uxth	r2, r2
 801762a:	4618      	mov	r0, r3
 801762c:	f000 fda7 	bl	801817e <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8017630:	4b3f      	ldr	r3, [pc, #252]	@ (8017730 <cdcd_xfer_cb+0x188>)
 8017632:	2b00      	cmp	r3, #0
 8017634:	d027      	beq.n	8017686 <cdcd_xfer_cb+0xde>
 8017636:	69bb      	ldr	r3, [r7, #24]
 8017638:	795b      	ldrb	r3, [r3, #5]
 801763a:	2bff      	cmp	r3, #255	@ 0xff
 801763c:	d023      	beq.n	8017686 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 801763e:	2300      	movs	r3, #0
 8017640:	617b      	str	r3, [r7, #20]
 8017642:	e01c      	b.n	801767e <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8017644:	69bb      	ldr	r3, [r7, #24]
 8017646:	795a      	ldrb	r2, [r3, #5]
 8017648:	6939      	ldr	r1, [r7, #16]
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	440b      	add	r3, r1
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	429a      	cmp	r2, r3
 8017652:	d111      	bne.n	8017678 <cdcd_xfer_cb+0xd0>
 8017654:	69bb      	ldr	r3, [r7, #24]
 8017656:	3310      	adds	r3, #16
 8017658:	4618      	mov	r0, r3
 801765a:	f000 fcae 	bl	8017fba <tu_fifo_empty>
 801765e:	4603      	mov	r3, r0
 8017660:	f083 0301 	eor.w	r3, r3, #1
 8017664:	b2db      	uxtb	r3, r3
 8017666:	2b00      	cmp	r3, #0
 8017668:	d006      	beq.n	8017678 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 801766a:	69bb      	ldr	r3, [r7, #24]
 801766c:	795a      	ldrb	r2, [r3, #5]
 801766e:	7ffb      	ldrb	r3, [r7, #31]
 8017670:	4611      	mov	r1, r2
 8017672:	4618      	mov	r0, r3
 8017674:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8017678:	697b      	ldr	r3, [r7, #20]
 801767a:	3301      	adds	r3, #1
 801767c:	617b      	str	r3, [r7, #20]
 801767e:	697a      	ldr	r2, [r7, #20]
 8017680:	683b      	ldr	r3, [r7, #0]
 8017682:	429a      	cmp	r2, r3
 8017684:	d3de      	bcc.n	8017644 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8017686:	4b2b      	ldr	r3, [pc, #172]	@ (8017734 <cdcd_xfer_cb+0x18c>)
 8017688:	2b00      	cmp	r3, #0
 801768a:	d00e      	beq.n	80176aa <cdcd_xfer_cb+0x102>
 801768c:	69bb      	ldr	r3, [r7, #24]
 801768e:	3310      	adds	r3, #16
 8017690:	4618      	mov	r0, r3
 8017692:	f000 fc92 	bl	8017fba <tu_fifo_empty>
 8017696:	4603      	mov	r3, r0
 8017698:	f083 0301 	eor.w	r3, r3, #1
 801769c:	b2db      	uxtb	r3, r3
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d003      	beq.n	80176aa <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80176a2:	7ffb      	ldrb	r3, [r7, #31]
 80176a4:	4618      	mov	r0, r3
 80176a6:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80176aa:	7ffb      	ldrb	r3, [r7, #31]
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7ff fc03 	bl	8016eb8 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80176b2:	69bb      	ldr	r3, [r7, #24]
 80176b4:	789b      	ldrb	r3, [r3, #2]
 80176b6:	79ba      	ldrb	r2, [r7, #6]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d12e      	bne.n	801771a <cdcd_xfer_cb+0x172>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80176bc:	4b1e      	ldr	r3, [pc, #120]	@ (8017738 <cdcd_xfer_cb+0x190>)
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d003      	beq.n	80176ca <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80176c2:	7ffb      	ldrb	r3, [r7, #31]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80176ca:	7ffb      	ldrb	r3, [r7, #31]
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7ff fc63 	bl	8016f98 <tud_cdc_n_write_flush>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d120      	bne.n	801771a <cdcd_xfer_cb+0x172>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80176d8:	69bb      	ldr	r3, [r7, #24]
 80176da:	331c      	adds	r3, #28
 80176dc:	4618      	mov	r0, r3
 80176de:	f000 fc3a 	bl	8017f56 <tu_fifo_count>
 80176e2:	4603      	mov	r3, r0
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d118      	bne.n	801771a <cdcd_xfer_cb+0x172>
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d015      	beq.n	801771a <cdcd_xfer_cb+0x172>
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d110      	bne.n	801771a <cdcd_xfer_cb+0x172>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 80176f8:	69bb      	ldr	r3, [r7, #24]
 80176fa:	789a      	ldrb	r2, [r3, #2]
 80176fc:	79fb      	ldrb	r3, [r7, #7]
 80176fe:	4611      	mov	r1, r2
 8017700:	4618      	mov	r0, r3
 8017702:	f001 f93f 	bl	8018984 <usbd_edpt_claim>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d006      	beq.n	801771a <cdcd_xfer_cb+0x172>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 801770c:	69bb      	ldr	r3, [r7, #24]
 801770e:	7899      	ldrb	r1, [r3, #2]
 8017710:	79f8      	ldrb	r0, [r7, #7]
 8017712:	2300      	movs	r3, #0
 8017714:	2200      	movs	r2, #0
 8017716:	f001 f989 	bl	8018a2c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 801771a:	2301      	movs	r3, #1
}
 801771c:	4618      	mov	r0, r3
 801771e:	3720      	adds	r7, #32
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}
 8017724:	24008474 	.word	0x24008474
 8017728:	e000edf0 	.word	0xe000edf0
 801772c:	240085c4 	.word	0x240085c4
	...

0801773c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 801773c:	b480      	push	{r7}
 801773e:	b085      	sub	sp, #20
 8017740:	af00      	add	r7, sp, #0
 8017742:	60f8      	str	r0, [r7, #12]
 8017744:	60b9      	str	r1, [r7, #8]
 8017746:	4611      	mov	r1, r2
 8017748:	461a      	mov	r2, r3
 801774a:	460b      	mov	r3, r1
 801774c:	80fb      	strh	r3, [r7, #6]
 801774e:	4613      	mov	r3, r2
 8017750:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8017752:	88fb      	ldrh	r3, [r7, #6]
 8017754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017758:	d901      	bls.n	801775e <tu_fifo_config+0x22>
 801775a:	2300      	movs	r3, #0
 801775c:	e01b      	b.n	8017796 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	68ba      	ldr	r2, [r7, #8]
 8017762:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	88fa      	ldrh	r2, [r7, #6]
 8017768:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 801776a:	88bb      	ldrh	r3, [r7, #4]
 801776c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017770:	b299      	uxth	r1, r3
 8017772:	68fa      	ldr	r2, [r7, #12]
 8017774:	88d3      	ldrh	r3, [r2, #6]
 8017776:	f361 030e 	bfi	r3, r1, #0, #15
 801777a:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 801777c:	68fa      	ldr	r2, [r7, #12]
 801777e:	79d3      	ldrb	r3, [r2, #7]
 8017780:	7e39      	ldrb	r1, [r7, #24]
 8017782:	f361 13c7 	bfi	r3, r1, #7, #1
 8017786:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	2200      	movs	r2, #0
 801778c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2200      	movs	r2, #0
 8017792:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8017794:	2301      	movs	r3, #1
}
 8017796:	4618      	mov	r0, r3
 8017798:	3714      	adds	r7, #20
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr

080177a2 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80177a2:	b580      	push	{r7, lr}
 80177a4:	b08a      	sub	sp, #40	@ 0x28
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	60f8      	str	r0, [r7, #12]
 80177aa:	60b9      	str	r1, [r7, #8]
 80177ac:	4613      	mov	r3, r2
 80177ae:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80177b4:	88fb      	ldrh	r3, [r7, #6]
 80177b6:	089b      	lsrs	r3, r3, #2
 80177b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80177ba:	e00b      	b.n	80177d4 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80177bc:	6a3b      	ldr	r3, [r7, #32]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	68fa      	ldr	r2, [r7, #12]
 80177c2:	61ba      	str	r2, [r7, #24]
 80177c4:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	697a      	ldr	r2, [r7, #20]
 80177ca:	601a      	str	r2, [r3, #0]
}
 80177cc:	bf00      	nop
    ff_buf += 4;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	3304      	adds	r3, #4
 80177d2:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80177d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80177d6:	1e5a      	subs	r2, r3, #1
 80177d8:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1ee      	bne.n	80177bc <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80177de:	88fb      	ldrh	r3, [r7, #6]
 80177e0:	b2db      	uxtb	r3, r3
 80177e2:	f003 0303 	and.w	r3, r3, #3
 80177e6:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80177e8:	7ffb      	ldrb	r3, [r7, #31]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d009      	beq.n	8017802 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80177ee:	6a3b      	ldr	r3, [r7, #32]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80177f4:	7ffa      	ldrb	r2, [r7, #31]
 80177f6:	f107 0310 	add.w	r3, r7, #16
 80177fa:	4619      	mov	r1, r3
 80177fc:	68f8      	ldr	r0, [r7, #12]
 80177fe:	f006 f8e4 	bl	801d9ca <memcpy>
  }
}
 8017802:	bf00      	nop
 8017804:	3728      	adds	r7, #40	@ 0x28
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}

0801780a <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 801780a:	b580      	push	{r7, lr}
 801780c:	b08a      	sub	sp, #40	@ 0x28
 801780e:	af00      	add	r7, sp, #0
 8017810:	60f8      	str	r0, [r7, #12]
 8017812:	60b9      	str	r1, [r7, #8]
 8017814:	4613      	mov	r3, r2
 8017816:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 801781c:	88fb      	ldrh	r3, [r7, #6]
 801781e:	089b      	lsrs	r3, r3, #2
 8017820:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8017822:	e008      	b.n	8017836 <_ff_pull_const_addr+0x2c>
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 801782c:	6a3b      	ldr	r3, [r7, #32]
 801782e:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8017830:	68bb      	ldr	r3, [r7, #8]
 8017832:	3304      	adds	r3, #4
 8017834:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8017836:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017838:	1e5a      	subs	r2, r3, #1
 801783a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1f1      	bne.n	8017824 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8017840:	88fb      	ldrh	r3, [r7, #6]
 8017842:	b2db      	uxtb	r3, r3
 8017844:	f003 0303 	and.w	r3, r3, #3
 8017848:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 801784a:	7ffb      	ldrb	r3, [r7, #31]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d00b      	beq.n	8017868 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8017850:	2300      	movs	r3, #0
 8017852:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8017854:	7ffa      	ldrb	r2, [r7, #31]
 8017856:	f107 0314 	add.w	r3, r7, #20
 801785a:	68b9      	ldr	r1, [r7, #8]
 801785c:	4618      	mov	r0, r3
 801785e:	f006 f8b4 	bl	801d9ca <memcpy>

    *reg_tx = tmp32;
 8017862:	697a      	ldr	r2, [r7, #20]
 8017864:	6a3b      	ldr	r3, [r7, #32]
 8017866:	601a      	str	r2, [r3, #0]
  }
}
 8017868:	bf00      	nop
 801786a:	3728      	adds	r7, #40	@ 0x28
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}

08017870 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b084      	sub	sp, #16
 8017874:	af00      	add	r7, sp, #0
 8017876:	60f8      	str	r0, [r7, #12]
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	4613      	mov	r3, r2
 801787c:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	88fa      	ldrh	r2, [r7, #6]
 8017884:	68f9      	ldr	r1, [r7, #12]
 8017886:	88c9      	ldrh	r1, [r1, #6]
 8017888:	f3c1 010e 	ubfx	r1, r1, #0, #15
 801788c:	b289      	uxth	r1, r1
 801788e:	fb01 f202 	mul.w	r2, r1, r2
 8017892:	1898      	adds	r0, r3, r2
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	88db      	ldrh	r3, [r3, #6]
 8017898:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801789c:	b29b      	uxth	r3, r3
 801789e:	461a      	mov	r2, r3
 80178a0:	68b9      	ldr	r1, [r7, #8]
 80178a2:	f006 f892 	bl	801d9ca <memcpy>
}
 80178a6:	bf00      	nop
 80178a8:	3710      	adds	r7, #16
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}

080178ae <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80178ae:	b580      	push	{r7, lr}
 80178b0:	b08e      	sub	sp, #56	@ 0x38
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	60f8      	str	r0, [r7, #12]
 80178b6:	60b9      	str	r1, [r7, #8]
 80178b8:	4611      	mov	r1, r2
 80178ba:	461a      	mov	r2, r3
 80178bc:	460b      	mov	r3, r1
 80178be:	80fb      	strh	r3, [r7, #6]
 80178c0:	4613      	mov	r3, r2
 80178c2:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	889a      	ldrh	r2, [r3, #4]
 80178c8:	88bb      	ldrh	r3, [r7, #4]
 80178ca:	1ad3      	subs	r3, r2, r3
 80178cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 80178ce:	88fa      	ldrh	r2, [r7, #6]
 80178d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80178d2:	1ad3      	subs	r3, r2, r3
 80178d4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	88db      	ldrh	r3, [r3, #6]
 80178da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80178de:	b29b      	uxth	r3, r3
 80178e0:	461a      	mov	r2, r3
 80178e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80178e4:	fb13 f302 	smulbb	r3, r3, r2
 80178e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	88db      	ldrh	r3, [r3, #6]
 80178ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80178f2:	b29b      	uxth	r3, r3
 80178f4:	461a      	mov	r2, r3
 80178f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80178f8:	fb13 f302 	smulbb	r3, r3, r2
 80178fc:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	88ba      	ldrh	r2, [r7, #4]
 8017904:	68f9      	ldr	r1, [r7, #12]
 8017906:	88c9      	ldrh	r1, [r1, #6]
 8017908:	f3c1 010e 	ubfx	r1, r1, #0, #15
 801790c:	b289      	uxth	r1, r1
 801790e:	fb01 f202 	mul.w	r2, r1, r2
 8017912:	4413      	add	r3, r2
 8017914:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017916:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801791a:	2b00      	cmp	r3, #0
 801791c:	d002      	beq.n	8017924 <_ff_push_n+0x76>
 801791e:	2b01      	cmp	r3, #1
 8017920:	d022      	beq.n	8017968 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8017922:	e09e      	b.n	8017a62 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017924:	88fa      	ldrh	r2, [r7, #6]
 8017926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017928:	429a      	cmp	r2, r3
 801792a:	d80d      	bhi.n	8017948 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 801792c:	88fb      	ldrh	r3, [r7, #6]
 801792e:	68fa      	ldr	r2, [r7, #12]
 8017930:	88d2      	ldrh	r2, [r2, #6]
 8017932:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017936:	b292      	uxth	r2, r2
 8017938:	fb02 f303 	mul.w	r3, r2, r3
 801793c:	461a      	mov	r2, r3
 801793e:	68b9      	ldr	r1, [r7, #8]
 8017940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017942:	f006 f842 	bl	801d9ca <memcpy>
      break;
 8017946:	e08c      	b.n	8017a62 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8017948:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801794a:	461a      	mov	r2, r3
 801794c:	68b9      	ldr	r1, [r7, #8]
 801794e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017950:	f006 f83b 	bl	801d9ca <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6818      	ldr	r0, [r3, #0]
 8017958:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801795a:	68ba      	ldr	r2, [r7, #8]
 801795c:	4413      	add	r3, r2
 801795e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017960:	4619      	mov	r1, r3
 8017962:	f006 f832 	bl	801d9ca <memcpy>
      break;
 8017966:	e07c      	b.n	8017a62 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017968:	88fa      	ldrh	r2, [r7, #6]
 801796a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801796c:	429a      	cmp	r2, r3
 801796e:	d80f      	bhi.n	8017990 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	88db      	ldrh	r3, [r3, #6]
 8017974:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017978:	b29b      	uxth	r3, r3
 801797a:	461a      	mov	r2, r3
 801797c:	88fb      	ldrh	r3, [r7, #6]
 801797e:	fb13 f302 	smulbb	r3, r3, r2
 8017982:	b29b      	uxth	r3, r3
 8017984:	461a      	mov	r2, r3
 8017986:	68b9      	ldr	r1, [r7, #8]
 8017988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801798a:	f7ff ff0a 	bl	80177a2 <_ff_push_const_addr>
      break;
 801798e:	e067      	b.n	8017a60 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8017990:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017992:	f023 0303 	bic.w	r3, r3, #3
 8017996:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8017998:	8c3b      	ldrh	r3, [r7, #32]
 801799a:	461a      	mov	r2, r3
 801799c:	68b9      	ldr	r1, [r7, #8]
 801799e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80179a0:	f7ff feff 	bl	80177a2 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80179a4:	8c3b      	ldrh	r3, [r7, #32]
 80179a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80179a8:	4413      	add	r3, r2
 80179aa:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80179ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80179ae:	b2db      	uxtb	r3, r3
 80179b0:	f003 0303 	and.w	r3, r3, #3
 80179b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 80179b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d043      	beq.n	8017a48 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80179c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80179c8:	b29b      	uxth	r3, r3
 80179ca:	f1c3 0304 	rsb	r3, r3, #4
 80179ce:	b29a      	uxth	r2, r3
 80179d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80179d2:	837b      	strh	r3, [r7, #26]
 80179d4:	4613      	mov	r3, r2
 80179d6:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80179d8:	8b7a      	ldrh	r2, [r7, #26]
 80179da:	8b3b      	ldrh	r3, [r7, #24]
 80179dc:	4293      	cmp	r3, r2
 80179de:	bf28      	it	cs
 80179e0:	4613      	movcs	r3, r2
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80179e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80179f0:	1ad3      	subs	r3, r2, r3
 80179f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80179f4:	69fb      	ldr	r3, [r7, #28]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80179fa:	f107 0314 	add.w	r3, r7, #20
 80179fe:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8017a00:	e007      	b.n	8017a12 <_ff_push_n+0x164>
 8017a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017a04:	1c53      	adds	r3, r2, #1
 8017a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a0a:	1c59      	adds	r1, r3, #1
 8017a0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8017a0e:	7812      	ldrb	r2, [r2, #0]
 8017a10:	701a      	strb	r2, [r3, #0]
 8017a12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017a16:	1e5a      	subs	r2, r3, #1
 8017a18:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d1f0      	bne.n	8017a02 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8017a26:	e007      	b.n	8017a38 <_ff_push_n+0x18a>
 8017a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017a2a:	1c53      	adds	r3, r2, #1
 8017a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a30:	1c59      	adds	r1, r3, #1
 8017a32:	6339      	str	r1, [r7, #48]	@ 0x30
 8017a34:	7812      	ldrb	r2, [r2, #0]
 8017a36:	701a      	strb	r2, [r3, #0]
 8017a38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017a3c:	1e5a      	subs	r2, r3, #1
 8017a3e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d1f0      	bne.n	8017a28 <_ff_push_n+0x17a>
 8017a46:	e002      	b.n	8017a4e <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8017a4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d005      	beq.n	8017a60 <_ff_push_n+0x1b2>
 8017a54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017a56:	461a      	mov	r2, r3
 8017a58:	68b9      	ldr	r1, [r7, #8]
 8017a5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a5c:	f7ff fea1 	bl	80177a2 <_ff_push_const_addr>
      break;
 8017a60:	bf00      	nop
  }
}
 8017a62:	bf00      	nop
 8017a64:	3738      	adds	r7, #56	@ 0x38
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}

08017a6a <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8017a6a:	b580      	push	{r7, lr}
 8017a6c:	b08e      	sub	sp, #56	@ 0x38
 8017a6e:	af00      	add	r7, sp, #0
 8017a70:	60f8      	str	r0, [r7, #12]
 8017a72:	60b9      	str	r1, [r7, #8]
 8017a74:	4611      	mov	r1, r2
 8017a76:	461a      	mov	r2, r3
 8017a78:	460b      	mov	r3, r1
 8017a7a:	80fb      	strh	r3, [r7, #6]
 8017a7c:	4613      	mov	r3, r2
 8017a7e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	889a      	ldrh	r2, [r3, #4]
 8017a84:	88bb      	ldrh	r3, [r7, #4]
 8017a86:	1ad3      	subs	r3, r2, r3
 8017a88:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8017a8a:	88fa      	ldrh	r2, [r7, #6]
 8017a8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a8e:	1ad3      	subs	r3, r2, r3
 8017a90:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	88db      	ldrh	r3, [r3, #6]
 8017a96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a9a:	b29b      	uxth	r3, r3
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017aa0:	fb13 f302 	smulbb	r3, r3, r2
 8017aa4:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	88db      	ldrh	r3, [r3, #6]
 8017aaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ab4:	fb13 f302 	smulbb	r3, r3, r2
 8017ab8:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	88ba      	ldrh	r2, [r7, #4]
 8017ac0:	68f9      	ldr	r1, [r7, #12]
 8017ac2:	88c9      	ldrh	r1, [r1, #6]
 8017ac4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017ac8:	b289      	uxth	r1, r1
 8017aca:	fb01 f202 	mul.w	r2, r1, r2
 8017ace:	4413      	add	r3, r2
 8017ad0:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017ad2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d002      	beq.n	8017ae0 <_ff_pull_n+0x76>
 8017ada:	2b01      	cmp	r3, #1
 8017adc:	d022      	beq.n	8017b24 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8017ade:	e0a0      	b.n	8017c22 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017ae0:	88fa      	ldrh	r2, [r7, #6]
 8017ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d80d      	bhi.n	8017b04 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8017ae8:	88fb      	ldrh	r3, [r7, #6]
 8017aea:	68fa      	ldr	r2, [r7, #12]
 8017aec:	88d2      	ldrh	r2, [r2, #6]
 8017aee:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017af2:	b292      	uxth	r2, r2
 8017af4:	fb02 f303 	mul.w	r3, r2, r3
 8017af8:	461a      	mov	r2, r3
 8017afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017afc:	68b8      	ldr	r0, [r7, #8]
 8017afe:	f005 ff64 	bl	801d9ca <memcpy>
    break;
 8017b02:	e08e      	b.n	8017c22 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8017b04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017b06:	461a      	mov	r2, r3
 8017b08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017b0a:	68b8      	ldr	r0, [r7, #8]
 8017b0c:	f005 ff5d 	bl	801d9ca <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8017b10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017b12:	68ba      	ldr	r2, [r7, #8]
 8017b14:	18d0      	adds	r0, r2, r3
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	f005 ff54 	bl	801d9ca <memcpy>
    break;
 8017b22:	e07e      	b.n	8017c22 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017b24:	88fa      	ldrh	r2, [r7, #6]
 8017b26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d80f      	bhi.n	8017b4c <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	88db      	ldrh	r3, [r3, #6]
 8017b30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017b34:	b29b      	uxth	r3, r3
 8017b36:	461a      	mov	r2, r3
 8017b38:	88fb      	ldrh	r3, [r7, #6]
 8017b3a:	fb13 f302 	smulbb	r3, r3, r2
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	461a      	mov	r2, r3
 8017b42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017b44:	68b8      	ldr	r0, [r7, #8]
 8017b46:	f7ff fe60 	bl	801780a <_ff_pull_const_addr>
    break;
 8017b4a:	e069      	b.n	8017c20 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8017b4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017b4e:	f023 0303 	bic.w	r3, r3, #3
 8017b52:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8017b54:	8c3b      	ldrh	r3, [r7, #32]
 8017b56:	461a      	mov	r2, r3
 8017b58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017b5a:	68b8      	ldr	r0, [r7, #8]
 8017b5c:	f7ff fe55 	bl	801780a <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8017b60:	8c3b      	ldrh	r3, [r7, #32]
 8017b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017b64:	4413      	add	r3, r2
 8017b66:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017b68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017b6a:	b2db      	uxtb	r3, r3
 8017b6c:	f003 0303 	and.w	r3, r3, #3
 8017b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017b74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d045      	beq.n	8017c08 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017b7c:	68bb      	ldr	r3, [r7, #8]
 8017b7e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017b80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	f1c3 0304 	rsb	r3, r3, #4
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b8e:	837b      	strh	r3, [r7, #26]
 8017b90:	4613      	mov	r3, r2
 8017b92:	833b      	strh	r3, [r7, #24]
 8017b94:	8b7a      	ldrh	r2, [r7, #26]
 8017b96:	8b3b      	ldrh	r3, [r7, #24]
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	bf28      	it	cs
 8017b9c:	4613      	movcs	r3, r2
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8017ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017ba8:	b29b      	uxth	r3, r3
 8017baa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017bac:	1ad3      	subs	r3, r2, r3
 8017bae:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8017bb4:	f107 0314 	add.w	r3, r7, #20
 8017bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8017bba:	e007      	b.n	8017bcc <_ff_pull_n+0x162>
 8017bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017bbe:	1c53      	adds	r3, r2, #1
 8017bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8017bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bc4:	1c59      	adds	r1, r3, #1
 8017bc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017bc8:	7812      	ldrb	r2, [r2, #0]
 8017bca:	701a      	strb	r2, [r3, #0]
 8017bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017bd0:	1e5a      	subs	r2, r3, #1
 8017bd2:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d1f0      	bne.n	8017bbc <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8017be0:	e007      	b.n	8017bf2 <_ff_pull_n+0x188>
 8017be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017be4:	1c53      	adds	r3, r2, #1
 8017be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8017be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bea:	1c59      	adds	r1, r3, #1
 8017bec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017bee:	7812      	ldrb	r2, [r2, #0]
 8017bf0:	701a      	strb	r2, [r3, #0]
 8017bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017bf6:	1e5a      	subs	r2, r3, #1
 8017bf8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d1f0      	bne.n	8017be2 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8017c00:	697a      	ldr	r2, [r7, #20]
 8017c02:	69fb      	ldr	r3, [r7, #28]
 8017c04:	601a      	str	r2, [r3, #0]
 8017c06:	e002      	b.n	8017c0e <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8017c0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d005      	beq.n	8017c20 <_ff_pull_n+0x1b6>
 8017c14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017c16:	461a      	mov	r2, r3
 8017c18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c1a:	68b8      	ldr	r0, [r7, #8]
 8017c1c:	f7ff fdf5 	bl	801780a <_ff_pull_const_addr>
    break;
 8017c20:	bf00      	nop
  }
}
 8017c22:	bf00      	nop
 8017c24:	3738      	adds	r7, #56	@ 0x38
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8017c2a:	b480      	push	{r7}
 8017c2c:	b085      	sub	sp, #20
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	4603      	mov	r3, r0
 8017c32:	80fb      	strh	r3, [r7, #6]
 8017c34:	460b      	mov	r3, r1
 8017c36:	80bb      	strh	r3, [r7, #4]
 8017c38:	4613      	mov	r3, r2
 8017c3a:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8017c3c:	88ba      	ldrh	r2, [r7, #4]
 8017c3e:	887b      	ldrh	r3, [r7, #2]
 8017c40:	4413      	add	r3, r2
 8017c42:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8017c44:	88ba      	ldrh	r2, [r7, #4]
 8017c46:	89fb      	ldrh	r3, [r7, #14]
 8017c48:	429a      	cmp	r2, r3
 8017c4a:	d804      	bhi.n	8017c56 <advance_index+0x2c>
 8017c4c:	89fa      	ldrh	r2, [r7, #14]
 8017c4e:	88fb      	ldrh	r3, [r7, #6]
 8017c50:	005b      	lsls	r3, r3, #1
 8017c52:	429a      	cmp	r2, r3
 8017c54:	db08      	blt.n	8017c68 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8017c56:	88fb      	ldrh	r3, [r7, #6]
 8017c58:	005b      	lsls	r3, r3, #1
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	425b      	negs	r3, r3
 8017c5e:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8017c60:	89fa      	ldrh	r2, [r7, #14]
 8017c62:	89bb      	ldrh	r3, [r7, #12]
 8017c64:	4413      	add	r3, r2
 8017c66:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8017c68:	89fb      	ldrh	r3, [r7, #14]
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3714      	adds	r7, #20
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c74:	4770      	bx	lr

08017c76 <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b08c      	sub	sp, #48	@ 0x30
 8017c7a:	af02      	add	r7, sp, #8
 8017c7c:	60f8      	str	r0, [r7, #12]
 8017c7e:	60b9      	str	r1, [r7, #8]
 8017c80:	4611      	mov	r1, r2
 8017c82:	461a      	mov	r2, r3
 8017c84:	460b      	mov	r3, r1
 8017c86:	80fb      	strh	r3, [r7, #6]
 8017c88:	4613      	mov	r3, r2
 8017c8a:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	889b      	ldrh	r3, [r3, #4]
 8017c90:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017c92:	88bb      	ldrh	r3, [r7, #4]
 8017c94:	843b      	strh	r3, [r7, #32]
 8017c96:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c98:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8017c9a:	8c3a      	ldrh	r2, [r7, #32]
 8017c9c:	8bfb      	ldrh	r3, [r7, #30]
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d304      	bcc.n	8017cac <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8017ca2:	8c3a      	ldrh	r2, [r7, #32]
 8017ca4:	8bfb      	ldrh	r3, [r7, #30]
 8017ca6:	1ad3      	subs	r3, r2, r3
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	e008      	b.n	8017cbe <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017cac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017cae:	005b      	lsls	r3, r3, #1
 8017cb0:	b29a      	uxth	r2, r3
 8017cb2:	8c39      	ldrh	r1, [r7, #32]
 8017cb4:	8bfb      	ldrh	r3, [r7, #30]
 8017cb6:	1acb      	subs	r3, r1, r3
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	4413      	add	r3, r2
 8017cbc:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8017cbe:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8017cc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d101      	bne.n	8017cca <_tu_fifo_peek_n+0x54>
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	e041      	b.n	8017d4e <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	889b      	ldrh	r3, [r3, #4]
 8017cce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d91b      	bls.n	8017d0c <_tu_fifo_peek_n+0x96>
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	61bb      	str	r3, [r7, #24]
 8017cd8:	88bb      	ldrh	r3, [r7, #4]
 8017cda:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8017cdc:	69bb      	ldr	r3, [r7, #24]
 8017cde:	889b      	ldrh	r3, [r3, #4]
 8017ce0:	8afa      	ldrh	r2, [r7, #22]
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d305      	bcc.n	8017cf2 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8017ce6:	69bb      	ldr	r3, [r7, #24]
 8017ce8:	889b      	ldrh	r3, [r3, #4]
 8017cea:	8afa      	ldrh	r2, [r7, #22]
 8017cec:	1ad3      	subs	r3, r2, r3
 8017cee:	82bb      	strh	r3, [r7, #20]
 8017cf0:	e004      	b.n	8017cfc <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8017cf2:	69bb      	ldr	r3, [r7, #24]
 8017cf4:	889a      	ldrh	r2, [r3, #4]
 8017cf6:	8afb      	ldrh	r3, [r7, #22]
 8017cf8:	4413      	add	r3, r2
 8017cfa:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8017cfc:	69bb      	ldr	r3, [r7, #24]
 8017cfe:	8aba      	ldrh	r2, [r7, #20]
 8017d00:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8017d02:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8017d04:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	889b      	ldrh	r3, [r3, #4]
 8017d0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8017d0c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017d0e:	88fb      	ldrh	r3, [r7, #6]
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d201      	bcs.n	8017d18 <_tu_fifo_peek_n+0xa2>
 8017d14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d16:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	889b      	ldrh	r3, [r3, #4]
 8017d1c:	827b      	strh	r3, [r7, #18]
 8017d1e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017d20:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8017d22:	e003      	b.n	8017d2c <_tu_fifo_peek_n+0xb6>
 8017d24:	8a3a      	ldrh	r2, [r7, #16]
 8017d26:	8a7b      	ldrh	r3, [r7, #18]
 8017d28:	1ad3      	subs	r3, r2, r3
 8017d2a:	823b      	strh	r3, [r7, #16]
 8017d2c:	8a7a      	ldrh	r2, [r7, #18]
 8017d2e:	8a3b      	ldrh	r3, [r7, #16]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d9f7      	bls.n	8017d24 <_tu_fifo_peek_n+0xae>
  return idx;
 8017d34:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8017d36:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8017d38:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8017d3a:	88fa      	ldrh	r2, [r7, #6]
 8017d3c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017d40:	9300      	str	r3, [sp, #0]
 8017d42:	460b      	mov	r3, r1
 8017d44:	68b9      	ldr	r1, [r7, #8]
 8017d46:	68f8      	ldr	r0, [r7, #12]
 8017d48:	f7ff fe8f 	bl	8017a6a <_ff_pull_n>

  return n;
 8017d4c:	88fb      	ldrh	r3, [r7, #6]
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3728      	adds	r7, #40	@ 0x28
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}

08017d56 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8017d56:	b580      	push	{r7, lr}
 8017d58:	b092      	sub	sp, #72	@ 0x48
 8017d5a:	af02      	add	r7, sp, #8
 8017d5c:	60f8      	str	r0, [r7, #12]
 8017d5e:	60b9      	str	r1, [r7, #8]
 8017d60:	4611      	mov	r1, r2
 8017d62:	461a      	mov	r2, r3
 8017d64:	460b      	mov	r3, r1
 8017d66:	80fb      	strh	r3, [r7, #6]
 8017d68:	4613      	mov	r3, r2
 8017d6a:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8017d6c:	88fb      	ldrh	r3, [r7, #6]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d101      	bne.n	8017d76 <_tu_fifo_write_n+0x20>
 8017d72:	2300      	movs	r3, #0
 8017d74:	e0bc      	b.n	8017ef0 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	891b      	ldrh	r3, [r3, #8]
 8017d7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	895b      	ldrh	r3, [r3, #10]
 8017d80:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	79db      	ldrb	r3, [r3, #7]
 8017d8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	f083 0301 	eor.w	r3, r3, #1
 8017d94:	b2db      	uxtb	r3, r3
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d036      	beq.n	8017e08 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	889b      	ldrh	r3, [r3, #4]
 8017d9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8017da0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017da2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8017da4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017da6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017da8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017daa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017dac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017dae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017db0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017db2:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8017db4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017db6:	8c3b      	ldrh	r3, [r7, #32]
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d304      	bcc.n	8017dc6 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8017dbc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017dbe:	8c3b      	ldrh	r3, [r7, #32]
 8017dc0:	1ad3      	subs	r3, r2, r3
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	e008      	b.n	8017dd8 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017dc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dc8:	005b      	lsls	r3, r3, #1
 8017dca:	b29a      	uxth	r2, r3
 8017dcc:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8017dce:	8c3b      	ldrh	r3, [r7, #32]
 8017dd0:	1acb      	subs	r3, r1, r3
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	4413      	add	r3, r2
 8017dd6:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8017dd8:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8017dda:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8017ddc:	8bfb      	ldrh	r3, [r7, #30]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d904      	bls.n	8017dec <_tu_fifo_write_n+0x96>
 8017de2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8017de4:	8bfb      	ldrh	r3, [r7, #30]
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	e000      	b.n	8017dee <_tu_fifo_write_n+0x98>
 8017dec:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8017dee:	867b      	strh	r3, [r7, #50]	@ 0x32
 8017df0:	88fb      	ldrh	r3, [r7, #6]
 8017df2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8017df4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8017df6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8017df8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017dfa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017dfc:	4293      	cmp	r3, r2
 8017dfe:	bf28      	it	cs
 8017e00:	4613      	movcs	r3, r2
 8017e02:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8017e04:	80fb      	strh	r3, [r7, #6]
 8017e06:	e04b      	b.n	8017ea0 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	889b      	ldrh	r3, [r3, #4]
 8017e0c:	88fa      	ldrh	r2, [r7, #6]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d317      	bcc.n	8017e42 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8017e12:	797b      	ldrb	r3, [r7, #5]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d10e      	bne.n	8017e36 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8017e18:	88fb      	ldrh	r3, [r7, #6]
 8017e1a:	68fa      	ldr	r2, [r7, #12]
 8017e1c:	8892      	ldrh	r2, [r2, #4]
 8017e1e:	1a9b      	subs	r3, r3, r2
 8017e20:	68fa      	ldr	r2, [r7, #12]
 8017e22:	88d2      	ldrh	r2, [r2, #6]
 8017e24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017e28:	b292      	uxth	r2, r2
 8017e2a:	fb02 f303 	mul.w	r3, r2, r3
 8017e2e:	461a      	mov	r2, r3
 8017e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e32:	4413      	add	r3, r2
 8017e34:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	889b      	ldrh	r3, [r3, #4]
 8017e3a:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8017e3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8017e40:	e02e      	b.n	8017ea0 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	889b      	ldrh	r3, [r3, #4]
 8017e46:	83bb      	strh	r3, [r7, #28]
 8017e48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017e4a:	837b      	strh	r3, [r7, #26]
 8017e4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e4e:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8017e50:	8b7a      	ldrh	r2, [r7, #26]
 8017e52:	8b3b      	ldrh	r3, [r7, #24]
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d304      	bcc.n	8017e62 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8017e58:	8b7a      	ldrh	r2, [r7, #26]
 8017e5a:	8b3b      	ldrh	r3, [r7, #24]
 8017e5c:	1ad3      	subs	r3, r2, r3
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	e008      	b.n	8017e74 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017e62:	8bbb      	ldrh	r3, [r7, #28]
 8017e64:	005b      	lsls	r3, r3, #1
 8017e66:	b29a      	uxth	r2, r3
 8017e68:	8b79      	ldrh	r1, [r7, #26]
 8017e6a:	8b3b      	ldrh	r3, [r7, #24]
 8017e6c:	1acb      	subs	r3, r1, r3
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	4413      	add	r3, r2
 8017e72:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8017e74:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8017e76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8017e78:	88fb      	ldrh	r3, [r7, #6]
 8017e7a:	441a      	add	r2, r3
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	889b      	ldrh	r3, [r3, #4]
 8017e80:	005b      	lsls	r3, r3, #1
 8017e82:	429a      	cmp	r2, r3
 8017e84:	db0c      	blt.n	8017ea0 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	8898      	ldrh	r0, [r3, #4]
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	889a      	ldrh	r2, [r3, #4]
 8017e8e:	88fb      	ldrh	r3, [r7, #6]
 8017e90:	1ad3      	subs	r3, r2, r3
 8017e92:	b29a      	uxth	r2, r3
 8017e94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e96:	4619      	mov	r1, r3
 8017e98:	f7ff fec7 	bl	8017c2a <advance_index>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8017ea0:	88fb      	ldrh	r3, [r7, #6]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d023      	beq.n	8017eee <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	889b      	ldrh	r3, [r3, #4]
 8017eaa:	82fb      	strh	r3, [r7, #22]
 8017eac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017eae:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8017eb0:	e003      	b.n	8017eba <_tu_fifo_write_n+0x164>
 8017eb2:	8aba      	ldrh	r2, [r7, #20]
 8017eb4:	8afb      	ldrh	r3, [r7, #22]
 8017eb6:	1ad3      	subs	r3, r2, r3
 8017eb8:	82bb      	strh	r3, [r7, #20]
 8017eba:	8afa      	ldrh	r2, [r7, #22]
 8017ebc:	8abb      	ldrh	r3, [r7, #20]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d9f7      	bls.n	8017eb2 <_tu_fifo_write_n+0x15c>
  return idx;
 8017ec2:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8017ec4:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8017ec6:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8017ec8:	88fa      	ldrh	r2, [r7, #6]
 8017eca:	797b      	ldrb	r3, [r7, #5]
 8017ecc:	9300      	str	r3, [sp, #0]
 8017ece:	460b      	mov	r3, r1
 8017ed0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017ed2:	68f8      	ldr	r0, [r7, #12]
 8017ed4:	f7ff fceb 	bl	80178ae <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	889b      	ldrh	r3, [r3, #4]
 8017edc:	88fa      	ldrh	r2, [r7, #6]
 8017ede:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f7ff fea2 	bl	8017c2a <advance_index>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	461a      	mov	r2, r3
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8017eee:	88fb      	ldrh	r3, [r7, #6]
}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3740      	adds	r7, #64	@ 0x40
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b086      	sub	sp, #24
 8017efc:	af02      	add	r7, sp, #8
 8017efe:	60f8      	str	r0, [r7, #12]
 8017f00:	60b9      	str	r1, [r7, #8]
 8017f02:	4611      	mov	r1, r2
 8017f04:	461a      	mov	r2, r3
 8017f06:	460b      	mov	r3, r1
 8017f08:	80fb      	strh	r3, [r7, #6]
 8017f0a:	4613      	mov	r3, r2
 8017f0c:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	891b      	ldrh	r3, [r3, #8]
 8017f12:	b298      	uxth	r0, r3
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	895b      	ldrh	r3, [r3, #10]
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	88f9      	ldrh	r1, [r7, #6]
 8017f1c:	797a      	ldrb	r2, [r7, #5]
 8017f1e:	9201      	str	r2, [sp, #4]
 8017f20:	9300      	str	r3, [sp, #0]
 8017f22:	4603      	mov	r3, r0
 8017f24:	460a      	mov	r2, r1
 8017f26:	68b9      	ldr	r1, [r7, #8]
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f7ff fea4 	bl	8017c76 <_tu_fifo_peek_n>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	8898      	ldrh	r0, [r3, #4]
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	895b      	ldrh	r3, [r3, #10]
 8017f3a:	b29b      	uxth	r3, r3
 8017f3c:	88fa      	ldrh	r2, [r7, #6]
 8017f3e:	4619      	mov	r1, r3
 8017f40:	f7ff fe73 	bl	8017c2a <advance_index>
 8017f44:	4603      	mov	r3, r0
 8017f46:	461a      	mov	r2, r3
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8017f4c:	88fb      	ldrh	r3, [r7, #6]
}
 8017f4e:	4618      	mov	r0, r3
 8017f50:	3710      	adds	r7, #16
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}

08017f56 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8017f56:	b480      	push	{r7}
 8017f58:	b087      	sub	sp, #28
 8017f5a:	af00      	add	r7, sp, #0
 8017f5c:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	8899      	ldrh	r1, [r3, #4]
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	891b      	ldrh	r3, [r3, #8]
 8017f66:	b29a      	uxth	r2, r3
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	895b      	ldrh	r3, [r3, #10]
 8017f6c:	b29b      	uxth	r3, r3
 8017f6e:	8279      	strh	r1, [r7, #18]
 8017f70:	823a      	strh	r2, [r7, #16]
 8017f72:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8017f74:	8a3a      	ldrh	r2, [r7, #16]
 8017f76:	89fb      	ldrh	r3, [r7, #14]
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	d304      	bcc.n	8017f86 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8017f7c:	8a3a      	ldrh	r2, [r7, #16]
 8017f7e:	89fb      	ldrh	r3, [r7, #14]
 8017f80:	1ad3      	subs	r3, r2, r3
 8017f82:	b29b      	uxth	r3, r3
 8017f84:	e008      	b.n	8017f98 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017f86:	8a7b      	ldrh	r3, [r7, #18]
 8017f88:	005b      	lsls	r3, r3, #1
 8017f8a:	b29a      	uxth	r2, r3
 8017f8c:	8a39      	ldrh	r1, [r7, #16]
 8017f8e:	89fb      	ldrh	r3, [r7, #14]
 8017f90:	1acb      	subs	r3, r1, r3
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	4413      	add	r3, r2
 8017f96:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	8892      	ldrh	r2, [r2, #4]
 8017f9c:	82fb      	strh	r3, [r7, #22]
 8017f9e:	4613      	mov	r3, r2
 8017fa0:	82bb      	strh	r3, [r7, #20]
 8017fa2:	8afa      	ldrh	r2, [r7, #22]
 8017fa4:	8abb      	ldrh	r3, [r7, #20]
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	bf28      	it	cs
 8017faa:	4613      	movcs	r3, r2
 8017fac:	b29b      	uxth	r3, r3
}
 8017fae:	4618      	mov	r0, r3
 8017fb0:	371c      	adds	r7, #28
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr

08017fba <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8017fba:	b480      	push	{r7}
 8017fbc:	b083      	sub	sp, #12
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	891b      	ldrh	r3, [r3, #8]
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	895b      	ldrh	r3, [r3, #10]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	bf0c      	ite	eq
 8017fd2:	2301      	moveq	r3, #1
 8017fd4:	2300      	movne	r3, #0
 8017fd6:	b2db      	uxtb	r3, r3
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	370c      	adds	r7, #12
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe2:	4770      	bx	lr

08017fe4 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8017fe4:	b480      	push	{r7}
 8017fe6:	b085      	sub	sp, #20
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	8899      	ldrh	r1, [r3, #4]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	891b      	ldrh	r3, [r3, #8]
 8017ff4:	b29a      	uxth	r2, r3
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	895b      	ldrh	r3, [r3, #10]
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	81f9      	strh	r1, [r7, #14]
 8017ffe:	81ba      	strh	r2, [r7, #12]
 8018000:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8018002:	89ba      	ldrh	r2, [r7, #12]
 8018004:	897b      	ldrh	r3, [r7, #10]
 8018006:	429a      	cmp	r2, r3
 8018008:	d304      	bcc.n	8018014 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 801800a:	89ba      	ldrh	r2, [r7, #12]
 801800c:	897b      	ldrh	r3, [r7, #10]
 801800e:	1ad3      	subs	r3, r2, r3
 8018010:	b29b      	uxth	r3, r3
 8018012:	e008      	b.n	8018026 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8018014:	89fb      	ldrh	r3, [r7, #14]
 8018016:	005b      	lsls	r3, r3, #1
 8018018:	b29a      	uxth	r2, r3
 801801a:	89b9      	ldrh	r1, [r7, #12]
 801801c:	897b      	ldrh	r3, [r7, #10]
 801801e:	1acb      	subs	r3, r1, r3
 8018020:	b29b      	uxth	r3, r3
 8018022:	4413      	add	r3, r2
 8018024:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8018026:	687a      	ldr	r2, [r7, #4]
 8018028:	8892      	ldrh	r2, [r2, #4]
 801802a:	4293      	cmp	r3, r2
 801802c:	bf2c      	ite	cs
 801802e:	2301      	movcs	r3, #1
 8018030:	2300      	movcc	r3, #0
 8018032:	b2db      	uxtb	r3, r3
}
 8018034:	4618      	mov	r0, r3
 8018036:	3714      	adds	r7, #20
 8018038:	46bd      	mov	sp, r7
 801803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803e:	4770      	bx	lr

08018040 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8018040:	b480      	push	{r7}
 8018042:	b087      	sub	sp, #28
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	8899      	ldrh	r1, [r3, #4]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	891b      	ldrh	r3, [r3, #8]
 8018050:	b29a      	uxth	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	895b      	ldrh	r3, [r3, #10]
 8018056:	b29b      	uxth	r3, r3
 8018058:	82f9      	strh	r1, [r7, #22]
 801805a:	82ba      	strh	r2, [r7, #20]
 801805c:	827b      	strh	r3, [r7, #18]
 801805e:	8afb      	ldrh	r3, [r7, #22]
 8018060:	823b      	strh	r3, [r7, #16]
 8018062:	8abb      	ldrh	r3, [r7, #20]
 8018064:	81fb      	strh	r3, [r7, #14]
 8018066:	8a7b      	ldrh	r3, [r7, #18]
 8018068:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 801806a:	89fa      	ldrh	r2, [r7, #14]
 801806c:	89bb      	ldrh	r3, [r7, #12]
 801806e:	429a      	cmp	r2, r3
 8018070:	d304      	bcc.n	801807c <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8018072:	89fa      	ldrh	r2, [r7, #14]
 8018074:	89bb      	ldrh	r3, [r7, #12]
 8018076:	1ad3      	subs	r3, r2, r3
 8018078:	b29b      	uxth	r3, r3
 801807a:	e008      	b.n	801808e <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 801807c:	8a3b      	ldrh	r3, [r7, #16]
 801807e:	005b      	lsls	r3, r3, #1
 8018080:	b29a      	uxth	r2, r3
 8018082:	89f9      	ldrh	r1, [r7, #14]
 8018084:	89bb      	ldrh	r3, [r7, #12]
 8018086:	1acb      	subs	r3, r1, r3
 8018088:	b29b      	uxth	r3, r3
 801808a:	4413      	add	r3, r2
 801808c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 801808e:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8018090:	8afa      	ldrh	r2, [r7, #22]
 8018092:	897b      	ldrh	r3, [r7, #10]
 8018094:	429a      	cmp	r2, r3
 8018096:	d904      	bls.n	80180a2 <tu_fifo_remaining+0x62>
 8018098:	8afa      	ldrh	r2, [r7, #22]
 801809a:	897b      	ldrh	r3, [r7, #10]
 801809c:	1ad3      	subs	r3, r2, r3
 801809e:	b29b      	uxth	r3, r3
 80180a0:	e000      	b.n	80180a4 <tu_fifo_remaining+0x64>
 80180a2:	2300      	movs	r3, #0
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	371c      	adds	r7, #28
 80180a8:	46bd      	mov	sp, r7
 80180aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ae:	4770      	bx	lr

080180b0 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	60f8      	str	r0, [r7, #12]
 80180b8:	60b9      	str	r1, [r7, #8]
 80180ba:	4613      	mov	r3, r2
 80180bc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80180be:	88fa      	ldrh	r2, [r7, #6]
 80180c0:	2300      	movs	r3, #0
 80180c2:	68b9      	ldr	r1, [r7, #8]
 80180c4:	68f8      	ldr	r0, [r7, #12]
 80180c6:	f7ff ff17 	bl	8017ef8 <_tu_fifo_read_n>
 80180ca:	4603      	mov	r3, r0
}
 80180cc:	4618      	mov	r0, r3
 80180ce:	3710      	adds	r7, #16
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}

080180d4 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b084      	sub	sp, #16
 80180d8:	af00      	add	r7, sp, #0
 80180da:	60f8      	str	r0, [r7, #12]
 80180dc:	60b9      	str	r1, [r7, #8]
 80180de:	4613      	mov	r3, r2
 80180e0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80180e2:	88fa      	ldrh	r2, [r7, #6]
 80180e4:	2301      	movs	r3, #1
 80180e6:	68b9      	ldr	r1, [r7, #8]
 80180e8:	68f8      	ldr	r0, [r7, #12]
 80180ea:	f7ff ff05 	bl	8017ef8 <_tu_fifo_read_n>
 80180ee:	4603      	mov	r3, r0
}
 80180f0:	4618      	mov	r0, r3
 80180f2:	3710      	adds	r7, #16
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd80      	pop	{r7, pc}

080180f8 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b086      	sub	sp, #24
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
 8018100:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	891b      	ldrh	r3, [r3, #8]
 8018106:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f7ff ff6b 	bl	8017fe4 <tu_fifo_full>
 801810e:	4603      	mov	r3, r0
 8018110:	2b00      	cmp	r3, #0
 8018112:	d00c      	beq.n	801812e <tu_fifo_write+0x36>
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	79db      	ldrb	r3, [r3, #7]
 8018118:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801811c:	b2db      	uxtb	r3, r3
 801811e:	f083 0301 	eor.w	r3, r3, #1
 8018122:	b2db      	uxtb	r3, r3
 8018124:	2b00      	cmp	r3, #0
 8018126:	d002      	beq.n	801812e <tu_fifo_write+0x36>
  {
    ret = false;
 8018128:	2300      	movs	r3, #0
 801812a:	75fb      	strb	r3, [r7, #23]
 801812c:	e022      	b.n	8018174 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	889b      	ldrh	r3, [r3, #4]
 8018132:	823b      	strh	r3, [r7, #16]
 8018134:	8abb      	ldrh	r3, [r7, #20]
 8018136:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8018138:	e003      	b.n	8018142 <tu_fifo_write+0x4a>
 801813a:	89fa      	ldrh	r2, [r7, #14]
 801813c:	8a3b      	ldrh	r3, [r7, #16]
 801813e:	1ad3      	subs	r3, r2, r3
 8018140:	81fb      	strh	r3, [r7, #14]
 8018142:	8a3a      	ldrh	r2, [r7, #16]
 8018144:	89fb      	ldrh	r3, [r7, #14]
 8018146:	429a      	cmp	r2, r3
 8018148:	d9f7      	bls.n	801813a <tu_fifo_write+0x42>
  return idx;
 801814a:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 801814c:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 801814e:	8a7b      	ldrh	r3, [r7, #18]
 8018150:	461a      	mov	r2, r3
 8018152:	6839      	ldr	r1, [r7, #0]
 8018154:	6878      	ldr	r0, [r7, #4]
 8018156:	f7ff fb8b 	bl	8017870 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	889b      	ldrh	r3, [r3, #4]
 801815e:	8ab9      	ldrh	r1, [r7, #20]
 8018160:	2201      	movs	r2, #1
 8018162:	4618      	mov	r0, r3
 8018164:	f7ff fd61 	bl	8017c2a <advance_index>
 8018168:	4603      	mov	r3, r0
 801816a:	461a      	mov	r2, r3
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	811a      	strh	r2, [r3, #8]

    ret = true;
 8018170:	2301      	movs	r3, #1
 8018172:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8018174:	7dfb      	ldrb	r3, [r7, #23]
}
 8018176:	4618      	mov	r0, r3
 8018178:	3718      	adds	r7, #24
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}

0801817e <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 801817e:	b580      	push	{r7, lr}
 8018180:	b084      	sub	sp, #16
 8018182:	af00      	add	r7, sp, #0
 8018184:	60f8      	str	r0, [r7, #12]
 8018186:	60b9      	str	r1, [r7, #8]
 8018188:	4613      	mov	r3, r2
 801818a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 801818c:	88fa      	ldrh	r2, [r7, #6]
 801818e:	2300      	movs	r3, #0
 8018190:	68b9      	ldr	r1, [r7, #8]
 8018192:	68f8      	ldr	r0, [r7, #12]
 8018194:	f7ff fddf 	bl	8017d56 <_tu_fifo_write_n>
 8018198:	4603      	mov	r3, r0
}
 801819a:	4618      	mov	r0, r3
 801819c:	3710      	adds	r7, #16
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b084      	sub	sp, #16
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	60f8      	str	r0, [r7, #12]
 80181aa:	60b9      	str	r1, [r7, #8]
 80181ac:	4613      	mov	r3, r2
 80181ae:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80181b0:	88fa      	ldrh	r2, [r7, #6]
 80181b2:	2301      	movs	r3, #1
 80181b4:	68b9      	ldr	r1, [r7, #8]
 80181b6:	68f8      	ldr	r0, [r7, #12]
 80181b8:	f7ff fdcd 	bl	8017d56 <_tu_fifo_write_n>
 80181bc:	4603      	mov	r3, r0
}
 80181be:	4618      	mov	r0, r3
 80181c0:	3710      	adds	r7, #16
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bd80      	pop	{r7, pc}

080181c6 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80181c6:	b480      	push	{r7}
 80181c8:	b083      	sub	sp, #12
 80181ca:	af00      	add	r7, sp, #0
 80181cc:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2200      	movs	r2, #0
 80181d2:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2200      	movs	r2, #0
 80181d8:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80181da:	2301      	movs	r3, #1
}
 80181dc:	4618      	mov	r0, r3
 80181de:	370c      	adds	r7, #12
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80181e8:	b480      	push	{r7}
 80181ea:	b083      	sub	sp, #12
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	460b      	mov	r3, r1
 80181f2:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80181f4:	687a      	ldr	r2, [r7, #4]
 80181f6:	79d3      	ldrb	r3, [r2, #7]
 80181f8:	78f9      	ldrb	r1, [r7, #3]
 80181fa:	f361 13c7 	bfi	r3, r1, #7, #1
 80181fe:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8018200:	2301      	movs	r3, #1
}
 8018202:	4618      	mov	r0, r3
 8018204:	370c      	adds	r7, #12
 8018206:	46bd      	mov	sp, r7
 8018208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820c:	4770      	bx	lr

0801820e <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 801820e:	b480      	push	{r7}
 8018210:	b083      	sub	sp, #12
 8018212:	af00      	add	r7, sp, #0
 8018214:	4603      	mov	r3, r0
 8018216:	6039      	str	r1, [r7, #0]
 8018218:	71fb      	strb	r3, [r7, #7]
 801821a:	4613      	mov	r3, r2
 801821c:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 801821e:	bf00      	nop
 8018220:	370c      	adds	r7, #12
 8018222:	46bd      	mov	sp, r7
 8018224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018228:	4770      	bx	lr

0801822a <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 801822a:	b480      	push	{r7}
 801822c:	b083      	sub	sp, #12
 801822e:	af00      	add	r7, sp, #0
 8018230:	6078      	str	r0, [r7, #4]
 8018232:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8018234:	2301      	movs	r3, #1
}
 8018236:	4618      	mov	r0, r3
 8018238:	370c      	adds	r7, #12
 801823a:	46bd      	mov	sp, r7
 801823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018240:	4770      	bx	lr
	...

08018244 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8018244:	b480      	push	{r7}
 8018246:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8018248:	4b06      	ldr	r3, [pc, #24]	@ (8018264 <tud_mounted+0x20>)
 801824a:	785b      	ldrb	r3, [r3, #1]
 801824c:	b2db      	uxtb	r3, r3
 801824e:	2b00      	cmp	r3, #0
 8018250:	bf14      	ite	ne
 8018252:	2301      	movne	r3, #1
 8018254:	2300      	moveq	r3, #0
 8018256:	b2db      	uxtb	r3, r3
}
 8018258:	4618      	mov	r0, r3
 801825a:	46bd      	mov	sp, r7
 801825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018260:	4770      	bx	lr
 8018262:	bf00      	nop
 8018264:	240086c8 	.word	0x240086c8

08018268 <tud_suspended>:

bool tud_suspended(void) {
 8018268:	b480      	push	{r7}
 801826a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 801826c:	4b07      	ldr	r3, [pc, #28]	@ (801828c <tud_suspended+0x24>)
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018274:	b2db      	uxtb	r3, r3
 8018276:	2b00      	cmp	r3, #0
 8018278:	bf14      	ite	ne
 801827a:	2301      	movne	r3, #1
 801827c:	2300      	moveq	r3, #0
 801827e:	b2db      	uxtb	r3, r3
}
 8018280:	4618      	mov	r0, r3
 8018282:	46bd      	mov	sp, r7
 8018284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018288:	4770      	bx	lr
 801828a:	bf00      	nop
 801828c:	240086c8 	.word	0x240086c8

08018290 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8018290:	b480      	push	{r7}
 8018292:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8018294:	4b05      	ldr	r3, [pc, #20]	@ (80182ac <tud_inited+0x1c>)
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	2bff      	cmp	r3, #255	@ 0xff
 801829a:	bf14      	ite	ne
 801829c:	2301      	movne	r3, #1
 801829e:	2300      	moveq	r3, #0
 80182a0:	b2db      	uxtb	r3, r3
}
 80182a2:	4618      	mov	r0, r3
 80182a4:	46bd      	mov	sp, r7
 80182a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182aa:	4770      	bx	lr
 80182ac:	2400000e 	.word	0x2400000e

080182b0 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b08c      	sub	sp, #48	@ 0x30
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	4603      	mov	r3, r0
 80182b8:	6039      	str	r1, [r7, #0]
 80182ba:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80182bc:	f7ff ffe8 	bl	8018290 <tud_inited>
 80182c0:	4603      	mov	r3, r0
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d001      	beq.n	80182ca <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 80182c6:	2301      	movs	r3, #1
 80182c8:	e099      	b.n	80183fe <tud_rhport_init+0x14e>
  }
  TU_ASSERT(rh_init);
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d10a      	bne.n	80182e6 <tud_rhport_init+0x36>
 80182d0:	4b4d      	ldr	r3, [pc, #308]	@ (8018408 <tud_rhport_init+0x158>)
 80182d2:	61bb      	str	r3, [r7, #24]
 80182d4:	69bb      	ldr	r3, [r7, #24]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	f003 0301 	and.w	r3, r3, #1
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d000      	beq.n	80182e2 <tud_rhport_init+0x32>
 80182e0:	be00      	bkpt	0x0000
 80182e2:	2300      	movs	r3, #0
 80182e4:	e08b      	b.n	80183fe <tud_rhport_init+0x14e>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80182e6:	2238      	movs	r2, #56	@ 0x38
 80182e8:	2100      	movs	r1, #0
 80182ea:	4848      	ldr	r0, [pc, #288]	@ (801840c <tud_rhport_init+0x15c>)
 80182ec:	f005 fadc 	bl	801d8a8 <memset>
  _usbd_queued_setup = 0;
 80182f0:	4b47      	ldr	r3, [pc, #284]	@ (8018410 <tud_rhport_init+0x160>)
 80182f2:	2200      	movs	r2, #0
 80182f4:	701a      	strb	r2, [r3, #0]
 80182f6:	4b47      	ldr	r3, [pc, #284]	@ (8018414 <tud_rhport_init+0x164>)
 80182f8:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	3304      	adds	r3, #4
 80182fe:	4618      	mov	r0, r3
 8018300:	f7ff ff61 	bl	80181c6 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8018304:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8018306:	4a44      	ldr	r2, [pc, #272]	@ (8018418 <tud_rhport_init+0x168>)
 8018308:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 801830a:	4b43      	ldr	r3, [pc, #268]	@ (8018418 <tud_rhport_init+0x168>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d10a      	bne.n	8018328 <tud_rhport_init+0x78>
 8018312:	4b3d      	ldr	r3, [pc, #244]	@ (8018408 <tud_rhport_init+0x158>)
 8018314:	61fb      	str	r3, [r7, #28]
 8018316:	69fb      	ldr	r3, [r7, #28]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f003 0301 	and.w	r3, r3, #1
 801831e:	2b00      	cmp	r3, #0
 8018320:	d000      	beq.n	8018324 <tud_rhport_init+0x74>
 8018322:	be00      	bkpt	0x0000
 8018324:	2300      	movs	r3, #0
 8018326:	e06a      	b.n	80183fe <tud_rhport_init+0x14e>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8018328:	4b3c      	ldr	r3, [pc, #240]	@ (801841c <tud_rhport_init+0x16c>)
 801832a:	2b00      	cmp	r3, #0
 801832c:	d005      	beq.n	801833a <tud_rhport_init+0x8a>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 801832e:	483c      	ldr	r0, [pc, #240]	@ (8018420 <tud_rhport_init+0x170>)
 8018330:	f3af 8000 	nop.w
 8018334:	4603      	mov	r3, r0
 8018336:	4a3b      	ldr	r2, [pc, #236]	@ (8018424 <tud_rhport_init+0x174>)
 8018338:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 801833a:	2300      	movs	r3, #0
 801833c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018340:	e039      	b.n	80183b6 <tud_rhport_init+0x106>
 8018342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018346:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8018348:	2300      	movs	r3, #0
 801834a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 801834c:	4b34      	ldr	r3, [pc, #208]	@ (8018420 <tud_rhport_init+0x170>)
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	7cfa      	ldrb	r2, [r7, #19]
 8018352:	429a      	cmp	r2, r3
 8018354:	d206      	bcs.n	8018364 <tud_rhport_init+0xb4>
    driver = &_app_driver[drvid];
 8018356:	4b33      	ldr	r3, [pc, #204]	@ (8018424 <tud_rhport_init+0x174>)
 8018358:	681a      	ldr	r2, [r3, #0]
 801835a:	7cfb      	ldrb	r3, [r7, #19]
 801835c:	015b      	lsls	r3, r3, #5
 801835e:	4413      	add	r3, r2
 8018360:	60fb      	str	r3, [r7, #12]
 8018362:	e00c      	b.n	801837e <tud_rhport_init+0xce>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018364:	4b2e      	ldr	r3, [pc, #184]	@ (8018420 <tud_rhport_init+0x170>)
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	7cfa      	ldrb	r2, [r7, #19]
 801836a:	429a      	cmp	r2, r3
 801836c:	d807      	bhi.n	801837e <tud_rhport_init+0xce>
    driver = &_usbd_driver[drvid - _app_driver_count];
 801836e:	7cfb      	ldrb	r3, [r7, #19]
 8018370:	4a2b      	ldr	r2, [pc, #172]	@ (8018420 <tud_rhport_init+0x170>)
 8018372:	7812      	ldrb	r2, [r2, #0]
 8018374:	1a9b      	subs	r3, r3, r2
 8018376:	015b      	lsls	r3, r3, #5
 8018378:	4a2b      	ldr	r2, [pc, #172]	@ (8018428 <tud_rhport_init+0x178>)
 801837a:	4413      	add	r3, r2
 801837c:	60fb      	str	r3, [r7, #12]
  return driver;
 801837e:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8018380:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8018382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018384:	2b00      	cmp	r3, #0
 8018386:	d003      	beq.n	8018390 <tud_rhport_init+0xe0>
 8018388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d10a      	bne.n	80183a6 <tud_rhport_init+0xf6>
 8018390:	4b1d      	ldr	r3, [pc, #116]	@ (8018408 <tud_rhport_init+0x158>)
 8018392:	623b      	str	r3, [r7, #32]
 8018394:	6a3b      	ldr	r3, [r7, #32]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	f003 0301 	and.w	r3, r3, #1
 801839c:	2b00      	cmp	r3, #0
 801839e:	d000      	beq.n	80183a2 <tud_rhport_init+0xf2>
 80183a0:	be00      	bkpt	0x0000
 80183a2:	2300      	movs	r3, #0
 80183a4:	e02b      	b.n	80183fe <tud_rhport_init+0x14e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80183a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183a8:	685b      	ldr	r3, [r3, #4]
 80183aa:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80183ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80183b0:	3301      	adds	r3, #1
 80183b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80183b6:	4b1a      	ldr	r3, [pc, #104]	@ (8018420 <tud_rhport_init+0x170>)
 80183b8:	781b      	ldrb	r3, [r3, #0]
 80183ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80183be:	429a      	cmp	r2, r3
 80183c0:	d9bf      	bls.n	8018342 <tud_rhport_init+0x92>
  }

  _usbd_rhport = rhport;
 80183c2:	4a1a      	ldr	r2, [pc, #104]	@ (801842c <tud_rhport_init+0x17c>)
 80183c4:	79fb      	ldrb	r3, [r7, #7]
 80183c6:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 80183c8:	79fb      	ldrb	r3, [r7, #7]
 80183ca:	6839      	ldr	r1, [r7, #0]
 80183cc:	4618      	mov	r0, r3
 80183ce:	f000 ffd7 	bl	8019380 <dcd_init>
 80183d2:	4603      	mov	r3, r0
 80183d4:	f083 0301 	eor.w	r3, r3, #1
 80183d8:	b2db      	uxtb	r3, r3
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d00a      	beq.n	80183f4 <tud_rhport_init+0x144>
 80183de:	4b0a      	ldr	r3, [pc, #40]	@ (8018408 <tud_rhport_init+0x158>)
 80183e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80183e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	f003 0301 	and.w	r3, r3, #1
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d000      	beq.n	80183f0 <tud_rhport_init+0x140>
 80183ee:	be00      	bkpt	0x0000
 80183f0:	2300      	movs	r3, #0
 80183f2:	e004      	b.n	80183fe <tud_rhport_init+0x14e>
  dcd_int_enable(rhport);
 80183f4:	79fb      	ldrb	r3, [r7, #7]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f001 f856 	bl	80194a8 <dcd_int_enable>

  return true;
 80183fc:	2301      	movs	r3, #1
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3730      	adds	r7, #48	@ 0x30
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
 8018406:	bf00      	nop
 8018408:	e000edf0 	.word	0xe000edf0
 801840c:	240086c8 	.word	0x240086c8
 8018410:	24008700 	.word	0x24008700
 8018414:	24000010 	.word	0x24000010
 8018418:	240087cc 	.word	0x240087cc
 801841c:	00000000 	.word	0x00000000
 8018420:	24008708 	.word	0x24008708
 8018424:	24008704 	.word	0x24008704
 8018428:	08031e38 	.word	0x08031e38
 801842c:	2400000e 	.word	0x2400000e

08018430 <dcd_event_handler>:
}

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8018430:	b580      	push	{r7, lr}
 8018432:	b0a0      	sub	sp, #128	@ 0x80
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	460b      	mov	r3, r1
 801843a:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 801843c:	2300      	movs	r3, #0
 801843e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	785b      	ldrb	r3, [r3, #1]
 8018446:	3b02      	subs	r3, #2
 8018448:	2b04      	cmp	r3, #4
 801844a:	f200 8173 	bhi.w	8018734 <dcd_event_handler+0x304>
 801844e:	a201      	add	r2, pc, #4	@ (adr r2, 8018454 <dcd_event_handler+0x24>)
 8018450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018454:	08018469 	.word	0x08018469
 8018458:	080184d9 	.word	0x080184d9
 801845c:	08018495 	.word	0x08018495
 8018460:	080184b7 	.word	0x080184b7
 8018464:	08018701 	.word	0x08018701
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8018468:	4aab      	ldr	r2, [pc, #684]	@ (8018718 <dcd_event_handler+0x2e8>)
 801846a:	7813      	ldrb	r3, [r2, #0]
 801846c:	f023 0301 	bic.w	r3, r3, #1
 8018470:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8018472:	4aa9      	ldr	r2, [pc, #676]	@ (8018718 <dcd_event_handler+0x2e8>)
 8018474:	7813      	ldrb	r3, [r2, #0]
 8018476:	f023 0302 	bic.w	r3, r3, #2
 801847a:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 801847c:	4ba6      	ldr	r3, [pc, #664]	@ (8018718 <dcd_event_handler+0x2e8>)
 801847e:	2200      	movs	r2, #0
 8018480:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8018482:	4aa5      	ldr	r2, [pc, #660]	@ (8018718 <dcd_event_handler+0x2e8>)
 8018484:	7813      	ldrb	r3, [r2, #0]
 8018486:	f023 0304 	bic.w	r3, r3, #4
 801848a:	7013      	strb	r3, [r2, #0]
      send = true;
 801848c:	2301      	movs	r3, #1
 801848e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8018492:	e158      	b.n	8018746 <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8018494:	4ba0      	ldr	r3, [pc, #640]	@ (8018718 <dcd_event_handler+0x2e8>)
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801849c:	b2db      	uxtb	r3, r3
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f000 814c 	beq.w	801873c <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 80184a4:	4a9c      	ldr	r2, [pc, #624]	@ (8018718 <dcd_event_handler+0x2e8>)
 80184a6:	7813      	ldrb	r3, [r2, #0]
 80184a8:	f043 0304 	orr.w	r3, r3, #4
 80184ac:	7013      	strb	r3, [r2, #0]
        send = true;
 80184ae:	2301      	movs	r3, #1
 80184b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80184b4:	e142      	b.n	801873c <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 80184b6:	4b98      	ldr	r3, [pc, #608]	@ (8018718 <dcd_event_handler+0x2e8>)
 80184b8:	781b      	ldrb	r3, [r3, #0]
 80184ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80184be:	b2db      	uxtb	r3, r3
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	f000 813d 	beq.w	8018740 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 80184c6:	4a94      	ldr	r2, [pc, #592]	@ (8018718 <dcd_event_handler+0x2e8>)
 80184c8:	7813      	ldrb	r3, [r2, #0]
 80184ca:	f023 0304 	bic.w	r3, r3, #4
 80184ce:	7013      	strb	r3, [r2, #0]
        send = true;
 80184d0:	2301      	movs	r3, #1
 80184d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80184d6:	e133      	b.n	8018740 <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80184d8:	2300      	movs	r3, #0
 80184da:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80184de:	e038      	b.n	8018552 <dcd_event_handler+0x122>
 80184e0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80184e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 80184e8:	2300      	movs	r3, #0
 80184ea:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 80184ec:	4b8b      	ldr	r3, [pc, #556]	@ (801871c <dcd_event_handler+0x2ec>)
 80184ee:	781b      	ldrb	r3, [r3, #0]
 80184f0:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80184f4:	429a      	cmp	r2, r3
 80184f6:	d207      	bcs.n	8018508 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 80184f8:	4b89      	ldr	r3, [pc, #548]	@ (8018720 <dcd_event_handler+0x2f0>)
 80184fa:	681a      	ldr	r2, [r3, #0]
 80184fc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8018500:	015b      	lsls	r3, r3, #5
 8018502:	4413      	add	r3, r2
 8018504:	673b      	str	r3, [r7, #112]	@ 0x70
 8018506:	e00e      	b.n	8018526 <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018508:	4b84      	ldr	r3, [pc, #528]	@ (801871c <dcd_event_handler+0x2ec>)
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8018510:	429a      	cmp	r2, r3
 8018512:	d808      	bhi.n	8018526 <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8018514:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8018518:	4a80      	ldr	r2, [pc, #512]	@ (801871c <dcd_event_handler+0x2ec>)
 801851a:	7812      	ldrb	r2, [r2, #0]
 801851c:	1a9b      	subs	r3, r3, r2
 801851e:	015b      	lsls	r3, r3, #5
 8018520:	4a80      	ldr	r2, [pc, #512]	@ (8018724 <dcd_event_handler+0x2f4>)
 8018522:	4413      	add	r3, r2
 8018524:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8018526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8018528:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 801852a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801852c:	2b00      	cmp	r3, #0
 801852e:	d00b      	beq.n	8018548 <dcd_event_handler+0x118>
 8018530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018532:	69db      	ldr	r3, [r3, #28]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d007      	beq.n	8018548 <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 8018538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801853a:	69db      	ldr	r3, [r3, #28]
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	7810      	ldrb	r0, [r2, #0]
 8018540:	687a      	ldr	r2, [r7, #4]
 8018542:	6852      	ldr	r2, [r2, #4]
 8018544:	4611      	mov	r1, r2
 8018546:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018548:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 801854c:	3301      	adds	r3, #1
 801854e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8018552:	4b72      	ldr	r3, [pc, #456]	@ (801871c <dcd_event_handler+0x2ec>)
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 801855a:	429a      	cmp	r2, r3
 801855c:	d9c0      	bls.n	80184e0 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 801855e:	4b6e      	ldr	r3, [pc, #440]	@ (8018718 <dcd_event_handler+0x2e8>)
 8018560:	781b      	ldrb	r3, [r3, #0]
 8018562:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018566:	b2db      	uxtb	r3, r3
 8018568:	2b00      	cmp	r3, #0
 801856a:	d05a      	beq.n	8018622 <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 801856c:	4a6a      	ldr	r2, [pc, #424]	@ (8018718 <dcd_event_handler+0x2e8>)
 801856e:	7813      	ldrb	r3, [r2, #0]
 8018570:	f023 0304 	bic.w	r3, r3, #4
 8018574:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8018576:	f107 0314 	add.w	r3, r7, #20
 801857a:	2200      	movs	r2, #0
 801857c:	601a      	str	r2, [r3, #0]
 801857e:	605a      	str	r2, [r3, #4]
 8018580:	609a      	str	r2, [r3, #8]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	781b      	ldrb	r3, [r3, #0]
 8018586:	753b      	strb	r3, [r7, #20]
 8018588:	2305      	movs	r3, #5
 801858a:	757b      	strb	r3, [r7, #21]
 801858c:	f107 0314 	add.w	r3, r7, #20
 8018590:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018592:	78fb      	ldrb	r3, [r7, #3]
 8018594:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018598:	4b63      	ldr	r3, [pc, #396]	@ (8018728 <dcd_event_handler+0x2f8>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	667b      	str	r3, [r7, #100]	@ 0x64
 801859e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80185a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80185a2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80185a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 80185aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80185ae:	f083 0301 	eor.w	r3, r3, #1
 80185b2:	b2db      	uxtb	r3, r3
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d003      	beq.n	80185c0 <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 80185b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	2000      	movs	r0, #0
 80185be:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 80185c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80185c2:	3304      	adds	r3, #4
 80185c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7ff fd96 	bl	80180f8 <tu_fifo_write>
 80185cc:	4603      	mov	r3, r0
 80185ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 80185d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80185d6:	f083 0301 	eor.w	r3, r3, #1
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d003      	beq.n	80185e8 <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 80185e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	2001      	movs	r0, #1
 80185e6:	4798      	blx	r3
  }

  return success;
 80185e8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80185ec:	f083 0301 	eor.w	r3, r3, #1
 80185f0:	b2db      	uxtb	r3, r3
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d009      	beq.n	801860a <dcd_event_handler+0x1da>
 80185f6:	4b4d      	ldr	r3, [pc, #308]	@ (801872c <dcd_event_handler+0x2fc>)
 80185f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80185fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	f003 0301 	and.w	r3, r3, #1
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00c      	beq.n	8018620 <dcd_event_handler+0x1f0>
 8018606:	be00      	bkpt	0x0000
 8018608:	e00a      	b.n	8018620 <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 801860a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801860c:	7818      	ldrb	r0, [r3, #0]
 801860e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018610:	785b      	ldrb	r3, [r3, #1]
 8018612:	4619      	mov	r1, r3
 8018614:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8018618:	461a      	mov	r2, r3
 801861a:	f7ff fdf8 	bl	801820e <tud_event_hook_cb>
  return true;
 801861e:	e000      	b.n	8018622 <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018620:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8018622:	4b3d      	ldr	r3, [pc, #244]	@ (8018718 <dcd_event_handler+0x2e8>)
 8018624:	78db      	ldrb	r3, [r3, #3]
 8018626:	b2db      	uxtb	r3, r3
 8018628:	657b      	str	r3, [r7, #84]	@ 0x54
 801862a:	2300      	movs	r3, #0
 801862c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8018630:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8018634:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018636:	fa22 f303 	lsr.w	r3, r2, r3
 801863a:	f003 0301 	and.w	r3, r3, #1
 801863e:	2b00      	cmp	r3, #0
 8018640:	bf14      	ite	ne
 8018642:	2301      	movne	r3, #1
 8018644:	2300      	moveq	r3, #0
 8018646:	b2db      	uxtb	r3, r3
 8018648:	2b00      	cmp	r3, #0
 801864a:	d07b      	beq.n	8018744 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 801864c:	f107 0308 	add.w	r3, r7, #8
 8018650:	2200      	movs	r2, #0
 8018652:	601a      	str	r2, [r3, #0]
 8018654:	605a      	str	r2, [r3, #4]
 8018656:	609a      	str	r2, [r3, #8]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	723b      	strb	r3, [r7, #8]
 801865e:	2303      	movs	r3, #3
 8018660:	727b      	strb	r3, [r7, #9]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	685b      	ldr	r3, [r3, #4]
 8018666:	60fb      	str	r3, [r7, #12]
 8018668:	f107 0308 	add.w	r3, r7, #8
 801866c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801866e:	78fb      	ldrb	r3, [r7, #3]
 8018670:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018674:	4b2c      	ldr	r3, [pc, #176]	@ (8018728 <dcd_event_handler+0x2f8>)
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	647b      	str	r3, [r7, #68]	@ 0x44
 801867a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801867c:	643b      	str	r3, [r7, #64]	@ 0x40
 801867e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8018682:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8018686:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801868a:	f083 0301 	eor.w	r3, r3, #1
 801868e:	b2db      	uxtb	r3, r3
 8018690:	2b00      	cmp	r3, #0
 8018692:	d003      	beq.n	801869c <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 8018694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	2000      	movs	r0, #0
 801869a:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 801869c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801869e:	3304      	adds	r3, #4
 80186a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7ff fd28 	bl	80180f8 <tu_fifo_write>
 80186a8:	4603      	mov	r3, r0
 80186aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 80186ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80186b2:	f083 0301 	eor.w	r3, r3, #1
 80186b6:	b2db      	uxtb	r3, r3
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d003      	beq.n	80186c4 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 80186bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	2001      	movs	r0, #1
 80186c2:	4798      	blx	r3
  return success;
 80186c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80186c8:	f083 0301 	eor.w	r3, r3, #1
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d009      	beq.n	80186e6 <dcd_event_handler+0x2b6>
 80186d2:	4b16      	ldr	r3, [pc, #88]	@ (801872c <dcd_event_handler+0x2fc>)
 80186d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80186d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	f003 0301 	and.w	r3, r3, #1
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d00c      	beq.n	80186fc <dcd_event_handler+0x2cc>
 80186e2:	be00      	bkpt	0x0000
 80186e4:	e00a      	b.n	80186fc <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80186e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80186e8:	7818      	ldrb	r0, [r3, #0]
 80186ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80186ec:	785b      	ldrb	r3, [r3, #1]
 80186ee:	4619      	mov	r1, r3
 80186f0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80186f4:	461a      	mov	r2, r3
 80186f6:	f7ff fd8a 	bl	801820e <tud_event_hook_cb>
  return true;
 80186fa:	e000      	b.n	80186fe <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80186fc:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 80186fe:	e021      	b.n	8018744 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8018700:	4b0b      	ldr	r3, [pc, #44]	@ (8018730 <dcd_event_handler+0x300>)
 8018702:	781b      	ldrb	r3, [r3, #0]
 8018704:	b2db      	uxtb	r3, r3
 8018706:	3301      	adds	r3, #1
 8018708:	b2da      	uxtb	r2, r3
 801870a:	4b09      	ldr	r3, [pc, #36]	@ (8018730 <dcd_event_handler+0x300>)
 801870c:	701a      	strb	r2, [r3, #0]
      send = true;
 801870e:	2301      	movs	r3, #1
 8018710:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8018714:	e017      	b.n	8018746 <dcd_event_handler+0x316>
 8018716:	bf00      	nop
 8018718:	240086c8 	.word	0x240086c8
 801871c:	24008708 	.word	0x24008708
 8018720:	24008704 	.word	0x24008704
 8018724:	08031e38 	.word	0x08031e38
 8018728:	240087cc 	.word	0x240087cc
 801872c:	e000edf0 	.word	0xe000edf0
 8018730:	24008700 	.word	0x24008700

    default:
      send = true;
 8018734:	2301      	movs	r3, #1
 8018736:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 801873a:	e004      	b.n	8018746 <dcd_event_handler+0x316>
      break;
 801873c:	bf00      	nop
 801873e:	e002      	b.n	8018746 <dcd_event_handler+0x316>
      break;
 8018740:	bf00      	nop
 8018742:	e000      	b.n	8018746 <dcd_event_handler+0x316>
      break;
 8018744:	bf00      	nop
  }

  if (send) {
 8018746:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801874a:	2b00      	cmp	r3, #0
 801874c:	d049      	beq.n	80187e2 <dcd_event_handler+0x3b2>
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	637b      	str	r3, [r7, #52]	@ 0x34
 8018752:	78fb      	ldrb	r3, [r7, #3]
 8018754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018758:	4b24      	ldr	r3, [pc, #144]	@ (80187ec <dcd_event_handler+0x3bc>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801875e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018762:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 801876a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801876e:	f083 0301 	eor.w	r3, r3, #1
 8018772:	b2db      	uxtb	r3, r3
 8018774:	2b00      	cmp	r3, #0
 8018776:	d003      	beq.n	8018780 <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 8018778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	2000      	movs	r0, #0
 801877e:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8018780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018782:	3304      	adds	r3, #4
 8018784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018786:	4618      	mov	r0, r3
 8018788:	f7ff fcb6 	bl	80180f8 <tu_fifo_write>
 801878c:	4603      	mov	r3, r0
 801878e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8018792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018796:	f083 0301 	eor.w	r3, r3, #1
 801879a:	b2db      	uxtb	r3, r3
 801879c:	2b00      	cmp	r3, #0
 801879e:	d003      	beq.n	80187a8 <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 80187a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	2001      	movs	r0, #1
 80187a6:	4798      	blx	r3
  return success;
 80187a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80187ac:	f083 0301 	eor.w	r3, r3, #1
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d009      	beq.n	80187ca <dcd_event_handler+0x39a>
 80187b6:	4b0e      	ldr	r3, [pc, #56]	@ (80187f0 <dcd_event_handler+0x3c0>)
 80187b8:	623b      	str	r3, [r7, #32]
 80187ba:	6a3b      	ldr	r3, [r7, #32]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	f003 0301 	and.w	r3, r3, #1
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d00c      	beq.n	80187e0 <dcd_event_handler+0x3b0>
 80187c6:	be00      	bkpt	0x0000
 80187c8:	e00a      	b.n	80187e0 <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80187ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187cc:	7818      	ldrb	r0, [r3, #0]
 80187ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187d0:	785b      	ldrb	r3, [r3, #1]
 80187d2:	4619      	mov	r1, r3
 80187d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80187d8:	461a      	mov	r2, r3
 80187da:	f7ff fd18 	bl	801820e <tud_event_hook_cb>
  return true;
 80187de:	e000      	b.n	80187e2 <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80187e0:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 80187e2:	bf00      	nop
 80187e4:	3780      	adds	r7, #128	@ 0x80
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	bf00      	nop
 80187ec:	240087cc 	.word	0x240087cc
 80187f0:	e000edf0 	.word	0xe000edf0

080187f4 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	4603      	mov	r3, r0
 80187fc:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80187fe:	79fb      	ldrb	r3, [r7, #7]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d005      	beq.n	8018810 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8018804:	4b07      	ldr	r3, [pc, #28]	@ (8018824 <usbd_int_set+0x30>)
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	4618      	mov	r0, r3
 801880a:	f000 fe4d 	bl	80194a8 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 801880e:	e004      	b.n	801881a <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8018810:	4b04      	ldr	r3, [pc, #16]	@ (8018824 <usbd_int_set+0x30>)
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	4618      	mov	r0, r3
 8018816:	f000 fe6f 	bl	80194f8 <dcd_int_disable>
}
 801881a:	bf00      	nop
 801881c:	3708      	adds	r7, #8
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}
 8018822:	bf00      	nop
 8018824:	2400000e 	.word	0x2400000e

08018828 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b08a      	sub	sp, #40	@ 0x28
 801882c:	af00      	add	r7, sp, #0
 801882e:	6039      	str	r1, [r7, #0]
 8018830:	4611      	mov	r1, r2
 8018832:	461a      	mov	r2, r3
 8018834:	4603      	mov	r3, r0
 8018836:	71fb      	strb	r3, [r7, #7]
 8018838:	460b      	mov	r3, r1
 801883a:	71bb      	strb	r3, [r7, #6]
 801883c:	4613      	mov	r3, r2
 801883e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8018840:	2300      	movs	r3, #0
 8018842:	627b      	str	r3, [r7, #36]	@ 0x24
 8018844:	e04d      	b.n	80188e2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801884a:	6a3b      	ldr	r3, [r7, #32]
 801884c:	785b      	ldrb	r3, [r3, #1]
 801884e:	2b05      	cmp	r3, #5
 8018850:	d108      	bne.n	8018864 <usbd_open_edpt_pair+0x3c>
 8018852:	6a3b      	ldr	r3, [r7, #32]
 8018854:	78db      	ldrb	r3, [r3, #3]
 8018856:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801885a:	b2db      	uxtb	r3, r3
 801885c:	461a      	mov	r2, r3
 801885e:	797b      	ldrb	r3, [r7, #5]
 8018860:	4293      	cmp	r3, r2
 8018862:	d00a      	beq.n	801887a <usbd_open_edpt_pair+0x52>
 8018864:	4b23      	ldr	r3, [pc, #140]	@ (80188f4 <usbd_open_edpt_pair+0xcc>)
 8018866:	61bb      	str	r3, [r7, #24]
 8018868:	69bb      	ldr	r3, [r7, #24]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f003 0301 	and.w	r3, r3, #1
 8018870:	2b00      	cmp	r3, #0
 8018872:	d000      	beq.n	8018876 <usbd_open_edpt_pair+0x4e>
 8018874:	be00      	bkpt	0x0000
 8018876:	2300      	movs	r3, #0
 8018878:	e038      	b.n	80188ec <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 801887a:	79fb      	ldrb	r3, [r7, #7]
 801887c:	6a39      	ldr	r1, [r7, #32]
 801887e:	4618      	mov	r0, r3
 8018880:	f000 f83a 	bl	80188f8 <usbd_edpt_open>
 8018884:	4603      	mov	r3, r0
 8018886:	f083 0301 	eor.w	r3, r3, #1
 801888a:	b2db      	uxtb	r3, r3
 801888c:	2b00      	cmp	r3, #0
 801888e:	d00a      	beq.n	80188a6 <usbd_open_edpt_pair+0x7e>
 8018890:	4b18      	ldr	r3, [pc, #96]	@ (80188f4 <usbd_open_edpt_pair+0xcc>)
 8018892:	61fb      	str	r3, [r7, #28]
 8018894:	69fb      	ldr	r3, [r7, #28]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	f003 0301 	and.w	r3, r3, #1
 801889c:	2b00      	cmp	r3, #0
 801889e:	d000      	beq.n	80188a2 <usbd_open_edpt_pair+0x7a>
 80188a0:	be00      	bkpt	0x0000
 80188a2:	2300      	movs	r3, #0
 80188a4:	e022      	b.n	80188ec <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80188a6:	6a3b      	ldr	r3, [r7, #32]
 80188a8:	789b      	ldrb	r3, [r3, #2]
 80188aa:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80188ac:	7dfb      	ldrb	r3, [r7, #23]
 80188ae:	09db      	lsrs	r3, r3, #7
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	2b01      	cmp	r3, #1
 80188b4:	d104      	bne.n	80188c0 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80188b6:	6a3b      	ldr	r3, [r7, #32]
 80188b8:	789a      	ldrb	r2, [r3, #2]
 80188ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188bc:	701a      	strb	r2, [r3, #0]
 80188be:	e003      	b.n	80188c8 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80188c0:	6a3b      	ldr	r3, [r7, #32]
 80188c2:	789a      	ldrb	r2, [r3, #2]
 80188c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188c6:	701a      	strb	r2, [r3, #0]
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80188cc:	693b      	ldr	r3, [r7, #16]
 80188ce:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	781b      	ldrb	r3, [r3, #0]
 80188d4:	461a      	mov	r2, r3
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80188da:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80188dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188de:	3301      	adds	r3, #1
 80188e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80188e2:	79bb      	ldrb	r3, [r7, #6]
 80188e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188e6:	429a      	cmp	r2, r3
 80188e8:	dbad      	blt.n	8018846 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80188ea:	2301      	movs	r3, #1
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	3728      	adds	r7, #40	@ 0x28
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}
 80188f4:	e000edf0 	.word	0xe000edf0

080188f8 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b086      	sub	sp, #24
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	4603      	mov	r3, r0
 8018900:	6039      	str	r1, [r7, #0]
 8018902:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8018904:	4b1c      	ldr	r3, [pc, #112]	@ (8018978 <usbd_edpt_open+0x80>)
 8018906:	781b      	ldrb	r3, [r3, #0]
 8018908:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	789b      	ldrb	r3, [r3, #2]
 801890e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018910:	7bfb      	ldrb	r3, [r7, #15]
 8018912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018916:	b2db      	uxtb	r3, r3
 8018918:	2b08      	cmp	r3, #8
 801891a:	d90a      	bls.n	8018932 <usbd_edpt_open+0x3a>
 801891c:	4b17      	ldr	r3, [pc, #92]	@ (801897c <usbd_edpt_open+0x84>)
 801891e:	613b      	str	r3, [r7, #16]
 8018920:	693b      	ldr	r3, [r7, #16]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	f003 0301 	and.w	r3, r3, #1
 8018928:	2b00      	cmp	r3, #0
 801892a:	d000      	beq.n	801892e <usbd_edpt_open+0x36>
 801892c:	be00      	bkpt	0x0000
 801892e:	2300      	movs	r3, #0
 8018930:	e01d      	b.n	801896e <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8018932:	4b13      	ldr	r3, [pc, #76]	@ (8018980 <usbd_edpt_open+0x88>)
 8018934:	789b      	ldrb	r3, [r3, #2]
 8018936:	2200      	movs	r2, #0
 8018938:	4619      	mov	r1, r3
 801893a:	6838      	ldr	r0, [r7, #0]
 801893c:	f001 fea0 	bl	801a680 <tu_edpt_validate>
 8018940:	4603      	mov	r3, r0
 8018942:	f083 0301 	eor.w	r3, r3, #1
 8018946:	b2db      	uxtb	r3, r3
 8018948:	2b00      	cmp	r3, #0
 801894a:	d00a      	beq.n	8018962 <usbd_edpt_open+0x6a>
 801894c:	4b0b      	ldr	r3, [pc, #44]	@ (801897c <usbd_edpt_open+0x84>)
 801894e:	617b      	str	r3, [r7, #20]
 8018950:	697b      	ldr	r3, [r7, #20]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f003 0301 	and.w	r3, r3, #1
 8018958:	2b00      	cmp	r3, #0
 801895a:	d000      	beq.n	801895e <usbd_edpt_open+0x66>
 801895c:	be00      	bkpt	0x0000
 801895e:	2300      	movs	r3, #0
 8018960:	e005      	b.n	801896e <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8018962:	79fb      	ldrb	r3, [r7, #7]
 8018964:	6839      	ldr	r1, [r7, #0]
 8018966:	4618      	mov	r0, r3
 8018968:	f000 fe32 	bl	80195d0 <dcd_edpt_open>
 801896c:	4603      	mov	r3, r0
}
 801896e:	4618      	mov	r0, r3
 8018970:	3718      	adds	r7, #24
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}
 8018976:	bf00      	nop
 8018978:	2400000e 	.word	0x2400000e
 801897c:	e000edf0 	.word	0xe000edf0
 8018980:	240086c8 	.word	0x240086c8

08018984 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8018984:	b580      	push	{r7, lr}
 8018986:	b086      	sub	sp, #24
 8018988:	af00      	add	r7, sp, #0
 801898a:	4603      	mov	r3, r0
 801898c:	460a      	mov	r2, r1
 801898e:	71fb      	strb	r3, [r7, #7]
 8018990:	4613      	mov	r3, r2
 8018992:	71bb      	strb	r3, [r7, #6]
 8018994:	79bb      	ldrb	r3, [r7, #6]
 8018996:	73bb      	strb	r3, [r7, #14]
 8018998:	7bbb      	ldrb	r3, [r7, #14]
 801899a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801899e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80189a0:	75fb      	strb	r3, [r7, #23]
 80189a2:	79bb      	ldrb	r3, [r7, #6]
 80189a4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80189a6:	7bfb      	ldrb	r3, [r7, #15]
 80189a8:	09db      	lsrs	r3, r3, #7
 80189aa:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80189ac:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80189ae:	7dfa      	ldrb	r2, [r7, #23]
 80189b0:	7dbb      	ldrb	r3, [r7, #22]
 80189b2:	0052      	lsls	r2, r2, #1
 80189b4:	4413      	add	r3, r2
 80189b6:	3320      	adds	r3, #32
 80189b8:	4a06      	ldr	r2, [pc, #24]	@ (80189d4 <usbd_edpt_claim+0x50>)
 80189ba:	4413      	add	r3, r2
 80189bc:	3306      	adds	r3, #6
 80189be:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80189c0:	2100      	movs	r1, #0
 80189c2:	6938      	ldr	r0, [r7, #16]
 80189c4:	f001 fdf7 	bl	801a5b6 <tu_edpt_claim>
 80189c8:	4603      	mov	r3, r0
}
 80189ca:	4618      	mov	r0, r3
 80189cc:	3718      	adds	r7, #24
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bd80      	pop	{r7, pc}
 80189d2:	bf00      	nop
 80189d4:	240086c8 	.word	0x240086c8

080189d8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80189d8:	b580      	push	{r7, lr}
 80189da:	b086      	sub	sp, #24
 80189dc:	af00      	add	r7, sp, #0
 80189de:	4603      	mov	r3, r0
 80189e0:	460a      	mov	r2, r1
 80189e2:	71fb      	strb	r3, [r7, #7]
 80189e4:	4613      	mov	r3, r2
 80189e6:	71bb      	strb	r3, [r7, #6]
 80189e8:	79bb      	ldrb	r3, [r7, #6]
 80189ea:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80189ec:	7bbb      	ldrb	r3, [r7, #14]
 80189ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80189f2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80189f4:	75fb      	strb	r3, [r7, #23]
 80189f6:	79bb      	ldrb	r3, [r7, #6]
 80189f8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80189fa:	7bfb      	ldrb	r3, [r7, #15]
 80189fc:	09db      	lsrs	r3, r3, #7
 80189fe:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8018a00:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8018a02:	7dfa      	ldrb	r2, [r7, #23]
 8018a04:	7dbb      	ldrb	r3, [r7, #22]
 8018a06:	0052      	lsls	r2, r2, #1
 8018a08:	4413      	add	r3, r2
 8018a0a:	3320      	adds	r3, #32
 8018a0c:	4a06      	ldr	r2, [pc, #24]	@ (8018a28 <usbd_edpt_release+0x50>)
 8018a0e:	4413      	add	r3, r2
 8018a10:	3306      	adds	r3, #6
 8018a12:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8018a14:	2100      	movs	r1, #0
 8018a16:	6938      	ldr	r0, [r7, #16]
 8018a18:	f001 fe07 	bl	801a62a <tu_edpt_release>
 8018a1c:	4603      	mov	r3, r0
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3718      	adds	r7, #24
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	240086c8 	.word	0x240086c8

08018a2c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b086      	sub	sp, #24
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	603a      	str	r2, [r7, #0]
 8018a34:	461a      	mov	r2, r3
 8018a36:	4603      	mov	r3, r0
 8018a38:	71fb      	strb	r3, [r7, #7]
 8018a3a:	460b      	mov	r3, r1
 8018a3c:	71bb      	strb	r3, [r7, #6]
 8018a3e:	4613      	mov	r3, r2
 8018a40:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8018a42:	4b32      	ldr	r3, [pc, #200]	@ (8018b0c <usbd_edpt_xfer+0xe0>)
 8018a44:	781b      	ldrb	r3, [r3, #0]
 8018a46:	71fb      	strb	r3, [r7, #7]
 8018a48:	79bb      	ldrb	r3, [r7, #6]
 8018a4a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018a4c:	7abb      	ldrb	r3, [r7, #10]
 8018a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a52:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8018a54:	75fb      	strb	r3, [r7, #23]
 8018a56:	79bb      	ldrb	r3, [r7, #6]
 8018a58:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018a5a:	7afb      	ldrb	r3, [r7, #11]
 8018a5c:	09db      	lsrs	r3, r3, #7
 8018a5e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8018a60:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8018a62:	7dfa      	ldrb	r2, [r7, #23]
 8018a64:	7dbb      	ldrb	r3, [r7, #22]
 8018a66:	492a      	ldr	r1, [pc, #168]	@ (8018b10 <usbd_edpt_xfer+0xe4>)
 8018a68:	0052      	lsls	r2, r2, #1
 8018a6a:	440a      	add	r2, r1
 8018a6c:	4413      	add	r3, r2
 8018a6e:	3320      	adds	r3, #32
 8018a70:	799b      	ldrb	r3, [r3, #6]
 8018a72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018a76:	b2db      	uxtb	r3, r3
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d00a      	beq.n	8018a92 <usbd_edpt_xfer+0x66>
 8018a7c:	4b25      	ldr	r3, [pc, #148]	@ (8018b14 <usbd_edpt_xfer+0xe8>)
 8018a7e:	60fb      	str	r3, [r7, #12]
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f003 0301 	and.w	r3, r3, #1
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d000      	beq.n	8018a8e <usbd_edpt_xfer+0x62>
 8018a8c:	be00      	bkpt	0x0000
 8018a8e:	2300      	movs	r3, #0
 8018a90:	e038      	b.n	8018b04 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8018a92:	7dfa      	ldrb	r2, [r7, #23]
 8018a94:	7dbb      	ldrb	r3, [r7, #22]
 8018a96:	491e      	ldr	r1, [pc, #120]	@ (8018b10 <usbd_edpt_xfer+0xe4>)
 8018a98:	0052      	lsls	r2, r2, #1
 8018a9a:	440a      	add	r2, r1
 8018a9c:	4413      	add	r3, r2
 8018a9e:	f103 0220 	add.w	r2, r3, #32
 8018aa2:	7993      	ldrb	r3, [r2, #6]
 8018aa4:	f043 0301 	orr.w	r3, r3, #1
 8018aa8:	7193      	strb	r3, [r2, #6]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8018aaa:	88bb      	ldrh	r3, [r7, #4]
 8018aac:	79b9      	ldrb	r1, [r7, #6]
 8018aae:	79f8      	ldrb	r0, [r7, #7]
 8018ab0:	683a      	ldr	r2, [r7, #0]
 8018ab2:	f000 fdbf 	bl	8019634 <dcd_edpt_xfer>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d001      	beq.n	8018ac0 <usbd_edpt_xfer+0x94>
    return true;
 8018abc:	2301      	movs	r3, #1
 8018abe:	e021      	b.n	8018b04 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8018ac0:	7dfa      	ldrb	r2, [r7, #23]
 8018ac2:	7dbb      	ldrb	r3, [r7, #22]
 8018ac4:	4912      	ldr	r1, [pc, #72]	@ (8018b10 <usbd_edpt_xfer+0xe4>)
 8018ac6:	0052      	lsls	r2, r2, #1
 8018ac8:	440a      	add	r2, r1
 8018aca:	4413      	add	r3, r2
 8018acc:	f103 0220 	add.w	r2, r3, #32
 8018ad0:	7993      	ldrb	r3, [r2, #6]
 8018ad2:	f023 0301 	bic.w	r3, r3, #1
 8018ad6:	7193      	strb	r3, [r2, #6]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8018ad8:	7dfa      	ldrb	r2, [r7, #23]
 8018ada:	7dbb      	ldrb	r3, [r7, #22]
 8018adc:	490c      	ldr	r1, [pc, #48]	@ (8018b10 <usbd_edpt_xfer+0xe4>)
 8018ade:	0052      	lsls	r2, r2, #1
 8018ae0:	440a      	add	r2, r1
 8018ae2:	4413      	add	r3, r2
 8018ae4:	f103 0220 	add.w	r2, r3, #32
 8018ae8:	7993      	ldrb	r3, [r2, #6]
 8018aea:	f023 0304 	bic.w	r3, r3, #4
 8018aee:	7193      	strb	r3, [r2, #6]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8018af0:	4b08      	ldr	r3, [pc, #32]	@ (8018b14 <usbd_edpt_xfer+0xe8>)
 8018af2:	613b      	str	r3, [r7, #16]
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	f003 0301 	and.w	r3, r3, #1
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d000      	beq.n	8018b02 <usbd_edpt_xfer+0xd6>
 8018b00:	be00      	bkpt	0x0000
    return false;
 8018b02:	2300      	movs	r3, #0
  }
}
 8018b04:	4618      	mov	r0, r3
 8018b06:	3718      	adds	r7, #24
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd80      	pop	{r7, pc}
 8018b0c:	2400000e 	.word	0x2400000e
 8018b10:	240086c8 	.word	0x240086c8
 8018b14:	e000edf0 	.word	0xe000edf0

08018b18 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b084      	sub	sp, #16
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	4603      	mov	r3, r0
 8018b20:	6039      	str	r1, [r7, #0]
 8018b22:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8018b24:	683b      	ldr	r3, [r7, #0]
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d001      	beq.n	8018b36 <status_stage_xact+0x1e>
 8018b32:	2300      	movs	r3, #0
 8018b34:	e000      	b.n	8018b38 <status_stage_xact+0x20>
 8018b36:	2380      	movs	r3, #128	@ 0x80
 8018b38:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8018b3a:	7bf9      	ldrb	r1, [r7, #15]
 8018b3c:	79f8      	ldrb	r0, [r7, #7]
 8018b3e:	2300      	movs	r3, #0
 8018b40:	2200      	movs	r2, #0
 8018b42:	f7ff ff73 	bl	8018a2c <usbd_edpt_xfer>
 8018b46:	4603      	mov	r3, r0
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3710      	adds	r7, #16
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}

08018b50 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	4603      	mov	r3, r0
 8018b58:	6039      	str	r1, [r7, #0]
 8018b5a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8018b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8018b8c <tud_control_status+0x3c>)
 8018b5e:	683a      	ldr	r2, [r7, #0]
 8018b60:	6810      	ldr	r0, [r2, #0]
 8018b62:	6851      	ldr	r1, [r2, #4]
 8018b64:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8018b66:	4b09      	ldr	r3, [pc, #36]	@ (8018b8c <tud_control_status+0x3c>)
 8018b68:	2200      	movs	r2, #0
 8018b6a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8018b6c:	4b07      	ldr	r3, [pc, #28]	@ (8018b8c <tud_control_status+0x3c>)
 8018b6e:	2200      	movs	r2, #0
 8018b70:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8018b72:	4b06      	ldr	r3, [pc, #24]	@ (8018b8c <tud_control_status+0x3c>)
 8018b74:	2200      	movs	r2, #0
 8018b76:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8018b78:	79fb      	ldrb	r3, [r7, #7]
 8018b7a:	6839      	ldr	r1, [r7, #0]
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f7ff ffcb 	bl	8018b18 <status_stage_xact>
 8018b82:	4603      	mov	r3, r0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	240087d0 	.word	0x240087d0

08018b90 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b088      	sub	sp, #32
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	4603      	mov	r3, r0
 8018b98:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8018b9a:	4b24      	ldr	r3, [pc, #144]	@ (8018c2c <data_stage_xact+0x9c>)
 8018b9c:	899a      	ldrh	r2, [r3, #12]
 8018b9e:	4b23      	ldr	r3, [pc, #140]	@ (8018c2c <data_stage_xact+0x9c>)
 8018ba0:	89db      	ldrh	r3, [r3, #14]
 8018ba2:	1ad3      	subs	r3, r2, r3
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	837b      	strh	r3, [r7, #26]
 8018ba8:	2340      	movs	r3, #64	@ 0x40
 8018baa:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018bac:	8b7a      	ldrh	r2, [r7, #26]
 8018bae:	8b3b      	ldrh	r3, [r7, #24]
 8018bb0:	4293      	cmp	r3, r2
 8018bb2:	bf28      	it	cs
 8018bb4:	4613      	movcs	r3, r2
 8018bb6:	b29b      	uxth	r3, r3
 8018bb8:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8018bba:	2300      	movs	r3, #0
 8018bbc:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8018bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8018c2c <data_stage_xact+0x9c>)
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018bc6:	b2db      	uxtb	r3, r3
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d01e      	beq.n	8018c0a <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8018bcc:	2380      	movs	r3, #128	@ 0x80
 8018bce:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8018bd0:	8bbb      	ldrh	r3, [r7, #28]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d019      	beq.n	8018c0a <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8018bd6:	4b15      	ldr	r3, [pc, #84]	@ (8018c2c <data_stage_xact+0x9c>)
 8018bd8:	689a      	ldr	r2, [r3, #8]
 8018bda:	8bbb      	ldrh	r3, [r7, #28]
 8018bdc:	4914      	ldr	r1, [pc, #80]	@ (8018c30 <data_stage_xact+0xa0>)
 8018bde:	6179      	str	r1, [r7, #20]
 8018be0:	2140      	movs	r1, #64	@ 0x40
 8018be2:	6139      	str	r1, [r7, #16]
 8018be4:	60fa      	str	r2, [r7, #12]
 8018be6:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8018be8:	693a      	ldr	r2, [r7, #16]
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	429a      	cmp	r2, r3
 8018bee:	d202      	bcs.n	8018bf6 <data_stage_xact+0x66>
    return -1;
 8018bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf4:	e005      	b.n	8018c02 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8018bf6:	68ba      	ldr	r2, [r7, #8]
 8018bf8:	68f9      	ldr	r1, [r7, #12]
 8018bfa:	6978      	ldr	r0, [r7, #20]
 8018bfc:	f004 fee5 	bl	801d9ca <memcpy>
  return 0;
 8018c00:	2300      	movs	r3, #0
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d001      	beq.n	8018c0a <data_stage_xact+0x7a>
 8018c06:	2300      	movs	r3, #0
 8018c08:	e00b      	b.n	8018c22 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8018c0a:	8bbb      	ldrh	r3, [r7, #28]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d001      	beq.n	8018c14 <data_stage_xact+0x84>
 8018c10:	4a07      	ldr	r2, [pc, #28]	@ (8018c30 <data_stage_xact+0xa0>)
 8018c12:	e000      	b.n	8018c16 <data_stage_xact+0x86>
 8018c14:	2200      	movs	r2, #0
 8018c16:	8bbb      	ldrh	r3, [r7, #28]
 8018c18:	7ff9      	ldrb	r1, [r7, #31]
 8018c1a:	79f8      	ldrb	r0, [r7, #7]
 8018c1c:	f7ff ff06 	bl	8018a2c <usbd_edpt_xfer>
 8018c20:	4603      	mov	r3, r0
}
 8018c22:	4618      	mov	r0, r3
 8018c24:	3720      	adds	r7, #32
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd80      	pop	{r7, pc}
 8018c2a:	bf00      	nop
 8018c2c:	240087d0 	.word	0x240087d0
 8018c30:	240087e4 	.word	0x240087e4

08018c34 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b088      	sub	sp, #32
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60b9      	str	r1, [r7, #8]
 8018c3c:	607a      	str	r2, [r7, #4]
 8018c3e:	461a      	mov	r2, r3
 8018c40:	4603      	mov	r3, r0
 8018c42:	73fb      	strb	r3, [r7, #15]
 8018c44:	4613      	mov	r3, r2
 8018c46:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8018c48:	4b30      	ldr	r3, [pc, #192]	@ (8018d0c <tud_control_xfer+0xd8>)
 8018c4a:	68ba      	ldr	r2, [r7, #8]
 8018c4c:	6810      	ldr	r0, [r2, #0]
 8018c4e:	6851      	ldr	r1, [r2, #4]
 8018c50:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8018c52:	4a2e      	ldr	r2, [pc, #184]	@ (8018d0c <tud_control_xfer+0xd8>)
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8018c58:	4b2c      	ldr	r3, [pc, #176]	@ (8018d0c <tud_control_xfer+0xd8>)
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8018c5e:	68bb      	ldr	r3, [r7, #8]
 8018c60:	88db      	ldrh	r3, [r3, #6]
 8018c62:	b29a      	uxth	r2, r3
 8018c64:	89bb      	ldrh	r3, [r7, #12]
 8018c66:	827b      	strh	r3, [r7, #18]
 8018c68:	4613      	mov	r3, r2
 8018c6a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018c6c:	8a7a      	ldrh	r2, [r7, #18]
 8018c6e:	8a3b      	ldrh	r3, [r7, #16]
 8018c70:	4293      	cmp	r3, r2
 8018c72:	bf28      	it	cs
 8018c74:	4613      	movcs	r3, r2
 8018c76:	b29a      	uxth	r2, r3
 8018c78:	4b24      	ldr	r3, [pc, #144]	@ (8018d0c <tud_control_xfer+0xd8>)
 8018c7a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8018c7c:	68bb      	ldr	r3, [r7, #8]
 8018c7e:	88db      	ldrh	r3, [r3, #6]
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d026      	beq.n	8018cd4 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8018c86:	4b21      	ldr	r3, [pc, #132]	@ (8018d0c <tud_control_xfer+0xd8>)
 8018c88:	899b      	ldrh	r3, [r3, #12]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d00d      	beq.n	8018caa <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d10a      	bne.n	8018caa <tud_control_xfer+0x76>
 8018c94:	4b1e      	ldr	r3, [pc, #120]	@ (8018d10 <tud_control_xfer+0xdc>)
 8018c96:	61bb      	str	r3, [r7, #24]
 8018c98:	69bb      	ldr	r3, [r7, #24]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	f003 0301 	and.w	r3, r3, #1
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d000      	beq.n	8018ca6 <tud_control_xfer+0x72>
 8018ca4:	be00      	bkpt	0x0000
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	e02b      	b.n	8018d02 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8018caa:	7bfb      	ldrb	r3, [r7, #15]
 8018cac:	4618      	mov	r0, r3
 8018cae:	f7ff ff6f 	bl	8018b90 <data_stage_xact>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	f083 0301 	eor.w	r3, r3, #1
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d020      	beq.n	8018d00 <tud_control_xfer+0xcc>
 8018cbe:	4b14      	ldr	r3, [pc, #80]	@ (8018d10 <tud_control_xfer+0xdc>)
 8018cc0:	617b      	str	r3, [r7, #20]
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	f003 0301 	and.w	r3, r3, #1
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d000      	beq.n	8018cd0 <tud_control_xfer+0x9c>
 8018cce:	be00      	bkpt	0x0000
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	e016      	b.n	8018d02 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8018cd4:	7bfb      	ldrb	r3, [r7, #15]
 8018cd6:	68b9      	ldr	r1, [r7, #8]
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f7ff ff1d 	bl	8018b18 <status_stage_xact>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	f083 0301 	eor.w	r3, r3, #1
 8018ce4:	b2db      	uxtb	r3, r3
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d00a      	beq.n	8018d00 <tud_control_xfer+0xcc>
 8018cea:	4b09      	ldr	r3, [pc, #36]	@ (8018d10 <tud_control_xfer+0xdc>)
 8018cec:	61fb      	str	r3, [r7, #28]
 8018cee:	69fb      	ldr	r3, [r7, #28]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	f003 0301 	and.w	r3, r3, #1
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d000      	beq.n	8018cfc <tud_control_xfer+0xc8>
 8018cfa:	be00      	bkpt	0x0000
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	e000      	b.n	8018d02 <tud_control_xfer+0xce>
  }

  return true;
 8018d00:	2301      	movs	r3, #1
}
 8018d02:	4618      	mov	r0, r3
 8018d04:	3720      	adds	r7, #32
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}
 8018d0a:	bf00      	nop
 8018d0c:	240087d0 	.word	0x240087d0
 8018d10:	e000edf0 	.word	0xe000edf0

08018d14 <__NVIC_EnableIRQ>:
{
 8018d14:	b480      	push	{r7}
 8018d16:	b083      	sub	sp, #12
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	db0b      	blt.n	8018d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018d26:	88fb      	ldrh	r3, [r7, #6]
 8018d28:	f003 021f 	and.w	r2, r3, #31
 8018d2c:	4907      	ldr	r1, [pc, #28]	@ (8018d4c <__NVIC_EnableIRQ+0x38>)
 8018d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d32:	095b      	lsrs	r3, r3, #5
 8018d34:	2001      	movs	r0, #1
 8018d36:	fa00 f202 	lsl.w	r2, r0, r2
 8018d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018d3e:	bf00      	nop
 8018d40:	370c      	adds	r7, #12
 8018d42:	46bd      	mov	sp, r7
 8018d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d48:	4770      	bx	lr
 8018d4a:	bf00      	nop
 8018d4c:	e000e100 	.word	0xe000e100

08018d50 <__NVIC_DisableIRQ>:
{
 8018d50:	b480      	push	{r7}
 8018d52:	b083      	sub	sp, #12
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	4603      	mov	r3, r0
 8018d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	db12      	blt.n	8018d88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018d62:	88fb      	ldrh	r3, [r7, #6]
 8018d64:	f003 021f 	and.w	r2, r3, #31
 8018d68:	490a      	ldr	r1, [pc, #40]	@ (8018d94 <__NVIC_DisableIRQ+0x44>)
 8018d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d6e:	095b      	lsrs	r3, r3, #5
 8018d70:	2001      	movs	r0, #1
 8018d72:	fa00 f202 	lsl.w	r2, r0, r2
 8018d76:	3320      	adds	r3, #32
 8018d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018d7c:	f3bf 8f4f 	dsb	sy
}
 8018d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018d82:	f3bf 8f6f 	isb	sy
}
 8018d86:	bf00      	nop
}
 8018d88:	bf00      	nop
 8018d8a:	370c      	adds	r7, #12
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d92:	4770      	bx	lr
 8018d94:	e000e100 	.word	0xe000e100

08018d98 <dma_setup_prepare>:
  (void) dwc2;
  // Internal DMA only
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8018d98:	b480      	push	{r7}
 8018d9a:	b085      	sub	sp, #20
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	4603      	mov	r3, r0
 8018da0:	71fb      	strb	r3, [r7, #7]
 8018da2:	79fb      	ldrb	r3, [r7, #7]
 8018da4:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018da6:	7afb      	ldrb	r3, [r7, #11]
 8018da8:	2b01      	cmp	r3, #1
 8018daa:	d901      	bls.n	8018db0 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8018dac:	2300      	movs	r3, #0
 8018dae:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018db0:	7afb      	ldrb	r3, [r7, #11]
 8018db2:	4a13      	ldr	r2, [pc, #76]	@ (8018e00 <dma_setup_prepare+0x68>)
 8018db4:	011b      	lsls	r3, r3, #4
 8018db6:	4413      	add	r3, r2
 8018db8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018dba:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018dc0:	4a10      	ldr	r2, [pc, #64]	@ (8018e04 <dma_setup_prepare+0x6c>)
 8018dc2:	4293      	cmp	r3, r2
 8018dc4:	d904      	bls.n	8018dd0 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	db10      	blt.n	8018df2 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8018e08 <dma_setup_prepare+0x70>)
 8018dd4:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8018dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8018e0c <dma_setup_prepare+0x74>)
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8018de6:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8018df0:	e000      	b.n	8018df4 <dma_setup_prepare+0x5c>
      return;
 8018df2:	bf00      	nop
}
 8018df4:	3714      	adds	r7, #20
 8018df6:	46bd      	mov	sp, r7
 8018df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfc:	4770      	bx	lr
 8018dfe:	bf00      	nop
 8018e00:	08031e58 	.word	0x08031e58
 8018e04:	4f543009 	.word	0x4f543009
 8018e08:	20080008 	.word	0x20080008
 8018e0c:	2400894c 	.word	0x2400894c

08018e10 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8018e10:	b480      	push	{r7}
 8018e12:	b091      	sub	sp, #68	@ 0x44
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	4603      	mov	r3, r0
 8018e18:	71fb      	strb	r3, [r7, #7]
 8018e1a:	460b      	mov	r3, r1
 8018e1c:	71bb      	strb	r3, [r7, #6]
 8018e1e:	4613      	mov	r3, r2
 8018e20:	80bb      	strh	r3, [r7, #4]
 8018e22:	79fb      	ldrb	r3, [r7, #7]
 8018e24:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018e26:	7e7b      	ldrb	r3, [r7, #25]
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	d901      	bls.n	8018e30 <dfifo_alloc+0x20>
    rhport = 0;
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018e30:	7e7b      	ldrb	r3, [r7, #25]
 8018e32:	4a65      	ldr	r2, [pc, #404]	@ (8018fc8 <dfifo_alloc+0x1b8>)
 8018e34:	011b      	lsls	r3, r3, #4
 8018e36:	4413      	add	r3, r2
 8018e38:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8018e3c:	79fb      	ldrb	r3, [r7, #7]
 8018e3e:	011b      	lsls	r3, r3, #4
 8018e40:	4a61      	ldr	r2, [pc, #388]	@ (8018fc8 <dfifo_alloc+0x1b8>)
 8018e42:	4413      	add	r3, r2
 8018e44:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8018e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e48:	7a1b      	ldrb	r3, [r3, #8]
 8018e4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8018e4e:	79bb      	ldrb	r3, [r7, #6]
 8018e50:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018e52:	7ebb      	ldrb	r3, [r7, #26]
 8018e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018e58:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8018e5a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8018e5e:	79bb      	ldrb	r3, [r7, #6]
 8018e60:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018e62:	7efb      	ldrb	r3, [r7, #27]
 8018e64:	09db      	lsrs	r3, r3, #7
 8018e66:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8018e68:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8018e6c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8018e70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018e74:	429a      	cmp	r2, r3
 8018e76:	d30a      	bcc.n	8018e8e <dfifo_alloc+0x7e>
 8018e78:	4b54      	ldr	r3, [pc, #336]	@ (8018fcc <dfifo_alloc+0x1bc>)
 8018e7a:	61fb      	str	r3, [r7, #28]
 8018e7c:	69fb      	ldr	r3, [r7, #28]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	f003 0301 	and.w	r3, r3, #1
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d000      	beq.n	8018e8a <dfifo_alloc+0x7a>
 8018e88:	be00      	bkpt	0x0000
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	e095      	b.n	8018fba <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8018e8e:	88bb      	ldrh	r3, [r7, #4]
 8018e90:	617b      	str	r3, [r7, #20]
 8018e92:	2304      	movs	r3, #4
 8018e94:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8018e96:	697a      	ldr	r2, [r7, #20]
 8018e98:	693b      	ldr	r3, [r7, #16]
 8018e9a:	4413      	add	r3, r2
 8018e9c:	1e5a      	subs	r2, r3, #1
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ea4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8018ea6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d12a      	bne.n	8018f04 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8018eae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	b29b      	uxth	r3, r3
 8018eb4:	81fb      	strh	r3, [r7, #14]
 8018eb6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018eba:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8018ebc:	89fb      	ldrh	r3, [r7, #14]
 8018ebe:	089b      	lsrs	r3, r3, #2
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	f103 0208 	add.w	r2, r3, #8
 8018ec6:	7b7b      	ldrb	r3, [r7, #13]
 8018ec8:	4413      	add	r3, r2
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	005b      	lsls	r3, r3, #1
 8018ece:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8018ed0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8018ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018ed8:	429a      	cmp	r2, r3
 8018eda:	d26d      	bcs.n	8018fb8 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8018edc:	4b3c      	ldr	r3, [pc, #240]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018ede:	889b      	ldrh	r3, [r3, #4]
 8018ee0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	d90a      	bls.n	8018efc <dfifo_alloc+0xec>
 8018ee6:	4b39      	ldr	r3, [pc, #228]	@ (8018fcc <dfifo_alloc+0x1bc>)
 8018ee8:	623b      	str	r3, [r7, #32]
 8018eea:	6a3b      	ldr	r3, [r7, #32]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f003 0301 	and.w	r3, r3, #1
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d000      	beq.n	8018ef8 <dfifo_alloc+0xe8>
 8018ef6:	be00      	bkpt	0x0000
 8018ef8:	2300      	movs	r3, #0
 8018efa:	e05e      	b.n	8018fba <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8018efc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f00:	625a      	str	r2, [r3, #36]	@ 0x24
 8018f02:	e059      	b.n	8018fb8 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8018f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f06:	7a5b      	ldrb	r3, [r3, #9]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d016      	beq.n	8018f3a <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8018f0c:	4b30      	ldr	r3, [pc, #192]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f0e:	799a      	ldrb	r2, [r3, #6]
 8018f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f12:	7a5b      	ldrb	r3, [r3, #9]
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d30a      	bcc.n	8018f2e <dfifo_alloc+0x11e>
 8018f18:	4b2c      	ldr	r3, [pc, #176]	@ (8018fcc <dfifo_alloc+0x1bc>)
 8018f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	f003 0301 	and.w	r3, r3, #1
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d000      	beq.n	8018f2a <dfifo_alloc+0x11a>
 8018f28:	be00      	bkpt	0x0000
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	e045      	b.n	8018fba <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8018f2e:	4b28      	ldr	r3, [pc, #160]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f30:	799b      	ldrb	r3, [r3, #6]
 8018f32:	3301      	adds	r3, #1
 8018f34:	b2da      	uxtb	r2, r3
 8018f36:	4b26      	ldr	r3, [pc, #152]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f38:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8018f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f3c:	689b      	ldr	r3, [r3, #8]
 8018f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d102      	bne.n	8018f4c <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8018f46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f48:	005b      	lsls	r3, r3, #1
 8018f4a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8018f4c:	4b20      	ldr	r3, [pc, #128]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f4e:	889b      	ldrh	r3, [r3, #4]
 8018f50:	4619      	mov	r1, r3
 8018f52:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f58:	4413      	add	r3, r2
 8018f5a:	4299      	cmp	r1, r3
 8018f5c:	d20a      	bcs.n	8018f74 <dfifo_alloc+0x164>
 8018f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8018fcc <dfifo_alloc+0x1bc>)
 8018f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f003 0301 	and.w	r3, r3, #1
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d000      	beq.n	8018f70 <dfifo_alloc+0x160>
 8018f6e:	be00      	bkpt	0x0000
 8018f70:	2300      	movs	r3, #0
 8018f72:	e022      	b.n	8018fba <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8018f74:	4b16      	ldr	r3, [pc, #88]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f76:	889a      	ldrh	r2, [r3, #4]
 8018f78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	b29a      	uxth	r2, r3
 8018f7e:	4b14      	ldr	r3, [pc, #80]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f80:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8018f82:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d108      	bne.n	8018f9c <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8018f8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f8c:	041b      	lsls	r3, r3, #16
 8018f8e:	4a10      	ldr	r2, [pc, #64]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018f90:	8892      	ldrh	r2, [r2, #4]
 8018f92:	4313      	orrs	r3, r2
 8018f94:	461a      	mov	r2, r3
 8018f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f98:	629a      	str	r2, [r3, #40]	@ 0x28
 8018f9a:	e00d      	b.n	8018fb8 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8018f9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f9e:	041b      	lsls	r3, r3, #16
 8018fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8018fd0 <dfifo_alloc+0x1c0>)
 8018fa2:	8892      	ldrh	r2, [r2, #4]
 8018fa4:	431a      	orrs	r2, r3
 8018fa6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8018faa:	3b01      	subs	r3, #1
 8018fac:	4611      	mov	r1, r2
 8018fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018fb0:	3340      	adds	r3, #64	@ 0x40
 8018fb2:	009b      	lsls	r3, r3, #2
 8018fb4:	4413      	add	r3, r2
 8018fb6:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8018fb8:	2301      	movs	r3, #1
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3744      	adds	r7, #68	@ 0x44
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc4:	4770      	bx	lr
 8018fc6:	bf00      	nop
 8018fc8:	08031e58 	.word	0x08031e58
 8018fcc:	e000edf0 	.word	0xe000edf0
 8018fd0:	24008944 	.word	0x24008944

08018fd4 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b088      	sub	sp, #32
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	4603      	mov	r3, r0
 8018fdc:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8018fde:	79fb      	ldrb	r3, [r7, #7]
 8018fe0:	011b      	lsls	r3, r3, #4
 8018fe2:	4a25      	ldr	r2, [pc, #148]	@ (8019078 <dfifo_device_init+0xa4>)
 8018fe4:	4413      	add	r3, r2
 8018fe6:	61fb      	str	r3, [r7, #28]
 8018fe8:	79fb      	ldrb	r3, [r7, #7]
 8018fea:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018fec:	7b3b      	ldrb	r3, [r7, #12]
 8018fee:	2b01      	cmp	r3, #1
 8018ff0:	d901      	bls.n	8018ff6 <dfifo_device_init+0x22>
    rhport = 0;
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018ff6:	7b3b      	ldrb	r3, [r7, #12]
 8018ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8019078 <dfifo_device_init+0xa4>)
 8018ffa:	011b      	lsls	r3, r3, #4
 8018ffc:	4413      	add	r3, r2
 8018ffe:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019000:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8019002:	69fb      	ldr	r3, [r7, #28]
 8019004:	7a1b      	ldrb	r3, [r3, #8]
 8019006:	2240      	movs	r2, #64	@ 0x40
 8019008:	81fa      	strh	r2, [r7, #14]
 801900a:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 801900c:	89fb      	ldrh	r3, [r7, #14]
 801900e:	089b      	lsrs	r3, r3, #2
 8019010:	b29b      	uxth	r3, r3
 8019012:	f103 0208 	add.w	r2, r3, #8
 8019016:	7b7b      	ldrb	r3, [r7, #13]
 8019018:	4413      	add	r3, r2
 801901a:	b29b      	uxth	r3, r3
 801901c:	005b      	lsls	r3, r3, #1
 801901e:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8019020:	461a      	mov	r2, r3
 8019022:	69bb      	ldr	r3, [r7, #24]
 8019024:	625a      	str	r2, [r3, #36]	@ 0x24
 8019026:	69bb      	ldr	r3, [r7, #24]
 8019028:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801902a:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 801902c:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 801902e:	69fb      	ldr	r3, [r7, #28]
 8019030:	68db      	ldr	r3, [r3, #12]
 8019032:	089b      	lsrs	r3, r3, #2
 8019034:	b29a      	uxth	r2, r3
 8019036:	4b11      	ldr	r3, [pc, #68]	@ (801907c <dfifo_device_init+0xa8>)
 8019038:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 801903a:	7dfb      	ldrb	r3, [r7, #23]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d009      	beq.n	8019054 <dfifo_device_init+0x80>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8019040:	4b0e      	ldr	r3, [pc, #56]	@ (801907c <dfifo_device_init+0xa8>)
 8019042:	889a      	ldrh	r2, [r3, #4]
 8019044:	69fb      	ldr	r3, [r7, #28]
 8019046:	7a1b      	ldrb	r3, [r3, #8]
 8019048:	005b      	lsls	r3, r3, #1
 801904a:	b29b      	uxth	r3, r3
 801904c:	1ad3      	subs	r3, r2, r3
 801904e:	b29a      	uxth	r2, r3
 8019050:	4b0a      	ldr	r3, [pc, #40]	@ (801907c <dfifo_device_init+0xa8>)
 8019052:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8019054:	4b09      	ldr	r3, [pc, #36]	@ (801907c <dfifo_device_init+0xa8>)
 8019056:	889b      	ldrh	r3, [r3, #4]
 8019058:	461a      	mov	r2, r3
 801905a:	4613      	mov	r3, r2
 801905c:	041b      	lsls	r3, r3, #16
 801905e:	441a      	add	r2, r3
 8019060:	69bb      	ldr	r3, [r7, #24]
 8019062:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8019064:	79fb      	ldrb	r3, [r7, #7]
 8019066:	2240      	movs	r2, #64	@ 0x40
 8019068:	2180      	movs	r1, #128	@ 0x80
 801906a:	4618      	mov	r0, r3
 801906c:	f7ff fed0 	bl	8018e10 <dfifo_alloc>
}
 8019070:	bf00      	nop
 8019072:	3720      	adds	r7, #32
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	08031e58 	.word	0x08031e58
 801907c:	24008944 	.word	0x24008944

08019080 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8019080:	b480      	push	{r7}
 8019082:	b08b      	sub	sp, #44	@ 0x2c
 8019084:	af00      	add	r7, sp, #0
 8019086:	4603      	mov	r3, r0
 8019088:	6039      	str	r1, [r7, #0]
 801908a:	71fb      	strb	r3, [r7, #7]
 801908c:	79fb      	ldrb	r3, [r7, #7]
 801908e:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019090:	7c7b      	ldrb	r3, [r7, #17]
 8019092:	2b01      	cmp	r3, #1
 8019094:	d901      	bls.n	801909a <edpt_activate+0x1a>
    rhport = 0;
 8019096:	2300      	movs	r3, #0
 8019098:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801909a:	7c7b      	ldrb	r3, [r7, #17]
 801909c:	4a45      	ldr	r2, [pc, #276]	@ (80191b4 <edpt_activate+0x134>)
 801909e:	011b      	lsls	r3, r3, #4
 80190a0:	4413      	add	r3, r2
 80190a2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80190a4:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 80190a6:	683b      	ldr	r3, [r7, #0]
 80190a8:	789b      	ldrb	r3, [r3, #2]
 80190aa:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80190ac:	7cbb      	ldrb	r3, [r7, #18]
 80190ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80190b2:	b2db      	uxtb	r3, r3
 80190b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	789b      	ldrb	r3, [r3, #2]
 80190bc:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80190be:	7cfb      	ldrb	r3, [r7, #19]
 80190c0:	09db      	lsrs	r3, r3, #7
 80190c2:	b2db      	uxtb	r3, r3
 80190c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80190c8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80190cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80190d0:	0052      	lsls	r2, r2, #1
 80190d2:	4413      	add	r3, r2
 80190d4:	011b      	lsls	r3, r3, #4
 80190d6:	4a38      	ldr	r2, [pc, #224]	@ (80191b8 <edpt_activate+0x138>)
 80190d8:	4413      	add	r3, r2
 80190da:	61fb      	str	r3, [r7, #28]
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	889b      	ldrh	r3, [r3, #4]
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80190ea:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 80190ec:	69fb      	ldr	r3, [r7, #28]
 80190ee:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	799a      	ldrb	r2, [r3, #6]
 80190f4:	69fb      	ldr	r3, [r7, #28]
 80190f6:	731a      	strb	r2, [r3, #12]
  // Endpoint control
  union {
    uint32_t value;
    dwc2_depctl_t bm;
  } depctl;
  depctl.value = 0;
 80190f8:	2300      	movs	r3, #0
 80190fa:	60fb      	str	r3, [r7, #12]

  depctl.bm.mps = xfer->max_size;
 80190fc:	69fb      	ldr	r3, [r7, #28]
 80190fe:	895b      	ldrh	r3, [r3, #10]
 8019100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019104:	b29a      	uxth	r2, r3
 8019106:	89bb      	ldrh	r3, [r7, #12]
 8019108:	f362 030a 	bfi	r3, r2, #0, #11
 801910c:	81bb      	strh	r3, [r7, #12]
  depctl.bm.active = 1;
 801910e:	7b7b      	ldrb	r3, [r7, #13]
 8019110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019114:	737b      	strb	r3, [r7, #13]
  depctl.bm.type = p_endpoint_desc->bmAttributes.xfer;
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	78db      	ldrb	r3, [r3, #3]
 801911a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801911e:	b2da      	uxtb	r2, r3
 8019120:	7bbb      	ldrb	r3, [r7, #14]
 8019122:	f362 0383 	bfi	r3, r2, #2, #2
 8019126:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	78db      	ldrb	r3, [r3, #3]
 801912c:	f003 0303 	and.w	r3, r3, #3
 8019130:	b2db      	uxtb	r3, r3
 8019132:	2b01      	cmp	r3, #1
 8019134:	d003      	beq.n	801913e <edpt_activate+0xbe>
    depctl.bm.set_data0_iso_even = 1;
 8019136:	7bfb      	ldrb	r3, [r7, #15]
 8019138:	f043 0310 	orr.w	r3, r3, #16
 801913c:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 801913e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019142:	2b01      	cmp	r3, #1
 8019144:	d108      	bne.n	8019158 <edpt_activate+0xd8>
    depctl.bm.tx_fifo_num = epnum;
 8019146:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801914a:	f003 030f 	and.w	r3, r3, #15
 801914e:	b2da      	uxtb	r2, r3
 8019150:	89fb      	ldrh	r3, [r7, #14]
 8019152:	f362 1389 	bfi	r3, r2, #6, #4
 8019156:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8019158:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801915c:	2b01      	cmp	r3, #1
 801915e:	bf14      	ite	ne
 8019160:	2301      	movne	r3, #1
 8019162:	2300      	moveq	r3, #0
 8019164:	b2db      	uxtb	r3, r3
 8019166:	461a      	mov	r2, r3
 8019168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801916c:	0112      	lsls	r2, r2, #4
 801916e:	4413      	add	r3, r2
 8019170:	3348      	adds	r3, #72	@ 0x48
 8019172:	015b      	lsls	r3, r3, #5
 8019174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019176:	4413      	add	r3, r2
 8019178:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 801917a:	68fa      	ldr	r2, [r7, #12]
 801917c:	69bb      	ldr	r3, [r7, #24]
 801917e:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8019180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019182:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8019186:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801918a:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 801918e:	2901      	cmp	r1, #1
 8019190:	d101      	bne.n	8019196 <edpt_activate+0x116>
 8019192:	2100      	movs	r1, #0
 8019194:	e000      	b.n	8019198 <edpt_activate+0x118>
 8019196:	2110      	movs	r1, #16
 8019198:	440b      	add	r3, r1
 801919a:	2101      	movs	r1, #1
 801919c:	fa01 f303 	lsl.w	r3, r1, r3
 80191a0:	431a      	orrs	r2, r3
 80191a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191a4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 80191a8:	bf00      	nop
 80191aa:	372c      	adds	r7, #44	@ 0x2c
 80191ac:	46bd      	mov	sp, r7
 80191ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b2:	4770      	bx	lr
 80191b4:	08031e58 	.word	0x08031e58
 80191b8:	24008824 	.word	0x24008824

080191bc <edpt_schedule_packets>:
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}

static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80191bc:	b580      	push	{r7, lr}
 80191be:	b08e      	sub	sp, #56	@ 0x38
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	4603      	mov	r3, r0
 80191c4:	71fb      	strb	r3, [r7, #7]
 80191c6:	460b      	mov	r3, r1
 80191c8:	71bb      	strb	r3, [r7, #6]
 80191ca:	4613      	mov	r3, r2
 80191cc:	717b      	strb	r3, [r7, #5]
 80191ce:	79fb      	ldrb	r3, [r7, #7]
 80191d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80191d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80191d8:	2b01      	cmp	r3, #1
 80191da:	d902      	bls.n	80191e2 <edpt_schedule_packets+0x26>
    rhport = 0;
 80191dc:	2300      	movs	r3, #0
 80191de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80191e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80191e6:	4a63      	ldr	r2, [pc, #396]	@ (8019374 <edpt_schedule_packets+0x1b8>)
 80191e8:	011b      	lsls	r3, r3, #4
 80191ea:	4413      	add	r3, r2
 80191ec:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80191ee:	633b      	str	r3, [r7, #48]	@ 0x30
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 80191f0:	79ba      	ldrb	r2, [r7, #6]
 80191f2:	797b      	ldrb	r3, [r7, #5]
 80191f4:	0052      	lsls	r2, r2, #1
 80191f6:	4413      	add	r3, r2
 80191f8:	011b      	lsls	r3, r3, #4
 80191fa:	4a5f      	ldr	r2, [pc, #380]	@ (8019378 <edpt_schedule_packets+0x1bc>)
 80191fc:	4413      	add	r3, r2
 80191fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8019200:	797b      	ldrb	r3, [r7, #5]
 8019202:	2b01      	cmp	r3, #1
 8019204:	bf14      	ite	ne
 8019206:	2301      	movne	r3, #1
 8019208:	2300      	moveq	r3, #0
 801920a:	b2db      	uxtb	r3, r3
 801920c:	461a      	mov	r2, r3
 801920e:	79bb      	ldrb	r3, [r7, #6]
 8019210:	0112      	lsls	r2, r2, #4
 8019212:	4413      	add	r3, r2
 8019214:	3348      	adds	r3, #72	@ 0x48
 8019216:	015b      	lsls	r3, r3, #5
 8019218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801921a:	4413      	add	r3, r2
 801921c:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 801921e:	79bb      	ldrb	r3, [r7, #6]
 8019220:	2b00      	cmp	r3, #0
 8019222:	d11c      	bne.n	801925e <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8019224:	797b      	ldrb	r3, [r7, #5]
 8019226:	4a55      	ldr	r2, [pc, #340]	@ (801937c <edpt_schedule_packets+0x1c0>)
 8019228:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801922c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801922e:	895b      	ldrh	r3, [r3, #10]
 8019230:	843a      	strh	r2, [r7, #32]
 8019232:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8019234:	8c3a      	ldrh	r2, [r7, #32]
 8019236:	8bfb      	ldrh	r3, [r7, #30]
 8019238:	4293      	cmp	r3, r2
 801923a:	bf28      	it	cs
 801923c:	4613      	movcs	r3, r2
 801923e:	b29b      	uxth	r3, r3
 8019240:	86bb      	strh	r3, [r7, #52]	@ 0x34
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8019242:	797b      	ldrb	r3, [r7, #5]
 8019244:	4a4d      	ldr	r2, [pc, #308]	@ (801937c <edpt_schedule_packets+0x1c0>)
 8019246:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801924a:	797b      	ldrb	r3, [r7, #5]
 801924c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801924e:	1a8a      	subs	r2, r1, r2
 8019250:	b291      	uxth	r1, r2
 8019252:	4a4a      	ldr	r2, [pc, #296]	@ (801937c <edpt_schedule_packets+0x1c0>)
 8019254:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8019258:	2301      	movs	r3, #1
 801925a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801925c:	e014      	b.n	8019288 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 801925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019260:	891b      	ldrh	r3, [r3, #8]
 8019262:	86bb      	strh	r3, [r7, #52]	@ 0x34
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8019264:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019268:	8952      	ldrh	r2, [r2, #10]
 801926a:	61bb      	str	r3, [r7, #24]
 801926c:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 801926e:	69ba      	ldr	r2, [r7, #24]
 8019270:	697b      	ldr	r3, [r7, #20]
 8019272:	4413      	add	r3, r2
 8019274:	1e5a      	subs	r2, r3, #1
 8019276:	697b      	ldr	r3, [r7, #20]
 8019278:	fbb2 f3f3 	udiv	r3, r2, r3
 801927c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (num_packets == 0) {
 801927e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019280:	2b00      	cmp	r3, #0
 8019282:	d101      	bne.n	8019288 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8019284:	2301      	movs	r3, #1
 8019286:	86fb      	strh	r3, [r7, #54]	@ 0x36
  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  union {
    uint32_t value;
    dwc2_ep_tsize_t bm;
  } deptsiz;
  deptsiz.value = 0;
 8019288:	2300      	movs	r3, #0
 801928a:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.xfer_size =  total_bytes;
 801928c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801928e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	f362 0312 	bfi	r3, r2, #0, #19
 8019298:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.packet_count = num_packets;
 801929a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801929c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80192a0:	b29a      	uxth	r2, r3
 80192a2:	89fb      	ldrh	r3, [r7, #14]
 80192a4:	f362 03cc 	bfi	r3, r2, #3, #10
 80192a8:	81fb      	strh	r3, [r7, #14]

  dep->tsiz = deptsiz.value;
 80192aa:	68fa      	ldr	r2, [r7, #12]
 80192ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192ae:	611a      	str	r2, [r3, #16]
  // control
  union {
    dwc2_depctl_t bm;
    uint32_t value;
  } depctl;
  depctl.value = dep->ctl;
 80192b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	60bb      	str	r3, [r7, #8]

  depctl.bm.clear_nak = 1;
 80192b6:	7afb      	ldrb	r3, [r7, #11]
 80192b8:	f043 0304 	orr.w	r3, r3, #4
 80192bc:	72fb      	strb	r3, [r7, #11]
  depctl.bm.enable = 1;
 80192be:	7afb      	ldrb	r3, [r7, #11]
 80192c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80192c4:	72fb      	strb	r3, [r7, #11]
  if (depctl.bm.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 80192c6:	7abb      	ldrb	r3, [r7, #10]
 80192c8:	f003 030c 	and.w	r3, r3, #12
 80192cc:	b2db      	uxtb	r3, r3
 80192ce:	2b04      	cmp	r3, #4
 80192d0:	d118      	bne.n	8019304 <edpt_schedule_packets+0x148>
 80192d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192d4:	7b1b      	ldrb	r3, [r3, #12]
 80192d6:	2b01      	cmp	r3, #1
 80192d8:	d114      	bne.n	8019304 <edpt_schedule_packets+0x148>
    const uint32_t odd_now = (dwc2->dsts_bm.frame_number & 1u);
 80192da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192dc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80192e0:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	f003 0301 	and.w	r3, r3, #1
 80192ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (odd_now) {
 80192ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d004      	beq.n	80192fc <edpt_schedule_packets+0x140>
      depctl.bm.set_data0_iso_even = 1;
 80192f2:	7afb      	ldrb	r3, [r7, #11]
 80192f4:	f043 0310 	orr.w	r3, r3, #16
 80192f8:	72fb      	strb	r3, [r7, #11]
 80192fa:	e003      	b.n	8019304 <edpt_schedule_packets+0x148>
    } else {
      depctl.bm.set_data1_iso_odd = 1;
 80192fc:	7afb      	ldrb	r3, [r7, #11]
 80192fe:	f043 0320 	orr.w	r3, r3, #32
 8019302:	72fb      	strb	r3, [r7, #11]
 8019304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019306:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019308:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 801930a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if(is_dma) {
 801930e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019312:	2b00      	cmp	r3, #0
 8019314:	d015      	beq.n	8019342 <edpt_schedule_packets+0x186>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8019316:	797b      	ldrb	r3, [r7, #5]
 8019318:	2b01      	cmp	r3, #1
 801931a:	d109      	bne.n	8019330 <edpt_schedule_packets+0x174>
 801931c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801931e:	2b00      	cmp	r3, #0
 8019320:	d006      	beq.n	8019330 <edpt_schedule_packets+0x174>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8019322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019328:	4611      	mov	r1, r2
 801932a:	4618      	mov	r0, r3
 801932c:	f7fe ff7d 	bl	801822a <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8019330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	461a      	mov	r2, r3
 8019336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019338:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 801933a:	68ba      	ldr	r2, [r7, #8]
 801933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801933e:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8019340:	e013      	b.n	801936a <edpt_schedule_packets+0x1ae>
    dep->diepctl = depctl.value; // enable endpoint
 8019342:	68ba      	ldr	r2, [r7, #8]
 8019344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019346:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8019348:	797b      	ldrb	r3, [r7, #5]
 801934a:	2b01      	cmp	r3, #1
 801934c:	d10d      	bne.n	801936a <edpt_schedule_packets+0x1ae>
 801934e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019350:	2b00      	cmp	r3, #0
 8019352:	d00a      	beq.n	801936a <edpt_schedule_packets+0x1ae>
      dwc2->diepempmsk |= (1 << epnum);
 8019354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019356:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801935a:	79ba      	ldrb	r2, [r7, #6]
 801935c:	2101      	movs	r1, #1
 801935e:	fa01 f202 	lsl.w	r2, r1, r2
 8019362:	431a      	orrs	r2, r3
 8019364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019366:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 801936a:	bf00      	nop
 801936c:	3738      	adds	r7, #56	@ 0x38
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}
 8019372:	bf00      	nop
 8019374:	08031e58 	.word	0x08031e58
 8019378:	24008824 	.word	0x24008824
 801937c:	24008944 	.word	0x24008944

08019380 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8019380:	b580      	push	{r7, lr}
 8019382:	b08a      	sub	sp, #40	@ 0x28
 8019384:	af00      	add	r7, sp, #0
 8019386:	4603      	mov	r3, r0
 8019388:	6039      	str	r1, [r7, #0]
 801938a:	71fb      	strb	r3, [r7, #7]
 801938c:	79fb      	ldrb	r3, [r7, #7]
 801938e:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019390:	7bfb      	ldrb	r3, [r7, #15]
 8019392:	2b01      	cmp	r3, #1
 8019394:	d901      	bls.n	801939a <dcd_init+0x1a>
    rhport = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801939a:	7bfb      	ldrb	r3, [r7, #15]
 801939c:	4a3e      	ldr	r2, [pc, #248]	@ (8019498 <dcd_init+0x118>)
 801939e:	011b      	lsls	r3, r3, #4
 80193a0:	4413      	add	r3, r2
 80193a2:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80193a4:	623b      	str	r3, [r7, #32]

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 80193a6:	2208      	movs	r2, #8
 80193a8:	2100      	movs	r1, #0
 80193aa:	483c      	ldr	r0, [pc, #240]	@ (801949c <dcd_init+0x11c>)
 80193ac:	f004 fa7c 	bl	801d8a8 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80193b0:	2101      	movs	r1, #1
 80193b2:	6a38      	ldr	r0, [r7, #32]
 80193b4:	f000 ffbc 	bl	801a330 <dwc2_core_is_highspeed>
 80193b8:	4603      	mov	r3, r0
 80193ba:	77fb      	strb	r3, [r7, #31]
 80193bc:	6a3b      	ldr	r3, [r7, #32]
 80193be:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80193c0:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80193c2:	77bb      	strb	r3, [r7, #30]
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 80193c4:	7fba      	ldrb	r2, [r7, #30]
 80193c6:	7ff9      	ldrb	r1, [r7, #31]
 80193c8:	79fb      	ldrb	r3, [r7, #7]
 80193ca:	4618      	mov	r0, r3
 80193cc:	f000 ffcc 	bl	801a368 <dwc2_core_init>
 80193d0:	4603      	mov	r3, r0
 80193d2:	f083 0301 	eor.w	r3, r3, #1
 80193d6:	b2db      	uxtb	r3, r3
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d00a      	beq.n	80193f2 <dcd_init+0x72>
 80193dc:	4b30      	ldr	r3, [pc, #192]	@ (80194a0 <dcd_init+0x120>)
 80193de:	617b      	str	r3, [r7, #20]
 80193e0:	697b      	ldr	r3, [r7, #20]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	f003 0301 	and.w	r3, r3, #1
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d000      	beq.n	80193ee <dcd_init+0x6e>
 80193ec:	be00      	bkpt	0x0000
 80193ee:	2300      	movs	r3, #0
 80193f0:	e04d      	b.n	801948e <dcd_init+0x10e>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 80193f2:	6a3b      	ldr	r3, [r7, #32]
 80193f4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80193f8:	f023 0303 	bic.w	r3, r3, #3
 80193fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_highspeed) {
 80193fe:	7ffb      	ldrb	r3, [r7, #31]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d00b      	beq.n	801941c <dcd_init+0x9c>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8019404:	6a3b      	ldr	r3, [r7, #32]
 8019406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019408:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801940c:	b2db      	uxtb	r3, r3
 801940e:	2b02      	cmp	r3, #2
 8019410:	d108      	bne.n	8019424 <dcd_init+0xa4>
      dcfg |= DCFG_XCVRDLY;
 8019412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019418:	627b      	str	r3, [r7, #36]	@ 0x24
 801941a:	e003      	b.n	8019424 <dcd_init+0xa4>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 801941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801941e:	f043 0303 	orr.w	r3, r3, #3
 8019422:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8019424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019426:	f043 0304 	orr.w	r3, r3, #4
 801942a:	627b      	str	r3, [r7, #36]	@ 0x24
  dwc2->dcfg = dcfg;
 801942c:	6a3b      	ldr	r3, [r7, #32]
 801942e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019430:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8019434:	79fb      	ldrb	r3, [r7, #7]
 8019436:	4618      	mov	r0, r3
 8019438:	f000 f8a8 	bl	801958c <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 801943c:	6a3b      	ldr	r3, [r7, #32]
 801943e:	68db      	ldr	r3, [r3, #12]
 8019440:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8019444:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8019448:	6a3b      	ldr	r3, [r7, #32]
 801944a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 801944c:	6a3b      	ldr	r3, [r7, #32]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8019454:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8019458:	6a3b      	ldr	r3, [r7, #32]
 801945a:	601a      	str	r2, [r3, #0]

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 801945c:	6a3b      	ldr	r3, [r7, #32]
 801945e:	699a      	ldr	r2, [r3, #24]
 8019460:	4b10      	ldr	r3, [pc, #64]	@ (80194a4 <dcd_init+0x124>)
 8019462:	4313      	orrs	r3, r2
 8019464:	6a3a      	ldr	r2, [r7, #32]
 8019466:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8019468:	6a3b      	ldr	r3, [r7, #32]
 801946a:	689b      	ldr	r3, [r3, #8]
 801946c:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 801946e:	69bb      	ldr	r3, [r7, #24]
 8019470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019474:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8019476:	69bb      	ldr	r3, [r7, #24]
 8019478:	f043 0301 	orr.w	r3, r3, #1
 801947c:	61bb      	str	r3, [r7, #24]
  dwc2->gahbcfg = gahbcfg;
 801947e:	6a3b      	ldr	r3, [r7, #32]
 8019480:	69ba      	ldr	r2, [r7, #24]
 8019482:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8019484:	79fb      	ldrb	r3, [r7, #7]
 8019486:	4618      	mov	r0, r3
 8019488:	f000 f85e 	bl	8019548 <dcd_connect>
  return true;
 801948c:	2301      	movs	r3, #1
}
 801948e:	4618      	mov	r0, r3
 8019490:	3728      	adds	r7, #40	@ 0x28
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
 8019496:	bf00      	nop
 8019498:	08031e58 	.word	0x08031e58
 801949c:	24008944 	.word	0x24008944
 80194a0:	e000edf0 	.word	0xe000edf0
 80194a4:	80003804 	.word	0x80003804

080194a8 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b084      	sub	sp, #16
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	4603      	mov	r3, r0
 80194b0:	71fb      	strb	r3, [r7, #7]
 80194b2:	79fb      	ldrb	r3, [r7, #7]
 80194b4:	73fb      	strb	r3, [r7, #15]
 80194b6:	2301      	movs	r3, #1
 80194b8:	73bb      	strb	r3, [r7, #14]
 80194ba:	2301      	movs	r3, #1
 80194bc:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80194be:	7bfb      	ldrb	r3, [r7, #15]
 80194c0:	4a0c      	ldr	r2, [pc, #48]	@ (80194f4 <dcd_int_enable+0x4c>)
 80194c2:	011b      	lsls	r3, r3, #4
 80194c4:	4413      	add	r3, r2
 80194c6:	3304      	adds	r3, #4
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 80194cc:	7b7b      	ldrb	r3, [r7, #13]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d005      	beq.n	80194de <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 80194d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ff fc1c 	bl	8018d14 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 80194dc:	e004      	b.n	80194e8 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 80194de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7ff fc34 	bl	8018d50 <__NVIC_DisableIRQ>
}
 80194e8:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80194ea:	bf00      	nop
 80194ec:	3710      	adds	r7, #16
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}
 80194f2:	bf00      	nop
 80194f4:	08031e58 	.word	0x08031e58

080194f8 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b084      	sub	sp, #16
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	4603      	mov	r3, r0
 8019500:	71fb      	strb	r3, [r7, #7]
 8019502:	79fb      	ldrb	r3, [r7, #7]
 8019504:	73fb      	strb	r3, [r7, #15]
 8019506:	2301      	movs	r3, #1
 8019508:	73bb      	strb	r3, [r7, #14]
 801950a:	2300      	movs	r3, #0
 801950c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 801950e:	7bfb      	ldrb	r3, [r7, #15]
 8019510:	4a0c      	ldr	r2, [pc, #48]	@ (8019544 <dcd_int_disable+0x4c>)
 8019512:	011b      	lsls	r3, r3, #4
 8019514:	4413      	add	r3, r2
 8019516:	3304      	adds	r3, #4
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 801951c:	7b7b      	ldrb	r3, [r7, #13]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d005      	beq.n	801952e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8019522:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019526:	4618      	mov	r0, r3
 8019528:	f7ff fbf4 	bl	8018d14 <__NVIC_EnableIRQ>
}
 801952c:	e004      	b.n	8019538 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 801952e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019532:	4618      	mov	r0, r3
 8019534:	f7ff fc0c 	bl	8018d50 <__NVIC_DisableIRQ>
}
 8019538:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 801953a:	bf00      	nop
 801953c:	3710      	adds	r7, #16
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
 8019542:	bf00      	nop
 8019544:	08031e58 	.word	0x08031e58

08019548 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8019548:	b480      	push	{r7}
 801954a:	b085      	sub	sp, #20
 801954c:	af00      	add	r7, sp, #0
 801954e:	4603      	mov	r3, r0
 8019550:	71fb      	strb	r3, [r7, #7]
 8019552:	79fb      	ldrb	r3, [r7, #7]
 8019554:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019556:	7afb      	ldrb	r3, [r7, #11]
 8019558:	2b01      	cmp	r3, #1
 801955a:	d901      	bls.n	8019560 <dcd_connect+0x18>
    rhport = 0;
 801955c:	2300      	movs	r3, #0
 801955e:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019560:	7afb      	ldrb	r3, [r7, #11]
 8019562:	4a09      	ldr	r2, [pc, #36]	@ (8019588 <dcd_connect+0x40>)
 8019564:	011b      	lsls	r3, r3, #4
 8019566:	4413      	add	r3, r2
 8019568:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801956a:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8019572:	f023 0202 	bic.w	r2, r3, #2
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 801957c:	bf00      	nop
 801957e:	3714      	adds	r7, #20
 8019580:	46bd      	mov	sp, r7
 8019582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019586:	4770      	bx	lr
 8019588:	08031e58 	.word	0x08031e58

0801958c <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 801958c:	b480      	push	{r7}
 801958e:	b085      	sub	sp, #20
 8019590:	af00      	add	r7, sp, #0
 8019592:	4603      	mov	r3, r0
 8019594:	71fb      	strb	r3, [r7, #7]
 8019596:	79fb      	ldrb	r3, [r7, #7]
 8019598:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801959a:	7afb      	ldrb	r3, [r7, #11]
 801959c:	2b01      	cmp	r3, #1
 801959e:	d901      	bls.n	80195a4 <dcd_disconnect+0x18>
    rhport = 0;
 80195a0:	2300      	movs	r3, #0
 80195a2:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80195a4:	7afb      	ldrb	r3, [r7, #11]
 80195a6:	4a09      	ldr	r2, [pc, #36]	@ (80195cc <dcd_disconnect+0x40>)
 80195a8:	011b      	lsls	r3, r3, #4
 80195aa:	4413      	add	r3, r2
 80195ac:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80195ae:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80195b6:	f043 0202 	orr.w	r2, r3, #2
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80195c0:	bf00      	nop
 80195c2:	3714      	adds	r7, #20
 80195c4:	46bd      	mov	sp, r7
 80195c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ca:	4770      	bx	lr
 80195cc:	08031e58 	.word	0x08031e58

080195d0 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	4603      	mov	r3, r0
 80195d8:	6039      	str	r1, [r7, #0]
 80195da:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	7899      	ldrb	r1, [r3, #2]
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	60bb      	str	r3, [r7, #8]
 80195e4:	68bb      	ldr	r3, [r7, #8]
 80195e6:	889b      	ldrh	r3, [r3, #4]
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	79fb      	ldrb	r3, [r7, #7]
 80195f2:	4618      	mov	r0, r3
 80195f4:	f7ff fc0c 	bl	8018e10 <dfifo_alloc>
 80195f8:	4603      	mov	r3, r0
 80195fa:	f083 0301 	eor.w	r3, r3, #1
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	2b00      	cmp	r3, #0
 8019602:	d00a      	beq.n	801961a <dcd_edpt_open+0x4a>
 8019604:	4b0a      	ldr	r3, [pc, #40]	@ (8019630 <dcd_edpt_open+0x60>)
 8019606:	60fb      	str	r3, [r7, #12]
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	f003 0301 	and.w	r3, r3, #1
 8019610:	2b00      	cmp	r3, #0
 8019612:	d000      	beq.n	8019616 <dcd_edpt_open+0x46>
 8019614:	be00      	bkpt	0x0000
 8019616:	2300      	movs	r3, #0
 8019618:	e005      	b.n	8019626 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 801961a:	79fb      	ldrb	r3, [r7, #7]
 801961c:	6839      	ldr	r1, [r7, #0]
 801961e:	4618      	mov	r0, r3
 8019620:	f7ff fd2e 	bl	8019080 <edpt_activate>
  return true;
 8019624:	2301      	movs	r3, #1
}
 8019626:	4618      	mov	r0, r3
 8019628:	3710      	adds	r7, #16
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}
 801962e:	bf00      	nop
 8019630:	e000edf0 	.word	0xe000edf0

08019634 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8019634:	b580      	push	{r7, lr}
 8019636:	b086      	sub	sp, #24
 8019638:	af00      	add	r7, sp, #0
 801963a:	603a      	str	r2, [r7, #0]
 801963c:	461a      	mov	r2, r3
 801963e:	4603      	mov	r3, r0
 8019640:	71fb      	strb	r3, [r7, #7]
 8019642:	460b      	mov	r3, r1
 8019644:	71bb      	strb	r3, [r7, #6]
 8019646:	4613      	mov	r3, r2
 8019648:	80bb      	strh	r3, [r7, #4]
 801964a:	79bb      	ldrb	r3, [r7, #6]
 801964c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801964e:	7bbb      	ldrb	r3, [r7, #14]
 8019650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019654:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019656:	75fb      	strb	r3, [r7, #23]
 8019658:	79bb      	ldrb	r3, [r7, #6]
 801965a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801965c:	7bfb      	ldrb	r3, [r7, #15]
 801965e:	09db      	lsrs	r3, r3, #7
 8019660:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8019662:	75bb      	strb	r3, [r7, #22]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8019664:	7dfa      	ldrb	r2, [r7, #23]
 8019666:	7dbb      	ldrb	r3, [r7, #22]
 8019668:	0052      	lsls	r2, r2, #1
 801966a:	4413      	add	r3, r2
 801966c:	011b      	lsls	r3, r3, #4
 801966e:	4a0f      	ldr	r2, [pc, #60]	@ (80196ac <dcd_edpt_xfer+0x78>)
 8019670:	4413      	add	r3, r2
 8019672:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 8019674:	693b      	ldr	r3, [r7, #16]
 8019676:	683a      	ldr	r2, [r7, #0]
 8019678:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 801967a:	693b      	ldr	r3, [r7, #16]
 801967c:	2200      	movs	r2, #0
 801967e:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 8019680:	693b      	ldr	r3, [r7, #16]
 8019682:	88ba      	ldrh	r2, [r7, #4]
 8019684:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 8019686:	7dfb      	ldrb	r3, [r7, #23]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d104      	bne.n	8019696 <dcd_edpt_xfer+0x62>
    _dcd_data.ep0_pending[dir] = total_bytes;
 801968c:	7dbb      	ldrb	r3, [r7, #22]
 801968e:	4908      	ldr	r1, [pc, #32]	@ (80196b0 <dcd_edpt_xfer+0x7c>)
 8019690:	88ba      	ldrh	r2, [r7, #4]
 8019692:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir);
 8019696:	7dba      	ldrb	r2, [r7, #22]
 8019698:	7df9      	ldrb	r1, [r7, #23]
 801969a:	79fb      	ldrb	r3, [r7, #7]
 801969c:	4618      	mov	r0, r3
 801969e:	f7ff fd8d 	bl	80191bc <edpt_schedule_packets>

  return true;
 80196a2:	2301      	movs	r3, #1
}
 80196a4:	4618      	mov	r0, r3
 80196a6:	3718      	adds	r7, #24
 80196a8:	46bd      	mov	sp, r7
 80196aa:	bd80      	pop	{r7, pc}
 80196ac:	24008824 	.word	0x24008824
 80196b0:	24008944 	.word	0x24008944

080196b4 <handle_bus_reset>:
//--------------------------------------------------------------------
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
static void handle_bus_reset(uint8_t rhport) {
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b08a      	sub	sp, #40	@ 0x28
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	4603      	mov	r3, r0
 80196bc:	71fb      	strb	r3, [r7, #7]
 80196be:	79fb      	ldrb	r3, [r7, #7]
 80196c0:	77bb      	strb	r3, [r7, #30]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80196c2:	7fbb      	ldrb	r3, [r7, #30]
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	d901      	bls.n	80196cc <handle_bus_reset+0x18>
    rhport = 0;
 80196c8:	2300      	movs	r3, #0
 80196ca:	77bb      	strb	r3, [r7, #30]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80196cc:	7fbb      	ldrb	r3, [r7, #30]
 80196ce:	4a63      	ldr	r2, [pc, #396]	@ (801985c <handle_bus_reset+0x1a8>)
 80196d0:	011b      	lsls	r3, r3, #4
 80196d2:	4413      	add	r3, r2
 80196d4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80196d6:	623b      	str	r3, [r7, #32]
  const uint8_t ep_count =  DWC2_EP_COUNT(dwc2);
 80196d8:	6a3b      	ldr	r3, [r7, #32]
 80196da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80196dc:	f3c3 2383 	ubfx	r3, r3, #10, #4
 80196e0:	b2db      	uxtb	r3, r3
 80196e2:	3301      	adds	r3, #1
 80196e4:	77fb      	strb	r3, [r7, #31]

  tu_memclr(xfer_status, sizeof(xfer_status));
 80196e6:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80196ea:	2100      	movs	r1, #0
 80196ec:	485c      	ldr	r0, [pc, #368]	@ (8019860 <handle_bus_reset+0x1ac>)
 80196ee:	f004 f8db 	bl	801d8a8 <memset>

  _dcd_data.sof_en = false;
 80196f2:	4b5c      	ldr	r3, [pc, #368]	@ (8019864 <handle_bus_reset+0x1b0>)
 80196f4:	2200      	movs	r2, #0
 80196f6:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 80196f8:	4b5a      	ldr	r3, [pc, #360]	@ (8019864 <handle_bus_reset+0x1b0>)
 80196fa:	2200      	movs	r2, #0
 80196fc:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80196fe:	2300      	movs	r3, #0
 8019700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019704:	e014      	b.n	8019730 <handle_bus_reset+0x7c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8019706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801970a:	6a3a      	ldr	r2, [r7, #32]
 801970c:	3358      	adds	r3, #88	@ 0x58
 801970e:	015b      	lsls	r3, r3, #5
 8019710:	4413      	add	r3, r2
 8019712:	681a      	ldr	r2, [r3, #0]
 8019714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019718:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 801971c:	6a39      	ldr	r1, [r7, #32]
 801971e:	3358      	adds	r3, #88	@ 0x58
 8019720:	015b      	lsls	r3, r3, #5
 8019722:	440b      	add	r3, r1
 8019724:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8019726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801972a:	3301      	adds	r3, #1
 801972c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019730:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019734:	7ffb      	ldrb	r3, [r7, #31]
 8019736:	429a      	cmp	r2, r3
 8019738:	d3e5      	bcc.n	8019706 <handle_bus_reset+0x52>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 801973a:	2300      	movs	r3, #0
 801973c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019740:	e01d      	b.n	801977e <handle_bus_reset+0xca>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8019742:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019746:	6a3a      	ldr	r2, [r7, #32]
 8019748:	3348      	adds	r3, #72	@ 0x48
 801974a:	015b      	lsls	r3, r3, #5
 801974c:	4413      	add	r3, r2
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	da0f      	bge.n	8019774 <handle_bus_reset+0xc0>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8019754:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019758:	6a3a      	ldr	r2, [r7, #32]
 801975a:	3348      	adds	r3, #72	@ 0x48
 801975c:	015b      	lsls	r3, r3, #5
 801975e:	4413      	add	r3, r2
 8019760:	681a      	ldr	r2, [r3, #0]
 8019762:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019766:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 801976a:	6a39      	ldr	r1, [r7, #32]
 801976c:	3348      	adds	r3, #72	@ 0x48
 801976e:	015b      	lsls	r3, r3, #5
 8019770:	440b      	add	r3, r1
 8019772:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8019774:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019778:	3301      	adds	r3, #1
 801977a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801977e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8019782:	7ffb      	ldrb	r3, [r7, #31]
 8019784:	429a      	cmp	r2, r3
 8019786:	d3dc      	bcc.n	8019742 <handle_bus_reset+0x8e>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8019788:	6a3b      	ldr	r3, [r7, #32]
 801978a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 801978e:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8019792:	6a3b      	ldr	r3, [r7, #32]
 8019794:	2209      	movs	r2, #9
 8019796:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 801979a:	6a3b      	ldr	r3, [r7, #32]
 801979c:	2209      	movs	r2, #9
 801979e:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 80197a2:	6a3b      	ldr	r3, [r7, #32]
 80197a4:	613b      	str	r3, [r7, #16]
 80197a6:	2310      	movs	r3, #16
 80197a8:	73fb      	strb	r3, [r7, #15]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80197aa:	7bfb      	ldrb	r3, [r7, #15]
 80197ac:	019b      	lsls	r3, r3, #6
 80197ae:	f043 0220 	orr.w	r2, r3, #32
 80197b2:	693b      	ldr	r3, [r7, #16]
 80197b4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80197b6:	bf00      	nop
 80197b8:	693b      	ldr	r3, [r7, #16]
 80197ba:	691b      	ldr	r3, [r3, #16]
 80197bc:	f003 0320 	and.w	r3, r3, #32
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d1f9      	bne.n	80197b8 <handle_bus_reset+0x104>
}
 80197c4:	bf00      	nop
 80197c6:	6a3b      	ldr	r3, [r7, #32]
 80197c8:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80197ca:	697b      	ldr	r3, [r7, #20]
 80197cc:	2210      	movs	r2, #16
 80197ce:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80197d0:	bf00      	nop
 80197d2:	697b      	ldr	r3, [r7, #20]
 80197d4:	691b      	ldr	r3, [r3, #16]
 80197d6:	f003 0310 	and.w	r3, r3, #16
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d1f9      	bne.n	80197d2 <handle_bus_reset+0x11e>
}
 80197de:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 80197e0:	79fb      	ldrb	r3, [r7, #7]
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7ff fbf6 	bl	8018fd4 <dfifo_device_init>

  // 5. Reset device address
  dwc2->dcfg_bm.address = 0;
 80197e8:	6a3a      	ldr	r2, [r7, #32]
 80197ea:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 80197ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80197f2:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 80197f6:	6a3b      	ldr	r3, [r7, #32]
 80197f8:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80197fc:	f023 0203 	bic.w	r2, r3, #3
 8019800:	6a3b      	ldr	r3, [r7, #32]
 8019802:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8019806:	6a3b      	ldr	r3, [r7, #32]
 8019808:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 801980c:	f023 0203 	bic.w	r2, r3, #3
 8019810:	6a3b      	ldr	r3, [r7, #32]
 8019812:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8019816:	4b12      	ldr	r3, [pc, #72]	@ (8019860 <handle_bus_reset+0x1ac>)
 8019818:	2240      	movs	r2, #64	@ 0x40
 801981a:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 801981c:	4b10      	ldr	r3, [pc, #64]	@ (8019860 <handle_bus_reset+0x1ac>)
 801981e:	2240      	movs	r2, #64	@ 0x40
 8019820:	835a      	strh	r2, [r3, #26]
 8019822:	6a3b      	ldr	r3, [r7, #32]
 8019824:	61bb      	str	r3, [r7, #24]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019826:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8019828:	2b00      	cmp	r3, #0
 801982a:	d004      	beq.n	8019836 <handle_bus_reset+0x182>
    dma_setup_prepare(rhport);
 801982c:	79fb      	ldrb	r3, [r7, #7]
 801982e:	4618      	mov	r0, r3
 8019830:	f7ff fab2 	bl	8018d98 <dma_setup_prepare>
 8019834:	e007      	b.n	8019846 <handle_bus_reset+0x192>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8019836:	6a3b      	ldr	r3, [r7, #32]
 8019838:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 801983c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8019840:	6a3b      	ldr	r3, [r7, #32]
 8019842:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8019846:	6a3b      	ldr	r3, [r7, #32]
 8019848:	699b      	ldr	r3, [r3, #24]
 801984a:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 801984e:	6a3b      	ldr	r3, [r7, #32]
 8019850:	619a      	str	r2, [r3, #24]
}
 8019852:	bf00      	nop
 8019854:	3728      	adds	r7, #40	@ 0x28
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
 801985a:	bf00      	nop
 801985c:	08031e58 	.word	0x08031e58
 8019860:	24008824 	.word	0x24008824
 8019864:	24008944 	.word	0x24008944

08019868 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8019868:	b580      	push	{r7, lr}
 801986a:	b088      	sub	sp, #32
 801986c:	af00      	add	r7, sp, #0
 801986e:	4603      	mov	r3, r0
 8019870:	71fb      	strb	r3, [r7, #7]
 8019872:	79fb      	ldrb	r3, [r7, #7]
 8019874:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019876:	7dfb      	ldrb	r3, [r7, #23]
 8019878:	2b01      	cmp	r3, #1
 801987a:	d901      	bls.n	8019880 <handle_enum_done+0x18>
    rhport = 0;
 801987c:	2300      	movs	r3, #0
 801987e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019880:	7dfb      	ldrb	r3, [r7, #23]
 8019882:	4a18      	ldr	r2, [pc, #96]	@ (80198e4 <handle_enum_done+0x7c>)
 8019884:	011b      	lsls	r3, r3, #4
 8019886:	4413      	add	r3, r2
 8019888:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 801988a:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dwc2->dsts_bm.enum_speed) {
 801988c:	69bb      	ldr	r3, [r7, #24]
 801988e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8019892:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8019896:	b2db      	uxtb	r3, r3
 8019898:	2b00      	cmp	r3, #0
 801989a:	d002      	beq.n	80198a2 <handle_enum_done+0x3a>
 801989c:	2b02      	cmp	r3, #2
 801989e:	d003      	beq.n	80198a8 <handle_enum_done+0x40>
 80198a0:	e005      	b.n	80198ae <handle_enum_done+0x46>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 80198a2:	2302      	movs	r3, #2
 80198a4:	77fb      	strb	r3, [r7, #31]
    break;
 80198a6:	e005      	b.n	80198b4 <handle_enum_done+0x4c>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 80198a8:	2301      	movs	r3, #1
 80198aa:	77fb      	strb	r3, [r7, #31]
    break;
 80198ac:	e002      	b.n	80198b4 <handle_enum_done+0x4c>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 80198ae:	2300      	movs	r3, #0
 80198b0:	77fb      	strb	r3, [r7, #31]
    break;
 80198b2:	bf00      	nop
 80198b4:	79fb      	ldrb	r3, [r7, #7]
 80198b6:	75bb      	strb	r3, [r7, #22]
 80198b8:	7ffb      	ldrb	r3, [r7, #31]
 80198ba:	757b      	strb	r3, [r7, #21]
 80198bc:	2301      	movs	r3, #1
 80198be:	753b      	strb	r3, [r7, #20]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 80198c0:	7dbb      	ldrb	r3, [r7, #22]
 80198c2:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_BUS_RESET;
 80198c4:	2301      	movs	r3, #1
 80198c6:	727b      	strb	r3, [r7, #9]
  event.bus_reset.speed = speed;
 80198c8:	7d7b      	ldrb	r3, [r7, #21]
 80198ca:	733b      	strb	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 80198cc:	7d3a      	ldrb	r2, [r7, #20]
 80198ce:	f107 0308 	add.w	r3, r7, #8
 80198d2:	4611      	mov	r1, r2
 80198d4:	4618      	mov	r0, r3
 80198d6:	f7fe fdab 	bl	8018430 <dcd_event_handler>
}
 80198da:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 80198dc:	bf00      	nop
 80198de:	3720      	adds	r7, #32
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}
 80198e4:	08031e58 	.word	0x08031e58

080198e8 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b08c      	sub	sp, #48	@ 0x30
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	4603      	mov	r3, r0
 80198f0:	71fb      	strb	r3, [r7, #7]
 80198f2:	79fb      	ldrb	r3, [r7, #7]
 80198f4:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80198f6:	7cfb      	ldrb	r3, [r7, #19]
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	d901      	bls.n	8019900 <handle_rxflvl_irq+0x18>
    rhport = 0;
 80198fc:	2300      	movs	r3, #0
 80198fe:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019900:	7cfb      	ldrb	r3, [r7, #19]
 8019902:	4a48      	ldr	r2, [pc, #288]	@ (8019a24 <handle_rxflvl_irq+0x13c>)
 8019904:	011b      	lsls	r3, r3, #4
 8019906:	4413      	add	r3, r2
 8019908:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801990a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 801990c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801990e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019912:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp_bm = dwc2->grxstsp_bm;
 8019914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019916:	6a1b      	ldr	r3, [r3, #32]
 8019918:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp_bm.ep_ch_num;
 801991a:	7b3b      	ldrb	r3, [r7, #12]
 801991c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019920:	b2db      	uxtb	r3, r3
 8019922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8019926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801992a:	3358      	adds	r3, #88	@ 0x58
 801992c:	015b      	lsls	r3, r3, #5
 801992e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019930:	4413      	add	r3, r2
 8019932:	623b      	str	r3, [r7, #32]

  switch (grxstsp_bm.packet_status) {
 8019934:	7bbb      	ldrb	r3, [r7, #14]
 8019936:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801993a:	b2db      	uxtb	r3, r3
 801993c:	3b01      	subs	r3, #1
 801993e:	2b05      	cmp	r3, #5
 8019940:	d868      	bhi.n	8019a14 <handle_rxflvl_irq+0x12c>
 8019942:	a201      	add	r2, pc, #4	@ (adr r2, 8019948 <handle_rxflvl_irq+0x60>)
 8019944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019948:	08019a15 	.word	0x08019a15
 801994c:	08019987 	.word	0x08019987
 8019950:	08019a15 	.word	0x08019a15
 8019954:	08019979 	.word	0x08019979
 8019958:	08019a15 	.word	0x08019a15
 801995c:	08019961 	.word	0x08019961
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8019960:	4b31      	ldr	r3, [pc, #196]	@ (8019a28 <handle_rxflvl_irq+0x140>)
 8019962:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8019964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019966:	681a      	ldr	r2, [r3, #0]
 8019968:	69fb      	ldr	r3, [r7, #28]
 801996a:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 801996c:	69fb      	ldr	r3, [r7, #28]
 801996e:	3304      	adds	r3, #4
 8019970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019972:	6812      	ldr	r2, [r2, #0]
 8019974:	601a      	str	r2, [r3, #0]
      break;
 8019976:	e050      	b.n	8019a1a <handle_rxflvl_irq+0x132>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8019978:	6a3b      	ldr	r3, [r7, #32]
 801997a:	691b      	ldr	r3, [r3, #16]
 801997c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8019980:	6a3b      	ldr	r3, [r7, #32]
 8019982:	611a      	str	r2, [r3, #16]
      break;
 8019984:	e049      	b.n	8019a1a <handle_rxflvl_irq+0x132>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp_bm.byte_count;
 8019986:	89bb      	ldrh	r3, [r7, #12]
 8019988:	f3c3 130a 	ubfx	r3, r3, #4, #11
 801998c:	b29b      	uxth	r3, r3
 801998e:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8019990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019994:	015b      	lsls	r3, r3, #5
 8019996:	4a25      	ldr	r2, [pc, #148]	@ (8019a2c <handle_rxflvl_irq+0x144>)
 8019998:	4413      	add	r3, r2
 801999a:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 801999c:	8b7b      	ldrh	r3, [r7, #26]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d03a      	beq.n	8019a18 <handle_rxflvl_irq+0x130>
        // Read packet off RxFIFO
        if (xfer->ff) {
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d007      	beq.n	80199ba <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 80199aa:	697b      	ldr	r3, [r7, #20]
 80199ac:	685b      	ldr	r3, [r3, #4]
 80199ae:	8b7a      	ldrh	r2, [r7, #26]
 80199b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80199b2:	4618      	mov	r0, r3
 80199b4:	f7fe fbf5 	bl	80181a2 <tu_fifo_write_n_const_addr_full_words>
 80199b8:	e00c      	b.n	80199d4 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 80199ba:	697b      	ldr	r3, [r7, #20]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	8b7a      	ldrh	r2, [r7, #26]
 80199c0:	4619      	mov	r1, r3
 80199c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80199c4:	f000 fd5c 	bl	801a480 <dfifo_read_packet>
          xfer->buffer += byte_count;
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	681a      	ldr	r2, [r3, #0]
 80199cc:	8b7b      	ldrh	r3, [r7, #26]
 80199ce:	441a      	add	r2, r3
 80199d0:	697b      	ldr	r3, [r7, #20]
 80199d2:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	895b      	ldrh	r3, [r3, #10]
 80199d8:	8b7a      	ldrh	r2, [r7, #26]
 80199da:	429a      	cmp	r2, r3
 80199dc:	d21c      	bcs.n	8019a18 <handle_rxflvl_irq+0x130>
          xfer->total_len -= epout->tsiz_bm.xfer_size;
 80199de:	6a3b      	ldr	r3, [r7, #32]
 80199e0:	691b      	ldr	r3, [r3, #16]
 80199e2:	f3c3 0112 	ubfx	r1, r3, #0, #19
 80199e6:	697b      	ldr	r3, [r7, #20]
 80199e8:	891a      	ldrh	r2, [r3, #8]
 80199ea:	b28b      	uxth	r3, r1
 80199ec:	1ad3      	subs	r3, r2, r3
 80199ee:	b29a      	uxth	r2, r3
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 80199f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d10d      	bne.n	8019a18 <handle_rxflvl_irq+0x130>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 80199fc:	697b      	ldr	r3, [r7, #20]
 80199fe:	891a      	ldrh	r2, [r3, #8]
 8019a00:	4b0b      	ldr	r3, [pc, #44]	@ (8019a30 <handle_rxflvl_irq+0x148>)
 8019a02:	881b      	ldrh	r3, [r3, #0]
 8019a04:	1ad3      	subs	r3, r2, r3
 8019a06:	b29a      	uxth	r2, r3
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8019a0c:	4b08      	ldr	r3, [pc, #32]	@ (8019a30 <handle_rxflvl_irq+0x148>)
 8019a0e:	2200      	movs	r2, #0
 8019a10:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8019a12:	e001      	b.n	8019a18 <handle_rxflvl_irq+0x130>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8019a14:	bf00      	nop
 8019a16:	e000      	b.n	8019a1a <handle_rxflvl_irq+0x132>
      break;
 8019a18:	bf00      	nop
  }
}
 8019a1a:	bf00      	nop
 8019a1c:	3730      	adds	r7, #48	@ 0x30
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bd80      	pop	{r7, pc}
 8019a22:	bf00      	nop
 8019a24:	08031e58 	.word	0x08031e58
 8019a28:	2400894c 	.word	0x2400894c
 8019a2c:	24008824 	.word	0x24008824
 8019a30:	24008944 	.word	0x24008944

08019a34 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b08e      	sub	sp, #56	@ 0x38
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	603a      	str	r2, [r7, #0]
 8019a3e:	71fb      	strb	r3, [r7, #7]
 8019a40:	460b      	mov	r3, r1
 8019a42:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8019a44:	783b      	ldrb	r3, [r7, #0]
 8019a46:	f003 0308 	and.w	r3, r3, #8
 8019a4a:	b2db      	uxtb	r3, r3
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d01c      	beq.n	8019a8a <handle_epout_slave+0x56>
 8019a50:	79fb      	ldrb	r3, [r7, #7]
 8019a52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8019a56:	4b34      	ldr	r3, [pc, #208]	@ (8019b28 <handle_epout_slave+0xf4>)
 8019a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019a60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019a64:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8019a66:	2306      	movs	r3, #6
 8019a68:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8019a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019a6c:	f107 0318 	add.w	r3, r7, #24
 8019a70:	6810      	ldr	r0, [r2, #0]
 8019a72:	6851      	ldr	r1, [r2, #4]
 8019a74:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8019a76:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8019a7a:	f107 0314 	add.w	r3, r7, #20
 8019a7e:	4611      	mov	r1, r2
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7fe fcd5 	bl	8018430 <dcd_event_handler>
}
 8019a86:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8019a88:	e04a      	b.n	8019b20 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8019a8a:	783b      	ldrb	r3, [r7, #0]
 8019a8c:	f003 0301 	and.w	r3, r3, #1
 8019a90:	b2db      	uxtb	r3, r3
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d044      	beq.n	8019b20 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8019a96:	783b      	ldrb	r3, [r7, #0]
 8019a98:	f003 0320 	and.w	r3, r3, #32
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d13e      	bne.n	8019b20 <handle_epout_slave+0xec>
 8019aa2:	787b      	ldrb	r3, [r7, #1]
 8019aa4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019aa8:	b2db      	uxtb	r3, r3
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d138      	bne.n	8019b20 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8019aae:	79bb      	ldrb	r3, [r7, #6]
 8019ab0:	015b      	lsls	r3, r3, #5
 8019ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8019b2c <handle_epout_slave+0xf8>)
 8019ab4:	4413      	add	r3, r2
 8019ab6:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8019ab8:	79bb      	ldrb	r3, [r7, #6]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d10a      	bne.n	8019ad4 <handle_epout_slave+0xa0>
 8019abe:	4b1c      	ldr	r3, [pc, #112]	@ (8019b30 <handle_epout_slave+0xfc>)
 8019ac0:	881b      	ldrh	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d006      	beq.n	8019ad4 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8019ac6:	79b9      	ldrb	r1, [r7, #6]
 8019ac8:	79fb      	ldrb	r3, [r7, #7]
 8019aca:	2200      	movs	r2, #0
 8019acc:	4618      	mov	r0, r3
 8019ace:	f7ff fb75 	bl	80191bc <edpt_schedule_packets>
 8019ad2:	e025      	b.n	8019b20 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8019ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ad6:	891b      	ldrh	r3, [r3, #8]
 8019ad8:	461a      	mov	r2, r3
 8019ada:	79fb      	ldrb	r3, [r7, #7]
 8019adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8019ae0:	79bb      	ldrb	r3, [r7, #6]
 8019ae2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8019ae6:	627a      	str	r2, [r7, #36]	@ 0x24
 8019ae8:	2300      	movs	r3, #0
 8019aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019aee:	2301      	movs	r3, #1
 8019af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019af4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8019af8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8019afa:	2307      	movs	r3, #7
 8019afc:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8019afe:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8019b02:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8019b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b06:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8019b08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019b0c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8019b0e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8019b12:	f107 0308 	add.w	r3, r7, #8
 8019b16:	4611      	mov	r1, r2
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7fe fc89 	bl	8018430 <dcd_event_handler>
}
 8019b1e:	bf00      	nop
      }
    }
  }
}
 8019b20:	3738      	adds	r7, #56	@ 0x38
 8019b22:	46bd      	mov	sp, r7
 8019b24:	bd80      	pop	{r7, pc}
 8019b26:	bf00      	nop
 8019b28:	2400894c 	.word	0x2400894c
 8019b2c:	24008824 	.word	0x24008824
 8019b30:	24008944 	.word	0x24008944

08019b34 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b090      	sub	sp, #64	@ 0x40
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	4603      	mov	r3, r0
 8019b3c:	603a      	str	r2, [r7, #0]
 8019b3e:	71fb      	strb	r3, [r7, #7]
 8019b40:	460b      	mov	r3, r1
 8019b42:	71bb      	strb	r3, [r7, #6]
 8019b44:	79fb      	ldrb	r3, [r7, #7]
 8019b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019b4e:	2b01      	cmp	r3, #1
 8019b50:	d902      	bls.n	8019b58 <handle_epin_slave+0x24>
    rhport = 0;
 8019b52:	2300      	movs	r3, #0
 8019b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019b58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8019cd4 <handle_epin_slave+0x1a0>)
 8019b5e:	011b      	lsls	r3, r3, #4
 8019b60:	4413      	add	r3, r2
 8019b62:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8019b66:	79bb      	ldrb	r3, [r7, #6]
 8019b68:	3348      	adds	r3, #72	@ 0x48
 8019b6a:	015b      	lsls	r3, r3, #5
 8019b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019b6e:	4413      	add	r3, r2
 8019b70:	637b      	str	r3, [r7, #52]	@ 0x34
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8019b72:	79bb      	ldrb	r3, [r7, #6]
 8019b74:	015b      	lsls	r3, r3, #5
 8019b76:	3310      	adds	r3, #16
 8019b78:	4a57      	ldr	r2, [pc, #348]	@ (8019cd8 <handle_epin_slave+0x1a4>)
 8019b7a:	4413      	add	r3, r2
 8019b7c:	633b      	str	r3, [r7, #48]	@ 0x30

  if (diepint_bm.xfer_complete) {
 8019b7e:	783b      	ldrb	r3, [r7, #0]
 8019b80:	f003 0301 	and.w	r3, r3, #1
 8019b84:	b2db      	uxtb	r3, r3
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d033      	beq.n	8019bf2 <handle_epin_slave+0xbe>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8019b8a:	79bb      	ldrb	r3, [r7, #6]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d10a      	bne.n	8019ba6 <handle_epin_slave+0x72>
 8019b90:	4b52      	ldr	r3, [pc, #328]	@ (8019cdc <handle_epin_slave+0x1a8>)
 8019b92:	885b      	ldrh	r3, [r3, #2]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d006      	beq.n	8019ba6 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8019b98:	79b9      	ldrb	r1, [r7, #6]
 8019b9a:	79fb      	ldrb	r3, [r7, #7]
 8019b9c:	2201      	movs	r2, #1
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7ff fb0c 	bl	80191bc <edpt_schedule_packets>
 8019ba4:	e025      	b.n	8019bf2 <handle_epin_slave+0xbe>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8019ba6:	79bb      	ldrb	r3, [r7, #6]
 8019ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019bac:	b2d9      	uxtb	r1, r3
 8019bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bb0:	891b      	ldrh	r3, [r3, #8]
 8019bb2:	461a      	mov	r2, r3
 8019bb4:	79fb      	ldrb	r3, [r7, #7]
 8019bb6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8019bba:	460b      	mov	r3, r1
 8019bbc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8019bc0:	61fa      	str	r2, [r7, #28]
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	76fb      	strb	r3, [r7, #27]
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	76bb      	strb	r3, [r7, #26]
  event.rhport = rhport;
 8019bca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019bce:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8019bd0:	2307      	movs	r3, #7
 8019bd2:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8019bd4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019bd8:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8019bda:	69fb      	ldr	r3, [r7, #28]
 8019bdc:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8019bde:	7efb      	ldrb	r3, [r7, #27]
 8019be0:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8019be2:	7eba      	ldrb	r2, [r7, #26]
 8019be4:	f107 0308 	add.w	r3, r7, #8
 8019be8:	4611      	mov	r1, r2
 8019bea:	4618      	mov	r0, r3
 8019bec:	f7fe fc20 	bl	8018430 <dcd_event_handler>
}
 8019bf0:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8019bf2:	783b      	ldrb	r3, [r7, #0]
 8019bf4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019bf8:	b2db      	uxtb	r3, r3
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d066      	beq.n	8019ccc <handle_epin_slave+0x198>
 8019bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c00:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8019c04:	79ba      	ldrb	r2, [r7, #6]
 8019c06:	2101      	movs	r1, #1
 8019c08:	fa01 f202 	lsl.w	r2, r1, r2
 8019c0c:	4013      	ands	r3, r2
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d05c      	beq.n	8019ccc <handle_epin_slave+0x198>
    const uint16_t remain_packets = epin->tsiz_bm.packet_count;
 8019c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c14:	691b      	ldr	r3, [r3, #16]
 8019c16:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8019c1a:	b29b      	uxth	r3, r3
 8019c1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8019c1e:	2300      	movs	r3, #0
 8019c20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c22:	e03b      	b.n	8019c9c <handle_epin_slave+0x168>
      const uint16_t remain_bytes = (uint16_t) epin->tsiz_bm.xfer_size;
 8019c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c26:	691b      	ldr	r3, [r3, #16]
 8019c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019c2c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8019c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c30:	895a      	ldrh	r2, [r3, #10]
 8019c32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019c34:	833b      	strh	r3, [r7, #24]
 8019c36:	4613      	mov	r3, r2
 8019c38:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8019c3a:	8b3a      	ldrh	r2, [r7, #24]
 8019c3c:	8afb      	ldrh	r3, [r7, #22]
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	bf28      	it	cs
 8019c42:	4613      	movcs	r3, r2
 8019c44:	b29b      	uxth	r3, r3
 8019c46:	857b      	strh	r3, [r7, #42]	@ 0x2a

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8019c48:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8019c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c4c:	699b      	ldr	r3, [r3, #24]
 8019c4e:	0099      	lsls	r1, r3, #2
 8019c50:	4b23      	ldr	r3, [pc, #140]	@ (8019ce0 <handle_epin_slave+0x1ac>)
 8019c52:	400b      	ands	r3, r1
 8019c54:	429a      	cmp	r2, r3
 8019c56:	d826      	bhi.n	8019ca6 <handle_epin_slave+0x172>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8019c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d00d      	beq.n	8019c7c <handle_epin_slave+0x148>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8019c60:	79bb      	ldrb	r3, [r7, #6]
 8019c62:	3301      	adds	r3, #1
 8019c64:	031b      	lsls	r3, r3, #12
 8019c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019c68:	4413      	add	r3, r2
 8019c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8019c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8019c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019c74:	4618      	mov	r0, r3
 8019c76:	f7fe fa2d 	bl	80180d4 <tu_fifo_read_n_const_addr_full_words>
 8019c7a:	e00c      	b.n	8019c96 <handle_epin_slave+0x162>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8019c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c7e:	681a      	ldr	r2, [r3, #0]
 8019c80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019c82:	79b9      	ldrb	r1, [r7, #6]
 8019c84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019c86:	f000 fc4c 	bl	801a522 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8019c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019c90:	441a      	add	r2, r3
 8019c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c94:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8019c96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c98:	3301      	adds	r3, #1
 8019c9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c9c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019c9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	d3bf      	bcc.n	8019c24 <handle_epin_slave+0xf0>
 8019ca4:	e000      	b.n	8019ca8 <handle_epin_slave+0x174>
        break;
 8019ca6:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    if (epin->tsiz_bm.xfer_size == 0) {
 8019ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019caa:	691b      	ldr	r3, [r3, #16]
 8019cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d10b      	bne.n	8019ccc <handle_epin_slave+0x198>
      dwc2->diepempmsk &= ~(1 << epnum);
 8019cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cb6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8019cba:	79ba      	ldrb	r2, [r7, #6]
 8019cbc:	2101      	movs	r1, #1
 8019cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8019cc2:	43d2      	mvns	r2, r2
 8019cc4:	401a      	ands	r2, r3
 8019cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cc8:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8019ccc:	bf00      	nop
 8019cce:	3740      	adds	r7, #64	@ 0x40
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}
 8019cd4:	08031e58 	.word	0x08031e58
 8019cd8:	24008824 	.word	0x24008824
 8019cdc:	24008944 	.word	0x24008944
 8019ce0:	0003fffc 	.word	0x0003fffc

08019ce4 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b08a      	sub	sp, #40	@ 0x28
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	4603      	mov	r3, r0
 8019cec:	460a      	mov	r2, r1
 8019cee:	71fb      	strb	r3, [r7, #7]
 8019cf0:	4613      	mov	r3, r2
 8019cf2:	71bb      	strb	r3, [r7, #6]
 8019cf4:	79fb      	ldrb	r3, [r7, #7]
 8019cf6:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019cf8:	7bfb      	ldrb	r3, [r7, #15]
 8019cfa:	2b01      	cmp	r3, #1
 8019cfc:	d901      	bls.n	8019d02 <handle_ep_irq+0x1e>
    rhport = 0;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019d02:	7bfb      	ldrb	r3, [r7, #15]
 8019d04:	4a31      	ldr	r2, [pc, #196]	@ (8019dcc <handle_ep_irq+0xe8>)
 8019d06:	011b      	lsls	r3, r3, #4
 8019d08:	4413      	add	r3, r2
 8019d0a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019d0c:	623b      	str	r3, [r7, #32]
 8019d0e:	6a3b      	ldr	r3, [r7, #32]
 8019d10:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019d12:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8019d14:	77fb      	strb	r3, [r7, #31]
  const uint8_t ep_count = DWC2_EP_COUNT(dwc2);
 8019d16:	6a3b      	ldr	r3, [r7, #32]
 8019d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019d1a:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8019d1e:	b2db      	uxtb	r3, r3
 8019d20:	3301      	adds	r3, #1
 8019d22:	77bb      	strb	r3, [r7, #30]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8019d24:	79bb      	ldrb	r3, [r7, #6]
 8019d26:	2b01      	cmp	r3, #1
 8019d28:	d101      	bne.n	8019d2e <handle_ep_irq+0x4a>
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	e000      	b.n	8019d30 <handle_ep_irq+0x4c>
 8019d2e:	2310      	movs	r3, #16
 8019d30:	777b      	strb	r3, [r7, #29]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8019d32:	79bb      	ldrb	r3, [r7, #6]
 8019d34:	2b01      	cmp	r3, #1
 8019d36:	bf14      	ite	ne
 8019d38:	2301      	movne	r3, #1
 8019d3a:	2300      	moveq	r3, #0
 8019d3c:	b2db      	uxtb	r3, r3
 8019d3e:	025b      	lsls	r3, r3, #9
 8019d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8019d44:	6a3a      	ldr	r2, [r7, #32]
 8019d46:	4413      	add	r3, r2
 8019d48:	61bb      	str	r3, [r7, #24]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019d50:	e032      	b.n	8019db8 <handle_ep_irq+0xd4>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8019d52:	6a3b      	ldr	r3, [r7, #32]
 8019d54:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8019d58:	7f79      	ldrb	r1, [r7, #29]
 8019d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d5e:	440b      	add	r3, r1
 8019d60:	fa22 f303 	lsr.w	r3, r2, r3
 8019d64:	f003 0301 	and.w	r3, r3, #1
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d020      	beq.n	8019dae <handle_ep_irq+0xca>
      dwc2_dep_t* epout = &ep_base[epnum];
 8019d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d70:	015b      	lsls	r3, r3, #5
 8019d72:	69ba      	ldr	r2, [r7, #24]
 8019d74:	4413      	add	r3, r2
 8019d76:	617b      	str	r3, [r7, #20]
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	689b      	ldr	r3, [r3, #8]
 8019d7c:	60bb      	str	r3, [r7, #8]

      epout->intr = intr.value; // Clear interrupt
 8019d7e:	68ba      	ldr	r2, [r7, #8]
 8019d80:	697b      	ldr	r3, [r7, #20]
 8019d82:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8019d84:	7ffb      	ldrb	r3, [r7, #31]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d111      	bne.n	8019dae <handle_ep_irq+0xca>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8019d8a:	79bb      	ldrb	r3, [r7, #6]
 8019d8c:	2b01      	cmp	r3, #1
 8019d8e:	d107      	bne.n	8019da0 <handle_ep_irq+0xbc>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8019d90:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8019d94:	79fb      	ldrb	r3, [r7, #7]
 8019d96:	68ba      	ldr	r2, [r7, #8]
 8019d98:	4618      	mov	r0, r3
 8019d9a:	f7ff fecb 	bl	8019b34 <handle_epin_slave>
 8019d9e:	e006      	b.n	8019dae <handle_ep_irq+0xca>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8019da0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8019da4:	79fb      	ldrb	r3, [r7, #7]
 8019da6:	68ba      	ldr	r2, [r7, #8]
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7ff fe43 	bl	8019a34 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8019dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019db2:	3301      	adds	r3, #1
 8019db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019db8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019dbc:	7fbb      	ldrb	r3, [r7, #30]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d3c7      	bcc.n	8019d52 <handle_ep_irq+0x6e>
        }
        #endif
      }
    }
  }
}
 8019dc2:	bf00      	nop
 8019dc4:	bf00      	nop
 8019dc6:	3728      	adds	r7, #40	@ 0x28
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}
 8019dcc:	08031e58 	.word	0x08031e58

08019dd0 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b098      	sub	sp, #96	@ 0x60
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	71fb      	strb	r3, [r7, #7]
 8019dda:	79fb      	ldrb	r3, [r7, #7]
 8019ddc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019de0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019de4:	2b01      	cmp	r3, #1
 8019de6:	d902      	bls.n	8019dee <dcd_int_handler+0x1e>
    rhport = 0;
 8019de8:	2300      	movs	r3, #0
 8019dea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019dee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019df2:	4a7d      	ldr	r2, [pc, #500]	@ (8019fe8 <dcd_int_handler+0x218>)
 8019df4:	011b      	lsls	r3, r3, #4
 8019df6:	4413      	add	r3, r2
 8019df8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const uint32_t gintmask = dwc2->gintmsk;
 8019dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019dfe:	699b      	ldr	r3, [r3, #24]
 8019e00:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8019e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e04:	695b      	ldr	r3, [r3, #20]
 8019e06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019e08:	4013      	ands	r3, r2
 8019e0a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8019e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d007      	beq.n	8019e26 <dcd_int_handler+0x56>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8019e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8019e1c:	615a      	str	r2, [r3, #20]
    handle_bus_reset(rhport);
 8019e1e:	79fb      	ldrb	r3, [r7, #7]
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7ff fc47 	bl	80196b4 <handle_bus_reset>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8019e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d007      	beq.n	8019e40 <dcd_int_handler+0x70>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8019e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8019e36:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8019e38:	79fb      	ldrb	r3, [r7, #7]
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7ff fd14 	bl	8019868 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8019e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d01d      	beq.n	8019e86 <dcd_int_handler+0xb6>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8019e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019e50:	615a      	str	r2, [r3, #20]
 8019e52:	79fb      	ldrb	r3, [r7, #7]
 8019e54:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8019e58:	2304      	movs	r3, #4
 8019e5a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8019e5e:	2301      	movs	r3, #1
 8019e60:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8019e64:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8019e68:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8019e6c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8019e70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8019e74:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8019e78:	f107 0320 	add.w	r3, r7, #32
 8019e7c:	4611      	mov	r1, r2
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7fe fad6 	bl	8018430 <dcd_event_handler>
}
 8019e84:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8019e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	da1d      	bge.n	8019ec8 <dcd_int_handler+0xf8>
    dwc2->gintsts = GINTSTS_WKUINT;
 8019e8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019e92:	615a      	str	r2, [r3, #20]
 8019e94:	79fb      	ldrb	r3, [r7, #7]
 8019e96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8019e9a:	2305      	movs	r3, #5
 8019e9c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8019ea0:	2301      	movs	r3, #1
 8019ea2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8019ea6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019eaa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8019eae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8019eb2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8019eb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8019eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019ebe:	4611      	mov	r1, r2
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f7fe fab5 	bl	8018430 <dcd_event_handler>
}
 8019ec6:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8019ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eca:	f003 0304 	and.w	r3, r3, #4
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d022      	beq.n	8019f18 <dcd_int_handler+0x148>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8019ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ed4:	685b      	ldr	r3, [r3, #4]
 8019ed6:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8019ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019eda:	f003 0304 	and.w	r3, r3, #4
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d017      	beq.n	8019f12 <dcd_int_handler+0x142>
 8019ee2:	79fb      	ldrb	r3, [r7, #7]
 8019ee4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8019ee8:	2302      	movs	r3, #2
 8019eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eee:	2301      	movs	r3, #1
 8019ef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 8019ef4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8019ef8:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 8019efa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019efe:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8019f00:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8019f04:	f107 0314 	add.w	r3, r7, #20
 8019f08:	4611      	mov	r1, r2
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f7fe fa90 	bl	8018430 <dcd_event_handler>
}
 8019f10:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8019f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019f16:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8019f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f1a:	f003 0308 	and.w	r3, r3, #8
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d02e      	beq.n	8019f80 <dcd_int_handler+0x1b0>
    dwc2->gintsts = GINTSTS_SOF;
 8019f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f24:	2208      	movs	r2, #8
 8019f26:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 8019f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f2a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8019f2e:	0a1b      	lsrs	r3, r3, #8
 8019f30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019f34:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 8019f36:	4b2d      	ldr	r3, [pc, #180]	@ (8019fec <dcd_int_handler+0x21c>)
 8019f38:	79db      	ldrb	r3, [r3, #7]
 8019f3a:	f083 0301 	eor.w	r3, r3, #1
 8019f3e:	b2db      	uxtb	r3, r3
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d005      	beq.n	8019f50 <dcd_int_handler+0x180>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8019f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f46:	699b      	ldr	r3, [r3, #24]
 8019f48:	f023 0208 	bic.w	r2, r3, #8
 8019f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f4e:	619a      	str	r2, [r3, #24]
 8019f50:	79fb      	ldrb	r3, [r7, #7]
 8019f52:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8019f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019f60:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8019f64:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8019f66:	2303      	movs	r3, #3
 8019f68:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8019f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f6c:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8019f6e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8019f72:	f107 0308 	add.w	r3, r7, #8
 8019f76:	4611      	mov	r1, r2
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7fe fa59 	bl	8018430 <dcd_event_handler>
}
 8019f7e:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 8019f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f82:	f003 0310 	and.w	r3, r3, #16
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d015      	beq.n	8019fb6 <dcd_int_handler+0x1e6>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 8019f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f8c:	699b      	ldr	r3, [r3, #24]
 8019f8e:	f023 0210 	bic.w	r2, r3, #16
 8019f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f94:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 8019f96:	79fb      	ldrb	r3, [r7, #7]
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f7ff fca5 	bl	80198e8 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 8019f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fa0:	695b      	ldr	r3, [r3, #20]
 8019fa2:	f003 0310 	and.w	r3, r3, #16
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d1f5      	bne.n	8019f96 <dcd_int_handler+0x1c6>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8019faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fac:	699b      	ldr	r3, [r3, #24]
 8019fae:	f043 0210 	orr.w	r2, r3, #16
 8019fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fb4:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 8019fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d004      	beq.n	8019fca <dcd_int_handler+0x1fa>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 8019fc0:	79fb      	ldrb	r3, [r7, #7]
 8019fc2:	2100      	movs	r1, #0
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7ff fe8d 	bl	8019ce4 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 8019fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d004      	beq.n	8019fde <dcd_int_handler+0x20e>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 8019fd4:	79fb      	ldrb	r3, [r7, #7]
 8019fd6:	2101      	movs	r1, #1
 8019fd8:	4618      	mov	r0, r3
 8019fda:	f7ff fe83 	bl	8019ce4 <handle_ep_irq>
  }
}
 8019fde:	bf00      	nop
 8019fe0:	3760      	adds	r7, #96	@ 0x60
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}
 8019fe6:	bf00      	nop
 8019fe8:	08031e58 	.word	0x08031e58
 8019fec:	24008944 	.word	0x24008944

08019ff0 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8019ff0:	b480      	push	{r7}
 8019ff2:	b083      	sub	sp, #12
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	460b      	mov	r3, r1
 8019ffa:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8019ffc:	78fb      	ldrb	r3, [r7, #3]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d112      	bne.n	801a028 <dwc2_phy_init+0x38>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a006:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	4a0b      	ldr	r2, [pc, #44]	@ (801a040 <dwc2_phy_init+0x50>)
 801a012:	4293      	cmp	r3, r2
 801a014:	d10e      	bne.n	801a034 <dwc2_phy_init+0x44>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 801a016:	4b0b      	ldr	r3, [pc, #44]	@ (801a044 <dwc2_phy_init+0x54>)
 801a018:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801a01c:	4a09      	ldr	r2, [pc, #36]	@ (801a044 <dwc2_phy_init+0x54>)
 801a01e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a022:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      #else

      #endif
    }
  }
}
 801a026:	e005      	b.n	801a034 <dwc2_phy_init+0x44>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a02c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801a034:	bf00      	nop
 801a036:	370c      	adds	r7, #12
 801a038:	46bd      	mov	sp, r7
 801a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03e:	4770      	bx	lr
 801a040:	40040000 	.word	0x40040000
 801a044:	58024400 	.word	0x58024400

0801a048 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 801a048:	b480      	push	{r7}
 801a04a:	b085      	sub	sp, #20
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	460b      	mov	r3, r1
 801a052:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 801a054:	78fb      	ldrb	r3, [r7, #3]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d152      	bne.n	801a100 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 801a05a:	4b2c      	ldr	r3, [pc, #176]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	4a2c      	ldr	r2, [pc, #176]	@ (801a110 <dwc2_phy_update+0xc8>)
 801a060:	4293      	cmp	r3, r2
 801a062:	d302      	bcc.n	801a06a <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 801a064:	2306      	movs	r3, #6
 801a066:	60fb      	str	r3, [r7, #12]
 801a068:	e041      	b.n	801a0ee <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 801a06a:	4b28      	ldr	r3, [pc, #160]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	4a29      	ldr	r2, [pc, #164]	@ (801a114 <dwc2_phy_update+0xcc>)
 801a070:	4293      	cmp	r3, r2
 801a072:	d902      	bls.n	801a07a <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 801a074:	2307      	movs	r3, #7
 801a076:	60fb      	str	r3, [r7, #12]
 801a078:	e039      	b.n	801a0ee <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 801a07a:	4b24      	ldr	r3, [pc, #144]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	4a26      	ldr	r2, [pc, #152]	@ (801a118 <dwc2_phy_update+0xd0>)
 801a080:	4293      	cmp	r3, r2
 801a082:	d302      	bcc.n	801a08a <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 801a084:	2308      	movs	r3, #8
 801a086:	60fb      	str	r3, [r7, #12]
 801a088:	e031      	b.n	801a0ee <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 801a08a:	4b20      	ldr	r3, [pc, #128]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	4a23      	ldr	r2, [pc, #140]	@ (801a11c <dwc2_phy_update+0xd4>)
 801a090:	4293      	cmp	r3, r2
 801a092:	d902      	bls.n	801a09a <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 801a094:	2309      	movs	r3, #9
 801a096:	60fb      	str	r3, [r7, #12]
 801a098:	e029      	b.n	801a0ee <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 801a09a:	4b1c      	ldr	r3, [pc, #112]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	4a20      	ldr	r2, [pc, #128]	@ (801a120 <dwc2_phy_update+0xd8>)
 801a0a0:	4293      	cmp	r3, r2
 801a0a2:	d902      	bls.n	801a0aa <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 801a0a4:	230a      	movs	r3, #10
 801a0a6:	60fb      	str	r3, [r7, #12]
 801a0a8:	e021      	b.n	801a0ee <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 801a0aa:	4b18      	ldr	r3, [pc, #96]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	4a1d      	ldr	r2, [pc, #116]	@ (801a124 <dwc2_phy_update+0xdc>)
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d902      	bls.n	801a0ba <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 801a0b4:	230b      	movs	r3, #11
 801a0b6:	60fb      	str	r3, [r7, #12]
 801a0b8:	e019      	b.n	801a0ee <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 801a0ba:	4b14      	ldr	r3, [pc, #80]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	4a1a      	ldr	r2, [pc, #104]	@ (801a128 <dwc2_phy_update+0xe0>)
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	d302      	bcc.n	801a0ca <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 801a0c4:	230c      	movs	r3, #12
 801a0c6:	60fb      	str	r3, [r7, #12]
 801a0c8:	e011      	b.n	801a0ee <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 801a0ca:	4b10      	ldr	r3, [pc, #64]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	4a17      	ldr	r2, [pc, #92]	@ (801a12c <dwc2_phy_update+0xe4>)
 801a0d0:	4293      	cmp	r3, r2
 801a0d2:	d302      	bcc.n	801a0da <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 801a0d4:	230d      	movs	r3, #13
 801a0d6:	60fb      	str	r3, [r7, #12]
 801a0d8:	e009      	b.n	801a0ee <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 801a0da:	4b0c      	ldr	r3, [pc, #48]	@ (801a10c <dwc2_phy_update+0xc4>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	4a14      	ldr	r2, [pc, #80]	@ (801a130 <dwc2_phy_update+0xe8>)
 801a0e0:	4293      	cmp	r3, r2
 801a0e2:	d302      	bcc.n	801a0ea <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 801a0e4:	230e      	movs	r3, #14
 801a0e6:	60fb      	str	r3, [r7, #12]
 801a0e8:	e001      	b.n	801a0ee <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 801a0ea:	230f      	movs	r3, #15
 801a0ec:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	68db      	ldr	r3, [r3, #12]
 801a0f2:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	029b      	lsls	r3, r3, #10
 801a0fa:	431a      	orrs	r2, r3
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	60da      	str	r2, [r3, #12]
  }
}
 801a100:	bf00      	nop
 801a102:	3714      	adds	r7, #20
 801a104:	46bd      	mov	sp, r7
 801a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10a:	4770      	bx	lr
 801a10c:	24000000 	.word	0x24000000
 801a110:	01e84800 	.word	0x01e84800
 801a114:	01a39ddf 	.word	0x01a39ddf
 801a118:	016e3600 	.word	0x016e3600
 801a11c:	014ca43f 	.word	0x014ca43f
 801a120:	01312cff 	.word	0x01312cff
 801a124:	011a499f 	.word	0x011a499f
 801a128:	01067380 	.word	0x01067380
 801a12c:	00f42400 	.word	0x00f42400
 801a130:	00e4e1c0 	.word	0x00e4e1c0

0801a134 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 801a134:	b480      	push	{r7}
 801a136:	b083      	sub	sp, #12
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	691b      	ldr	r3, [r3, #16]
 801a140:	f043 0201 	orr.w	r2, r3, #1
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	f244 2209 	movw	r2, #16905	@ 0x4209
 801a152:	4293      	cmp	r3, r2
 801a154:	d807      	bhi.n	801a166 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 801a156:	bf00      	nop
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	691b      	ldr	r3, [r3, #16]
 801a15c:	f003 0301 	and.w	r3, r3, #1
 801a160:	2b00      	cmp	r3, #0
 801a162:	d1f9      	bne.n	801a158 <reset_core+0x24>
 801a164:	e00e      	b.n	801a184 <reset_core+0x50>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 801a166:	bf00      	nop
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	691b      	ldr	r3, [r3, #16]
 801a16c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a170:	2b00      	cmp	r3, #0
 801a172:	d0f9      	beq.n	801a168 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	691a      	ldr	r2, [r3, #16]
 801a178:	4b08      	ldr	r3, [pc, #32]	@ (801a19c <reset_core+0x68>)
 801a17a:	4013      	ands	r3, r2
 801a17c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 801a184:	bf00      	nop
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	691b      	ldr	r3, [r3, #16]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	dafb      	bge.n	801a186 <reset_core+0x52>
}
 801a18e:	bf00      	nop
 801a190:	bf00      	nop
 801a192:	370c      	adds	r7, #12
 801a194:	46bd      	mov	sp, r7
 801a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19a:	4770      	bx	lr
 801a19c:	dffffffe 	.word	0xdffffffe

0801a1a0 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b084      	sub	sp, #16
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	68db      	ldr	r3, [r3, #12]
 801a1ac:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1b4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	68fa      	ldr	r2, [r7, #12]
 801a1ba:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 801a1bc:	2100      	movs	r1, #0
 801a1be:	6878      	ldr	r0, [r7, #4]
 801a1c0:	f7ff ff16 	bl	8019ff0 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f7ff ffb5 	bl	801a134 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 801a1d0:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 801a1d8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	68fa      	ldr	r2, [r7, #12]
 801a1de:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 801a1e0:	2100      	movs	r1, #0
 801a1e2:	6878      	ldr	r0, [r7, #4]
 801a1e4:	f7ff ff30 	bl	801a048 <dwc2_phy_update>
}
 801a1e8:	bf00      	nop
 801a1ea:	3710      	adds	r7, #16
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}

0801a1f0 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b084      	sub	sp, #16
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	68db      	ldr	r3, [r3, #12]
 801a1fc:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a204:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a20a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a20e:	b2db      	uxtb	r3, r3
 801a210:	2b02      	cmp	r3, #2
 801a212:	d114      	bne.n	801a23e <phy_hs_init+0x4e>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	f043 0310 	orr.w	r3, r3, #16
 801a21a:	60fb      	str	r3, [r7, #12]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	f023 0308 	bic.w	r3, r3, #8
 801a222:	60fb      	str	r3, [r7, #12]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a22a:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801a232:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 801a23a:	60fb      	str	r3, [r7, #12]
 801a23c:	e013      	b.n	801a266 <phy_hs_init+0x76>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	f023 0310 	bic.w	r3, r3, #16
 801a244:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.phy_data_width) {
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a24a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 801a24e:	b2db      	uxtb	r3, r3
 801a250:	2b00      	cmp	r3, #0
 801a252:	d004      	beq.n	801a25e <phy_hs_init+0x6e>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	f043 0308 	orr.w	r3, r3, #8
 801a25a:	60fb      	str	r3, [r7, #12]
 801a25c:	e003      	b.n	801a266 <phy_hs_init+0x76>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	f023 0308 	bic.w	r3, r3, #8
 801a264:	60fb      	str	r3, [r7, #12]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	68fa      	ldr	r2, [r7, #12]
 801a26a:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a270:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a274:	b2db      	uxtb	r3, r3
 801a276:	4619      	mov	r1, r3
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f7ff feb9 	bl	8019ff0 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801a27e:	6878      	ldr	r0, [r7, #4]
 801a280:	f7ff ff58 	bl	801a134 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 801a28a:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a290:	f3c3 3381 	ubfx	r3, r3, #14, #2
 801a294:	b2db      	uxtb	r3, r3
 801a296:	2b00      	cmp	r3, #0
 801a298:	d002      	beq.n	801a2a0 <phy_hs_init+0xb0>
 801a29a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 801a29e:	e001      	b.n	801a2a4 <phy_hs_init+0xb4>
 801a2a0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 801a2a4:	68fa      	ldr	r2, [r7, #12]
 801a2a6:	4313      	orrs	r3, r2
 801a2a8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	68fa      	ldr	r2, [r7, #12]
 801a2ae:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a2b4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a2b8:	b2db      	uxtb	r3, r3
 801a2ba:	4619      	mov	r1, r3
 801a2bc:	6878      	ldr	r0, [r7, #4]
 801a2be:	f7ff fec3 	bl	801a048 <dwc2_phy_update>
}
 801a2c2:	bf00      	nop
 801a2c4:	3710      	adds	r7, #16
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bd80      	pop	{r7, pc}
	...

0801a2cc <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 801a2cc:	b480      	push	{r7}
 801a2ce:	b085      	sub	sp, #20
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a2d8:	4b10      	ldr	r3, [pc, #64]	@ (801a31c <check_dwc2+0x50>)
 801a2da:	4013      	ands	r3, r2
 801a2dc:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	4a0f      	ldr	r2, [pc, #60]	@ (801a320 <check_dwc2+0x54>)
 801a2e2:	4293      	cmp	r3, r2
 801a2e4:	d012      	beq.n	801a30c <check_dwc2+0x40>
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	4a0e      	ldr	r2, [pc, #56]	@ (801a324 <check_dwc2+0x58>)
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	d00e      	beq.n	801a30c <check_dwc2+0x40>
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	4a0d      	ldr	r2, [pc, #52]	@ (801a328 <check_dwc2+0x5c>)
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	d00a      	beq.n	801a30c <check_dwc2+0x40>
 801a2f6:	4b0d      	ldr	r3, [pc, #52]	@ (801a32c <check_dwc2+0x60>)
 801a2f8:	60bb      	str	r3, [r7, #8]
 801a2fa:	68bb      	ldr	r3, [r7, #8]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	f003 0301 	and.w	r3, r3, #1
 801a302:	2b00      	cmp	r3, #0
 801a304:	d000      	beq.n	801a308 <check_dwc2+0x3c>
 801a306:	be00      	bkpt	0x0000
 801a308:	2300      	movs	r3, #0
 801a30a:	e000      	b.n	801a30e <check_dwc2+0x42>
#endif

  return true;
 801a30c:	2301      	movs	r3, #1
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3714      	adds	r7, #20
 801a312:	46bd      	mov	sp, r7
 801a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a318:	4770      	bx	lr
 801a31a:	bf00      	nop
 801a31c:	ffff0000 	.word	0xffff0000
 801a320:	4f540000 	.word	0x4f540000
 801a324:	55310000 	.word	0x55310000
 801a328:	55320000 	.word	0x55320000
 801a32c:	e000edf0 	.word	0xe000edf0

0801a330 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 801a330:	b480      	push	{r7}
 801a332:	b083      	sub	sp, #12
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	460b      	mov	r3, r1
 801a33a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;

#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 801a33c:	78fb      	ldrb	r3, [r7, #3]
 801a33e:	2b01      	cmp	r3, #1
 801a340:	d101      	bne.n	801a346 <dwc2_core_is_highspeed+0x16>
    return false;
 801a342:	2300      	movs	r3, #0
 801a344:	e009      	b.n	801a35a <dwc2_core_is_highspeed+0x2a>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  return dwc2->ghwcfg2_bm.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a34a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a34e:	b2db      	uxtb	r3, r3
 801a350:	2b00      	cmp	r3, #0
 801a352:	bf14      	ite	ne
 801a354:	2301      	movne	r3, #1
 801a356:	2300      	moveq	r3, #0
 801a358:	b2db      	uxtb	r3, r3
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	370c      	adds	r7, #12
 801a35e:	46bd      	mov	sp, r7
 801a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a364:	4770      	bx	lr
	...

0801a368 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 801a368:	b580      	push	{r7, lr}
 801a36a:	b088      	sub	sp, #32
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	4603      	mov	r3, r0
 801a370:	71fb      	strb	r3, [r7, #7]
 801a372:	460b      	mov	r3, r1
 801a374:	71bb      	strb	r3, [r7, #6]
 801a376:	4613      	mov	r3, r2
 801a378:	717b      	strb	r3, [r7, #5]
 801a37a:	79fb      	ldrb	r3, [r7, #7]
 801a37c:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a37e:	7dfb      	ldrb	r3, [r7, #23]
 801a380:	2b01      	cmp	r3, #1
 801a382:	d901      	bls.n	801a388 <dwc2_core_init+0x20>
    rhport = 0;
 801a384:	2300      	movs	r3, #0
 801a386:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a388:	7dfb      	ldrb	r3, [r7, #23]
 801a38a:	4a3b      	ldr	r2, [pc, #236]	@ (801a478 <dwc2_core_init+0x110>)
 801a38c:	011b      	lsls	r3, r3, #4
 801a38e:	4413      	add	r3, r2
 801a390:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a392:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 801a394:	69f8      	ldr	r0, [r7, #28]
 801a396:	f7ff ff99 	bl	801a2cc <check_dwc2>
 801a39a:	4603      	mov	r3, r0
 801a39c:	f083 0301 	eor.w	r3, r3, #1
 801a3a0:	b2db      	uxtb	r3, r3
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d00a      	beq.n	801a3bc <dwc2_core_init+0x54>
 801a3a6:	4b35      	ldr	r3, [pc, #212]	@ (801a47c <dwc2_core_init+0x114>)
 801a3a8:	61bb      	str	r3, [r7, #24]
 801a3aa:	69bb      	ldr	r3, [r7, #24]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	f003 0301 	and.w	r3, r3, #1
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d000      	beq.n	801a3b8 <dwc2_core_init+0x50>
 801a3b6:	be00      	bkpt	0x0000
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	e058      	b.n	801a46e <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	689b      	ldr	r3, [r3, #8]
 801a3c0:	f023 0201 	bic.w	r2, r3, #1
 801a3c4:	69fb      	ldr	r3, [r7, #28]
 801a3c6:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 801a3c8:	79bb      	ldrb	r3, [r7, #6]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d003      	beq.n	801a3d6 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 801a3ce:	69f8      	ldr	r0, [r7, #28]
 801a3d0:	f7ff ff0e 	bl	801a1f0 <phy_hs_init>
 801a3d4:	e002      	b.n	801a3dc <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 801a3d6:	69f8      	ldr	r0, [r7, #28]
 801a3d8:	f7ff fee2 	bl	801a1a0 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 801a3dc:	69fb      	ldr	r3, [r7, #28]
 801a3de:	68db      	ldr	r3, [r3, #12]
 801a3e0:	f043 0207 	orr.w	r2, r3, #7
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 801a3e8:	69fb      	ldr	r3, [r7, #28]
 801a3ea:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 801a3ee:	f023 020f 	bic.w	r2, r3, #15
 801a3f2:	69fb      	ldr	r3, [r7, #28]
 801a3f4:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 801a3f8:	69fb      	ldr	r3, [r7, #28]
 801a3fa:	60fb      	str	r3, [r7, #12]
 801a3fc:	2310      	movs	r3, #16
 801a3fe:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801a400:	7afb      	ldrb	r3, [r7, #11]
 801a402:	019b      	lsls	r3, r3, #6
 801a404:	f043 0220 	orr.w	r2, r3, #32
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801a40c:	bf00      	nop
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	691b      	ldr	r3, [r3, #16]
 801a412:	f003 0320 	and.w	r3, r3, #32
 801a416:	2b00      	cmp	r3, #0
 801a418:	d1f9      	bne.n	801a40e <dwc2_core_init+0xa6>
}
 801a41a:	bf00      	nop
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801a420:	693b      	ldr	r3, [r7, #16]
 801a422:	2210      	movs	r2, #16
 801a424:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 801a426:	bf00      	nop
 801a428:	693b      	ldr	r3, [r7, #16]
 801a42a:	691b      	ldr	r3, [r3, #16]
 801a42c:	f003 0310 	and.w	r3, r3, #16
 801a430:	2b00      	cmp	r3, #0
 801a432:	d1f9      	bne.n	801a428 <dwc2_core_init+0xc0>
}
 801a434:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 801a436:	69fb      	ldr	r3, [r7, #28]
 801a438:	f04f 32ff 	mov.w	r2, #4294967295
 801a43c:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 801a43e:	69fb      	ldr	r3, [r7, #28]
 801a440:	f04f 32ff 	mov.w	r2, #4294967295
 801a444:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 801a446:	69fb      	ldr	r3, [r7, #28]
 801a448:	2200      	movs	r2, #0
 801a44a:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 801a44c:	797b      	ldrb	r3, [r7, #5]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d006      	beq.n	801a460 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 801a452:	69fb      	ldr	r3, [r7, #28]
 801a454:	689b      	ldr	r3, [r3, #8]
 801a456:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 801a45a:	69fb      	ldr	r3, [r7, #28]
 801a45c:	609a      	str	r2, [r3, #8]
 801a45e:	e005      	b.n	801a46c <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 801a460:	69fb      	ldr	r3, [r7, #28]
 801a462:	699b      	ldr	r3, [r3, #24]
 801a464:	f043 0210 	orr.w	r2, r3, #16
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	619a      	str	r2, [r3, #24]
  }

  return true;
 801a46c:	2301      	movs	r3, #1
}
 801a46e:	4618      	mov	r0, r3
 801a470:	3720      	adds	r7, #32
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
 801a476:	bf00      	nop
 801a478:	08031e78 	.word	0x08031e78
 801a47c:	e000edf0 	.word	0xe000edf0

0801a480 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 801a480:	b480      	push	{r7}
 801a482:	b08f      	sub	sp, #60	@ 0x3c
 801a484:	af00      	add	r7, sp, #0
 801a486:	60f8      	str	r0, [r7, #12]
 801a488:	60b9      	str	r1, [r7, #8]
 801a48a:	4613      	mov	r3, r2
 801a48c:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a494:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 801a496:	88fb      	ldrh	r3, [r7, #6]
 801a498:	089b      	lsrs	r3, r3, #2
 801a49a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 801a49c:	e00b      	b.n	801a4b6 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 801a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	68ba      	ldr	r2, [r7, #8]
 801a4a4:	627a      	str	r2, [r7, #36]	@ 0x24
 801a4a6:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4aa:	6a3a      	ldr	r2, [r7, #32]
 801a4ac:	601a      	str	r2, [r3, #0]
}
 801a4ae:	bf00      	nop
    dst += 4;
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	3304      	adds	r3, #4
 801a4b4:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 801a4b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a4b8:	1e5a      	subs	r2, r3, #1
 801a4ba:	86fa      	strh	r2, [r7, #54]	@ 0x36
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d1ee      	bne.n	801a49e <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 801a4c0:	88fb      	ldrh	r3, [r7, #6]
 801a4c2:	b2db      	uxtb	r3, r3
 801a4c4:	f003 0303 	and.w	r3, r3, #3
 801a4c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 801a4cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d020      	beq.n	801a516 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 801a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4dc:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 801a4de:	69fb      	ldr	r3, [r7, #28]
 801a4e0:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 801a4e2:	68bb      	ldr	r3, [r7, #8]
 801a4e4:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 801a4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4ea:	2b01      	cmp	r3, #1
 801a4ec:	d907      	bls.n	801a4fe <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 801a4ee:	68bb      	ldr	r3, [r7, #8]
 801a4f0:	3301      	adds	r3, #1
 801a4f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a4f4:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 801a4f6:	69ba      	ldr	r2, [r7, #24]
 801a4f8:	0a12      	lsrs	r2, r2, #8
 801a4fa:	b2d2      	uxtb	r2, r2
 801a4fc:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 801a4fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a502:	2b02      	cmp	r3, #2
 801a504:	d907      	bls.n	801a516 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	3302      	adds	r3, #2
 801a50a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a50c:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 801a50e:	697a      	ldr	r2, [r7, #20]
 801a510:	0c12      	lsrs	r2, r2, #16
 801a512:	b2d2      	uxtb	r2, r2
 801a514:	701a      	strb	r2, [r3, #0]
    }
  }
}
 801a516:	bf00      	nop
 801a518:	373c      	adds	r7, #60	@ 0x3c
 801a51a:	46bd      	mov	sp, r7
 801a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a520:	4770      	bx	lr

0801a522 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 801a522:	b480      	push	{r7}
 801a524:	b08b      	sub	sp, #44	@ 0x2c
 801a526:	af00      	add	r7, sp, #0
 801a528:	60f8      	str	r0, [r7, #12]
 801a52a:	607a      	str	r2, [r7, #4]
 801a52c:	461a      	mov	r2, r3
 801a52e:	460b      	mov	r3, r1
 801a530:	72fb      	strb	r3, [r7, #11]
 801a532:	4613      	mov	r3, r2
 801a534:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 801a536:	7afb      	ldrb	r3, [r7, #11]
 801a538:	3301      	adds	r3, #1
 801a53a:	031b      	lsls	r3, r3, #12
 801a53c:	68fa      	ldr	r2, [r7, #12]
 801a53e:	4413      	add	r3, r2
 801a540:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 801a542:	893b      	ldrh	r3, [r7, #8]
 801a544:	089b      	lsrs	r3, r3, #2
 801a546:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 801a548:	e008      	b.n	801a55c <dfifo_write_packet+0x3a>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 801a552:	69fb      	ldr	r3, [r7, #28]
 801a554:	601a      	str	r2, [r3, #0]
    src += 4;
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	3304      	adds	r3, #4
 801a55a:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 801a55c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a55e:	1e5a      	subs	r2, r3, #1
 801a560:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801a562:	2b00      	cmp	r3, #0
 801a564:	d1f1      	bne.n	801a54a <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 801a566:	893b      	ldrh	r3, [r7, #8]
 801a568:	b2db      	uxtb	r3, r3
 801a56a:	f003 0303 	and.w	r3, r3, #3
 801a56e:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 801a570:	7efb      	ldrb	r3, [r7, #27]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d019      	beq.n	801a5aa <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	781b      	ldrb	r3, [r3, #0]
 801a57a:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 801a57c:	7efb      	ldrb	r3, [r7, #27]
 801a57e:	2b01      	cmp	r3, #1
 801a580:	d906      	bls.n	801a590 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	3301      	adds	r3, #1
 801a586:	781b      	ldrb	r3, [r3, #0]
 801a588:	021b      	lsls	r3, r3, #8
 801a58a:	6a3a      	ldr	r2, [r7, #32]
 801a58c:	4313      	orrs	r3, r2
 801a58e:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 801a590:	7efb      	ldrb	r3, [r7, #27]
 801a592:	2b02      	cmp	r3, #2
 801a594:	d906      	bls.n	801a5a4 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	3302      	adds	r3, #2
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	041b      	lsls	r3, r3, #16
 801a59e:	6a3a      	ldr	r2, [r7, #32]
 801a5a0:	4313      	orrs	r3, r2
 801a5a2:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	6a3a      	ldr	r2, [r7, #32]
 801a5a8:	601a      	str	r2, [r3, #0]
  }
}
 801a5aa:	bf00      	nop
 801a5ac:	372c      	adds	r7, #44	@ 0x2c
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b4:	4770      	bx	lr

0801a5b6 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 801a5b6:	b480      	push	{r7}
 801a5b8:	b085      	sub	sp, #20
 801a5ba:	af00      	add	r7, sp, #0
 801a5bc:	6078      	str	r0, [r7, #4]
 801a5be:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d106      	bne.n	801a5dc <tu_edpt_claim+0x26>
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	781b      	ldrb	r3, [r3, #0]
 801a5d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d001      	beq.n	801a5e0 <tu_edpt_claim+0x2a>
 801a5dc:	2300      	movs	r3, #0
 801a5de:	e01e      	b.n	801a61e <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	781b      	ldrb	r3, [r3, #0]
 801a5e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d108      	bne.n	801a600 <tu_edpt_claim+0x4a>
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	781b      	ldrb	r3, [r3, #0]
 801a5f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a5f6:	b2db      	uxtb	r3, r3
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d101      	bne.n	801a600 <tu_edpt_claim+0x4a>
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	e000      	b.n	801a602 <tu_edpt_claim+0x4c>
 801a600:	2300      	movs	r3, #0
 801a602:	73fb      	strb	r3, [r7, #15]
 801a604:	7bfb      	ldrb	r3, [r7, #15]
 801a606:	f003 0301 	and.w	r3, r3, #1
 801a60a:	73fb      	strb	r3, [r7, #15]
  if (available) {
 801a60c:	7bfb      	ldrb	r3, [r7, #15]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d004      	beq.n	801a61c <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 801a612:	687a      	ldr	r2, [r7, #4]
 801a614:	7813      	ldrb	r3, [r2, #0]
 801a616:	f043 0304 	orr.w	r3, r3, #4
 801a61a:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 801a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a61e:	4618      	mov	r0, r3
 801a620:	3714      	adds	r7, #20
 801a622:	46bd      	mov	sp, r7
 801a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a628:	4770      	bx	lr

0801a62a <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 801a62a:	b480      	push	{r7}
 801a62c:	b085      	sub	sp, #20
 801a62e:	af00      	add	r7, sp, #0
 801a630:	6078      	str	r0, [r7, #4]
 801a632:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	781b      	ldrb	r3, [r3, #0]
 801a638:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a63c:	b2db      	uxtb	r3, r3
 801a63e:	2b01      	cmp	r3, #1
 801a640:	d108      	bne.n	801a654 <tu_edpt_release+0x2a>
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d101      	bne.n	801a654 <tu_edpt_release+0x2a>
 801a650:	2301      	movs	r3, #1
 801a652:	e000      	b.n	801a656 <tu_edpt_release+0x2c>
 801a654:	2300      	movs	r3, #0
 801a656:	73fb      	strb	r3, [r7, #15]
 801a658:	7bfb      	ldrb	r3, [r7, #15]
 801a65a:	f003 0301 	and.w	r3, r3, #1
 801a65e:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 801a660:	7bfb      	ldrb	r3, [r7, #15]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d004      	beq.n	801a670 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	7813      	ldrb	r3, [r2, #0]
 801a66a:	f023 0304 	bic.w	r3, r3, #4
 801a66e:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 801a670:	7bfb      	ldrb	r3, [r7, #15]
}
 801a672:	4618      	mov	r0, r3
 801a674:	3714      	adds	r7, #20
 801a676:	46bd      	mov	sp, r7
 801a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67c:	4770      	bx	lr
	...

0801a680 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 801a680:	b480      	push	{r7}
 801a682:	b08b      	sub	sp, #44	@ 0x2c
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
 801a688:	460b      	mov	r3, r1
 801a68a:	70fb      	strb	r3, [r7, #3]
 801a68c:	4613      	mov	r3, r2
 801a68e:	70bb      	strb	r3, [r7, #2]
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	889b      	ldrh	r3, [r3, #4]
 801a698:	b29b      	uxth	r3, r3
 801a69a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a69e:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 801a6a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	78db      	ldrb	r3, [r3, #3]
 801a6a6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801a6aa:	b2db      	uxtb	r3, r3
 801a6ac:	2b03      	cmp	r3, #3
 801a6ae:	d059      	beq.n	801a764 <tu_edpt_validate+0xe4>
 801a6b0:	2b03      	cmp	r3, #3
 801a6b2:	dc6e      	bgt.n	801a792 <tu_edpt_validate+0x112>
 801a6b4:	2b01      	cmp	r3, #1
 801a6b6:	d002      	beq.n	801a6be <tu_edpt_validate+0x3e>
 801a6b8:	2b02      	cmp	r3, #2
 801a6ba:	d018      	beq.n	801a6ee <tu_edpt_validate+0x6e>
 801a6bc:	e069      	b.n	801a792 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 801a6be:	78fb      	ldrb	r3, [r7, #3]
 801a6c0:	2b02      	cmp	r3, #2
 801a6c2:	d102      	bne.n	801a6ca <tu_edpt_validate+0x4a>
 801a6c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a6c8:	e001      	b.n	801a6ce <tu_edpt_validate+0x4e>
 801a6ca:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801a6ce:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 801a6d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a6d2:	8a7b      	ldrh	r3, [r7, #18]
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	d95e      	bls.n	801a796 <tu_edpt_validate+0x116>
 801a6d8:	4b35      	ldr	r3, [pc, #212]	@ (801a7b0 <tu_edpt_validate+0x130>)
 801a6da:	60fb      	str	r3, [r7, #12]
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	f003 0301 	and.w	r3, r3, #1
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d000      	beq.n	801a6ea <tu_edpt_validate+0x6a>
 801a6e8:	be00      	bkpt	0x0000
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	e059      	b.n	801a7a2 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 801a6ee:	78fb      	ldrb	r3, [r7, #3]
 801a6f0:	2b02      	cmp	r3, #2
 801a6f2:	d10e      	bne.n	801a712 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 801a6f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a6f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a6fa:	d04e      	beq.n	801a79a <tu_edpt_validate+0x11a>
 801a6fc:	4b2c      	ldr	r3, [pc, #176]	@ (801a7b0 <tu_edpt_validate+0x130>)
 801a6fe:	617b      	str	r3, [r7, #20]
 801a700:	697b      	ldr	r3, [r7, #20]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	f003 0301 	and.w	r3, r3, #1
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d000      	beq.n	801a70e <tu_edpt_validate+0x8e>
 801a70c:	be00      	bkpt	0x0000
 801a70e:	2300      	movs	r3, #0
 801a710:	e047      	b.n	801a7a2 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 801a712:	78bb      	ldrb	r3, [r7, #2]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d00e      	beq.n	801a736 <tu_edpt_validate+0xb6>
 801a718:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a71a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a71e:	d10a      	bne.n	801a736 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 801a724:	69fb      	ldr	r3, [r7, #28]
 801a726:	2200      	movs	r2, #0
 801a728:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a72c:	711a      	strb	r2, [r3, #4]
 801a72e:	2200      	movs	r2, #0
 801a730:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 801a732:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 801a734:	e031      	b.n	801a79a <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 801a736:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a738:	2b08      	cmp	r3, #8
 801a73a:	d02e      	beq.n	801a79a <tu_edpt_validate+0x11a>
 801a73c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a73e:	2b10      	cmp	r3, #16
 801a740:	d02b      	beq.n	801a79a <tu_edpt_validate+0x11a>
 801a742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a744:	2b20      	cmp	r3, #32
 801a746:	d028      	beq.n	801a79a <tu_edpt_validate+0x11a>
 801a748:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a74a:	2b40      	cmp	r3, #64	@ 0x40
 801a74c:	d025      	beq.n	801a79a <tu_edpt_validate+0x11a>
 801a74e:	4b18      	ldr	r3, [pc, #96]	@ (801a7b0 <tu_edpt_validate+0x130>)
 801a750:	61bb      	str	r3, [r7, #24]
 801a752:	69bb      	ldr	r3, [r7, #24]
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	f003 0301 	and.w	r3, r3, #1
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d000      	beq.n	801a760 <tu_edpt_validate+0xe0>
 801a75e:	be00      	bkpt	0x0000
 801a760:	2300      	movs	r3, #0
 801a762:	e01e      	b.n	801a7a2 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 801a764:	78fb      	ldrb	r3, [r7, #3]
 801a766:	2b02      	cmp	r3, #2
 801a768:	d102      	bne.n	801a770 <tu_edpt_validate+0xf0>
 801a76a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a76e:	e000      	b.n	801a772 <tu_edpt_validate+0xf2>
 801a770:	2340      	movs	r3, #64	@ 0x40
 801a772:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 801a774:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a778:	429a      	cmp	r2, r3
 801a77a:	d910      	bls.n	801a79e <tu_edpt_validate+0x11e>
 801a77c:	4b0c      	ldr	r3, [pc, #48]	@ (801a7b0 <tu_edpt_validate+0x130>)
 801a77e:	623b      	str	r3, [r7, #32]
 801a780:	6a3b      	ldr	r3, [r7, #32]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f003 0301 	and.w	r3, r3, #1
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d000      	beq.n	801a78e <tu_edpt_validate+0x10e>
 801a78c:	be00      	bkpt	0x0000
 801a78e:	2300      	movs	r3, #0
 801a790:	e007      	b.n	801a7a2 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 801a792:	2300      	movs	r3, #0
 801a794:	e005      	b.n	801a7a2 <tu_edpt_validate+0x122>
      break;
 801a796:	bf00      	nop
 801a798:	e002      	b.n	801a7a0 <tu_edpt_validate+0x120>
      break;
 801a79a:	bf00      	nop
 801a79c:	e000      	b.n	801a7a0 <tu_edpt_validate+0x120>
      break;
 801a79e:	bf00      	nop
  }

  return true;
 801a7a0:	2301      	movs	r3, #1
}
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	372c      	adds	r7, #44	@ 0x2c
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ac:	4770      	bx	lr
 801a7ae:	bf00      	nop
 801a7b0:	e000edf0 	.word	0xe000edf0

0801a7b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b084      	sub	sp, #16
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a7be:	79fb      	ldrb	r3, [r7, #7]
 801a7c0:	4a08      	ldr	r2, [pc, #32]	@ (801a7e4 <disk_status+0x30>)
 801a7c2:	009b      	lsls	r3, r3, #2
 801a7c4:	4413      	add	r3, r2
 801a7c6:	685b      	ldr	r3, [r3, #4]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	79fa      	ldrb	r2, [r7, #7]
 801a7cc:	4905      	ldr	r1, [pc, #20]	@ (801a7e4 <disk_status+0x30>)
 801a7ce:	440a      	add	r2, r1
 801a7d0:	7a12      	ldrb	r2, [r2, #8]
 801a7d2:	4610      	mov	r0, r2
 801a7d4:	4798      	blx	r3
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a7da:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7dc:	4618      	mov	r0, r3
 801a7de:	3710      	adds	r7, #16
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}
 801a7e4:	2400899c 	.word	0x2400899c

0801a7e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b084      	sub	sp, #16
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	4603      	mov	r3, r0
 801a7f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a7f6:	79fb      	ldrb	r3, [r7, #7]
 801a7f8:	4a0e      	ldr	r2, [pc, #56]	@ (801a834 <disk_initialize+0x4c>)
 801a7fa:	5cd3      	ldrb	r3, [r2, r3]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d114      	bne.n	801a82a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a800:	79fb      	ldrb	r3, [r7, #7]
 801a802:	4a0c      	ldr	r2, [pc, #48]	@ (801a834 <disk_initialize+0x4c>)
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	4413      	add	r3, r2
 801a808:	685b      	ldr	r3, [r3, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	79fa      	ldrb	r2, [r7, #7]
 801a80e:	4909      	ldr	r1, [pc, #36]	@ (801a834 <disk_initialize+0x4c>)
 801a810:	440a      	add	r2, r1
 801a812:	7a12      	ldrb	r2, [r2, #8]
 801a814:	4610      	mov	r0, r2
 801a816:	4798      	blx	r3
 801a818:	4603      	mov	r3, r0
 801a81a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a81c:	7bfb      	ldrb	r3, [r7, #15]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d103      	bne.n	801a82a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a822:	79fb      	ldrb	r3, [r7, #7]
 801a824:	4a03      	ldr	r2, [pc, #12]	@ (801a834 <disk_initialize+0x4c>)
 801a826:	2101      	movs	r1, #1
 801a828:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a82a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a82c:	4618      	mov	r0, r3
 801a82e:	3710      	adds	r7, #16
 801a830:	46bd      	mov	sp, r7
 801a832:	bd80      	pop	{r7, pc}
 801a834:	2400899c 	.word	0x2400899c

0801a838 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a838:	b590      	push	{r4, r7, lr}
 801a83a:	b087      	sub	sp, #28
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	60b9      	str	r1, [r7, #8]
 801a840:	607a      	str	r2, [r7, #4]
 801a842:	603b      	str	r3, [r7, #0]
 801a844:	4603      	mov	r3, r0
 801a846:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a848:	7bfb      	ldrb	r3, [r7, #15]
 801a84a:	4a0a      	ldr	r2, [pc, #40]	@ (801a874 <disk_read+0x3c>)
 801a84c:	009b      	lsls	r3, r3, #2
 801a84e:	4413      	add	r3, r2
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	689c      	ldr	r4, [r3, #8]
 801a854:	7bfb      	ldrb	r3, [r7, #15]
 801a856:	4a07      	ldr	r2, [pc, #28]	@ (801a874 <disk_read+0x3c>)
 801a858:	4413      	add	r3, r2
 801a85a:	7a18      	ldrb	r0, [r3, #8]
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	68b9      	ldr	r1, [r7, #8]
 801a862:	47a0      	blx	r4
 801a864:	4603      	mov	r3, r0
 801a866:	75fb      	strb	r3, [r7, #23]
  return res;
 801a868:	7dfb      	ldrb	r3, [r7, #23]
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	371c      	adds	r7, #28
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd90      	pop	{r4, r7, pc}
 801a872:	bf00      	nop
 801a874:	2400899c 	.word	0x2400899c

0801a878 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a878:	b590      	push	{r4, r7, lr}
 801a87a:	b087      	sub	sp, #28
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	60b9      	str	r1, [r7, #8]
 801a880:	607a      	str	r2, [r7, #4]
 801a882:	603b      	str	r3, [r7, #0]
 801a884:	4603      	mov	r3, r0
 801a886:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a888:	7bfb      	ldrb	r3, [r7, #15]
 801a88a:	4a0a      	ldr	r2, [pc, #40]	@ (801a8b4 <disk_write+0x3c>)
 801a88c:	009b      	lsls	r3, r3, #2
 801a88e:	4413      	add	r3, r2
 801a890:	685b      	ldr	r3, [r3, #4]
 801a892:	68dc      	ldr	r4, [r3, #12]
 801a894:	7bfb      	ldrb	r3, [r7, #15]
 801a896:	4a07      	ldr	r2, [pc, #28]	@ (801a8b4 <disk_write+0x3c>)
 801a898:	4413      	add	r3, r2
 801a89a:	7a18      	ldrb	r0, [r3, #8]
 801a89c:	683b      	ldr	r3, [r7, #0]
 801a89e:	687a      	ldr	r2, [r7, #4]
 801a8a0:	68b9      	ldr	r1, [r7, #8]
 801a8a2:	47a0      	blx	r4
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	75fb      	strb	r3, [r7, #23]
  return res;
 801a8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	371c      	adds	r7, #28
 801a8ae:	46bd      	mov	sp, r7
 801a8b0:	bd90      	pop	{r4, r7, pc}
 801a8b2:	bf00      	nop
 801a8b4:	2400899c 	.word	0x2400899c

0801a8b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	4603      	mov	r3, r0
 801a8c0:	603a      	str	r2, [r7, #0]
 801a8c2:	71fb      	strb	r3, [r7, #7]
 801a8c4:	460b      	mov	r3, r1
 801a8c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a8c8:	79fb      	ldrb	r3, [r7, #7]
 801a8ca:	4a09      	ldr	r2, [pc, #36]	@ (801a8f0 <disk_ioctl+0x38>)
 801a8cc:	009b      	lsls	r3, r3, #2
 801a8ce:	4413      	add	r3, r2
 801a8d0:	685b      	ldr	r3, [r3, #4]
 801a8d2:	691b      	ldr	r3, [r3, #16]
 801a8d4:	79fa      	ldrb	r2, [r7, #7]
 801a8d6:	4906      	ldr	r1, [pc, #24]	@ (801a8f0 <disk_ioctl+0x38>)
 801a8d8:	440a      	add	r2, r1
 801a8da:	7a10      	ldrb	r0, [r2, #8]
 801a8dc:	79b9      	ldrb	r1, [r7, #6]
 801a8de:	683a      	ldr	r2, [r7, #0]
 801a8e0:	4798      	blx	r3
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	73fb      	strb	r3, [r7, #15]
  return res;
 801a8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3710      	adds	r7, #16
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}
 801a8f0:	2400899c 	.word	0x2400899c

0801a8f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a8f4:	b480      	push	{r7}
 801a8f6:	b085      	sub	sp, #20
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	3301      	adds	r3, #1
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a908:	021b      	lsls	r3, r3, #8
 801a90a:	b21a      	sxth	r2, r3
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	781b      	ldrb	r3, [r3, #0]
 801a910:	b21b      	sxth	r3, r3
 801a912:	4313      	orrs	r3, r2
 801a914:	b21b      	sxth	r3, r3
 801a916:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a918:	89fb      	ldrh	r3, [r7, #14]
}
 801a91a:	4618      	mov	r0, r3
 801a91c:	3714      	adds	r7, #20
 801a91e:	46bd      	mov	sp, r7
 801a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a924:	4770      	bx	lr

0801a926 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a926:	b480      	push	{r7}
 801a928:	b085      	sub	sp, #20
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	3303      	adds	r3, #3
 801a932:	781b      	ldrb	r3, [r3, #0]
 801a934:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	021b      	lsls	r3, r3, #8
 801a93a:	687a      	ldr	r2, [r7, #4]
 801a93c:	3202      	adds	r2, #2
 801a93e:	7812      	ldrb	r2, [r2, #0]
 801a940:	4313      	orrs	r3, r2
 801a942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	021b      	lsls	r3, r3, #8
 801a948:	687a      	ldr	r2, [r7, #4]
 801a94a:	3201      	adds	r2, #1
 801a94c:	7812      	ldrb	r2, [r2, #0]
 801a94e:	4313      	orrs	r3, r2
 801a950:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	021b      	lsls	r3, r3, #8
 801a956:	687a      	ldr	r2, [r7, #4]
 801a958:	7812      	ldrb	r2, [r2, #0]
 801a95a:	4313      	orrs	r3, r2
 801a95c:	60fb      	str	r3, [r7, #12]
	return rv;
 801a95e:	68fb      	ldr	r3, [r7, #12]
}
 801a960:	4618      	mov	r0, r3
 801a962:	3714      	adds	r7, #20
 801a964:	46bd      	mov	sp, r7
 801a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96a:	4770      	bx	lr

0801a96c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a96c:	b480      	push	{r7}
 801a96e:	b083      	sub	sp, #12
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	460b      	mov	r3, r1
 801a976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	1c5a      	adds	r2, r3, #1
 801a97c:	607a      	str	r2, [r7, #4]
 801a97e:	887a      	ldrh	r2, [r7, #2]
 801a980:	b2d2      	uxtb	r2, r2
 801a982:	701a      	strb	r2, [r3, #0]
 801a984:	887b      	ldrh	r3, [r7, #2]
 801a986:	0a1b      	lsrs	r3, r3, #8
 801a988:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	1c5a      	adds	r2, r3, #1
 801a98e:	607a      	str	r2, [r7, #4]
 801a990:	887a      	ldrh	r2, [r7, #2]
 801a992:	b2d2      	uxtb	r2, r2
 801a994:	701a      	strb	r2, [r3, #0]
}
 801a996:	bf00      	nop
 801a998:	370c      	adds	r7, #12
 801a99a:	46bd      	mov	sp, r7
 801a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a0:	4770      	bx	lr

0801a9a2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a9a2:	b480      	push	{r7}
 801a9a4:	b083      	sub	sp, #12
 801a9a6:	af00      	add	r7, sp, #0
 801a9a8:	6078      	str	r0, [r7, #4]
 801a9aa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	1c5a      	adds	r2, r3, #1
 801a9b0:	607a      	str	r2, [r7, #4]
 801a9b2:	683a      	ldr	r2, [r7, #0]
 801a9b4:	b2d2      	uxtb	r2, r2
 801a9b6:	701a      	strb	r2, [r3, #0]
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	0a1b      	lsrs	r3, r3, #8
 801a9bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	1c5a      	adds	r2, r3, #1
 801a9c2:	607a      	str	r2, [r7, #4]
 801a9c4:	683a      	ldr	r2, [r7, #0]
 801a9c6:	b2d2      	uxtb	r2, r2
 801a9c8:	701a      	strb	r2, [r3, #0]
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	0a1b      	lsrs	r3, r3, #8
 801a9ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	1c5a      	adds	r2, r3, #1
 801a9d4:	607a      	str	r2, [r7, #4]
 801a9d6:	683a      	ldr	r2, [r7, #0]
 801a9d8:	b2d2      	uxtb	r2, r2
 801a9da:	701a      	strb	r2, [r3, #0]
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	0a1b      	lsrs	r3, r3, #8
 801a9e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	1c5a      	adds	r2, r3, #1
 801a9e6:	607a      	str	r2, [r7, #4]
 801a9e8:	683a      	ldr	r2, [r7, #0]
 801a9ea:	b2d2      	uxtb	r2, r2
 801a9ec:	701a      	strb	r2, [r3, #0]
}
 801a9ee:	bf00      	nop
 801a9f0:	370c      	adds	r7, #12
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f8:	4770      	bx	lr

0801a9fa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a9fa:	b480      	push	{r7}
 801a9fc:	b087      	sub	sp, #28
 801a9fe:	af00      	add	r7, sp, #0
 801aa00:	60f8      	str	r0, [r7, #12]
 801aa02:	60b9      	str	r1, [r7, #8]
 801aa04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d00d      	beq.n	801aa30 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801aa14:	693a      	ldr	r2, [r7, #16]
 801aa16:	1c53      	adds	r3, r2, #1
 801aa18:	613b      	str	r3, [r7, #16]
 801aa1a:	697b      	ldr	r3, [r7, #20]
 801aa1c:	1c59      	adds	r1, r3, #1
 801aa1e:	6179      	str	r1, [r7, #20]
 801aa20:	7812      	ldrb	r2, [r2, #0]
 801aa22:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	3b01      	subs	r3, #1
 801aa28:	607b      	str	r3, [r7, #4]
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d1f1      	bne.n	801aa14 <mem_cpy+0x1a>
	}
}
 801aa30:	bf00      	nop
 801aa32:	371c      	adds	r7, #28
 801aa34:	46bd      	mov	sp, r7
 801aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3a:	4770      	bx	lr

0801aa3c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801aa3c:	b480      	push	{r7}
 801aa3e:	b087      	sub	sp, #28
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	60f8      	str	r0, [r7, #12]
 801aa44:	60b9      	str	r1, [r7, #8]
 801aa46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	1c5a      	adds	r2, r3, #1
 801aa50:	617a      	str	r2, [r7, #20]
 801aa52:	68ba      	ldr	r2, [r7, #8]
 801aa54:	b2d2      	uxtb	r2, r2
 801aa56:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	3b01      	subs	r3, #1
 801aa5c:	607b      	str	r3, [r7, #4]
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d1f3      	bne.n	801aa4c <mem_set+0x10>
}
 801aa64:	bf00      	nop
 801aa66:	bf00      	nop
 801aa68:	371c      	adds	r7, #28
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa70:	4770      	bx	lr

0801aa72 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801aa72:	b480      	push	{r7}
 801aa74:	b089      	sub	sp, #36	@ 0x24
 801aa76:	af00      	add	r7, sp, #0
 801aa78:	60f8      	str	r0, [r7, #12]
 801aa7a:	60b9      	str	r1, [r7, #8]
 801aa7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	61fb      	str	r3, [r7, #28]
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801aa86:	2300      	movs	r3, #0
 801aa88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801aa8a:	69fb      	ldr	r3, [r7, #28]
 801aa8c:	1c5a      	adds	r2, r3, #1
 801aa8e:	61fa      	str	r2, [r7, #28]
 801aa90:	781b      	ldrb	r3, [r3, #0]
 801aa92:	4619      	mov	r1, r3
 801aa94:	69bb      	ldr	r3, [r7, #24]
 801aa96:	1c5a      	adds	r2, r3, #1
 801aa98:	61ba      	str	r2, [r7, #24]
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	1acb      	subs	r3, r1, r3
 801aa9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	3b01      	subs	r3, #1
 801aaa4:	607b      	str	r3, [r7, #4]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d002      	beq.n	801aab2 <mem_cmp+0x40>
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d0eb      	beq.n	801aa8a <mem_cmp+0x18>

	return r;
 801aab2:	697b      	ldr	r3, [r7, #20]
}
 801aab4:	4618      	mov	r0, r3
 801aab6:	3724      	adds	r7, #36	@ 0x24
 801aab8:	46bd      	mov	sp, r7
 801aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aabe:	4770      	bx	lr

0801aac0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801aac0:	b480      	push	{r7}
 801aac2:	b083      	sub	sp, #12
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
 801aac8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801aaca:	e002      	b.n	801aad2 <chk_chr+0x12>
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	3301      	adds	r3, #1
 801aad0:	607b      	str	r3, [r7, #4]
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	781b      	ldrb	r3, [r3, #0]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d005      	beq.n	801aae6 <chk_chr+0x26>
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	781b      	ldrb	r3, [r3, #0]
 801aade:	461a      	mov	r2, r3
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	4293      	cmp	r3, r2
 801aae4:	d1f2      	bne.n	801aacc <chk_chr+0xc>
	return *str;
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	781b      	ldrb	r3, [r3, #0]
}
 801aaea:	4618      	mov	r0, r3
 801aaec:	370c      	adds	r7, #12
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf4:	4770      	bx	lr
	...

0801aaf8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801aaf8:	b480      	push	{r7}
 801aafa:	b085      	sub	sp, #20
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ab02:	2300      	movs	r3, #0
 801ab04:	60bb      	str	r3, [r7, #8]
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	60fb      	str	r3, [r7, #12]
 801ab0a:	e029      	b.n	801ab60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ab0c:	4a27      	ldr	r2, [pc, #156]	@ (801abac <chk_lock+0xb4>)
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	011b      	lsls	r3, r3, #4
 801ab12:	4413      	add	r3, r2
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d01d      	beq.n	801ab56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ab1a:	4a24      	ldr	r2, [pc, #144]	@ (801abac <chk_lock+0xb4>)
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	011b      	lsls	r3, r3, #4
 801ab20:	4413      	add	r3, r2
 801ab22:	681a      	ldr	r2, [r3, #0]
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d116      	bne.n	801ab5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801ab2c:	4a1f      	ldr	r2, [pc, #124]	@ (801abac <chk_lock+0xb4>)
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	011b      	lsls	r3, r3, #4
 801ab32:	4413      	add	r3, r2
 801ab34:	3304      	adds	r3, #4
 801ab36:	681a      	ldr	r2, [r3, #0]
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	d10c      	bne.n	801ab5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ab40:	4a1a      	ldr	r2, [pc, #104]	@ (801abac <chk_lock+0xb4>)
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	011b      	lsls	r3, r3, #4
 801ab46:	4413      	add	r3, r2
 801ab48:	3308      	adds	r3, #8
 801ab4a:	681a      	ldr	r2, [r3, #0]
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801ab50:	429a      	cmp	r2, r3
 801ab52:	d102      	bne.n	801ab5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ab54:	e007      	b.n	801ab66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801ab56:	2301      	movs	r3, #1
 801ab58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	3301      	adds	r3, #1
 801ab5e:	60fb      	str	r3, [r7, #12]
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	2b03      	cmp	r3, #3
 801ab64:	d9d2      	bls.n	801ab0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	2b04      	cmp	r3, #4
 801ab6a:	d109      	bne.n	801ab80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801ab6c:	68bb      	ldr	r3, [r7, #8]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d102      	bne.n	801ab78 <chk_lock+0x80>
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	2b02      	cmp	r3, #2
 801ab76:	d101      	bne.n	801ab7c <chk_lock+0x84>
 801ab78:	2300      	movs	r3, #0
 801ab7a:	e010      	b.n	801ab9e <chk_lock+0xa6>
 801ab7c:	2312      	movs	r3, #18
 801ab7e:	e00e      	b.n	801ab9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801ab80:	683b      	ldr	r3, [r7, #0]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d108      	bne.n	801ab98 <chk_lock+0xa0>
 801ab86:	4a09      	ldr	r2, [pc, #36]	@ (801abac <chk_lock+0xb4>)
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	011b      	lsls	r3, r3, #4
 801ab8c:	4413      	add	r3, r2
 801ab8e:	330c      	adds	r3, #12
 801ab90:	881b      	ldrh	r3, [r3, #0]
 801ab92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ab96:	d101      	bne.n	801ab9c <chk_lock+0xa4>
 801ab98:	2310      	movs	r3, #16
 801ab9a:	e000      	b.n	801ab9e <chk_lock+0xa6>
 801ab9c:	2300      	movs	r3, #0
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3714      	adds	r7, #20
 801aba2:	46bd      	mov	sp, r7
 801aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba8:	4770      	bx	lr
 801abaa:	bf00      	nop
 801abac:	2400895c 	.word	0x2400895c

0801abb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801abb0:	b480      	push	{r7}
 801abb2:	b083      	sub	sp, #12
 801abb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801abb6:	2300      	movs	r3, #0
 801abb8:	607b      	str	r3, [r7, #4]
 801abba:	e002      	b.n	801abc2 <enq_lock+0x12>
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	3301      	adds	r3, #1
 801abc0:	607b      	str	r3, [r7, #4]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2b03      	cmp	r3, #3
 801abc6:	d806      	bhi.n	801abd6 <enq_lock+0x26>
 801abc8:	4a09      	ldr	r2, [pc, #36]	@ (801abf0 <enq_lock+0x40>)
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	011b      	lsls	r3, r3, #4
 801abce:	4413      	add	r3, r2
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d1f2      	bne.n	801abbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	2b04      	cmp	r3, #4
 801abda:	bf14      	ite	ne
 801abdc:	2301      	movne	r3, #1
 801abde:	2300      	moveq	r3, #0
 801abe0:	b2db      	uxtb	r3, r3
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	370c      	adds	r7, #12
 801abe6:	46bd      	mov	sp, r7
 801abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abec:	4770      	bx	lr
 801abee:	bf00      	nop
 801abf0:	2400895c 	.word	0x2400895c

0801abf4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801abf4:	b480      	push	{r7}
 801abf6:	b085      	sub	sp, #20
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
 801abfc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801abfe:	2300      	movs	r3, #0
 801ac00:	60fb      	str	r3, [r7, #12]
 801ac02:	e01f      	b.n	801ac44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801ac04:	4a41      	ldr	r2, [pc, #260]	@ (801ad0c <inc_lock+0x118>)
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	011b      	lsls	r3, r3, #4
 801ac0a:	4413      	add	r3, r2
 801ac0c:	681a      	ldr	r2, [r3, #0]
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d113      	bne.n	801ac3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801ac16:	4a3d      	ldr	r2, [pc, #244]	@ (801ad0c <inc_lock+0x118>)
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	011b      	lsls	r3, r3, #4
 801ac1c:	4413      	add	r3, r2
 801ac1e:	3304      	adds	r3, #4
 801ac20:	681a      	ldr	r2, [r3, #0]
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801ac26:	429a      	cmp	r2, r3
 801ac28:	d109      	bne.n	801ac3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801ac2a:	4a38      	ldr	r2, [pc, #224]	@ (801ad0c <inc_lock+0x118>)
 801ac2c:	68fb      	ldr	r3, [r7, #12]
 801ac2e:	011b      	lsls	r3, r3, #4
 801ac30:	4413      	add	r3, r2
 801ac32:	3308      	adds	r3, #8
 801ac34:	681a      	ldr	r2, [r3, #0]
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801ac3a:	429a      	cmp	r2, r3
 801ac3c:	d006      	beq.n	801ac4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	3301      	adds	r3, #1
 801ac42:	60fb      	str	r3, [r7, #12]
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	2b03      	cmp	r3, #3
 801ac48:	d9dc      	bls.n	801ac04 <inc_lock+0x10>
 801ac4a:	e000      	b.n	801ac4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801ac4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	2b04      	cmp	r3, #4
 801ac52:	d132      	bne.n	801acba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ac54:	2300      	movs	r3, #0
 801ac56:	60fb      	str	r3, [r7, #12]
 801ac58:	e002      	b.n	801ac60 <inc_lock+0x6c>
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	3301      	adds	r3, #1
 801ac5e:	60fb      	str	r3, [r7, #12]
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	2b03      	cmp	r3, #3
 801ac64:	d806      	bhi.n	801ac74 <inc_lock+0x80>
 801ac66:	4a29      	ldr	r2, [pc, #164]	@ (801ad0c <inc_lock+0x118>)
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	011b      	lsls	r3, r3, #4
 801ac6c:	4413      	add	r3, r2
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d1f2      	bne.n	801ac5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	2b04      	cmp	r3, #4
 801ac78:	d101      	bne.n	801ac7e <inc_lock+0x8a>
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	e040      	b.n	801ad00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	681a      	ldr	r2, [r3, #0]
 801ac82:	4922      	ldr	r1, [pc, #136]	@ (801ad0c <inc_lock+0x118>)
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	011b      	lsls	r3, r3, #4
 801ac88:	440b      	add	r3, r1
 801ac8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	689a      	ldr	r2, [r3, #8]
 801ac90:	491e      	ldr	r1, [pc, #120]	@ (801ad0c <inc_lock+0x118>)
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	011b      	lsls	r3, r3, #4
 801ac96:	440b      	add	r3, r1
 801ac98:	3304      	adds	r3, #4
 801ac9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	695a      	ldr	r2, [r3, #20]
 801aca0:	491a      	ldr	r1, [pc, #104]	@ (801ad0c <inc_lock+0x118>)
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	011b      	lsls	r3, r3, #4
 801aca6:	440b      	add	r3, r1
 801aca8:	3308      	adds	r3, #8
 801acaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801acac:	4a17      	ldr	r2, [pc, #92]	@ (801ad0c <inc_lock+0x118>)
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	011b      	lsls	r3, r3, #4
 801acb2:	4413      	add	r3, r2
 801acb4:	330c      	adds	r3, #12
 801acb6:	2200      	movs	r2, #0
 801acb8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801acba:	683b      	ldr	r3, [r7, #0]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d009      	beq.n	801acd4 <inc_lock+0xe0>
 801acc0:	4a12      	ldr	r2, [pc, #72]	@ (801ad0c <inc_lock+0x118>)
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	011b      	lsls	r3, r3, #4
 801acc6:	4413      	add	r3, r2
 801acc8:	330c      	adds	r3, #12
 801acca:	881b      	ldrh	r3, [r3, #0]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d001      	beq.n	801acd4 <inc_lock+0xe0>
 801acd0:	2300      	movs	r3, #0
 801acd2:	e015      	b.n	801ad00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d108      	bne.n	801acec <inc_lock+0xf8>
 801acda:	4a0c      	ldr	r2, [pc, #48]	@ (801ad0c <inc_lock+0x118>)
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	011b      	lsls	r3, r3, #4
 801ace0:	4413      	add	r3, r2
 801ace2:	330c      	adds	r3, #12
 801ace4:	881b      	ldrh	r3, [r3, #0]
 801ace6:	3301      	adds	r3, #1
 801ace8:	b29a      	uxth	r2, r3
 801acea:	e001      	b.n	801acf0 <inc_lock+0xfc>
 801acec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801acf0:	4906      	ldr	r1, [pc, #24]	@ (801ad0c <inc_lock+0x118>)
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	011b      	lsls	r3, r3, #4
 801acf6:	440b      	add	r3, r1
 801acf8:	330c      	adds	r3, #12
 801acfa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	3301      	adds	r3, #1
}
 801ad00:	4618      	mov	r0, r3
 801ad02:	3714      	adds	r7, #20
 801ad04:	46bd      	mov	sp, r7
 801ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad0a:	4770      	bx	lr
 801ad0c:	2400895c 	.word	0x2400895c

0801ad10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b085      	sub	sp, #20
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	3b01      	subs	r3, #1
 801ad1c:	607b      	str	r3, [r7, #4]
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2b03      	cmp	r3, #3
 801ad22:	d825      	bhi.n	801ad70 <dec_lock+0x60>
		n = Files[i].ctr;
 801ad24:	4a17      	ldr	r2, [pc, #92]	@ (801ad84 <dec_lock+0x74>)
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	011b      	lsls	r3, r3, #4
 801ad2a:	4413      	add	r3, r2
 801ad2c:	330c      	adds	r3, #12
 801ad2e:	881b      	ldrh	r3, [r3, #0]
 801ad30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801ad32:	89fb      	ldrh	r3, [r7, #14]
 801ad34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ad38:	d101      	bne.n	801ad3e <dec_lock+0x2e>
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801ad3e:	89fb      	ldrh	r3, [r7, #14]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d002      	beq.n	801ad4a <dec_lock+0x3a>
 801ad44:	89fb      	ldrh	r3, [r7, #14]
 801ad46:	3b01      	subs	r3, #1
 801ad48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801ad4a:	4a0e      	ldr	r2, [pc, #56]	@ (801ad84 <dec_lock+0x74>)
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	011b      	lsls	r3, r3, #4
 801ad50:	4413      	add	r3, r2
 801ad52:	330c      	adds	r3, #12
 801ad54:	89fa      	ldrh	r2, [r7, #14]
 801ad56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ad58:	89fb      	ldrh	r3, [r7, #14]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d105      	bne.n	801ad6a <dec_lock+0x5a>
 801ad5e:	4a09      	ldr	r2, [pc, #36]	@ (801ad84 <dec_lock+0x74>)
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	011b      	lsls	r3, r3, #4
 801ad64:	4413      	add	r3, r2
 801ad66:	2200      	movs	r2, #0
 801ad68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	737b      	strb	r3, [r7, #13]
 801ad6e:	e001      	b.n	801ad74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801ad70:	2302      	movs	r3, #2
 801ad72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801ad74:	7b7b      	ldrb	r3, [r7, #13]
}
 801ad76:	4618      	mov	r0, r3
 801ad78:	3714      	adds	r7, #20
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad80:	4770      	bx	lr
 801ad82:	bf00      	nop
 801ad84:	2400895c 	.word	0x2400895c

0801ad88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801ad88:	b480      	push	{r7}
 801ad8a:	b085      	sub	sp, #20
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ad90:	2300      	movs	r3, #0
 801ad92:	60fb      	str	r3, [r7, #12]
 801ad94:	e010      	b.n	801adb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ad96:	4a0d      	ldr	r2, [pc, #52]	@ (801adcc <clear_lock+0x44>)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	011b      	lsls	r3, r3, #4
 801ad9c:	4413      	add	r3, r2
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	687a      	ldr	r2, [r7, #4]
 801ada2:	429a      	cmp	r2, r3
 801ada4:	d105      	bne.n	801adb2 <clear_lock+0x2a>
 801ada6:	4a09      	ldr	r2, [pc, #36]	@ (801adcc <clear_lock+0x44>)
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	011b      	lsls	r3, r3, #4
 801adac:	4413      	add	r3, r2
 801adae:	2200      	movs	r2, #0
 801adb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	3301      	adds	r3, #1
 801adb6:	60fb      	str	r3, [r7, #12]
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	2b03      	cmp	r3, #3
 801adbc:	d9eb      	bls.n	801ad96 <clear_lock+0xe>
	}
}
 801adbe:	bf00      	nop
 801adc0:	bf00      	nop
 801adc2:	3714      	adds	r7, #20
 801adc4:	46bd      	mov	sp, r7
 801adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adca:	4770      	bx	lr
 801adcc:	2400895c 	.word	0x2400895c

0801add0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b086      	sub	sp, #24
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801add8:	2300      	movs	r3, #0
 801adda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	78db      	ldrb	r3, [r3, #3]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d034      	beq.n	801ae4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ade8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	7858      	ldrb	r0, [r3, #1]
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801adf4:	2301      	movs	r3, #1
 801adf6:	697a      	ldr	r2, [r7, #20]
 801adf8:	f7ff fd3e 	bl	801a878 <disk_write>
 801adfc:	4603      	mov	r3, r0
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d002      	beq.n	801ae08 <sync_window+0x38>
			res = FR_DISK_ERR;
 801ae02:	2301      	movs	r3, #1
 801ae04:	73fb      	strb	r3, [r7, #15]
 801ae06:	e022      	b.n	801ae4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	6a1b      	ldr	r3, [r3, #32]
 801ae12:	697a      	ldr	r2, [r7, #20]
 801ae14:	1ad2      	subs	r2, r2, r3
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	699b      	ldr	r3, [r3, #24]
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d217      	bcs.n	801ae4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	789b      	ldrb	r3, [r3, #2]
 801ae22:	613b      	str	r3, [r7, #16]
 801ae24:	e010      	b.n	801ae48 <sync_window+0x78>
					wsect += fs->fsize;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	699b      	ldr	r3, [r3, #24]
 801ae2a:	697a      	ldr	r2, [r7, #20]
 801ae2c:	4413      	add	r3, r2
 801ae2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	7858      	ldrb	r0, [r3, #1]
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ae3a:	2301      	movs	r3, #1
 801ae3c:	697a      	ldr	r2, [r7, #20]
 801ae3e:	f7ff fd1b 	bl	801a878 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ae42:	693b      	ldr	r3, [r7, #16]
 801ae44:	3b01      	subs	r3, #1
 801ae46:	613b      	str	r3, [r7, #16]
 801ae48:	693b      	ldr	r3, [r7, #16]
 801ae4a:	2b01      	cmp	r3, #1
 801ae4c:	d8eb      	bhi.n	801ae26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801ae4e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae50:	4618      	mov	r0, r3
 801ae52:	3718      	adds	r7, #24
 801ae54:	46bd      	mov	sp, r7
 801ae56:	bd80      	pop	{r7, pc}

0801ae58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b084      	sub	sp, #16
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
 801ae60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801ae62:	2300      	movs	r3, #0
 801ae64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae6a:	683a      	ldr	r2, [r7, #0]
 801ae6c:	429a      	cmp	r2, r3
 801ae6e:	d01b      	beq.n	801aea8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801ae70:	6878      	ldr	r0, [r7, #4]
 801ae72:	f7ff ffad 	bl	801add0 <sync_window>
 801ae76:	4603      	mov	r3, r0
 801ae78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801ae7a:	7bfb      	ldrb	r3, [r7, #15]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d113      	bne.n	801aea8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	7858      	ldrb	r0, [r3, #1]
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	683a      	ldr	r2, [r7, #0]
 801ae8e:	f7ff fcd3 	bl	801a838 <disk_read>
 801ae92:	4603      	mov	r3, r0
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d004      	beq.n	801aea2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801ae98:	f04f 33ff 	mov.w	r3, #4294967295
 801ae9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801ae9e:	2301      	movs	r3, #1
 801aea0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	683a      	ldr	r2, [r7, #0]
 801aea6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 801aeaa:	4618      	mov	r0, r3
 801aeac:	3710      	adds	r7, #16
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}
	...

0801aeb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b084      	sub	sp, #16
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801aebc:	6878      	ldr	r0, [r7, #4]
 801aebe:	f7ff ff87 	bl	801add0 <sync_window>
 801aec2:	4603      	mov	r3, r0
 801aec4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801aec6:	7bfb      	ldrb	r3, [r7, #15]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d158      	bne.n	801af7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	2b03      	cmp	r3, #3
 801aed2:	d148      	bne.n	801af66 <sync_fs+0xb2>
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	791b      	ldrb	r3, [r3, #4]
 801aed8:	2b01      	cmp	r3, #1
 801aeda:	d144      	bne.n	801af66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	3330      	adds	r3, #48	@ 0x30
 801aee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801aee4:	2100      	movs	r1, #0
 801aee6:	4618      	mov	r0, r3
 801aee8:	f7ff fda8 	bl	801aa3c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	3330      	adds	r3, #48	@ 0x30
 801aef0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801aef4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801aef8:	4618      	mov	r0, r3
 801aefa:	f7ff fd37 	bl	801a96c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	3330      	adds	r3, #48	@ 0x30
 801af02:	4921      	ldr	r1, [pc, #132]	@ (801af88 <sync_fs+0xd4>)
 801af04:	4618      	mov	r0, r3
 801af06:	f7ff fd4c 	bl	801a9a2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	3330      	adds	r3, #48	@ 0x30
 801af0e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801af12:	491e      	ldr	r1, [pc, #120]	@ (801af8c <sync_fs+0xd8>)
 801af14:	4618      	mov	r0, r3
 801af16:	f7ff fd44 	bl	801a9a2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	3330      	adds	r3, #48	@ 0x30
 801af1e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	691b      	ldr	r3, [r3, #16]
 801af26:	4619      	mov	r1, r3
 801af28:	4610      	mov	r0, r2
 801af2a:	f7ff fd3a 	bl	801a9a2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	3330      	adds	r3, #48	@ 0x30
 801af32:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	68db      	ldr	r3, [r3, #12]
 801af3a:	4619      	mov	r1, r3
 801af3c:	4610      	mov	r0, r2
 801af3e:	f7ff fd30 	bl	801a9a2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	69db      	ldr	r3, [r3, #28]
 801af46:	1c5a      	adds	r2, r3, #1
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	7858      	ldrb	r0, [r3, #1]
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af5a:	2301      	movs	r3, #1
 801af5c:	f7ff fc8c 	bl	801a878 <disk_write>
			fs->fsi_flag = 0;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2200      	movs	r2, #0
 801af64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	785b      	ldrb	r3, [r3, #1]
 801af6a:	2200      	movs	r2, #0
 801af6c:	2100      	movs	r1, #0
 801af6e:	4618      	mov	r0, r3
 801af70:	f7ff fca2 	bl	801a8b8 <disk_ioctl>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d001      	beq.n	801af7e <sync_fs+0xca>
 801af7a:	2301      	movs	r3, #1
 801af7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 801af80:	4618      	mov	r0, r3
 801af82:	3710      	adds	r7, #16
 801af84:	46bd      	mov	sp, r7
 801af86:	bd80      	pop	{r7, pc}
 801af88:	41615252 	.word	0x41615252
 801af8c:	61417272 	.word	0x61417272

0801af90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801af90:	b480      	push	{r7}
 801af92:	b083      	sub	sp, #12
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
 801af98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801af9a:	683b      	ldr	r3, [r7, #0]
 801af9c:	3b02      	subs	r3, #2
 801af9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	695b      	ldr	r3, [r3, #20]
 801afa4:	3b02      	subs	r3, #2
 801afa6:	683a      	ldr	r2, [r7, #0]
 801afa8:	429a      	cmp	r2, r3
 801afaa:	d301      	bcc.n	801afb0 <clust2sect+0x20>
 801afac:	2300      	movs	r3, #0
 801afae:	e008      	b.n	801afc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	895b      	ldrh	r3, [r3, #10]
 801afb4:	461a      	mov	r2, r3
 801afb6:	683b      	ldr	r3, [r7, #0]
 801afb8:	fb03 f202 	mul.w	r2, r3, r2
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afc0:	4413      	add	r3, r2
}
 801afc2:	4618      	mov	r0, r3
 801afc4:	370c      	adds	r7, #12
 801afc6:	46bd      	mov	sp, r7
 801afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afcc:	4770      	bx	lr

0801afce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801afce:	b580      	push	{r7, lr}
 801afd0:	b086      	sub	sp, #24
 801afd2:	af00      	add	r7, sp, #0
 801afd4:	6078      	str	r0, [r7, #4]
 801afd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801afde:	683b      	ldr	r3, [r7, #0]
 801afe0:	2b01      	cmp	r3, #1
 801afe2:	d904      	bls.n	801afee <get_fat+0x20>
 801afe4:	693b      	ldr	r3, [r7, #16]
 801afe6:	695b      	ldr	r3, [r3, #20]
 801afe8:	683a      	ldr	r2, [r7, #0]
 801afea:	429a      	cmp	r2, r3
 801afec:	d302      	bcc.n	801aff4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801afee:	2301      	movs	r3, #1
 801aff0:	617b      	str	r3, [r7, #20]
 801aff2:	e08e      	b.n	801b112 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801aff4:	f04f 33ff 	mov.w	r3, #4294967295
 801aff8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801affa:	693b      	ldr	r3, [r7, #16]
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	2b03      	cmp	r3, #3
 801b000:	d061      	beq.n	801b0c6 <get_fat+0xf8>
 801b002:	2b03      	cmp	r3, #3
 801b004:	dc7b      	bgt.n	801b0fe <get_fat+0x130>
 801b006:	2b01      	cmp	r3, #1
 801b008:	d002      	beq.n	801b010 <get_fat+0x42>
 801b00a:	2b02      	cmp	r3, #2
 801b00c:	d041      	beq.n	801b092 <get_fat+0xc4>
 801b00e:	e076      	b.n	801b0fe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b010:	683b      	ldr	r3, [r7, #0]
 801b012:	60fb      	str	r3, [r7, #12]
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	085b      	lsrs	r3, r3, #1
 801b018:	68fa      	ldr	r2, [r7, #12]
 801b01a:	4413      	add	r3, r2
 801b01c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b01e:	693b      	ldr	r3, [r7, #16]
 801b020:	6a1a      	ldr	r2, [r3, #32]
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	0a5b      	lsrs	r3, r3, #9
 801b026:	4413      	add	r3, r2
 801b028:	4619      	mov	r1, r3
 801b02a:	6938      	ldr	r0, [r7, #16]
 801b02c:	f7ff ff14 	bl	801ae58 <move_window>
 801b030:	4603      	mov	r3, r0
 801b032:	2b00      	cmp	r3, #0
 801b034:	d166      	bne.n	801b104 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	1c5a      	adds	r2, r3, #1
 801b03a:	60fa      	str	r2, [r7, #12]
 801b03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b040:	693a      	ldr	r2, [r7, #16]
 801b042:	4413      	add	r3, r2
 801b044:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b048:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b04a:	693b      	ldr	r3, [r7, #16]
 801b04c:	6a1a      	ldr	r2, [r3, #32]
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	0a5b      	lsrs	r3, r3, #9
 801b052:	4413      	add	r3, r2
 801b054:	4619      	mov	r1, r3
 801b056:	6938      	ldr	r0, [r7, #16]
 801b058:	f7ff fefe 	bl	801ae58 <move_window>
 801b05c:	4603      	mov	r3, r0
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d152      	bne.n	801b108 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b068:	693a      	ldr	r2, [r7, #16]
 801b06a:	4413      	add	r3, r2
 801b06c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b070:	021b      	lsls	r3, r3, #8
 801b072:	68ba      	ldr	r2, [r7, #8]
 801b074:	4313      	orrs	r3, r2
 801b076:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	f003 0301 	and.w	r3, r3, #1
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d002      	beq.n	801b088 <get_fat+0xba>
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	091b      	lsrs	r3, r3, #4
 801b086:	e002      	b.n	801b08e <get_fat+0xc0>
 801b088:	68bb      	ldr	r3, [r7, #8]
 801b08a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b08e:	617b      	str	r3, [r7, #20]
			break;
 801b090:	e03f      	b.n	801b112 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b092:	693b      	ldr	r3, [r7, #16]
 801b094:	6a1a      	ldr	r2, [r3, #32]
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	0a1b      	lsrs	r3, r3, #8
 801b09a:	4413      	add	r3, r2
 801b09c:	4619      	mov	r1, r3
 801b09e:	6938      	ldr	r0, [r7, #16]
 801b0a0:	f7ff feda 	bl	801ae58 <move_window>
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d130      	bne.n	801b10c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b0aa:	693b      	ldr	r3, [r7, #16]
 801b0ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b0b0:	683b      	ldr	r3, [r7, #0]
 801b0b2:	005b      	lsls	r3, r3, #1
 801b0b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801b0b8:	4413      	add	r3, r2
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	f7ff fc1a 	bl	801a8f4 <ld_word>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	617b      	str	r3, [r7, #20]
			break;
 801b0c4:	e025      	b.n	801b112 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b0c6:	693b      	ldr	r3, [r7, #16]
 801b0c8:	6a1a      	ldr	r2, [r3, #32]
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	09db      	lsrs	r3, r3, #7
 801b0ce:	4413      	add	r3, r2
 801b0d0:	4619      	mov	r1, r3
 801b0d2:	6938      	ldr	r0, [r7, #16]
 801b0d4:	f7ff fec0 	bl	801ae58 <move_window>
 801b0d8:	4603      	mov	r3, r0
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d118      	bne.n	801b110 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b0de:	693b      	ldr	r3, [r7, #16]
 801b0e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	009b      	lsls	r3, r3, #2
 801b0e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b0ec:	4413      	add	r3, r2
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	f7ff fc19 	bl	801a926 <ld_dword>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b0fa:	617b      	str	r3, [r7, #20]
			break;
 801b0fc:	e009      	b.n	801b112 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b0fe:	2301      	movs	r3, #1
 801b100:	617b      	str	r3, [r7, #20]
 801b102:	e006      	b.n	801b112 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b104:	bf00      	nop
 801b106:	e004      	b.n	801b112 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b108:	bf00      	nop
 801b10a:	e002      	b.n	801b112 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b10c:	bf00      	nop
 801b10e:	e000      	b.n	801b112 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b110:	bf00      	nop
		}
	}

	return val;
 801b112:	697b      	ldr	r3, [r7, #20]
}
 801b114:	4618      	mov	r0, r3
 801b116:	3718      	adds	r7, #24
 801b118:	46bd      	mov	sp, r7
 801b11a:	bd80      	pop	{r7, pc}

0801b11c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b11c:	b590      	push	{r4, r7, lr}
 801b11e:	b089      	sub	sp, #36	@ 0x24
 801b120:	af00      	add	r7, sp, #0
 801b122:	60f8      	str	r0, [r7, #12]
 801b124:	60b9      	str	r1, [r7, #8]
 801b126:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b128:	2302      	movs	r3, #2
 801b12a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b12c:	68bb      	ldr	r3, [r7, #8]
 801b12e:	2b01      	cmp	r3, #1
 801b130:	f240 80d9 	bls.w	801b2e6 <put_fat+0x1ca>
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	695b      	ldr	r3, [r3, #20]
 801b138:	68ba      	ldr	r2, [r7, #8]
 801b13a:	429a      	cmp	r2, r3
 801b13c:	f080 80d3 	bcs.w	801b2e6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	781b      	ldrb	r3, [r3, #0]
 801b144:	2b03      	cmp	r3, #3
 801b146:	f000 8096 	beq.w	801b276 <put_fat+0x15a>
 801b14a:	2b03      	cmp	r3, #3
 801b14c:	f300 80cb 	bgt.w	801b2e6 <put_fat+0x1ca>
 801b150:	2b01      	cmp	r3, #1
 801b152:	d002      	beq.n	801b15a <put_fat+0x3e>
 801b154:	2b02      	cmp	r3, #2
 801b156:	d06e      	beq.n	801b236 <put_fat+0x11a>
 801b158:	e0c5      	b.n	801b2e6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	61bb      	str	r3, [r7, #24]
 801b15e:	69bb      	ldr	r3, [r7, #24]
 801b160:	085b      	lsrs	r3, r3, #1
 801b162:	69ba      	ldr	r2, [r7, #24]
 801b164:	4413      	add	r3, r2
 801b166:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	6a1a      	ldr	r2, [r3, #32]
 801b16c:	69bb      	ldr	r3, [r7, #24]
 801b16e:	0a5b      	lsrs	r3, r3, #9
 801b170:	4413      	add	r3, r2
 801b172:	4619      	mov	r1, r3
 801b174:	68f8      	ldr	r0, [r7, #12]
 801b176:	f7ff fe6f 	bl	801ae58 <move_window>
 801b17a:	4603      	mov	r3, r0
 801b17c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b17e:	7ffb      	ldrb	r3, [r7, #31]
 801b180:	2b00      	cmp	r3, #0
 801b182:	f040 80a9 	bne.w	801b2d8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b18c:	69bb      	ldr	r3, [r7, #24]
 801b18e:	1c59      	adds	r1, r3, #1
 801b190:	61b9      	str	r1, [r7, #24]
 801b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b196:	4413      	add	r3, r2
 801b198:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b19a:	68bb      	ldr	r3, [r7, #8]
 801b19c:	f003 0301 	and.w	r3, r3, #1
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d00d      	beq.n	801b1c0 <put_fat+0xa4>
 801b1a4:	697b      	ldr	r3, [r7, #20]
 801b1a6:	781b      	ldrb	r3, [r3, #0]
 801b1a8:	b25b      	sxtb	r3, r3
 801b1aa:	f003 030f 	and.w	r3, r3, #15
 801b1ae:	b25a      	sxtb	r2, r3
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	b25b      	sxtb	r3, r3
 801b1b4:	011b      	lsls	r3, r3, #4
 801b1b6:	b25b      	sxtb	r3, r3
 801b1b8:	4313      	orrs	r3, r2
 801b1ba:	b25b      	sxtb	r3, r3
 801b1bc:	b2db      	uxtb	r3, r3
 801b1be:	e001      	b.n	801b1c4 <put_fat+0xa8>
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	697a      	ldr	r2, [r7, #20]
 801b1c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	2201      	movs	r2, #1
 801b1cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	6a1a      	ldr	r2, [r3, #32]
 801b1d2:	69bb      	ldr	r3, [r7, #24]
 801b1d4:	0a5b      	lsrs	r3, r3, #9
 801b1d6:	4413      	add	r3, r2
 801b1d8:	4619      	mov	r1, r3
 801b1da:	68f8      	ldr	r0, [r7, #12]
 801b1dc:	f7ff fe3c 	bl	801ae58 <move_window>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b1e4:	7ffb      	ldrb	r3, [r7, #31]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d178      	bne.n	801b2dc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b1f0:	69bb      	ldr	r3, [r7, #24]
 801b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b1f6:	4413      	add	r3, r2
 801b1f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b1fa:	68bb      	ldr	r3, [r7, #8]
 801b1fc:	f003 0301 	and.w	r3, r3, #1
 801b200:	2b00      	cmp	r3, #0
 801b202:	d003      	beq.n	801b20c <put_fat+0xf0>
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	091b      	lsrs	r3, r3, #4
 801b208:	b2db      	uxtb	r3, r3
 801b20a:	e00e      	b.n	801b22a <put_fat+0x10e>
 801b20c:	697b      	ldr	r3, [r7, #20]
 801b20e:	781b      	ldrb	r3, [r3, #0]
 801b210:	b25b      	sxtb	r3, r3
 801b212:	f023 030f 	bic.w	r3, r3, #15
 801b216:	b25a      	sxtb	r2, r3
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	0a1b      	lsrs	r3, r3, #8
 801b21c:	b25b      	sxtb	r3, r3
 801b21e:	f003 030f 	and.w	r3, r3, #15
 801b222:	b25b      	sxtb	r3, r3
 801b224:	4313      	orrs	r3, r2
 801b226:	b25b      	sxtb	r3, r3
 801b228:	b2db      	uxtb	r3, r3
 801b22a:	697a      	ldr	r2, [r7, #20]
 801b22c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	2201      	movs	r2, #1
 801b232:	70da      	strb	r2, [r3, #3]
			break;
 801b234:	e057      	b.n	801b2e6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	6a1a      	ldr	r2, [r3, #32]
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	0a1b      	lsrs	r3, r3, #8
 801b23e:	4413      	add	r3, r2
 801b240:	4619      	mov	r1, r3
 801b242:	68f8      	ldr	r0, [r7, #12]
 801b244:	f7ff fe08 	bl	801ae58 <move_window>
 801b248:	4603      	mov	r3, r0
 801b24a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b24c:	7ffb      	ldrb	r3, [r7, #31]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d146      	bne.n	801b2e0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	005b      	lsls	r3, r3, #1
 801b25c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801b260:	4413      	add	r3, r2
 801b262:	687a      	ldr	r2, [r7, #4]
 801b264:	b292      	uxth	r2, r2
 801b266:	4611      	mov	r1, r2
 801b268:	4618      	mov	r0, r3
 801b26a:	f7ff fb7f 	bl	801a96c <st_word>
			fs->wflag = 1;
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	2201      	movs	r2, #1
 801b272:	70da      	strb	r2, [r3, #3]
			break;
 801b274:	e037      	b.n	801b2e6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	6a1a      	ldr	r2, [r3, #32]
 801b27a:	68bb      	ldr	r3, [r7, #8]
 801b27c:	09db      	lsrs	r3, r3, #7
 801b27e:	4413      	add	r3, r2
 801b280:	4619      	mov	r1, r3
 801b282:	68f8      	ldr	r0, [r7, #12]
 801b284:	f7ff fde8 	bl	801ae58 <move_window>
 801b288:	4603      	mov	r3, r0
 801b28a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b28c:	7ffb      	ldrb	r3, [r7, #31]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d128      	bne.n	801b2e4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b2a6:	4413      	add	r3, r2
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	f7ff fb3c 	bl	801a926 <ld_dword>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b2b4:	4323      	orrs	r3, r4
 801b2b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b2be:	68bb      	ldr	r3, [r7, #8]
 801b2c0:	009b      	lsls	r3, r3, #2
 801b2c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b2c6:	4413      	add	r3, r2
 801b2c8:	6879      	ldr	r1, [r7, #4]
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7ff fb69 	bl	801a9a2 <st_dword>
			fs->wflag = 1;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	2201      	movs	r2, #1
 801b2d4:	70da      	strb	r2, [r3, #3]
			break;
 801b2d6:	e006      	b.n	801b2e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b2d8:	bf00      	nop
 801b2da:	e004      	b.n	801b2e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b2dc:	bf00      	nop
 801b2de:	e002      	b.n	801b2e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b2e0:	bf00      	nop
 801b2e2:	e000      	b.n	801b2e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b2e4:	bf00      	nop
		}
	}
	return res;
 801b2e6:	7ffb      	ldrb	r3, [r7, #31]
}
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	3724      	adds	r7, #36	@ 0x24
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd90      	pop	{r4, r7, pc}

0801b2f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b088      	sub	sp, #32
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	60f8      	str	r0, [r7, #12]
 801b2f8:	60b9      	str	r1, [r7, #8]
 801b2fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	2b01      	cmp	r3, #1
 801b30a:	d904      	bls.n	801b316 <remove_chain+0x26>
 801b30c:	69bb      	ldr	r3, [r7, #24]
 801b30e:	695b      	ldr	r3, [r3, #20]
 801b310:	68ba      	ldr	r2, [r7, #8]
 801b312:	429a      	cmp	r2, r3
 801b314:	d301      	bcc.n	801b31a <remove_chain+0x2a>
 801b316:	2302      	movs	r3, #2
 801b318:	e04b      	b.n	801b3b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d00c      	beq.n	801b33a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b320:	f04f 32ff 	mov.w	r2, #4294967295
 801b324:	6879      	ldr	r1, [r7, #4]
 801b326:	69b8      	ldr	r0, [r7, #24]
 801b328:	f7ff fef8 	bl	801b11c <put_fat>
 801b32c:	4603      	mov	r3, r0
 801b32e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b330:	7ffb      	ldrb	r3, [r7, #31]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d001      	beq.n	801b33a <remove_chain+0x4a>
 801b336:	7ffb      	ldrb	r3, [r7, #31]
 801b338:	e03b      	b.n	801b3b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b33a:	68b9      	ldr	r1, [r7, #8]
 801b33c:	68f8      	ldr	r0, [r7, #12]
 801b33e:	f7ff fe46 	bl	801afce <get_fat>
 801b342:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d031      	beq.n	801b3ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b34a:	697b      	ldr	r3, [r7, #20]
 801b34c:	2b01      	cmp	r3, #1
 801b34e:	d101      	bne.n	801b354 <remove_chain+0x64>
 801b350:	2302      	movs	r3, #2
 801b352:	e02e      	b.n	801b3b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b354:	697b      	ldr	r3, [r7, #20]
 801b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b35a:	d101      	bne.n	801b360 <remove_chain+0x70>
 801b35c:	2301      	movs	r3, #1
 801b35e:	e028      	b.n	801b3b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b360:	2200      	movs	r2, #0
 801b362:	68b9      	ldr	r1, [r7, #8]
 801b364:	69b8      	ldr	r0, [r7, #24]
 801b366:	f7ff fed9 	bl	801b11c <put_fat>
 801b36a:	4603      	mov	r3, r0
 801b36c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b36e:	7ffb      	ldrb	r3, [r7, #31]
 801b370:	2b00      	cmp	r3, #0
 801b372:	d001      	beq.n	801b378 <remove_chain+0x88>
 801b374:	7ffb      	ldrb	r3, [r7, #31]
 801b376:	e01c      	b.n	801b3b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b378:	69bb      	ldr	r3, [r7, #24]
 801b37a:	691a      	ldr	r2, [r3, #16]
 801b37c:	69bb      	ldr	r3, [r7, #24]
 801b37e:	695b      	ldr	r3, [r3, #20]
 801b380:	3b02      	subs	r3, #2
 801b382:	429a      	cmp	r2, r3
 801b384:	d20b      	bcs.n	801b39e <remove_chain+0xae>
			fs->free_clst++;
 801b386:	69bb      	ldr	r3, [r7, #24]
 801b388:	691b      	ldr	r3, [r3, #16]
 801b38a:	1c5a      	adds	r2, r3, #1
 801b38c:	69bb      	ldr	r3, [r7, #24]
 801b38e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801b390:	69bb      	ldr	r3, [r7, #24]
 801b392:	791b      	ldrb	r3, [r3, #4]
 801b394:	f043 0301 	orr.w	r3, r3, #1
 801b398:	b2da      	uxtb	r2, r3
 801b39a:	69bb      	ldr	r3, [r7, #24]
 801b39c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b39e:	697b      	ldr	r3, [r7, #20]
 801b3a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b3a2:	69bb      	ldr	r3, [r7, #24]
 801b3a4:	695b      	ldr	r3, [r3, #20]
 801b3a6:	68ba      	ldr	r2, [r7, #8]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d3c6      	bcc.n	801b33a <remove_chain+0x4a>
 801b3ac:	e000      	b.n	801b3b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b3ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b3b0:	2300      	movs	r3, #0
}
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	3720      	adds	r7, #32
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	bd80      	pop	{r7, pc}

0801b3ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b3ba:	b580      	push	{r7, lr}
 801b3bc:	b088      	sub	sp, #32
 801b3be:	af00      	add	r7, sp, #0
 801b3c0:	6078      	str	r0, [r7, #4]
 801b3c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b3ca:	683b      	ldr	r3, [r7, #0]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d10d      	bne.n	801b3ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b3d0:	693b      	ldr	r3, [r7, #16]
 801b3d2:	68db      	ldr	r3, [r3, #12]
 801b3d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b3d6:	69bb      	ldr	r3, [r7, #24]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d004      	beq.n	801b3e6 <create_chain+0x2c>
 801b3dc:	693b      	ldr	r3, [r7, #16]
 801b3de:	695b      	ldr	r3, [r3, #20]
 801b3e0:	69ba      	ldr	r2, [r7, #24]
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d31b      	bcc.n	801b41e <create_chain+0x64>
 801b3e6:	2301      	movs	r3, #1
 801b3e8:	61bb      	str	r3, [r7, #24]
 801b3ea:	e018      	b.n	801b41e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b3ec:	6839      	ldr	r1, [r7, #0]
 801b3ee:	6878      	ldr	r0, [r7, #4]
 801b3f0:	f7ff fded 	bl	801afce <get_fat>
 801b3f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	2b01      	cmp	r3, #1
 801b3fa:	d801      	bhi.n	801b400 <create_chain+0x46>
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	e070      	b.n	801b4e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b406:	d101      	bne.n	801b40c <create_chain+0x52>
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	e06a      	b.n	801b4e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b40c:	693b      	ldr	r3, [r7, #16]
 801b40e:	695b      	ldr	r3, [r3, #20]
 801b410:	68fa      	ldr	r2, [r7, #12]
 801b412:	429a      	cmp	r2, r3
 801b414:	d201      	bcs.n	801b41a <create_chain+0x60>
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	e063      	b.n	801b4e2 <create_chain+0x128>
		scl = clst;
 801b41a:	683b      	ldr	r3, [r7, #0]
 801b41c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b41e:	69bb      	ldr	r3, [r7, #24]
 801b420:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b422:	69fb      	ldr	r3, [r7, #28]
 801b424:	3301      	adds	r3, #1
 801b426:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b428:	693b      	ldr	r3, [r7, #16]
 801b42a:	695b      	ldr	r3, [r3, #20]
 801b42c:	69fa      	ldr	r2, [r7, #28]
 801b42e:	429a      	cmp	r2, r3
 801b430:	d307      	bcc.n	801b442 <create_chain+0x88>
				ncl = 2;
 801b432:	2302      	movs	r3, #2
 801b434:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b436:	69fa      	ldr	r2, [r7, #28]
 801b438:	69bb      	ldr	r3, [r7, #24]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d901      	bls.n	801b442 <create_chain+0x88>
 801b43e:	2300      	movs	r3, #0
 801b440:	e04f      	b.n	801b4e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b442:	69f9      	ldr	r1, [r7, #28]
 801b444:	6878      	ldr	r0, [r7, #4]
 801b446:	f7ff fdc2 	bl	801afce <get_fat>
 801b44a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d00e      	beq.n	801b470 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	2b01      	cmp	r3, #1
 801b456:	d003      	beq.n	801b460 <create_chain+0xa6>
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b45e:	d101      	bne.n	801b464 <create_chain+0xaa>
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	e03e      	b.n	801b4e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b464:	69fa      	ldr	r2, [r7, #28]
 801b466:	69bb      	ldr	r3, [r7, #24]
 801b468:	429a      	cmp	r2, r3
 801b46a:	d1da      	bne.n	801b422 <create_chain+0x68>
 801b46c:	2300      	movs	r3, #0
 801b46e:	e038      	b.n	801b4e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b470:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b472:	f04f 32ff 	mov.w	r2, #4294967295
 801b476:	69f9      	ldr	r1, [r7, #28]
 801b478:	6938      	ldr	r0, [r7, #16]
 801b47a:	f7ff fe4f 	bl	801b11c <put_fat>
 801b47e:	4603      	mov	r3, r0
 801b480:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b482:	7dfb      	ldrb	r3, [r7, #23]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d109      	bne.n	801b49c <create_chain+0xe2>
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d006      	beq.n	801b49c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b48e:	69fa      	ldr	r2, [r7, #28]
 801b490:	6839      	ldr	r1, [r7, #0]
 801b492:	6938      	ldr	r0, [r7, #16]
 801b494:	f7ff fe42 	bl	801b11c <put_fat>
 801b498:	4603      	mov	r3, r0
 801b49a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b49c:	7dfb      	ldrb	r3, [r7, #23]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d116      	bne.n	801b4d0 <create_chain+0x116>
		fs->last_clst = ncl;
 801b4a2:	693b      	ldr	r3, [r7, #16]
 801b4a4:	69fa      	ldr	r2, [r7, #28]
 801b4a6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b4a8:	693b      	ldr	r3, [r7, #16]
 801b4aa:	691a      	ldr	r2, [r3, #16]
 801b4ac:	693b      	ldr	r3, [r7, #16]
 801b4ae:	695b      	ldr	r3, [r3, #20]
 801b4b0:	3b02      	subs	r3, #2
 801b4b2:	429a      	cmp	r2, r3
 801b4b4:	d804      	bhi.n	801b4c0 <create_chain+0x106>
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	691b      	ldr	r3, [r3, #16]
 801b4ba:	1e5a      	subs	r2, r3, #1
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801b4c0:	693b      	ldr	r3, [r7, #16]
 801b4c2:	791b      	ldrb	r3, [r3, #4]
 801b4c4:	f043 0301 	orr.w	r3, r3, #1
 801b4c8:	b2da      	uxtb	r2, r3
 801b4ca:	693b      	ldr	r3, [r7, #16]
 801b4cc:	711a      	strb	r2, [r3, #4]
 801b4ce:	e007      	b.n	801b4e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b4d0:	7dfb      	ldrb	r3, [r7, #23]
 801b4d2:	2b01      	cmp	r3, #1
 801b4d4:	d102      	bne.n	801b4dc <create_chain+0x122>
 801b4d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b4da:	e000      	b.n	801b4de <create_chain+0x124>
 801b4dc:	2301      	movs	r3, #1
 801b4de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b4e0:	69fb      	ldr	r3, [r7, #28]
}
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	3720      	adds	r7, #32
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bd80      	pop	{r7, pc}

0801b4ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b4ea:	b480      	push	{r7}
 801b4ec:	b087      	sub	sp, #28
 801b4ee:	af00      	add	r7, sp, #0
 801b4f0:	6078      	str	r0, [r7, #4]
 801b4f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b4fe:	3304      	adds	r3, #4
 801b500:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b502:	683b      	ldr	r3, [r7, #0]
 801b504:	0a5b      	lsrs	r3, r3, #9
 801b506:	68fa      	ldr	r2, [r7, #12]
 801b508:	8952      	ldrh	r2, [r2, #10]
 801b50a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b50e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b510:	693b      	ldr	r3, [r7, #16]
 801b512:	1d1a      	adds	r2, r3, #4
 801b514:	613a      	str	r2, [r7, #16]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b51a:	68bb      	ldr	r3, [r7, #8]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d101      	bne.n	801b524 <clmt_clust+0x3a>
 801b520:	2300      	movs	r3, #0
 801b522:	e010      	b.n	801b546 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801b524:	697a      	ldr	r2, [r7, #20]
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	429a      	cmp	r2, r3
 801b52a:	d307      	bcc.n	801b53c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801b52c:	697a      	ldr	r2, [r7, #20]
 801b52e:	68bb      	ldr	r3, [r7, #8]
 801b530:	1ad3      	subs	r3, r2, r3
 801b532:	617b      	str	r3, [r7, #20]
 801b534:	693b      	ldr	r3, [r7, #16]
 801b536:	3304      	adds	r3, #4
 801b538:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b53a:	e7e9      	b.n	801b510 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801b53c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b53e:	693b      	ldr	r3, [r7, #16]
 801b540:	681a      	ldr	r2, [r3, #0]
 801b542:	697b      	ldr	r3, [r7, #20]
 801b544:	4413      	add	r3, r2
}
 801b546:	4618      	mov	r0, r3
 801b548:	371c      	adds	r7, #28
 801b54a:	46bd      	mov	sp, r7
 801b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b550:	4770      	bx	lr

0801b552 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b552:	b580      	push	{r7, lr}
 801b554:	b086      	sub	sp, #24
 801b556:	af00      	add	r7, sp, #0
 801b558:	6078      	str	r0, [r7, #4]
 801b55a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b562:	683b      	ldr	r3, [r7, #0]
 801b564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b568:	d204      	bcs.n	801b574 <dir_sdi+0x22>
 801b56a:	683b      	ldr	r3, [r7, #0]
 801b56c:	f003 031f 	and.w	r3, r3, #31
 801b570:	2b00      	cmp	r3, #0
 801b572:	d001      	beq.n	801b578 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b574:	2302      	movs	r3, #2
 801b576:	e063      	b.n	801b640 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	683a      	ldr	r2, [r7, #0]
 801b57c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	689b      	ldr	r3, [r3, #8]
 801b582:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b584:	697b      	ldr	r3, [r7, #20]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d106      	bne.n	801b598 <dir_sdi+0x46>
 801b58a:	693b      	ldr	r3, [r7, #16]
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	2b02      	cmp	r3, #2
 801b590:	d902      	bls.n	801b598 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b596:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b598:	697b      	ldr	r3, [r7, #20]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d10c      	bne.n	801b5b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	095b      	lsrs	r3, r3, #5
 801b5a2:	693a      	ldr	r2, [r7, #16]
 801b5a4:	8912      	ldrh	r2, [r2, #8]
 801b5a6:	4293      	cmp	r3, r2
 801b5a8:	d301      	bcc.n	801b5ae <dir_sdi+0x5c>
 801b5aa:	2302      	movs	r3, #2
 801b5ac:	e048      	b.n	801b640 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801b5ae:	693b      	ldr	r3, [r7, #16]
 801b5b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	61da      	str	r2, [r3, #28]
 801b5b6:	e029      	b.n	801b60c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b5b8:	693b      	ldr	r3, [r7, #16]
 801b5ba:	895b      	ldrh	r3, [r3, #10]
 801b5bc:	025b      	lsls	r3, r3, #9
 801b5be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b5c0:	e019      	b.n	801b5f6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	6979      	ldr	r1, [r7, #20]
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7ff fd01 	bl	801afce <get_fat>
 801b5cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5d4:	d101      	bne.n	801b5da <dir_sdi+0x88>
 801b5d6:	2301      	movs	r3, #1
 801b5d8:	e032      	b.n	801b640 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b5da:	697b      	ldr	r3, [r7, #20]
 801b5dc:	2b01      	cmp	r3, #1
 801b5de:	d904      	bls.n	801b5ea <dir_sdi+0x98>
 801b5e0:	693b      	ldr	r3, [r7, #16]
 801b5e2:	695b      	ldr	r3, [r3, #20]
 801b5e4:	697a      	ldr	r2, [r7, #20]
 801b5e6:	429a      	cmp	r2, r3
 801b5e8:	d301      	bcc.n	801b5ee <dir_sdi+0x9c>
 801b5ea:	2302      	movs	r3, #2
 801b5ec:	e028      	b.n	801b640 <dir_sdi+0xee>
			ofs -= csz;
 801b5ee:	683a      	ldr	r2, [r7, #0]
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	1ad3      	subs	r3, r2, r3
 801b5f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b5f6:	683a      	ldr	r2, [r7, #0]
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d2e1      	bcs.n	801b5c2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801b5fe:	6979      	ldr	r1, [r7, #20]
 801b600:	6938      	ldr	r0, [r7, #16]
 801b602:	f7ff fcc5 	bl	801af90 <clust2sect>
 801b606:	4602      	mov	r2, r0
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	697a      	ldr	r2, [r7, #20]
 801b610:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	69db      	ldr	r3, [r3, #28]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d101      	bne.n	801b61e <dir_sdi+0xcc>
 801b61a:	2302      	movs	r3, #2
 801b61c:	e010      	b.n	801b640 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	69da      	ldr	r2, [r3, #28]
 801b622:	683b      	ldr	r3, [r7, #0]
 801b624:	0a5b      	lsrs	r3, r3, #9
 801b626:	441a      	add	r2, r3
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b62c:	693b      	ldr	r3, [r7, #16]
 801b62e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b638:	441a      	add	r2, r3
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b63e:	2300      	movs	r3, #0
}
 801b640:	4618      	mov	r0, r3
 801b642:	3718      	adds	r7, #24
 801b644:	46bd      	mov	sp, r7
 801b646:	bd80      	pop	{r7, pc}

0801b648 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b086      	sub	sp, #24
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
 801b650:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	695b      	ldr	r3, [r3, #20]
 801b65c:	3320      	adds	r3, #32
 801b65e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	69db      	ldr	r3, [r3, #28]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d003      	beq.n	801b670 <dir_next+0x28>
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b66e:	d301      	bcc.n	801b674 <dir_next+0x2c>
 801b670:	2304      	movs	r3, #4
 801b672:	e0aa      	b.n	801b7ca <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	f040 8098 	bne.w	801b7b0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	69db      	ldr	r3, [r3, #28]
 801b684:	1c5a      	adds	r2, r3, #1
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	699b      	ldr	r3, [r3, #24]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d10b      	bne.n	801b6aa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b692:	68bb      	ldr	r3, [r7, #8]
 801b694:	095b      	lsrs	r3, r3, #5
 801b696:	68fa      	ldr	r2, [r7, #12]
 801b698:	8912      	ldrh	r2, [r2, #8]
 801b69a:	4293      	cmp	r3, r2
 801b69c:	f0c0 8088 	bcc.w	801b7b0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	61da      	str	r2, [r3, #28]
 801b6a6:	2304      	movs	r3, #4
 801b6a8:	e08f      	b.n	801b7ca <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	0a5b      	lsrs	r3, r3, #9
 801b6ae:	68fa      	ldr	r2, [r7, #12]
 801b6b0:	8952      	ldrh	r2, [r2, #10]
 801b6b2:	3a01      	subs	r2, #1
 801b6b4:	4013      	ands	r3, r2
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d17a      	bne.n	801b7b0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b6ba:	687a      	ldr	r2, [r7, #4]
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	699b      	ldr	r3, [r3, #24]
 801b6c0:	4619      	mov	r1, r3
 801b6c2:	4610      	mov	r0, r2
 801b6c4:	f7ff fc83 	bl	801afce <get_fat>
 801b6c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b6ca:	697b      	ldr	r3, [r7, #20]
 801b6cc:	2b01      	cmp	r3, #1
 801b6ce:	d801      	bhi.n	801b6d4 <dir_next+0x8c>
 801b6d0:	2302      	movs	r3, #2
 801b6d2:	e07a      	b.n	801b7ca <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6da:	d101      	bne.n	801b6e0 <dir_next+0x98>
 801b6dc:	2301      	movs	r3, #1
 801b6de:	e074      	b.n	801b7ca <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	695b      	ldr	r3, [r3, #20]
 801b6e4:	697a      	ldr	r2, [r7, #20]
 801b6e6:	429a      	cmp	r2, r3
 801b6e8:	d358      	bcc.n	801b79c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b6ea:	683b      	ldr	r3, [r7, #0]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d104      	bne.n	801b6fa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	61da      	str	r2, [r3, #28]
 801b6f6:	2304      	movs	r3, #4
 801b6f8:	e067      	b.n	801b7ca <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b6fa:	687a      	ldr	r2, [r7, #4]
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	699b      	ldr	r3, [r3, #24]
 801b700:	4619      	mov	r1, r3
 801b702:	4610      	mov	r0, r2
 801b704:	f7ff fe59 	bl	801b3ba <create_chain>
 801b708:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b70a:	697b      	ldr	r3, [r7, #20]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d101      	bne.n	801b714 <dir_next+0xcc>
 801b710:	2307      	movs	r3, #7
 801b712:	e05a      	b.n	801b7ca <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b714:	697b      	ldr	r3, [r7, #20]
 801b716:	2b01      	cmp	r3, #1
 801b718:	d101      	bne.n	801b71e <dir_next+0xd6>
 801b71a:	2302      	movs	r3, #2
 801b71c:	e055      	b.n	801b7ca <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b71e:	697b      	ldr	r3, [r7, #20]
 801b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b724:	d101      	bne.n	801b72a <dir_next+0xe2>
 801b726:	2301      	movs	r3, #1
 801b728:	e04f      	b.n	801b7ca <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b72a:	68f8      	ldr	r0, [r7, #12]
 801b72c:	f7ff fb50 	bl	801add0 <sync_window>
 801b730:	4603      	mov	r3, r0
 801b732:	2b00      	cmp	r3, #0
 801b734:	d001      	beq.n	801b73a <dir_next+0xf2>
 801b736:	2301      	movs	r3, #1
 801b738:	e047      	b.n	801b7ca <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	3330      	adds	r3, #48	@ 0x30
 801b73e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b742:	2100      	movs	r1, #0
 801b744:	4618      	mov	r0, r3
 801b746:	f7ff f979 	bl	801aa3c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b74a:	2300      	movs	r3, #0
 801b74c:	613b      	str	r3, [r7, #16]
 801b74e:	6979      	ldr	r1, [r7, #20]
 801b750:	68f8      	ldr	r0, [r7, #12]
 801b752:	f7ff fc1d 	bl	801af90 <clust2sect>
 801b756:	4602      	mov	r2, r0
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b75c:	e012      	b.n	801b784 <dir_next+0x13c>
						fs->wflag = 1;
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	2201      	movs	r2, #1
 801b762:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b764:	68f8      	ldr	r0, [r7, #12]
 801b766:	f7ff fb33 	bl	801add0 <sync_window>
 801b76a:	4603      	mov	r3, r0
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d001      	beq.n	801b774 <dir_next+0x12c>
 801b770:	2301      	movs	r3, #1
 801b772:	e02a      	b.n	801b7ca <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b774:	693b      	ldr	r3, [r7, #16]
 801b776:	3301      	adds	r3, #1
 801b778:	613b      	str	r3, [r7, #16]
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b77e:	1c5a      	adds	r2, r3, #1
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	895b      	ldrh	r3, [r3, #10]
 801b788:	461a      	mov	r2, r3
 801b78a:	693b      	ldr	r3, [r7, #16]
 801b78c:	4293      	cmp	r3, r2
 801b78e:	d3e6      	bcc.n	801b75e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b794:	693b      	ldr	r3, [r7, #16]
 801b796:	1ad2      	subs	r2, r2, r3
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	697a      	ldr	r2, [r7, #20]
 801b7a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b7a2:	6979      	ldr	r1, [r7, #20]
 801b7a4:	68f8      	ldr	r0, [r7, #12]
 801b7a6:	f7ff fbf3 	bl	801af90 <clust2sect>
 801b7aa:	4602      	mov	r2, r0
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	68ba      	ldr	r2, [r7, #8]
 801b7b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b7c2:	441a      	add	r2, r3
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b7c8:	2300      	movs	r3, #0
}
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	3718      	adds	r7, #24
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	bd80      	pop	{r7, pc}

0801b7d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b7d2:	b580      	push	{r7, lr}
 801b7d4:	b086      	sub	sp, #24
 801b7d6:	af00      	add	r7, sp, #0
 801b7d8:	6078      	str	r0, [r7, #4]
 801b7da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b7e2:	2100      	movs	r1, #0
 801b7e4:	6878      	ldr	r0, [r7, #4]
 801b7e6:	f7ff feb4 	bl	801b552 <dir_sdi>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b7ee:	7dfb      	ldrb	r3, [r7, #23]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d12b      	bne.n	801b84c <dir_alloc+0x7a>
		n = 0;
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	69db      	ldr	r3, [r3, #28]
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	68f8      	ldr	r0, [r7, #12]
 801b800:	f7ff fb2a 	bl	801ae58 <move_window>
 801b804:	4603      	mov	r3, r0
 801b806:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b808:	7dfb      	ldrb	r3, [r7, #23]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d11d      	bne.n	801b84a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6a1b      	ldr	r3, [r3, #32]
 801b812:	781b      	ldrb	r3, [r3, #0]
 801b814:	2be5      	cmp	r3, #229	@ 0xe5
 801b816:	d004      	beq.n	801b822 <dir_alloc+0x50>
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	6a1b      	ldr	r3, [r3, #32]
 801b81c:	781b      	ldrb	r3, [r3, #0]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d107      	bne.n	801b832 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b822:	693b      	ldr	r3, [r7, #16]
 801b824:	3301      	adds	r3, #1
 801b826:	613b      	str	r3, [r7, #16]
 801b828:	693a      	ldr	r2, [r7, #16]
 801b82a:	683b      	ldr	r3, [r7, #0]
 801b82c:	429a      	cmp	r2, r3
 801b82e:	d102      	bne.n	801b836 <dir_alloc+0x64>
 801b830:	e00c      	b.n	801b84c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b832:	2300      	movs	r3, #0
 801b834:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b836:	2101      	movs	r1, #1
 801b838:	6878      	ldr	r0, [r7, #4]
 801b83a:	f7ff ff05 	bl	801b648 <dir_next>
 801b83e:	4603      	mov	r3, r0
 801b840:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b842:	7dfb      	ldrb	r3, [r7, #23]
 801b844:	2b00      	cmp	r3, #0
 801b846:	d0d7      	beq.n	801b7f8 <dir_alloc+0x26>
 801b848:	e000      	b.n	801b84c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b84a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b84c:	7dfb      	ldrb	r3, [r7, #23]
 801b84e:	2b04      	cmp	r3, #4
 801b850:	d101      	bne.n	801b856 <dir_alloc+0x84>
 801b852:	2307      	movs	r3, #7
 801b854:	75fb      	strb	r3, [r7, #23]
	return res;
 801b856:	7dfb      	ldrb	r3, [r7, #23]
}
 801b858:	4618      	mov	r0, r3
 801b85a:	3718      	adds	r7, #24
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bd80      	pop	{r7, pc}

0801b860 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b084      	sub	sp, #16
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
 801b868:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b86a:	683b      	ldr	r3, [r7, #0]
 801b86c:	331a      	adds	r3, #26
 801b86e:	4618      	mov	r0, r3
 801b870:	f7ff f840 	bl	801a8f4 <ld_word>
 801b874:	4603      	mov	r3, r0
 801b876:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	781b      	ldrb	r3, [r3, #0]
 801b87c:	2b03      	cmp	r3, #3
 801b87e:	d109      	bne.n	801b894 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b880:	683b      	ldr	r3, [r7, #0]
 801b882:	3314      	adds	r3, #20
 801b884:	4618      	mov	r0, r3
 801b886:	f7ff f835 	bl	801a8f4 <ld_word>
 801b88a:	4603      	mov	r3, r0
 801b88c:	041b      	lsls	r3, r3, #16
 801b88e:	68fa      	ldr	r2, [r7, #12]
 801b890:	4313      	orrs	r3, r2
 801b892:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b894:	68fb      	ldr	r3, [r7, #12]
}
 801b896:	4618      	mov	r0, r3
 801b898:	3710      	adds	r7, #16
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bd80      	pop	{r7, pc}

0801b89e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b89e:	b580      	push	{r7, lr}
 801b8a0:	b084      	sub	sp, #16
 801b8a2:	af00      	add	r7, sp, #0
 801b8a4:	60f8      	str	r0, [r7, #12]
 801b8a6:	60b9      	str	r1, [r7, #8]
 801b8a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b8aa:	68bb      	ldr	r3, [r7, #8]
 801b8ac:	331a      	adds	r3, #26
 801b8ae:	687a      	ldr	r2, [r7, #4]
 801b8b0:	b292      	uxth	r2, r2
 801b8b2:	4611      	mov	r1, r2
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7ff f859 	bl	801a96c <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	781b      	ldrb	r3, [r3, #0]
 801b8be:	2b03      	cmp	r3, #3
 801b8c0:	d109      	bne.n	801b8d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	f103 0214 	add.w	r2, r3, #20
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	0c1b      	lsrs	r3, r3, #16
 801b8cc:	b29b      	uxth	r3, r3
 801b8ce:	4619      	mov	r1, r3
 801b8d0:	4610      	mov	r0, r2
 801b8d2:	f7ff f84b 	bl	801a96c <st_word>
	}
}
 801b8d6:	bf00      	nop
 801b8d8:	3710      	adds	r7, #16
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bd80      	pop	{r7, pc}

0801b8de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801b8de:	b580      	push	{r7, lr}
 801b8e0:	b086      	sub	sp, #24
 801b8e2:	af00      	add	r7, sp, #0
 801b8e4:	6078      	str	r0, [r7, #4]
 801b8e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801b8e8:	2304      	movs	r3, #4
 801b8ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801b8f2:	e03c      	b.n	801b96e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	69db      	ldr	r3, [r3, #28]
 801b8f8:	4619      	mov	r1, r3
 801b8fa:	6938      	ldr	r0, [r7, #16]
 801b8fc:	f7ff faac 	bl	801ae58 <move_window>
 801b900:	4603      	mov	r3, r0
 801b902:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b904:	7dfb      	ldrb	r3, [r7, #23]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d136      	bne.n	801b978 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	6a1b      	ldr	r3, [r3, #32]
 801b90e:	781b      	ldrb	r3, [r3, #0]
 801b910:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801b912:	7bfb      	ldrb	r3, [r7, #15]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d102      	bne.n	801b91e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801b918:	2304      	movs	r3, #4
 801b91a:	75fb      	strb	r3, [r7, #23]
 801b91c:	e031      	b.n	801b982 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	6a1b      	ldr	r3, [r3, #32]
 801b922:	330b      	adds	r3, #11
 801b924:	781b      	ldrb	r3, [r3, #0]
 801b926:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b92a:	73bb      	strb	r3, [r7, #14]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	7bba      	ldrb	r2, [r7, #14]
 801b930:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801b932:	7bfb      	ldrb	r3, [r7, #15]
 801b934:	2be5      	cmp	r3, #229	@ 0xe5
 801b936:	d011      	beq.n	801b95c <dir_read+0x7e>
 801b938:	7bfb      	ldrb	r3, [r7, #15]
 801b93a:	2b2e      	cmp	r3, #46	@ 0x2e
 801b93c:	d00e      	beq.n	801b95c <dir_read+0x7e>
 801b93e:	7bbb      	ldrb	r3, [r7, #14]
 801b940:	2b0f      	cmp	r3, #15
 801b942:	d00b      	beq.n	801b95c <dir_read+0x7e>
 801b944:	7bbb      	ldrb	r3, [r7, #14]
 801b946:	f023 0320 	bic.w	r3, r3, #32
 801b94a:	2b08      	cmp	r3, #8
 801b94c:	bf0c      	ite	eq
 801b94e:	2301      	moveq	r3, #1
 801b950:	2300      	movne	r3, #0
 801b952:	b2db      	uxtb	r3, r3
 801b954:	461a      	mov	r2, r3
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	4293      	cmp	r3, r2
 801b95a:	d00f      	beq.n	801b97c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801b95c:	2100      	movs	r1, #0
 801b95e:	6878      	ldr	r0, [r7, #4]
 801b960:	f7ff fe72 	bl	801b648 <dir_next>
 801b964:	4603      	mov	r3, r0
 801b966:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b968:	7dfb      	ldrb	r3, [r7, #23]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d108      	bne.n	801b980 <dir_read+0xa2>
	while (dp->sect) {
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	69db      	ldr	r3, [r3, #28]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d1be      	bne.n	801b8f4 <dir_read+0x16>
 801b976:	e004      	b.n	801b982 <dir_read+0xa4>
		if (res != FR_OK) break;
 801b978:	bf00      	nop
 801b97a:	e002      	b.n	801b982 <dir_read+0xa4>
				break;
 801b97c:	bf00      	nop
 801b97e:	e000      	b.n	801b982 <dir_read+0xa4>
		if (res != FR_OK) break;
 801b980:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801b982:	7dfb      	ldrb	r3, [r7, #23]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d002      	beq.n	801b98e <dir_read+0xb0>
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	2200      	movs	r2, #0
 801b98c:	61da      	str	r2, [r3, #28]
	return res;
 801b98e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b990:	4618      	mov	r0, r3
 801b992:	3718      	adds	r7, #24
 801b994:	46bd      	mov	sp, r7
 801b996:	bd80      	pop	{r7, pc}

0801b998 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b086      	sub	sp, #24
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b9a6:	2100      	movs	r1, #0
 801b9a8:	6878      	ldr	r0, [r7, #4]
 801b9aa:	f7ff fdd2 	bl	801b552 <dir_sdi>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b9b2:	7dfb      	ldrb	r3, [r7, #23]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d001      	beq.n	801b9bc <dir_find+0x24>
 801b9b8:	7dfb      	ldrb	r3, [r7, #23]
 801b9ba:	e03e      	b.n	801ba3a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	69db      	ldr	r3, [r3, #28]
 801b9c0:	4619      	mov	r1, r3
 801b9c2:	6938      	ldr	r0, [r7, #16]
 801b9c4:	f7ff fa48 	bl	801ae58 <move_window>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b9cc:	7dfb      	ldrb	r3, [r7, #23]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d12f      	bne.n	801ba32 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	6a1b      	ldr	r3, [r3, #32]
 801b9d6:	781b      	ldrb	r3, [r3, #0]
 801b9d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b9da:	7bfb      	ldrb	r3, [r7, #15]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d102      	bne.n	801b9e6 <dir_find+0x4e>
 801b9e0:	2304      	movs	r3, #4
 801b9e2:	75fb      	strb	r3, [r7, #23]
 801b9e4:	e028      	b.n	801ba38 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	6a1b      	ldr	r3, [r3, #32]
 801b9ea:	330b      	adds	r3, #11
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b9f2:	b2da      	uxtb	r2, r3
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	6a1b      	ldr	r3, [r3, #32]
 801b9fc:	330b      	adds	r3, #11
 801b9fe:	781b      	ldrb	r3, [r3, #0]
 801ba00:	f003 0308 	and.w	r3, r3, #8
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d10a      	bne.n	801ba1e <dir_find+0x86>
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	6a18      	ldr	r0, [r3, #32]
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	3324      	adds	r3, #36	@ 0x24
 801ba10:	220b      	movs	r2, #11
 801ba12:	4619      	mov	r1, r3
 801ba14:	f7ff f82d 	bl	801aa72 <mem_cmp>
 801ba18:	4603      	mov	r3, r0
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d00b      	beq.n	801ba36 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801ba1e:	2100      	movs	r1, #0
 801ba20:	6878      	ldr	r0, [r7, #4]
 801ba22:	f7ff fe11 	bl	801b648 <dir_next>
 801ba26:	4603      	mov	r3, r0
 801ba28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801ba2a:	7dfb      	ldrb	r3, [r7, #23]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d0c5      	beq.n	801b9bc <dir_find+0x24>
 801ba30:	e002      	b.n	801ba38 <dir_find+0xa0>
		if (res != FR_OK) break;
 801ba32:	bf00      	nop
 801ba34:	e000      	b.n	801ba38 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801ba36:	bf00      	nop

	return res;
 801ba38:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	3718      	adds	r7, #24
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bd80      	pop	{r7, pc}

0801ba42 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801ba42:	b580      	push	{r7, lr}
 801ba44:	b084      	sub	sp, #16
 801ba46:	af00      	add	r7, sp, #0
 801ba48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801ba50:	2101      	movs	r1, #1
 801ba52:	6878      	ldr	r0, [r7, #4]
 801ba54:	f7ff febd 	bl	801b7d2 <dir_alloc>
 801ba58:	4603      	mov	r3, r0
 801ba5a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801ba5c:	7bfb      	ldrb	r3, [r7, #15]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d11c      	bne.n	801ba9c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	69db      	ldr	r3, [r3, #28]
 801ba66:	4619      	mov	r1, r3
 801ba68:	68b8      	ldr	r0, [r7, #8]
 801ba6a:	f7ff f9f5 	bl	801ae58 <move_window>
 801ba6e:	4603      	mov	r3, r0
 801ba70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801ba72:	7bfb      	ldrb	r3, [r7, #15]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d111      	bne.n	801ba9c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	6a1b      	ldr	r3, [r3, #32]
 801ba7c:	2220      	movs	r2, #32
 801ba7e:	2100      	movs	r1, #0
 801ba80:	4618      	mov	r0, r3
 801ba82:	f7fe ffdb 	bl	801aa3c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	6a18      	ldr	r0, [r3, #32]
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	3324      	adds	r3, #36	@ 0x24
 801ba8e:	220b      	movs	r2, #11
 801ba90:	4619      	mov	r1, r3
 801ba92:	f7fe ffb2 	bl	801a9fa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	2201      	movs	r2, #1
 801ba9a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba9e:	4618      	mov	r0, r3
 801baa0:	3710      	adds	r7, #16
 801baa2:	46bd      	mov	sp, r7
 801baa4:	bd80      	pop	{r7, pc}

0801baa6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801baa6:	b580      	push	{r7, lr}
 801baa8:	b086      	sub	sp, #24
 801baaa:	af00      	add	r7, sp, #0
 801baac:	6078      	str	r0, [r7, #4]
 801baae:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801bab0:	683b      	ldr	r3, [r7, #0]
 801bab2:	2200      	movs	r2, #0
 801bab4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	69db      	ldr	r3, [r3, #28]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d04f      	beq.n	801bb5e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801babe:	2300      	movs	r3, #0
 801bac0:	613b      	str	r3, [r7, #16]
 801bac2:	693b      	ldr	r3, [r7, #16]
 801bac4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801bac6:	e022      	b.n	801bb0e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	6a1a      	ldr	r2, [r3, #32]
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	1c59      	adds	r1, r3, #1
 801bad0:	6179      	str	r1, [r7, #20]
 801bad2:	4413      	add	r3, r2
 801bad4:	781b      	ldrb	r3, [r3, #0]
 801bad6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801bad8:	7bfb      	ldrb	r3, [r7, #15]
 801bada:	2b20      	cmp	r3, #32
 801badc:	d016      	beq.n	801bb0c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801bade:	7bfb      	ldrb	r3, [r7, #15]
 801bae0:	2b05      	cmp	r3, #5
 801bae2:	d101      	bne.n	801bae8 <get_fileinfo+0x42>
 801bae4:	23e5      	movs	r3, #229	@ 0xe5
 801bae6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801bae8:	697b      	ldr	r3, [r7, #20]
 801baea:	2b09      	cmp	r3, #9
 801baec:	d106      	bne.n	801bafc <get_fileinfo+0x56>
 801baee:	693b      	ldr	r3, [r7, #16]
 801baf0:	1c5a      	adds	r2, r3, #1
 801baf2:	613a      	str	r2, [r7, #16]
 801baf4:	683a      	ldr	r2, [r7, #0]
 801baf6:	4413      	add	r3, r2
 801baf8:	222e      	movs	r2, #46	@ 0x2e
 801bafa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801bafc:	693b      	ldr	r3, [r7, #16]
 801bafe:	1c5a      	adds	r2, r3, #1
 801bb00:	613a      	str	r2, [r7, #16]
 801bb02:	683a      	ldr	r2, [r7, #0]
 801bb04:	4413      	add	r3, r2
 801bb06:	7bfa      	ldrb	r2, [r7, #15]
 801bb08:	725a      	strb	r2, [r3, #9]
 801bb0a:	e000      	b.n	801bb0e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 801bb0c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801bb0e:	697b      	ldr	r3, [r7, #20]
 801bb10:	2b0a      	cmp	r3, #10
 801bb12:	d9d9      	bls.n	801bac8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801bb14:	683a      	ldr	r2, [r7, #0]
 801bb16:	693b      	ldr	r3, [r7, #16]
 801bb18:	4413      	add	r3, r2
 801bb1a:	3309      	adds	r3, #9
 801bb1c:	2200      	movs	r2, #0
 801bb1e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	6a1b      	ldr	r3, [r3, #32]
 801bb24:	7ada      	ldrb	r2, [r3, #11]
 801bb26:	683b      	ldr	r3, [r7, #0]
 801bb28:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	6a1b      	ldr	r3, [r3, #32]
 801bb2e:	331c      	adds	r3, #28
 801bb30:	4618      	mov	r0, r3
 801bb32:	f7fe fef8 	bl	801a926 <ld_dword>
 801bb36:	4602      	mov	r2, r0
 801bb38:	683b      	ldr	r3, [r7, #0]
 801bb3a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	6a1b      	ldr	r3, [r3, #32]
 801bb40:	3316      	adds	r3, #22
 801bb42:	4618      	mov	r0, r3
 801bb44:	f7fe feef 	bl	801a926 <ld_dword>
 801bb48:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801bb4a:	68bb      	ldr	r3, [r7, #8]
 801bb4c:	b29a      	uxth	r2, r3
 801bb4e:	683b      	ldr	r3, [r7, #0]
 801bb50:	80da      	strh	r2, [r3, #6]
 801bb52:	68bb      	ldr	r3, [r7, #8]
 801bb54:	0c1b      	lsrs	r3, r3, #16
 801bb56:	b29a      	uxth	r2, r3
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	809a      	strh	r2, [r3, #4]
 801bb5c:	e000      	b.n	801bb60 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801bb5e:	bf00      	nop
}
 801bb60:	3718      	adds	r7, #24
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
	...

0801bb68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b088      	sub	sp, #32
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
 801bb70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801bb72:	683b      	ldr	r3, [r7, #0]
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	60fb      	str	r3, [r7, #12]
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	3324      	adds	r3, #36	@ 0x24
 801bb7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801bb7e:	220b      	movs	r2, #11
 801bb80:	2120      	movs	r1, #32
 801bb82:	68b8      	ldr	r0, [r7, #8]
 801bb84:	f7fe ff5a 	bl	801aa3c <mem_set>
	si = i = 0; ni = 8;
 801bb88:	2300      	movs	r3, #0
 801bb8a:	613b      	str	r3, [r7, #16]
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	61fb      	str	r3, [r7, #28]
 801bb90:	2308      	movs	r3, #8
 801bb92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801bb94:	69fb      	ldr	r3, [r7, #28]
 801bb96:	1c5a      	adds	r2, r3, #1
 801bb98:	61fa      	str	r2, [r7, #28]
 801bb9a:	68fa      	ldr	r2, [r7, #12]
 801bb9c:	4413      	add	r3, r2
 801bb9e:	781b      	ldrb	r3, [r3, #0]
 801bba0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801bba2:	7efb      	ldrb	r3, [r7, #27]
 801bba4:	2b20      	cmp	r3, #32
 801bba6:	d94e      	bls.n	801bc46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801bba8:	7efb      	ldrb	r3, [r7, #27]
 801bbaa:	2b2f      	cmp	r3, #47	@ 0x2f
 801bbac:	d006      	beq.n	801bbbc <create_name+0x54>
 801bbae:	7efb      	ldrb	r3, [r7, #27]
 801bbb0:	2b5c      	cmp	r3, #92	@ 0x5c
 801bbb2:	d110      	bne.n	801bbd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801bbb4:	e002      	b.n	801bbbc <create_name+0x54>
 801bbb6:	69fb      	ldr	r3, [r7, #28]
 801bbb8:	3301      	adds	r3, #1
 801bbba:	61fb      	str	r3, [r7, #28]
 801bbbc:	68fa      	ldr	r2, [r7, #12]
 801bbbe:	69fb      	ldr	r3, [r7, #28]
 801bbc0:	4413      	add	r3, r2
 801bbc2:	781b      	ldrb	r3, [r3, #0]
 801bbc4:	2b2f      	cmp	r3, #47	@ 0x2f
 801bbc6:	d0f6      	beq.n	801bbb6 <create_name+0x4e>
 801bbc8:	68fa      	ldr	r2, [r7, #12]
 801bbca:	69fb      	ldr	r3, [r7, #28]
 801bbcc:	4413      	add	r3, r2
 801bbce:	781b      	ldrb	r3, [r3, #0]
 801bbd0:	2b5c      	cmp	r3, #92	@ 0x5c
 801bbd2:	d0f0      	beq.n	801bbb6 <create_name+0x4e>
			break;
 801bbd4:	e038      	b.n	801bc48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801bbd6:	7efb      	ldrb	r3, [r7, #27]
 801bbd8:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbda:	d003      	beq.n	801bbe4 <create_name+0x7c>
 801bbdc:	693a      	ldr	r2, [r7, #16]
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	429a      	cmp	r2, r3
 801bbe2:	d30c      	bcc.n	801bbfe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801bbe4:	697b      	ldr	r3, [r7, #20]
 801bbe6:	2b0b      	cmp	r3, #11
 801bbe8:	d002      	beq.n	801bbf0 <create_name+0x88>
 801bbea:	7efb      	ldrb	r3, [r7, #27]
 801bbec:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbee:	d001      	beq.n	801bbf4 <create_name+0x8c>
 801bbf0:	2306      	movs	r3, #6
 801bbf2:	e044      	b.n	801bc7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801bbf4:	2308      	movs	r3, #8
 801bbf6:	613b      	str	r3, [r7, #16]
 801bbf8:	230b      	movs	r3, #11
 801bbfa:	617b      	str	r3, [r7, #20]
			continue;
 801bbfc:	e022      	b.n	801bc44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801bbfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	da04      	bge.n	801bc10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801bc06:	7efb      	ldrb	r3, [r7, #27]
 801bc08:	3b80      	subs	r3, #128	@ 0x80
 801bc0a:	4a1f      	ldr	r2, [pc, #124]	@ (801bc88 <create_name+0x120>)
 801bc0c:	5cd3      	ldrb	r3, [r2, r3]
 801bc0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801bc10:	7efb      	ldrb	r3, [r7, #27]
 801bc12:	4619      	mov	r1, r3
 801bc14:	481d      	ldr	r0, [pc, #116]	@ (801bc8c <create_name+0x124>)
 801bc16:	f7fe ff53 	bl	801aac0 <chk_chr>
 801bc1a:	4603      	mov	r3, r0
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d001      	beq.n	801bc24 <create_name+0xbc>
 801bc20:	2306      	movs	r3, #6
 801bc22:	e02c      	b.n	801bc7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801bc24:	7efb      	ldrb	r3, [r7, #27]
 801bc26:	2b60      	cmp	r3, #96	@ 0x60
 801bc28:	d905      	bls.n	801bc36 <create_name+0xce>
 801bc2a:	7efb      	ldrb	r3, [r7, #27]
 801bc2c:	2b7a      	cmp	r3, #122	@ 0x7a
 801bc2e:	d802      	bhi.n	801bc36 <create_name+0xce>
 801bc30:	7efb      	ldrb	r3, [r7, #27]
 801bc32:	3b20      	subs	r3, #32
 801bc34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801bc36:	693b      	ldr	r3, [r7, #16]
 801bc38:	1c5a      	adds	r2, r3, #1
 801bc3a:	613a      	str	r2, [r7, #16]
 801bc3c:	68ba      	ldr	r2, [r7, #8]
 801bc3e:	4413      	add	r3, r2
 801bc40:	7efa      	ldrb	r2, [r7, #27]
 801bc42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801bc44:	e7a6      	b.n	801bb94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801bc46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801bc48:	68fa      	ldr	r2, [r7, #12]
 801bc4a:	69fb      	ldr	r3, [r7, #28]
 801bc4c:	441a      	add	r2, r3
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801bc52:	693b      	ldr	r3, [r7, #16]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d101      	bne.n	801bc5c <create_name+0xf4>
 801bc58:	2306      	movs	r3, #6
 801bc5a:	e010      	b.n	801bc7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801bc5c:	68bb      	ldr	r3, [r7, #8]
 801bc5e:	781b      	ldrb	r3, [r3, #0]
 801bc60:	2be5      	cmp	r3, #229	@ 0xe5
 801bc62:	d102      	bne.n	801bc6a <create_name+0x102>
 801bc64:	68bb      	ldr	r3, [r7, #8]
 801bc66:	2205      	movs	r2, #5
 801bc68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801bc6a:	7efb      	ldrb	r3, [r7, #27]
 801bc6c:	2b20      	cmp	r3, #32
 801bc6e:	d801      	bhi.n	801bc74 <create_name+0x10c>
 801bc70:	2204      	movs	r2, #4
 801bc72:	e000      	b.n	801bc76 <create_name+0x10e>
 801bc74:	2200      	movs	r2, #0
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	330b      	adds	r3, #11
 801bc7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801bc7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801bc7e:	4618      	mov	r0, r3
 801bc80:	3720      	adds	r7, #32
 801bc82:	46bd      	mov	sp, r7
 801bc84:	bd80      	pop	{r7, pc}
 801bc86:	bf00      	nop
 801bc88:	08031e98 	.word	0x08031e98
 801bc8c:	0801ee40 	.word	0x0801ee40

0801bc90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801bc90:	b580      	push	{r7, lr}
 801bc92:	b086      	sub	sp, #24
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	6078      	str	r0, [r7, #4]
 801bc98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801bc9e:	693b      	ldr	r3, [r7, #16]
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801bca4:	e002      	b.n	801bcac <follow_path+0x1c>
 801bca6:	683b      	ldr	r3, [r7, #0]
 801bca8:	3301      	adds	r3, #1
 801bcaa:	603b      	str	r3, [r7, #0]
 801bcac:	683b      	ldr	r3, [r7, #0]
 801bcae:	781b      	ldrb	r3, [r3, #0]
 801bcb0:	2b2f      	cmp	r3, #47	@ 0x2f
 801bcb2:	d0f8      	beq.n	801bca6 <follow_path+0x16>
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	781b      	ldrb	r3, [r3, #0]
 801bcb8:	2b5c      	cmp	r3, #92	@ 0x5c
 801bcba:	d0f4      	beq.n	801bca6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801bcbc:	693b      	ldr	r3, [r7, #16]
 801bcbe:	2200      	movs	r2, #0
 801bcc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801bcc2:	683b      	ldr	r3, [r7, #0]
 801bcc4:	781b      	ldrb	r3, [r3, #0]
 801bcc6:	2b1f      	cmp	r3, #31
 801bcc8:	d80a      	bhi.n	801bce0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	2280      	movs	r2, #128	@ 0x80
 801bcce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801bcd2:	2100      	movs	r1, #0
 801bcd4:	6878      	ldr	r0, [r7, #4]
 801bcd6:	f7ff fc3c 	bl	801b552 <dir_sdi>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	75fb      	strb	r3, [r7, #23]
 801bcde:	e043      	b.n	801bd68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bce0:	463b      	mov	r3, r7
 801bce2:	4619      	mov	r1, r3
 801bce4:	6878      	ldr	r0, [r7, #4]
 801bce6:	f7ff ff3f 	bl	801bb68 <create_name>
 801bcea:	4603      	mov	r3, r0
 801bcec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bcee:	7dfb      	ldrb	r3, [r7, #23]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d134      	bne.n	801bd5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801bcf4:	6878      	ldr	r0, [r7, #4]
 801bcf6:	f7ff fe4f 	bl	801b998 <dir_find>
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bd04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801bd06:	7dfb      	ldrb	r3, [r7, #23]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d00a      	beq.n	801bd22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801bd0c:	7dfb      	ldrb	r3, [r7, #23]
 801bd0e:	2b04      	cmp	r3, #4
 801bd10:	d127      	bne.n	801bd62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801bd12:	7afb      	ldrb	r3, [r7, #11]
 801bd14:	f003 0304 	and.w	r3, r3, #4
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d122      	bne.n	801bd62 <follow_path+0xd2>
 801bd1c:	2305      	movs	r3, #5
 801bd1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801bd20:	e01f      	b.n	801bd62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bd22:	7afb      	ldrb	r3, [r7, #11]
 801bd24:	f003 0304 	and.w	r3, r3, #4
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d11c      	bne.n	801bd66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801bd2c:	693b      	ldr	r3, [r7, #16]
 801bd2e:	799b      	ldrb	r3, [r3, #6]
 801bd30:	f003 0310 	and.w	r3, r3, #16
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d102      	bne.n	801bd3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 801bd38:	2305      	movs	r3, #5
 801bd3a:	75fb      	strb	r3, [r7, #23]
 801bd3c:	e014      	b.n	801bd68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	695b      	ldr	r3, [r3, #20]
 801bd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd4c:	4413      	add	r3, r2
 801bd4e:	4619      	mov	r1, r3
 801bd50:	68f8      	ldr	r0, [r7, #12]
 801bd52:	f7ff fd85 	bl	801b860 <ld_clust>
 801bd56:	4602      	mov	r2, r0
 801bd58:	693b      	ldr	r3, [r7, #16]
 801bd5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bd5c:	e7c0      	b.n	801bce0 <follow_path+0x50>
			if (res != FR_OK) break;
 801bd5e:	bf00      	nop
 801bd60:	e002      	b.n	801bd68 <follow_path+0xd8>
				break;
 801bd62:	bf00      	nop
 801bd64:	e000      	b.n	801bd68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bd66:	bf00      	nop
			}
		}
	}

	return res;
 801bd68:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	3718      	adds	r7, #24
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}

0801bd72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801bd72:	b480      	push	{r7}
 801bd74:	b087      	sub	sp, #28
 801bd76:	af00      	add	r7, sp, #0
 801bd78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801bd7a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d031      	beq.n	801bdec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	617b      	str	r3, [r7, #20]
 801bd8e:	e002      	b.n	801bd96 <get_ldnumber+0x24>
 801bd90:	697b      	ldr	r3, [r7, #20]
 801bd92:	3301      	adds	r3, #1
 801bd94:	617b      	str	r3, [r7, #20]
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	781b      	ldrb	r3, [r3, #0]
 801bd9a:	2b20      	cmp	r3, #32
 801bd9c:	d903      	bls.n	801bda6 <get_ldnumber+0x34>
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	2b3a      	cmp	r3, #58	@ 0x3a
 801bda4:	d1f4      	bne.n	801bd90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	781b      	ldrb	r3, [r3, #0]
 801bdaa:	2b3a      	cmp	r3, #58	@ 0x3a
 801bdac:	d11c      	bne.n	801bde8 <get_ldnumber+0x76>
			tp = *path;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	1c5a      	adds	r2, r3, #1
 801bdb8:	60fa      	str	r2, [r7, #12]
 801bdba:	781b      	ldrb	r3, [r3, #0]
 801bdbc:	3b30      	subs	r3, #48	@ 0x30
 801bdbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	2b09      	cmp	r3, #9
 801bdc4:	d80e      	bhi.n	801bde4 <get_ldnumber+0x72>
 801bdc6:	68fa      	ldr	r2, [r7, #12]
 801bdc8:	697b      	ldr	r3, [r7, #20]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d10a      	bne.n	801bde4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bdce:	68bb      	ldr	r3, [r7, #8]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d107      	bne.n	801bde4 <get_ldnumber+0x72>
					vol = (int)i;
 801bdd4:	68bb      	ldr	r3, [r7, #8]
 801bdd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801bdd8:	697b      	ldr	r3, [r7, #20]
 801bdda:	3301      	adds	r3, #1
 801bddc:	617b      	str	r3, [r7, #20]
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	697a      	ldr	r2, [r7, #20]
 801bde2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	e002      	b.n	801bdee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801bde8:	2300      	movs	r3, #0
 801bdea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801bdec:	693b      	ldr	r3, [r7, #16]
}
 801bdee:	4618      	mov	r0, r3
 801bdf0:	371c      	adds	r7, #28
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf8:	4770      	bx	lr
	...

0801bdfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b082      	sub	sp, #8
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
 801be04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	2200      	movs	r2, #0
 801be0a:	70da      	strb	r2, [r3, #3]
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	f04f 32ff 	mov.w	r2, #4294967295
 801be12:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801be14:	6839      	ldr	r1, [r7, #0]
 801be16:	6878      	ldr	r0, [r7, #4]
 801be18:	f7ff f81e 	bl	801ae58 <move_window>
 801be1c:	4603      	mov	r3, r0
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d001      	beq.n	801be26 <check_fs+0x2a>
 801be22:	2304      	movs	r3, #4
 801be24:	e038      	b.n	801be98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	3330      	adds	r3, #48	@ 0x30
 801be2a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801be2e:	4618      	mov	r0, r3
 801be30:	f7fe fd60 	bl	801a8f4 <ld_word>
 801be34:	4603      	mov	r3, r0
 801be36:	461a      	mov	r2, r3
 801be38:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d001      	beq.n	801be44 <check_fs+0x48>
 801be40:	2303      	movs	r3, #3
 801be42:	e029      	b.n	801be98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801be4a:	2be9      	cmp	r3, #233	@ 0xe9
 801be4c:	d009      	beq.n	801be62 <check_fs+0x66>
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801be54:	2beb      	cmp	r3, #235	@ 0xeb
 801be56:	d11e      	bne.n	801be96 <check_fs+0x9a>
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801be5e:	2b90      	cmp	r3, #144	@ 0x90
 801be60:	d119      	bne.n	801be96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	3330      	adds	r3, #48	@ 0x30
 801be66:	3336      	adds	r3, #54	@ 0x36
 801be68:	4618      	mov	r0, r3
 801be6a:	f7fe fd5c 	bl	801a926 <ld_dword>
 801be6e:	4603      	mov	r3, r0
 801be70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801be74:	4a0a      	ldr	r2, [pc, #40]	@ (801bea0 <check_fs+0xa4>)
 801be76:	4293      	cmp	r3, r2
 801be78:	d101      	bne.n	801be7e <check_fs+0x82>
 801be7a:	2300      	movs	r3, #0
 801be7c:	e00c      	b.n	801be98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	3330      	adds	r3, #48	@ 0x30
 801be82:	3352      	adds	r3, #82	@ 0x52
 801be84:	4618      	mov	r0, r3
 801be86:	f7fe fd4e 	bl	801a926 <ld_dword>
 801be8a:	4603      	mov	r3, r0
 801be8c:	4a05      	ldr	r2, [pc, #20]	@ (801bea4 <check_fs+0xa8>)
 801be8e:	4293      	cmp	r3, r2
 801be90:	d101      	bne.n	801be96 <check_fs+0x9a>
 801be92:	2300      	movs	r3, #0
 801be94:	e000      	b.n	801be98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801be96:	2302      	movs	r3, #2
}
 801be98:	4618      	mov	r0, r3
 801be9a:	3708      	adds	r7, #8
 801be9c:	46bd      	mov	sp, r7
 801be9e:	bd80      	pop	{r7, pc}
 801bea0:	00544146 	.word	0x00544146
 801bea4:	33544146 	.word	0x33544146

0801bea8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b096      	sub	sp, #88	@ 0x58
 801beac:	af00      	add	r7, sp, #0
 801beae:	60f8      	str	r0, [r7, #12]
 801beb0:	60b9      	str	r1, [r7, #8]
 801beb2:	4613      	mov	r3, r2
 801beb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801beb6:	68bb      	ldr	r3, [r7, #8]
 801beb8:	2200      	movs	r2, #0
 801beba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bebc:	68f8      	ldr	r0, [r7, #12]
 801bebe:	f7ff ff58 	bl	801bd72 <get_ldnumber>
 801bec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801bec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	da01      	bge.n	801bece <find_volume+0x26>
 801beca:	230b      	movs	r3, #11
 801becc:	e22d      	b.n	801c32a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bece:	4aa1      	ldr	r2, [pc, #644]	@ (801c154 <find_volume+0x2ac>)
 801bed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bed6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d101      	bne.n	801bee2 <find_volume+0x3a>
 801bede:	230c      	movs	r3, #12
 801bee0:	e223      	b.n	801c32a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bee6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801bee8:	79fb      	ldrb	r3, [r7, #7]
 801beea:	f023 0301 	bic.w	r3, r3, #1
 801beee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801bef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bef2:	781b      	ldrb	r3, [r3, #0]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d01a      	beq.n	801bf2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 801bef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801befa:	785b      	ldrb	r3, [r3, #1]
 801befc:	4618      	mov	r0, r3
 801befe:	f7fe fc59 	bl	801a7b4 <disk_status>
 801bf02:	4603      	mov	r3, r0
 801bf04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801bf08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bf0c:	f003 0301 	and.w	r3, r3, #1
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d10c      	bne.n	801bf2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801bf14:	79fb      	ldrb	r3, [r7, #7]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d007      	beq.n	801bf2a <find_volume+0x82>
 801bf1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bf1e:	f003 0304 	and.w	r3, r3, #4
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d001      	beq.n	801bf2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801bf26:	230a      	movs	r3, #10
 801bf28:	e1ff      	b.n	801c32a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	e1fd      	b.n	801c32a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801bf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf30:	2200      	movs	r2, #0
 801bf32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bf34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf36:	b2da      	uxtb	r2, r3
 801bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801bf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf3e:	785b      	ldrb	r3, [r3, #1]
 801bf40:	4618      	mov	r0, r3
 801bf42:	f7fe fc51 	bl	801a7e8 <disk_initialize>
 801bf46:	4603      	mov	r3, r0
 801bf48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801bf4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bf50:	f003 0301 	and.w	r3, r3, #1
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d001      	beq.n	801bf5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801bf58:	2303      	movs	r3, #3
 801bf5a:	e1e6      	b.n	801c32a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801bf5c:	79fb      	ldrb	r3, [r7, #7]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d007      	beq.n	801bf72 <find_volume+0xca>
 801bf62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bf66:	f003 0304 	and.w	r3, r3, #4
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d001      	beq.n	801bf72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801bf6e:	230a      	movs	r3, #10
 801bf70:	e1db      	b.n	801c32a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801bf72:	2300      	movs	r3, #0
 801bf74:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801bf76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bf78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bf7a:	f7ff ff3f 	bl	801bdfc <check_fs>
 801bf7e:	4603      	mov	r3, r0
 801bf80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801bf84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bf88:	2b02      	cmp	r3, #2
 801bf8a:	d149      	bne.n	801c020 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	643b      	str	r3, [r7, #64]	@ 0x40
 801bf90:	e01e      	b.n	801bfd0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801bf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bf98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bf9a:	011b      	lsls	r3, r3, #4
 801bf9c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801bfa0:	4413      	add	r3, r2
 801bfa2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfa6:	3304      	adds	r3, #4
 801bfa8:	781b      	ldrb	r3, [r3, #0]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d006      	beq.n	801bfbc <find_volume+0x114>
 801bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfb0:	3308      	adds	r3, #8
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	f7fe fcb7 	bl	801a926 <ld_dword>
 801bfb8:	4602      	mov	r2, r0
 801bfba:	e000      	b.n	801bfbe <find_volume+0x116>
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bfc0:	009b      	lsls	r3, r3, #2
 801bfc2:	3358      	adds	r3, #88	@ 0x58
 801bfc4:	443b      	add	r3, r7
 801bfc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bfca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bfcc:	3301      	adds	r3, #1
 801bfce:	643b      	str	r3, [r7, #64]	@ 0x40
 801bfd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bfd2:	2b03      	cmp	r3, #3
 801bfd4:	d9dd      	bls.n	801bf92 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801bfda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d002      	beq.n	801bfe6 <find_volume+0x13e>
 801bfe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bfe2:	3b01      	subs	r3, #1
 801bfe4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801bfe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bfe8:	009b      	lsls	r3, r3, #2
 801bfea:	3358      	adds	r3, #88	@ 0x58
 801bfec:	443b      	add	r3, r7
 801bfee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801bff2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801bff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d005      	beq.n	801c006 <find_volume+0x15e>
 801bffa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bffc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bffe:	f7ff fefd 	bl	801bdfc <check_fs>
 801c002:	4603      	mov	r3, r0
 801c004:	e000      	b.n	801c008 <find_volume+0x160>
 801c006:	2303      	movs	r3, #3
 801c008:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c00c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c010:	2b01      	cmp	r3, #1
 801c012:	d905      	bls.n	801c020 <find_volume+0x178>
 801c014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c016:	3301      	adds	r3, #1
 801c018:	643b      	str	r3, [r7, #64]	@ 0x40
 801c01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c01c:	2b03      	cmp	r3, #3
 801c01e:	d9e2      	bls.n	801bfe6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c020:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c024:	2b04      	cmp	r3, #4
 801c026:	d101      	bne.n	801c02c <find_volume+0x184>
 801c028:	2301      	movs	r3, #1
 801c02a:	e17e      	b.n	801c32a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c02c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c030:	2b01      	cmp	r3, #1
 801c032:	d901      	bls.n	801c038 <find_volume+0x190>
 801c034:	230d      	movs	r3, #13
 801c036:	e178      	b.n	801c32a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c03a:	3330      	adds	r3, #48	@ 0x30
 801c03c:	330b      	adds	r3, #11
 801c03e:	4618      	mov	r0, r3
 801c040:	f7fe fc58 	bl	801a8f4 <ld_word>
 801c044:	4603      	mov	r3, r0
 801c046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c04a:	d001      	beq.n	801c050 <find_volume+0x1a8>
 801c04c:	230d      	movs	r3, #13
 801c04e:	e16c      	b.n	801c32a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c052:	3330      	adds	r3, #48	@ 0x30
 801c054:	3316      	adds	r3, #22
 801c056:	4618      	mov	r0, r3
 801c058:	f7fe fc4c 	bl	801a8f4 <ld_word>
 801c05c:	4603      	mov	r3, r0
 801c05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c062:	2b00      	cmp	r3, #0
 801c064:	d106      	bne.n	801c074 <find_volume+0x1cc>
 801c066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c068:	3330      	adds	r3, #48	@ 0x30
 801c06a:	3324      	adds	r3, #36	@ 0x24
 801c06c:	4618      	mov	r0, r3
 801c06e:	f7fe fc5a 	bl	801a926 <ld_dword>
 801c072:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c076:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c078:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c07c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801c080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c082:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c086:	789b      	ldrb	r3, [r3, #2]
 801c088:	2b01      	cmp	r3, #1
 801c08a:	d005      	beq.n	801c098 <find_volume+0x1f0>
 801c08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c08e:	789b      	ldrb	r3, [r3, #2]
 801c090:	2b02      	cmp	r3, #2
 801c092:	d001      	beq.n	801c098 <find_volume+0x1f0>
 801c094:	230d      	movs	r3, #13
 801c096:	e148      	b.n	801c32a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c09a:	789b      	ldrb	r3, [r3, #2]
 801c09c:	461a      	mov	r2, r3
 801c09e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c0a0:	fb02 f303 	mul.w	r3, r2, r3
 801c0a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c0ac:	461a      	mov	r2, r3
 801c0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0b4:	895b      	ldrh	r3, [r3, #10]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d008      	beq.n	801c0cc <find_volume+0x224>
 801c0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0bc:	895b      	ldrh	r3, [r3, #10]
 801c0be:	461a      	mov	r2, r3
 801c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0c2:	895b      	ldrh	r3, [r3, #10]
 801c0c4:	3b01      	subs	r3, #1
 801c0c6:	4013      	ands	r3, r2
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d001      	beq.n	801c0d0 <find_volume+0x228>
 801c0cc:	230d      	movs	r3, #13
 801c0ce:	e12c      	b.n	801c32a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0d2:	3330      	adds	r3, #48	@ 0x30
 801c0d4:	3311      	adds	r3, #17
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	f7fe fc0c 	bl	801a8f4 <ld_word>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	461a      	mov	r2, r3
 801c0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0e6:	891b      	ldrh	r3, [r3, #8]
 801c0e8:	f003 030f 	and.w	r3, r3, #15
 801c0ec:	b29b      	uxth	r3, r3
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d001      	beq.n	801c0f6 <find_volume+0x24e>
 801c0f2:	230d      	movs	r3, #13
 801c0f4:	e119      	b.n	801c32a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0f8:	3330      	adds	r3, #48	@ 0x30
 801c0fa:	3313      	adds	r3, #19
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f7fe fbf9 	bl	801a8f4 <ld_word>
 801c102:	4603      	mov	r3, r0
 801c104:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d106      	bne.n	801c11a <find_volume+0x272>
 801c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c10e:	3330      	adds	r3, #48	@ 0x30
 801c110:	3320      	adds	r3, #32
 801c112:	4618      	mov	r0, r3
 801c114:	f7fe fc07 	bl	801a926 <ld_dword>
 801c118:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c11c:	3330      	adds	r3, #48	@ 0x30
 801c11e:	330e      	adds	r3, #14
 801c120:	4618      	mov	r0, r3
 801c122:	f7fe fbe7 	bl	801a8f4 <ld_word>
 801c126:	4603      	mov	r3, r0
 801c128:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c12a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d101      	bne.n	801c134 <find_volume+0x28c>
 801c130:	230d      	movs	r3, #13
 801c132:	e0fa      	b.n	801c32a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c134:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c138:	4413      	add	r3, r2
 801c13a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c13c:	8912      	ldrh	r2, [r2, #8]
 801c13e:	0912      	lsrs	r2, r2, #4
 801c140:	b292      	uxth	r2, r2
 801c142:	4413      	add	r3, r2
 801c144:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c14a:	429a      	cmp	r2, r3
 801c14c:	d204      	bcs.n	801c158 <find_volume+0x2b0>
 801c14e:	230d      	movs	r3, #13
 801c150:	e0eb      	b.n	801c32a <find_volume+0x482>
 801c152:	bf00      	nop
 801c154:	24008954 	.word	0x24008954
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c15c:	1ad3      	subs	r3, r2, r3
 801c15e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c160:	8952      	ldrh	r2, [r2, #10]
 801c162:	fbb3 f3f2 	udiv	r3, r3, r2
 801c166:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d101      	bne.n	801c172 <find_volume+0x2ca>
 801c16e:	230d      	movs	r3, #13
 801c170:	e0db      	b.n	801c32a <find_volume+0x482>
		fmt = FS_FAT32;
 801c172:	2303      	movs	r3, #3
 801c174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c17a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801c17e:	4293      	cmp	r3, r2
 801c180:	d802      	bhi.n	801c188 <find_volume+0x2e0>
 801c182:	2302      	movs	r3, #2
 801c184:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c18a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801c18e:	4293      	cmp	r3, r2
 801c190:	d802      	bhi.n	801c198 <find_volume+0x2f0>
 801c192:	2301      	movs	r3, #1
 801c194:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c19a:	1c9a      	adds	r2, r3, #2
 801c19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c19e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801c1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c1a4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c1a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c1a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c1aa:	441a      	add	r2, r3
 801c1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1ae:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801c1b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b4:	441a      	add	r2, r3
 801c1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1b8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801c1ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c1be:	2b03      	cmp	r3, #3
 801c1c0:	d11e      	bne.n	801c200 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1c4:	3330      	adds	r3, #48	@ 0x30
 801c1c6:	332a      	adds	r3, #42	@ 0x2a
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	f7fe fb93 	bl	801a8f4 <ld_word>
 801c1ce:	4603      	mov	r3, r0
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d001      	beq.n	801c1d8 <find_volume+0x330>
 801c1d4:	230d      	movs	r3, #13
 801c1d6:	e0a8      	b.n	801c32a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1da:	891b      	ldrh	r3, [r3, #8]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d001      	beq.n	801c1e4 <find_volume+0x33c>
 801c1e0:	230d      	movs	r3, #13
 801c1e2:	e0a2      	b.n	801c32a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1e6:	3330      	adds	r3, #48	@ 0x30
 801c1e8:	332c      	adds	r3, #44	@ 0x2c
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7fe fb9b 	bl	801a926 <ld_dword>
 801c1f0:	4602      	mov	r2, r0
 801c1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1f4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1f8:	695b      	ldr	r3, [r3, #20]
 801c1fa:	009b      	lsls	r3, r3, #2
 801c1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 801c1fe:	e01f      	b.n	801c240 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c202:	891b      	ldrh	r3, [r3, #8]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d101      	bne.n	801c20c <find_volume+0x364>
 801c208:	230d      	movs	r3, #13
 801c20a:	e08e      	b.n	801c32a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c20e:	6a1a      	ldr	r2, [r3, #32]
 801c210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c212:	441a      	add	r2, r3
 801c214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c216:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c218:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c21c:	2b02      	cmp	r3, #2
 801c21e:	d103      	bne.n	801c228 <find_volume+0x380>
 801c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c222:	695b      	ldr	r3, [r3, #20]
 801c224:	005b      	lsls	r3, r3, #1
 801c226:	e00a      	b.n	801c23e <find_volume+0x396>
 801c228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c22a:	695a      	ldr	r2, [r3, #20]
 801c22c:	4613      	mov	r3, r2
 801c22e:	005b      	lsls	r3, r3, #1
 801c230:	4413      	add	r3, r2
 801c232:	085a      	lsrs	r2, r3, #1
 801c234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c236:	695b      	ldr	r3, [r3, #20]
 801c238:	f003 0301 	and.w	r3, r3, #1
 801c23c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c23e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c242:	699a      	ldr	r2, [r3, #24]
 801c244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c246:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801c24a:	0a5b      	lsrs	r3, r3, #9
 801c24c:	429a      	cmp	r2, r3
 801c24e:	d201      	bcs.n	801c254 <find_volume+0x3ac>
 801c250:	230d      	movs	r3, #13
 801c252:	e06a      	b.n	801c32a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c256:	f04f 32ff 	mov.w	r2, #4294967295
 801c25a:	611a      	str	r2, [r3, #16]
 801c25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c25e:	691a      	ldr	r2, [r3, #16]
 801c260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c262:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801c264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c266:	2280      	movs	r2, #128	@ 0x80
 801c268:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c26a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c26e:	2b03      	cmp	r3, #3
 801c270:	d149      	bne.n	801c306 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c274:	3330      	adds	r3, #48	@ 0x30
 801c276:	3330      	adds	r3, #48	@ 0x30
 801c278:	4618      	mov	r0, r3
 801c27a:	f7fe fb3b 	bl	801a8f4 <ld_word>
 801c27e:	4603      	mov	r3, r0
 801c280:	2b01      	cmp	r3, #1
 801c282:	d140      	bne.n	801c306 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c286:	3301      	adds	r3, #1
 801c288:	4619      	mov	r1, r3
 801c28a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c28c:	f7fe fde4 	bl	801ae58 <move_window>
 801c290:	4603      	mov	r3, r0
 801c292:	2b00      	cmp	r3, #0
 801c294:	d137      	bne.n	801c306 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801c296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c298:	2200      	movs	r2, #0
 801c29a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c29e:	3330      	adds	r3, #48	@ 0x30
 801c2a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	f7fe fb25 	bl	801a8f4 <ld_word>
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	461a      	mov	r2, r3
 801c2ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c2b2:	429a      	cmp	r2, r3
 801c2b4:	d127      	bne.n	801c306 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2b8:	3330      	adds	r3, #48	@ 0x30
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7fe fb33 	bl	801a926 <ld_dword>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	4a1c      	ldr	r2, [pc, #112]	@ (801c334 <find_volume+0x48c>)
 801c2c4:	4293      	cmp	r3, r2
 801c2c6:	d11e      	bne.n	801c306 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2ca:	3330      	adds	r3, #48	@ 0x30
 801c2cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	f7fe fb28 	bl	801a926 <ld_dword>
 801c2d6:	4603      	mov	r3, r0
 801c2d8:	4a17      	ldr	r2, [pc, #92]	@ (801c338 <find_volume+0x490>)
 801c2da:	4293      	cmp	r3, r2
 801c2dc:	d113      	bne.n	801c306 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2e0:	3330      	adds	r3, #48	@ 0x30
 801c2e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	f7fe fb1d 	bl	801a926 <ld_dword>
 801c2ec:	4602      	mov	r2, r0
 801c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2f0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2f4:	3330      	adds	r3, #48	@ 0x30
 801c2f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	f7fe fb13 	bl	801a926 <ld_dword>
 801c300:	4602      	mov	r2, r0
 801c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c304:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c308:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801c30c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c30e:	4b0b      	ldr	r3, [pc, #44]	@ (801c33c <find_volume+0x494>)
 801c310:	881b      	ldrh	r3, [r3, #0]
 801c312:	3301      	adds	r3, #1
 801c314:	b29a      	uxth	r2, r3
 801c316:	4b09      	ldr	r3, [pc, #36]	@ (801c33c <find_volume+0x494>)
 801c318:	801a      	strh	r2, [r3, #0]
 801c31a:	4b08      	ldr	r3, [pc, #32]	@ (801c33c <find_volume+0x494>)
 801c31c:	881a      	ldrh	r2, [r3, #0]
 801c31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c320:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c324:	f7fe fd30 	bl	801ad88 <clear_lock>
#endif
	return FR_OK;
 801c328:	2300      	movs	r3, #0
}
 801c32a:	4618      	mov	r0, r3
 801c32c:	3758      	adds	r7, #88	@ 0x58
 801c32e:	46bd      	mov	sp, r7
 801c330:	bd80      	pop	{r7, pc}
 801c332:	bf00      	nop
 801c334:	41615252 	.word	0x41615252
 801c338:	61417272 	.word	0x61417272
 801c33c:	24008958 	.word	0x24008958

0801c340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b084      	sub	sp, #16
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
 801c348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c34a:	2309      	movs	r3, #9
 801c34c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d01c      	beq.n	801c38e <validate+0x4e>
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d018      	beq.n	801c38e <validate+0x4e>
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	781b      	ldrb	r3, [r3, #0]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d013      	beq.n	801c38e <validate+0x4e>
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	889a      	ldrh	r2, [r3, #4]
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	88db      	ldrh	r3, [r3, #6]
 801c370:	429a      	cmp	r2, r3
 801c372:	d10c      	bne.n	801c38e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	785b      	ldrb	r3, [r3, #1]
 801c37a:	4618      	mov	r0, r3
 801c37c:	f7fe fa1a 	bl	801a7b4 <disk_status>
 801c380:	4603      	mov	r3, r0
 801c382:	f003 0301 	and.w	r3, r3, #1
 801c386:	2b00      	cmp	r3, #0
 801c388:	d101      	bne.n	801c38e <validate+0x4e>
			res = FR_OK;
 801c38a:	2300      	movs	r3, #0
 801c38c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c38e:	7bfb      	ldrb	r3, [r7, #15]
 801c390:	2b00      	cmp	r3, #0
 801c392:	d102      	bne.n	801c39a <validate+0x5a>
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	e000      	b.n	801c39c <validate+0x5c>
 801c39a:	2300      	movs	r3, #0
 801c39c:	683a      	ldr	r2, [r7, #0]
 801c39e:	6013      	str	r3, [r2, #0]
	return res;
 801c3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	3710      	adds	r7, #16
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}
	...

0801c3ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	b088      	sub	sp, #32
 801c3b0:	af00      	add	r7, sp, #0
 801c3b2:	60f8      	str	r0, [r7, #12]
 801c3b4:	60b9      	str	r1, [r7, #8]
 801c3b6:	4613      	mov	r3, r2
 801c3b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c3ba:	68bb      	ldr	r3, [r7, #8]
 801c3bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c3be:	f107 0310 	add.w	r3, r7, #16
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	f7ff fcd5 	bl	801bd72 <get_ldnumber>
 801c3c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c3ca:	69fb      	ldr	r3, [r7, #28]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	da01      	bge.n	801c3d4 <f_mount+0x28>
 801c3d0:	230b      	movs	r3, #11
 801c3d2:	e02b      	b.n	801c42c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c3d4:	4a17      	ldr	r2, [pc, #92]	@ (801c434 <f_mount+0x88>)
 801c3d6:	69fb      	ldr	r3, [r7, #28]
 801c3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c3dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c3de:	69bb      	ldr	r3, [r7, #24]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d005      	beq.n	801c3f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c3e4:	69b8      	ldr	r0, [r7, #24]
 801c3e6:	f7fe fccf 	bl	801ad88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c3ea:	69bb      	ldr	r3, [r7, #24]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d002      	beq.n	801c3fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c3fc:	68fa      	ldr	r2, [r7, #12]
 801c3fe:	490d      	ldr	r1, [pc, #52]	@ (801c434 <f_mount+0x88>)
 801c400:	69fb      	ldr	r3, [r7, #28]
 801c402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d002      	beq.n	801c412 <f_mount+0x66>
 801c40c:	79fb      	ldrb	r3, [r7, #7]
 801c40e:	2b01      	cmp	r3, #1
 801c410:	d001      	beq.n	801c416 <f_mount+0x6a>
 801c412:	2300      	movs	r3, #0
 801c414:	e00a      	b.n	801c42c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c416:	f107 010c 	add.w	r1, r7, #12
 801c41a:	f107 0308 	add.w	r3, r7, #8
 801c41e:	2200      	movs	r2, #0
 801c420:	4618      	mov	r0, r3
 801c422:	f7ff fd41 	bl	801bea8 <find_volume>
 801c426:	4603      	mov	r3, r0
 801c428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c42a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c42c:	4618      	mov	r0, r3
 801c42e:	3720      	adds	r7, #32
 801c430:	46bd      	mov	sp, r7
 801c432:	bd80      	pop	{r7, pc}
 801c434:	24008954 	.word	0x24008954

0801c438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b098      	sub	sp, #96	@ 0x60
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	60f8      	str	r0, [r7, #12]
 801c440:	60b9      	str	r1, [r7, #8]
 801c442:	4613      	mov	r3, r2
 801c444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d101      	bne.n	801c450 <f_open+0x18>
 801c44c:	2309      	movs	r3, #9
 801c44e:	e1a9      	b.n	801c7a4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c450:	79fb      	ldrb	r3, [r7, #7]
 801c452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c458:	79fa      	ldrb	r2, [r7, #7]
 801c45a:	f107 0110 	add.w	r1, r7, #16
 801c45e:	f107 0308 	add.w	r3, r7, #8
 801c462:	4618      	mov	r0, r3
 801c464:	f7ff fd20 	bl	801bea8 <find_volume>
 801c468:	4603      	mov	r3, r0
 801c46a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801c46e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c472:	2b00      	cmp	r3, #0
 801c474:	f040 818d 	bne.w	801c792 <f_open+0x35a>
		dj.obj.fs = fs;
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c47c:	68ba      	ldr	r2, [r7, #8]
 801c47e:	f107 0314 	add.w	r3, r7, #20
 801c482:	4611      	mov	r1, r2
 801c484:	4618      	mov	r0, r3
 801c486:	f7ff fc03 	bl	801bc90 <follow_path>
 801c48a:	4603      	mov	r3, r0
 801c48c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c490:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c494:	2b00      	cmp	r3, #0
 801c496:	d118      	bne.n	801c4ca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c498:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801c49c:	b25b      	sxtb	r3, r3
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	da03      	bge.n	801c4aa <f_open+0x72>
				res = FR_INVALID_NAME;
 801c4a2:	2306      	movs	r3, #6
 801c4a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c4a8:	e00f      	b.n	801c4ca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c4aa:	79fb      	ldrb	r3, [r7, #7]
 801c4ac:	2b01      	cmp	r3, #1
 801c4ae:	bf8c      	ite	hi
 801c4b0:	2301      	movhi	r3, #1
 801c4b2:	2300      	movls	r3, #0
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	461a      	mov	r2, r3
 801c4b8:	f107 0314 	add.w	r3, r7, #20
 801c4bc:	4611      	mov	r1, r2
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7fe fb1a 	bl	801aaf8 <chk_lock>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c4ca:	79fb      	ldrb	r3, [r7, #7]
 801c4cc:	f003 031c 	and.w	r3, r3, #28
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d07f      	beq.n	801c5d4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801c4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d017      	beq.n	801c50c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c4e0:	2b04      	cmp	r3, #4
 801c4e2:	d10e      	bne.n	801c502 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c4e4:	f7fe fb64 	bl	801abb0 <enq_lock>
 801c4e8:	4603      	mov	r3, r0
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d006      	beq.n	801c4fc <f_open+0xc4>
 801c4ee:	f107 0314 	add.w	r3, r7, #20
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f7ff faa5 	bl	801ba42 <dir_register>
 801c4f8:	4603      	mov	r3, r0
 801c4fa:	e000      	b.n	801c4fe <f_open+0xc6>
 801c4fc:	2312      	movs	r3, #18
 801c4fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c502:	79fb      	ldrb	r3, [r7, #7]
 801c504:	f043 0308 	orr.w	r3, r3, #8
 801c508:	71fb      	strb	r3, [r7, #7]
 801c50a:	e010      	b.n	801c52e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c50c:	7ebb      	ldrb	r3, [r7, #26]
 801c50e:	f003 0311 	and.w	r3, r3, #17
 801c512:	2b00      	cmp	r3, #0
 801c514:	d003      	beq.n	801c51e <f_open+0xe6>
					res = FR_DENIED;
 801c516:	2307      	movs	r3, #7
 801c518:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c51c:	e007      	b.n	801c52e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c51e:	79fb      	ldrb	r3, [r7, #7]
 801c520:	f003 0304 	and.w	r3, r3, #4
 801c524:	2b00      	cmp	r3, #0
 801c526:	d002      	beq.n	801c52e <f_open+0xf6>
 801c528:	2308      	movs	r3, #8
 801c52a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c52e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c532:	2b00      	cmp	r3, #0
 801c534:	d168      	bne.n	801c608 <f_open+0x1d0>
 801c536:	79fb      	ldrb	r3, [r7, #7]
 801c538:	f003 0308 	and.w	r3, r3, #8
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d063      	beq.n	801c608 <f_open+0x1d0>
				dw = GET_FATTIME();
 801c540:	f7f4 fb5e 	bl	8010c00 <get_fattime>
 801c544:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c548:	330e      	adds	r3, #14
 801c54a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7fe fa28 	bl	801a9a2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c554:	3316      	adds	r3, #22
 801c556:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c558:	4618      	mov	r0, r3
 801c55a:	f7fe fa22 	bl	801a9a2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c560:	330b      	adds	r3, #11
 801c562:	2220      	movs	r2, #32
 801c564:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c566:	693b      	ldr	r3, [r7, #16]
 801c568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c56a:	4611      	mov	r1, r2
 801c56c:	4618      	mov	r0, r3
 801c56e:	f7ff f977 	bl	801b860 <ld_clust>
 801c572:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c574:	693b      	ldr	r3, [r7, #16]
 801c576:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c578:	2200      	movs	r2, #0
 801c57a:	4618      	mov	r0, r3
 801c57c:	f7ff f98f 	bl	801b89e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c582:	331c      	adds	r3, #28
 801c584:	2100      	movs	r1, #0
 801c586:	4618      	mov	r0, r3
 801c588:	f7fe fa0b 	bl	801a9a2 <st_dword>
					fs->wflag = 1;
 801c58c:	693b      	ldr	r3, [r7, #16]
 801c58e:	2201      	movs	r2, #1
 801c590:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c594:	2b00      	cmp	r3, #0
 801c596:	d037      	beq.n	801c608 <f_open+0x1d0>
						dw = fs->winsect;
 801c598:	693b      	ldr	r3, [r7, #16]
 801c59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c59c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801c59e:	f107 0314 	add.w	r3, r7, #20
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c5a6:	4618      	mov	r0, r3
 801c5a8:	f7fe fea2 	bl	801b2f0 <remove_chain>
 801c5ac:	4603      	mov	r3, r0
 801c5ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801c5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d126      	bne.n	801c608 <f_open+0x1d0>
							res = move_window(fs, dw);
 801c5ba:	693b      	ldr	r3, [r7, #16]
 801c5bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f7fe fc4a 	bl	801ae58 <move_window>
 801c5c4:	4603      	mov	r3, r0
 801c5c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c5ca:	693b      	ldr	r3, [r7, #16]
 801c5cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c5ce:	3a01      	subs	r2, #1
 801c5d0:	60da      	str	r2, [r3, #12]
 801c5d2:	e019      	b.n	801c608 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d115      	bne.n	801c608 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c5dc:	7ebb      	ldrb	r3, [r7, #26]
 801c5de:	f003 0310 	and.w	r3, r3, #16
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d003      	beq.n	801c5ee <f_open+0x1b6>
					res = FR_NO_FILE;
 801c5e6:	2304      	movs	r3, #4
 801c5e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c5ec:	e00c      	b.n	801c608 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c5ee:	79fb      	ldrb	r3, [r7, #7]
 801c5f0:	f003 0302 	and.w	r3, r3, #2
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d007      	beq.n	801c608 <f_open+0x1d0>
 801c5f8:	7ebb      	ldrb	r3, [r7, #26]
 801c5fa:	f003 0301 	and.w	r3, r3, #1
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d002      	beq.n	801c608 <f_open+0x1d0>
						res = FR_DENIED;
 801c602:	2307      	movs	r3, #7
 801c604:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801c608:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d126      	bne.n	801c65e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c610:	79fb      	ldrb	r3, [r7, #7]
 801c612:	f003 0308 	and.w	r3, r3, #8
 801c616:	2b00      	cmp	r3, #0
 801c618:	d003      	beq.n	801c622 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801c61a:	79fb      	ldrb	r3, [r7, #7]
 801c61c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c620:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c622:	693b      	ldr	r3, [r7, #16]
 801c624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801c62a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c630:	79fb      	ldrb	r3, [r7, #7]
 801c632:	2b01      	cmp	r3, #1
 801c634:	bf8c      	ite	hi
 801c636:	2301      	movhi	r3, #1
 801c638:	2300      	movls	r3, #0
 801c63a:	b2db      	uxtb	r3, r3
 801c63c:	461a      	mov	r2, r3
 801c63e:	f107 0314 	add.w	r3, r7, #20
 801c642:	4611      	mov	r1, r2
 801c644:	4618      	mov	r0, r3
 801c646:	f7fe fad5 	bl	801abf4 <inc_lock>
 801c64a:	4602      	mov	r2, r0
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	691b      	ldr	r3, [r3, #16]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d102      	bne.n	801c65e <f_open+0x226>
 801c658:	2302      	movs	r3, #2
 801c65a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c65e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c662:	2b00      	cmp	r3, #0
 801c664:	f040 8095 	bne.w	801c792 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c668:	693b      	ldr	r3, [r7, #16]
 801c66a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c66c:	4611      	mov	r1, r2
 801c66e:	4618      	mov	r0, r3
 801c670:	f7ff f8f6 	bl	801b860 <ld_clust>
 801c674:	4602      	mov	r2, r0
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c67c:	331c      	adds	r3, #28
 801c67e:	4618      	mov	r0, r3
 801c680:	f7fe f951 	bl	801a926 <ld_dword>
 801c684:	4602      	mov	r2, r0
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2200      	movs	r2, #0
 801c68e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c690:	693a      	ldr	r2, [r7, #16]
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801c696:	693b      	ldr	r3, [r7, #16]
 801c698:	88da      	ldrh	r2, [r3, #6]
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	79fa      	ldrb	r2, [r7, #7]
 801c6a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	3330      	adds	r3, #48	@ 0x30
 801c6ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c6be:	2100      	movs	r1, #0
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7fe f9bb 	bl	801aa3c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c6c6:	79fb      	ldrb	r3, [r7, #7]
 801c6c8:	f003 0320 	and.w	r3, r3, #32
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d060      	beq.n	801c792 <f_open+0x35a>
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	68db      	ldr	r3, [r3, #12]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d05c      	beq.n	801c792 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	68da      	ldr	r2, [r3, #12]
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c6e0:	693b      	ldr	r3, [r7, #16]
 801c6e2:	895b      	ldrh	r3, [r3, #10]
 801c6e4:	025b      	lsls	r3, r3, #9
 801c6e6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	689b      	ldr	r3, [r3, #8]
 801c6ec:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	68db      	ldr	r3, [r3, #12]
 801c6f2:	657b      	str	r3, [r7, #84]	@ 0x54
 801c6f4:	e016      	b.n	801c724 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7fe fc67 	bl	801afce <get_fat>
 801c700:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801c702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c704:	2b01      	cmp	r3, #1
 801c706:	d802      	bhi.n	801c70e <f_open+0x2d6>
 801c708:	2302      	movs	r3, #2
 801c70a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c70e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c710:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c714:	d102      	bne.n	801c71c <f_open+0x2e4>
 801c716:	2301      	movs	r3, #1
 801c718:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c71c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c720:	1ad3      	subs	r3, r2, r3
 801c722:	657b      	str	r3, [r7, #84]	@ 0x54
 801c724:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d103      	bne.n	801c734 <f_open+0x2fc>
 801c72c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c730:	429a      	cmp	r2, r3
 801c732:	d8e0      	bhi.n	801c6f6 <f_open+0x2be>
				}
				fp->clust = clst;
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801c738:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c73a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d127      	bne.n	801c792 <f_open+0x35a>
 801c742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d022      	beq.n	801c792 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c74c:	693b      	ldr	r3, [r7, #16]
 801c74e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c750:	4618      	mov	r0, r3
 801c752:	f7fe fc1d 	bl	801af90 <clust2sect>
 801c756:	6478      	str	r0, [r7, #68]	@ 0x44
 801c758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d103      	bne.n	801c766 <f_open+0x32e>
						res = FR_INT_ERR;
 801c75e:	2302      	movs	r3, #2
 801c760:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c764:	e015      	b.n	801c792 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c768:	0a5a      	lsrs	r2, r3, #9
 801c76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c76c:	441a      	add	r2, r3
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c772:	693b      	ldr	r3, [r7, #16]
 801c774:	7858      	ldrb	r0, [r3, #1]
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	6a1a      	ldr	r2, [r3, #32]
 801c780:	2301      	movs	r3, #1
 801c782:	f7fe f859 	bl	801a838 <disk_read>
 801c786:	4603      	mov	r3, r0
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d002      	beq.n	801c792 <f_open+0x35a>
 801c78c:	2301      	movs	r3, #1
 801c78e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c792:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c796:	2b00      	cmp	r3, #0
 801c798:	d002      	beq.n	801c7a0 <f_open+0x368>
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	2200      	movs	r2, #0
 801c79e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	3760      	adds	r7, #96	@ 0x60
 801c7a8:	46bd      	mov	sp, r7
 801c7aa:	bd80      	pop	{r7, pc}

0801c7ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b08c      	sub	sp, #48	@ 0x30
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	60f8      	str	r0, [r7, #12]
 801c7b4:	60b9      	str	r1, [r7, #8]
 801c7b6:	607a      	str	r2, [r7, #4]
 801c7b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801c7ba:	68bb      	ldr	r3, [r7, #8]
 801c7bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	f107 0210 	add.w	r2, r7, #16
 801c7ca:	4611      	mov	r1, r2
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f7ff fdb7 	bl	801c340 <validate>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c7d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d107      	bne.n	801c7f0 <f_write+0x44>
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	7d5b      	ldrb	r3, [r3, #21]
 801c7e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801c7e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d002      	beq.n	801c7f6 <f_write+0x4a>
 801c7f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7f4:	e14b      	b.n	801ca8e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	7d1b      	ldrb	r3, [r3, #20]
 801c7fa:	f003 0302 	and.w	r3, r3, #2
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d101      	bne.n	801c806 <f_write+0x5a>
 801c802:	2307      	movs	r3, #7
 801c804:	e143      	b.n	801ca8e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	699a      	ldr	r2, [r3, #24]
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	441a      	add	r2, r3
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	699b      	ldr	r3, [r3, #24]
 801c812:	429a      	cmp	r2, r3
 801c814:	f080 812d 	bcs.w	801ca72 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	699b      	ldr	r3, [r3, #24]
 801c81c:	43db      	mvns	r3, r3
 801c81e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801c820:	e127      	b.n	801ca72 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	699b      	ldr	r3, [r3, #24]
 801c826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	f040 80e3 	bne.w	801c9f6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	699b      	ldr	r3, [r3, #24]
 801c834:	0a5b      	lsrs	r3, r3, #9
 801c836:	693a      	ldr	r2, [r7, #16]
 801c838:	8952      	ldrh	r2, [r2, #10]
 801c83a:	3a01      	subs	r2, #1
 801c83c:	4013      	ands	r3, r2
 801c83e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801c840:	69bb      	ldr	r3, [r7, #24]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d143      	bne.n	801c8ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	699b      	ldr	r3, [r3, #24]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d10c      	bne.n	801c868 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	689b      	ldr	r3, [r3, #8]
 801c852:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c856:	2b00      	cmp	r3, #0
 801c858:	d11a      	bne.n	801c890 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	2100      	movs	r1, #0
 801c85e:	4618      	mov	r0, r3
 801c860:	f7fe fdab 	bl	801b3ba <create_chain>
 801c864:	62b8      	str	r0, [r7, #40]	@ 0x28
 801c866:	e013      	b.n	801c890 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d007      	beq.n	801c880 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	699b      	ldr	r3, [r3, #24]
 801c874:	4619      	mov	r1, r3
 801c876:	68f8      	ldr	r0, [r7, #12]
 801c878:	f7fe fe37 	bl	801b4ea <clmt_clust>
 801c87c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801c87e:	e007      	b.n	801c890 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c880:	68fa      	ldr	r2, [r7, #12]
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	69db      	ldr	r3, [r3, #28]
 801c886:	4619      	mov	r1, r3
 801c888:	4610      	mov	r0, r2
 801c88a:	f7fe fd96 	bl	801b3ba <create_chain>
 801c88e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c892:	2b00      	cmp	r3, #0
 801c894:	f000 80f2 	beq.w	801ca7c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c89a:	2b01      	cmp	r3, #1
 801c89c:	d104      	bne.n	801c8a8 <f_write+0xfc>
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	2202      	movs	r2, #2
 801c8a2:	755a      	strb	r2, [r3, #21]
 801c8a4:	2302      	movs	r3, #2
 801c8a6:	e0f2      	b.n	801ca8e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8ae:	d104      	bne.n	801c8ba <f_write+0x10e>
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	2201      	movs	r2, #1
 801c8b4:	755a      	strb	r2, [r3, #21]
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	e0e9      	b.n	801ca8e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c8be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	689b      	ldr	r3, [r3, #8]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d102      	bne.n	801c8ce <f_write+0x122>
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c8cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	7d1b      	ldrb	r3, [r3, #20]
 801c8d2:	b25b      	sxtb	r3, r3
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	da18      	bge.n	801c90a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c8d8:	693b      	ldr	r3, [r7, #16]
 801c8da:	7858      	ldrb	r0, [r3, #1]
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	6a1a      	ldr	r2, [r3, #32]
 801c8e6:	2301      	movs	r3, #1
 801c8e8:	f7fd ffc6 	bl	801a878 <disk_write>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d004      	beq.n	801c8fc <f_write+0x150>
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	2201      	movs	r2, #1
 801c8f6:	755a      	strb	r2, [r3, #21]
 801c8f8:	2301      	movs	r3, #1
 801c8fa:	e0c8      	b.n	801ca8e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	7d1b      	ldrb	r3, [r3, #20]
 801c900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c904:	b2da      	uxtb	r2, r3
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c90a:	693a      	ldr	r2, [r7, #16]
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	69db      	ldr	r3, [r3, #28]
 801c910:	4619      	mov	r1, r3
 801c912:	4610      	mov	r0, r2
 801c914:	f7fe fb3c 	bl	801af90 <clust2sect>
 801c918:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c91a:	697b      	ldr	r3, [r7, #20]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d104      	bne.n	801c92a <f_write+0x17e>
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	2202      	movs	r2, #2
 801c924:	755a      	strb	r2, [r3, #21]
 801c926:	2302      	movs	r3, #2
 801c928:	e0b1      	b.n	801ca8e <f_write+0x2e2>
			sect += csect;
 801c92a:	697a      	ldr	r2, [r7, #20]
 801c92c:	69bb      	ldr	r3, [r7, #24]
 801c92e:	4413      	add	r3, r2
 801c930:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	0a5b      	lsrs	r3, r3, #9
 801c936:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801c938:	6a3b      	ldr	r3, [r7, #32]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d03c      	beq.n	801c9b8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c93e:	69ba      	ldr	r2, [r7, #24]
 801c940:	6a3b      	ldr	r3, [r7, #32]
 801c942:	4413      	add	r3, r2
 801c944:	693a      	ldr	r2, [r7, #16]
 801c946:	8952      	ldrh	r2, [r2, #10]
 801c948:	4293      	cmp	r3, r2
 801c94a:	d905      	bls.n	801c958 <f_write+0x1ac>
					cc = fs->csize - csect;
 801c94c:	693b      	ldr	r3, [r7, #16]
 801c94e:	895b      	ldrh	r3, [r3, #10]
 801c950:	461a      	mov	r2, r3
 801c952:	69bb      	ldr	r3, [r7, #24]
 801c954:	1ad3      	subs	r3, r2, r3
 801c956:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c958:	693b      	ldr	r3, [r7, #16]
 801c95a:	7858      	ldrb	r0, [r3, #1]
 801c95c:	6a3b      	ldr	r3, [r7, #32]
 801c95e:	697a      	ldr	r2, [r7, #20]
 801c960:	69f9      	ldr	r1, [r7, #28]
 801c962:	f7fd ff89 	bl	801a878 <disk_write>
 801c966:	4603      	mov	r3, r0
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d004      	beq.n	801c976 <f_write+0x1ca>
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	2201      	movs	r2, #1
 801c970:	755a      	strb	r2, [r3, #21]
 801c972:	2301      	movs	r3, #1
 801c974:	e08b      	b.n	801ca8e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	6a1a      	ldr	r2, [r3, #32]
 801c97a:	697b      	ldr	r3, [r7, #20]
 801c97c:	1ad3      	subs	r3, r2, r3
 801c97e:	6a3a      	ldr	r2, [r7, #32]
 801c980:	429a      	cmp	r2, r3
 801c982:	d915      	bls.n	801c9b0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	6a1a      	ldr	r2, [r3, #32]
 801c98e:	697b      	ldr	r3, [r7, #20]
 801c990:	1ad3      	subs	r3, r2, r3
 801c992:	025b      	lsls	r3, r3, #9
 801c994:	69fa      	ldr	r2, [r7, #28]
 801c996:	4413      	add	r3, r2
 801c998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c99c:	4619      	mov	r1, r3
 801c99e:	f7fe f82c 	bl	801a9fa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	7d1b      	ldrb	r3, [r3, #20]
 801c9a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c9aa:	b2da      	uxtb	r2, r3
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801c9b0:	6a3b      	ldr	r3, [r7, #32]
 801c9b2:	025b      	lsls	r3, r3, #9
 801c9b4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801c9b6:	e03f      	b.n	801ca38 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	6a1b      	ldr	r3, [r3, #32]
 801c9bc:	697a      	ldr	r2, [r7, #20]
 801c9be:	429a      	cmp	r2, r3
 801c9c0:	d016      	beq.n	801c9f0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	699a      	ldr	r2, [r3, #24]
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d210      	bcs.n	801c9f0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801c9ce:	693b      	ldr	r3, [r7, #16]
 801c9d0:	7858      	ldrb	r0, [r3, #1]
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c9d8:	2301      	movs	r3, #1
 801c9da:	697a      	ldr	r2, [r7, #20]
 801c9dc:	f7fd ff2c 	bl	801a838 <disk_read>
 801c9e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d004      	beq.n	801c9f0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	2201      	movs	r2, #1
 801c9ea:	755a      	strb	r2, [r3, #21]
 801c9ec:	2301      	movs	r3, #1
 801c9ee:	e04e      	b.n	801ca8e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	697a      	ldr	r2, [r7, #20]
 801c9f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	699b      	ldr	r3, [r3, #24]
 801c9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c9fe:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801ca02:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801ca04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d901      	bls.n	801ca10 <f_write+0x264>
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	699b      	ldr	r3, [r3, #24]
 801ca1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ca1e:	4413      	add	r3, r2
 801ca20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ca22:	69f9      	ldr	r1, [r7, #28]
 801ca24:	4618      	mov	r0, r3
 801ca26:	f7fd ffe8 	bl	801a9fa <mem_cpy>
		fp->flag |= FA_DIRTY;
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	7d1b      	ldrb	r3, [r3, #20]
 801ca2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ca32:	b2da      	uxtb	r2, r3
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801ca38:	69fa      	ldr	r2, [r7, #28]
 801ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca3c:	4413      	add	r3, r2
 801ca3e:	61fb      	str	r3, [r7, #28]
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	699a      	ldr	r2, [r3, #24]
 801ca44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca46:	441a      	add	r2, r3
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	619a      	str	r2, [r3, #24]
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	68da      	ldr	r2, [r3, #12]
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	699b      	ldr	r3, [r3, #24]
 801ca54:	429a      	cmp	r2, r3
 801ca56:	bf38      	it	cc
 801ca58:	461a      	movcc	r2, r3
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	60da      	str	r2, [r3, #12]
 801ca5e:	683b      	ldr	r3, [r7, #0]
 801ca60:	681a      	ldr	r2, [r3, #0]
 801ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca64:	441a      	add	r2, r3
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	601a      	str	r2, [r3, #0]
 801ca6a:	687a      	ldr	r2, [r7, #4]
 801ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca6e:	1ad3      	subs	r3, r2, r3
 801ca70:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	f47f aed4 	bne.w	801c822 <f_write+0x76>
 801ca7a:	e000      	b.n	801ca7e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ca7c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	7d1b      	ldrb	r3, [r3, #20]
 801ca82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca86:	b2da      	uxtb	r2, r3
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801ca8c:	2300      	movs	r3, #0
}
 801ca8e:	4618      	mov	r0, r3
 801ca90:	3730      	adds	r7, #48	@ 0x30
 801ca92:	46bd      	mov	sp, r7
 801ca94:	bd80      	pop	{r7, pc}

0801ca96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801ca96:	b580      	push	{r7, lr}
 801ca98:	b086      	sub	sp, #24
 801ca9a:	af00      	add	r7, sp, #0
 801ca9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	f107 0208 	add.w	r2, r7, #8
 801caa4:	4611      	mov	r1, r2
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7ff fc4a 	bl	801c340 <validate>
 801caac:	4603      	mov	r3, r0
 801caae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801cab0:	7dfb      	ldrb	r3, [r7, #23]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d168      	bne.n	801cb88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	7d1b      	ldrb	r3, [r3, #20]
 801caba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d062      	beq.n	801cb88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	7d1b      	ldrb	r3, [r3, #20]
 801cac6:	b25b      	sxtb	r3, r3
 801cac8:	2b00      	cmp	r3, #0
 801caca:	da15      	bge.n	801caf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801cacc:	68bb      	ldr	r3, [r7, #8]
 801cace:	7858      	ldrb	r0, [r3, #1]
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	6a1a      	ldr	r2, [r3, #32]
 801cada:	2301      	movs	r3, #1
 801cadc:	f7fd fecc 	bl	801a878 <disk_write>
 801cae0:	4603      	mov	r3, r0
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d001      	beq.n	801caea <f_sync+0x54>
 801cae6:	2301      	movs	r3, #1
 801cae8:	e04f      	b.n	801cb8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	7d1b      	ldrb	r3, [r3, #20]
 801caee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801caf2:	b2da      	uxtb	r2, r3
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801caf8:	f7f4 f882 	bl	8010c00 <get_fattime>
 801cafc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801cafe:	68ba      	ldr	r2, [r7, #8]
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb04:	4619      	mov	r1, r3
 801cb06:	4610      	mov	r0, r2
 801cb08:	f7fe f9a6 	bl	801ae58 <move_window>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801cb10:	7dfb      	ldrb	r3, [r7, #23]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d138      	bne.n	801cb88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	330b      	adds	r3, #11
 801cb20:	781a      	ldrb	r2, [r3, #0]
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	330b      	adds	r3, #11
 801cb26:	f042 0220 	orr.w	r2, r2, #32
 801cb2a:	b2d2      	uxtb	r2, r2
 801cb2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	6818      	ldr	r0, [r3, #0]
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	689b      	ldr	r3, [r3, #8]
 801cb36:	461a      	mov	r2, r3
 801cb38:	68f9      	ldr	r1, [r7, #12]
 801cb3a:	f7fe feb0 	bl	801b89e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	f103 021c 	add.w	r2, r3, #28
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	68db      	ldr	r3, [r3, #12]
 801cb48:	4619      	mov	r1, r3
 801cb4a:	4610      	mov	r0, r2
 801cb4c:	f7fd ff29 	bl	801a9a2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	3316      	adds	r3, #22
 801cb54:	6939      	ldr	r1, [r7, #16]
 801cb56:	4618      	mov	r0, r3
 801cb58:	f7fd ff23 	bl	801a9a2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	3312      	adds	r3, #18
 801cb60:	2100      	movs	r1, #0
 801cb62:	4618      	mov	r0, r3
 801cb64:	f7fd ff02 	bl	801a96c <st_word>
					fs->wflag = 1;
 801cb68:	68bb      	ldr	r3, [r7, #8]
 801cb6a:	2201      	movs	r2, #1
 801cb6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cb6e:	68bb      	ldr	r3, [r7, #8]
 801cb70:	4618      	mov	r0, r3
 801cb72:	f7fe f99f 	bl	801aeb4 <sync_fs>
 801cb76:	4603      	mov	r3, r0
 801cb78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	7d1b      	ldrb	r3, [r3, #20]
 801cb7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cb82:	b2da      	uxtb	r2, r3
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801cb88:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	3718      	adds	r7, #24
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}

0801cb92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801cb92:	b580      	push	{r7, lr}
 801cb94:	b084      	sub	sp, #16
 801cb96:	af00      	add	r7, sp, #0
 801cb98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801cb9a:	6878      	ldr	r0, [r7, #4]
 801cb9c:	f7ff ff7b 	bl	801ca96 <f_sync>
 801cba0:	4603      	mov	r3, r0
 801cba2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801cba4:	7bfb      	ldrb	r3, [r7, #15]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d118      	bne.n	801cbdc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	f107 0208 	add.w	r2, r7, #8
 801cbb0:	4611      	mov	r1, r2
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f7ff fbc4 	bl	801c340 <validate>
 801cbb8:	4603      	mov	r3, r0
 801cbba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801cbbc:	7bfb      	ldrb	r3, [r7, #15]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d10c      	bne.n	801cbdc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	691b      	ldr	r3, [r3, #16]
 801cbc6:	4618      	mov	r0, r3
 801cbc8:	f7fe f8a2 	bl	801ad10 <dec_lock>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801cbd0:	7bfb      	ldrb	r3, [r7, #15]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d102      	bne.n	801cbdc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	2200      	movs	r2, #0
 801cbda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801cbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbde:	4618      	mov	r0, r3
 801cbe0:	3710      	adds	r7, #16
 801cbe2:	46bd      	mov	sp, r7
 801cbe4:	bd80      	pop	{r7, pc}

0801cbe6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801cbe6:	b580      	push	{r7, lr}
 801cbe8:	b090      	sub	sp, #64	@ 0x40
 801cbea:	af00      	add	r7, sp, #0
 801cbec:	6078      	str	r0, [r7, #4]
 801cbee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	f107 0208 	add.w	r2, r7, #8
 801cbf6:	4611      	mov	r1, r2
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	f7ff fba1 	bl	801c340 <validate>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801cc04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d103      	bne.n	801cc14 <f_lseek+0x2e>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	7d5b      	ldrb	r3, [r3, #21]
 801cc10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801cc14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d002      	beq.n	801cc22 <f_lseek+0x3c>
 801cc1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cc20:	e1e6      	b.n	801cff0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	f000 80d1 	beq.w	801cdce <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc32:	d15a      	bne.n	801ccea <f_lseek+0x104>
			tbl = fp->cltbl;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc38:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801cc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc3c:	1d1a      	adds	r2, r3, #4
 801cc3e:	627a      	str	r2, [r7, #36]	@ 0x24
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	617b      	str	r3, [r7, #20]
 801cc44:	2302      	movs	r3, #2
 801cc46:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	689b      	ldr	r3, [r3, #8]
 801cc4c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d03a      	beq.n	801ccca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc56:	613b      	str	r3, [r7, #16]
 801cc58:	2300      	movs	r3, #0
 801cc5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc5e:	3302      	adds	r3, #2
 801cc60:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc64:	60fb      	str	r3, [r7, #12]
 801cc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc68:	3301      	adds	r3, #1
 801cc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801cc70:	4618      	mov	r0, r3
 801cc72:	f7fe f9ac 	bl	801afce <get_fat>
 801cc76:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801cc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc7a:	2b01      	cmp	r3, #1
 801cc7c:	d804      	bhi.n	801cc88 <f_lseek+0xa2>
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	2202      	movs	r2, #2
 801cc82:	755a      	strb	r2, [r3, #21]
 801cc84:	2302      	movs	r3, #2
 801cc86:	e1b3      	b.n	801cff0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc8e:	d104      	bne.n	801cc9a <f_lseek+0xb4>
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2201      	movs	r2, #1
 801cc94:	755a      	strb	r2, [r3, #21]
 801cc96:	2301      	movs	r3, #1
 801cc98:	e1aa      	b.n	801cff0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	3301      	adds	r3, #1
 801cc9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cca0:	429a      	cmp	r2, r3
 801cca2:	d0de      	beq.n	801cc62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801cca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cca6:	697b      	ldr	r3, [r7, #20]
 801cca8:	429a      	cmp	r2, r3
 801ccaa:	d809      	bhi.n	801ccc0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccae:	1d1a      	adds	r2, r3, #4
 801ccb0:	627a      	str	r2, [r7, #36]	@ 0x24
 801ccb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ccb4:	601a      	str	r2, [r3, #0]
 801ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccb8:	1d1a      	adds	r2, r3, #4
 801ccba:	627a      	str	r2, [r7, #36]	@ 0x24
 801ccbc:	693a      	ldr	r2, [r7, #16]
 801ccbe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801ccc0:	68bb      	ldr	r3, [r7, #8]
 801ccc2:	695b      	ldr	r3, [r3, #20]
 801ccc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ccc6:	429a      	cmp	r2, r3
 801ccc8:	d3c4      	bcc.n	801cc54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ccce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ccd0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801ccd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ccd4:	697b      	ldr	r3, [r7, #20]
 801ccd6:	429a      	cmp	r2, r3
 801ccd8:	d803      	bhi.n	801cce2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801ccda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccdc:	2200      	movs	r2, #0
 801ccde:	601a      	str	r2, [r3, #0]
 801cce0:	e184      	b.n	801cfec <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801cce2:	2311      	movs	r3, #17
 801cce4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801cce8:	e180      	b.n	801cfec <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	68db      	ldr	r3, [r3, #12]
 801ccee:	683a      	ldr	r2, [r7, #0]
 801ccf0:	429a      	cmp	r2, r3
 801ccf2:	d902      	bls.n	801ccfa <f_lseek+0x114>
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	68db      	ldr	r3, [r3, #12]
 801ccf8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	683a      	ldr	r2, [r7, #0]
 801ccfe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801cd00:	683b      	ldr	r3, [r7, #0]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f000 8172 	beq.w	801cfec <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801cd08:	683b      	ldr	r3, [r7, #0]
 801cd0a:	3b01      	subs	r3, #1
 801cd0c:	4619      	mov	r1, r3
 801cd0e:	6878      	ldr	r0, [r7, #4]
 801cd10:	f7fe fbeb 	bl	801b4ea <clmt_clust>
 801cd14:	4602      	mov	r2, r0
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801cd1a:	68ba      	ldr	r2, [r7, #8]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	69db      	ldr	r3, [r3, #28]
 801cd20:	4619      	mov	r1, r3
 801cd22:	4610      	mov	r0, r2
 801cd24:	f7fe f934 	bl	801af90 <clust2sect>
 801cd28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801cd2a:	69bb      	ldr	r3, [r7, #24]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d104      	bne.n	801cd3a <f_lseek+0x154>
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	2202      	movs	r2, #2
 801cd34:	755a      	strb	r2, [r3, #21]
 801cd36:	2302      	movs	r3, #2
 801cd38:	e15a      	b.n	801cff0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801cd3a:	683b      	ldr	r3, [r7, #0]
 801cd3c:	3b01      	subs	r3, #1
 801cd3e:	0a5b      	lsrs	r3, r3, #9
 801cd40:	68ba      	ldr	r2, [r7, #8]
 801cd42:	8952      	ldrh	r2, [r2, #10]
 801cd44:	3a01      	subs	r2, #1
 801cd46:	4013      	ands	r3, r2
 801cd48:	69ba      	ldr	r2, [r7, #24]
 801cd4a:	4413      	add	r3, r2
 801cd4c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	699b      	ldr	r3, [r3, #24]
 801cd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	f000 8148 	beq.w	801cfec <f_lseek+0x406>
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	6a1b      	ldr	r3, [r3, #32]
 801cd60:	69ba      	ldr	r2, [r7, #24]
 801cd62:	429a      	cmp	r2, r3
 801cd64:	f000 8142 	beq.w	801cfec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	7d1b      	ldrb	r3, [r3, #20]
 801cd6c:	b25b      	sxtb	r3, r3
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	da18      	bge.n	801cda4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801cd72:	68bb      	ldr	r3, [r7, #8]
 801cd74:	7858      	ldrb	r0, [r3, #1]
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	6a1a      	ldr	r2, [r3, #32]
 801cd80:	2301      	movs	r3, #1
 801cd82:	f7fd fd79 	bl	801a878 <disk_write>
 801cd86:	4603      	mov	r3, r0
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d004      	beq.n	801cd96 <f_lseek+0x1b0>
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	2201      	movs	r2, #1
 801cd90:	755a      	strb	r2, [r3, #21]
 801cd92:	2301      	movs	r3, #1
 801cd94:	e12c      	b.n	801cff0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	7d1b      	ldrb	r3, [r3, #20]
 801cd9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cd9e:	b2da      	uxtb	r2, r3
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801cda4:	68bb      	ldr	r3, [r7, #8]
 801cda6:	7858      	ldrb	r0, [r3, #1]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cdae:	2301      	movs	r3, #1
 801cdb0:	69ba      	ldr	r2, [r7, #24]
 801cdb2:	f7fd fd41 	bl	801a838 <disk_read>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d004      	beq.n	801cdc6 <f_lseek+0x1e0>
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2201      	movs	r2, #1
 801cdc0:	755a      	strb	r2, [r3, #21]
 801cdc2:	2301      	movs	r3, #1
 801cdc4:	e114      	b.n	801cff0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	69ba      	ldr	r2, [r7, #24]
 801cdca:	621a      	str	r2, [r3, #32]
 801cdcc:	e10e      	b.n	801cfec <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	68db      	ldr	r3, [r3, #12]
 801cdd2:	683a      	ldr	r2, [r7, #0]
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d908      	bls.n	801cdea <f_lseek+0x204>
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	7d1b      	ldrb	r3, [r3, #20]
 801cddc:	f003 0302 	and.w	r3, r3, #2
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d102      	bne.n	801cdea <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	68db      	ldr	r3, [r3, #12]
 801cde8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	699b      	ldr	r3, [r3, #24]
 801cdee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	637b      	str	r3, [r7, #52]	@ 0x34
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cdf8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	f000 80a7 	beq.w	801cf50 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801ce02:	68bb      	ldr	r3, [r7, #8]
 801ce04:	895b      	ldrh	r3, [r3, #10]
 801ce06:	025b      	lsls	r3, r3, #9
 801ce08:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801ce0a:	6a3b      	ldr	r3, [r7, #32]
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d01b      	beq.n	801ce48 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801ce10:	683b      	ldr	r3, [r7, #0]
 801ce12:	1e5a      	subs	r2, r3, #1
 801ce14:	69fb      	ldr	r3, [r7, #28]
 801ce16:	fbb2 f2f3 	udiv	r2, r2, r3
 801ce1a:	6a3b      	ldr	r3, [r7, #32]
 801ce1c:	1e59      	subs	r1, r3, #1
 801ce1e:	69fb      	ldr	r3, [r7, #28]
 801ce20:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801ce24:	429a      	cmp	r2, r3
 801ce26:	d30f      	bcc.n	801ce48 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801ce28:	6a3b      	ldr	r3, [r7, #32]
 801ce2a:	1e5a      	subs	r2, r3, #1
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	425b      	negs	r3, r3
 801ce30:	401a      	ands	r2, r3
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	699b      	ldr	r3, [r3, #24]
 801ce3a:	683a      	ldr	r2, [r7, #0]
 801ce3c:	1ad3      	subs	r3, r2, r3
 801ce3e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	69db      	ldr	r3, [r3, #28]
 801ce44:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ce46:	e022      	b.n	801ce8e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	689b      	ldr	r3, [r3, #8]
 801ce4c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801ce4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d119      	bne.n	801ce88 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2100      	movs	r1, #0
 801ce58:	4618      	mov	r0, r3
 801ce5a:	f7fe faae 	bl	801b3ba <create_chain>
 801ce5e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801ce60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce62:	2b01      	cmp	r3, #1
 801ce64:	d104      	bne.n	801ce70 <f_lseek+0x28a>
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	2202      	movs	r2, #2
 801ce6a:	755a      	strb	r2, [r3, #21]
 801ce6c:	2302      	movs	r3, #2
 801ce6e:	e0bf      	b.n	801cff0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce76:	d104      	bne.n	801ce82 <f_lseek+0x29c>
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2201      	movs	r2, #1
 801ce7c:	755a      	strb	r2, [r3, #21]
 801ce7e:	2301      	movs	r3, #1
 801ce80:	e0b6      	b.n	801cff0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce86:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce8c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801ce8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d05d      	beq.n	801cf50 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801ce94:	e03a      	b.n	801cf0c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801ce96:	683a      	ldr	r2, [r7, #0]
 801ce98:	69fb      	ldr	r3, [r7, #28]
 801ce9a:	1ad3      	subs	r3, r2, r3
 801ce9c:	603b      	str	r3, [r7, #0]
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	699a      	ldr	r2, [r3, #24]
 801cea2:	69fb      	ldr	r3, [r7, #28]
 801cea4:	441a      	add	r2, r3
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	7d1b      	ldrb	r3, [r3, #20]
 801ceae:	f003 0302 	and.w	r3, r3, #2
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d00b      	beq.n	801cece <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ceba:	4618      	mov	r0, r3
 801cebc:	f7fe fa7d 	bl	801b3ba <create_chain>
 801cec0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801cec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d108      	bne.n	801ceda <f_lseek+0x2f4>
							ofs = 0; break;
 801cec8:	2300      	movs	r3, #0
 801ceca:	603b      	str	r3, [r7, #0]
 801cecc:	e022      	b.n	801cf14 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7fe f87b 	bl	801afce <get_fat>
 801ced8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ceda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cee0:	d104      	bne.n	801ceec <f_lseek+0x306>
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	2201      	movs	r2, #1
 801cee6:	755a      	strb	r2, [r3, #21]
 801cee8:	2301      	movs	r3, #1
 801ceea:	e081      	b.n	801cff0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801ceec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceee:	2b01      	cmp	r3, #1
 801cef0:	d904      	bls.n	801cefc <f_lseek+0x316>
 801cef2:	68bb      	ldr	r3, [r7, #8]
 801cef4:	695b      	ldr	r3, [r3, #20]
 801cef6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cef8:	429a      	cmp	r2, r3
 801cefa:	d304      	bcc.n	801cf06 <f_lseek+0x320>
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	2202      	movs	r2, #2
 801cf00:	755a      	strb	r2, [r3, #21]
 801cf02:	2302      	movs	r3, #2
 801cf04:	e074      	b.n	801cff0 <f_lseek+0x40a>
					fp->clust = clst;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf0a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801cf0c:	683a      	ldr	r2, [r7, #0]
 801cf0e:	69fb      	ldr	r3, [r7, #28]
 801cf10:	429a      	cmp	r2, r3
 801cf12:	d8c0      	bhi.n	801ce96 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	699a      	ldr	r2, [r3, #24]
 801cf18:	683b      	ldr	r3, [r7, #0]
 801cf1a:	441a      	add	r2, r3
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801cf20:	683b      	ldr	r3, [r7, #0]
 801cf22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d012      	beq.n	801cf50 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801cf2a:	68bb      	ldr	r3, [r7, #8]
 801cf2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cf2e:	4618      	mov	r0, r3
 801cf30:	f7fe f82e 	bl	801af90 <clust2sect>
 801cf34:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801cf36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d104      	bne.n	801cf46 <f_lseek+0x360>
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	2202      	movs	r2, #2
 801cf40:	755a      	strb	r2, [r3, #21]
 801cf42:	2302      	movs	r3, #2
 801cf44:	e054      	b.n	801cff0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801cf46:	683b      	ldr	r3, [r7, #0]
 801cf48:	0a5b      	lsrs	r3, r3, #9
 801cf4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cf4c:	4413      	add	r3, r2
 801cf4e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	699a      	ldr	r2, [r3, #24]
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	68db      	ldr	r3, [r3, #12]
 801cf58:	429a      	cmp	r2, r3
 801cf5a:	d90a      	bls.n	801cf72 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	699a      	ldr	r2, [r3, #24]
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	7d1b      	ldrb	r3, [r3, #20]
 801cf68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf6c:	b2da      	uxtb	r2, r3
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	699b      	ldr	r3, [r3, #24]
 801cf76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d036      	beq.n	801cfec <f_lseek+0x406>
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	6a1b      	ldr	r3, [r3, #32]
 801cf82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cf84:	429a      	cmp	r2, r3
 801cf86:	d031      	beq.n	801cfec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	7d1b      	ldrb	r3, [r3, #20]
 801cf8c:	b25b      	sxtb	r3, r3
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	da18      	bge.n	801cfc4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801cf92:	68bb      	ldr	r3, [r7, #8]
 801cf94:	7858      	ldrb	r0, [r3, #1]
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	6a1a      	ldr	r2, [r3, #32]
 801cfa0:	2301      	movs	r3, #1
 801cfa2:	f7fd fc69 	bl	801a878 <disk_write>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d004      	beq.n	801cfb6 <f_lseek+0x3d0>
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	2201      	movs	r2, #1
 801cfb0:	755a      	strb	r2, [r3, #21]
 801cfb2:	2301      	movs	r3, #1
 801cfb4:	e01c      	b.n	801cff0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	7d1b      	ldrb	r3, [r3, #20]
 801cfba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cfbe:	b2da      	uxtb	r2, r3
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801cfc4:	68bb      	ldr	r3, [r7, #8]
 801cfc6:	7858      	ldrb	r0, [r3, #1]
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cfce:	2301      	movs	r3, #1
 801cfd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cfd2:	f7fd fc31 	bl	801a838 <disk_read>
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d004      	beq.n	801cfe6 <f_lseek+0x400>
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2201      	movs	r2, #1
 801cfe0:	755a      	strb	r2, [r3, #21]
 801cfe2:	2301      	movs	r3, #1
 801cfe4:	e004      	b.n	801cff0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cfea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801cfec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801cff0:	4618      	mov	r0, r3
 801cff2:	3740      	adds	r7, #64	@ 0x40
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}

0801cff8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b086      	sub	sp, #24
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	2b00      	cmp	r3, #0
 801d006:	d101      	bne.n	801d00c <f_opendir+0x14>
 801d008:	2309      	movs	r3, #9
 801d00a:	e064      	b.n	801d0d6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801d010:	f107 010c 	add.w	r1, r7, #12
 801d014:	463b      	mov	r3, r7
 801d016:	2200      	movs	r2, #0
 801d018:	4618      	mov	r0, r3
 801d01a:	f7fe ff45 	bl	801bea8 <find_volume>
 801d01e:	4603      	mov	r3, r0
 801d020:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d022:	7dfb      	ldrb	r3, [r7, #23]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d14f      	bne.n	801d0c8 <f_opendir+0xd0>
		obj->fs = fs;
 801d028:	68fa      	ldr	r2, [r7, #12]
 801d02a:	693b      	ldr	r3, [r7, #16]
 801d02c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	4619      	mov	r1, r3
 801d032:	6878      	ldr	r0, [r7, #4]
 801d034:	f7fe fe2c 	bl	801bc90 <follow_path>
 801d038:	4603      	mov	r3, r0
 801d03a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801d03c:	7dfb      	ldrb	r3, [r7, #23]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d13d      	bne.n	801d0be <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801d048:	b25b      	sxtb	r3, r3
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	db12      	blt.n	801d074 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d04e:	693b      	ldr	r3, [r7, #16]
 801d050:	799b      	ldrb	r3, [r3, #6]
 801d052:	f003 0310 	and.w	r3, r3, #16
 801d056:	2b00      	cmp	r3, #0
 801d058:	d00a      	beq.n	801d070 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d05a:	68fa      	ldr	r2, [r7, #12]
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	6a1b      	ldr	r3, [r3, #32]
 801d060:	4619      	mov	r1, r3
 801d062:	4610      	mov	r0, r2
 801d064:	f7fe fbfc 	bl	801b860 <ld_clust>
 801d068:	4602      	mov	r2, r0
 801d06a:	693b      	ldr	r3, [r7, #16]
 801d06c:	609a      	str	r2, [r3, #8]
 801d06e:	e001      	b.n	801d074 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801d070:	2305      	movs	r3, #5
 801d072:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801d074:	7dfb      	ldrb	r3, [r7, #23]
 801d076:	2b00      	cmp	r3, #0
 801d078:	d121      	bne.n	801d0be <f_opendir+0xc6>
				obj->id = fs->id;
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	88da      	ldrh	r2, [r3, #6]
 801d07e:	693b      	ldr	r3, [r7, #16]
 801d080:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d082:	2100      	movs	r1, #0
 801d084:	6878      	ldr	r0, [r7, #4]
 801d086:	f7fe fa64 	bl	801b552 <dir_sdi>
 801d08a:	4603      	mov	r3, r0
 801d08c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801d08e:	7dfb      	ldrb	r3, [r7, #23]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d114      	bne.n	801d0be <f_opendir+0xc6>
					if (obj->sclust) {
 801d094:	693b      	ldr	r3, [r7, #16]
 801d096:	689b      	ldr	r3, [r3, #8]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d00d      	beq.n	801d0b8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d09c:	2100      	movs	r1, #0
 801d09e:	6878      	ldr	r0, [r7, #4]
 801d0a0:	f7fd fda8 	bl	801abf4 <inc_lock>
 801d0a4:	4602      	mov	r2, r0
 801d0a6:	693b      	ldr	r3, [r7, #16]
 801d0a8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d0aa:	693b      	ldr	r3, [r7, #16]
 801d0ac:	691b      	ldr	r3, [r3, #16]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d105      	bne.n	801d0be <f_opendir+0xc6>
 801d0b2:	2312      	movs	r3, #18
 801d0b4:	75fb      	strb	r3, [r7, #23]
 801d0b6:	e002      	b.n	801d0be <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d0b8:	693b      	ldr	r3, [r7, #16]
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d0be:	7dfb      	ldrb	r3, [r7, #23]
 801d0c0:	2b04      	cmp	r3, #4
 801d0c2:	d101      	bne.n	801d0c8 <f_opendir+0xd0>
 801d0c4:	2305      	movs	r3, #5
 801d0c6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d0c8:	7dfb      	ldrb	r3, [r7, #23]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d002      	beq.n	801d0d4 <f_opendir+0xdc>
 801d0ce:	693b      	ldr	r3, [r7, #16]
 801d0d0:	2200      	movs	r2, #0
 801d0d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	3718      	adds	r7, #24
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	bd80      	pop	{r7, pc}

0801d0de <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801d0de:	b580      	push	{r7, lr}
 801d0e0:	b084      	sub	sp, #16
 801d0e2:	af00      	add	r7, sp, #0
 801d0e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	f107 0208 	add.w	r2, r7, #8
 801d0ec:	4611      	mov	r1, r2
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7ff f926 	bl	801c340 <validate>
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d0f8:	7bfb      	ldrb	r3, [r7, #15]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d110      	bne.n	801d120 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	691b      	ldr	r3, [r3, #16]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d006      	beq.n	801d114 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	691b      	ldr	r3, [r3, #16]
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7fd fe00 	bl	801ad10 <dec_lock>
 801d110:	4603      	mov	r3, r0
 801d112:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801d114:	7bfb      	ldrb	r3, [r7, #15]
 801d116:	2b00      	cmp	r3, #0
 801d118:	d102      	bne.n	801d120 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	2200      	movs	r2, #0
 801d11e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801d120:	7bfb      	ldrb	r3, [r7, #15]
}
 801d122:	4618      	mov	r0, r3
 801d124:	3710      	adds	r7, #16
 801d126:	46bd      	mov	sp, r7
 801d128:	bd80      	pop	{r7, pc}

0801d12a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d12a:	b580      	push	{r7, lr}
 801d12c:	b084      	sub	sp, #16
 801d12e:	af00      	add	r7, sp, #0
 801d130:	6078      	str	r0, [r7, #4]
 801d132:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	f107 0208 	add.w	r2, r7, #8
 801d13a:	4611      	mov	r1, r2
 801d13c:	4618      	mov	r0, r3
 801d13e:	f7ff f8ff 	bl	801c340 <validate>
 801d142:	4603      	mov	r3, r0
 801d144:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d146:	7bfb      	ldrb	r3, [r7, #15]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d126      	bne.n	801d19a <f_readdir+0x70>
		if (!fno) {
 801d14c:	683b      	ldr	r3, [r7, #0]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d106      	bne.n	801d160 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801d152:	2100      	movs	r1, #0
 801d154:	6878      	ldr	r0, [r7, #4]
 801d156:	f7fe f9fc 	bl	801b552 <dir_sdi>
 801d15a:	4603      	mov	r3, r0
 801d15c:	73fb      	strb	r3, [r7, #15]
 801d15e:	e01c      	b.n	801d19a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801d160:	2100      	movs	r1, #0
 801d162:	6878      	ldr	r0, [r7, #4]
 801d164:	f7fe fbbb 	bl	801b8de <dir_read>
 801d168:	4603      	mov	r3, r0
 801d16a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801d16c:	7bfb      	ldrb	r3, [r7, #15]
 801d16e:	2b04      	cmp	r3, #4
 801d170:	d101      	bne.n	801d176 <f_readdir+0x4c>
 801d172:	2300      	movs	r3, #0
 801d174:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801d176:	7bfb      	ldrb	r3, [r7, #15]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d10e      	bne.n	801d19a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801d17c:	6839      	ldr	r1, [r7, #0]
 801d17e:	6878      	ldr	r0, [r7, #4]
 801d180:	f7fe fc91 	bl	801baa6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801d184:	2100      	movs	r1, #0
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f7fe fa5e 	bl	801b648 <dir_next>
 801d18c:	4603      	mov	r3, r0
 801d18e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801d190:	7bfb      	ldrb	r3, [r7, #15]
 801d192:	2b04      	cmp	r3, #4
 801d194:	d101      	bne.n	801d19a <f_readdir+0x70>
 801d196:	2300      	movs	r3, #0
 801d198:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801d19a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d19c:	4618      	mov	r0, r3
 801d19e:	3710      	adds	r7, #16
 801d1a0:	46bd      	mov	sp, r7
 801d1a2:	bd80      	pop	{r7, pc}

0801d1a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d1a4:	b480      	push	{r7}
 801d1a6:	b087      	sub	sp, #28
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	60f8      	str	r0, [r7, #12]
 801d1ac:	60b9      	str	r1, [r7, #8]
 801d1ae:	4613      	mov	r3, r2
 801d1b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d1b2:	2301      	movs	r3, #1
 801d1b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d1ba:	4b1f      	ldr	r3, [pc, #124]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1bc:	7a5b      	ldrb	r3, [r3, #9]
 801d1be:	b2db      	uxtb	r3, r3
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d131      	bne.n	801d228 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d1c4:	4b1c      	ldr	r3, [pc, #112]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1c6:	7a5b      	ldrb	r3, [r3, #9]
 801d1c8:	b2db      	uxtb	r3, r3
 801d1ca:	461a      	mov	r2, r3
 801d1cc:	4b1a      	ldr	r3, [pc, #104]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1ce:	2100      	movs	r1, #0
 801d1d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d1d2:	4b19      	ldr	r3, [pc, #100]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1d4:	7a5b      	ldrb	r3, [r3, #9]
 801d1d6:	b2db      	uxtb	r3, r3
 801d1d8:	4a17      	ldr	r2, [pc, #92]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1da:	009b      	lsls	r3, r3, #2
 801d1dc:	4413      	add	r3, r2
 801d1de:	68fa      	ldr	r2, [r7, #12]
 801d1e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d1e2:	4b15      	ldr	r3, [pc, #84]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1e4:	7a5b      	ldrb	r3, [r3, #9]
 801d1e6:	b2db      	uxtb	r3, r3
 801d1e8:	461a      	mov	r2, r3
 801d1ea:	4b13      	ldr	r3, [pc, #76]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1ec:	4413      	add	r3, r2
 801d1ee:	79fa      	ldrb	r2, [r7, #7]
 801d1f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d1f2:	4b11      	ldr	r3, [pc, #68]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1f4:	7a5b      	ldrb	r3, [r3, #9]
 801d1f6:	b2db      	uxtb	r3, r3
 801d1f8:	1c5a      	adds	r2, r3, #1
 801d1fa:	b2d1      	uxtb	r1, r2
 801d1fc:	4a0e      	ldr	r2, [pc, #56]	@ (801d238 <FATFS_LinkDriverEx+0x94>)
 801d1fe:	7251      	strb	r1, [r2, #9]
 801d200:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d202:	7dbb      	ldrb	r3, [r7, #22]
 801d204:	3330      	adds	r3, #48	@ 0x30
 801d206:	b2da      	uxtb	r2, r3
 801d208:	68bb      	ldr	r3, [r7, #8]
 801d20a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	3301      	adds	r3, #1
 801d210:	223a      	movs	r2, #58	@ 0x3a
 801d212:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d214:	68bb      	ldr	r3, [r7, #8]
 801d216:	3302      	adds	r3, #2
 801d218:	222f      	movs	r2, #47	@ 0x2f
 801d21a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	3303      	adds	r3, #3
 801d220:	2200      	movs	r2, #0
 801d222:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d224:	2300      	movs	r3, #0
 801d226:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d228:	7dfb      	ldrb	r3, [r7, #23]
}
 801d22a:	4618      	mov	r0, r3
 801d22c:	371c      	adds	r7, #28
 801d22e:	46bd      	mov	sp, r7
 801d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d234:	4770      	bx	lr
 801d236:	bf00      	nop
 801d238:	2400899c 	.word	0x2400899c

0801d23c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b082      	sub	sp, #8
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
 801d244:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d246:	2200      	movs	r2, #0
 801d248:	6839      	ldr	r1, [r7, #0]
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	f7ff ffaa 	bl	801d1a4 <FATFS_LinkDriverEx>
 801d250:	4603      	mov	r3, r0
}
 801d252:	4618      	mov	r0, r3
 801d254:	3708      	adds	r7, #8
 801d256:	46bd      	mov	sp, r7
 801d258:	bd80      	pop	{r7, pc}

0801d25a <atoi>:
 801d25a:	220a      	movs	r2, #10
 801d25c:	2100      	movs	r1, #0
 801d25e:	f000 b87b 	b.w	801d358 <strtol>
	...

0801d264 <_strtol_l.isra.0>:
 801d264:	2b24      	cmp	r3, #36	@ 0x24
 801d266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d26a:	4686      	mov	lr, r0
 801d26c:	4690      	mov	r8, r2
 801d26e:	d801      	bhi.n	801d274 <_strtol_l.isra.0+0x10>
 801d270:	2b01      	cmp	r3, #1
 801d272:	d106      	bne.n	801d282 <_strtol_l.isra.0+0x1e>
 801d274:	f000 fb7c 	bl	801d970 <__errno>
 801d278:	2316      	movs	r3, #22
 801d27a:	6003      	str	r3, [r0, #0]
 801d27c:	2000      	movs	r0, #0
 801d27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d282:	4834      	ldr	r0, [pc, #208]	@ (801d354 <_strtol_l.isra.0+0xf0>)
 801d284:	460d      	mov	r5, r1
 801d286:	462a      	mov	r2, r5
 801d288:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d28c:	5d06      	ldrb	r6, [r0, r4]
 801d28e:	f016 0608 	ands.w	r6, r6, #8
 801d292:	d1f8      	bne.n	801d286 <_strtol_l.isra.0+0x22>
 801d294:	2c2d      	cmp	r4, #45	@ 0x2d
 801d296:	d110      	bne.n	801d2ba <_strtol_l.isra.0+0x56>
 801d298:	782c      	ldrb	r4, [r5, #0]
 801d29a:	2601      	movs	r6, #1
 801d29c:	1c95      	adds	r5, r2, #2
 801d29e:	f033 0210 	bics.w	r2, r3, #16
 801d2a2:	d115      	bne.n	801d2d0 <_strtol_l.isra.0+0x6c>
 801d2a4:	2c30      	cmp	r4, #48	@ 0x30
 801d2a6:	d10d      	bne.n	801d2c4 <_strtol_l.isra.0+0x60>
 801d2a8:	782a      	ldrb	r2, [r5, #0]
 801d2aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d2ae:	2a58      	cmp	r2, #88	@ 0x58
 801d2b0:	d108      	bne.n	801d2c4 <_strtol_l.isra.0+0x60>
 801d2b2:	786c      	ldrb	r4, [r5, #1]
 801d2b4:	3502      	adds	r5, #2
 801d2b6:	2310      	movs	r3, #16
 801d2b8:	e00a      	b.n	801d2d0 <_strtol_l.isra.0+0x6c>
 801d2ba:	2c2b      	cmp	r4, #43	@ 0x2b
 801d2bc:	bf04      	itt	eq
 801d2be:	782c      	ldrbeq	r4, [r5, #0]
 801d2c0:	1c95      	addeq	r5, r2, #2
 801d2c2:	e7ec      	b.n	801d29e <_strtol_l.isra.0+0x3a>
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d1f6      	bne.n	801d2b6 <_strtol_l.isra.0+0x52>
 801d2c8:	2c30      	cmp	r4, #48	@ 0x30
 801d2ca:	bf14      	ite	ne
 801d2cc:	230a      	movne	r3, #10
 801d2ce:	2308      	moveq	r3, #8
 801d2d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d2d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2d8:	2200      	movs	r2, #0
 801d2da:	fbbc f9f3 	udiv	r9, ip, r3
 801d2de:	4610      	mov	r0, r2
 801d2e0:	fb03 ca19 	mls	sl, r3, r9, ip
 801d2e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d2e8:	2f09      	cmp	r7, #9
 801d2ea:	d80f      	bhi.n	801d30c <_strtol_l.isra.0+0xa8>
 801d2ec:	463c      	mov	r4, r7
 801d2ee:	42a3      	cmp	r3, r4
 801d2f0:	dd1b      	ble.n	801d32a <_strtol_l.isra.0+0xc6>
 801d2f2:	1c57      	adds	r7, r2, #1
 801d2f4:	d007      	beq.n	801d306 <_strtol_l.isra.0+0xa2>
 801d2f6:	4581      	cmp	r9, r0
 801d2f8:	d314      	bcc.n	801d324 <_strtol_l.isra.0+0xc0>
 801d2fa:	d101      	bne.n	801d300 <_strtol_l.isra.0+0x9c>
 801d2fc:	45a2      	cmp	sl, r4
 801d2fe:	db11      	blt.n	801d324 <_strtol_l.isra.0+0xc0>
 801d300:	fb00 4003 	mla	r0, r0, r3, r4
 801d304:	2201      	movs	r2, #1
 801d306:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d30a:	e7eb      	b.n	801d2e4 <_strtol_l.isra.0+0x80>
 801d30c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d310:	2f19      	cmp	r7, #25
 801d312:	d801      	bhi.n	801d318 <_strtol_l.isra.0+0xb4>
 801d314:	3c37      	subs	r4, #55	@ 0x37
 801d316:	e7ea      	b.n	801d2ee <_strtol_l.isra.0+0x8a>
 801d318:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d31c:	2f19      	cmp	r7, #25
 801d31e:	d804      	bhi.n	801d32a <_strtol_l.isra.0+0xc6>
 801d320:	3c57      	subs	r4, #87	@ 0x57
 801d322:	e7e4      	b.n	801d2ee <_strtol_l.isra.0+0x8a>
 801d324:	f04f 32ff 	mov.w	r2, #4294967295
 801d328:	e7ed      	b.n	801d306 <_strtol_l.isra.0+0xa2>
 801d32a:	1c53      	adds	r3, r2, #1
 801d32c:	d108      	bne.n	801d340 <_strtol_l.isra.0+0xdc>
 801d32e:	2322      	movs	r3, #34	@ 0x22
 801d330:	f8ce 3000 	str.w	r3, [lr]
 801d334:	4660      	mov	r0, ip
 801d336:	f1b8 0f00 	cmp.w	r8, #0
 801d33a:	d0a0      	beq.n	801d27e <_strtol_l.isra.0+0x1a>
 801d33c:	1e69      	subs	r1, r5, #1
 801d33e:	e006      	b.n	801d34e <_strtol_l.isra.0+0xea>
 801d340:	b106      	cbz	r6, 801d344 <_strtol_l.isra.0+0xe0>
 801d342:	4240      	negs	r0, r0
 801d344:	f1b8 0f00 	cmp.w	r8, #0
 801d348:	d099      	beq.n	801d27e <_strtol_l.isra.0+0x1a>
 801d34a:	2a00      	cmp	r2, #0
 801d34c:	d1f6      	bne.n	801d33c <_strtol_l.isra.0+0xd8>
 801d34e:	f8c8 1000 	str.w	r1, [r8]
 801d352:	e794      	b.n	801d27e <_strtol_l.isra.0+0x1a>
 801d354:	08031f19 	.word	0x08031f19

0801d358 <strtol>:
 801d358:	4613      	mov	r3, r2
 801d35a:	460a      	mov	r2, r1
 801d35c:	4601      	mov	r1, r0
 801d35e:	4802      	ldr	r0, [pc, #8]	@ (801d368 <strtol+0x10>)
 801d360:	6800      	ldr	r0, [r0, #0]
 801d362:	f7ff bf7f 	b.w	801d264 <_strtol_l.isra.0>
 801d366:	bf00      	nop
 801d368:	2400002c 	.word	0x2400002c

0801d36c <std>:
 801d36c:	2300      	movs	r3, #0
 801d36e:	b510      	push	{r4, lr}
 801d370:	4604      	mov	r4, r0
 801d372:	e9c0 3300 	strd	r3, r3, [r0]
 801d376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d37a:	6083      	str	r3, [r0, #8]
 801d37c:	8181      	strh	r1, [r0, #12]
 801d37e:	6643      	str	r3, [r0, #100]	@ 0x64
 801d380:	81c2      	strh	r2, [r0, #14]
 801d382:	6183      	str	r3, [r0, #24]
 801d384:	4619      	mov	r1, r3
 801d386:	2208      	movs	r2, #8
 801d388:	305c      	adds	r0, #92	@ 0x5c
 801d38a:	f000 fa8d 	bl	801d8a8 <memset>
 801d38e:	4b0d      	ldr	r3, [pc, #52]	@ (801d3c4 <std+0x58>)
 801d390:	6263      	str	r3, [r4, #36]	@ 0x24
 801d392:	4b0d      	ldr	r3, [pc, #52]	@ (801d3c8 <std+0x5c>)
 801d394:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d396:	4b0d      	ldr	r3, [pc, #52]	@ (801d3cc <std+0x60>)
 801d398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d39a:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d0 <std+0x64>)
 801d39c:	6323      	str	r3, [r4, #48]	@ 0x30
 801d39e:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d4 <std+0x68>)
 801d3a0:	6224      	str	r4, [r4, #32]
 801d3a2:	429c      	cmp	r4, r3
 801d3a4:	d006      	beq.n	801d3b4 <std+0x48>
 801d3a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d3aa:	4294      	cmp	r4, r2
 801d3ac:	d002      	beq.n	801d3b4 <std+0x48>
 801d3ae:	33d0      	adds	r3, #208	@ 0xd0
 801d3b0:	429c      	cmp	r4, r3
 801d3b2:	d105      	bne.n	801d3c0 <std+0x54>
 801d3b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3bc:	f000 bb02 	b.w	801d9c4 <__retarget_lock_init_recursive>
 801d3c0:	bd10      	pop	{r4, pc}
 801d3c2:	bf00      	nop
 801d3c4:	0801d681 	.word	0x0801d681
 801d3c8:	0801d6a3 	.word	0x0801d6a3
 801d3cc:	0801d6db 	.word	0x0801d6db
 801d3d0:	0801d6ff 	.word	0x0801d6ff
 801d3d4:	240089a8 	.word	0x240089a8

0801d3d8 <stdio_exit_handler>:
 801d3d8:	4a02      	ldr	r2, [pc, #8]	@ (801d3e4 <stdio_exit_handler+0xc>)
 801d3da:	4903      	ldr	r1, [pc, #12]	@ (801d3e8 <stdio_exit_handler+0x10>)
 801d3dc:	4803      	ldr	r0, [pc, #12]	@ (801d3ec <stdio_exit_handler+0x14>)
 801d3de:	f000 b869 	b.w	801d4b4 <_fwalk_sglue>
 801d3e2:	bf00      	nop
 801d3e4:	24000020 	.word	0x24000020
 801d3e8:	0801e52d 	.word	0x0801e52d
 801d3ec:	24000030 	.word	0x24000030

0801d3f0 <cleanup_stdio>:
 801d3f0:	6841      	ldr	r1, [r0, #4]
 801d3f2:	4b0c      	ldr	r3, [pc, #48]	@ (801d424 <cleanup_stdio+0x34>)
 801d3f4:	4299      	cmp	r1, r3
 801d3f6:	b510      	push	{r4, lr}
 801d3f8:	4604      	mov	r4, r0
 801d3fa:	d001      	beq.n	801d400 <cleanup_stdio+0x10>
 801d3fc:	f001 f896 	bl	801e52c <_fflush_r>
 801d400:	68a1      	ldr	r1, [r4, #8]
 801d402:	4b09      	ldr	r3, [pc, #36]	@ (801d428 <cleanup_stdio+0x38>)
 801d404:	4299      	cmp	r1, r3
 801d406:	d002      	beq.n	801d40e <cleanup_stdio+0x1e>
 801d408:	4620      	mov	r0, r4
 801d40a:	f001 f88f 	bl	801e52c <_fflush_r>
 801d40e:	68e1      	ldr	r1, [r4, #12]
 801d410:	4b06      	ldr	r3, [pc, #24]	@ (801d42c <cleanup_stdio+0x3c>)
 801d412:	4299      	cmp	r1, r3
 801d414:	d004      	beq.n	801d420 <cleanup_stdio+0x30>
 801d416:	4620      	mov	r0, r4
 801d418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d41c:	f001 b886 	b.w	801e52c <_fflush_r>
 801d420:	bd10      	pop	{r4, pc}
 801d422:	bf00      	nop
 801d424:	240089a8 	.word	0x240089a8
 801d428:	24008a10 	.word	0x24008a10
 801d42c:	24008a78 	.word	0x24008a78

0801d430 <global_stdio_init.part.0>:
 801d430:	b510      	push	{r4, lr}
 801d432:	4b0b      	ldr	r3, [pc, #44]	@ (801d460 <global_stdio_init.part.0+0x30>)
 801d434:	4c0b      	ldr	r4, [pc, #44]	@ (801d464 <global_stdio_init.part.0+0x34>)
 801d436:	4a0c      	ldr	r2, [pc, #48]	@ (801d468 <global_stdio_init.part.0+0x38>)
 801d438:	601a      	str	r2, [r3, #0]
 801d43a:	4620      	mov	r0, r4
 801d43c:	2200      	movs	r2, #0
 801d43e:	2104      	movs	r1, #4
 801d440:	f7ff ff94 	bl	801d36c <std>
 801d444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d448:	2201      	movs	r2, #1
 801d44a:	2109      	movs	r1, #9
 801d44c:	f7ff ff8e 	bl	801d36c <std>
 801d450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d454:	2202      	movs	r2, #2
 801d456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d45a:	2112      	movs	r1, #18
 801d45c:	f7ff bf86 	b.w	801d36c <std>
 801d460:	24008ae0 	.word	0x24008ae0
 801d464:	240089a8 	.word	0x240089a8
 801d468:	0801d3d9 	.word	0x0801d3d9

0801d46c <__sfp_lock_acquire>:
 801d46c:	4801      	ldr	r0, [pc, #4]	@ (801d474 <__sfp_lock_acquire+0x8>)
 801d46e:	f000 baaa 	b.w	801d9c6 <__retarget_lock_acquire_recursive>
 801d472:	bf00      	nop
 801d474:	24008ae9 	.word	0x24008ae9

0801d478 <__sfp_lock_release>:
 801d478:	4801      	ldr	r0, [pc, #4]	@ (801d480 <__sfp_lock_release+0x8>)
 801d47a:	f000 baa5 	b.w	801d9c8 <__retarget_lock_release_recursive>
 801d47e:	bf00      	nop
 801d480:	24008ae9 	.word	0x24008ae9

0801d484 <__sinit>:
 801d484:	b510      	push	{r4, lr}
 801d486:	4604      	mov	r4, r0
 801d488:	f7ff fff0 	bl	801d46c <__sfp_lock_acquire>
 801d48c:	6a23      	ldr	r3, [r4, #32]
 801d48e:	b11b      	cbz	r3, 801d498 <__sinit+0x14>
 801d490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d494:	f7ff bff0 	b.w	801d478 <__sfp_lock_release>
 801d498:	4b04      	ldr	r3, [pc, #16]	@ (801d4ac <__sinit+0x28>)
 801d49a:	6223      	str	r3, [r4, #32]
 801d49c:	4b04      	ldr	r3, [pc, #16]	@ (801d4b0 <__sinit+0x2c>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d1f5      	bne.n	801d490 <__sinit+0xc>
 801d4a4:	f7ff ffc4 	bl	801d430 <global_stdio_init.part.0>
 801d4a8:	e7f2      	b.n	801d490 <__sinit+0xc>
 801d4aa:	bf00      	nop
 801d4ac:	0801d3f1 	.word	0x0801d3f1
 801d4b0:	24008ae0 	.word	0x24008ae0

0801d4b4 <_fwalk_sglue>:
 801d4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4b8:	4607      	mov	r7, r0
 801d4ba:	4688      	mov	r8, r1
 801d4bc:	4614      	mov	r4, r2
 801d4be:	2600      	movs	r6, #0
 801d4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d4c4:	f1b9 0901 	subs.w	r9, r9, #1
 801d4c8:	d505      	bpl.n	801d4d6 <_fwalk_sglue+0x22>
 801d4ca:	6824      	ldr	r4, [r4, #0]
 801d4cc:	2c00      	cmp	r4, #0
 801d4ce:	d1f7      	bne.n	801d4c0 <_fwalk_sglue+0xc>
 801d4d0:	4630      	mov	r0, r6
 801d4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4d6:	89ab      	ldrh	r3, [r5, #12]
 801d4d8:	2b01      	cmp	r3, #1
 801d4da:	d907      	bls.n	801d4ec <_fwalk_sglue+0x38>
 801d4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d4e0:	3301      	adds	r3, #1
 801d4e2:	d003      	beq.n	801d4ec <_fwalk_sglue+0x38>
 801d4e4:	4629      	mov	r1, r5
 801d4e6:	4638      	mov	r0, r7
 801d4e8:	47c0      	blx	r8
 801d4ea:	4306      	orrs	r6, r0
 801d4ec:	3568      	adds	r5, #104	@ 0x68
 801d4ee:	e7e9      	b.n	801d4c4 <_fwalk_sglue+0x10>

0801d4f0 <iprintf>:
 801d4f0:	b40f      	push	{r0, r1, r2, r3}
 801d4f2:	b507      	push	{r0, r1, r2, lr}
 801d4f4:	4906      	ldr	r1, [pc, #24]	@ (801d510 <iprintf+0x20>)
 801d4f6:	ab04      	add	r3, sp, #16
 801d4f8:	6808      	ldr	r0, [r1, #0]
 801d4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4fe:	6881      	ldr	r1, [r0, #8]
 801d500:	9301      	str	r3, [sp, #4]
 801d502:	f000 fceb 	bl	801dedc <_vfiprintf_r>
 801d506:	b003      	add	sp, #12
 801d508:	f85d eb04 	ldr.w	lr, [sp], #4
 801d50c:	b004      	add	sp, #16
 801d50e:	4770      	bx	lr
 801d510:	2400002c 	.word	0x2400002c

0801d514 <_puts_r>:
 801d514:	6a03      	ldr	r3, [r0, #32]
 801d516:	b570      	push	{r4, r5, r6, lr}
 801d518:	6884      	ldr	r4, [r0, #8]
 801d51a:	4605      	mov	r5, r0
 801d51c:	460e      	mov	r6, r1
 801d51e:	b90b      	cbnz	r3, 801d524 <_puts_r+0x10>
 801d520:	f7ff ffb0 	bl	801d484 <__sinit>
 801d524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d526:	07db      	lsls	r3, r3, #31
 801d528:	d405      	bmi.n	801d536 <_puts_r+0x22>
 801d52a:	89a3      	ldrh	r3, [r4, #12]
 801d52c:	0598      	lsls	r0, r3, #22
 801d52e:	d402      	bmi.n	801d536 <_puts_r+0x22>
 801d530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d532:	f000 fa48 	bl	801d9c6 <__retarget_lock_acquire_recursive>
 801d536:	89a3      	ldrh	r3, [r4, #12]
 801d538:	0719      	lsls	r1, r3, #28
 801d53a:	d502      	bpl.n	801d542 <_puts_r+0x2e>
 801d53c:	6923      	ldr	r3, [r4, #16]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d135      	bne.n	801d5ae <_puts_r+0x9a>
 801d542:	4621      	mov	r1, r4
 801d544:	4628      	mov	r0, r5
 801d546:	f000 f959 	bl	801d7fc <__swsetup_r>
 801d54a:	b380      	cbz	r0, 801d5ae <_puts_r+0x9a>
 801d54c:	f04f 35ff 	mov.w	r5, #4294967295
 801d550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d552:	07da      	lsls	r2, r3, #31
 801d554:	d405      	bmi.n	801d562 <_puts_r+0x4e>
 801d556:	89a3      	ldrh	r3, [r4, #12]
 801d558:	059b      	lsls	r3, r3, #22
 801d55a:	d402      	bmi.n	801d562 <_puts_r+0x4e>
 801d55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d55e:	f000 fa33 	bl	801d9c8 <__retarget_lock_release_recursive>
 801d562:	4628      	mov	r0, r5
 801d564:	bd70      	pop	{r4, r5, r6, pc}
 801d566:	2b00      	cmp	r3, #0
 801d568:	da04      	bge.n	801d574 <_puts_r+0x60>
 801d56a:	69a2      	ldr	r2, [r4, #24]
 801d56c:	429a      	cmp	r2, r3
 801d56e:	dc17      	bgt.n	801d5a0 <_puts_r+0x8c>
 801d570:	290a      	cmp	r1, #10
 801d572:	d015      	beq.n	801d5a0 <_puts_r+0x8c>
 801d574:	6823      	ldr	r3, [r4, #0]
 801d576:	1c5a      	adds	r2, r3, #1
 801d578:	6022      	str	r2, [r4, #0]
 801d57a:	7019      	strb	r1, [r3, #0]
 801d57c:	68a3      	ldr	r3, [r4, #8]
 801d57e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d582:	3b01      	subs	r3, #1
 801d584:	60a3      	str	r3, [r4, #8]
 801d586:	2900      	cmp	r1, #0
 801d588:	d1ed      	bne.n	801d566 <_puts_r+0x52>
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	da11      	bge.n	801d5b2 <_puts_r+0x9e>
 801d58e:	4622      	mov	r2, r4
 801d590:	210a      	movs	r1, #10
 801d592:	4628      	mov	r0, r5
 801d594:	f000 f8f4 	bl	801d780 <__swbuf_r>
 801d598:	3001      	adds	r0, #1
 801d59a:	d0d7      	beq.n	801d54c <_puts_r+0x38>
 801d59c:	250a      	movs	r5, #10
 801d59e:	e7d7      	b.n	801d550 <_puts_r+0x3c>
 801d5a0:	4622      	mov	r2, r4
 801d5a2:	4628      	mov	r0, r5
 801d5a4:	f000 f8ec 	bl	801d780 <__swbuf_r>
 801d5a8:	3001      	adds	r0, #1
 801d5aa:	d1e7      	bne.n	801d57c <_puts_r+0x68>
 801d5ac:	e7ce      	b.n	801d54c <_puts_r+0x38>
 801d5ae:	3e01      	subs	r6, #1
 801d5b0:	e7e4      	b.n	801d57c <_puts_r+0x68>
 801d5b2:	6823      	ldr	r3, [r4, #0]
 801d5b4:	1c5a      	adds	r2, r3, #1
 801d5b6:	6022      	str	r2, [r4, #0]
 801d5b8:	220a      	movs	r2, #10
 801d5ba:	701a      	strb	r2, [r3, #0]
 801d5bc:	e7ee      	b.n	801d59c <_puts_r+0x88>
	...

0801d5c0 <puts>:
 801d5c0:	4b02      	ldr	r3, [pc, #8]	@ (801d5cc <puts+0xc>)
 801d5c2:	4601      	mov	r1, r0
 801d5c4:	6818      	ldr	r0, [r3, #0]
 801d5c6:	f7ff bfa5 	b.w	801d514 <_puts_r>
 801d5ca:	bf00      	nop
 801d5cc:	2400002c 	.word	0x2400002c

0801d5d0 <sniprintf>:
 801d5d0:	b40c      	push	{r2, r3}
 801d5d2:	b530      	push	{r4, r5, lr}
 801d5d4:	4b18      	ldr	r3, [pc, #96]	@ (801d638 <sniprintf+0x68>)
 801d5d6:	1e0c      	subs	r4, r1, #0
 801d5d8:	681d      	ldr	r5, [r3, #0]
 801d5da:	b09d      	sub	sp, #116	@ 0x74
 801d5dc:	da08      	bge.n	801d5f0 <sniprintf+0x20>
 801d5de:	238b      	movs	r3, #139	@ 0x8b
 801d5e0:	602b      	str	r3, [r5, #0]
 801d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 801d5e6:	b01d      	add	sp, #116	@ 0x74
 801d5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d5ec:	b002      	add	sp, #8
 801d5ee:	4770      	bx	lr
 801d5f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d5f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d5f8:	f04f 0300 	mov.w	r3, #0
 801d5fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d5fe:	bf14      	ite	ne
 801d600:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d604:	4623      	moveq	r3, r4
 801d606:	9304      	str	r3, [sp, #16]
 801d608:	9307      	str	r3, [sp, #28]
 801d60a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d60e:	9002      	str	r0, [sp, #8]
 801d610:	9006      	str	r0, [sp, #24]
 801d612:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d616:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d618:	ab21      	add	r3, sp, #132	@ 0x84
 801d61a:	a902      	add	r1, sp, #8
 801d61c:	4628      	mov	r0, r5
 801d61e:	9301      	str	r3, [sp, #4]
 801d620:	f000 fb36 	bl	801dc90 <_svfiprintf_r>
 801d624:	1c43      	adds	r3, r0, #1
 801d626:	bfbc      	itt	lt
 801d628:	238b      	movlt	r3, #139	@ 0x8b
 801d62a:	602b      	strlt	r3, [r5, #0]
 801d62c:	2c00      	cmp	r4, #0
 801d62e:	d0da      	beq.n	801d5e6 <sniprintf+0x16>
 801d630:	9b02      	ldr	r3, [sp, #8]
 801d632:	2200      	movs	r2, #0
 801d634:	701a      	strb	r2, [r3, #0]
 801d636:	e7d6      	b.n	801d5e6 <sniprintf+0x16>
 801d638:	2400002c 	.word	0x2400002c

0801d63c <siprintf>:
 801d63c:	b40e      	push	{r1, r2, r3}
 801d63e:	b510      	push	{r4, lr}
 801d640:	b09d      	sub	sp, #116	@ 0x74
 801d642:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d644:	9002      	str	r0, [sp, #8]
 801d646:	9006      	str	r0, [sp, #24]
 801d648:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d64c:	480a      	ldr	r0, [pc, #40]	@ (801d678 <siprintf+0x3c>)
 801d64e:	9107      	str	r1, [sp, #28]
 801d650:	9104      	str	r1, [sp, #16]
 801d652:	490a      	ldr	r1, [pc, #40]	@ (801d67c <siprintf+0x40>)
 801d654:	f853 2b04 	ldr.w	r2, [r3], #4
 801d658:	9105      	str	r1, [sp, #20]
 801d65a:	2400      	movs	r4, #0
 801d65c:	a902      	add	r1, sp, #8
 801d65e:	6800      	ldr	r0, [r0, #0]
 801d660:	9301      	str	r3, [sp, #4]
 801d662:	941b      	str	r4, [sp, #108]	@ 0x6c
 801d664:	f000 fb14 	bl	801dc90 <_svfiprintf_r>
 801d668:	9b02      	ldr	r3, [sp, #8]
 801d66a:	701c      	strb	r4, [r3, #0]
 801d66c:	b01d      	add	sp, #116	@ 0x74
 801d66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d672:	b003      	add	sp, #12
 801d674:	4770      	bx	lr
 801d676:	bf00      	nop
 801d678:	2400002c 	.word	0x2400002c
 801d67c:	ffff0208 	.word	0xffff0208

0801d680 <__sread>:
 801d680:	b510      	push	{r4, lr}
 801d682:	460c      	mov	r4, r1
 801d684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d688:	f000 f94e 	bl	801d928 <_read_r>
 801d68c:	2800      	cmp	r0, #0
 801d68e:	bfab      	itete	ge
 801d690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d692:	89a3      	ldrhlt	r3, [r4, #12]
 801d694:	181b      	addge	r3, r3, r0
 801d696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d69a:	bfac      	ite	ge
 801d69c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d69e:	81a3      	strhlt	r3, [r4, #12]
 801d6a0:	bd10      	pop	{r4, pc}

0801d6a2 <__swrite>:
 801d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6a6:	461f      	mov	r7, r3
 801d6a8:	898b      	ldrh	r3, [r1, #12]
 801d6aa:	05db      	lsls	r3, r3, #23
 801d6ac:	4605      	mov	r5, r0
 801d6ae:	460c      	mov	r4, r1
 801d6b0:	4616      	mov	r6, r2
 801d6b2:	d505      	bpl.n	801d6c0 <__swrite+0x1e>
 801d6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6b8:	2302      	movs	r3, #2
 801d6ba:	2200      	movs	r2, #0
 801d6bc:	f000 f922 	bl	801d904 <_lseek_r>
 801d6c0:	89a3      	ldrh	r3, [r4, #12]
 801d6c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d6c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d6ca:	81a3      	strh	r3, [r4, #12]
 801d6cc:	4632      	mov	r2, r6
 801d6ce:	463b      	mov	r3, r7
 801d6d0:	4628      	mov	r0, r5
 801d6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d6d6:	f000 b939 	b.w	801d94c <_write_r>

0801d6da <__sseek>:
 801d6da:	b510      	push	{r4, lr}
 801d6dc:	460c      	mov	r4, r1
 801d6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6e2:	f000 f90f 	bl	801d904 <_lseek_r>
 801d6e6:	1c43      	adds	r3, r0, #1
 801d6e8:	89a3      	ldrh	r3, [r4, #12]
 801d6ea:	bf15      	itete	ne
 801d6ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d6ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d6f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d6f6:	81a3      	strheq	r3, [r4, #12]
 801d6f8:	bf18      	it	ne
 801d6fa:	81a3      	strhne	r3, [r4, #12]
 801d6fc:	bd10      	pop	{r4, pc}

0801d6fe <__sclose>:
 801d6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d702:	f000 b8ef 	b.w	801d8e4 <_close_r>

0801d706 <_vsniprintf_r>:
 801d706:	b530      	push	{r4, r5, lr}
 801d708:	4614      	mov	r4, r2
 801d70a:	2c00      	cmp	r4, #0
 801d70c:	b09b      	sub	sp, #108	@ 0x6c
 801d70e:	4605      	mov	r5, r0
 801d710:	461a      	mov	r2, r3
 801d712:	da05      	bge.n	801d720 <_vsniprintf_r+0x1a>
 801d714:	238b      	movs	r3, #139	@ 0x8b
 801d716:	6003      	str	r3, [r0, #0]
 801d718:	f04f 30ff 	mov.w	r0, #4294967295
 801d71c:	b01b      	add	sp, #108	@ 0x6c
 801d71e:	bd30      	pop	{r4, r5, pc}
 801d720:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d724:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d728:	f04f 0300 	mov.w	r3, #0
 801d72c:	9319      	str	r3, [sp, #100]	@ 0x64
 801d72e:	bf14      	ite	ne
 801d730:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d734:	4623      	moveq	r3, r4
 801d736:	9302      	str	r3, [sp, #8]
 801d738:	9305      	str	r3, [sp, #20]
 801d73a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d73e:	9100      	str	r1, [sp, #0]
 801d740:	9104      	str	r1, [sp, #16]
 801d742:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d746:	4669      	mov	r1, sp
 801d748:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d74a:	f000 faa1 	bl	801dc90 <_svfiprintf_r>
 801d74e:	1c43      	adds	r3, r0, #1
 801d750:	bfbc      	itt	lt
 801d752:	238b      	movlt	r3, #139	@ 0x8b
 801d754:	602b      	strlt	r3, [r5, #0]
 801d756:	2c00      	cmp	r4, #0
 801d758:	d0e0      	beq.n	801d71c <_vsniprintf_r+0x16>
 801d75a:	9b00      	ldr	r3, [sp, #0]
 801d75c:	2200      	movs	r2, #0
 801d75e:	701a      	strb	r2, [r3, #0]
 801d760:	e7dc      	b.n	801d71c <_vsniprintf_r+0x16>
	...

0801d764 <vsniprintf>:
 801d764:	b507      	push	{r0, r1, r2, lr}
 801d766:	9300      	str	r3, [sp, #0]
 801d768:	4613      	mov	r3, r2
 801d76a:	460a      	mov	r2, r1
 801d76c:	4601      	mov	r1, r0
 801d76e:	4803      	ldr	r0, [pc, #12]	@ (801d77c <vsniprintf+0x18>)
 801d770:	6800      	ldr	r0, [r0, #0]
 801d772:	f7ff ffc8 	bl	801d706 <_vsniprintf_r>
 801d776:	b003      	add	sp, #12
 801d778:	f85d fb04 	ldr.w	pc, [sp], #4
 801d77c:	2400002c 	.word	0x2400002c

0801d780 <__swbuf_r>:
 801d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d782:	460e      	mov	r6, r1
 801d784:	4614      	mov	r4, r2
 801d786:	4605      	mov	r5, r0
 801d788:	b118      	cbz	r0, 801d792 <__swbuf_r+0x12>
 801d78a:	6a03      	ldr	r3, [r0, #32]
 801d78c:	b90b      	cbnz	r3, 801d792 <__swbuf_r+0x12>
 801d78e:	f7ff fe79 	bl	801d484 <__sinit>
 801d792:	69a3      	ldr	r3, [r4, #24]
 801d794:	60a3      	str	r3, [r4, #8]
 801d796:	89a3      	ldrh	r3, [r4, #12]
 801d798:	071a      	lsls	r2, r3, #28
 801d79a:	d501      	bpl.n	801d7a0 <__swbuf_r+0x20>
 801d79c:	6923      	ldr	r3, [r4, #16]
 801d79e:	b943      	cbnz	r3, 801d7b2 <__swbuf_r+0x32>
 801d7a0:	4621      	mov	r1, r4
 801d7a2:	4628      	mov	r0, r5
 801d7a4:	f000 f82a 	bl	801d7fc <__swsetup_r>
 801d7a8:	b118      	cbz	r0, 801d7b2 <__swbuf_r+0x32>
 801d7aa:	f04f 37ff 	mov.w	r7, #4294967295
 801d7ae:	4638      	mov	r0, r7
 801d7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7b2:	6823      	ldr	r3, [r4, #0]
 801d7b4:	6922      	ldr	r2, [r4, #16]
 801d7b6:	1a98      	subs	r0, r3, r2
 801d7b8:	6963      	ldr	r3, [r4, #20]
 801d7ba:	b2f6      	uxtb	r6, r6
 801d7bc:	4283      	cmp	r3, r0
 801d7be:	4637      	mov	r7, r6
 801d7c0:	dc05      	bgt.n	801d7ce <__swbuf_r+0x4e>
 801d7c2:	4621      	mov	r1, r4
 801d7c4:	4628      	mov	r0, r5
 801d7c6:	f000 feb1 	bl	801e52c <_fflush_r>
 801d7ca:	2800      	cmp	r0, #0
 801d7cc:	d1ed      	bne.n	801d7aa <__swbuf_r+0x2a>
 801d7ce:	68a3      	ldr	r3, [r4, #8]
 801d7d0:	3b01      	subs	r3, #1
 801d7d2:	60a3      	str	r3, [r4, #8]
 801d7d4:	6823      	ldr	r3, [r4, #0]
 801d7d6:	1c5a      	adds	r2, r3, #1
 801d7d8:	6022      	str	r2, [r4, #0]
 801d7da:	701e      	strb	r6, [r3, #0]
 801d7dc:	6962      	ldr	r2, [r4, #20]
 801d7de:	1c43      	adds	r3, r0, #1
 801d7e0:	429a      	cmp	r2, r3
 801d7e2:	d004      	beq.n	801d7ee <__swbuf_r+0x6e>
 801d7e4:	89a3      	ldrh	r3, [r4, #12]
 801d7e6:	07db      	lsls	r3, r3, #31
 801d7e8:	d5e1      	bpl.n	801d7ae <__swbuf_r+0x2e>
 801d7ea:	2e0a      	cmp	r6, #10
 801d7ec:	d1df      	bne.n	801d7ae <__swbuf_r+0x2e>
 801d7ee:	4621      	mov	r1, r4
 801d7f0:	4628      	mov	r0, r5
 801d7f2:	f000 fe9b 	bl	801e52c <_fflush_r>
 801d7f6:	2800      	cmp	r0, #0
 801d7f8:	d0d9      	beq.n	801d7ae <__swbuf_r+0x2e>
 801d7fa:	e7d6      	b.n	801d7aa <__swbuf_r+0x2a>

0801d7fc <__swsetup_r>:
 801d7fc:	b538      	push	{r3, r4, r5, lr}
 801d7fe:	4b29      	ldr	r3, [pc, #164]	@ (801d8a4 <__swsetup_r+0xa8>)
 801d800:	4605      	mov	r5, r0
 801d802:	6818      	ldr	r0, [r3, #0]
 801d804:	460c      	mov	r4, r1
 801d806:	b118      	cbz	r0, 801d810 <__swsetup_r+0x14>
 801d808:	6a03      	ldr	r3, [r0, #32]
 801d80a:	b90b      	cbnz	r3, 801d810 <__swsetup_r+0x14>
 801d80c:	f7ff fe3a 	bl	801d484 <__sinit>
 801d810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d814:	0719      	lsls	r1, r3, #28
 801d816:	d422      	bmi.n	801d85e <__swsetup_r+0x62>
 801d818:	06da      	lsls	r2, r3, #27
 801d81a:	d407      	bmi.n	801d82c <__swsetup_r+0x30>
 801d81c:	2209      	movs	r2, #9
 801d81e:	602a      	str	r2, [r5, #0]
 801d820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d824:	81a3      	strh	r3, [r4, #12]
 801d826:	f04f 30ff 	mov.w	r0, #4294967295
 801d82a:	e033      	b.n	801d894 <__swsetup_r+0x98>
 801d82c:	0758      	lsls	r0, r3, #29
 801d82e:	d512      	bpl.n	801d856 <__swsetup_r+0x5a>
 801d830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d832:	b141      	cbz	r1, 801d846 <__swsetup_r+0x4a>
 801d834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d838:	4299      	cmp	r1, r3
 801d83a:	d002      	beq.n	801d842 <__swsetup_r+0x46>
 801d83c:	4628      	mov	r0, r5
 801d83e:	f000 f8d3 	bl	801d9e8 <_free_r>
 801d842:	2300      	movs	r3, #0
 801d844:	6363      	str	r3, [r4, #52]	@ 0x34
 801d846:	89a3      	ldrh	r3, [r4, #12]
 801d848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d84c:	81a3      	strh	r3, [r4, #12]
 801d84e:	2300      	movs	r3, #0
 801d850:	6063      	str	r3, [r4, #4]
 801d852:	6923      	ldr	r3, [r4, #16]
 801d854:	6023      	str	r3, [r4, #0]
 801d856:	89a3      	ldrh	r3, [r4, #12]
 801d858:	f043 0308 	orr.w	r3, r3, #8
 801d85c:	81a3      	strh	r3, [r4, #12]
 801d85e:	6923      	ldr	r3, [r4, #16]
 801d860:	b94b      	cbnz	r3, 801d876 <__swsetup_r+0x7a>
 801d862:	89a3      	ldrh	r3, [r4, #12]
 801d864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d86c:	d003      	beq.n	801d876 <__swsetup_r+0x7a>
 801d86e:	4621      	mov	r1, r4
 801d870:	4628      	mov	r0, r5
 801d872:	f000 fea9 	bl	801e5c8 <__smakebuf_r>
 801d876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d87a:	f013 0201 	ands.w	r2, r3, #1
 801d87e:	d00a      	beq.n	801d896 <__swsetup_r+0x9a>
 801d880:	2200      	movs	r2, #0
 801d882:	60a2      	str	r2, [r4, #8]
 801d884:	6962      	ldr	r2, [r4, #20]
 801d886:	4252      	negs	r2, r2
 801d888:	61a2      	str	r2, [r4, #24]
 801d88a:	6922      	ldr	r2, [r4, #16]
 801d88c:	b942      	cbnz	r2, 801d8a0 <__swsetup_r+0xa4>
 801d88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d892:	d1c5      	bne.n	801d820 <__swsetup_r+0x24>
 801d894:	bd38      	pop	{r3, r4, r5, pc}
 801d896:	0799      	lsls	r1, r3, #30
 801d898:	bf58      	it	pl
 801d89a:	6962      	ldrpl	r2, [r4, #20]
 801d89c:	60a2      	str	r2, [r4, #8]
 801d89e:	e7f4      	b.n	801d88a <__swsetup_r+0x8e>
 801d8a0:	2000      	movs	r0, #0
 801d8a2:	e7f7      	b.n	801d894 <__swsetup_r+0x98>
 801d8a4:	2400002c 	.word	0x2400002c

0801d8a8 <memset>:
 801d8a8:	4402      	add	r2, r0
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	4293      	cmp	r3, r2
 801d8ae:	d100      	bne.n	801d8b2 <memset+0xa>
 801d8b0:	4770      	bx	lr
 801d8b2:	f803 1b01 	strb.w	r1, [r3], #1
 801d8b6:	e7f9      	b.n	801d8ac <memset+0x4>

0801d8b8 <strstr>:
 801d8b8:	780a      	ldrb	r2, [r1, #0]
 801d8ba:	b570      	push	{r4, r5, r6, lr}
 801d8bc:	b96a      	cbnz	r2, 801d8da <strstr+0x22>
 801d8be:	bd70      	pop	{r4, r5, r6, pc}
 801d8c0:	429a      	cmp	r2, r3
 801d8c2:	d109      	bne.n	801d8d8 <strstr+0x20>
 801d8c4:	460c      	mov	r4, r1
 801d8c6:	4605      	mov	r5, r0
 801d8c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d0f6      	beq.n	801d8be <strstr+0x6>
 801d8d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d8d4:	429e      	cmp	r6, r3
 801d8d6:	d0f7      	beq.n	801d8c8 <strstr+0x10>
 801d8d8:	3001      	adds	r0, #1
 801d8da:	7803      	ldrb	r3, [r0, #0]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d1ef      	bne.n	801d8c0 <strstr+0x8>
 801d8e0:	4618      	mov	r0, r3
 801d8e2:	e7ec      	b.n	801d8be <strstr+0x6>

0801d8e4 <_close_r>:
 801d8e4:	b538      	push	{r3, r4, r5, lr}
 801d8e6:	4d06      	ldr	r5, [pc, #24]	@ (801d900 <_close_r+0x1c>)
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	4604      	mov	r4, r0
 801d8ec:	4608      	mov	r0, r1
 801d8ee:	602b      	str	r3, [r5, #0]
 801d8f0:	f7e4 fc96 	bl	8002220 <_close>
 801d8f4:	1c43      	adds	r3, r0, #1
 801d8f6:	d102      	bne.n	801d8fe <_close_r+0x1a>
 801d8f8:	682b      	ldr	r3, [r5, #0]
 801d8fa:	b103      	cbz	r3, 801d8fe <_close_r+0x1a>
 801d8fc:	6023      	str	r3, [r4, #0]
 801d8fe:	bd38      	pop	{r3, r4, r5, pc}
 801d900:	24008ae4 	.word	0x24008ae4

0801d904 <_lseek_r>:
 801d904:	b538      	push	{r3, r4, r5, lr}
 801d906:	4d07      	ldr	r5, [pc, #28]	@ (801d924 <_lseek_r+0x20>)
 801d908:	4604      	mov	r4, r0
 801d90a:	4608      	mov	r0, r1
 801d90c:	4611      	mov	r1, r2
 801d90e:	2200      	movs	r2, #0
 801d910:	602a      	str	r2, [r5, #0]
 801d912:	461a      	mov	r2, r3
 801d914:	f7e4 fcab 	bl	800226e <_lseek>
 801d918:	1c43      	adds	r3, r0, #1
 801d91a:	d102      	bne.n	801d922 <_lseek_r+0x1e>
 801d91c:	682b      	ldr	r3, [r5, #0]
 801d91e:	b103      	cbz	r3, 801d922 <_lseek_r+0x1e>
 801d920:	6023      	str	r3, [r4, #0]
 801d922:	bd38      	pop	{r3, r4, r5, pc}
 801d924:	24008ae4 	.word	0x24008ae4

0801d928 <_read_r>:
 801d928:	b538      	push	{r3, r4, r5, lr}
 801d92a:	4d07      	ldr	r5, [pc, #28]	@ (801d948 <_read_r+0x20>)
 801d92c:	4604      	mov	r4, r0
 801d92e:	4608      	mov	r0, r1
 801d930:	4611      	mov	r1, r2
 801d932:	2200      	movs	r2, #0
 801d934:	602a      	str	r2, [r5, #0]
 801d936:	461a      	mov	r2, r3
 801d938:	f7e4 fc39 	bl	80021ae <_read>
 801d93c:	1c43      	adds	r3, r0, #1
 801d93e:	d102      	bne.n	801d946 <_read_r+0x1e>
 801d940:	682b      	ldr	r3, [r5, #0]
 801d942:	b103      	cbz	r3, 801d946 <_read_r+0x1e>
 801d944:	6023      	str	r3, [r4, #0]
 801d946:	bd38      	pop	{r3, r4, r5, pc}
 801d948:	24008ae4 	.word	0x24008ae4

0801d94c <_write_r>:
 801d94c:	b538      	push	{r3, r4, r5, lr}
 801d94e:	4d07      	ldr	r5, [pc, #28]	@ (801d96c <_write_r+0x20>)
 801d950:	4604      	mov	r4, r0
 801d952:	4608      	mov	r0, r1
 801d954:	4611      	mov	r1, r2
 801d956:	2200      	movs	r2, #0
 801d958:	602a      	str	r2, [r5, #0]
 801d95a:	461a      	mov	r2, r3
 801d95c:	f7e4 fc44 	bl	80021e8 <_write>
 801d960:	1c43      	adds	r3, r0, #1
 801d962:	d102      	bne.n	801d96a <_write_r+0x1e>
 801d964:	682b      	ldr	r3, [r5, #0]
 801d966:	b103      	cbz	r3, 801d96a <_write_r+0x1e>
 801d968:	6023      	str	r3, [r4, #0]
 801d96a:	bd38      	pop	{r3, r4, r5, pc}
 801d96c:	24008ae4 	.word	0x24008ae4

0801d970 <__errno>:
 801d970:	4b01      	ldr	r3, [pc, #4]	@ (801d978 <__errno+0x8>)
 801d972:	6818      	ldr	r0, [r3, #0]
 801d974:	4770      	bx	lr
 801d976:	bf00      	nop
 801d978:	2400002c 	.word	0x2400002c

0801d97c <__libc_init_array>:
 801d97c:	b570      	push	{r4, r5, r6, lr}
 801d97e:	4d0d      	ldr	r5, [pc, #52]	@ (801d9b4 <__libc_init_array+0x38>)
 801d980:	4c0d      	ldr	r4, [pc, #52]	@ (801d9b8 <__libc_init_array+0x3c>)
 801d982:	1b64      	subs	r4, r4, r5
 801d984:	10a4      	asrs	r4, r4, #2
 801d986:	2600      	movs	r6, #0
 801d988:	42a6      	cmp	r6, r4
 801d98a:	d109      	bne.n	801d9a0 <__libc_init_array+0x24>
 801d98c:	4d0b      	ldr	r5, [pc, #44]	@ (801d9bc <__libc_init_array+0x40>)
 801d98e:	4c0c      	ldr	r4, [pc, #48]	@ (801d9c0 <__libc_init_array+0x44>)
 801d990:	f000 fed8 	bl	801e744 <_init>
 801d994:	1b64      	subs	r4, r4, r5
 801d996:	10a4      	asrs	r4, r4, #2
 801d998:	2600      	movs	r6, #0
 801d99a:	42a6      	cmp	r6, r4
 801d99c:	d105      	bne.n	801d9aa <__libc_init_array+0x2e>
 801d99e:	bd70      	pop	{r4, r5, r6, pc}
 801d9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801d9a4:	4798      	blx	r3
 801d9a6:	3601      	adds	r6, #1
 801d9a8:	e7ee      	b.n	801d988 <__libc_init_array+0xc>
 801d9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801d9ae:	4798      	blx	r3
 801d9b0:	3601      	adds	r6, #1
 801d9b2:	e7f2      	b.n	801d99a <__libc_init_array+0x1e>
 801d9b4:	08032054 	.word	0x08032054
 801d9b8:	08032054 	.word	0x08032054
 801d9bc:	08032054 	.word	0x08032054
 801d9c0:	08032058 	.word	0x08032058

0801d9c4 <__retarget_lock_init_recursive>:
 801d9c4:	4770      	bx	lr

0801d9c6 <__retarget_lock_acquire_recursive>:
 801d9c6:	4770      	bx	lr

0801d9c8 <__retarget_lock_release_recursive>:
 801d9c8:	4770      	bx	lr

0801d9ca <memcpy>:
 801d9ca:	440a      	add	r2, r1
 801d9cc:	4291      	cmp	r1, r2
 801d9ce:	f100 33ff 	add.w	r3, r0, #4294967295
 801d9d2:	d100      	bne.n	801d9d6 <memcpy+0xc>
 801d9d4:	4770      	bx	lr
 801d9d6:	b510      	push	{r4, lr}
 801d9d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d9e0:	4291      	cmp	r1, r2
 801d9e2:	d1f9      	bne.n	801d9d8 <memcpy+0xe>
 801d9e4:	bd10      	pop	{r4, pc}
	...

0801d9e8 <_free_r>:
 801d9e8:	b538      	push	{r3, r4, r5, lr}
 801d9ea:	4605      	mov	r5, r0
 801d9ec:	2900      	cmp	r1, #0
 801d9ee:	d041      	beq.n	801da74 <_free_r+0x8c>
 801d9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d9f4:	1f0c      	subs	r4, r1, #4
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	bfb8      	it	lt
 801d9fa:	18e4      	addlt	r4, r4, r3
 801d9fc:	f000 f8e0 	bl	801dbc0 <__malloc_lock>
 801da00:	4a1d      	ldr	r2, [pc, #116]	@ (801da78 <_free_r+0x90>)
 801da02:	6813      	ldr	r3, [r2, #0]
 801da04:	b933      	cbnz	r3, 801da14 <_free_r+0x2c>
 801da06:	6063      	str	r3, [r4, #4]
 801da08:	6014      	str	r4, [r2, #0]
 801da0a:	4628      	mov	r0, r5
 801da0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da10:	f000 b8dc 	b.w	801dbcc <__malloc_unlock>
 801da14:	42a3      	cmp	r3, r4
 801da16:	d908      	bls.n	801da2a <_free_r+0x42>
 801da18:	6820      	ldr	r0, [r4, #0]
 801da1a:	1821      	adds	r1, r4, r0
 801da1c:	428b      	cmp	r3, r1
 801da1e:	bf01      	itttt	eq
 801da20:	6819      	ldreq	r1, [r3, #0]
 801da22:	685b      	ldreq	r3, [r3, #4]
 801da24:	1809      	addeq	r1, r1, r0
 801da26:	6021      	streq	r1, [r4, #0]
 801da28:	e7ed      	b.n	801da06 <_free_r+0x1e>
 801da2a:	461a      	mov	r2, r3
 801da2c:	685b      	ldr	r3, [r3, #4]
 801da2e:	b10b      	cbz	r3, 801da34 <_free_r+0x4c>
 801da30:	42a3      	cmp	r3, r4
 801da32:	d9fa      	bls.n	801da2a <_free_r+0x42>
 801da34:	6811      	ldr	r1, [r2, #0]
 801da36:	1850      	adds	r0, r2, r1
 801da38:	42a0      	cmp	r0, r4
 801da3a:	d10b      	bne.n	801da54 <_free_r+0x6c>
 801da3c:	6820      	ldr	r0, [r4, #0]
 801da3e:	4401      	add	r1, r0
 801da40:	1850      	adds	r0, r2, r1
 801da42:	4283      	cmp	r3, r0
 801da44:	6011      	str	r1, [r2, #0]
 801da46:	d1e0      	bne.n	801da0a <_free_r+0x22>
 801da48:	6818      	ldr	r0, [r3, #0]
 801da4a:	685b      	ldr	r3, [r3, #4]
 801da4c:	6053      	str	r3, [r2, #4]
 801da4e:	4408      	add	r0, r1
 801da50:	6010      	str	r0, [r2, #0]
 801da52:	e7da      	b.n	801da0a <_free_r+0x22>
 801da54:	d902      	bls.n	801da5c <_free_r+0x74>
 801da56:	230c      	movs	r3, #12
 801da58:	602b      	str	r3, [r5, #0]
 801da5a:	e7d6      	b.n	801da0a <_free_r+0x22>
 801da5c:	6820      	ldr	r0, [r4, #0]
 801da5e:	1821      	adds	r1, r4, r0
 801da60:	428b      	cmp	r3, r1
 801da62:	bf04      	itt	eq
 801da64:	6819      	ldreq	r1, [r3, #0]
 801da66:	685b      	ldreq	r3, [r3, #4]
 801da68:	6063      	str	r3, [r4, #4]
 801da6a:	bf04      	itt	eq
 801da6c:	1809      	addeq	r1, r1, r0
 801da6e:	6021      	streq	r1, [r4, #0]
 801da70:	6054      	str	r4, [r2, #4]
 801da72:	e7ca      	b.n	801da0a <_free_r+0x22>
 801da74:	bd38      	pop	{r3, r4, r5, pc}
 801da76:	bf00      	nop
 801da78:	24008af0 	.word	0x24008af0

0801da7c <sbrk_aligned>:
 801da7c:	b570      	push	{r4, r5, r6, lr}
 801da7e:	4e0f      	ldr	r6, [pc, #60]	@ (801dabc <sbrk_aligned+0x40>)
 801da80:	460c      	mov	r4, r1
 801da82:	6831      	ldr	r1, [r6, #0]
 801da84:	4605      	mov	r5, r0
 801da86:	b911      	cbnz	r1, 801da8e <sbrk_aligned+0x12>
 801da88:	f000 fe16 	bl	801e6b8 <_sbrk_r>
 801da8c:	6030      	str	r0, [r6, #0]
 801da8e:	4621      	mov	r1, r4
 801da90:	4628      	mov	r0, r5
 801da92:	f000 fe11 	bl	801e6b8 <_sbrk_r>
 801da96:	1c43      	adds	r3, r0, #1
 801da98:	d103      	bne.n	801daa2 <sbrk_aligned+0x26>
 801da9a:	f04f 34ff 	mov.w	r4, #4294967295
 801da9e:	4620      	mov	r0, r4
 801daa0:	bd70      	pop	{r4, r5, r6, pc}
 801daa2:	1cc4      	adds	r4, r0, #3
 801daa4:	f024 0403 	bic.w	r4, r4, #3
 801daa8:	42a0      	cmp	r0, r4
 801daaa:	d0f8      	beq.n	801da9e <sbrk_aligned+0x22>
 801daac:	1a21      	subs	r1, r4, r0
 801daae:	4628      	mov	r0, r5
 801dab0:	f000 fe02 	bl	801e6b8 <_sbrk_r>
 801dab4:	3001      	adds	r0, #1
 801dab6:	d1f2      	bne.n	801da9e <sbrk_aligned+0x22>
 801dab8:	e7ef      	b.n	801da9a <sbrk_aligned+0x1e>
 801daba:	bf00      	nop
 801dabc:	24008aec 	.word	0x24008aec

0801dac0 <_malloc_r>:
 801dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dac4:	1ccd      	adds	r5, r1, #3
 801dac6:	f025 0503 	bic.w	r5, r5, #3
 801daca:	3508      	adds	r5, #8
 801dacc:	2d0c      	cmp	r5, #12
 801dace:	bf38      	it	cc
 801dad0:	250c      	movcc	r5, #12
 801dad2:	2d00      	cmp	r5, #0
 801dad4:	4606      	mov	r6, r0
 801dad6:	db01      	blt.n	801dadc <_malloc_r+0x1c>
 801dad8:	42a9      	cmp	r1, r5
 801dada:	d904      	bls.n	801dae6 <_malloc_r+0x26>
 801dadc:	230c      	movs	r3, #12
 801dade:	6033      	str	r3, [r6, #0]
 801dae0:	2000      	movs	r0, #0
 801dae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801dbbc <_malloc_r+0xfc>
 801daea:	f000 f869 	bl	801dbc0 <__malloc_lock>
 801daee:	f8d8 3000 	ldr.w	r3, [r8]
 801daf2:	461c      	mov	r4, r3
 801daf4:	bb44      	cbnz	r4, 801db48 <_malloc_r+0x88>
 801daf6:	4629      	mov	r1, r5
 801daf8:	4630      	mov	r0, r6
 801dafa:	f7ff ffbf 	bl	801da7c <sbrk_aligned>
 801dafe:	1c43      	adds	r3, r0, #1
 801db00:	4604      	mov	r4, r0
 801db02:	d158      	bne.n	801dbb6 <_malloc_r+0xf6>
 801db04:	f8d8 4000 	ldr.w	r4, [r8]
 801db08:	4627      	mov	r7, r4
 801db0a:	2f00      	cmp	r7, #0
 801db0c:	d143      	bne.n	801db96 <_malloc_r+0xd6>
 801db0e:	2c00      	cmp	r4, #0
 801db10:	d04b      	beq.n	801dbaa <_malloc_r+0xea>
 801db12:	6823      	ldr	r3, [r4, #0]
 801db14:	4639      	mov	r1, r7
 801db16:	4630      	mov	r0, r6
 801db18:	eb04 0903 	add.w	r9, r4, r3
 801db1c:	f000 fdcc 	bl	801e6b8 <_sbrk_r>
 801db20:	4581      	cmp	r9, r0
 801db22:	d142      	bne.n	801dbaa <_malloc_r+0xea>
 801db24:	6821      	ldr	r1, [r4, #0]
 801db26:	1a6d      	subs	r5, r5, r1
 801db28:	4629      	mov	r1, r5
 801db2a:	4630      	mov	r0, r6
 801db2c:	f7ff ffa6 	bl	801da7c <sbrk_aligned>
 801db30:	3001      	adds	r0, #1
 801db32:	d03a      	beq.n	801dbaa <_malloc_r+0xea>
 801db34:	6823      	ldr	r3, [r4, #0]
 801db36:	442b      	add	r3, r5
 801db38:	6023      	str	r3, [r4, #0]
 801db3a:	f8d8 3000 	ldr.w	r3, [r8]
 801db3e:	685a      	ldr	r2, [r3, #4]
 801db40:	bb62      	cbnz	r2, 801db9c <_malloc_r+0xdc>
 801db42:	f8c8 7000 	str.w	r7, [r8]
 801db46:	e00f      	b.n	801db68 <_malloc_r+0xa8>
 801db48:	6822      	ldr	r2, [r4, #0]
 801db4a:	1b52      	subs	r2, r2, r5
 801db4c:	d420      	bmi.n	801db90 <_malloc_r+0xd0>
 801db4e:	2a0b      	cmp	r2, #11
 801db50:	d917      	bls.n	801db82 <_malloc_r+0xc2>
 801db52:	1961      	adds	r1, r4, r5
 801db54:	42a3      	cmp	r3, r4
 801db56:	6025      	str	r5, [r4, #0]
 801db58:	bf18      	it	ne
 801db5a:	6059      	strne	r1, [r3, #4]
 801db5c:	6863      	ldr	r3, [r4, #4]
 801db5e:	bf08      	it	eq
 801db60:	f8c8 1000 	streq.w	r1, [r8]
 801db64:	5162      	str	r2, [r4, r5]
 801db66:	604b      	str	r3, [r1, #4]
 801db68:	4630      	mov	r0, r6
 801db6a:	f000 f82f 	bl	801dbcc <__malloc_unlock>
 801db6e:	f104 000b 	add.w	r0, r4, #11
 801db72:	1d23      	adds	r3, r4, #4
 801db74:	f020 0007 	bic.w	r0, r0, #7
 801db78:	1ac2      	subs	r2, r0, r3
 801db7a:	bf1c      	itt	ne
 801db7c:	1a1b      	subne	r3, r3, r0
 801db7e:	50a3      	strne	r3, [r4, r2]
 801db80:	e7af      	b.n	801dae2 <_malloc_r+0x22>
 801db82:	6862      	ldr	r2, [r4, #4]
 801db84:	42a3      	cmp	r3, r4
 801db86:	bf0c      	ite	eq
 801db88:	f8c8 2000 	streq.w	r2, [r8]
 801db8c:	605a      	strne	r2, [r3, #4]
 801db8e:	e7eb      	b.n	801db68 <_malloc_r+0xa8>
 801db90:	4623      	mov	r3, r4
 801db92:	6864      	ldr	r4, [r4, #4]
 801db94:	e7ae      	b.n	801daf4 <_malloc_r+0x34>
 801db96:	463c      	mov	r4, r7
 801db98:	687f      	ldr	r7, [r7, #4]
 801db9a:	e7b6      	b.n	801db0a <_malloc_r+0x4a>
 801db9c:	461a      	mov	r2, r3
 801db9e:	685b      	ldr	r3, [r3, #4]
 801dba0:	42a3      	cmp	r3, r4
 801dba2:	d1fb      	bne.n	801db9c <_malloc_r+0xdc>
 801dba4:	2300      	movs	r3, #0
 801dba6:	6053      	str	r3, [r2, #4]
 801dba8:	e7de      	b.n	801db68 <_malloc_r+0xa8>
 801dbaa:	230c      	movs	r3, #12
 801dbac:	6033      	str	r3, [r6, #0]
 801dbae:	4630      	mov	r0, r6
 801dbb0:	f000 f80c 	bl	801dbcc <__malloc_unlock>
 801dbb4:	e794      	b.n	801dae0 <_malloc_r+0x20>
 801dbb6:	6005      	str	r5, [r0, #0]
 801dbb8:	e7d6      	b.n	801db68 <_malloc_r+0xa8>
 801dbba:	bf00      	nop
 801dbbc:	24008af0 	.word	0x24008af0

0801dbc0 <__malloc_lock>:
 801dbc0:	4801      	ldr	r0, [pc, #4]	@ (801dbc8 <__malloc_lock+0x8>)
 801dbc2:	f7ff bf00 	b.w	801d9c6 <__retarget_lock_acquire_recursive>
 801dbc6:	bf00      	nop
 801dbc8:	24008ae8 	.word	0x24008ae8

0801dbcc <__malloc_unlock>:
 801dbcc:	4801      	ldr	r0, [pc, #4]	@ (801dbd4 <__malloc_unlock+0x8>)
 801dbce:	f7ff befb 	b.w	801d9c8 <__retarget_lock_release_recursive>
 801dbd2:	bf00      	nop
 801dbd4:	24008ae8 	.word	0x24008ae8

0801dbd8 <__ssputs_r>:
 801dbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbdc:	688e      	ldr	r6, [r1, #8]
 801dbde:	461f      	mov	r7, r3
 801dbe0:	42be      	cmp	r6, r7
 801dbe2:	680b      	ldr	r3, [r1, #0]
 801dbe4:	4682      	mov	sl, r0
 801dbe6:	460c      	mov	r4, r1
 801dbe8:	4690      	mov	r8, r2
 801dbea:	d82d      	bhi.n	801dc48 <__ssputs_r+0x70>
 801dbec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dbf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dbf4:	d026      	beq.n	801dc44 <__ssputs_r+0x6c>
 801dbf6:	6965      	ldr	r5, [r4, #20]
 801dbf8:	6909      	ldr	r1, [r1, #16]
 801dbfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dbfe:	eba3 0901 	sub.w	r9, r3, r1
 801dc02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dc06:	1c7b      	adds	r3, r7, #1
 801dc08:	444b      	add	r3, r9
 801dc0a:	106d      	asrs	r5, r5, #1
 801dc0c:	429d      	cmp	r5, r3
 801dc0e:	bf38      	it	cc
 801dc10:	461d      	movcc	r5, r3
 801dc12:	0553      	lsls	r3, r2, #21
 801dc14:	d527      	bpl.n	801dc66 <__ssputs_r+0x8e>
 801dc16:	4629      	mov	r1, r5
 801dc18:	f7ff ff52 	bl	801dac0 <_malloc_r>
 801dc1c:	4606      	mov	r6, r0
 801dc1e:	b360      	cbz	r0, 801dc7a <__ssputs_r+0xa2>
 801dc20:	6921      	ldr	r1, [r4, #16]
 801dc22:	464a      	mov	r2, r9
 801dc24:	f7ff fed1 	bl	801d9ca <memcpy>
 801dc28:	89a3      	ldrh	r3, [r4, #12]
 801dc2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801dc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dc32:	81a3      	strh	r3, [r4, #12]
 801dc34:	6126      	str	r6, [r4, #16]
 801dc36:	6165      	str	r5, [r4, #20]
 801dc38:	444e      	add	r6, r9
 801dc3a:	eba5 0509 	sub.w	r5, r5, r9
 801dc3e:	6026      	str	r6, [r4, #0]
 801dc40:	60a5      	str	r5, [r4, #8]
 801dc42:	463e      	mov	r6, r7
 801dc44:	42be      	cmp	r6, r7
 801dc46:	d900      	bls.n	801dc4a <__ssputs_r+0x72>
 801dc48:	463e      	mov	r6, r7
 801dc4a:	6820      	ldr	r0, [r4, #0]
 801dc4c:	4632      	mov	r2, r6
 801dc4e:	4641      	mov	r1, r8
 801dc50:	f000 fcf6 	bl	801e640 <memmove>
 801dc54:	68a3      	ldr	r3, [r4, #8]
 801dc56:	1b9b      	subs	r3, r3, r6
 801dc58:	60a3      	str	r3, [r4, #8]
 801dc5a:	6823      	ldr	r3, [r4, #0]
 801dc5c:	4433      	add	r3, r6
 801dc5e:	6023      	str	r3, [r4, #0]
 801dc60:	2000      	movs	r0, #0
 801dc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc66:	462a      	mov	r2, r5
 801dc68:	f000 fd36 	bl	801e6d8 <_realloc_r>
 801dc6c:	4606      	mov	r6, r0
 801dc6e:	2800      	cmp	r0, #0
 801dc70:	d1e0      	bne.n	801dc34 <__ssputs_r+0x5c>
 801dc72:	6921      	ldr	r1, [r4, #16]
 801dc74:	4650      	mov	r0, sl
 801dc76:	f7ff feb7 	bl	801d9e8 <_free_r>
 801dc7a:	230c      	movs	r3, #12
 801dc7c:	f8ca 3000 	str.w	r3, [sl]
 801dc80:	89a3      	ldrh	r3, [r4, #12]
 801dc82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc86:	81a3      	strh	r3, [r4, #12]
 801dc88:	f04f 30ff 	mov.w	r0, #4294967295
 801dc8c:	e7e9      	b.n	801dc62 <__ssputs_r+0x8a>
	...

0801dc90 <_svfiprintf_r>:
 801dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc94:	4698      	mov	r8, r3
 801dc96:	898b      	ldrh	r3, [r1, #12]
 801dc98:	061b      	lsls	r3, r3, #24
 801dc9a:	b09d      	sub	sp, #116	@ 0x74
 801dc9c:	4607      	mov	r7, r0
 801dc9e:	460d      	mov	r5, r1
 801dca0:	4614      	mov	r4, r2
 801dca2:	d510      	bpl.n	801dcc6 <_svfiprintf_r+0x36>
 801dca4:	690b      	ldr	r3, [r1, #16]
 801dca6:	b973      	cbnz	r3, 801dcc6 <_svfiprintf_r+0x36>
 801dca8:	2140      	movs	r1, #64	@ 0x40
 801dcaa:	f7ff ff09 	bl	801dac0 <_malloc_r>
 801dcae:	6028      	str	r0, [r5, #0]
 801dcb0:	6128      	str	r0, [r5, #16]
 801dcb2:	b930      	cbnz	r0, 801dcc2 <_svfiprintf_r+0x32>
 801dcb4:	230c      	movs	r3, #12
 801dcb6:	603b      	str	r3, [r7, #0]
 801dcb8:	f04f 30ff 	mov.w	r0, #4294967295
 801dcbc:	b01d      	add	sp, #116	@ 0x74
 801dcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcc2:	2340      	movs	r3, #64	@ 0x40
 801dcc4:	616b      	str	r3, [r5, #20]
 801dcc6:	2300      	movs	r3, #0
 801dcc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801dcca:	2320      	movs	r3, #32
 801dccc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dcd0:	f8cd 800c 	str.w	r8, [sp, #12]
 801dcd4:	2330      	movs	r3, #48	@ 0x30
 801dcd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801de74 <_svfiprintf_r+0x1e4>
 801dcda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dcde:	f04f 0901 	mov.w	r9, #1
 801dce2:	4623      	mov	r3, r4
 801dce4:	469a      	mov	sl, r3
 801dce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcea:	b10a      	cbz	r2, 801dcf0 <_svfiprintf_r+0x60>
 801dcec:	2a25      	cmp	r2, #37	@ 0x25
 801dcee:	d1f9      	bne.n	801dce4 <_svfiprintf_r+0x54>
 801dcf0:	ebba 0b04 	subs.w	fp, sl, r4
 801dcf4:	d00b      	beq.n	801dd0e <_svfiprintf_r+0x7e>
 801dcf6:	465b      	mov	r3, fp
 801dcf8:	4622      	mov	r2, r4
 801dcfa:	4629      	mov	r1, r5
 801dcfc:	4638      	mov	r0, r7
 801dcfe:	f7ff ff6b 	bl	801dbd8 <__ssputs_r>
 801dd02:	3001      	adds	r0, #1
 801dd04:	f000 80a7 	beq.w	801de56 <_svfiprintf_r+0x1c6>
 801dd08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd0a:	445a      	add	r2, fp
 801dd0c:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd0e:	f89a 3000 	ldrb.w	r3, [sl]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	f000 809f 	beq.w	801de56 <_svfiprintf_r+0x1c6>
 801dd18:	2300      	movs	r3, #0
 801dd1a:	f04f 32ff 	mov.w	r2, #4294967295
 801dd1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dd22:	f10a 0a01 	add.w	sl, sl, #1
 801dd26:	9304      	str	r3, [sp, #16]
 801dd28:	9307      	str	r3, [sp, #28]
 801dd2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dd2e:	931a      	str	r3, [sp, #104]	@ 0x68
 801dd30:	4654      	mov	r4, sl
 801dd32:	2205      	movs	r2, #5
 801dd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd38:	484e      	ldr	r0, [pc, #312]	@ (801de74 <_svfiprintf_r+0x1e4>)
 801dd3a:	f7e2 faf1 	bl	8000320 <memchr>
 801dd3e:	9a04      	ldr	r2, [sp, #16]
 801dd40:	b9d8      	cbnz	r0, 801dd7a <_svfiprintf_r+0xea>
 801dd42:	06d0      	lsls	r0, r2, #27
 801dd44:	bf44      	itt	mi
 801dd46:	2320      	movmi	r3, #32
 801dd48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dd4c:	0711      	lsls	r1, r2, #28
 801dd4e:	bf44      	itt	mi
 801dd50:	232b      	movmi	r3, #43	@ 0x2b
 801dd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dd56:	f89a 3000 	ldrb.w	r3, [sl]
 801dd5a:	2b2a      	cmp	r3, #42	@ 0x2a
 801dd5c:	d015      	beq.n	801dd8a <_svfiprintf_r+0xfa>
 801dd5e:	9a07      	ldr	r2, [sp, #28]
 801dd60:	4654      	mov	r4, sl
 801dd62:	2000      	movs	r0, #0
 801dd64:	f04f 0c0a 	mov.w	ip, #10
 801dd68:	4621      	mov	r1, r4
 801dd6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd6e:	3b30      	subs	r3, #48	@ 0x30
 801dd70:	2b09      	cmp	r3, #9
 801dd72:	d94b      	bls.n	801de0c <_svfiprintf_r+0x17c>
 801dd74:	b1b0      	cbz	r0, 801dda4 <_svfiprintf_r+0x114>
 801dd76:	9207      	str	r2, [sp, #28]
 801dd78:	e014      	b.n	801dda4 <_svfiprintf_r+0x114>
 801dd7a:	eba0 0308 	sub.w	r3, r0, r8
 801dd7e:	fa09 f303 	lsl.w	r3, r9, r3
 801dd82:	4313      	orrs	r3, r2
 801dd84:	9304      	str	r3, [sp, #16]
 801dd86:	46a2      	mov	sl, r4
 801dd88:	e7d2      	b.n	801dd30 <_svfiprintf_r+0xa0>
 801dd8a:	9b03      	ldr	r3, [sp, #12]
 801dd8c:	1d19      	adds	r1, r3, #4
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	9103      	str	r1, [sp, #12]
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	bfbb      	ittet	lt
 801dd96:	425b      	neglt	r3, r3
 801dd98:	f042 0202 	orrlt.w	r2, r2, #2
 801dd9c:	9307      	strge	r3, [sp, #28]
 801dd9e:	9307      	strlt	r3, [sp, #28]
 801dda0:	bfb8      	it	lt
 801dda2:	9204      	strlt	r2, [sp, #16]
 801dda4:	7823      	ldrb	r3, [r4, #0]
 801dda6:	2b2e      	cmp	r3, #46	@ 0x2e
 801dda8:	d10a      	bne.n	801ddc0 <_svfiprintf_r+0x130>
 801ddaa:	7863      	ldrb	r3, [r4, #1]
 801ddac:	2b2a      	cmp	r3, #42	@ 0x2a
 801ddae:	d132      	bne.n	801de16 <_svfiprintf_r+0x186>
 801ddb0:	9b03      	ldr	r3, [sp, #12]
 801ddb2:	1d1a      	adds	r2, r3, #4
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	9203      	str	r2, [sp, #12]
 801ddb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ddbc:	3402      	adds	r4, #2
 801ddbe:	9305      	str	r3, [sp, #20]
 801ddc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801de84 <_svfiprintf_r+0x1f4>
 801ddc4:	7821      	ldrb	r1, [r4, #0]
 801ddc6:	2203      	movs	r2, #3
 801ddc8:	4650      	mov	r0, sl
 801ddca:	f7e2 faa9 	bl	8000320 <memchr>
 801ddce:	b138      	cbz	r0, 801dde0 <_svfiprintf_r+0x150>
 801ddd0:	9b04      	ldr	r3, [sp, #16]
 801ddd2:	eba0 000a 	sub.w	r0, r0, sl
 801ddd6:	2240      	movs	r2, #64	@ 0x40
 801ddd8:	4082      	lsls	r2, r0
 801ddda:	4313      	orrs	r3, r2
 801dddc:	3401      	adds	r4, #1
 801ddde:	9304      	str	r3, [sp, #16]
 801dde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dde4:	4824      	ldr	r0, [pc, #144]	@ (801de78 <_svfiprintf_r+0x1e8>)
 801dde6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ddea:	2206      	movs	r2, #6
 801ddec:	f7e2 fa98 	bl	8000320 <memchr>
 801ddf0:	2800      	cmp	r0, #0
 801ddf2:	d036      	beq.n	801de62 <_svfiprintf_r+0x1d2>
 801ddf4:	4b21      	ldr	r3, [pc, #132]	@ (801de7c <_svfiprintf_r+0x1ec>)
 801ddf6:	bb1b      	cbnz	r3, 801de40 <_svfiprintf_r+0x1b0>
 801ddf8:	9b03      	ldr	r3, [sp, #12]
 801ddfa:	3307      	adds	r3, #7
 801ddfc:	f023 0307 	bic.w	r3, r3, #7
 801de00:	3308      	adds	r3, #8
 801de02:	9303      	str	r3, [sp, #12]
 801de04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de06:	4433      	add	r3, r6
 801de08:	9309      	str	r3, [sp, #36]	@ 0x24
 801de0a:	e76a      	b.n	801dce2 <_svfiprintf_r+0x52>
 801de0c:	fb0c 3202 	mla	r2, ip, r2, r3
 801de10:	460c      	mov	r4, r1
 801de12:	2001      	movs	r0, #1
 801de14:	e7a8      	b.n	801dd68 <_svfiprintf_r+0xd8>
 801de16:	2300      	movs	r3, #0
 801de18:	3401      	adds	r4, #1
 801de1a:	9305      	str	r3, [sp, #20]
 801de1c:	4619      	mov	r1, r3
 801de1e:	f04f 0c0a 	mov.w	ip, #10
 801de22:	4620      	mov	r0, r4
 801de24:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de28:	3a30      	subs	r2, #48	@ 0x30
 801de2a:	2a09      	cmp	r2, #9
 801de2c:	d903      	bls.n	801de36 <_svfiprintf_r+0x1a6>
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d0c6      	beq.n	801ddc0 <_svfiprintf_r+0x130>
 801de32:	9105      	str	r1, [sp, #20]
 801de34:	e7c4      	b.n	801ddc0 <_svfiprintf_r+0x130>
 801de36:	fb0c 2101 	mla	r1, ip, r1, r2
 801de3a:	4604      	mov	r4, r0
 801de3c:	2301      	movs	r3, #1
 801de3e:	e7f0      	b.n	801de22 <_svfiprintf_r+0x192>
 801de40:	ab03      	add	r3, sp, #12
 801de42:	9300      	str	r3, [sp, #0]
 801de44:	462a      	mov	r2, r5
 801de46:	4b0e      	ldr	r3, [pc, #56]	@ (801de80 <_svfiprintf_r+0x1f0>)
 801de48:	a904      	add	r1, sp, #16
 801de4a:	4638      	mov	r0, r7
 801de4c:	f3af 8000 	nop.w
 801de50:	1c42      	adds	r2, r0, #1
 801de52:	4606      	mov	r6, r0
 801de54:	d1d6      	bne.n	801de04 <_svfiprintf_r+0x174>
 801de56:	89ab      	ldrh	r3, [r5, #12]
 801de58:	065b      	lsls	r3, r3, #25
 801de5a:	f53f af2d 	bmi.w	801dcb8 <_svfiprintf_r+0x28>
 801de5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de60:	e72c      	b.n	801dcbc <_svfiprintf_r+0x2c>
 801de62:	ab03      	add	r3, sp, #12
 801de64:	9300      	str	r3, [sp, #0]
 801de66:	462a      	mov	r2, r5
 801de68:	4b05      	ldr	r3, [pc, #20]	@ (801de80 <_svfiprintf_r+0x1f0>)
 801de6a:	a904      	add	r1, sp, #16
 801de6c:	4638      	mov	r0, r7
 801de6e:	f000 f9bb 	bl	801e1e8 <_printf_i>
 801de72:	e7ed      	b.n	801de50 <_svfiprintf_r+0x1c0>
 801de74:	08032019 	.word	0x08032019
 801de78:	08032023 	.word	0x08032023
 801de7c:	00000000 	.word	0x00000000
 801de80:	0801dbd9 	.word	0x0801dbd9
 801de84:	0803201f 	.word	0x0803201f

0801de88 <__sfputc_r>:
 801de88:	6893      	ldr	r3, [r2, #8]
 801de8a:	3b01      	subs	r3, #1
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	b410      	push	{r4}
 801de90:	6093      	str	r3, [r2, #8]
 801de92:	da08      	bge.n	801dea6 <__sfputc_r+0x1e>
 801de94:	6994      	ldr	r4, [r2, #24]
 801de96:	42a3      	cmp	r3, r4
 801de98:	db01      	blt.n	801de9e <__sfputc_r+0x16>
 801de9a:	290a      	cmp	r1, #10
 801de9c:	d103      	bne.n	801dea6 <__sfputc_r+0x1e>
 801de9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dea2:	f7ff bc6d 	b.w	801d780 <__swbuf_r>
 801dea6:	6813      	ldr	r3, [r2, #0]
 801dea8:	1c58      	adds	r0, r3, #1
 801deaa:	6010      	str	r0, [r2, #0]
 801deac:	7019      	strb	r1, [r3, #0]
 801deae:	4608      	mov	r0, r1
 801deb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801deb4:	4770      	bx	lr

0801deb6 <__sfputs_r>:
 801deb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deb8:	4606      	mov	r6, r0
 801deba:	460f      	mov	r7, r1
 801debc:	4614      	mov	r4, r2
 801debe:	18d5      	adds	r5, r2, r3
 801dec0:	42ac      	cmp	r4, r5
 801dec2:	d101      	bne.n	801dec8 <__sfputs_r+0x12>
 801dec4:	2000      	movs	r0, #0
 801dec6:	e007      	b.n	801ded8 <__sfputs_r+0x22>
 801dec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801decc:	463a      	mov	r2, r7
 801dece:	4630      	mov	r0, r6
 801ded0:	f7ff ffda 	bl	801de88 <__sfputc_r>
 801ded4:	1c43      	adds	r3, r0, #1
 801ded6:	d1f3      	bne.n	801dec0 <__sfputs_r+0xa>
 801ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dedc <_vfiprintf_r>:
 801dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee0:	460d      	mov	r5, r1
 801dee2:	b09d      	sub	sp, #116	@ 0x74
 801dee4:	4614      	mov	r4, r2
 801dee6:	4698      	mov	r8, r3
 801dee8:	4606      	mov	r6, r0
 801deea:	b118      	cbz	r0, 801def4 <_vfiprintf_r+0x18>
 801deec:	6a03      	ldr	r3, [r0, #32]
 801deee:	b90b      	cbnz	r3, 801def4 <_vfiprintf_r+0x18>
 801def0:	f7ff fac8 	bl	801d484 <__sinit>
 801def4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801def6:	07d9      	lsls	r1, r3, #31
 801def8:	d405      	bmi.n	801df06 <_vfiprintf_r+0x2a>
 801defa:	89ab      	ldrh	r3, [r5, #12]
 801defc:	059a      	lsls	r2, r3, #22
 801defe:	d402      	bmi.n	801df06 <_vfiprintf_r+0x2a>
 801df00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df02:	f7ff fd60 	bl	801d9c6 <__retarget_lock_acquire_recursive>
 801df06:	89ab      	ldrh	r3, [r5, #12]
 801df08:	071b      	lsls	r3, r3, #28
 801df0a:	d501      	bpl.n	801df10 <_vfiprintf_r+0x34>
 801df0c:	692b      	ldr	r3, [r5, #16]
 801df0e:	b99b      	cbnz	r3, 801df38 <_vfiprintf_r+0x5c>
 801df10:	4629      	mov	r1, r5
 801df12:	4630      	mov	r0, r6
 801df14:	f7ff fc72 	bl	801d7fc <__swsetup_r>
 801df18:	b170      	cbz	r0, 801df38 <_vfiprintf_r+0x5c>
 801df1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801df1c:	07dc      	lsls	r4, r3, #31
 801df1e:	d504      	bpl.n	801df2a <_vfiprintf_r+0x4e>
 801df20:	f04f 30ff 	mov.w	r0, #4294967295
 801df24:	b01d      	add	sp, #116	@ 0x74
 801df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df2a:	89ab      	ldrh	r3, [r5, #12]
 801df2c:	0598      	lsls	r0, r3, #22
 801df2e:	d4f7      	bmi.n	801df20 <_vfiprintf_r+0x44>
 801df30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df32:	f7ff fd49 	bl	801d9c8 <__retarget_lock_release_recursive>
 801df36:	e7f3      	b.n	801df20 <_vfiprintf_r+0x44>
 801df38:	2300      	movs	r3, #0
 801df3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801df3c:	2320      	movs	r3, #32
 801df3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801df42:	f8cd 800c 	str.w	r8, [sp, #12]
 801df46:	2330      	movs	r3, #48	@ 0x30
 801df48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e0f8 <_vfiprintf_r+0x21c>
 801df4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801df50:	f04f 0901 	mov.w	r9, #1
 801df54:	4623      	mov	r3, r4
 801df56:	469a      	mov	sl, r3
 801df58:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df5c:	b10a      	cbz	r2, 801df62 <_vfiprintf_r+0x86>
 801df5e:	2a25      	cmp	r2, #37	@ 0x25
 801df60:	d1f9      	bne.n	801df56 <_vfiprintf_r+0x7a>
 801df62:	ebba 0b04 	subs.w	fp, sl, r4
 801df66:	d00b      	beq.n	801df80 <_vfiprintf_r+0xa4>
 801df68:	465b      	mov	r3, fp
 801df6a:	4622      	mov	r2, r4
 801df6c:	4629      	mov	r1, r5
 801df6e:	4630      	mov	r0, r6
 801df70:	f7ff ffa1 	bl	801deb6 <__sfputs_r>
 801df74:	3001      	adds	r0, #1
 801df76:	f000 80a7 	beq.w	801e0c8 <_vfiprintf_r+0x1ec>
 801df7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df7c:	445a      	add	r2, fp
 801df7e:	9209      	str	r2, [sp, #36]	@ 0x24
 801df80:	f89a 3000 	ldrb.w	r3, [sl]
 801df84:	2b00      	cmp	r3, #0
 801df86:	f000 809f 	beq.w	801e0c8 <_vfiprintf_r+0x1ec>
 801df8a:	2300      	movs	r3, #0
 801df8c:	f04f 32ff 	mov.w	r2, #4294967295
 801df90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df94:	f10a 0a01 	add.w	sl, sl, #1
 801df98:	9304      	str	r3, [sp, #16]
 801df9a:	9307      	str	r3, [sp, #28]
 801df9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dfa0:	931a      	str	r3, [sp, #104]	@ 0x68
 801dfa2:	4654      	mov	r4, sl
 801dfa4:	2205      	movs	r2, #5
 801dfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfaa:	4853      	ldr	r0, [pc, #332]	@ (801e0f8 <_vfiprintf_r+0x21c>)
 801dfac:	f7e2 f9b8 	bl	8000320 <memchr>
 801dfb0:	9a04      	ldr	r2, [sp, #16]
 801dfb2:	b9d8      	cbnz	r0, 801dfec <_vfiprintf_r+0x110>
 801dfb4:	06d1      	lsls	r1, r2, #27
 801dfb6:	bf44      	itt	mi
 801dfb8:	2320      	movmi	r3, #32
 801dfba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dfbe:	0713      	lsls	r3, r2, #28
 801dfc0:	bf44      	itt	mi
 801dfc2:	232b      	movmi	r3, #43	@ 0x2b
 801dfc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dfc8:	f89a 3000 	ldrb.w	r3, [sl]
 801dfcc:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfce:	d015      	beq.n	801dffc <_vfiprintf_r+0x120>
 801dfd0:	9a07      	ldr	r2, [sp, #28]
 801dfd2:	4654      	mov	r4, sl
 801dfd4:	2000      	movs	r0, #0
 801dfd6:	f04f 0c0a 	mov.w	ip, #10
 801dfda:	4621      	mov	r1, r4
 801dfdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dfe0:	3b30      	subs	r3, #48	@ 0x30
 801dfe2:	2b09      	cmp	r3, #9
 801dfe4:	d94b      	bls.n	801e07e <_vfiprintf_r+0x1a2>
 801dfe6:	b1b0      	cbz	r0, 801e016 <_vfiprintf_r+0x13a>
 801dfe8:	9207      	str	r2, [sp, #28]
 801dfea:	e014      	b.n	801e016 <_vfiprintf_r+0x13a>
 801dfec:	eba0 0308 	sub.w	r3, r0, r8
 801dff0:	fa09 f303 	lsl.w	r3, r9, r3
 801dff4:	4313      	orrs	r3, r2
 801dff6:	9304      	str	r3, [sp, #16]
 801dff8:	46a2      	mov	sl, r4
 801dffa:	e7d2      	b.n	801dfa2 <_vfiprintf_r+0xc6>
 801dffc:	9b03      	ldr	r3, [sp, #12]
 801dffe:	1d19      	adds	r1, r3, #4
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	9103      	str	r1, [sp, #12]
 801e004:	2b00      	cmp	r3, #0
 801e006:	bfbb      	ittet	lt
 801e008:	425b      	neglt	r3, r3
 801e00a:	f042 0202 	orrlt.w	r2, r2, #2
 801e00e:	9307      	strge	r3, [sp, #28]
 801e010:	9307      	strlt	r3, [sp, #28]
 801e012:	bfb8      	it	lt
 801e014:	9204      	strlt	r2, [sp, #16]
 801e016:	7823      	ldrb	r3, [r4, #0]
 801e018:	2b2e      	cmp	r3, #46	@ 0x2e
 801e01a:	d10a      	bne.n	801e032 <_vfiprintf_r+0x156>
 801e01c:	7863      	ldrb	r3, [r4, #1]
 801e01e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e020:	d132      	bne.n	801e088 <_vfiprintf_r+0x1ac>
 801e022:	9b03      	ldr	r3, [sp, #12]
 801e024:	1d1a      	adds	r2, r3, #4
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	9203      	str	r2, [sp, #12]
 801e02a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e02e:	3402      	adds	r4, #2
 801e030:	9305      	str	r3, [sp, #20]
 801e032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e108 <_vfiprintf_r+0x22c>
 801e036:	7821      	ldrb	r1, [r4, #0]
 801e038:	2203      	movs	r2, #3
 801e03a:	4650      	mov	r0, sl
 801e03c:	f7e2 f970 	bl	8000320 <memchr>
 801e040:	b138      	cbz	r0, 801e052 <_vfiprintf_r+0x176>
 801e042:	9b04      	ldr	r3, [sp, #16]
 801e044:	eba0 000a 	sub.w	r0, r0, sl
 801e048:	2240      	movs	r2, #64	@ 0x40
 801e04a:	4082      	lsls	r2, r0
 801e04c:	4313      	orrs	r3, r2
 801e04e:	3401      	adds	r4, #1
 801e050:	9304      	str	r3, [sp, #16]
 801e052:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e056:	4829      	ldr	r0, [pc, #164]	@ (801e0fc <_vfiprintf_r+0x220>)
 801e058:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e05c:	2206      	movs	r2, #6
 801e05e:	f7e2 f95f 	bl	8000320 <memchr>
 801e062:	2800      	cmp	r0, #0
 801e064:	d03f      	beq.n	801e0e6 <_vfiprintf_r+0x20a>
 801e066:	4b26      	ldr	r3, [pc, #152]	@ (801e100 <_vfiprintf_r+0x224>)
 801e068:	bb1b      	cbnz	r3, 801e0b2 <_vfiprintf_r+0x1d6>
 801e06a:	9b03      	ldr	r3, [sp, #12]
 801e06c:	3307      	adds	r3, #7
 801e06e:	f023 0307 	bic.w	r3, r3, #7
 801e072:	3308      	adds	r3, #8
 801e074:	9303      	str	r3, [sp, #12]
 801e076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e078:	443b      	add	r3, r7
 801e07a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e07c:	e76a      	b.n	801df54 <_vfiprintf_r+0x78>
 801e07e:	fb0c 3202 	mla	r2, ip, r2, r3
 801e082:	460c      	mov	r4, r1
 801e084:	2001      	movs	r0, #1
 801e086:	e7a8      	b.n	801dfda <_vfiprintf_r+0xfe>
 801e088:	2300      	movs	r3, #0
 801e08a:	3401      	adds	r4, #1
 801e08c:	9305      	str	r3, [sp, #20]
 801e08e:	4619      	mov	r1, r3
 801e090:	f04f 0c0a 	mov.w	ip, #10
 801e094:	4620      	mov	r0, r4
 801e096:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e09a:	3a30      	subs	r2, #48	@ 0x30
 801e09c:	2a09      	cmp	r2, #9
 801e09e:	d903      	bls.n	801e0a8 <_vfiprintf_r+0x1cc>
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d0c6      	beq.n	801e032 <_vfiprintf_r+0x156>
 801e0a4:	9105      	str	r1, [sp, #20]
 801e0a6:	e7c4      	b.n	801e032 <_vfiprintf_r+0x156>
 801e0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e0ac:	4604      	mov	r4, r0
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	e7f0      	b.n	801e094 <_vfiprintf_r+0x1b8>
 801e0b2:	ab03      	add	r3, sp, #12
 801e0b4:	9300      	str	r3, [sp, #0]
 801e0b6:	462a      	mov	r2, r5
 801e0b8:	4b12      	ldr	r3, [pc, #72]	@ (801e104 <_vfiprintf_r+0x228>)
 801e0ba:	a904      	add	r1, sp, #16
 801e0bc:	4630      	mov	r0, r6
 801e0be:	f3af 8000 	nop.w
 801e0c2:	4607      	mov	r7, r0
 801e0c4:	1c78      	adds	r0, r7, #1
 801e0c6:	d1d6      	bne.n	801e076 <_vfiprintf_r+0x19a>
 801e0c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e0ca:	07d9      	lsls	r1, r3, #31
 801e0cc:	d405      	bmi.n	801e0da <_vfiprintf_r+0x1fe>
 801e0ce:	89ab      	ldrh	r3, [r5, #12]
 801e0d0:	059a      	lsls	r2, r3, #22
 801e0d2:	d402      	bmi.n	801e0da <_vfiprintf_r+0x1fe>
 801e0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e0d6:	f7ff fc77 	bl	801d9c8 <__retarget_lock_release_recursive>
 801e0da:	89ab      	ldrh	r3, [r5, #12]
 801e0dc:	065b      	lsls	r3, r3, #25
 801e0de:	f53f af1f 	bmi.w	801df20 <_vfiprintf_r+0x44>
 801e0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e0e4:	e71e      	b.n	801df24 <_vfiprintf_r+0x48>
 801e0e6:	ab03      	add	r3, sp, #12
 801e0e8:	9300      	str	r3, [sp, #0]
 801e0ea:	462a      	mov	r2, r5
 801e0ec:	4b05      	ldr	r3, [pc, #20]	@ (801e104 <_vfiprintf_r+0x228>)
 801e0ee:	a904      	add	r1, sp, #16
 801e0f0:	4630      	mov	r0, r6
 801e0f2:	f000 f879 	bl	801e1e8 <_printf_i>
 801e0f6:	e7e4      	b.n	801e0c2 <_vfiprintf_r+0x1e6>
 801e0f8:	08032019 	.word	0x08032019
 801e0fc:	08032023 	.word	0x08032023
 801e100:	00000000 	.word	0x00000000
 801e104:	0801deb7 	.word	0x0801deb7
 801e108:	0803201f 	.word	0x0803201f

0801e10c <_printf_common>:
 801e10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e110:	4616      	mov	r6, r2
 801e112:	4698      	mov	r8, r3
 801e114:	688a      	ldr	r2, [r1, #8]
 801e116:	690b      	ldr	r3, [r1, #16]
 801e118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e11c:	4293      	cmp	r3, r2
 801e11e:	bfb8      	it	lt
 801e120:	4613      	movlt	r3, r2
 801e122:	6033      	str	r3, [r6, #0]
 801e124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e128:	4607      	mov	r7, r0
 801e12a:	460c      	mov	r4, r1
 801e12c:	b10a      	cbz	r2, 801e132 <_printf_common+0x26>
 801e12e:	3301      	adds	r3, #1
 801e130:	6033      	str	r3, [r6, #0]
 801e132:	6823      	ldr	r3, [r4, #0]
 801e134:	0699      	lsls	r1, r3, #26
 801e136:	bf42      	ittt	mi
 801e138:	6833      	ldrmi	r3, [r6, #0]
 801e13a:	3302      	addmi	r3, #2
 801e13c:	6033      	strmi	r3, [r6, #0]
 801e13e:	6825      	ldr	r5, [r4, #0]
 801e140:	f015 0506 	ands.w	r5, r5, #6
 801e144:	d106      	bne.n	801e154 <_printf_common+0x48>
 801e146:	f104 0a19 	add.w	sl, r4, #25
 801e14a:	68e3      	ldr	r3, [r4, #12]
 801e14c:	6832      	ldr	r2, [r6, #0]
 801e14e:	1a9b      	subs	r3, r3, r2
 801e150:	42ab      	cmp	r3, r5
 801e152:	dc26      	bgt.n	801e1a2 <_printf_common+0x96>
 801e154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e158:	6822      	ldr	r2, [r4, #0]
 801e15a:	3b00      	subs	r3, #0
 801e15c:	bf18      	it	ne
 801e15e:	2301      	movne	r3, #1
 801e160:	0692      	lsls	r2, r2, #26
 801e162:	d42b      	bmi.n	801e1bc <_printf_common+0xb0>
 801e164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e168:	4641      	mov	r1, r8
 801e16a:	4638      	mov	r0, r7
 801e16c:	47c8      	blx	r9
 801e16e:	3001      	adds	r0, #1
 801e170:	d01e      	beq.n	801e1b0 <_printf_common+0xa4>
 801e172:	6823      	ldr	r3, [r4, #0]
 801e174:	6922      	ldr	r2, [r4, #16]
 801e176:	f003 0306 	and.w	r3, r3, #6
 801e17a:	2b04      	cmp	r3, #4
 801e17c:	bf02      	ittt	eq
 801e17e:	68e5      	ldreq	r5, [r4, #12]
 801e180:	6833      	ldreq	r3, [r6, #0]
 801e182:	1aed      	subeq	r5, r5, r3
 801e184:	68a3      	ldr	r3, [r4, #8]
 801e186:	bf0c      	ite	eq
 801e188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e18c:	2500      	movne	r5, #0
 801e18e:	4293      	cmp	r3, r2
 801e190:	bfc4      	itt	gt
 801e192:	1a9b      	subgt	r3, r3, r2
 801e194:	18ed      	addgt	r5, r5, r3
 801e196:	2600      	movs	r6, #0
 801e198:	341a      	adds	r4, #26
 801e19a:	42b5      	cmp	r5, r6
 801e19c:	d11a      	bne.n	801e1d4 <_printf_common+0xc8>
 801e19e:	2000      	movs	r0, #0
 801e1a0:	e008      	b.n	801e1b4 <_printf_common+0xa8>
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	4652      	mov	r2, sl
 801e1a6:	4641      	mov	r1, r8
 801e1a8:	4638      	mov	r0, r7
 801e1aa:	47c8      	blx	r9
 801e1ac:	3001      	adds	r0, #1
 801e1ae:	d103      	bne.n	801e1b8 <_printf_common+0xac>
 801e1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801e1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1b8:	3501      	adds	r5, #1
 801e1ba:	e7c6      	b.n	801e14a <_printf_common+0x3e>
 801e1bc:	18e1      	adds	r1, r4, r3
 801e1be:	1c5a      	adds	r2, r3, #1
 801e1c0:	2030      	movs	r0, #48	@ 0x30
 801e1c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e1c6:	4422      	add	r2, r4
 801e1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e1cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e1d0:	3302      	adds	r3, #2
 801e1d2:	e7c7      	b.n	801e164 <_printf_common+0x58>
 801e1d4:	2301      	movs	r3, #1
 801e1d6:	4622      	mov	r2, r4
 801e1d8:	4641      	mov	r1, r8
 801e1da:	4638      	mov	r0, r7
 801e1dc:	47c8      	blx	r9
 801e1de:	3001      	adds	r0, #1
 801e1e0:	d0e6      	beq.n	801e1b0 <_printf_common+0xa4>
 801e1e2:	3601      	adds	r6, #1
 801e1e4:	e7d9      	b.n	801e19a <_printf_common+0x8e>
	...

0801e1e8 <_printf_i>:
 801e1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e1ec:	7e0f      	ldrb	r7, [r1, #24]
 801e1ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e1f0:	2f78      	cmp	r7, #120	@ 0x78
 801e1f2:	4691      	mov	r9, r2
 801e1f4:	4680      	mov	r8, r0
 801e1f6:	460c      	mov	r4, r1
 801e1f8:	469a      	mov	sl, r3
 801e1fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e1fe:	d807      	bhi.n	801e210 <_printf_i+0x28>
 801e200:	2f62      	cmp	r7, #98	@ 0x62
 801e202:	d80a      	bhi.n	801e21a <_printf_i+0x32>
 801e204:	2f00      	cmp	r7, #0
 801e206:	f000 80d1 	beq.w	801e3ac <_printf_i+0x1c4>
 801e20a:	2f58      	cmp	r7, #88	@ 0x58
 801e20c:	f000 80b8 	beq.w	801e380 <_printf_i+0x198>
 801e210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e218:	e03a      	b.n	801e290 <_printf_i+0xa8>
 801e21a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e21e:	2b15      	cmp	r3, #21
 801e220:	d8f6      	bhi.n	801e210 <_printf_i+0x28>
 801e222:	a101      	add	r1, pc, #4	@ (adr r1, 801e228 <_printf_i+0x40>)
 801e224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e228:	0801e281 	.word	0x0801e281
 801e22c:	0801e295 	.word	0x0801e295
 801e230:	0801e211 	.word	0x0801e211
 801e234:	0801e211 	.word	0x0801e211
 801e238:	0801e211 	.word	0x0801e211
 801e23c:	0801e211 	.word	0x0801e211
 801e240:	0801e295 	.word	0x0801e295
 801e244:	0801e211 	.word	0x0801e211
 801e248:	0801e211 	.word	0x0801e211
 801e24c:	0801e211 	.word	0x0801e211
 801e250:	0801e211 	.word	0x0801e211
 801e254:	0801e393 	.word	0x0801e393
 801e258:	0801e2bf 	.word	0x0801e2bf
 801e25c:	0801e34d 	.word	0x0801e34d
 801e260:	0801e211 	.word	0x0801e211
 801e264:	0801e211 	.word	0x0801e211
 801e268:	0801e3b5 	.word	0x0801e3b5
 801e26c:	0801e211 	.word	0x0801e211
 801e270:	0801e2bf 	.word	0x0801e2bf
 801e274:	0801e211 	.word	0x0801e211
 801e278:	0801e211 	.word	0x0801e211
 801e27c:	0801e355 	.word	0x0801e355
 801e280:	6833      	ldr	r3, [r6, #0]
 801e282:	1d1a      	adds	r2, r3, #4
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	6032      	str	r2, [r6, #0]
 801e288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e28c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e290:	2301      	movs	r3, #1
 801e292:	e09c      	b.n	801e3ce <_printf_i+0x1e6>
 801e294:	6833      	ldr	r3, [r6, #0]
 801e296:	6820      	ldr	r0, [r4, #0]
 801e298:	1d19      	adds	r1, r3, #4
 801e29a:	6031      	str	r1, [r6, #0]
 801e29c:	0606      	lsls	r6, r0, #24
 801e29e:	d501      	bpl.n	801e2a4 <_printf_i+0xbc>
 801e2a0:	681d      	ldr	r5, [r3, #0]
 801e2a2:	e003      	b.n	801e2ac <_printf_i+0xc4>
 801e2a4:	0645      	lsls	r5, r0, #25
 801e2a6:	d5fb      	bpl.n	801e2a0 <_printf_i+0xb8>
 801e2a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e2ac:	2d00      	cmp	r5, #0
 801e2ae:	da03      	bge.n	801e2b8 <_printf_i+0xd0>
 801e2b0:	232d      	movs	r3, #45	@ 0x2d
 801e2b2:	426d      	negs	r5, r5
 801e2b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2b8:	4858      	ldr	r0, [pc, #352]	@ (801e41c <_printf_i+0x234>)
 801e2ba:	230a      	movs	r3, #10
 801e2bc:	e011      	b.n	801e2e2 <_printf_i+0xfa>
 801e2be:	6821      	ldr	r1, [r4, #0]
 801e2c0:	6833      	ldr	r3, [r6, #0]
 801e2c2:	0608      	lsls	r0, r1, #24
 801e2c4:	f853 5b04 	ldr.w	r5, [r3], #4
 801e2c8:	d402      	bmi.n	801e2d0 <_printf_i+0xe8>
 801e2ca:	0649      	lsls	r1, r1, #25
 801e2cc:	bf48      	it	mi
 801e2ce:	b2ad      	uxthmi	r5, r5
 801e2d0:	2f6f      	cmp	r7, #111	@ 0x6f
 801e2d2:	4852      	ldr	r0, [pc, #328]	@ (801e41c <_printf_i+0x234>)
 801e2d4:	6033      	str	r3, [r6, #0]
 801e2d6:	bf14      	ite	ne
 801e2d8:	230a      	movne	r3, #10
 801e2da:	2308      	moveq	r3, #8
 801e2dc:	2100      	movs	r1, #0
 801e2de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e2e2:	6866      	ldr	r6, [r4, #4]
 801e2e4:	60a6      	str	r6, [r4, #8]
 801e2e6:	2e00      	cmp	r6, #0
 801e2e8:	db05      	blt.n	801e2f6 <_printf_i+0x10e>
 801e2ea:	6821      	ldr	r1, [r4, #0]
 801e2ec:	432e      	orrs	r6, r5
 801e2ee:	f021 0104 	bic.w	r1, r1, #4
 801e2f2:	6021      	str	r1, [r4, #0]
 801e2f4:	d04b      	beq.n	801e38e <_printf_i+0x1a6>
 801e2f6:	4616      	mov	r6, r2
 801e2f8:	fbb5 f1f3 	udiv	r1, r5, r3
 801e2fc:	fb03 5711 	mls	r7, r3, r1, r5
 801e300:	5dc7      	ldrb	r7, [r0, r7]
 801e302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e306:	462f      	mov	r7, r5
 801e308:	42bb      	cmp	r3, r7
 801e30a:	460d      	mov	r5, r1
 801e30c:	d9f4      	bls.n	801e2f8 <_printf_i+0x110>
 801e30e:	2b08      	cmp	r3, #8
 801e310:	d10b      	bne.n	801e32a <_printf_i+0x142>
 801e312:	6823      	ldr	r3, [r4, #0]
 801e314:	07df      	lsls	r7, r3, #31
 801e316:	d508      	bpl.n	801e32a <_printf_i+0x142>
 801e318:	6923      	ldr	r3, [r4, #16]
 801e31a:	6861      	ldr	r1, [r4, #4]
 801e31c:	4299      	cmp	r1, r3
 801e31e:	bfde      	ittt	le
 801e320:	2330      	movle	r3, #48	@ 0x30
 801e322:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e326:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e32a:	1b92      	subs	r2, r2, r6
 801e32c:	6122      	str	r2, [r4, #16]
 801e32e:	f8cd a000 	str.w	sl, [sp]
 801e332:	464b      	mov	r3, r9
 801e334:	aa03      	add	r2, sp, #12
 801e336:	4621      	mov	r1, r4
 801e338:	4640      	mov	r0, r8
 801e33a:	f7ff fee7 	bl	801e10c <_printf_common>
 801e33e:	3001      	adds	r0, #1
 801e340:	d14a      	bne.n	801e3d8 <_printf_i+0x1f0>
 801e342:	f04f 30ff 	mov.w	r0, #4294967295
 801e346:	b004      	add	sp, #16
 801e348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e34c:	6823      	ldr	r3, [r4, #0]
 801e34e:	f043 0320 	orr.w	r3, r3, #32
 801e352:	6023      	str	r3, [r4, #0]
 801e354:	4832      	ldr	r0, [pc, #200]	@ (801e420 <_printf_i+0x238>)
 801e356:	2778      	movs	r7, #120	@ 0x78
 801e358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	6831      	ldr	r1, [r6, #0]
 801e360:	061f      	lsls	r7, r3, #24
 801e362:	f851 5b04 	ldr.w	r5, [r1], #4
 801e366:	d402      	bmi.n	801e36e <_printf_i+0x186>
 801e368:	065f      	lsls	r7, r3, #25
 801e36a:	bf48      	it	mi
 801e36c:	b2ad      	uxthmi	r5, r5
 801e36e:	6031      	str	r1, [r6, #0]
 801e370:	07d9      	lsls	r1, r3, #31
 801e372:	bf44      	itt	mi
 801e374:	f043 0320 	orrmi.w	r3, r3, #32
 801e378:	6023      	strmi	r3, [r4, #0]
 801e37a:	b11d      	cbz	r5, 801e384 <_printf_i+0x19c>
 801e37c:	2310      	movs	r3, #16
 801e37e:	e7ad      	b.n	801e2dc <_printf_i+0xf4>
 801e380:	4826      	ldr	r0, [pc, #152]	@ (801e41c <_printf_i+0x234>)
 801e382:	e7e9      	b.n	801e358 <_printf_i+0x170>
 801e384:	6823      	ldr	r3, [r4, #0]
 801e386:	f023 0320 	bic.w	r3, r3, #32
 801e38a:	6023      	str	r3, [r4, #0]
 801e38c:	e7f6      	b.n	801e37c <_printf_i+0x194>
 801e38e:	4616      	mov	r6, r2
 801e390:	e7bd      	b.n	801e30e <_printf_i+0x126>
 801e392:	6833      	ldr	r3, [r6, #0]
 801e394:	6825      	ldr	r5, [r4, #0]
 801e396:	6961      	ldr	r1, [r4, #20]
 801e398:	1d18      	adds	r0, r3, #4
 801e39a:	6030      	str	r0, [r6, #0]
 801e39c:	062e      	lsls	r6, r5, #24
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	d501      	bpl.n	801e3a6 <_printf_i+0x1be>
 801e3a2:	6019      	str	r1, [r3, #0]
 801e3a4:	e002      	b.n	801e3ac <_printf_i+0x1c4>
 801e3a6:	0668      	lsls	r0, r5, #25
 801e3a8:	d5fb      	bpl.n	801e3a2 <_printf_i+0x1ba>
 801e3aa:	8019      	strh	r1, [r3, #0]
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	6123      	str	r3, [r4, #16]
 801e3b0:	4616      	mov	r6, r2
 801e3b2:	e7bc      	b.n	801e32e <_printf_i+0x146>
 801e3b4:	6833      	ldr	r3, [r6, #0]
 801e3b6:	1d1a      	adds	r2, r3, #4
 801e3b8:	6032      	str	r2, [r6, #0]
 801e3ba:	681e      	ldr	r6, [r3, #0]
 801e3bc:	6862      	ldr	r2, [r4, #4]
 801e3be:	2100      	movs	r1, #0
 801e3c0:	4630      	mov	r0, r6
 801e3c2:	f7e1 ffad 	bl	8000320 <memchr>
 801e3c6:	b108      	cbz	r0, 801e3cc <_printf_i+0x1e4>
 801e3c8:	1b80      	subs	r0, r0, r6
 801e3ca:	6060      	str	r0, [r4, #4]
 801e3cc:	6863      	ldr	r3, [r4, #4]
 801e3ce:	6123      	str	r3, [r4, #16]
 801e3d0:	2300      	movs	r3, #0
 801e3d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e3d6:	e7aa      	b.n	801e32e <_printf_i+0x146>
 801e3d8:	6923      	ldr	r3, [r4, #16]
 801e3da:	4632      	mov	r2, r6
 801e3dc:	4649      	mov	r1, r9
 801e3de:	4640      	mov	r0, r8
 801e3e0:	47d0      	blx	sl
 801e3e2:	3001      	adds	r0, #1
 801e3e4:	d0ad      	beq.n	801e342 <_printf_i+0x15a>
 801e3e6:	6823      	ldr	r3, [r4, #0]
 801e3e8:	079b      	lsls	r3, r3, #30
 801e3ea:	d413      	bmi.n	801e414 <_printf_i+0x22c>
 801e3ec:	68e0      	ldr	r0, [r4, #12]
 801e3ee:	9b03      	ldr	r3, [sp, #12]
 801e3f0:	4298      	cmp	r0, r3
 801e3f2:	bfb8      	it	lt
 801e3f4:	4618      	movlt	r0, r3
 801e3f6:	e7a6      	b.n	801e346 <_printf_i+0x15e>
 801e3f8:	2301      	movs	r3, #1
 801e3fa:	4632      	mov	r2, r6
 801e3fc:	4649      	mov	r1, r9
 801e3fe:	4640      	mov	r0, r8
 801e400:	47d0      	blx	sl
 801e402:	3001      	adds	r0, #1
 801e404:	d09d      	beq.n	801e342 <_printf_i+0x15a>
 801e406:	3501      	adds	r5, #1
 801e408:	68e3      	ldr	r3, [r4, #12]
 801e40a:	9903      	ldr	r1, [sp, #12]
 801e40c:	1a5b      	subs	r3, r3, r1
 801e40e:	42ab      	cmp	r3, r5
 801e410:	dcf2      	bgt.n	801e3f8 <_printf_i+0x210>
 801e412:	e7eb      	b.n	801e3ec <_printf_i+0x204>
 801e414:	2500      	movs	r5, #0
 801e416:	f104 0619 	add.w	r6, r4, #25
 801e41a:	e7f5      	b.n	801e408 <_printf_i+0x220>
 801e41c:	0803202a 	.word	0x0803202a
 801e420:	0803203b 	.word	0x0803203b

0801e424 <__sflush_r>:
 801e424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e42c:	0716      	lsls	r6, r2, #28
 801e42e:	4605      	mov	r5, r0
 801e430:	460c      	mov	r4, r1
 801e432:	d454      	bmi.n	801e4de <__sflush_r+0xba>
 801e434:	684b      	ldr	r3, [r1, #4]
 801e436:	2b00      	cmp	r3, #0
 801e438:	dc02      	bgt.n	801e440 <__sflush_r+0x1c>
 801e43a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	dd48      	ble.n	801e4d2 <__sflush_r+0xae>
 801e440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e442:	2e00      	cmp	r6, #0
 801e444:	d045      	beq.n	801e4d2 <__sflush_r+0xae>
 801e446:	2300      	movs	r3, #0
 801e448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e44c:	682f      	ldr	r7, [r5, #0]
 801e44e:	6a21      	ldr	r1, [r4, #32]
 801e450:	602b      	str	r3, [r5, #0]
 801e452:	d030      	beq.n	801e4b6 <__sflush_r+0x92>
 801e454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e456:	89a3      	ldrh	r3, [r4, #12]
 801e458:	0759      	lsls	r1, r3, #29
 801e45a:	d505      	bpl.n	801e468 <__sflush_r+0x44>
 801e45c:	6863      	ldr	r3, [r4, #4]
 801e45e:	1ad2      	subs	r2, r2, r3
 801e460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e462:	b10b      	cbz	r3, 801e468 <__sflush_r+0x44>
 801e464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e466:	1ad2      	subs	r2, r2, r3
 801e468:	2300      	movs	r3, #0
 801e46a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e46c:	6a21      	ldr	r1, [r4, #32]
 801e46e:	4628      	mov	r0, r5
 801e470:	47b0      	blx	r6
 801e472:	1c43      	adds	r3, r0, #1
 801e474:	89a3      	ldrh	r3, [r4, #12]
 801e476:	d106      	bne.n	801e486 <__sflush_r+0x62>
 801e478:	6829      	ldr	r1, [r5, #0]
 801e47a:	291d      	cmp	r1, #29
 801e47c:	d82b      	bhi.n	801e4d6 <__sflush_r+0xb2>
 801e47e:	4a2a      	ldr	r2, [pc, #168]	@ (801e528 <__sflush_r+0x104>)
 801e480:	40ca      	lsrs	r2, r1
 801e482:	07d6      	lsls	r6, r2, #31
 801e484:	d527      	bpl.n	801e4d6 <__sflush_r+0xb2>
 801e486:	2200      	movs	r2, #0
 801e488:	6062      	str	r2, [r4, #4]
 801e48a:	04d9      	lsls	r1, r3, #19
 801e48c:	6922      	ldr	r2, [r4, #16]
 801e48e:	6022      	str	r2, [r4, #0]
 801e490:	d504      	bpl.n	801e49c <__sflush_r+0x78>
 801e492:	1c42      	adds	r2, r0, #1
 801e494:	d101      	bne.n	801e49a <__sflush_r+0x76>
 801e496:	682b      	ldr	r3, [r5, #0]
 801e498:	b903      	cbnz	r3, 801e49c <__sflush_r+0x78>
 801e49a:	6560      	str	r0, [r4, #84]	@ 0x54
 801e49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e49e:	602f      	str	r7, [r5, #0]
 801e4a0:	b1b9      	cbz	r1, 801e4d2 <__sflush_r+0xae>
 801e4a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e4a6:	4299      	cmp	r1, r3
 801e4a8:	d002      	beq.n	801e4b0 <__sflush_r+0x8c>
 801e4aa:	4628      	mov	r0, r5
 801e4ac:	f7ff fa9c 	bl	801d9e8 <_free_r>
 801e4b0:	2300      	movs	r3, #0
 801e4b2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e4b4:	e00d      	b.n	801e4d2 <__sflush_r+0xae>
 801e4b6:	2301      	movs	r3, #1
 801e4b8:	4628      	mov	r0, r5
 801e4ba:	47b0      	blx	r6
 801e4bc:	4602      	mov	r2, r0
 801e4be:	1c50      	adds	r0, r2, #1
 801e4c0:	d1c9      	bne.n	801e456 <__sflush_r+0x32>
 801e4c2:	682b      	ldr	r3, [r5, #0]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	d0c6      	beq.n	801e456 <__sflush_r+0x32>
 801e4c8:	2b1d      	cmp	r3, #29
 801e4ca:	d001      	beq.n	801e4d0 <__sflush_r+0xac>
 801e4cc:	2b16      	cmp	r3, #22
 801e4ce:	d11e      	bne.n	801e50e <__sflush_r+0xea>
 801e4d0:	602f      	str	r7, [r5, #0]
 801e4d2:	2000      	movs	r0, #0
 801e4d4:	e022      	b.n	801e51c <__sflush_r+0xf8>
 801e4d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e4da:	b21b      	sxth	r3, r3
 801e4dc:	e01b      	b.n	801e516 <__sflush_r+0xf2>
 801e4de:	690f      	ldr	r7, [r1, #16]
 801e4e0:	2f00      	cmp	r7, #0
 801e4e2:	d0f6      	beq.n	801e4d2 <__sflush_r+0xae>
 801e4e4:	0793      	lsls	r3, r2, #30
 801e4e6:	680e      	ldr	r6, [r1, #0]
 801e4e8:	bf08      	it	eq
 801e4ea:	694b      	ldreq	r3, [r1, #20]
 801e4ec:	600f      	str	r7, [r1, #0]
 801e4ee:	bf18      	it	ne
 801e4f0:	2300      	movne	r3, #0
 801e4f2:	eba6 0807 	sub.w	r8, r6, r7
 801e4f6:	608b      	str	r3, [r1, #8]
 801e4f8:	f1b8 0f00 	cmp.w	r8, #0
 801e4fc:	dde9      	ble.n	801e4d2 <__sflush_r+0xae>
 801e4fe:	6a21      	ldr	r1, [r4, #32]
 801e500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e502:	4643      	mov	r3, r8
 801e504:	463a      	mov	r2, r7
 801e506:	4628      	mov	r0, r5
 801e508:	47b0      	blx	r6
 801e50a:	2800      	cmp	r0, #0
 801e50c:	dc08      	bgt.n	801e520 <__sflush_r+0xfc>
 801e50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e516:	81a3      	strh	r3, [r4, #12]
 801e518:	f04f 30ff 	mov.w	r0, #4294967295
 801e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e520:	4407      	add	r7, r0
 801e522:	eba8 0800 	sub.w	r8, r8, r0
 801e526:	e7e7      	b.n	801e4f8 <__sflush_r+0xd4>
 801e528:	20400001 	.word	0x20400001

0801e52c <_fflush_r>:
 801e52c:	b538      	push	{r3, r4, r5, lr}
 801e52e:	690b      	ldr	r3, [r1, #16]
 801e530:	4605      	mov	r5, r0
 801e532:	460c      	mov	r4, r1
 801e534:	b913      	cbnz	r3, 801e53c <_fflush_r+0x10>
 801e536:	2500      	movs	r5, #0
 801e538:	4628      	mov	r0, r5
 801e53a:	bd38      	pop	{r3, r4, r5, pc}
 801e53c:	b118      	cbz	r0, 801e546 <_fflush_r+0x1a>
 801e53e:	6a03      	ldr	r3, [r0, #32]
 801e540:	b90b      	cbnz	r3, 801e546 <_fflush_r+0x1a>
 801e542:	f7fe ff9f 	bl	801d484 <__sinit>
 801e546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d0f3      	beq.n	801e536 <_fflush_r+0xa>
 801e54e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e550:	07d0      	lsls	r0, r2, #31
 801e552:	d404      	bmi.n	801e55e <_fflush_r+0x32>
 801e554:	0599      	lsls	r1, r3, #22
 801e556:	d402      	bmi.n	801e55e <_fflush_r+0x32>
 801e558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e55a:	f7ff fa34 	bl	801d9c6 <__retarget_lock_acquire_recursive>
 801e55e:	4628      	mov	r0, r5
 801e560:	4621      	mov	r1, r4
 801e562:	f7ff ff5f 	bl	801e424 <__sflush_r>
 801e566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e568:	07da      	lsls	r2, r3, #31
 801e56a:	4605      	mov	r5, r0
 801e56c:	d4e4      	bmi.n	801e538 <_fflush_r+0xc>
 801e56e:	89a3      	ldrh	r3, [r4, #12]
 801e570:	059b      	lsls	r3, r3, #22
 801e572:	d4e1      	bmi.n	801e538 <_fflush_r+0xc>
 801e574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e576:	f7ff fa27 	bl	801d9c8 <__retarget_lock_release_recursive>
 801e57a:	e7dd      	b.n	801e538 <_fflush_r+0xc>

0801e57c <__swhatbuf_r>:
 801e57c:	b570      	push	{r4, r5, r6, lr}
 801e57e:	460c      	mov	r4, r1
 801e580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e584:	2900      	cmp	r1, #0
 801e586:	b096      	sub	sp, #88	@ 0x58
 801e588:	4615      	mov	r5, r2
 801e58a:	461e      	mov	r6, r3
 801e58c:	da0d      	bge.n	801e5aa <__swhatbuf_r+0x2e>
 801e58e:	89a3      	ldrh	r3, [r4, #12]
 801e590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e594:	f04f 0100 	mov.w	r1, #0
 801e598:	bf14      	ite	ne
 801e59a:	2340      	movne	r3, #64	@ 0x40
 801e59c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e5a0:	2000      	movs	r0, #0
 801e5a2:	6031      	str	r1, [r6, #0]
 801e5a4:	602b      	str	r3, [r5, #0]
 801e5a6:	b016      	add	sp, #88	@ 0x58
 801e5a8:	bd70      	pop	{r4, r5, r6, pc}
 801e5aa:	466a      	mov	r2, sp
 801e5ac:	f000 f862 	bl	801e674 <_fstat_r>
 801e5b0:	2800      	cmp	r0, #0
 801e5b2:	dbec      	blt.n	801e58e <__swhatbuf_r+0x12>
 801e5b4:	9901      	ldr	r1, [sp, #4]
 801e5b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e5ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e5be:	4259      	negs	r1, r3
 801e5c0:	4159      	adcs	r1, r3
 801e5c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e5c6:	e7eb      	b.n	801e5a0 <__swhatbuf_r+0x24>

0801e5c8 <__smakebuf_r>:
 801e5c8:	898b      	ldrh	r3, [r1, #12]
 801e5ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e5cc:	079d      	lsls	r5, r3, #30
 801e5ce:	4606      	mov	r6, r0
 801e5d0:	460c      	mov	r4, r1
 801e5d2:	d507      	bpl.n	801e5e4 <__smakebuf_r+0x1c>
 801e5d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e5d8:	6023      	str	r3, [r4, #0]
 801e5da:	6123      	str	r3, [r4, #16]
 801e5dc:	2301      	movs	r3, #1
 801e5de:	6163      	str	r3, [r4, #20]
 801e5e0:	b003      	add	sp, #12
 801e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5e4:	ab01      	add	r3, sp, #4
 801e5e6:	466a      	mov	r2, sp
 801e5e8:	f7ff ffc8 	bl	801e57c <__swhatbuf_r>
 801e5ec:	9f00      	ldr	r7, [sp, #0]
 801e5ee:	4605      	mov	r5, r0
 801e5f0:	4639      	mov	r1, r7
 801e5f2:	4630      	mov	r0, r6
 801e5f4:	f7ff fa64 	bl	801dac0 <_malloc_r>
 801e5f8:	b948      	cbnz	r0, 801e60e <__smakebuf_r+0x46>
 801e5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5fe:	059a      	lsls	r2, r3, #22
 801e600:	d4ee      	bmi.n	801e5e0 <__smakebuf_r+0x18>
 801e602:	f023 0303 	bic.w	r3, r3, #3
 801e606:	f043 0302 	orr.w	r3, r3, #2
 801e60a:	81a3      	strh	r3, [r4, #12]
 801e60c:	e7e2      	b.n	801e5d4 <__smakebuf_r+0xc>
 801e60e:	89a3      	ldrh	r3, [r4, #12]
 801e610:	6020      	str	r0, [r4, #0]
 801e612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e616:	81a3      	strh	r3, [r4, #12]
 801e618:	9b01      	ldr	r3, [sp, #4]
 801e61a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e61e:	b15b      	cbz	r3, 801e638 <__smakebuf_r+0x70>
 801e620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e624:	4630      	mov	r0, r6
 801e626:	f000 f837 	bl	801e698 <_isatty_r>
 801e62a:	b128      	cbz	r0, 801e638 <__smakebuf_r+0x70>
 801e62c:	89a3      	ldrh	r3, [r4, #12]
 801e62e:	f023 0303 	bic.w	r3, r3, #3
 801e632:	f043 0301 	orr.w	r3, r3, #1
 801e636:	81a3      	strh	r3, [r4, #12]
 801e638:	89a3      	ldrh	r3, [r4, #12]
 801e63a:	431d      	orrs	r5, r3
 801e63c:	81a5      	strh	r5, [r4, #12]
 801e63e:	e7cf      	b.n	801e5e0 <__smakebuf_r+0x18>

0801e640 <memmove>:
 801e640:	4288      	cmp	r0, r1
 801e642:	b510      	push	{r4, lr}
 801e644:	eb01 0402 	add.w	r4, r1, r2
 801e648:	d902      	bls.n	801e650 <memmove+0x10>
 801e64a:	4284      	cmp	r4, r0
 801e64c:	4623      	mov	r3, r4
 801e64e:	d807      	bhi.n	801e660 <memmove+0x20>
 801e650:	1e43      	subs	r3, r0, #1
 801e652:	42a1      	cmp	r1, r4
 801e654:	d008      	beq.n	801e668 <memmove+0x28>
 801e656:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e65a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e65e:	e7f8      	b.n	801e652 <memmove+0x12>
 801e660:	4402      	add	r2, r0
 801e662:	4601      	mov	r1, r0
 801e664:	428a      	cmp	r2, r1
 801e666:	d100      	bne.n	801e66a <memmove+0x2a>
 801e668:	bd10      	pop	{r4, pc}
 801e66a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e66e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e672:	e7f7      	b.n	801e664 <memmove+0x24>

0801e674 <_fstat_r>:
 801e674:	b538      	push	{r3, r4, r5, lr}
 801e676:	4d07      	ldr	r5, [pc, #28]	@ (801e694 <_fstat_r+0x20>)
 801e678:	2300      	movs	r3, #0
 801e67a:	4604      	mov	r4, r0
 801e67c:	4608      	mov	r0, r1
 801e67e:	4611      	mov	r1, r2
 801e680:	602b      	str	r3, [r5, #0]
 801e682:	f7e3 fdd9 	bl	8002238 <_fstat>
 801e686:	1c43      	adds	r3, r0, #1
 801e688:	d102      	bne.n	801e690 <_fstat_r+0x1c>
 801e68a:	682b      	ldr	r3, [r5, #0]
 801e68c:	b103      	cbz	r3, 801e690 <_fstat_r+0x1c>
 801e68e:	6023      	str	r3, [r4, #0]
 801e690:	bd38      	pop	{r3, r4, r5, pc}
 801e692:	bf00      	nop
 801e694:	24008ae4 	.word	0x24008ae4

0801e698 <_isatty_r>:
 801e698:	b538      	push	{r3, r4, r5, lr}
 801e69a:	4d06      	ldr	r5, [pc, #24]	@ (801e6b4 <_isatty_r+0x1c>)
 801e69c:	2300      	movs	r3, #0
 801e69e:	4604      	mov	r4, r0
 801e6a0:	4608      	mov	r0, r1
 801e6a2:	602b      	str	r3, [r5, #0]
 801e6a4:	f7e3 fdd8 	bl	8002258 <_isatty>
 801e6a8:	1c43      	adds	r3, r0, #1
 801e6aa:	d102      	bne.n	801e6b2 <_isatty_r+0x1a>
 801e6ac:	682b      	ldr	r3, [r5, #0]
 801e6ae:	b103      	cbz	r3, 801e6b2 <_isatty_r+0x1a>
 801e6b0:	6023      	str	r3, [r4, #0]
 801e6b2:	bd38      	pop	{r3, r4, r5, pc}
 801e6b4:	24008ae4 	.word	0x24008ae4

0801e6b8 <_sbrk_r>:
 801e6b8:	b538      	push	{r3, r4, r5, lr}
 801e6ba:	4d06      	ldr	r5, [pc, #24]	@ (801e6d4 <_sbrk_r+0x1c>)
 801e6bc:	2300      	movs	r3, #0
 801e6be:	4604      	mov	r4, r0
 801e6c0:	4608      	mov	r0, r1
 801e6c2:	602b      	str	r3, [r5, #0]
 801e6c4:	f7e3 fde0 	bl	8002288 <_sbrk>
 801e6c8:	1c43      	adds	r3, r0, #1
 801e6ca:	d102      	bne.n	801e6d2 <_sbrk_r+0x1a>
 801e6cc:	682b      	ldr	r3, [r5, #0]
 801e6ce:	b103      	cbz	r3, 801e6d2 <_sbrk_r+0x1a>
 801e6d0:	6023      	str	r3, [r4, #0]
 801e6d2:	bd38      	pop	{r3, r4, r5, pc}
 801e6d4:	24008ae4 	.word	0x24008ae4

0801e6d8 <_realloc_r>:
 801e6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6dc:	4607      	mov	r7, r0
 801e6de:	4614      	mov	r4, r2
 801e6e0:	460d      	mov	r5, r1
 801e6e2:	b921      	cbnz	r1, 801e6ee <_realloc_r+0x16>
 801e6e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e6e8:	4611      	mov	r1, r2
 801e6ea:	f7ff b9e9 	b.w	801dac0 <_malloc_r>
 801e6ee:	b92a      	cbnz	r2, 801e6fc <_realloc_r+0x24>
 801e6f0:	f7ff f97a 	bl	801d9e8 <_free_r>
 801e6f4:	4625      	mov	r5, r4
 801e6f6:	4628      	mov	r0, r5
 801e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6fc:	f000 f81a 	bl	801e734 <_malloc_usable_size_r>
 801e700:	4284      	cmp	r4, r0
 801e702:	4606      	mov	r6, r0
 801e704:	d802      	bhi.n	801e70c <_realloc_r+0x34>
 801e706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e70a:	d8f4      	bhi.n	801e6f6 <_realloc_r+0x1e>
 801e70c:	4621      	mov	r1, r4
 801e70e:	4638      	mov	r0, r7
 801e710:	f7ff f9d6 	bl	801dac0 <_malloc_r>
 801e714:	4680      	mov	r8, r0
 801e716:	b908      	cbnz	r0, 801e71c <_realloc_r+0x44>
 801e718:	4645      	mov	r5, r8
 801e71a:	e7ec      	b.n	801e6f6 <_realloc_r+0x1e>
 801e71c:	42b4      	cmp	r4, r6
 801e71e:	4622      	mov	r2, r4
 801e720:	4629      	mov	r1, r5
 801e722:	bf28      	it	cs
 801e724:	4632      	movcs	r2, r6
 801e726:	f7ff f950 	bl	801d9ca <memcpy>
 801e72a:	4629      	mov	r1, r5
 801e72c:	4638      	mov	r0, r7
 801e72e:	f7ff f95b 	bl	801d9e8 <_free_r>
 801e732:	e7f1      	b.n	801e718 <_realloc_r+0x40>

0801e734 <_malloc_usable_size_r>:
 801e734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e738:	1f18      	subs	r0, r3, #4
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	bfbc      	itt	lt
 801e73e:	580b      	ldrlt	r3, [r1, r0]
 801e740:	18c0      	addlt	r0, r0, r3
 801e742:	4770      	bx	lr

0801e744 <_init>:
 801e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e746:	bf00      	nop
 801e748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e74a:	bc08      	pop	{r3}
 801e74c:	469e      	mov	lr, r3
 801e74e:	4770      	bx	lr

0801e750 <_fini>:
 801e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e752:	bf00      	nop
 801e754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e756:	bc08      	pop	{r3}
 801e758:	469e      	mov	lr, r3
 801e75a:	4770      	bx	lr
