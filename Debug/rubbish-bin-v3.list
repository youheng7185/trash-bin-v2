
rubbish-bin-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c164  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013890  0801c434  0801c434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802fcc4  0802fcc4  00030cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802fccc  0802fccc  00030ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802fcd0  0802fcd0  00030cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0802fcd4  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000085ec  2400006c  0802fd40  0003106c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24008658  0802fd40  00031658  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003106c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003650a  00000000  00000000  0003109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000072a6  00000000  00000000  000675a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027d8  00000000  00000000  0006e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e77  00000000  00000000  00071028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000d177  00000000  00000000  00072e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000417a3  00000000  00000000  00080016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170d82  00000000  00000000  000c17b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023253b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af30  00000000  00000000  00232580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0023d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c41c 	.word	0x0801c41c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0801c41c 	.word	0x0801c41c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <my_printf>:
}
*/
extern UART_HandleTypeDef hlpuart1;

static inline void my_printf(const char *format, ...)
{
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b0c2      	sub	sp, #264	@ 0x108
 80006f2:	af00      	add	r7, sp, #0
    char buffer[256];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80006f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80006f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	f01a fe90 	bl	801b43c <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdf5 	bl	8000310 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0108 	add.w	r1, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <my_printf+0x5c>)
 8000734:	f00e ff30 	bl	800f598 <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	240001fc 	.word	0x240001fc

0800074c <HAL_GPIO_EXTI_Callback>:
void tud_umount_cb(void) {
  //Do nothing for now
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b08      	cmp	r3, #8
 800075a:	d10d      	bne.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    	my_printf("hello from exti\r\n");
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x34>)
 800075e:	f7ff ffc5 	bl	80006ec <my_printf>
    	if (recording_state == READY)
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d103      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0x26>
    	{
    		recording_state = DO_RECORDING;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 800076c:	2202      	movs	r2, #2
 800076e:	701a      	strb	r2, [r3, #0]
    	} else {
    		my_printf("not ready for recording\r\n");
    	}
    }
}
 8000770:	e002      	b.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    		my_printf("not ready for recording\r\n");
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000774:	f7ff ffba 	bl	80006ec <my_printf>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0801c434 	.word	0x0801c434
 8000784:	24001e68 	.word	0x24001e68
 8000788:	0801c448 	.word	0x0801c448

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f003 fa43 	bl	8003c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f8ab 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fbab 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f000 fb89 	bl	8000eb4 <MX_DMA_Init>
  MX_I2C1_Init();
 80007a2:	f000 f913 	bl	80009cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80007a6:	f000 f951 	bl	8000a4c <MX_I2C2_Init>
  MX_SPI4_Init();
 80007aa:	f000 fa79 	bl	8000ca0 <MX_SPI4_Init>
  MX_TIM2_Init();
 80007ae:	f000 facd 	bl	8000d4c <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80007b2:	f000 fa57 	bl	8000c64 <MX_SDMMC1_SD_Init>
  MX_I2S1_Init();
 80007b6:	f000 f989 	bl	8000acc <MX_I2S1_Init>
  MX_UART5_Init();
 80007ba:	f000 fa07 	bl	8000bcc <MX_UART5_Init>
  MX_FATFS_Init();
 80007be:	f011 fcf7 	bl	80121b0 <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 80007c2:	f000 f9b7 	bl	8000b34 <MX_LPUART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007c6:	f000 fb43 	bl	8000e50 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  my_printf("test print\r\n");
 80007ca:	483b      	ldr	r0, [pc, #236]	@ (80008b8 <main+0x12c>)
 80007cc:	f7ff ff8e 	bl	80006ec <my_printf>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	483a      	ldr	r0, [pc, #232]	@ (80008bc <main+0x130>)
 80007d4:	f00d fe86 	bl	800e4e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007d8:	2104      	movs	r1, #4
 80007da:	4838      	ldr	r0, [pc, #224]	@ (80008bc <main+0x130>)
 80007dc:	f00d fe82 	bl	800e4e4 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e4:	f003 faac 	bl	8003d40 <HAL_Delay>

  mfcc_q15_init();
 80007e8:	f000 fc84 	bl	80010f4 <mfcc_q15_init>

  st7920_init();
 80007ec:	f000 ffe0 	bl	80017b0 <st7920_init>
  st7920_clear();
 80007f0:	f001 f94a 	bl	8001a88 <st7920_clear>
  st7920_print(1, 1, "sd card mount failed");
 80007f4:	4a32      	ldr	r2, [pc, #200]	@ (80008c0 <main+0x134>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 f91f 	bl	8001a3c <st7920_print>
  st7920_sendBuffer();
 80007fe:	f001 f86f 	bl	80018e0 <st7920_sendBuffer>
  sd_init();
 8000802:	f000 fcfd 	bl	8001200 <sd_init>
  st7920_clear();
 8000806:	f001 f93f 	bl	8001a88 <st7920_clear>
  st7920_print(1, 1, "sd card mount success");
 800080a:	4a2e      	ldr	r2, [pc, #184]	@ (80008c4 <main+0x138>)
 800080c:	2101      	movs	r1, #1
 800080e:	2001      	movs	r0, #1
 8000810:	f001 f914 	bl	8001a3c <st7920_print>
  st7920_sendBuffer();
 8000814:	f001 f864 	bl	80018e0 <st7920_sendBuffer>
  recording_state = READY; // READY as sd card success, can write data to it
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <main+0x13c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]

  if(vl53l0x_init())
 800081e:	f003 f98b 	bl	8003b38 <vl53l0x_init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d008      	beq.n	800083a <main+0xae>
  {
	  my_printf("init vl53l0x success\r\n");
 8000828:	4828      	ldr	r0, [pc, #160]	@ (80008cc <main+0x140>)
 800082a:	f7ff ff5f 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init success");
 800082e:	4a28      	ldr	r2, [pc, #160]	@ (80008d0 <main+0x144>)
 8000830:	2109      	movs	r1, #9
 8000832:	2001      	movs	r0, #1
 8000834:	f001 f902 	bl	8001a3c <st7920_print>
 8000838:	e007      	b.n	800084a <main+0xbe>
  } else {
	  my_printf("init vl53l0x failed\r\n");
 800083a:	4826      	ldr	r0, [pc, #152]	@ (80008d4 <main+0x148>)
 800083c:	f7ff ff56 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init failed");
 8000840:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <main+0x14c>)
 8000842:	2109      	movs	r1, #9
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f8f9 	bl	8001a3c <st7920_print>
  }
  my_printf("finish setup\r\n");
 800084a:	4824      	ldr	r0, [pc, #144]	@ (80008dc <main+0x150>)
 800084c:	f7ff ff4e 	bl	80006ec <my_printf>
  st7920_print(1, 17, "waiting for exti");
 8000850:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <main+0x154>)
 8000852:	2111      	movs	r1, #17
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f8f1 	bl	8001a3c <st7920_print>
  st7920_sendBuffer();
 800085a:	f001 f841 	bl	80018e0 <st7920_sendBuffer>

  servo360_init();
 800085e:	f000 ff0c 	bl	800167a <servo360_init>
  set_servo_speed(150);
 8000862:	2096      	movs	r0, #150	@ 0x96
 8000864:	f000 ff22 	bl	80016ac <set_servo_speed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (recording_state == DO_RECORDING) {
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <main+0x13c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d1fb      	bne.n	8000868 <main+0xdc>
		recording_state = RECORDING;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <main+0x13c>)
 8000872:	2203      	movs	r2, #3
 8000874:	701a      	strb	r2, [r3, #0]
		my_printf("recording started from exti\r\n");
 8000876:	481b      	ldr	r0, [pc, #108]	@ (80008e4 <main+0x158>)
 8000878:	f7ff ff38 	bl	80006ec <my_printf>
		st7920_clear();
 800087c:	f001 f904 	bl	8001a88 <st7920_clear>
		st7920_print(1, 17, "record start");
 8000880:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <main+0x15c>)
 8000882:	2111      	movs	r1, #17
 8000884:	2001      	movs	r0, #1
 8000886:	f001 f8d9 	bl	8001a3c <st7920_print>
		st7920_sendBuffer();
 800088a:	f001 f829 	bl	80018e0 <st7920_sendBuffer>
		int num_of_file = record_and_convert();
 800088e:	f000 fee7 	bl	8001660 <record_and_convert>
 8000892:	6278      	str	r0, [r7, #36]	@ 0x24
		char tx_buffer[30];
		sprintf(tx_buffer, "record saved to %d", num_of_file);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000898:	4914      	ldr	r1, [pc, #80]	@ (80008ec <main+0x160>)
 800089a:	4618      	mov	r0, r3
 800089c:	f01a fd3a 	bl	801b314 <siprintf>
		st7920_print(1, 25, tx_buffer);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	461a      	mov	r2, r3
 80008a4:	2119      	movs	r1, #25
 80008a6:	2001      	movs	r0, #1
 80008a8:	f001 f8c8 	bl	8001a3c <st7920_print>
		st7920_sendBuffer();
 80008ac:	f001 f818 	bl	80018e0 <st7920_sendBuffer>
		recording_state = READY;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <main+0x13c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	  if (recording_state == DO_RECORDING) {
 80008b6:	e7d7      	b.n	8000868 <main+0xdc>
 80008b8:	0801c464 	.word	0x0801c464
 80008bc:	24000428 	.word	0x24000428
 80008c0:	0801c474 	.word	0x0801c474
 80008c4:	0801c48c 	.word	0x0801c48c
 80008c8:	24001e68 	.word	0x24001e68
 80008cc:	0801c4a4 	.word	0x0801c4a4
 80008d0:	0801c4bc 	.word	0x0801c4bc
 80008d4:	0801c4d4 	.word	0x0801c4d4
 80008d8:	0801c4ec 	.word	0x0801c4ec
 80008dc:	0801c500 	.word	0x0801c500
 80008e0:	0801c510 	.word	0x0801c510
 80008e4:	0801c524 	.word	0x0801c524
 80008e8:	0801c544 	.word	0x0801c544
 80008ec:	0801c554 	.word	0x0801c554

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f01a fe3e 	bl	801b580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f01a fe38 	bl	801b580 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f008 f9eb 	bl	8008cec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <SystemClock_Config+0xd8>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a2a      	ldr	r2, [pc, #168]	@ (80009c8 <SystemClock_Config+0xd8>)
 8000920:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <SystemClock_Config+0xd8>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000932:	bf00      	nop
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <SystemClock_Config+0xd8>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000940:	d1f8      	bne.n	8000934 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000942:	2301      	movs	r3, #1
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	2302      	movs	r3, #2
 8000952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000954:	2305      	movs	r3, #5
 8000956:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000958:	2330      	movs	r3, #48	@ 0x30
 800095a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800095c:	2301      	movs	r3, #1
 800095e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000960:	2305      	movs	r3, #5
 8000962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000968:	2308      	movs	r3, #8
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096c:	2300      	movs	r3, #0
 800096e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	4618      	mov	r0, r3
 800097a:	f008 fa01 	bl	8008d80 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000984:	f000 fb80 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	233f      	movs	r3, #63	@ 0x3f
 800098a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2303      	movs	r3, #3
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a6:	2340      	movs	r3, #64	@ 0x40
 80009a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2103      	movs	r1, #3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f008 fdc0 	bl	8009534 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009ba:	f000 fb65 	bl	8001088 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3770      	adds	r7, #112	@ 0x70
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024800 	.word	0x58024800

080009cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <MX_I2C1_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_I2C1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a08:	f006 f89c 	bl	8006b44 <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 fb39 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a1a:	f006 fde3 	bl	80075e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 fb30 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_I2C1_Init+0x74>)
 8000a2c:	f006 fe25 	bl	800767a <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 fb27 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000088 	.word	0x24000088
 8000a44:	40005400 	.word	0x40005400
 8000a48:	307075b1 	.word	0x307075b1

08000a4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <MX_I2C2_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <MX_I2C2_Init+0x7c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a86:	480e      	ldr	r0, [pc, #56]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a88:	f006 f85c 	bl	8006b44 <HAL_I2C_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a92:	f000 faf9 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000a9a:	f006 fda3 	bl	80075e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f000 faf0 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_I2C2_Init+0x74>)
 8000aac:	f006 fde5 	bl	800767a <HAL_I2CEx_ConfigDigitalFilter>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 fae7 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	240000dc 	.word	0x240000dc
 8000ac4:	40005800 	.word	0x40005800
 8000ac8:	307075b1 	.word	0x307075b1

08000acc <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <MX_I2S1_Init+0x64>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ad8:	2206      	movs	r2, #6
 8000ada:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ae8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000af2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000af6:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_I2S1_Init+0x60>)
 8000b18:	f006 fdfc 	bl	8007714 <HAL_I2S_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000b22:	f000 fab1 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000130 	.word	0x24000130
 8000b30:	40013000 	.word	0x40013000

08000b34 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <MX_LPUART1_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	f00e fcbb 	bl	800f4f8 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fa7e 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	f00f fe55 	bl	801083e <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 fa75 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000ba2:	f00f fe8a 	bl	80108ba <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fa6c 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_LPUART1_UART_Init+0x90>)
 8000bb2:	f00f fe0b 	bl	80107cc <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 fa64 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	240001fc 	.word	0x240001fc
 8000bc8:	58000c00 	.word	0x58000c00

08000bcc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_UART5_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c16:	f00e fc6f 	bl	800f4f8 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 fa32 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c28:	f00f fe09 	bl	801083e <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 fa29 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c3a:	f00f fe3e 	bl	80108ba <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 fa20 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_UART5_Init+0x90>)
 8000c4a:	f00f fdbf 	bl	80107cc <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 fa18 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24000290 	.word	0x24000290
 8000c60:	40005000 	.word	0x40005000

08000c64 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <MX_SDMMC1_SD_Init+0x38>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c80:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <MX_SDMMC1_SD_Init+0x34>)
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	24000324 	.word	0x24000324
 8000c9c:	52007000 	.word	0x52007000

08000ca0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ca6:	4a28      	ldr	r2, [pc, #160]	@ (8000d48 <MX_SPI4_Init+0xa8>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cb0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cba:	2207      	movs	r2, #7
 8000cbc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ccc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cd0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cd4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000cd8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_SPI4_Init+0xa4>)
 8000d32:	f00c ff23 	bl	800db7c <HAL_SPI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d3c:	f000 f9a4 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240003a0 	.word	0x240003a0
 8000d48:	40013400 	.word	0x40013400

08000d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7e:	4b33      	ldr	r3, [pc, #204]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2750-1;
 8000d86:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d88:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8000d8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d96:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da8:	4828      	ldr	r0, [pc, #160]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000daa:	f00d fae2 	bl	800e372 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000db4:	f000 f968 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4821      	ldr	r0, [pc, #132]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000dc6:	f00d fdbd 	bl	800e944 <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000dd0:	f000 f95a 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dd4:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000dd6:	f00d fb23 	bl	800e420 <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000de0:	f000 f952 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4816      	ldr	r0, [pc, #88]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000df4:	f00e fae4 	bl	800f3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000dfe:	f000 f943 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	2360      	movs	r3, #96	@ 0x60
 8000e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000e1a:	f00d fc7f 	bl	800e71c <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e24:	f000 f930 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000e30:	f00d fc74 	bl	800e71c <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e3a:	f000 f925 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e3e:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM2_Init+0x100>)
 8000e40:	f001 f97e 	bl	8002140 <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	@ 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	24000428 	.word	0x24000428

08000e50 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e56:	4a16      	ldr	r2, [pc, #88]	@ (8000eb0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000e58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e5c:	2209      	movs	r2, #9
 8000e5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e98:	f006 febc 	bl	8007c14 <HAL_PCD_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ea2:	f000 f8f1 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000474 	.word	0x24000474
 8000eb0:	40040000 	.word	0x40040000

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <MX_DMA_Init+0x3c>)
 8000ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <MX_DMA_Init+0x3c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_DMA_Init+0x3c>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	200b      	movs	r0, #11
 8000ede:	f003 f82e 	bl	8003f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ee2:	200b      	movs	r0, #11
 8000ee4:	f003 f845 	bl	8003f72 <HAL_NVIC_EnableIRQ>

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	4a59      	ldr	r2, [pc, #356]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1a:	4b57      	ldr	r3, [pc, #348]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	623b      	str	r3, [r7, #32]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	4a52      	ldr	r2, [pc, #328]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f38:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f64:	4b44      	ldr	r3, [pc, #272]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a43      	ldr	r2, [pc, #268]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a34      	ldr	r2, [pc, #208]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <MX_GPIO_Init+0x184>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin|lcd_rst_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2118      	movs	r1, #24
 8000ffe:	481f      	ldr	r0, [pc, #124]	@ (800107c <MX_GPIO_Init+0x188>)
 8001000:	f005 fd6c 	bl	8006adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	21bc      	movs	r1, #188	@ 0xbc
 8001008:	481d      	ldr	r0, [pc, #116]	@ (8001080 <MX_GPIO_Init+0x18c>)
 800100a:	f005 fd67 	bl	8006adc <HAL_GPIO_WritePin>
                          |led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : lcd_cs_Pin lcd_rst_Pin */
  GPIO_InitStruct.Pin = lcd_cs_Pin|lcd_rst_Pin;
 800100e:	2318      	movs	r3, #24
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4815      	ldr	r0, [pc, #84]	@ (800107c <MX_GPIO_Init+0x188>)
 8001026:	f005 fbb1 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_sensor_Pin */
  GPIO_InitStruct.Pin = ir_sensor_Pin;
 800102a:	2308      	movs	r3, #8
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ir_sensor_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4811      	ldr	r0, [pc, #68]	@ (8001084 <MX_GPIO_Init+0x190>)
 8001040:	f005 fba4 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : xshut4_Pin xshut3_Pin xshut2_Pin xshut1_Pin
                           led_Pin */
  GPIO_InitStruct.Pin = xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001044:	23bc      	movs	r3, #188	@ 0xbc
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
                          |led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <MX_GPIO_Init+0x18c>)
 800105c:	f005 fb96 	bl	800678c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(ir_sensor_EXTI_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2009      	movs	r0, #9
 8001066:	f002 ff6a 	bl	8003f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ir_sensor_EXTI_IRQn);
 800106a:	2009      	movs	r0, #9
 800106c:	f002 ff81 	bl	8003f72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	@ 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400
 800107c:	58021000 	.word	0x58021000
 8001080:	58021800 	.word	0x58021800
 8001084:	58020000 	.word	0x58020000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <my_printf>:
{
 8001094:	b40f      	push	{r0, r1, r2, r3}
 8001096:	b580      	push	{r7, lr}
 8001098:	b0c2      	sub	sp, #264	@ 0x108
 800109a:	af00      	add	r7, sp, #0
    va_start(args, format);
 800109c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010a8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010b2:	f107 0008 	add.w	r0, r7, #8
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80010bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c0:	f01a f9bc 	bl	801b43c <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f921 	bl	8000310 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <my_printf+0x5c>)
 80010dc:	f00e fa5c 	bl	800f598 <HAL_UART_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80010e6:	46bd      	mov	sp, r7
 80010e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ec:	b004      	add	sp, #16
 80010ee:	4770      	bx	lr
 80010f0:	240001fc 	.word	0x240001fc

080010f4 <mfcc_q15_init>:
#include "dct_coefficients.h"
#include "filter_bank.h"

arm_mfcc_instance_q15 mfcc_inst;

void mfcc_q15_init() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af06      	add	r7, sp, #24
	arm_status status;

	status = arm_mfcc_init_q15(
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <mfcc_q15_init+0x4c>)
 80010fc:	9304      	str	r3, [sp, #16]
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <mfcc_q15_init+0x50>)
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <mfcc_q15_init+0x54>)
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <mfcc_q15_init+0x58>)
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <mfcc_q15_init+0x5c>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	230d      	movs	r3, #13
 8001110:	221a      	movs	r2, #26
 8001112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <mfcc_q15_init+0x60>)
 8001118:	f016 fbf8 	bl	801790c <arm_mfcc_init_q15>
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
	    mel_filter_lengths,          // filterLengths
	    mel_filter_coeffs,           // filterCoefs
	    hamming_window               // windowCoefs
	);

	if(status == ARM_MATH_SUCCESS)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <mfcc_q15_init+0x3c>
	{
		my_printf("mfcc init success\r\n");
 8001128:	480b      	ldr	r0, [pc, #44]	@ (8001158 <mfcc_q15_init+0x64>)
 800112a:	f7ff ffb3 	bl	8001094 <my_printf>
	} else {
		my_printf("mfcc init failed\r\n");
	}
}
 800112e:	e002      	b.n	8001136 <mfcc_q15_init+0x42>
		my_printf("mfcc init failed\r\n");
 8001130:	480a      	ldr	r0, [pc, #40]	@ (800115c <mfcc_q15_init+0x68>)
 8001132:	f7ff ffaf 	bl	8001094 <my_printf>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	0801d294 	.word	0x0801d294
 8001144:	0801ced0 	.word	0x0801ced0
 8001148:	0801ce68 	.word	0x0801ce68
 800114c:	0801ce00 	.word	0x0801ce00
 8001150:	0801cb5c 	.word	0x0801cb5c
 8001154:	24000958 	.word	0x24000958
 8001158:	0801c568 	.word	0x0801c568
 800115c:	0801c57c 	.word	0x0801c57c

08001160 <convert_mfcc>:
q15_t mfcc_output[26];
// input buffer is 512
q31_t tmp_buffer[512 * 2];

void convert_mfcc(q15_t * pcm_input)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	arm_status status;
	status = arm_mfcc_q15(&mfcc_inst, pcm_input, mfcc_output, tmp_buffer);
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <convert_mfcc+0x30>)
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <convert_mfcc+0x34>)
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <convert_mfcc+0x38>)
 8001170:	f016 fbfc 	bl	801796c <arm_mfcc_q15>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
	if (status != ARM_MATH_SUCCESS)
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <convert_mfcc+0x26>
	{
		my_printf("failed mfcc conversion\r\n");
 8001180:	4806      	ldr	r0, [pc, #24]	@ (800119c <convert_mfcc+0x3c>)
 8001182:	f7ff ff87 	bl	8001094 <my_printf>
	}
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	240009c4 	.word	0x240009c4
 8001194:	24000990 	.word	0x24000990
 8001198:	24000958 	.word	0x24000958
 800119c:	0801c590 	.word	0x0801c590

080011a0 <my_printf>:
{
 80011a0:	b40f      	push	{r0, r1, r2, r3}
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b0c2      	sub	sp, #264	@ 0x108
 80011a6:	af00      	add	r7, sp, #0
    va_start(args, format);
 80011a8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80011ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b4:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80011b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011be:	f107 0008 	add.w	r0, r7, #8
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011cc:	f01a f936 	bl	801b43c <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f89b 	bl	8000310 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f107 0108 	add.w	r1, r7, #8
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <my_printf+0x5c>)
 80011e8:	f00e f9d6 	bl	800f598 <HAL_UART_Transmit>
}
 80011ec:	bf00      	nop
 80011ee:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80011f2:	46bd      	mov	sp, r7
 80011f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr
 80011fc:	240001fc 	.word	0x240001fc

08001200 <sd_init>:

FATFS fatfs;
FRESULT fresult;
extern SD_HandleTypeDef hsd1;

void sd_init() {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    if (BSP_SD_Init() == MSD_OK) {
 8001204:	f010 ffee 	bl	80121e4 <BSP_SD_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <sd_init+0x16>
        my_printf("SD card initialized successfully!\r\n");
 800120e:	4810      	ldr	r0, [pc, #64]	@ (8001250 <sd_init+0x50>)
 8001210:	f7ff ffc6 	bl	80011a0 <my_printf>
 8001214:	e002      	b.n	800121c <sd_init+0x1c>
    } else {
        my_printf("SD card initialization failed!\r\n");
 8001216:	480f      	ldr	r0, [pc, #60]	@ (8001254 <sd_init+0x54>)
 8001218:	f7ff ffc2 	bl	80011a0 <my_printf>
    }

    fresult = f_mount(&fatfs, "", 1);
 800121c:	2201      	movs	r2, #1
 800121e:	490e      	ldr	r1, [pc, #56]	@ (8001258 <sd_init+0x58>)
 8001220:	480e      	ldr	r0, [pc, #56]	@ (800125c <sd_init+0x5c>)
 8001222:	f018 ff2f 	bl	801a084 <f_mount>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <sd_init+0x60>)
 800122c:	701a      	strb	r2, [r3, #0]
    if(fresult != FR_OK) {
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <sd_init+0x60>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <sd_init+0x4c>
        my_printf("f_mount failed, %d\r\n", fresult);
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <sd_init+0x60>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	@ (8001264 <sd_init+0x64>)
 800123e:	f7ff ffaf 	bl	80011a0 <my_printf>
        while(1){
            HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f002 fd7b 	bl	8003d40 <HAL_Delay>
 800124a:	e7fa      	b.n	8001242 <sd_init+0x42>
        }
    }
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0801c5ac 	.word	0x0801c5ac
 8001254:	0801c5d0 	.word	0x0801c5d0
 8001258:	0801c5f4 	.word	0x0801c5f4
 800125c:	240019c4 	.word	0x240019c4
 8001260:	24001bf4 	.word	0x24001bf4
 8001264:	0801c5f8 	.word	0x0801c5f8

08001268 <get_next_audio_filename>:

#define AUDIO_FOLDER "AUDIO"
#define FILE_TEMPLATE "AUDIO%03d.WAV"
#define MFCC_TEMPLATE "MFCC%03d.BIN"

int get_next_audio_filename() {
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  DIR dir;
  FILINFO fno;
  int max_number = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (f_opendir(&dir, AUDIO_FOLDER) == FR_OK) {
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	492c      	ldr	r1, [pc, #176]	@ (8001328 <get_next_audio_filename+0xc0>)
 8001278:	4618      	mov	r0, r3
 800127a:	f019 fd29 	bl	801acd0 <f_opendir>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14a      	bne.n	800131a <get_next_audio_filename+0xb2>
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001284:	e01e      	b.n	80012c4 <get_next_audio_filename+0x5c>
      if (strstr(fno.fname, "AUDIO") && strstr(fno.fname, ".WAV")) {
 8001286:	463b      	mov	r3, r7
 8001288:	3309      	adds	r3, #9
 800128a:	4927      	ldr	r1, [pc, #156]	@ (8001328 <get_next_audio_filename+0xc0>)
 800128c:	4618      	mov	r0, r3
 800128e:	f01a f97f 	bl	801b590 <strstr>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d015      	beq.n	80012c4 <get_next_audio_filename+0x5c>
 8001298:	463b      	mov	r3, r7
 800129a:	3309      	adds	r3, #9
 800129c:	4923      	ldr	r1, [pc, #140]	@ (800132c <get_next_audio_filename+0xc4>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f01a f976 	bl	801b590 <strstr>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00c      	beq.n	80012c4 <get_next_audio_filename+0x5c>
        int num = atoi(fno.fname + 5);
 80012aa:	463b      	mov	r3, r7
 80012ac:	3309      	adds	r3, #9
 80012ae:	3305      	adds	r3, #5
 80012b0:	4618      	mov	r0, r3
 80012b2:	f019 fe3e 	bl	801af32 <atoi>
 80012b6:	64b8      	str	r0, [r7, #72]	@ 0x48
        if (num > max_number) {
 80012b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012bc:	429a      	cmp	r2, r3
 80012be:	dd01      	ble.n	80012c4 <get_next_audio_filename+0x5c>
          max_number = num;
 80012c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80012c4:	463a      	mov	r2, r7
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f019 fd98 	bl	801ae02 <f_readdir>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <get_next_audio_filename+0x76>
 80012d8:	7a7b      	ldrb	r3, [r7, #9]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1d3      	bne.n	8001286 <get_next_audio_filename+0x1e>
        }
      }
    }
    f_closedir(&dir);
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	4618      	mov	r0, r3
 80012e4:	f019 fd67 	bl	801adb6 <f_closedir>
  } else {
    return -1;
  }

  snprintf(latest_audio_filename, sizeof(latest_audio_filename), AUDIO_FOLDER "/" FILE_TEMPLATE, max_number + 1);
 80012e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <get_next_audio_filename+0xc8>)
 80012ee:	2120      	movs	r1, #32
 80012f0:	4810      	ldr	r0, [pc, #64]	@ (8001334 <get_next_audio_filename+0xcc>)
 80012f2:	f019 ffd9 	bl	801b2a8 <sniprintf>
  snprintf(latest_mfcc_filename, sizeof(latest_mfcc_filename), AUDIO_FOLDER "/" MFCC_TEMPLATE, max_number + 1);
 80012f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <get_next_audio_filename+0xd0>)
 80012fc:	2120      	movs	r1, #32
 80012fe:	480f      	ldr	r0, [pc, #60]	@ (800133c <get_next_audio_filename+0xd4>)
 8001300:	f019 ffd2 	bl	801b2a8 <sniprintf>
  my_printf("new audio file name in pcm should be: %s\r\n", latest_audio_filename);
 8001304:	490b      	ldr	r1, [pc, #44]	@ (8001334 <get_next_audio_filename+0xcc>)
 8001306:	480e      	ldr	r0, [pc, #56]	@ (8001340 <get_next_audio_filename+0xd8>)
 8001308:	f7ff ff4a 	bl	80011a0 <my_printf>
  my_printf("new mfcc in f32 should be: %s\r\n", latest_mfcc_filename);
 800130c:	490b      	ldr	r1, [pc, #44]	@ (800133c <get_next_audio_filename+0xd4>)
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <get_next_audio_filename+0xdc>)
 8001310:	f7ff ff46 	bl	80011a0 <my_printf>
  return max_number + 1;
 8001314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001316:	3301      	adds	r3, #1
 8001318:	e001      	b.n	800131e <get_next_audio_filename+0xb6>
    return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131e:	4618      	mov	r0, r3
 8001320:	3750      	adds	r7, #80	@ 0x50
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0801c610 	.word	0x0801c610
 800132c:	0801c618 	.word	0x0801c618
 8001330:	0801c620 	.word	0x0801c620
 8001334:	24001bf8 	.word	0x24001bf8
 8001338:	0801c634 	.word	0x0801c634
 800133c:	24001c18 	.word	0x24001c18
 8001340:	0801c648 	.word	0x0801c648
 8001344:	0801c674 	.word	0x0801c674

08001348 <HAL_I2S_RxHalfCpltCallback>:
UINT bytes_written;
int16_t left_pcm_buffer[BUFFER_SIZE / 4];
q15_t q15_buffer[BUFFER_SIZE / 4];

// Callback when half buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    buffer_ready = 1;
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	24005e6c 	.word	0x24005e6c

08001368 <HAL_I2S_RxCpltCallback>:

// Callback when full buffer is filled
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    buffer_ready = 2;
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_I2S_RxCpltCallback+0x1c>)
 8001372:	2202      	movs	r2, #2
 8001374:	701a      	strb	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	24005e6c 	.word	0x24005e6c

08001388 <write_wav_header>:

// Write WAV header for mono channel, 16-bit, 16kHz sampling rate
void write_wav_header(FIL *file, uint32_t data_size) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	@ 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    uint8_t wav_header[44] = {
 8001392:	2352      	movs	r3, #82	@ 0x52
 8001394:	733b      	strb	r3, [r7, #12]
 8001396:	2349      	movs	r3, #73	@ 0x49
 8001398:	737b      	strb	r3, [r7, #13]
 800139a:	2346      	movs	r3, #70	@ 0x46
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	2346      	movs	r3, #70	@ 0x46
 80013a0:	73fb      	strb	r3, [r7, #15]
        'R', 'I', 'F', 'F',
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	3324      	adds	r3, #36	@ 0x24
 80013a8:	b2db      	uxtb	r3, r3
    uint8_t wav_header[44] = {
 80013aa:	743b      	strb	r3, [r7, #16]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3324      	adds	r3, #36	@ 0x24
 80013b0:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	747b      	strb	r3, [r7, #17]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3324      	adds	r3, #36	@ 0x24
 80013ba:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	74bb      	strb	r3, [r7, #18]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3324      	adds	r3, #36	@ 0x24
 80013c4:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	74fb      	strb	r3, [r7, #19]
 80013ca:	2357      	movs	r3, #87	@ 0x57
 80013cc:	753b      	strb	r3, [r7, #20]
 80013ce:	2341      	movs	r3, #65	@ 0x41
 80013d0:	757b      	strb	r3, [r7, #21]
 80013d2:	2356      	movs	r3, #86	@ 0x56
 80013d4:	75bb      	strb	r3, [r7, #22]
 80013d6:	2345      	movs	r3, #69	@ 0x45
 80013d8:	75fb      	strb	r3, [r7, #23]
 80013da:	2366      	movs	r3, #102	@ 0x66
 80013dc:	763b      	strb	r3, [r7, #24]
 80013de:	236d      	movs	r3, #109	@ 0x6d
 80013e0:	767b      	strb	r3, [r7, #25]
 80013e2:	2374      	movs	r3, #116	@ 0x74
 80013e4:	76bb      	strb	r3, [r7, #26]
 80013e6:	2320      	movs	r3, #32
 80013e8:	76fb      	strb	r3, [r7, #27]
 80013ea:	2310      	movs	r3, #16
 80013ec:	773b      	strb	r3, [r7, #28]
 80013ee:	2300      	movs	r3, #0
 80013f0:	777b      	strb	r3, [r7, #29]
 80013f2:	2300      	movs	r3, #0
 80013f4:	77bb      	strb	r3, [r7, #30]
 80013f6:	2300      	movs	r3, #0
 80013f8:	77fb      	strb	r3, [r7, #31]
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 3020 	strb.w	r3, [r7, #32]
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001406:	2301      	movs	r3, #1
 8001408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001418:	233e      	movs	r3, #62	@ 0x3e
 800141a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800142a:	2300      	movs	r3, #0
 800142c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001430:	237d      	movs	r3, #125	@ 0x7d
 8001432:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001436:	2300      	movs	r3, #0
 8001438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800143c:	2300      	movs	r3, #0
 800143e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001442:	2302      	movs	r3, #2
 8001444:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001448:	2300      	movs	r3, #0
 800144a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800144e:	2310      	movs	r3, #16
 8001450:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001454:	2300      	movs	r3, #0
 8001456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001460:	2361      	movs	r3, #97	@ 0x61
 8001462:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001466:	2374      	movs	r3, #116	@ 0x74
 8001468:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800146c:	2361      	movs	r3, #97	@ 0x61
 800146e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        16, 0, 0, 0, 1, 0, 1, 0,  // PCM format, 1 channel (mono)
        0x00, 0x3E, 0x00, 0x00,  // 16000 Hz sample rate (0x3E80 = 16000)
        0x00, 0x7D, 0x00, 0x00,  // Byte rate = 16000 * 1 * 16/8 = 32000 (0x7D00)
        2, 0, 16, 0,  // Block align = 2 bytes, Bits per sample = 16
        'd', 'a', 't', 'a',
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    };
    UINT bytes_written;
    f_write(file, wav_header, 44, &bytes_written);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	f107 010c 	add.w	r1, r7, #12
 80014a0:	222c      	movs	r2, #44	@ 0x2c
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f018 ffee 	bl	801a484 <f_write>
    f_sync(file);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f019 f960 	bl	801a76e <f_sync>
}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	@ 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <start_audio_recording>:
}

extern I2S_HandleTypeDef hi2s1;

// Start audio recording (writing only left channel)
void start_audio_recording() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
	UINT bytes_written_mfcc;
    buffer_ready = 0;
 80014be:	4b55      	ldr	r3, [pc, #340]	@ (8001614 <start_audio_recording+0x15c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    my_printf("Starting audio recording...\r\n");
 80014c4:	4854      	ldr	r0, [pc, #336]	@ (8001618 <start_audio_recording+0x160>)
 80014c6:	f7ff fe6b 	bl	80011a0 <my_printf>

    if (f_open(&file, latest_audio_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80014ca:	220a      	movs	r2, #10
 80014cc:	4953      	ldr	r1, [pc, #332]	@ (800161c <start_audio_recording+0x164>)
 80014ce:	4854      	ldr	r0, [pc, #336]	@ (8001620 <start_audio_recording+0x168>)
 80014d0:	f018 fe1e 	bl	801a110 <f_open>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 8095 	bne.w	8001606 <start_audio_recording+0x14e>
        my_printf("File created successfully\r\n");
 80014dc:	4851      	ldr	r0, [pc, #324]	@ (8001624 <start_audio_recording+0x16c>)
 80014de:	f7ff fe5f 	bl	80011a0 <my_printf>

        // Write placeholder WAV header
        write_wav_header(&file, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	484e      	ldr	r0, [pc, #312]	@ (8001620 <start_audio_recording+0x168>)
 80014e6:	f7ff ff4f 	bl	8001388 <write_wav_header>

        if (f_open(&file_mfcc, latest_mfcc_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80014ea:	220a      	movs	r2, #10
 80014ec:	494e      	ldr	r1, [pc, #312]	@ (8001628 <start_audio_recording+0x170>)
 80014ee:	484f      	ldr	r0, [pc, #316]	@ (800162c <start_audio_recording+0x174>)
 80014f0:	f018 fe0e 	bl	801a110 <f_open>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <start_audio_recording+0x58>
        {
        	my_printf("start write mfcc failed, filename: %s, error: %d\r\n", latest_mfcc_filename, fresult);
 80014fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001630 <start_audio_recording+0x178>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4949      	ldr	r1, [pc, #292]	@ (8001628 <start_audio_recording+0x170>)
 8001502:	484c      	ldr	r0, [pc, #304]	@ (8001634 <start_audio_recording+0x17c>)
 8001504:	f7ff fe4c 	bl	80011a0 <my_printf>
        	f_close(&file_mfcc);
 8001508:	4848      	ldr	r0, [pc, #288]	@ (800162c <start_audio_recording+0x174>)
 800150a:	f019 f9ae 	bl	801a86a <f_close>
 800150e:	e07d      	b.n	800160c <start_audio_recording+0x154>
        	return;
        }

        // Start I2S DMA
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)i2s_data, BUFFER_SIZE);
 8001510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001514:	4948      	ldr	r1, [pc, #288]	@ (8001638 <start_audio_recording+0x180>)
 8001516:	4849      	ldr	r0, [pc, #292]	@ (800163c <start_audio_recording+0x184>)
 8001518:	f006 fa2c 	bl	8007974 <HAL_I2S_Receive_DMA>

        uint32_t total_samples = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

        while (total_samples < SAMPLING_RATE * PERIOD) {
 8001520:	e053      	b.n	80015ca <start_audio_recording+0x112>
            if (buffer_ready) {
 8001522:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <start_audio_recording+0x15c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d04e      	beq.n	80015ca <start_audio_recording+0x112>
                int16_t *start_ptr = (buffer_ready == 1) ? i2s_data : &i2s_data[BUFFER_SIZE / 2];
 800152c:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <start_audio_recording+0x15c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <start_audio_recording+0x82>
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <start_audio_recording+0x180>)
 8001538:	e000      	b.n	800153c <start_audio_recording+0x84>
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <start_audio_recording+0x188>)
 800153c:	60bb      	str	r3, [r7, #8]

                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e013      	b.n	800156c <start_audio_recording+0xb4>
                {
                	left_pcm_buffer[i / 2] = start_ptr[i] * GAIN;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	4413      	add	r3, r2
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4413      	add	r3, r2
 8001558:	b29a      	uxth	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	b211      	sxth	r1, r2
 8001560:	4a38      	ldr	r2, [pc, #224]	@ (8001644 <start_audio_recording+0x18c>)
 8001562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	3302      	adds	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001572:	d3e7      	bcc.n	8001544 <start_audio_recording+0x8c>
                }

                // Write only left channel (even indices)

                f_write(&file, left_pcm_buffer, (BUFFER_SIZE / 4) * sizeof(int16_t), &bytes_written);
 8001574:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <start_audio_recording+0x190>)
 8001576:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800157a:	4932      	ldr	r1, [pc, #200]	@ (8001644 <start_audio_recording+0x18c>)
 800157c:	4828      	ldr	r0, [pc, #160]	@ (8001620 <start_audio_recording+0x168>)
 800157e:	f018 ff81 	bl	801a484 <f_write>

                total_samples += (BUFFER_SIZE / 4); // Since we write only half the samples
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001588:	617b      	str	r3, [r7, #20]

                arm_copy_q15((q15_t*)left_pcm_buffer, q15_buffer, BUFFER_SIZE / 4);
 800158a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800158e:	492f      	ldr	r1, [pc, #188]	@ (800164c <start_audio_recording+0x194>)
 8001590:	482c      	ldr	r0, [pc, #176]	@ (8001644 <start_audio_recording+0x18c>)
 8001592:	f012 fc2d 	bl	8013df0 <arm_copy_q15>

                for (uint8_t i = 0; i < 4; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e010      	b.n	80015be <start_audio_recording+0x106>
                {
                	convert_mfcc(&left_pcm_buffer[i * 512]);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <start_audio_recording+0x18c>)
 80015a4:	4413      	add	r3, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fdda 	bl	8001160 <convert_mfcc>
                	f_write(&file_mfcc, mfcc_output, 13 * sizeof(q15_t), &bytes_written_mfcc);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	221a      	movs	r2, #26
 80015b0:	4927      	ldr	r1, [pc, #156]	@ (8001650 <start_audio_recording+0x198>)
 80015b2:	481e      	ldr	r0, [pc, #120]	@ (800162c <start_audio_recording+0x174>)
 80015b4:	f018 ff66 	bl	801a484 <f_write>
                for (uint8_t i = 0; i < 4; i++)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d9eb      	bls.n	800159c <start_audio_recording+0xe4>
                	// fixme unknown error, why after 13 is empty, so lets record until 13
                }

                buffer_ready = 0;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <start_audio_recording+0x15c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
        while (total_samples < SAMPLING_RATE * PERIOD) {
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80015d0:	d3a7      	bcc.n	8001522 <start_audio_recording+0x6a>
            }
        }

        // Stop DMA
        HAL_I2S_DMAStop(&hi2s1);
 80015d2:	481a      	ldr	r0, [pc, #104]	@ (800163c <start_audio_recording+0x184>)
 80015d4:	f006 fa70 	bl	8007ab8 <HAL_I2S_DMAStop>

        // Update WAV header with actual data size
        f_lseek(&file, 0);
 80015d8:	2100      	movs	r1, #0
 80015da:	4811      	ldr	r0, [pc, #68]	@ (8001620 <start_audio_recording+0x168>)
 80015dc:	f019 f96f 	bl	801a8be <f_lseek>
        write_wav_header(&file, total_samples * sizeof(int16_t));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4619      	mov	r1, r3
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <start_audio_recording+0x168>)
 80015e8:	f7ff fece 	bl	8001388 <write_wav_header>

        my_printf("recording stopped!\r\n");
 80015ec:	4819      	ldr	r0, [pc, #100]	@ (8001654 <start_audio_recording+0x19c>)
 80015ee:	f7ff fdd7 	bl	80011a0 <my_printf>

        // Close file
        f_close(&file);
 80015f2:	480b      	ldr	r0, [pc, #44]	@ (8001620 <start_audio_recording+0x168>)
 80015f4:	f019 f939 	bl	801a86a <f_close>
        f_close(&file_mfcc);
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <start_audio_recording+0x174>)
 80015fa:	f019 f936 	bl	801a86a <f_close>

        my_printf("Recording complete\r\n");
 80015fe:	4816      	ldr	r0, [pc, #88]	@ (8001658 <start_audio_recording+0x1a0>)
 8001600:	f7ff fdce 	bl	80011a0 <my_printf>
 8001604:	e002      	b.n	800160c <start_audio_recording+0x154>
    } else {
        my_printf("File open failed\r\n");
 8001606:	4815      	ldr	r0, [pc, #84]	@ (800165c <start_audio_recording+0x1a4>)
 8001608:	f7ff fdca 	bl	80011a0 <my_printf>
    }
}
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24005e6c 	.word	0x24005e6c
 8001618:	0801c6e4 	.word	0x0801c6e4
 800161c:	24001bf8 	.word	0x24001bf8
 8001620:	24001c38 	.word	0x24001c38
 8001624:	0801c704 	.word	0x0801c704
 8001628:	24001c18 	.word	0x24001c18
 800162c:	24007e74 	.word	0x24007e74
 8001630:	24001bf4 	.word	0x24001bf4
 8001634:	0801c720 	.word	0x0801c720
 8001638:	24001e6c 	.word	0x24001e6c
 800163c:	24000130 	.word	0x24000130
 8001640:	24003e6c 	.word	0x24003e6c
 8001644:	24005e74 	.word	0x24005e74
 8001648:	24005e70 	.word	0x24005e70
 800164c:	24006e74 	.word	0x24006e74
 8001650:	24000990 	.word	0x24000990
 8001654:	0801c754 	.word	0x0801c754
 8001658:	0801c76c 	.word	0x0801c76c
 800165c:	0801c784 	.word	0x0801c784

08001660 <record_and_convert>:

int record_and_convert()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	int num = get_next_audio_filename();
 8001666:	f7ff fdff 	bl	8001268 <get_next_audio_filename>
 800166a:	6078      	str	r0, [r7, #4]
	start_audio_recording();
 800166c:	f7ff ff24 	bl	80014b8 <start_audio_recording>
	return num;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <servo360_init>:
#include "stm32h7xx_hal.h"
#include <stdint.h>

extern TIM_HandleTypeDef htim2;

void servo360_init(void) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
    for (int i = 100; i < 200; i++) {
 8001680:	2364      	movs	r3, #100	@ 0x64
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	e00a      	b.n	800169c <servo360_init+0x22>
        set_servo_speed(i);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f80e 	bl	80016ac <set_servo_speed>
        HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f002 fb55 	bl	8003d40 <HAL_Delay>
    for (int i = 100; i < 200; i++) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2bc7      	cmp	r3, #199	@ 0xc7
 80016a0:	ddf1      	ble.n	8001686 <servo360_init+0xc>
    }
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <set_servo_speed>:
/**
* for 360 degree servo
* pwm_value=150, stop
* pwm_value < 150 anticlockwise, > 150 clockwise
 */
void set_servo_speed(uint16_t pwm_value) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value - 5); // Small pre-step
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	1f5a      	subs	r2, r3, #5
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <set_servo_speed+0x2c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(20); // Let the servo register a small change
 80016c0:	2014      	movs	r0, #20
 80016c2:	f002 fb3d 	bl	8003d40 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value); // Set final speed
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <set_servo_speed+0x2c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	88fa      	ldrh	r2, [r7, #6]
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000428 	.word	0x24000428

080016dc <st7920_writeCmd>:
#include "font.h"

extern SPI_HandleTypeDef hspi4;

void st7920_writeCmd(uint8_t cmd)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2108      	movs	r1, #8
 80016ea:	480f      	ldr	r0, [pc, #60]	@ (8001728 <st7920_writeCmd+0x4c>)
 80016ec:	f005 f9f6 	bl	8006adc <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xF8;
 80016f0:	23f8      	movs	r3, #248	@ 0xf8
 80016f2:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (cmd & 0xF0);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f023 030f 	bic.w	r3, r3, #15
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((cmd << 4) & 0xF0);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	b2db      	uxtb	r3, r3
 8001704:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 8001706:	f107 010c 	add.w	r1, r7, #12
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	2203      	movs	r2, #3
 8001710:	4806      	ldr	r0, [pc, #24]	@ (800172c <st7920_writeCmd+0x50>)
 8001712:	f00c fb57 	bl	800ddc4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2108      	movs	r1, #8
 800171a:	4803      	ldr	r0, [pc, #12]	@ (8001728 <st7920_writeCmd+0x4c>)
 800171c:	f005 f9de 	bl	8006adc <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58021000 	.word	0x58021000
 800172c:	240003a0 	.word	0x240003a0

08001730 <st7920_writeData>:

void st7920_writeData(uint8_t data)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2108      	movs	r1, #8
 800173e:	480f      	ldr	r0, [pc, #60]	@ (800177c <st7920_writeData+0x4c>)
 8001740:	f005 f9cc 	bl	8006adc <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xFA;
 8001744:	23fa      	movs	r3, #250	@ 0xfa
 8001746:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (data & 0xF0);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f023 030f 	bic.w	r3, r3, #15
 800174e:	b2db      	uxtb	r3, r3
 8001750:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((data << 4) & 0xF0);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	b2db      	uxtb	r3, r3
 8001758:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 800175a:	f107 010c 	add.w	r1, r7, #12
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2203      	movs	r2, #3
 8001764:	4806      	ldr	r0, [pc, #24]	@ (8001780 <st7920_writeData+0x50>)
 8001766:	f00c fb2d 	bl	800ddc4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2108      	movs	r1, #8
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <st7920_writeData+0x4c>)
 8001770:	f005 f9b4 	bl	8006adc <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	58021000 	.word	0x58021000
 8001780:	240003a0 	.word	0x240003a0

08001784 <st7920_gfx>:

void st7920_gfx()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	st7920_writeCmd(0x30);  // 8 bit mode
 8001788:	2030      	movs	r0, #48	@ 0x30
 800178a:	f7ff ffa7 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f002 fad6 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x34);  // switch to Extended instructions
 8001794:	2034      	movs	r0, #52	@ 0x34
 8001796:	f7ff ffa1 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f002 fad0 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x36);  // enable graphics
 80017a0:	2036      	movs	r0, #54	@ 0x36
 80017a2:	f7ff ff9b 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f002 faca 	bl	8003d40 <HAL_Delay>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <st7920_init>:

void st7920_init()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2110      	movs	r1, #16
 80017b8:	481d      	ldr	r0, [pc, #116]	@ (8001830 <st7920_init+0x80>)
 80017ba:	f005 f98f 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017be:	200a      	movs	r0, #10
 80017c0:	f002 fabe 	bl	8003d40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2110      	movs	r1, #16
 80017c8:	4819      	ldr	r0, [pc, #100]	@ (8001830 <st7920_init+0x80>)
 80017ca:	f005 f987 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017ce:	2032      	movs	r0, #50	@ 0x32
 80017d0:	f002 fab6 	bl	8003d40 <HAL_Delay>

	st7920_writeCmd(0x30);
 80017d4:	2030      	movs	r0, #48	@ 0x30
 80017d6:	f7ff ff81 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f002 fab0 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x30);
 80017e0:	2030      	movs	r0, #48	@ 0x30
 80017e2:	f7ff ff7b 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f002 faaa 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x08);
 80017ec:	2008      	movs	r0, #8
 80017ee:	f7ff ff75 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f002 faa4 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x01);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff ff6f 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f002 fa9e 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x06);
 8001804:	2006      	movs	r0, #6
 8001806:	f7ff ff69 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f002 fa98 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x0C);
 8001810:	200c      	movs	r0, #12
 8001812:	f7ff ff63 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f002 fa92 	bl	8003d40 <HAL_Delay>
	st7920_writeCmd(0x02);
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff ff5d 	bl	80016dc <st7920_writeCmd>
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f002 fa8c 	bl	8003d40 <HAL_Delay>
	st7920_gfx();
 8001828:	f7ff ffac 	bl	8001784 <st7920_gfx>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58021000 	.word	0x58021000

08001834 <st7920_drawPixel>:

uint8_t framebuffer[64][16];

void st7920_drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t color)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	460b      	mov	r3, r1
 8001840:	71bb      	strb	r3, [r7, #6]
 8001842:	4613      	mov	r3, r2
 8001844:	717b      	strb	r3, [r7, #5]
	if(color > 1) return;
 8001846:	797b      	ldrb	r3, [r7, #5]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d840      	bhi.n	80018ce <st7920_drawPixel+0x9a>
	uint8_t bit_position = 7 - (pos_x % 8);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	43db      	mvns	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	73fb      	strb	r3, [r7, #15]
	if (color)
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01a      	beq.n	8001894 <st7920_drawPixel+0x60>
	{
		framebuffer[pos_y][pos_x /8] |= (1 << bit_position);
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	08d2      	lsrs	r2, r2, #3
 8001864:	b2d0      	uxtb	r0, r2
 8001866:	4601      	mov	r1, r0
 8001868:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <st7920_drawPixel+0xa8>)
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	440b      	add	r3, r1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b25a      	sxtb	r2, r3
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b25a      	sxtb	r2, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b2d1      	uxtb	r1, r2
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <st7920_drawPixel+0xa8>)
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	4403      	add	r3, r0
 800188e:	460a      	mov	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e01d      	b.n	80018d0 <st7920_drawPixel+0x9c>
	} else {
		framebuffer[pos_y][pos_x /8] &= ~(1 << bit_position);
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	08d2      	lsrs	r2, r2, #3
 800189a:	b2d0      	uxtb	r0, r2
 800189c:	4601      	mov	r1, r0
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <st7920_drawPixel+0xa8>)
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25a      	sxtb	r2, r3
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	b25a      	sxtb	r2, r3
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	b2d1      	uxtb	r1, r2
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <st7920_drawPixel+0xa8>)
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4413      	add	r3, r2
 80018c6:	4403      	add	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e000      	b.n	80018d0 <st7920_drawPixel+0x9c>
	if(color > 1) return;
 80018ce:	bf00      	nop
	}
}
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	240080a4 	.word	0x240080a4

080018e0 <st7920_sendBuffer>:

void st7920_sendBuffer()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 64; y++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e044      	b.n	8001976 <st7920_sendBuffer+0x96>
	{
		if (y < 32)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b1f      	cmp	r3, #31
 80018f0:	d81d      	bhi.n	800192e <st7920_sendBuffer+0x4e>
		{
			st7920_writeCmd(0x80 | y);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff feee 	bl	80016dc <st7920_writeCmd>
			st7920_writeCmd(0x80);
 8001900:	2080      	movs	r0, #128	@ 0x80
 8001902:	f7ff feeb 	bl	80016dc <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 8001906:	2300      	movs	r3, #0
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	e00c      	b.n	8001926 <st7920_sendBuffer+0x46>
			{
				st7920_writeData(framebuffer[y][j]);
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	491d      	ldr	r1, [pc, #116]	@ (8001988 <st7920_sendBuffer+0xa8>)
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	440a      	add	r2, r1
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff08 	bl	8001730 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	3301      	adds	r3, #1
 8001924:	71bb      	strb	r3, [r7, #6]
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d9ef      	bls.n	800190c <st7920_sendBuffer+0x2c>
 800192c:	e020      	b.n	8001970 <st7920_sendBuffer+0x90>
			}
		} else {
			st7920_writeCmd(0x80 | (y-32));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	3b20      	subs	r3, #32
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b25b      	sxtb	r3, r3
 8001936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800193a:	b25b      	sxtb	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fecc 	bl	80016dc <st7920_writeCmd>
			st7920_writeCmd(0x88);
 8001944:	2088      	movs	r0, #136	@ 0x88
 8001946:	f7ff fec9 	bl	80016dc <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 800194a:	2300      	movs	r3, #0
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	e00c      	b.n	800196a <st7920_sendBuffer+0x8a>
			{
				st7920_writeData(framebuffer[y][j]);
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	797b      	ldrb	r3, [r7, #5]
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <st7920_sendBuffer+0xa8>)
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	440a      	add	r2, r1
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fee6 	bl	8001730 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	3301      	adds	r3, #1
 8001968:	717b      	strb	r3, [r7, #5]
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d9ef      	bls.n	8001950 <st7920_sendBuffer+0x70>
	for (uint8_t y = 0; y < 64; y++)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	3301      	adds	r3, #1
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b3f      	cmp	r3, #63	@ 0x3f
 800197a:	d9b7      	bls.n	80018ec <st7920_sendBuffer+0xc>
			}
		}
	}
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240080a4 	.word	0x240080a4

0800198c <st7920_drawChar>:

// more features

void st7920_drawChar(uint8_t x, uint8_t y, char c) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	460b      	mov	r3, r1
 8001998:	71bb      	strb	r3, [r7, #6]
 800199a:	4613      	mov	r3, r2
 800199c:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) return;
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	2b1f      	cmp	r3, #31
 80019a2:	d945      	bls.n	8001a30 <st7920_drawChar+0xa4>
 80019a4:	797b      	ldrb	r3, [r7, #5]
 80019a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80019a8:	d842      	bhi.n	8001a30 <st7920_drawChar+0xa4>
    uint8_t charIndex = (c - 32);
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	3b20      	subs	r3, #32
 80019ae:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 5; row++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e038      	b.n	8001a28 <st7920_drawChar+0x9c>
    {
        for (uint8_t col = 0; col < 7; col++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
 80019ba:	e02f      	b.n	8001a1c <st7920_drawChar+0x90>
        {
        	uint8_t fontByte = fontdata[charIndex][col];
 80019bc:	7b7a      	ldrb	r2, [r7, #13]
 80019be:	7bb9      	ldrb	r1, [r7, #14]
 80019c0:	481d      	ldr	r0, [pc, #116]	@ (8001a38 <st7920_drawChar+0xac>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	4403      	add	r3, r0
 80019ca:	440b      	add	r3, r1
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	733b      	strb	r3, [r7, #12]
        	if (fontByte & (1 << (4 - row)))
 80019d0:	7b3a      	ldrb	r2, [r7, #12]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f1c3 0304 	rsb	r3, r3, #4
 80019d8:	fa42 f303 	asr.w	r3, r2, r3
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00c      	beq.n	80019fe <st7920_drawChar+0x72>
            {
                st7920_drawPixel(x + row, y + col, 1);
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4413      	add	r3, r2
 80019ea:	b2d8      	uxtb	r0, r3
 80019ec:	79ba      	ldrb	r2, [r7, #6]
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	4413      	add	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff ff1c 	bl	8001834 <st7920_drawPixel>
 80019fc:	e00b      	b.n	8001a16 <st7920_drawChar+0x8a>
            } else {
            	st7920_drawPixel(x + row, y + col, 0);
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	4413      	add	r3, r2
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	79ba      	ldrb	r2, [r7, #6]
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff ff0f 	bl	8001834 <st7920_drawPixel>
        for (uint8_t col = 0; col < 7; col++)
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73bb      	strb	r3, [r7, #14]
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d9cc      	bls.n	80019bc <st7920_drawChar+0x30>
    for (uint8_t row = 0; row < 5; row++)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d9c3      	bls.n	80019b6 <st7920_drawChar+0x2a>
 8001a2e:	e000      	b.n	8001a32 <st7920_drawChar+0xa6>
	if (c < 32 || c > 126) return;
 8001a30:	bf00      	nop
            }
        }
    }
}
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	0801d694 	.word	0x0801d694

08001a3c <st7920_print>:

void st7920_print(uint8_t x, uint8_t y, const char* str)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	603a      	str	r2, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	71bb      	strb	r3, [r7, #6]
	while(*str)
 8001a4c:	e013      	b.n	8001a76 <st7920_print+0x3a>
	{
		st7920_drawChar(x, y, *str++);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	603a      	str	r2, [r7, #0]
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	79b9      	ldrb	r1, [r7, #6]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff96 	bl	800198c <st7920_drawChar>
		x+=6;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3306      	adds	r3, #6
 8001a64:	71fb      	strb	r3, [r7, #7]
		if(x > 122)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b7a      	cmp	r3, #122	@ 0x7a
 8001a6a:	d904      	bls.n	8001a76 <st7920_print+0x3a>
		{
			y+=8;
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	71bb      	strb	r3, [r7, #6]
			x=1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e7      	bne.n	8001a4e <st7920_print+0x12>
		}
	}
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <st7920_clear>:

void st7920_clear() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	memset(framebuffer, 0x00, sizeof(framebuffer));
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	2100      	movs	r1, #0
 8001a92:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <st7920_clear+0x14>)
 8001a94:	f019 fd74 	bl	801b580 <memset>
	//st7920_writeCmd(0x01);
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	240080a4 	.word	0x240080a4

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_MspInit+0x30>)
 8001aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aac:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_MspInit+0x30>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_MspInit+0x30>)
 8001ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	58024400 	.word	0x58024400

08001ad4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	22b8      	movs	r2, #184	@ 0xb8
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f019 fd43 	bl	801b580 <memset>
  if(hi2c->Instance==I2C1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <HAL_I2C_MspInit+0x15c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d146      	bne.n	8001b92 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b04:	f04f 0208 	mov.w	r2, #8
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f008 f896 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b26:	f7ff faaf 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b42      	ldr	r3, [pc, #264]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b30:	4a40      	ldr	r2, [pc, #256]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b60:	2304      	movs	r3, #4
 8001b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4832      	ldr	r0, [pc, #200]	@ (8001c38 <HAL_I2C_MspInit+0x164>)
 8001b6e:	f004 fe0d 	bl	800678c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b72:	4b30      	ldr	r3, [pc, #192]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b78:	4a2e      	ldr	r2, [pc, #184]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b82:	4b2c      	ldr	r3, [pc, #176]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b90:	e04a      	b.n	8001c28 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	@ (8001c3c <HAL_I2C_MspInit+0x168>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d145      	bne.n	8001c28 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b9c:	f04f 0208 	mov.w	r2, #8
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f008 f84a 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001bbe:	f7ff fa63 	bl	8001088 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be6:	2312      	movs	r3, #18
 8001be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c02:	4619      	mov	r1, r3
 8001c04:	480e      	ldr	r0, [pc, #56]	@ (8001c40 <HAL_I2C_MspInit+0x16c>)
 8001c06:	f004 fdc1 	bl	800678c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c10:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_I2C_MspInit+0x160>)
 8001c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	37e8      	adds	r7, #232	@ 0xe8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58020400 	.word	0x58020400
 8001c3c:	40005800 	.word	0x40005800
 8001c40:	58021400 	.word	0x58021400

08001c44 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0b8      	sub	sp, #224	@ 0xe0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	22b8      	movs	r2, #184	@ 0xb8
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f019 fc8b 	bl	801b580 <memset>
  if(hi2s->Instance==SPI1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_I2S_MspInit+0x148>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 8086 	bne.w	8001d82 <HAL_I2S_MspInit+0x13e>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001c86:	2310      	movs	r3, #16
 8001c88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c96:	23c0      	movs	r3, #192	@ 0xc0
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4618      	mov	r0, r3
 8001cae:	f007 ffcd 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001cb8:	f7ff f9e6 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cbc:	4b34      	ldr	r3, [pc, #208]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc2:	4a33      	ldr	r2, [pc, #204]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <HAL_I2S_MspInit+0x14c>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cf8:	2370      	movs	r3, #112	@ 0x70
 8001cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d10:	2305      	movs	r3, #5
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <HAL_I2S_MspInit+0x150>)
 8001d1e:	f004 fd35 	bl	800678c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d24:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <HAL_I2S_MspInit+0x158>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d2a:	2225      	movs	r2, #37	@ 0x25
 8001d2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d40:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d50:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d58:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d68:	f002 f91e 	bl	8003fa8 <HAL_DMA_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001d72:	f7ff f989 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d7a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d7c:	4a06      	ldr	r2, [pc, #24]	@ (8001d98 <HAL_I2S_MspInit+0x154>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	37e0      	adds	r7, #224	@ 0xe0
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40013000 	.word	0x40013000
 8001d90:	58024400 	.word	0x58024400
 8001d94:	58020000 	.word	0x58020000
 8001d98:	24000184 	.word	0x24000184
 8001d9c:	40020010 	.word	0x40020010

08001da0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0ba      	sub	sp, #232	@ 0xe8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	22b8      	movs	r2, #184	@ 0xb8
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f019 fbdd 	bl	801b580 <memset>
  if(huart->Instance==LPUART1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a4d      	ldr	r2, [pc, #308]	@ (8001f00 <HAL_UART_MspInit+0x160>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d147      	bne.n	8001e60 <HAL_UART_MspInit+0xc0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dd0:	f04f 0204 	mov.w	r2, #4
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de2:	f107 0318 	add.w	r3, r7, #24
 8001de6:	4618      	mov	r0, r3
 8001de8:	f007 ff30 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001df2:	f7ff f949 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001df6:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dfc:	4a41      	ldr	r2, [pc, #260]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e06:	4b3f      	ldr	r3, [pc, #252]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e24:	4b37      	ldr	r3, [pc, #220]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e56:	4619      	mov	r1, r3
 8001e58:	482b      	ldr	r0, [pc, #172]	@ (8001f08 <HAL_UART_MspInit+0x168>)
 8001e5a:	f004 fc97 	bl	800678c <HAL_GPIO_Init>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e5e:	e04b      	b.n	8001ef8 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==UART5)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_UART_MspInit+0x16c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d146      	bne.n	8001ef8 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e6a:	f04f 0202 	mov.w	r2, #2
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f007 fee3 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001e8c:	f7ff f8fc 	bl	8001088 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e90:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e96:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001e98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb4:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_UART_MspInit+0x164>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ecc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001ee6:	230e      	movs	r3, #14
 8001ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <HAL_UART_MspInit+0x170>)
 8001ef4:	f004 fc4a 	bl	800678c <HAL_GPIO_Init>
}
 8001ef8:	bf00      	nop
 8001efa:	37e8      	adds	r7, #232	@ 0xe8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	58000c00 	.word	0x58000c00
 8001f04:	58024400 	.word	0x58024400
 8001f08:	58020000 	.word	0x58020000
 8001f0c:	40005000 	.word	0x40005000
 8001f10:	58020400 	.word	0x58020400

08001f14 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0ba      	sub	sp, #232	@ 0xe8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	22b8      	movs	r2, #184	@ 0xb8
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f019 fb23 	bl	801b580 <memset>
  if(hsd->Instance==SDMMC1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a38      	ldr	r2, [pc, #224]	@ (8002020 <HAL_SD_MspInit+0x10c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d169      	bne.n	8002018 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f007 fe77 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001f64:	f7ff f890 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f68:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8c:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001faa:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_SD_MspInit+0x110>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fc2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480f      	ldr	r0, [pc, #60]	@ (8002028 <HAL_SD_MspInit+0x114>)
 8001fea:	f004 fbcf 	bl	800678c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002006:	230c      	movs	r3, #12
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <HAL_SD_MspInit+0x118>)
 8002014:	f004 fbba 	bl	800678c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	37e8      	adds	r7, #232	@ 0xe8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	52007000 	.word	0x52007000
 8002024:	58024400 	.word	0x58024400
 8002028:	58020800 	.word	0x58020800
 800202c:	58020c00 	.word	0x58020c00

08002030 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0b8      	sub	sp, #224	@ 0xe0
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	22b8      	movs	r2, #184	@ 0xb8
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f019 fa95 	bl	801b580 <memset>
  if(hspi->Instance==SPI4)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a26      	ldr	r2, [pc, #152]	@ (80020f4 <HAL_SPI_MspInit+0xc4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d144      	bne.n	80020ea <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4618      	mov	r0, r3
 8002076:	f007 fde9 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002080:	f7ff f802 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 8002086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208a:	4a1b      	ldr	r2, [pc, #108]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 800208c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002090:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 8002096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020d8:	2305      	movs	r3, #5
 80020da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020de:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	@ (80020fc <HAL_SPI_MspInit+0xcc>)
 80020e6:	f004 fb51 	bl	800678c <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80020ea:	bf00      	nop
 80020ec:	37e0      	adds	r7, #224	@ 0xe0
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013400 	.word	0x40013400
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58021000 	.word	0x58021000

08002100 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_TIM_Base_MspInit+0x3c>)
 8002114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002118:	4a08      	ldr	r2, [pc, #32]	@ (800213c <HAL_TIM_Base_MspInit+0x3c>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_TIM_Base_MspInit+0x3c>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	58024400 	.word	0x58024400

08002140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d11e      	bne.n	80021a0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_TIM_MspPostInit+0x68>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <HAL_TIM_MspPostInit+0x68>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_TIM_MspPostInit+0x68>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002180:	2303      	movs	r3, #3
 8002182:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002190:	2301      	movs	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4619      	mov	r1, r3
 800219a:	4804      	ldr	r0, [pc, #16]	@ (80021ac <HAL_TIM_MspPostInit+0x6c>)
 800219c:	f004 faf6 	bl	800678c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58020000 	.word	0x58020000

080021b0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0b2      	sub	sp, #200	@ 0xc8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	22b8      	movs	r2, #184	@ 0xb8
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f019 f9dd 	bl	801b580 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <HAL_PCD_MspInit+0x84>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d12c      	bne.n	800222a <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f007 fd2f 	bl	8009c4c <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80021f4:	f7fe ff48 	bl	8001088 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80021f8:	f006 fdb2 	bl	8008d60 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_PCD_MspInit+0x88>)
 80021fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002202:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_PCD_MspInit+0x88>)
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002208:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_PCD_MspInit+0x88>)
 800220e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	204d      	movs	r0, #77	@ 0x4d
 8002220:	f001 fe8d 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002224:	204d      	movs	r0, #77	@ 0x4d
 8002226:	f001 fea4 	bl	8003f72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800222a:	bf00      	nop
 800222c:	37c8      	adds	r7, #200	@ 0xc8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40040000 	.word	0x40040000
 8002238:	58024400 	.word	0x58024400

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002292:	f001 fd35 	bl	8003d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}

0800229a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ir_sensor_Pin);
 800229e:	2008      	movs	r0, #8
 80022a0:	f004 fc35 	bl	8006b0e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <DMA1_Stream0_IRQHandler+0x10>)
 80022ae:	f002 ff5b 	bl	8005168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	24000184 	.word	0x24000184

080022bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	//tud_int_handler(0);
	//return;
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <OTG_HS_IRQHandler+0x10>)
 80022c2:	f005 fdb3 	bl	8007e2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	24000474 	.word	0x24000474

080022d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e00a      	b.n	80022f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e2:	f3af 8000 	nop.w
 80022e6:	4601      	mov	r1, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf0      	blt.n	80022e2 <_read+0x12>
  }

  return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e009      	b.n	8002330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf1      	blt.n	800231c <_write+0x12>
  }
  return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_close>:

int _close(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800236a:	605a      	str	r2, [r3, #4]
  return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_isatty>:

int _isatty(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f019 f934 	bl	801b648 <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	24050000 	.word	0x24050000
 800240c:	00004000 	.word	0x00004000
 8002410:	240084a4 	.word	0x240084a4
 8002414:	24008658 	.word	0x24008658

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800241c:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <SystemInit+0x100>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <SystemInit+0x100>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <SystemInit+0x104>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	2b06      	cmp	r3, #6
 8002436:	d807      	bhi.n	8002448 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002438:	4b38      	ldr	r3, [pc, #224]	@ (800251c <SystemInit+0x104>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 030f 	bic.w	r3, r3, #15
 8002440:	4a36      	ldr	r2, [pc, #216]	@ (800251c <SystemInit+0x104>)
 8002442:	f043 0307 	orr.w	r3, r3, #7
 8002446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002448:	4b35      	ldr	r3, [pc, #212]	@ (8002520 <SystemInit+0x108>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a34      	ldr	r2, [pc, #208]	@ (8002520 <SystemInit+0x108>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002454:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <SystemInit+0x108>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800245a:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <SystemInit+0x108>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4930      	ldr	r1, [pc, #192]	@ (8002520 <SystemInit+0x108>)
 8002460:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <SystemInit+0x10c>)
 8002462:	4013      	ands	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <SystemInit+0x104>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <SystemInit+0x104>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 030f 	bic.w	r3, r3, #15
 800247a:	4a28      	ldr	r2, [pc, #160]	@ (800251c <SystemInit+0x104>)
 800247c:	f043 0307 	orr.w	r3, r3, #7
 8002480:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002482:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <SystemInit+0x108>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002488:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <SystemInit+0x108>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800248e:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <SystemInit+0x108>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <SystemInit+0x108>)
 8002496:	4a24      	ldr	r2, [pc, #144]	@ (8002528 <SystemInit+0x110>)
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <SystemInit+0x108>)
 800249c:	4a23      	ldr	r2, [pc, #140]	@ (800252c <SystemInit+0x114>)
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <SystemInit+0x108>)
 80024a2:	4a23      	ldr	r2, [pc, #140]	@ (8002530 <SystemInit+0x118>)
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <SystemInit+0x108>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <SystemInit+0x108>)
 80024ae:	4a20      	ldr	r2, [pc, #128]	@ (8002530 <SystemInit+0x118>)
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <SystemInit+0x108>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <SystemInit+0x108>)
 80024ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <SystemInit+0x118>)
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024be:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <SystemInit+0x108>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024c4:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <SystemInit+0x108>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <SystemInit+0x108>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <SystemInit+0x108>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <SystemInit+0x108>)
 80024d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d113      	bne.n	800250c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <SystemInit+0x108>)
 80024e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <SystemInit+0x108>)
 80024ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <SystemInit+0x11c>)
 80024f6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024fa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <SystemInit+0x108>)
 80024fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002502:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <SystemInit+0x108>)
 8002504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002508:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	52002000 	.word	0x52002000
 8002520:	58024400 	.word	0x58024400
 8002524:	eaf6ed7f 	.word	0xeaf6ed7f
 8002528:	02020200 	.word	0x02020200
 800252c:	01ff0000 	.word	0x01ff0000
 8002530:	01010280 	.word	0x01010280
 8002534:	52004000 	.word	0x52004000

08002538 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <ExitRun0Mode+0x2c>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <ExitRun0Mode+0x2c>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002548:	bf00      	nop
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <ExitRun0Mode+0x2c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f9      	beq.n	800254a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	58024800 	.word	0x58024800

08002568 <my_printf>:
{
 8002568:	b40f      	push	{r0, r1, r2, r3}
 800256a:	b580      	push	{r7, lr}
 800256c:	b0c2      	sub	sp, #264	@ 0x108
 800256e:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002570:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800257c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800257e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002586:	f107 0008 	add.w	r0, r7, #8
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002590:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002594:	f018 ff52 	bl	801b43c <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002598:	f107 0308 	add.w	r3, r7, #8
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd feb7 	bl	8000310 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f107 0108 	add.w	r1, r7, #8
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <my_printf+0x5c>)
 80025b0:	f00c fff2 	bl	800f598 <HAL_UART_Transmit>
}
 80025b4:	bf00      	nop
 80025b6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80025ba:	46bd      	mov	sp, r7
 80025bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025c0:	b004      	add	sp, #16
 80025c2:	4770      	bx	lr
 80025c4:	240001fc 	.word	0x240001fc

080025c8 <i2c_set_slave_address>:

extern I2C_HandleTypeDef hi2c1;

uint8_t i2c_addr = 0;

void i2c_set_slave_address(uint8_t addr) {
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
    i2c_addr = addr;
 80025d2:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <i2c_set_slave_address+0x1c>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	7013      	strb	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	240084a9 	.word	0x240084a9

080025e8 <i2c_read_addr8_data8>:

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <i2c_read_addr8_data8+0x70>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	b299      	uxth	r1, r3
 80025fc:	1dfa      	adds	r2, r7, #7
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2301      	movs	r3, #1
 8002606:	4815      	ldr	r0, [pc, #84]	@ (800265c <i2c_read_addr8_data8+0x74>)
 8002608:	f004 fb38 	bl	8006c7c <HAL_I2C_Master_Transmit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <i2c_read_addr8_data8+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4619      	mov	r1, r3
 8002616:	4812      	ldr	r0, [pc, #72]	@ (8002660 <i2c_read_addr8_data8+0x78>)
 8002618:	f7ff ffa6 	bl	8002568 <my_printf>
        return false;
 800261c:	2300      	movs	r3, #0
 800261e:	e016      	b.n	800264e <i2c_read_addr8_data8+0x66>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002620:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <i2c_read_addr8_data8+0x70>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	b299      	uxth	r1, r3
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2301      	movs	r3, #1
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	480a      	ldr	r0, [pc, #40]	@ (800265c <i2c_read_addr8_data8+0x74>)
 8002634:	f004 fc3a 	bl	8006eac <HAL_I2C_Master_Receive>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <i2c_read_addr8_data8+0x64>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4619      	mov	r1, r3
 8002642:	4808      	ldr	r0, [pc, #32]	@ (8002664 <i2c_read_addr8_data8+0x7c>)
 8002644:	f7ff ff90 	bl	8002568 <my_printf>
        return false;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <i2c_read_addr8_data8+0x66>
    }
    return true;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240084a9 	.word	0x240084a9
 800265c:	24000088 	.word	0x24000088
 8002660:	0801c798 	.word	0x0801c798
 8002664:	0801c7dc 	.word	0x0801c7dc

08002668 <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af02      	add	r7, sp, #8
 800266e:	4603      	mov	r3, r0
 8002670:	460a      	mov	r2, r1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	4613      	mov	r3, r2
 8002676:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	733b      	strb	r3, [r7, #12]
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <i2c_write_addr8_data8+0x54>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	b299      	uxth	r1, r3
 8002688:	f107 020c 	add.w	r2, r7, #12
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2302      	movs	r3, #2
 8002694:	480a      	ldr	r0, [pc, #40]	@ (80026c0 <i2c_write_addr8_data8+0x58>)
 8002696:	f004 faf1 	bl	8006c7c <HAL_I2C_Master_Transmit>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <i2c_write_addr8_data8+0x4a>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, i2c_addr);
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4a06      	ldr	r2, [pc, #24]	@ (80026bc <i2c_write_addr8_data8+0x54>)
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <i2c_write_addr8_data8+0x5c>)
 80026aa:	f7ff ff5d 	bl	8002568 <my_printf>
        return false;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <i2c_write_addr8_data8+0x4c>
    }
    return true;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	240084a9 	.word	0x240084a9
 80026c0:	24000088 	.word	0x24000088
 80026c4:	0801c8ac 	.word	0x0801c8ac

080026c8 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <i2c_read_addr8_data32+0x8c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	b299      	uxth	r1, r3
 80026dc:	1dfa      	adds	r2, r7, #7
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	481c      	ldr	r0, [pc, #112]	@ (8002758 <i2c_read_addr8_data32+0x90>)
 80026e8:	f004 fac8 	bl	8006c7c <HAL_I2C_Master_Transmit>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <i2c_read_addr8_data32+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4819      	ldr	r0, [pc, #100]	@ (800275c <i2c_read_addr8_data32+0x94>)
 80026f8:	f7ff ff36 	bl	8002568 <my_printf>
        return false;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e024      	b.n	800274a <i2c_read_addr8_data32+0x82>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <i2c_read_addr8_data32+0x8c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	b299      	uxth	r1, r3
 8002708:	f107 020c 	add.w	r2, r7, #12
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2304      	movs	r3, #4
 8002714:	4810      	ldr	r0, [pc, #64]	@ (8002758 <i2c_read_addr8_data32+0x90>)
 8002716:	f004 fbc9 	bl	8006eac <HAL_I2C_Master_Receive>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <i2c_read_addr8_data32+0x66>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4619      	mov	r1, r3
 8002724:	480e      	ldr	r0, [pc, #56]	@ (8002760 <i2c_read_addr8_data32+0x98>)
 8002726:	f7ff ff1f 	bl	8002568 <my_printf>
        return false;
 800272a:	2300      	movs	r3, #0
 800272c:	e00d      	b.n	800274a <i2c_read_addr8_data32+0x82>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800272e:	7b3b      	ldrb	r3, [r7, #12]
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	7b7b      	ldrb	r3, [r7, #13]
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	4313      	orrs	r3, r2
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	4313      	orrs	r3, r2
 8002742:	461a      	mov	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	601a      	str	r2, [r3, #0]
    return true;
 8002748:	2301      	movs	r3, #1
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	240084a9 	.word	0x240084a9
 8002758:	24000088 	.word	0x24000088
 800275c:	0801c900 	.word	0x0801c900
 8002760:	0801c948 	.word	0x0801c948

08002764 <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 8002764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002768:	b087      	sub	sp, #28
 800276a:	af02      	add	r7, sp, #8
 800276c:	4603      	mov	r3, r0
 800276e:	6039      	str	r1, [r7, #0]
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	4613      	mov	r3, r2
 8002774:	71bb      	strb	r3, [r7, #6]
 8002776:	466b      	mov	r3, sp
 8002778:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 800277a:	79bb      	ldrb	r3, [r7, #6]
 800277c:	1c59      	adds	r1, r3, #1
 800277e:	1e4b      	subs	r3, r1, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	460a      	mov	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	4690      	mov	r8, r2
 8002788:	4699      	mov	r9, r3
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279e:	460a      	mov	r2, r1
 80027a0:	2300      	movs	r3, #0
 80027a2:	4614      	mov	r4, r2
 80027a4:	461d      	mov	r5, r3
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	00eb      	lsls	r3, r5, #3
 80027b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b4:	00e2      	lsls	r2, r4, #3
 80027b6:	460b      	mov	r3, r1
 80027b8:	3307      	adds	r3, #7
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	ebad 0d03 	sub.w	sp, sp, r3
 80027c2:	ab02      	add	r3, sp, #8
 80027c4:	3300      	adds	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	79fa      	ldrb	r2, [r7, #7]
 80027cc:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	79ba      	ldrb	r2, [r7, #6]
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f018 ff63 	bl	801b6a2 <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 80027dc:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <i2c_write_addr8_bytes+0xb8>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	b299      	uxth	r1, r3
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	480a      	ldr	r0, [pc, #40]	@ (8002820 <i2c_write_addr8_bytes+0xbc>)
 80027f6:	f004 fa41 	bl	8006c7c <HAL_I2C_Master_Transmit>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <i2c_write_addr8_bytes+0xaa>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4619      	mov	r1, r3
 8002804:	4807      	ldr	r0, [pc, #28]	@ (8002824 <i2c_write_addr8_bytes+0xc0>)
 8002806:	f7ff feaf 	bl	8002568 <my_printf>
        return false;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <i2c_write_addr8_bytes+0xac>
    }
    return true;
 800280e:	2301      	movs	r3, #1
 8002810:	46b5      	mov	sp, r6
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800281c:	240084a9 	.word	0x240084a9
 8002820:	24000088 	.word	0x24000088
 8002824:	0801c98c 	.word	0x0801c98c

08002828 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af02      	add	r7, sp, #8
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
 8002834:	4613      	mov	r3, r2
 8002836:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002838:	4b18      	ldr	r3, [pc, #96]	@ (800289c <i2c_read_addr8_bytes+0x74>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	b299      	uxth	r1, r3
 8002840:	1dfa      	adds	r2, r7, #7
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	4815      	ldr	r0, [pc, #84]	@ (80028a0 <i2c_read_addr8_bytes+0x78>)
 800284c:	f004 fa16 	bl	8006c7c <HAL_I2C_Master_Transmit>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <i2c_read_addr8_bytes+0x3c>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4619      	mov	r1, r3
 800285a:	4812      	ldr	r0, [pc, #72]	@ (80028a4 <i2c_read_addr8_bytes+0x7c>)
 800285c:	f7ff fe84 	bl	8002568 <my_printf>
        return false;
 8002860:	2300      	movs	r3, #0
 8002862:	e017      	b.n	8002894 <i2c_read_addr8_bytes+0x6c>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 8002864:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <i2c_read_addr8_bytes+0x74>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	b299      	uxth	r1, r3
 800286c:	79bb      	ldrb	r3, [r7, #6]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	9200      	str	r2, [sp, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <i2c_read_addr8_bytes+0x78>)
 800287a:	f004 fb17 	bl	8006eac <HAL_I2C_Master_Receive>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <i2c_read_addr8_bytes+0x6a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4619      	mov	r1, r3
 8002888:	4807      	ldr	r0, [pc, #28]	@ (80028a8 <i2c_read_addr8_bytes+0x80>)
 800288a:	f7ff fe6d 	bl	8002568 <my_printf>
        return false;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <i2c_read_addr8_bytes+0x6c>
    }
    return true;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	240084a9 	.word	0x240084a9
 80028a0:	24000088 	.word	0x24000088
 80028a4:	0801c9d0 	.word	0x0801c9d0
 80028a8:	0801ca14 	.word	0x0801ca14

080028ac <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 80028b2:	4813      	ldr	r0, [pc, #76]	@ (8002900 <device_is_booted+0x54>)
 80028b4:	f018 fcf0 	bl	801b298 <puts>
    uint8_t device_id = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 80028bc:	1dfb      	adds	r3, r7, #7
 80028be:	4619      	mov	r1, r3
 80028c0:	20c0      	movs	r0, #192	@ 0xc0
 80028c2:	f7ff fe91 	bl	80025e8 <i2c_read_addr8_data8>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4619      	mov	r1, r3
 80028d6:	480b      	ldr	r0, [pc, #44]	@ (8002904 <device_is_booted+0x58>)
 80028d8:	f018 fc76 	bl	801b1c8 <iprintf>
        return false;
 80028dc:	2300      	movs	r3, #0
 80028de:	e00a      	b.n	80028f6 <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4808      	ldr	r0, [pc, #32]	@ (8002908 <device_is_booted+0x5c>)
 80028e6:	f018 fc6f 	bl	801b1c8 <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2bee      	cmp	r3, #238	@ 0xee
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	0801ca58 	.word	0x0801ca58
 8002904:	0801ca70 	.word	0x0801ca70
 8002908:	0801ca88 	.word	0x0801ca88

0800290c <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
    bool success = false;
 8002912:	2300      	movs	r3, #0
 8002914:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 800291a:	1dbb      	adds	r3, r7, #6
 800291c:	4619      	mov	r1, r3
 800291e:	2089      	movs	r0, #137	@ 0x89
 8002920:	f7ff fe62 	bl	80025e8 <i2c_read_addr8_data8>
 8002924:	4603      	mov	r3, r0
 8002926:	f083 0301 	eor.w	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <data_init+0x28>
        return false;
 8002930:	2300      	movs	r3, #0
 8002932:	e073      	b.n	8002a1c <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	4619      	mov	r1, r3
 8002942:	2089      	movs	r0, #137	@ 0x89
 8002944:	f7ff fe90 	bl	8002668 <i2c_write_addr8_data8>
 8002948:	4603      	mov	r3, r0
 800294a:	f083 0301 	eor.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <data_init+0x4c>
        return false;
 8002954:	2300      	movs	r3, #0
 8002956:	e061      	b.n	8002a1c <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8002958:	2100      	movs	r1, #0
 800295a:	2088      	movs	r0, #136	@ 0x88
 800295c:	f7ff fe84 	bl	8002668 <i2c_write_addr8_data8>
 8002960:	4603      	mov	r3, r0
 8002962:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002964:	2101      	movs	r1, #1
 8002966:	2080      	movs	r0, #128	@ 0x80
 8002968:	f7ff fe7e 	bl	8002668 <i2c_write_addr8_data8>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800297e:	2101      	movs	r1, #1
 8002980:	20ff      	movs	r0, #255	@ 0xff
 8002982:	f7ff fe71 	bl	8002668 <i2c_write_addr8_data8>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002998:	2100      	movs	r1, #0
 800299a:	2000      	movs	r0, #0
 800299c:	f7ff fe64 	bl	8002668 <i2c_write_addr8_data8>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 80029b2:	491c      	ldr	r1, [pc, #112]	@ (8002a24 <data_init+0x118>)
 80029b4:	2091      	movs	r0, #145	@ 0x91
 80029b6:	f7ff fe17 	bl	80025e8 <i2c_read_addr8_data8>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80029cc:	2101      	movs	r1, #1
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff fe4a 	bl	8002668 <i2c_write_addr8_data8>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80029e6:	2100      	movs	r1, #0
 80029e8:	20ff      	movs	r0, #255	@ 0xff
 80029ea:	f7ff fe3d 	bl	8002668 <i2c_write_addr8_data8>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8002a00:	2100      	movs	r1, #0
 8002a02:	2080      	movs	r0, #128	@ 0x80
 8002a04:	f7ff fe30 	bl	8002668 <i2c_write_addr8_data8>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]

    return success;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	240084a8 	.word	0x240084a8

08002a28 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
    bool success = false;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 8002a36:	2100      	movs	r1, #0
 8002a38:	2083      	movs	r0, #131	@ 0x83
 8002a3a:	f7ff fe15 	bl	8002668 <i2c_write_addr8_data8>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <read_strobe+0x26>
        return false;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e021      	b.n	8002a92 <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 8002a4e:	1dbb      	adds	r3, r7, #6
 8002a50:	4619      	mov	r1, r3
 8002a52:	2083      	movs	r0, #131	@ 0x83
 8002a54:	f7ff fdc8 	bl	80025e8 <i2c_read_addr8_data8>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <read_strobe+0x40>
 8002a62:	79bb      	ldrb	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f2      	beq.n	8002a4e <read_strobe+0x26>
    if (!success) {
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f083 0301 	eor.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <read_strobe+0x50>
        return false;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e00c      	b.n	8002a92 <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2083      	movs	r0, #131	@ 0x83
 8002a7c:	f7ff fdf4 	bl	8002668 <i2c_write_addr8_data8>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <read_strobe+0x68>
        return false;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <read_strobe+0x6a>
    }
    return true;
 8002a90:	2301      	movs	r3, #1
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
    bool success = false;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	2080      	movs	r0, #128	@ 0x80
 8002ab6:	f7ff fdd7 	bl	8002668 <i2c_write_addr8_data8>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002abe:	2101      	movs	r1, #1
 8002ac0:	20ff      	movs	r0, #255	@ 0xff
 8002ac2:	f7ff fdd1 	bl	8002668 <i2c_write_addr8_data8>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7ff fdc4 	bl	8002668 <i2c_write_addr8_data8>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 8002af2:	2106      	movs	r1, #6
 8002af4:	20ff      	movs	r0, #255	@ 0xff
 8002af6:	f7ff fdb7 	bl	8002668 <i2c_write_addr8_data8>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 8002b0c:	f107 0316 	add.w	r3, r7, #22
 8002b10:	4619      	mov	r1, r3
 8002b12:	2083      	movs	r0, #131	@ 0x83
 8002b14:	f7ff fd68 	bl	80025e8 <i2c_read_addr8_data8>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 8002b2a:	7dbb      	ldrb	r3, [r7, #22]
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	2083      	movs	r0, #131	@ 0x83
 8002b36:	f7ff fd97 	bl	8002668 <i2c_write_addr8_data8>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 8002b4c:	2107      	movs	r1, #7
 8002b4e:	20ff      	movs	r0, #255	@ 0xff
 8002b50:	f7ff fd8a 	bl	8002668 <i2c_write_addr8_data8>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8002b66:	2101      	movs	r1, #1
 8002b68:	2081      	movs	r0, #129	@ 0x81
 8002b6a:	f7ff fd7d 	bl	8002668 <i2c_write_addr8_data8>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002b80:	2101      	movs	r1, #1
 8002b82:	2080      	movs	r0, #128	@ 0x80
 8002b84:	f7ff fd70 	bl	8002668 <i2c_write_addr8_data8>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	f083 0301 	eor.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <get_spad_info_from_nvm+0x110>
      return false;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e0c1      	b.n	8002d2e <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 8002baa:	216b      	movs	r1, #107	@ 0x6b
 8002bac:	2094      	movs	r0, #148	@ 0x94
 8002bae:	f7ff fd5b 	bl	8002668 <i2c_write_addr8_data8>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <get_spad_info_from_nvm+0x13a>
        return false;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e0ac      	b.n	8002d2e <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 8002bd4:	f7ff ff28 	bl	8002a28 <read_strobe>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <get_spad_info_from_nvm+0x14e>
        return false;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e0a2      	b.n	8002d2e <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	2090      	movs	r0, #144	@ 0x90
 8002bf0:	f7ff fd6a 	bl	80026c8 <i2c_read_addr8_data32>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <get_spad_info_from_nvm+0x17c>
        return false;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e08b      	b.n	8002d2e <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	0bdb      	lsrs	r3, r3, #15
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 8002c36:	2100      	movs	r1, #0
 8002c38:	2081      	movs	r0, #129	@ 0x81
 8002c3a:	f7ff fd15 	bl	8002668 <i2c_write_addr8_data8>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002c50:	2106      	movs	r1, #6
 8002c52:	20ff      	movs	r0, #255	@ 0xff
 8002c54:	f7ff fd08 	bl	8002668 <i2c_write_addr8_data8>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 8002c6a:	f107 0316 	add.w	r3, r7, #22
 8002c6e:	4619      	mov	r1, r3
 8002c70:	2083      	movs	r0, #131	@ 0x83
 8002c72:	f7ff fcb9 	bl	80025e8 <i2c_read_addr8_data8>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8002c88:	7dbb      	ldrb	r3, [r7, #22]
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	2083      	movs	r0, #131	@ 0x83
 8002c94:	f7ff fce8 	bl	8002668 <i2c_write_addr8_data8>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 8002caa:	2101      	movs	r1, #1
 8002cac:	20ff      	movs	r0, #255	@ 0xff
 8002cae:	f7ff fcdb 	bl	8002668 <i2c_write_addr8_data8>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7ff fcce 	bl	8002668 <i2c_write_addr8_data8>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	20ff      	movs	r0, #255	@ 0xff
 8002ce2:	f7ff fcc1 	bl	8002668 <i2c_write_addr8_data8>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2080      	movs	r0, #128	@ 0x80
 8002cfc:	f7ff fcb4 	bl	8002668 <i2c_write_addr8_data8>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8002d12:	2206      	movs	r2, #6
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	20b0      	movs	r0, #176	@ 0xb0
 8002d18:	f7ff fd86 	bl	8002828 <i2c_read_addr8_bytes>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <get_spad_info_from_nvm+0x292>
        return false;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <get_spad_info_from_nvm+0x294>
    }
    return success;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b08c      	sub	sp, #48	@ 0x30
 8002d3a:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002d3c:	f107 0310 	add.w	r3, r7, #16
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	1db9      	adds	r1, r7, #6
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe95 	bl	8002a9a <get_spad_info_from_nvm>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <set_spads_from_nvm+0x4a>
        return false;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e0c7      	b.n	8002f10 <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d84:	e00b      	b.n	8002d9e <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 8002d86:	f107 0208 	add.w	r2, r7, #8
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	ddf0      	ble.n	8002d86 <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002da4:	2101      	movs	r1, #1
 8002da6:	20ff      	movs	r0, #255	@ 0xff
 8002da8:	f7ff fc5e 	bl	8002668 <i2c_write_addr8_data8>
 8002dac:	4603      	mov	r3, r0
 8002dae:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002db0:	2100      	movs	r1, #0
 8002db2:	204f      	movs	r0, #79	@ 0x4f
 8002db4:	f7ff fc58 	bl	8002668 <i2c_write_addr8_data8>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002dca:	212c      	movs	r1, #44	@ 0x2c
 8002dcc:	204e      	movs	r0, #78	@ 0x4e
 8002dce:	f7ff fc4b 	bl	8002668 <i2c_write_addr8_data8>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002de4:	2100      	movs	r1, #0
 8002de6:	20ff      	movs	r0, #255	@ 0xff
 8002de8:	f7ff fc3e 	bl	8002668 <i2c_write_addr8_data8>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8002dfe:	21b4      	movs	r1, #180	@ 0xb4
 8002e00:	20b6      	movs	r0, #182	@ 0xb6
 8002e02:	f7ff fc31 	bl	8002668 <i2c_write_addr8_data8>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <set_spads_from_nvm+0xf2>
        return false;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e073      	b.n	8002f10 <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8002e28:	79bb      	ldrb	r3, [r7, #6]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <set_spads_from_nvm+0xfc>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	e000      	b.n	8002e34 <set_spads_from_nvm+0xfe>
 8002e32:	2300      	movs	r3, #0
 8002e34:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e04d      	b.n	8002ed8 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	e03d      	b.n	8002ebe <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	6a3a      	ldr	r2, [r7, #32]
 8002e48:	4413      	add	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002e50:	dd01      	ble.n	8002e56 <set_spads_from_nvm+0x120>
                return false;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e05c      	b.n	8002f10 <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d032      	beq.n	8002ec6 <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8002e60:	7fbb      	ldrb	r3, [r7, #30]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	db26      	blt.n	8002eb6 <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8002e68:	f107 0208 	add.w	r2, r7, #8
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	fa42 f303 	asr.w	r3, r2, r3
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01a      	beq.n	8002eb8 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 8002e82:	f107 0210 	add.w	r2, r7, #16
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b25a      	sxtb	r2, r3
 8002e8e:	2101      	movs	r1, #1
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	b2d9      	uxtb	r1, r3
 8002e9e:	f107 0210 	add.w	r2, r7, #16
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	4413      	add	r3, r2
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 8002eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002eb4:	e000      	b.n	8002eb8 <set_spads_from_nvm+0x182>
                continue;
 8002eb6:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2b07      	cmp	r3, #7
 8002ec2:	ddbe      	ble.n	8002e42 <set_spads_from_nvm+0x10c>
 8002ec4:	e000      	b.n	8002ec8 <set_spads_from_nvm+0x192>
                break;
 8002ec6:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d006      	beq.n	8002ee0 <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	ddae      	ble.n	8002e3c <set_spads_from_nvm+0x106>
 8002ede:	e000      	b.n	8002ee2 <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 8002ee0:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <set_spads_from_nvm+0x1ba>
        return false;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e00f      	b.n	8002f10 <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	2206      	movs	r2, #6
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	20b0      	movs	r0, #176	@ 0xb0
 8002efa:	f7ff fc33 	bl	8002764 <i2c_write_addr8_bytes>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <set_spads_from_nvm+0x1d8>
        return false;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <set_spads_from_nvm+0x1da>
    }

    return true;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3730      	adds	r7, #48	@ 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002f1e:	2101      	movs	r1, #1
 8002f20:	20ff      	movs	r0, #255	@ 0xff
 8002f22:	f7ff fba1 	bl	8002668 <i2c_write_addr8_data8>
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7ff fb9b 	bl	8002668 <i2c_write_addr8_data8>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002f44:	2100      	movs	r1, #0
 8002f46:	20ff      	movs	r0, #255	@ 0xff
 8002f48:	f7ff fb8e 	bl	8002668 <i2c_write_addr8_data8>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8002f5e:	2100      	movs	r1, #0
 8002f60:	2009      	movs	r0, #9
 8002f62:	f7ff fb81 	bl	8002668 <i2c_write_addr8_data8>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2010      	movs	r0, #16
 8002f7c:	f7ff fb74 	bl	8002668 <i2c_write_addr8_data8>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8002f92:	2100      	movs	r1, #0
 8002f94:	2011      	movs	r0, #17
 8002f96:	f7ff fb67 	bl	8002668 <i2c_write_addr8_data8>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 8002fac:	2101      	movs	r1, #1
 8002fae:	2024      	movs	r0, #36	@ 0x24
 8002fb0:	f7ff fb5a 	bl	8002668 <i2c_write_addr8_data8>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 8002fc6:	21ff      	movs	r1, #255	@ 0xff
 8002fc8:	2025      	movs	r0, #37	@ 0x25
 8002fca:	f7ff fb4d 	bl	8002668 <i2c_write_addr8_data8>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2075      	movs	r0, #117	@ 0x75
 8002fe4:	f7ff fb40 	bl	8002668 <i2c_write_addr8_data8>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	20ff      	movs	r0, #255	@ 0xff
 8002ffe:	f7ff fb33 	bl	8002668 <i2c_write_addr8_data8>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 8003014:	212c      	movs	r1, #44	@ 0x2c
 8003016:	204e      	movs	r0, #78	@ 0x4e
 8003018:	f7ff fb26 	bl	8002668 <i2c_write_addr8_data8>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 800302e:	2100      	movs	r1, #0
 8003030:	2048      	movs	r0, #72	@ 0x48
 8003032:	f7ff fb19 	bl	8002668 <i2c_write_addr8_data8>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8003048:	2120      	movs	r1, #32
 800304a:	2030      	movs	r0, #48	@ 0x30
 800304c:	f7ff fb0c 	bl	8002668 <i2c_write_addr8_data8>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003062:	2100      	movs	r1, #0
 8003064:	20ff      	movs	r0, #255	@ 0xff
 8003066:	f7ff faff 	bl	8002668 <i2c_write_addr8_data8>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 800307c:	2109      	movs	r1, #9
 800307e:	2030      	movs	r0, #48	@ 0x30
 8003080:	f7ff faf2 	bl	8002668 <i2c_write_addr8_data8>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 8003096:	2100      	movs	r1, #0
 8003098:	2054      	movs	r0, #84	@ 0x54
 800309a:	f7ff fae5 	bl	8002668 <i2c_write_addr8_data8>
 800309e:	4603      	mov	r3, r0
 80030a0:	461a      	mov	r2, r3
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80030b0:	2104      	movs	r1, #4
 80030b2:	2031      	movs	r0, #49	@ 0x31
 80030b4:	f7ff fad8 	bl	8002668 <i2c_write_addr8_data8>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 80030ca:	2103      	movs	r1, #3
 80030cc:	2032      	movs	r0, #50	@ 0x32
 80030ce:	f7ff facb 	bl	8002668 <i2c_write_addr8_data8>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 80030e4:	2183      	movs	r1, #131	@ 0x83
 80030e6:	2040      	movs	r0, #64	@ 0x40
 80030e8:	f7ff fabe 	bl	8002668 <i2c_write_addr8_data8>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 80030fe:	2125      	movs	r1, #37	@ 0x25
 8003100:	2046      	movs	r0, #70	@ 0x46
 8003102:	f7ff fab1 	bl	8002668 <i2c_write_addr8_data8>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8003118:	2100      	movs	r1, #0
 800311a:	2060      	movs	r0, #96	@ 0x60
 800311c:	f7ff faa4 	bl	8002668 <i2c_write_addr8_data8>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 8003132:	2100      	movs	r1, #0
 8003134:	2027      	movs	r0, #39	@ 0x27
 8003136:	f7ff fa97 	bl	8002668 <i2c_write_addr8_data8>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 800314c:	2106      	movs	r1, #6
 800314e:	2050      	movs	r0, #80	@ 0x50
 8003150:	f7ff fa8a 	bl	8002668 <i2c_write_addr8_data8>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 8003166:	2100      	movs	r1, #0
 8003168:	2051      	movs	r0, #81	@ 0x51
 800316a:	f7ff fa7d 	bl	8002668 <i2c_write_addr8_data8>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 8003180:	2196      	movs	r1, #150	@ 0x96
 8003182:	2052      	movs	r0, #82	@ 0x52
 8003184:	f7ff fa70 	bl	8002668 <i2c_write_addr8_data8>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 800319a:	2108      	movs	r1, #8
 800319c:	2056      	movs	r0, #86	@ 0x56
 800319e:	f7ff fa63 	bl	8002668 <i2c_write_addr8_data8>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 80031b4:	2130      	movs	r1, #48	@ 0x30
 80031b6:	2057      	movs	r0, #87	@ 0x57
 80031b8:	f7ff fa56 	bl	8002668 <i2c_write_addr8_data8>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 80031ce:	2100      	movs	r1, #0
 80031d0:	2061      	movs	r0, #97	@ 0x61
 80031d2:	f7ff fa49 	bl	8002668 <i2c_write_addr8_data8>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 80031e8:	2100      	movs	r1, #0
 80031ea:	2062      	movs	r0, #98	@ 0x62
 80031ec:	f7ff fa3c 	bl	8002668 <i2c_write_addr8_data8>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 8003202:	2100      	movs	r1, #0
 8003204:	2064      	movs	r0, #100	@ 0x64
 8003206:	f7ff fa2f 	bl	8002668 <i2c_write_addr8_data8>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 800321c:	2100      	movs	r1, #0
 800321e:	2065      	movs	r0, #101	@ 0x65
 8003220:	f7ff fa22 	bl	8002668 <i2c_write_addr8_data8>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 8003236:	21a0      	movs	r1, #160	@ 0xa0
 8003238:	2066      	movs	r0, #102	@ 0x66
 800323a:	f7ff fa15 	bl	8002668 <i2c_write_addr8_data8>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003250:	2101      	movs	r1, #1
 8003252:	20ff      	movs	r0, #255	@ 0xff
 8003254:	f7ff fa08 	bl	8002668 <i2c_write_addr8_data8>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 800326a:	2132      	movs	r1, #50	@ 0x32
 800326c:	2022      	movs	r0, #34	@ 0x22
 800326e:	f7ff f9fb 	bl	8002668 <i2c_write_addr8_data8>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 8003284:	2114      	movs	r1, #20
 8003286:	2047      	movs	r0, #71	@ 0x47
 8003288:	f7ff f9ee 	bl	8002668 <i2c_write_addr8_data8>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 800329e:	21ff      	movs	r1, #255	@ 0xff
 80032a0:	2049      	movs	r0, #73	@ 0x49
 80032a2:	f7ff f9e1 	bl	8002668 <i2c_write_addr8_data8>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf14      	ite	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	2300      	moveq	r3, #0
 80032b6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 80032b8:	2100      	movs	r1, #0
 80032ba:	204a      	movs	r0, #74	@ 0x4a
 80032bc:	f7ff f9d4 	bl	8002668 <i2c_write_addr8_data8>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80032d2:	2100      	movs	r1, #0
 80032d4:	20ff      	movs	r0, #255	@ 0xff
 80032d6:	f7ff f9c7 	bl	8002668 <i2c_write_addr8_data8>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 80032ec:	210a      	movs	r1, #10
 80032ee:	207a      	movs	r0, #122	@ 0x7a
 80032f0:	f7ff f9ba 	bl	8002668 <i2c_write_addr8_data8>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 8003306:	2100      	movs	r1, #0
 8003308:	207b      	movs	r0, #123	@ 0x7b
 800330a:	f7ff f9ad 	bl	8002668 <i2c_write_addr8_data8>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 8003320:	2121      	movs	r1, #33	@ 0x21
 8003322:	2078      	movs	r0, #120	@ 0x78
 8003324:	f7ff f9a0 	bl	8002668 <i2c_write_addr8_data8>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800333a:	2101      	movs	r1, #1
 800333c:	20ff      	movs	r0, #255	@ 0xff
 800333e:	f7ff f993 	bl	8002668 <i2c_write_addr8_data8>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 8003354:	2134      	movs	r1, #52	@ 0x34
 8003356:	2023      	movs	r0, #35	@ 0x23
 8003358:	f7ff f986 	bl	8002668 <i2c_write_addr8_data8>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 800336e:	2100      	movs	r1, #0
 8003370:	2042      	movs	r0, #66	@ 0x42
 8003372:	f7ff f979 	bl	8002668 <i2c_write_addr8_data8>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8003388:	21ff      	movs	r1, #255	@ 0xff
 800338a:	2044      	movs	r0, #68	@ 0x44
 800338c:	f7ff f96c 	bl	8002668 <i2c_write_addr8_data8>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 80033a2:	2126      	movs	r1, #38	@ 0x26
 80033a4:	2045      	movs	r0, #69	@ 0x45
 80033a6:	f7ff f95f 	bl	8002668 <i2c_write_addr8_data8>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 80033bc:	2105      	movs	r1, #5
 80033be:	2046      	movs	r0, #70	@ 0x46
 80033c0:	f7ff f952 	bl	8002668 <i2c_write_addr8_data8>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 80033d6:	2140      	movs	r1, #64	@ 0x40
 80033d8:	2040      	movs	r0, #64	@ 0x40
 80033da:	f7ff f945 	bl	8002668 <i2c_write_addr8_data8>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 80033f0:	2106      	movs	r1, #6
 80033f2:	200e      	movs	r0, #14
 80033f4:	f7ff f938 	bl	8002668 <i2c_write_addr8_data8>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 800340a:	211a      	movs	r1, #26
 800340c:	2020      	movs	r0, #32
 800340e:	f7ff f92b 	bl	8002668 <i2c_write_addr8_data8>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 8003424:	2140      	movs	r1, #64	@ 0x40
 8003426:	2043      	movs	r0, #67	@ 0x43
 8003428:	f7ff f91e 	bl	8002668 <i2c_write_addr8_data8>
 800342c:	4603      	mov	r3, r0
 800342e:	461a      	mov	r2, r3
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800343e:	2100      	movs	r1, #0
 8003440:	20ff      	movs	r0, #255	@ 0xff
 8003442:	f7ff f911 	bl	8002668 <i2c_write_addr8_data8>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003458:	2103      	movs	r1, #3
 800345a:	2034      	movs	r0, #52	@ 0x34
 800345c:	f7ff f904 	bl	8002668 <i2c_write_addr8_data8>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 8003472:	2144      	movs	r1, #68	@ 0x44
 8003474:	2035      	movs	r0, #53	@ 0x35
 8003476:	f7ff f8f7 	bl	8002668 <i2c_write_addr8_data8>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800348c:	2101      	movs	r1, #1
 800348e:	20ff      	movs	r0, #255	@ 0xff
 8003490:	f7ff f8ea 	bl	8002668 <i2c_write_addr8_data8>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80034a6:	2104      	movs	r1, #4
 80034a8:	2031      	movs	r0, #49	@ 0x31
 80034aa:	f7ff f8dd 	bl	8002668 <i2c_write_addr8_data8>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 80034c0:	2109      	movs	r1, #9
 80034c2:	204b      	movs	r0, #75	@ 0x4b
 80034c4:	f7ff f8d0 	bl	8002668 <i2c_write_addr8_data8>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 80034da:	2105      	movs	r1, #5
 80034dc:	204c      	movs	r0, #76	@ 0x4c
 80034de:	f7ff f8c3 	bl	8002668 <i2c_write_addr8_data8>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 80034f4:	2104      	movs	r1, #4
 80034f6:	204d      	movs	r0, #77	@ 0x4d
 80034f8:	f7ff f8b6 	bl	8002668 <i2c_write_addr8_data8>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800350e:	2100      	movs	r1, #0
 8003510:	20ff      	movs	r0, #255	@ 0xff
 8003512:	f7ff f8a9 	bl	8002668 <i2c_write_addr8_data8>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 8003528:	2100      	movs	r1, #0
 800352a:	2044      	movs	r0, #68	@ 0x44
 800352c:	f7ff f89c 	bl	8002668 <i2c_write_addr8_data8>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 8003542:	2120      	movs	r1, #32
 8003544:	2045      	movs	r0, #69	@ 0x45
 8003546:	f7ff f88f 	bl	8002668 <i2c_write_addr8_data8>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 800355c:	2108      	movs	r1, #8
 800355e:	2047      	movs	r0, #71	@ 0x47
 8003560:	f7ff f882 	bl	8002668 <i2c_write_addr8_data8>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 8003576:	2128      	movs	r1, #40	@ 0x28
 8003578:	2048      	movs	r0, #72	@ 0x48
 800357a:	f7ff f875 	bl	8002668 <i2c_write_addr8_data8>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf14      	ite	ne
 800358a:	2301      	movne	r3, #1
 800358c:	2300      	moveq	r3, #0
 800358e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 8003590:	2100      	movs	r1, #0
 8003592:	2067      	movs	r0, #103	@ 0x67
 8003594:	f7ff f868 	bl	8002668 <i2c_write_addr8_data8>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 80035aa:	2104      	movs	r1, #4
 80035ac:	2070      	movs	r0, #112	@ 0x70
 80035ae:	f7ff f85b 	bl	8002668 <i2c_write_addr8_data8>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 80035c4:	2101      	movs	r1, #1
 80035c6:	2071      	movs	r0, #113	@ 0x71
 80035c8:	f7ff f84e 	bl	8002668 <i2c_write_addr8_data8>
 80035cc:	4603      	mov	r3, r0
 80035ce:	461a      	mov	r2, r3
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 80035de:	21fe      	movs	r1, #254	@ 0xfe
 80035e0:	2072      	movs	r0, #114	@ 0x72
 80035e2:	f7ff f841 	bl	8002668 <i2c_write_addr8_data8>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 80035f8:	2100      	movs	r1, #0
 80035fa:	2076      	movs	r0, #118	@ 0x76
 80035fc:	f7ff f834 	bl	8002668 <i2c_write_addr8_data8>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 8003612:	2100      	movs	r1, #0
 8003614:	2077      	movs	r0, #119	@ 0x77
 8003616:	f7ff f827 	bl	8002668 <i2c_write_addr8_data8>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800362c:	2101      	movs	r1, #1
 800362e:	20ff      	movs	r0, #255	@ 0xff
 8003630:	f7ff f81a 	bl	8002668 <i2c_write_addr8_data8>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 8003646:	2101      	movs	r1, #1
 8003648:	200d      	movs	r0, #13
 800364a:	f7ff f80d 	bl	8002668 <i2c_write_addr8_data8>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003660:	2100      	movs	r1, #0
 8003662:	20ff      	movs	r0, #255	@ 0xff
 8003664:	f7ff f800 	bl	8002668 <i2c_write_addr8_data8>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 800367a:	2101      	movs	r1, #1
 800367c:	2080      	movs	r0, #128	@ 0x80
 800367e:	f7fe fff3 	bl	8002668 <i2c_write_addr8_data8>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 8003694:	21f8      	movs	r1, #248	@ 0xf8
 8003696:	2001      	movs	r0, #1
 8003698:	f7fe ffe6 	bl	8002668 <i2c_write_addr8_data8>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80036ae:	2101      	movs	r1, #1
 80036b0:	20ff      	movs	r0, #255	@ 0xff
 80036b2:	f7fe ffd9 	bl	8002668 <i2c_write_addr8_data8>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 80036c8:	2101      	movs	r1, #1
 80036ca:	208e      	movs	r0, #142	@ 0x8e
 80036cc:	f7fe ffcc 	bl	8002668 <i2c_write_addr8_data8>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80036e2:	2101      	movs	r1, #1
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fe ffbf 	bl	8002668 <i2c_write_addr8_data8>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80036fc:	2100      	movs	r1, #0
 80036fe:	20ff      	movs	r0, #255	@ 0xff
 8003700:	f7fe ffb2 	bl	8002668 <i2c_write_addr8_data8>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8003716:	2100      	movs	r1, #0
 8003718:	2080      	movs	r0, #128	@ 0x80
 800371a:	f7fe ffa5 	bl	8002668 <i2c_write_addr8_data8>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf14      	ite	ne
 800372a:	2301      	movne	r3, #1
 800372c:	2300      	moveq	r3, #0
 800372e:	71fb      	strb	r3, [r7, #7]
    return success;
 8003730:	79fb      	ldrb	r3, [r7, #7]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <configure_interrupt>:

static bool configure_interrupt()
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 8003740:	2104      	movs	r1, #4
 8003742:	200a      	movs	r0, #10
 8003744:	f7fe ff90 	bl	8002668 <i2c_write_addr8_data8>
 8003748:	4603      	mov	r3, r0
 800374a:	f083 0301 	eor.w	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <configure_interrupt+0x1e>
        return false;
 8003754:	2300      	movs	r3, #0
 8003756:	e02d      	b.n	80037b4 <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	4619      	mov	r1, r3
 8003760:	2084      	movs	r0, #132	@ 0x84
 8003762:	f7fe ff41 	bl	80025e8 <i2c_read_addr8_data8>
 8003766:	4603      	mov	r3, r0
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <configure_interrupt+0x3c>
        return false;
 8003772:	2300      	movs	r3, #0
 8003774:	e01e      	b.n	80037b4 <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	f023 0310 	bic.w	r3, r3, #16
 800377c:	b2db      	uxtb	r3, r3
 800377e:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	4619      	mov	r1, r3
 8003784:	2084      	movs	r0, #132	@ 0x84
 8003786:	f7fe ff6f 	bl	8002668 <i2c_write_addr8_data8>
 800378a:	4603      	mov	r3, r0
 800378c:	f083 0301 	eor.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <configure_interrupt+0x60>
        return false;
 8003796:	2300      	movs	r3, #0
 8003798:	e00c      	b.n	80037b4 <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 800379a:	2101      	movs	r1, #1
 800379c:	200b      	movs	r0, #11
 800379e:	f7fe ff63 	bl	8002668 <i2c_write_addr8_data8>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <configure_interrupt+0x78>
        return false;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <configure_interrupt+0x7a>
    }
    return true;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4619      	mov	r1, r3
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7fe ff4c 	bl	8002668 <i2c_write_addr8_data8>
 80037d0:	4603      	mov	r3, r0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 80037de:	f7ff faaa 	bl	8002d36 <set_spads_from_nvm>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <static_init+0x18>
        return false;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e01f      	b.n	8003832 <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 80037f2:	f7ff fb91 	bl	8002f18 <load_default_tuning_settings>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f083 0301 	eor.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <static_init+0x2c>
        return false;
 8003802:	2300      	movs	r3, #0
 8003804:	e015      	b.n	8003832 <static_init+0x58>
    }

    if (!configure_interrupt()) {
 8003806:	f7ff ff98 	bl	800373a <configure_interrupt>
 800380a:	4603      	mov	r3, r0
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <static_init+0x40>
        return false;
 8003816:	2300      	movs	r3, #0
 8003818:	e00b      	b.n	8003832 <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800381a:	20e8      	movs	r0, #232	@ 0xe8
 800381c:	f7ff ffce 	bl	80037bc <set_sequence_steps_enabled>
 8003820:	4603      	mov	r3, r0
 8003822:	f083 0301 	eor.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <static_init+0x58>
    }

    return true;
 8003830:	2301      	movs	r3, #1
}
 8003832:	4618      	mov	r0, r3
 8003834:	bd80      	pop	{r7, pc}

08003836 <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <perform_single_ref_calibration+0x1e>
 800384e:	2b01      	cmp	r3, #1
 8003850:	d005      	beq.n	800385e <perform_single_ref_calibration+0x28>
 8003852:	e009      	b.n	8003868 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8003854:	2301      	movs	r3, #1
 8003856:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003858:	2341      	movs	r3, #65	@ 0x41
 800385a:	73fb      	strb	r3, [r7, #15]
        break;
 800385c:	e004      	b.n	8003868 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 800385e:	2302      	movs	r3, #2
 8003860:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
        break;
 8003866:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8003868:	7bbb      	ldrb	r3, [r7, #14]
 800386a:	4619      	mov	r1, r3
 800386c:	2001      	movs	r0, #1
 800386e:	f7fe fefb 	bl	8002668 <i2c_write_addr8_data8>
 8003872:	4603      	mov	r3, r0
 8003874:	f083 0301 	eor.w	r3, r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <perform_single_ref_calibration+0x4c>
        return false;
 800387e:	2300      	movs	r3, #0
 8003880:	e041      	b.n	8003906 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	4619      	mov	r1, r3
 8003886:	2000      	movs	r0, #0
 8003888:	f7fe feee 	bl	8002668 <i2c_write_addr8_data8>
 800388c:	4603      	mov	r3, r0
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <perform_single_ref_calibration+0x66>
        return false;
 8003898:	2300      	movs	r3, #0
 800389a:	e034      	b.n	8003906 <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	733b      	strb	r3, [r7, #12]
    bool success = false;
 80038a0:	2300      	movs	r3, #0
 80038a2:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	4619      	mov	r1, r3
 80038aa:	2013      	movs	r0, #19
 80038ac:	f7fe fe9c 	bl	80025e8 <i2c_read_addr8_data8>
 80038b0:	4603      	mov	r3, r0
 80038b2:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 80038b4:	7b7b      	ldrb	r3, [r7, #13]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <perform_single_ref_calibration+0x8e>
 80038ba:	7b3b      	ldrb	r3, [r7, #12]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ef      	beq.n	80038a4 <perform_single_ref_calibration+0x6e>
    if (!success) {
 80038c4:	7b7b      	ldrb	r3, [r7, #13]
 80038c6:	f083 0301 	eor.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <perform_single_ref_calibration+0x9e>
        return false;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e018      	b.n	8003906 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80038d4:	2101      	movs	r1, #1
 80038d6:	200b      	movs	r0, #11
 80038d8:	f7fe fec6 	bl	8002668 <i2c_write_addr8_data8>
 80038dc:	4603      	mov	r3, r0
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <perform_single_ref_calibration+0xb6>
        return false;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e00c      	b.n	8003906 <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 80038ec:	2100      	movs	r1, #0
 80038ee:	2000      	movs	r0, #0
 80038f0:	f7fe feba 	bl	8002668 <i2c_write_addr8_data8>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f083 0301 	eor.w	r3, r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <perform_single_ref_calibration+0xce>
        return false;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <perform_single_ref_calibration+0xd0>
    }
    return true;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 800390e:	b580      	push	{r7, lr}
 8003910:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 8003912:	2000      	movs	r0, #0
 8003914:	f7ff ff8f 	bl	8003836 <perform_single_ref_calibration>
 8003918:	4603      	mov	r3, r0
 800391a:	f083 0301 	eor.w	r3, r3, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <perform_ref_calibration+0x1a>
        return false;
 8003924:	2300      	movs	r3, #0
 8003926:	e016      	b.n	8003956 <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 8003928:	2001      	movs	r0, #1
 800392a:	f7ff ff84 	bl	8003836 <perform_single_ref_calibration>
 800392e:	4603      	mov	r3, r0
 8003930:	f083 0301 	eor.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <perform_ref_calibration+0x30>
        return false;
 800393a:	2300      	movs	r3, #0
 800393c:	e00b      	b.n	8003956 <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800393e:	20e8      	movs	r0, #232	@ 0xe8
 8003940:	f7ff ff3c 	bl	80037bc <set_sequence_steps_enabled>
 8003944:	4603      	mov	r3, r0
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <perform_ref_calibration+0x48>
    }
    return true;
 8003954:	2301      	movs	r3, #1
}
 8003956:	4618      	mov	r0, r3
 8003958:	bd80      	pop	{r7, pc}

0800395a <configure_address>:

static bool configure_address(uint8_t addr)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
    /* 7-bit address */
    return i2c_write_addr8_data8(REG_SLAVE_DEVICE_ADDRESS, addr & 0x7F);
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	208a      	movs	r0, #138	@ 0x8a
 8003970:	f7fe fe7a 	bl	8002668 <i2c_write_addr8_data8>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <set_hardware_standby>:

/**
 * Sets the sensor in hardware standby by flipping the XSHUT pin.
 */
static void set_hardware_standby(vl53l0x_idx_t idx, bool enable)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	460a      	mov	r2, r1
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	4613      	mov	r3, r2
 800398e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOG, vl53l0x_infos[idx].xshut_gpio, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <set_hardware_standby+0x34>)
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	8859      	ldrh	r1, [r3, #2]
 800399a:	79bb      	ldrb	r3, [r7, #6]
 800399c:	f083 0301 	eor.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	4804      	ldr	r0, [pc, #16]	@ (80039b8 <set_hardware_standby+0x38>)
 80039a6:	f003 f899 	bl	8006adc <HAL_GPIO_WritePin>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	0801dbe4 	.word	0x0801dbe4
 80039b8:	58021800 	.word	0x58021800

080039bc <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    gpio_init();
    gpio_set_output(GPIO_XSHUT_FIRST, false);
    gpio_set_output(GPIO_XSHUT_SECOND, false);
    gpio_set_output(GPIO_XSHUT_THIRD, false);
    */
    HAL_GPIO_WritePin(GPIOG, xshut1_Pin, GPIO_PIN_RESET);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2120      	movs	r1, #32
 80039c4:	4809      	ldr	r0, [pc, #36]	@ (80039ec <configure_gpio+0x30>)
 80039c6:	f003 f889 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut2_Pin, GPIO_PIN_RESET);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2110      	movs	r1, #16
 80039ce:	4807      	ldr	r0, [pc, #28]	@ (80039ec <configure_gpio+0x30>)
 80039d0:	f003 f884 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut3_Pin, GPIO_PIN_RESET);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2108      	movs	r1, #8
 80039d8:	4804      	ldr	r0, [pc, #16]	@ (80039ec <configure_gpio+0x30>)
 80039da:	f003 f87f 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut4_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	2104      	movs	r1, #4
 80039e2:	4802      	ldr	r0, [pc, #8]	@ (80039ec <configure_gpio+0x30>)
 80039e4:	f003 f87a 	bl	8006adc <HAL_GPIO_WritePin>
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	58021800 	.word	0x58021800

080039f0 <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
    set_hardware_standby(idx, false);
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ffbe 	bl	8003980 <set_hardware_standby>
    i2c_set_slave_address(VL53L0X_DEFAULT_ADDRESS);
 8003a04:	2029      	movs	r0, #41	@ 0x29
 8003a06:	f7fe fddf 	bl	80025c8 <i2c_set_slave_address>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f000 f998 	bl	8003d40 <HAL_Delay>

    if (!device_is_booted()) {
 8003a10:	f7fe ff4c 	bl	80028ac <device_is_booted>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f083 0301 	eor.w	r3, r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <init_address+0x3a>
        my_printf("device is not booted\n");
 8003a20:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <init_address+0x68>)
 8003a22:	f7fe fda1 	bl	8002568 <my_printf>
        return false;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e012      	b.n	8003a50 <init_address+0x60>
    }

    if (!configure_address(vl53l0x_infos[idx].addr)) {
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a5c <init_address+0x6c>)
 8003a2e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff91 	bl	800395a <configure_address>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f083 0301 	eor.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <init_address+0x5e>
        my_printf("configure address failed\n");
 8003a44:	4806      	ldr	r0, [pc, #24]	@ (8003a60 <init_address+0x70>)
 8003a46:	f7fe fd8f 	bl	8002568 <my_printf>
        return false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <init_address+0x60>
    }
    return true;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	0801ca98 	.word	0x0801ca98
 8003a5c:	0801dbe4 	.word	0x0801dbe4
 8003a60:	0801cab0 	.word	0x0801cab0

08003a64 <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 8003a68:	f7ff ffa8 	bl	80039bc <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7ff ffbf 	bl	80039f0 <init_address>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 8003a7e:	4814      	ldr	r0, [pc, #80]	@ (8003ad0 <init_addresses+0x6c>)
 8003a80:	f7fe fd72 	bl	8002568 <my_printf>
        return false;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e021      	b.n	8003acc <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7ff ffb1 	bl	80039f0 <init_address>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f083 0301 	eor.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <init_addresses+0x3a>
        return false;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e016      	b.n	8003acc <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_THIRD)) {
 8003a9e:	2002      	movs	r0, #2
 8003aa0:	f7ff ffa6 	bl	80039f0 <init_address>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <init_addresses+0x50>
        return false;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e00b      	b.n	8003acc <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_FOURTH)) {
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f7ff ff9b 	bl	80039f0 <init_address>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f083 0301 	eor.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <init_addresses+0x66>
        return false;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <init_addresses+0x68>
    }
    return true;
 8003aca:	2301      	movs	r3, #1
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	0801cacc 	.word	0x0801cacc

08003ad4 <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
    i2c_set_slave_address(vl53l0x_infos[idx].addr);
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	4a14      	ldr	r2, [pc, #80]	@ (8003b34 <init_config+0x60>)
 8003ae2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fd6e 	bl	80025c8 <i2c_set_slave_address>
    if (!data_init()) {
 8003aec:	f7fe ff0e 	bl	800290c <data_init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f083 0301 	eor.w	r3, r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <init_config+0x2c>
        return false;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e014      	b.n	8003b2a <init_config+0x56>
    }
    if (!static_init()) {
 8003b00:	f7ff fe6b 	bl	80037da <static_init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <init_config+0x40>
        return false;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e00a      	b.n	8003b2a <init_config+0x56>
    }
    if (!perform_ref_calibration()) {
 8003b14:	f7ff fefb 	bl	800390e <perform_ref_calibration>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f083 0301 	eor.w	r3, r3, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <init_config+0x54>
        return false;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <init_config+0x56>
    }
    return true;
 8003b28:	2301      	movs	r3, #1
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	0801dbe4 	.word	0x0801dbe4

08003b38 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8003b3c:	f7ff ff92 	bl	8003a64 <init_addresses>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f083 0301 	eor.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8003b4c:	481b      	ldr	r0, [pc, #108]	@ (8003bbc <vl53l0x_init+0x84>)
 8003b4e:	f7fe fd0b 	bl	8002568 <my_printf>
        return false;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e02f      	b.n	8003bb6 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7ff ffbc 	bl	8003ad4 <init_config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f083 0301 	eor.w	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8003b68:	4815      	ldr	r0, [pc, #84]	@ (8003bc0 <vl53l0x_init+0x88>)
 8003b6a:	f7fe fcfd 	bl	8002568 <my_printf>
        return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e021      	b.n	8003bb6 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7ff ffae 	bl	8003ad4 <init_config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <vl53l0x_init+0x50>
        return false;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e016      	b.n	8003bb6 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_THIRD)) {
 8003b88:	2002      	movs	r0, #2
 8003b8a:	f7ff ffa3 	bl	8003ad4 <init_config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f083 0301 	eor.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <vl53l0x_init+0x66>
        return false;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e00b      	b.n	8003bb6 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FOURTH)) {
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	f7ff ff98 	bl	8003ad4 <init_config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <vl53l0x_init+0x7c>
        return false;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <vl53l0x_init+0x7e>
    }
    return true;
 8003bb4:	2301      	movs	r3, #1
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	0801caf0 	.word	0x0801caf0
 8003bc0:	0801cb04 	.word	0x0801cb04

08003bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003bc4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003c00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003bc8:	f7fe fcb6 	bl	8002538 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bcc:	f7fe fc24 	bl	8002418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bd0:	480c      	ldr	r0, [pc, #48]	@ (8003c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bd2:	490d      	ldr	r1, [pc, #52]	@ (8003c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd8:	e002      	b.n	8003be0 <LoopCopyDataInit>

08003bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bde:	3304      	adds	r3, #4

08003be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003be4:	d3f9      	bcc.n	8003bda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003be6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003be8:	4c0a      	ldr	r4, [pc, #40]	@ (8003c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bec:	e001      	b.n	8003bf2 <LoopFillZerobss>

08003bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bf0:	3204      	adds	r2, #4

08003bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bf4:	d3fb      	bcc.n	8003bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bf6:	f017 fd2d 	bl	801b654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bfa:	f7fc fdc7 	bl	800078c <main>
  bx  lr
 8003bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c00:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003c04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c08:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003c0c:	0802fcd4 	.word	0x0802fcd4
  ldr r2, =_sbss
 8003c10:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8003c14:	24008658 	.word	0x24008658

08003c18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c18:	e7fe      	b.n	8003c18 <ADC3_IRQHandler>
	...

08003c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c22:	2003      	movs	r0, #3
 8003c24:	f000 f980 	bl	8003f28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c28:	f005 fe3a 	bl	80098a0 <HAL_RCC_GetSysClockFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <HAL_Init+0x68>)
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	4913      	ldr	r1, [pc, #76]	@ (8003c88 <HAL_Init+0x6c>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c46:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <HAL_Init+0x68>)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c88 <HAL_Init+0x6c>)
 8003c50:	5cd3      	ldrb	r3, [r2, r3]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c8c <HAL_Init+0x70>)
 8003c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c60:	4a0b      	ldr	r2, [pc, #44]	@ (8003c90 <HAL_Init+0x74>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c66:	200f      	movs	r0, #15
 8003c68:	f000 f814 	bl	8003c94 <HAL_InitTick>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e002      	b.n	8003c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c76:	f7fd ff13 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	58024400 	.word	0x58024400
 8003c88:	0801dbd4 	.word	0x0801dbd4
 8003c8c:	24000004 	.word	0x24000004
 8003c90:	24000000 	.word	0x24000000

08003c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c9c:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_InitTick+0x60>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e021      	b.n	8003cec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <HAL_InitTick+0x64>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_InitTick+0x60>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f965 	bl	8003f8e <HAL_SYSTICK_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00e      	b.n	8003cec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d80a      	bhi.n	8003cea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	f000 f92f 	bl	8003f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce0:	4a06      	ldr	r2, [pc, #24]	@ (8003cfc <HAL_InitTick+0x68>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2400000c 	.word	0x2400000c
 8003cf8:	24000000 	.word	0x24000000
 8003cfc:	24000008 	.word	0x24000008

08003d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d04:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_IncTick+0x20>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_IncTick+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <HAL_IncTick+0x24>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2400000c 	.word	0x2400000c
 8003d24:	240084ac 	.word	0x240084ac

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	240084ac 	.word	0x240084ac

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff ffee 	bl	8003d28 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_Delay+0x44>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffde 	bl	8003d28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2400000c 	.word	0x2400000c

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00
 8003dcc:	05fa0000 	.word	0x05fa0000

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4907      	ldr	r1, [pc, #28]	@ (8003e24 <__NVIC_EnableIRQ+0x38>)
 8003e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	e000e100 	.word	0xe000e100

08003e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	6039      	str	r1, [r7, #0]
 8003e32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db0a      	blt.n	8003e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	490c      	ldr	r1, [pc, #48]	@ (8003e74 <__NVIC_SetPriority+0x4c>)
 8003e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e50:	e00a      	b.n	8003e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4908      	ldr	r1, [pc, #32]	@ (8003e78 <__NVIC_SetPriority+0x50>)
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	440b      	add	r3, r1
 8003e66:	761a      	strb	r2, [r3, #24]
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000e100 	.word	0xe000e100
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	@ 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f1c3 0307 	rsb	r3, r3, #7
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	bf28      	it	cs
 8003e9a:	2304      	movcs	r3, #4
 8003e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d902      	bls.n	8003eac <NVIC_EncodePriority+0x30>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3b03      	subs	r3, #3
 8003eaa:	e000      	b.n	8003eae <NVIC_EncodePriority+0x32>
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	43d9      	mvns	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	4313      	orrs	r3, r2
         );
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3724      	adds	r7, #36	@ 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef4:	d301      	bcc.n	8003efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00f      	b.n	8003f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003efa:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <SysTick_Config+0x40>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f02:	210f      	movs	r1, #15
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	f7ff ff8e 	bl	8003e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <SysTick_Config+0x40>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f12:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <SysTick_Config+0x40>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	e000e010 	.word	0xe000e010

08003f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff29 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f4c:	f7ff ff40 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f7ff ff90 	bl	8003e7c <NVIC_EncodePriority>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff5f 	bl	8003e28 <__NVIC_SetPriority>
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff33 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ffa4 	bl	8003ee4 <SysTick_Config>
 8003f9c:	4603      	mov	r3, r0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7ff feba 	bl	8003d28 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e312      	b.n	80045e6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a66      	ldr	r2, [pc, #408]	@ (8004160 <HAL_DMA_Init+0x1b8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04a      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a65      	ldr	r2, [pc, #404]	@ (8004164 <HAL_DMA_Init+0x1bc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d045      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a63      	ldr	r2, [pc, #396]	@ (8004168 <HAL_DMA_Init+0x1c0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d040      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a62      	ldr	r2, [pc, #392]	@ (800416c <HAL_DMA_Init+0x1c4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d03b      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a60      	ldr	r2, [pc, #384]	@ (8004170 <HAL_DMA_Init+0x1c8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d036      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8004174 <HAL_DMA_Init+0x1cc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d031      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5d      	ldr	r2, [pc, #372]	@ (8004178 <HAL_DMA_Init+0x1d0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02c      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5c      	ldr	r2, [pc, #368]	@ (800417c <HAL_DMA_Init+0x1d4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d027      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5a      	ldr	r2, [pc, #360]	@ (8004180 <HAL_DMA_Init+0x1d8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d022      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a59      	ldr	r2, [pc, #356]	@ (8004184 <HAL_DMA_Init+0x1dc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d01d      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a57      	ldr	r2, [pc, #348]	@ (8004188 <HAL_DMA_Init+0x1e0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a56      	ldr	r2, [pc, #344]	@ (800418c <HAL_DMA_Init+0x1e4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a54      	ldr	r2, [pc, #336]	@ (8004190 <HAL_DMA_Init+0x1e8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a53      	ldr	r2, [pc, #332]	@ (8004194 <HAL_DMA_Init+0x1ec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a51      	ldr	r2, [pc, #324]	@ (8004198 <HAL_DMA_Init+0x1f0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_DMA_Init+0xb8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a50      	ldr	r2, [pc, #320]	@ (800419c <HAL_DMA_Init+0x1f4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_DMA_Init+0xbc>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_DMA_Init+0xbe>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 813c 	beq.w	80042e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a37      	ldr	r2, [pc, #220]	@ (8004160 <HAL_DMA_Init+0x1b8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d04a      	beq.n	800411c <HAL_DMA_Init+0x174>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a36      	ldr	r2, [pc, #216]	@ (8004164 <HAL_DMA_Init+0x1bc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d045      	beq.n	800411c <HAL_DMA_Init+0x174>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a34      	ldr	r2, [pc, #208]	@ (8004168 <HAL_DMA_Init+0x1c0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d040      	beq.n	800411c <HAL_DMA_Init+0x174>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a33      	ldr	r2, [pc, #204]	@ (800416c <HAL_DMA_Init+0x1c4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d03b      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a31      	ldr	r2, [pc, #196]	@ (8004170 <HAL_DMA_Init+0x1c8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d036      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a30      	ldr	r2, [pc, #192]	@ (8004174 <HAL_DMA_Init+0x1cc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d031      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004178 <HAL_DMA_Init+0x1d0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d02c      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2d      	ldr	r2, [pc, #180]	@ (800417c <HAL_DMA_Init+0x1d4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d027      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004180 <HAL_DMA_Init+0x1d8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d022      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2a      	ldr	r2, [pc, #168]	@ (8004184 <HAL_DMA_Init+0x1dc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d01d      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a28      	ldr	r2, [pc, #160]	@ (8004188 <HAL_DMA_Init+0x1e0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d018      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a27      	ldr	r2, [pc, #156]	@ (800418c <HAL_DMA_Init+0x1e4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a25      	ldr	r2, [pc, #148]	@ (8004190 <HAL_DMA_Init+0x1e8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00e      	beq.n	800411c <HAL_DMA_Init+0x174>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a24      	ldr	r2, [pc, #144]	@ (8004194 <HAL_DMA_Init+0x1ec>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d009      	beq.n	800411c <HAL_DMA_Init+0x174>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a22      	ldr	r2, [pc, #136]	@ (8004198 <HAL_DMA_Init+0x1f0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_DMA_Init+0x174>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a21      	ldr	r2, [pc, #132]	@ (800419c <HAL_DMA_Init+0x1f4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <HAL_DMA_Init+0x186>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e007      	b.n	800413e <HAL_DMA_Init+0x196>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800413e:	e02f      	b.n	80041a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004140:	f7ff fdf2 	bl	8003d28 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b05      	cmp	r3, #5
 800414c:	d928      	bls.n	80041a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2203      	movs	r2, #3
 8004158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e242      	b.n	80045e6 <HAL_DMA_Init+0x63e>
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1c8      	bne.n	8004140 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4b83      	ldr	r3, [pc, #524]	@ (80043c8 <HAL_DMA_Init+0x420>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d107      	bne.n	8004204 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	4313      	orrs	r3, r2
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b28      	cmp	r3, #40	@ 0x28
 800420a:	d903      	bls.n	8004214 <HAL_DMA_Init+0x26c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b2e      	cmp	r3, #46	@ 0x2e
 8004212:	d91f      	bls.n	8004254 <HAL_DMA_Init+0x2ac>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b3e      	cmp	r3, #62	@ 0x3e
 800421a:	d903      	bls.n	8004224 <HAL_DMA_Init+0x27c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b42      	cmp	r3, #66	@ 0x42
 8004222:	d917      	bls.n	8004254 <HAL_DMA_Init+0x2ac>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b46      	cmp	r3, #70	@ 0x46
 800422a:	d903      	bls.n	8004234 <HAL_DMA_Init+0x28c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b48      	cmp	r3, #72	@ 0x48
 8004232:	d90f      	bls.n	8004254 <HAL_DMA_Init+0x2ac>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b4e      	cmp	r3, #78	@ 0x4e
 800423a:	d903      	bls.n	8004244 <HAL_DMA_Init+0x29c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b52      	cmp	r3, #82	@ 0x52
 8004242:	d907      	bls.n	8004254 <HAL_DMA_Init+0x2ac>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b73      	cmp	r3, #115	@ 0x73
 800424a:	d905      	bls.n	8004258 <HAL_DMA_Init+0x2b0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b77      	cmp	r3, #119	@ 0x77
 8004252:	d801      	bhi.n	8004258 <HAL_DMA_Init+0x2b0>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_DMA_Init+0x2b2>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004264:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 0307 	bic.w	r3, r3, #7
 800427c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	2b04      	cmp	r3, #4
 800428e:	d117      	bne.n	80042c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f002 f8e8 	bl	8006478 <DMA_CheckFifoParam>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2240      	movs	r2, #64	@ 0x40
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e192      	b.n	80045e6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f002 f823 	bl	8006314 <DMA_CalcBaseAndBitshift>
 80042ce:	4603      	mov	r3, r0
 80042d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	223f      	movs	r2, #63	@ 0x3f
 80042dc:	409a      	lsls	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	e0c8      	b.n	8004476 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a38      	ldr	r2, [pc, #224]	@ (80043cc <HAL_DMA_Init+0x424>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a37      	ldr	r2, [pc, #220]	@ (80043d0 <HAL_DMA_Init+0x428>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a35      	ldr	r2, [pc, #212]	@ (80043d4 <HAL_DMA_Init+0x42c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a34      	ldr	r2, [pc, #208]	@ (80043d8 <HAL_DMA_Init+0x430>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a32      	ldr	r2, [pc, #200]	@ (80043dc <HAL_DMA_Init+0x434>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a31      	ldr	r2, [pc, #196]	@ (80043e0 <HAL_DMA_Init+0x438>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2f      	ldr	r2, [pc, #188]	@ (80043e4 <HAL_DMA_Init+0x43c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_Init+0x38c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2e      	ldr	r2, [pc, #184]	@ (80043e8 <HAL_DMA_Init+0x440>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Init+0x390>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <HAL_DMA_Init+0x392>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8092 	beq.w	8004464 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a21      	ldr	r2, [pc, #132]	@ (80043cc <HAL_DMA_Init+0x424>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d021      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a20      	ldr	r2, [pc, #128]	@ (80043d0 <HAL_DMA_Init+0x428>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d01c      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1e      	ldr	r2, [pc, #120]	@ (80043d4 <HAL_DMA_Init+0x42c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d017      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1d      	ldr	r2, [pc, #116]	@ (80043d8 <HAL_DMA_Init+0x430>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d012      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1b      	ldr	r2, [pc, #108]	@ (80043dc <HAL_DMA_Init+0x434>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00d      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_DMA_Init+0x438>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d008      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a18      	ldr	r2, [pc, #96]	@ (80043e4 <HAL_DMA_Init+0x43c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <HAL_DMA_Init+0x3e6>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <HAL_DMA_Init+0x440>)
 800438c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <HAL_DMA_Init+0x444>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d01c      	beq.n	80043f0 <HAL_DMA_Init+0x448>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d102      	bne.n	80043c4 <HAL_DMA_Init+0x41c>
 80043be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043c2:	e016      	b.n	80043f2 <HAL_DMA_Init+0x44a>
 80043c4:	2300      	movs	r3, #0
 80043c6:	e014      	b.n	80043f2 <HAL_DMA_Init+0x44a>
 80043c8:	fe10803f 	.word	0xfe10803f
 80043cc:	58025408 	.word	0x58025408
 80043d0:	5802541c 	.word	0x5802541c
 80043d4:	58025430 	.word	0x58025430
 80043d8:	58025444 	.word	0x58025444
 80043dc:	58025458 	.word	0x58025458
 80043e0:	5802546c 	.word	0x5802546c
 80043e4:	58025480 	.word	0x58025480
 80043e8:	58025494 	.word	0x58025494
 80043ec:	fffe000f 	.word	0xfffe000f
 80043f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004418:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004420:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b6e      	ldr	r3, [pc, #440]	@ (80045f0 <HAL_DMA_Init+0x648>)
 8004438:	4413      	add	r3, r2
 800443a:	4a6e      	ldr	r2, [pc, #440]	@ (80045f4 <HAL_DMA_Init+0x64c>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	009a      	lsls	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 ff63 	bl	8006314 <DMA_CalcBaseAndBitshift>
 800444e:	4603      	mov	r3, r0
 8004450:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2201      	movs	r2, #1
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	e008      	b.n	8004476 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2240      	movs	r2, #64	@ 0x40
 8004468:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2203      	movs	r2, #3
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0b7      	b.n	80045e6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5f      	ldr	r2, [pc, #380]	@ (80045f8 <HAL_DMA_Init+0x650>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d072      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a5d      	ldr	r2, [pc, #372]	@ (80045fc <HAL_DMA_Init+0x654>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d06d      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5c      	ldr	r2, [pc, #368]	@ (8004600 <HAL_DMA_Init+0x658>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d068      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a5a      	ldr	r2, [pc, #360]	@ (8004604 <HAL_DMA_Init+0x65c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d063      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a59      	ldr	r2, [pc, #356]	@ (8004608 <HAL_DMA_Init+0x660>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d05e      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a57      	ldr	r2, [pc, #348]	@ (800460c <HAL_DMA_Init+0x664>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d059      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a56      	ldr	r2, [pc, #344]	@ (8004610 <HAL_DMA_Init+0x668>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d054      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a54      	ldr	r2, [pc, #336]	@ (8004614 <HAL_DMA_Init+0x66c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d04f      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a53      	ldr	r2, [pc, #332]	@ (8004618 <HAL_DMA_Init+0x670>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d04a      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a51      	ldr	r2, [pc, #324]	@ (800461c <HAL_DMA_Init+0x674>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d045      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a50      	ldr	r2, [pc, #320]	@ (8004620 <HAL_DMA_Init+0x678>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d040      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a4e      	ldr	r2, [pc, #312]	@ (8004624 <HAL_DMA_Init+0x67c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d03b      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4d      	ldr	r2, [pc, #308]	@ (8004628 <HAL_DMA_Init+0x680>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d036      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	@ (800462c <HAL_DMA_Init+0x684>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d031      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a4a      	ldr	r2, [pc, #296]	@ (8004630 <HAL_DMA_Init+0x688>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d02c      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a48      	ldr	r2, [pc, #288]	@ (8004634 <HAL_DMA_Init+0x68c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d027      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a47      	ldr	r2, [pc, #284]	@ (8004638 <HAL_DMA_Init+0x690>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d022      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a45      	ldr	r2, [pc, #276]	@ (800463c <HAL_DMA_Init+0x694>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01d      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a44      	ldr	r2, [pc, #272]	@ (8004640 <HAL_DMA_Init+0x698>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d018      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <HAL_DMA_Init+0x69c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a41      	ldr	r2, [pc, #260]	@ (8004648 <HAL_DMA_Init+0x6a0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3f      	ldr	r2, [pc, #252]	@ (800464c <HAL_DMA_Init+0x6a4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3e      	ldr	r2, [pc, #248]	@ (8004650 <HAL_DMA_Init+0x6a8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_DMA_Init+0x5be>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a3c      	ldr	r2, [pc, #240]	@ (8004654 <HAL_DMA_Init+0x6ac>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_DMA_Init+0x5c2>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_DMA_Init+0x5c4>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d032      	beq.n	80045d6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f001 fffd 	bl	8006570 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b80      	cmp	r3, #128	@ 0x80
 800457c:	d102      	bne.n	8004584 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004598:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_DMA_Init+0x61c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d80c      	bhi.n	80045c4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f002 f87a 	bl	80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e008      	b.n	80045d6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	a7fdabf8 	.word	0xa7fdabf8
 80045f4:	cccccccd 	.word	0xcccccccd
 80045f8:	40020010 	.word	0x40020010
 80045fc:	40020028 	.word	0x40020028
 8004600:	40020040 	.word	0x40020040
 8004604:	40020058 	.word	0x40020058
 8004608:	40020070 	.word	0x40020070
 800460c:	40020088 	.word	0x40020088
 8004610:	400200a0 	.word	0x400200a0
 8004614:	400200b8 	.word	0x400200b8
 8004618:	40020410 	.word	0x40020410
 800461c:	40020428 	.word	0x40020428
 8004620:	40020440 	.word	0x40020440
 8004624:	40020458 	.word	0x40020458
 8004628:	40020470 	.word	0x40020470
 800462c:	40020488 	.word	0x40020488
 8004630:	400204a0 	.word	0x400204a0
 8004634:	400204b8 	.word	0x400204b8
 8004638:	58025408 	.word	0x58025408
 800463c:	5802541c 	.word	0x5802541c
 8004640:	58025430 	.word	0x58025430
 8004644:	58025444 	.word	0x58025444
 8004648:	58025458 	.word	0x58025458
 800464c:	5802546c 	.word	0x5802546c
 8004650:	58025480 	.word	0x58025480
 8004654:	58025494 	.word	0x58025494

08004658 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e226      	b.n	8004ac2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_DMA_Start_IT+0x2a>
 800467e:	2302      	movs	r3, #2
 8004680:	e21f      	b.n	8004ac2 <HAL_DMA_Start_IT+0x46a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	f040 820a 	bne.w	8004aac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a68      	ldr	r2, [pc, #416]	@ (800484c <HAL_DMA_Start_IT+0x1f4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d04a      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a66      	ldr	r2, [pc, #408]	@ (8004850 <HAL_DMA_Start_IT+0x1f8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d045      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <HAL_DMA_Start_IT+0x1fc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d040      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <HAL_DMA_Start_IT+0x200>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d03b      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a62      	ldr	r2, [pc, #392]	@ (800485c <HAL_DMA_Start_IT+0x204>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d036      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a60      	ldr	r2, [pc, #384]	@ (8004860 <HAL_DMA_Start_IT+0x208>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d031      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004864 <HAL_DMA_Start_IT+0x20c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d02c      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004868 <HAL_DMA_Start_IT+0x210>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d027      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5c      	ldr	r2, [pc, #368]	@ (800486c <HAL_DMA_Start_IT+0x214>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a5a      	ldr	r2, [pc, #360]	@ (8004870 <HAL_DMA_Start_IT+0x218>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a59      	ldr	r2, [pc, #356]	@ (8004874 <HAL_DMA_Start_IT+0x21c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a57      	ldr	r2, [pc, #348]	@ (8004878 <HAL_DMA_Start_IT+0x220>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a56      	ldr	r2, [pc, #344]	@ (800487c <HAL_DMA_Start_IT+0x224>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a54      	ldr	r2, [pc, #336]	@ (8004880 <HAL_DMA_Start_IT+0x228>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a53      	ldr	r2, [pc, #332]	@ (8004884 <HAL_DMA_Start_IT+0x22c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_DMA_Start_IT+0xee>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a51      	ldr	r2, [pc, #324]	@ (8004888 <HAL_DMA_Start_IT+0x230>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <HAL_DMA_Start_IT+0x100>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e007      	b.n	8004768 <HAL_DMA_Start_IT+0x110>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 fc24 	bl	8005fbc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a34      	ldr	r2, [pc, #208]	@ (800484c <HAL_DMA_Start_IT+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d04a      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a33      	ldr	r2, [pc, #204]	@ (8004850 <HAL_DMA_Start_IT+0x1f8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d045      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a31      	ldr	r2, [pc, #196]	@ (8004854 <HAL_DMA_Start_IT+0x1fc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d040      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a30      	ldr	r2, [pc, #192]	@ (8004858 <HAL_DMA_Start_IT+0x200>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d03b      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2e      	ldr	r2, [pc, #184]	@ (800485c <HAL_DMA_Start_IT+0x204>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d036      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004860 <HAL_DMA_Start_IT+0x208>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d031      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004864 <HAL_DMA_Start_IT+0x20c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02c      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2a      	ldr	r2, [pc, #168]	@ (8004868 <HAL_DMA_Start_IT+0x210>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d027      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a28      	ldr	r2, [pc, #160]	@ (800486c <HAL_DMA_Start_IT+0x214>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d022      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <HAL_DMA_Start_IT+0x218>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01d      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a25      	ldr	r2, [pc, #148]	@ (8004874 <HAL_DMA_Start_IT+0x21c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a24      	ldr	r2, [pc, #144]	@ (8004878 <HAL_DMA_Start_IT+0x220>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a22      	ldr	r2, [pc, #136]	@ (800487c <HAL_DMA_Start_IT+0x224>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	@ (8004880 <HAL_DMA_Start_IT+0x228>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <HAL_DMA_Start_IT+0x22c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_DMA_Start_IT+0x1bc>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_DMA_Start_IT+0x230>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_DMA_Start_IT+0x1c0>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_DMA_Start_IT+0x1c2>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d036      	beq.n	800488c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 021e 	bic.w	r2, r3, #30
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0216 	orr.w	r2, r2, #22
 8004830:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d03e      	beq.n	80048b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0208 	orr.w	r2, r2, #8
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e035      	b.n	80048b8 <HAL_DMA_Start_IT+0x260>
 800484c:	40020010 	.word	0x40020010
 8004850:	40020028 	.word	0x40020028
 8004854:	40020040 	.word	0x40020040
 8004858:	40020058 	.word	0x40020058
 800485c:	40020070 	.word	0x40020070
 8004860:	40020088 	.word	0x40020088
 8004864:	400200a0 	.word	0x400200a0
 8004868:	400200b8 	.word	0x400200b8
 800486c:	40020410 	.word	0x40020410
 8004870:	40020428 	.word	0x40020428
 8004874:	40020440 	.word	0x40020440
 8004878:	40020458 	.word	0x40020458
 800487c:	40020470 	.word	0x40020470
 8004880:	40020488 	.word	0x40020488
 8004884:	400204a0 	.word	0x400204a0
 8004888:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 020e 	bic.w	r2, r3, #14
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 020a 	orr.w	r2, r2, #10
 800489e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0204 	orr.w	r2, r2, #4
 80048b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a83      	ldr	r2, [pc, #524]	@ (8004acc <HAL_DMA_Start_IT+0x474>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d072      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a82      	ldr	r2, [pc, #520]	@ (8004ad0 <HAL_DMA_Start_IT+0x478>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d06d      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a80      	ldr	r2, [pc, #512]	@ (8004ad4 <HAL_DMA_Start_IT+0x47c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d068      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad8 <HAL_DMA_Start_IT+0x480>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d063      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a7d      	ldr	r2, [pc, #500]	@ (8004adc <HAL_DMA_Start_IT+0x484>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d05e      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae0 <HAL_DMA_Start_IT+0x488>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d059      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ae4 <HAL_DMA_Start_IT+0x48c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d054      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a79      	ldr	r2, [pc, #484]	@ (8004ae8 <HAL_DMA_Start_IT+0x490>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d04f      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a77      	ldr	r2, [pc, #476]	@ (8004aec <HAL_DMA_Start_IT+0x494>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d04a      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a76      	ldr	r2, [pc, #472]	@ (8004af0 <HAL_DMA_Start_IT+0x498>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d045      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a74      	ldr	r2, [pc, #464]	@ (8004af4 <HAL_DMA_Start_IT+0x49c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d040      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a73      	ldr	r2, [pc, #460]	@ (8004af8 <HAL_DMA_Start_IT+0x4a0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d03b      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a71      	ldr	r2, [pc, #452]	@ (8004afc <HAL_DMA_Start_IT+0x4a4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d036      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a70      	ldr	r2, [pc, #448]	@ (8004b00 <HAL_DMA_Start_IT+0x4a8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d031      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a6e      	ldr	r2, [pc, #440]	@ (8004b04 <HAL_DMA_Start_IT+0x4ac>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02c      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6d      	ldr	r2, [pc, #436]	@ (8004b08 <HAL_DMA_Start_IT+0x4b0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6b      	ldr	r2, [pc, #428]	@ (8004b0c <HAL_DMA_Start_IT+0x4b4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6a      	ldr	r2, [pc, #424]	@ (8004b10 <HAL_DMA_Start_IT+0x4b8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a68      	ldr	r2, [pc, #416]	@ (8004b14 <HAL_DMA_Start_IT+0x4bc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a67      	ldr	r2, [pc, #412]	@ (8004b18 <HAL_DMA_Start_IT+0x4c0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a65      	ldr	r2, [pc, #404]	@ (8004b1c <HAL_DMA_Start_IT+0x4c4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a64      	ldr	r2, [pc, #400]	@ (8004b20 <HAL_DMA_Start_IT+0x4c8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a62      	ldr	r2, [pc, #392]	@ (8004b24 <HAL_DMA_Start_IT+0x4cc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_Start_IT+0x350>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a61      	ldr	r2, [pc, #388]	@ (8004b28 <HAL_DMA_Start_IT+0x4d0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_DMA_Start_IT+0x354>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_DMA_Start_IT+0x356>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01a      	beq.n	80049e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a37      	ldr	r2, [pc, #220]	@ (8004acc <HAL_DMA_Start_IT+0x474>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d04a      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a36      	ldr	r2, [pc, #216]	@ (8004ad0 <HAL_DMA_Start_IT+0x478>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d045      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a34      	ldr	r2, [pc, #208]	@ (8004ad4 <HAL_DMA_Start_IT+0x47c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d040      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a33      	ldr	r2, [pc, #204]	@ (8004ad8 <HAL_DMA_Start_IT+0x480>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d03b      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a31      	ldr	r2, [pc, #196]	@ (8004adc <HAL_DMA_Start_IT+0x484>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d036      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a30      	ldr	r2, [pc, #192]	@ (8004ae0 <HAL_DMA_Start_IT+0x488>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d031      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <HAL_DMA_Start_IT+0x48c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d02c      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae8 <HAL_DMA_Start_IT+0x490>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d027      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004aec <HAL_DMA_Start_IT+0x494>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2a      	ldr	r2, [pc, #168]	@ (8004af0 <HAL_DMA_Start_IT+0x498>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d01d      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a28      	ldr	r2, [pc, #160]	@ (8004af4 <HAL_DMA_Start_IT+0x49c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <HAL_DMA_Start_IT+0x4a0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a25      	ldr	r2, [pc, #148]	@ (8004afc <HAL_DMA_Start_IT+0x4a4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a24      	ldr	r2, [pc, #144]	@ (8004b00 <HAL_DMA_Start_IT+0x4a8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a22      	ldr	r2, [pc, #136]	@ (8004b04 <HAL_DMA_Start_IT+0x4ac>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_DMA_Start_IT+0x430>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a21      	ldr	r2, [pc, #132]	@ (8004b08 <HAL_DMA_Start_IT+0x4b0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <HAL_DMA_Start_IT+0x442>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e012      	b.n	8004ac0 <HAL_DMA_Start_IT+0x468>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e009      	b.n	8004ac0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	58025408 	.word	0x58025408
 8004b10:	5802541c 	.word	0x5802541c
 8004b14:	58025430 	.word	0x58025430
 8004b18:	58025444 	.word	0x58025444
 8004b1c:	58025458 	.word	0x58025458
 8004b20:	5802546c 	.word	0x5802546c
 8004b24:	58025480 	.word	0x58025480
 8004b28:	58025494 	.word	0x58025494

08004b2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b34:	f7ff f8f8 	bl	8003d28 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e2dc      	b.n	80050fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d008      	beq.n	8004b62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e2cd      	b.n	80050fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a76      	ldr	r2, [pc, #472]	@ (8004d40 <HAL_DMA_Abort+0x214>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d04a      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a74      	ldr	r2, [pc, #464]	@ (8004d44 <HAL_DMA_Abort+0x218>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d045      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a73      	ldr	r2, [pc, #460]	@ (8004d48 <HAL_DMA_Abort+0x21c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d040      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a71      	ldr	r2, [pc, #452]	@ (8004d4c <HAL_DMA_Abort+0x220>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d03b      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a70      	ldr	r2, [pc, #448]	@ (8004d50 <HAL_DMA_Abort+0x224>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d036      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6e      	ldr	r2, [pc, #440]	@ (8004d54 <HAL_DMA_Abort+0x228>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6d      	ldr	r2, [pc, #436]	@ (8004d58 <HAL_DMA_Abort+0x22c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d02c      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6b      	ldr	r2, [pc, #428]	@ (8004d5c <HAL_DMA_Abort+0x230>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d027      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6a      	ldr	r2, [pc, #424]	@ (8004d60 <HAL_DMA_Abort+0x234>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a68      	ldr	r2, [pc, #416]	@ (8004d64 <HAL_DMA_Abort+0x238>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a67      	ldr	r2, [pc, #412]	@ (8004d68 <HAL_DMA_Abort+0x23c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a65      	ldr	r2, [pc, #404]	@ (8004d6c <HAL_DMA_Abort+0x240>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a64      	ldr	r2, [pc, #400]	@ (8004d70 <HAL_DMA_Abort+0x244>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a62      	ldr	r2, [pc, #392]	@ (8004d74 <HAL_DMA_Abort+0x248>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a61      	ldr	r2, [pc, #388]	@ (8004d78 <HAL_DMA_Abort+0x24c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_DMA_Abort+0xd6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5f      	ldr	r2, [pc, #380]	@ (8004d7c <HAL_DMA_Abort+0x250>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_DMA_Abort+0xda>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_DMA_Abort+0xdc>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 021e 	bic.w	r2, r2, #30
 8004c1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e00a      	b.n	8004c4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020e 	bic.w	r2, r2, #14
 8004c42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d40 <HAL_DMA_Abort+0x214>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3a      	ldr	r2, [pc, #232]	@ (8004d44 <HAL_DMA_Abort+0x218>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a39      	ldr	r2, [pc, #228]	@ (8004d48 <HAL_DMA_Abort+0x21c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a37      	ldr	r2, [pc, #220]	@ (8004d4c <HAL_DMA_Abort+0x220>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a36      	ldr	r2, [pc, #216]	@ (8004d50 <HAL_DMA_Abort+0x224>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a34      	ldr	r2, [pc, #208]	@ (8004d54 <HAL_DMA_Abort+0x228>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a33      	ldr	r2, [pc, #204]	@ (8004d58 <HAL_DMA_Abort+0x22c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a31      	ldr	r2, [pc, #196]	@ (8004d5c <HAL_DMA_Abort+0x230>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <HAL_DMA_Abort+0x234>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8004d64 <HAL_DMA_Abort+0x238>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <HAL_DMA_Abort+0x23c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004d6c <HAL_DMA_Abort+0x240>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d70 <HAL_DMA_Abort+0x244>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a28      	ldr	r2, [pc, #160]	@ (8004d74 <HAL_DMA_Abort+0x248>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a27      	ldr	r2, [pc, #156]	@ (8004d78 <HAL_DMA_Abort+0x24c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a25      	ldr	r2, [pc, #148]	@ (8004d7c <HAL_DMA_Abort+0x250>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <HAL_DMA_Abort+0x254>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	@ (8004d84 <HAL_DMA_Abort+0x258>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a21      	ldr	r2, [pc, #132]	@ (8004d88 <HAL_DMA_Abort+0x25c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d8c <HAL_DMA_Abort+0x260>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <HAL_DMA_Abort+0x264>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1c      	ldr	r2, [pc, #112]	@ (8004d94 <HAL_DMA_Abort+0x268>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <HAL_DMA_Abort+0x26c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_DMA_Abort+0x20e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <HAL_DMA_Abort+0x270>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d132      	bne.n	8004da0 <HAL_DMA_Abort+0x274>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e031      	b.n	8004da2 <HAL_DMA_Abort+0x276>
 8004d3e:	bf00      	nop
 8004d40:	40020010 	.word	0x40020010
 8004d44:	40020028 	.word	0x40020028
 8004d48:	40020040 	.word	0x40020040
 8004d4c:	40020058 	.word	0x40020058
 8004d50:	40020070 	.word	0x40020070
 8004d54:	40020088 	.word	0x40020088
 8004d58:	400200a0 	.word	0x400200a0
 8004d5c:	400200b8 	.word	0x400200b8
 8004d60:	40020410 	.word	0x40020410
 8004d64:	40020428 	.word	0x40020428
 8004d68:	40020440 	.word	0x40020440
 8004d6c:	40020458 	.word	0x40020458
 8004d70:	40020470 	.word	0x40020470
 8004d74:	40020488 	.word	0x40020488
 8004d78:	400204a0 	.word	0x400204a0
 8004d7c:	400204b8 	.word	0x400204b8
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494
 8004da0:	2300      	movs	r3, #0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6d      	ldr	r2, [pc, #436]	@ (8004f70 <HAL_DMA_Abort+0x444>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d04a      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8004f74 <HAL_DMA_Abort+0x448>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d045      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6a      	ldr	r2, [pc, #424]	@ (8004f78 <HAL_DMA_Abort+0x44c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d040      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a68      	ldr	r2, [pc, #416]	@ (8004f7c <HAL_DMA_Abort+0x450>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d03b      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a67      	ldr	r2, [pc, #412]	@ (8004f80 <HAL_DMA_Abort+0x454>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d036      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a65      	ldr	r2, [pc, #404]	@ (8004f84 <HAL_DMA_Abort+0x458>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d031      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a64      	ldr	r2, [pc, #400]	@ (8004f88 <HAL_DMA_Abort+0x45c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d02c      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a62      	ldr	r2, [pc, #392]	@ (8004f8c <HAL_DMA_Abort+0x460>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d027      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a61      	ldr	r2, [pc, #388]	@ (8004f90 <HAL_DMA_Abort+0x464>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5f      	ldr	r2, [pc, #380]	@ (8004f94 <HAL_DMA_Abort+0x468>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004f98 <HAL_DMA_Abort+0x46c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5c      	ldr	r2, [pc, #368]	@ (8004f9c <HAL_DMA_Abort+0x470>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa0 <HAL_DMA_Abort+0x474>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a59      	ldr	r2, [pc, #356]	@ (8004fa4 <HAL_DMA_Abort+0x478>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a58      	ldr	r2, [pc, #352]	@ (8004fa8 <HAL_DMA_Abort+0x47c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_DMA_Abort+0x32a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a56      	ldr	r2, [pc, #344]	@ (8004fac <HAL_DMA_Abort+0x480>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <HAL_DMA_Abort+0x33c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_DMA_Abort+0x34c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e78:	e013      	b.n	8004ea2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e7a:	f7fe ff55 	bl	8003d28 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d90c      	bls.n	8004ea2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e12d      	b.n	80050fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f70 <HAL_DMA_Abort+0x444>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f74 <HAL_DMA_Abort+0x448>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <HAL_DMA_Abort+0x44c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <HAL_DMA_Abort+0x450>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a29      	ldr	r2, [pc, #164]	@ (8004f80 <HAL_DMA_Abort+0x454>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	@ (8004f84 <HAL_DMA_Abort+0x458>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a26      	ldr	r2, [pc, #152]	@ (8004f88 <HAL_DMA_Abort+0x45c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a24      	ldr	r2, [pc, #144]	@ (8004f8c <HAL_DMA_Abort+0x460>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a23      	ldr	r2, [pc, #140]	@ (8004f90 <HAL_DMA_Abort+0x464>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a21      	ldr	r2, [pc, #132]	@ (8004f94 <HAL_DMA_Abort+0x468>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a20      	ldr	r2, [pc, #128]	@ (8004f98 <HAL_DMA_Abort+0x46c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1e      	ldr	r2, [pc, #120]	@ (8004f9c <HAL_DMA_Abort+0x470>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa0 <HAL_DMA_Abort+0x474>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <HAL_DMA_Abort+0x478>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa8 <HAL_DMA_Abort+0x47c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_Abort+0x422>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a18      	ldr	r2, [pc, #96]	@ (8004fac <HAL_DMA_Abort+0x480>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_DMA_Abort+0x426>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_DMA_Abort+0x428>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02b      	beq.n	8004fb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	223f      	movs	r2, #63	@ 0x3f
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	e02a      	b.n	8004fc6 <HAL_DMA_Abort+0x49a>
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a4f      	ldr	r2, [pc, #316]	@ (8005108 <HAL_DMA_Abort+0x5dc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d072      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800510c <HAL_DMA_Abort+0x5e0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d06d      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4c      	ldr	r2, [pc, #304]	@ (8005110 <HAL_DMA_Abort+0x5e4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d068      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8005114 <HAL_DMA_Abort+0x5e8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d063      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a49      	ldr	r2, [pc, #292]	@ (8005118 <HAL_DMA_Abort+0x5ec>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d05e      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a47      	ldr	r2, [pc, #284]	@ (800511c <HAL_DMA_Abort+0x5f0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d059      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a46      	ldr	r2, [pc, #280]	@ (8005120 <HAL_DMA_Abort+0x5f4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d054      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a44      	ldr	r2, [pc, #272]	@ (8005124 <HAL_DMA_Abort+0x5f8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d04f      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a43      	ldr	r2, [pc, #268]	@ (8005128 <HAL_DMA_Abort+0x5fc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04a      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a41      	ldr	r2, [pc, #260]	@ (800512c <HAL_DMA_Abort+0x600>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d045      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a40      	ldr	r2, [pc, #256]	@ (8005130 <HAL_DMA_Abort+0x604>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d040      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3e      	ldr	r2, [pc, #248]	@ (8005134 <HAL_DMA_Abort+0x608>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d03b      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3d      	ldr	r2, [pc, #244]	@ (8005138 <HAL_DMA_Abort+0x60c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d036      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3b      	ldr	r2, [pc, #236]	@ (800513c <HAL_DMA_Abort+0x610>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d031      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3a      	ldr	r2, [pc, #232]	@ (8005140 <HAL_DMA_Abort+0x614>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d02c      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a38      	ldr	r2, [pc, #224]	@ (8005144 <HAL_DMA_Abort+0x618>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d027      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a37      	ldr	r2, [pc, #220]	@ (8005148 <HAL_DMA_Abort+0x61c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a35      	ldr	r2, [pc, #212]	@ (800514c <HAL_DMA_Abort+0x620>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a34      	ldr	r2, [pc, #208]	@ (8005150 <HAL_DMA_Abort+0x624>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a32      	ldr	r2, [pc, #200]	@ (8005154 <HAL_DMA_Abort+0x628>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a31      	ldr	r2, [pc, #196]	@ (8005158 <HAL_DMA_Abort+0x62c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2f      	ldr	r2, [pc, #188]	@ (800515c <HAL_DMA_Abort+0x630>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005160 <HAL_DMA_Abort+0x634>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMA_Abort+0x58a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005164 <HAL_DMA_Abort+0x638>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Abort+0x58e>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_DMA_Abort+0x590>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d015      	beq.n	80050ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40020010 	.word	0x40020010
 800510c:	40020028 	.word	0x40020028
 8005110:	40020040 	.word	0x40020040
 8005114:	40020058 	.word	0x40020058
 8005118:	40020070 	.word	0x40020070
 800511c:	40020088 	.word	0x40020088
 8005120:	400200a0 	.word	0x400200a0
 8005124:	400200b8 	.word	0x400200b8
 8005128:	40020410 	.word	0x40020410
 800512c:	40020428 	.word	0x40020428
 8005130:	40020440 	.word	0x40020440
 8005134:	40020458 	.word	0x40020458
 8005138:	40020470 	.word	0x40020470
 800513c:	40020488 	.word	0x40020488
 8005140:	400204a0 	.word	0x400204a0
 8005144:	400204b8 	.word	0x400204b8
 8005148:	58025408 	.word	0x58025408
 800514c:	5802541c 	.word	0x5802541c
 8005150:	58025430 	.word	0x58025430
 8005154:	58025444 	.word	0x58025444
 8005158:	58025458 	.word	0x58025458
 800515c:	5802546c 	.word	0x5802546c
 8005160:	58025480 	.word	0x58025480
 8005164:	58025494 	.word	0x58025494

08005168 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	@ 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005174:	4b67      	ldr	r3, [pc, #412]	@ (8005314 <HAL_DMA_IRQHandler+0x1ac>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a67      	ldr	r2, [pc, #412]	@ (8005318 <HAL_DMA_IRQHandler+0x1b0>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0a9b      	lsrs	r3, r3, #10
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a5f      	ldr	r2, [pc, #380]	@ (800531c <HAL_DMA_IRQHandler+0x1b4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d04a      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005320 <HAL_DMA_IRQHandler+0x1b8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d045      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005324 <HAL_DMA_IRQHandler+0x1bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d040      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005328 <HAL_DMA_IRQHandler+0x1c0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d03b      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a59      	ldr	r2, [pc, #356]	@ (800532c <HAL_DMA_IRQHandler+0x1c4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d036      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a57      	ldr	r2, [pc, #348]	@ (8005330 <HAL_DMA_IRQHandler+0x1c8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d031      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a56      	ldr	r2, [pc, #344]	@ (8005334 <HAL_DMA_IRQHandler+0x1cc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d02c      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a54      	ldr	r2, [pc, #336]	@ (8005338 <HAL_DMA_IRQHandler+0x1d0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d027      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a53      	ldr	r2, [pc, #332]	@ (800533c <HAL_DMA_IRQHandler+0x1d4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a51      	ldr	r2, [pc, #324]	@ (8005340 <HAL_DMA_IRQHandler+0x1d8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01d      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a50      	ldr	r2, [pc, #320]	@ (8005344 <HAL_DMA_IRQHandler+0x1dc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4e      	ldr	r2, [pc, #312]	@ (8005348 <HAL_DMA_IRQHandler+0x1e0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a4d      	ldr	r2, [pc, #308]	@ (800534c <HAL_DMA_IRQHandler+0x1e4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a4b      	ldr	r2, [pc, #300]	@ (8005350 <HAL_DMA_IRQHandler+0x1e8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4a      	ldr	r2, [pc, #296]	@ (8005354 <HAL_DMA_IRQHandler+0x1ec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_DMA_IRQHandler+0xd2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a48      	ldr	r2, [pc, #288]	@ (8005358 <HAL_DMA_IRQHandler+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_DMA_IRQHandler+0xd6>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_DMA_IRQHandler+0xd8>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 842b 	beq.w	8005a9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2208      	movs	r2, #8
 8005250:	409a      	lsls	r2, r3
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80a2 	beq.w	80053a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2e      	ldr	r2, [pc, #184]	@ (800531c <HAL_DMA_IRQHandler+0x1b4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04a      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2d      	ldr	r2, [pc, #180]	@ (8005320 <HAL_DMA_IRQHandler+0x1b8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d045      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2b      	ldr	r2, [pc, #172]	@ (8005324 <HAL_DMA_IRQHandler+0x1bc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d040      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2a      	ldr	r2, [pc, #168]	@ (8005328 <HAL_DMA_IRQHandler+0x1c0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d03b      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a28      	ldr	r2, [pc, #160]	@ (800532c <HAL_DMA_IRQHandler+0x1c4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d036      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a27      	ldr	r2, [pc, #156]	@ (8005330 <HAL_DMA_IRQHandler+0x1c8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d031      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a25      	ldr	r2, [pc, #148]	@ (8005334 <HAL_DMA_IRQHandler+0x1cc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02c      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a24      	ldr	r2, [pc, #144]	@ (8005338 <HAL_DMA_IRQHandler+0x1d0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d027      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a22      	ldr	r2, [pc, #136]	@ (800533c <HAL_DMA_IRQHandler+0x1d4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <HAL_DMA_IRQHandler+0x1d8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01d      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005344 <HAL_DMA_IRQHandler+0x1dc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <HAL_DMA_IRQHandler+0x1e0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <HAL_DMA_IRQHandler+0x1e4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <HAL_DMA_IRQHandler+0x1e8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a19      	ldr	r2, [pc, #100]	@ (8005354 <HAL_DMA_IRQHandler+0x1ec>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_DMA_IRQHandler+0x194>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_DMA_IRQHandler+0x1f0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d12f      	bne.n	800535c <HAL_DMA_IRQHandler+0x1f4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e02e      	b.n	8005370 <HAL_DMA_IRQHandler+0x208>
 8005312:	bf00      	nop
 8005314:	24000000 	.word	0x24000000
 8005318:	1b4e81b5 	.word	0x1b4e81b5
 800531c:	40020010 	.word	0x40020010
 8005320:	40020028 	.word	0x40020028
 8005324:	40020040 	.word	0x40020040
 8005328:	40020058 	.word	0x40020058
 800532c:	40020070 	.word	0x40020070
 8005330:	40020088 	.word	0x40020088
 8005334:	400200a0 	.word	0x400200a0
 8005338:	400200b8 	.word	0x400200b8
 800533c:	40020410 	.word	0x40020410
 8005340:	40020428 	.word	0x40020428
 8005344:	40020440 	.word	0x40020440
 8005348:	40020458 	.word	0x40020458
 800534c:	40020470 	.word	0x40020470
 8005350:	40020488 	.word	0x40020488
 8005354:	400204a0 	.word	0x400204a0
 8005358:	400204b8 	.word	0x400204b8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2208      	movs	r2, #8
 800538e:	409a      	lsls	r2, r3
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	fa22 f303 	lsr.w	r3, r2, r3
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d06e      	beq.n	8005494 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a69      	ldr	r2, [pc, #420]	@ (8005560 <HAL_DMA_IRQHandler+0x3f8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d04a      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a67      	ldr	r2, [pc, #412]	@ (8005564 <HAL_DMA_IRQHandler+0x3fc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d045      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a66      	ldr	r2, [pc, #408]	@ (8005568 <HAL_DMA_IRQHandler+0x400>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d040      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a64      	ldr	r2, [pc, #400]	@ (800556c <HAL_DMA_IRQHandler+0x404>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d03b      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a63      	ldr	r2, [pc, #396]	@ (8005570 <HAL_DMA_IRQHandler+0x408>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d036      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a61      	ldr	r2, [pc, #388]	@ (8005574 <HAL_DMA_IRQHandler+0x40c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a60      	ldr	r2, [pc, #384]	@ (8005578 <HAL_DMA_IRQHandler+0x410>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d02c      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5e      	ldr	r2, [pc, #376]	@ (800557c <HAL_DMA_IRQHandler+0x414>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d027      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5d      	ldr	r2, [pc, #372]	@ (8005580 <HAL_DMA_IRQHandler+0x418>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5b      	ldr	r2, [pc, #364]	@ (8005584 <HAL_DMA_IRQHandler+0x41c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a5a      	ldr	r2, [pc, #360]	@ (8005588 <HAL_DMA_IRQHandler+0x420>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a58      	ldr	r2, [pc, #352]	@ (800558c <HAL_DMA_IRQHandler+0x424>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a57      	ldr	r2, [pc, #348]	@ (8005590 <HAL_DMA_IRQHandler+0x428>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a55      	ldr	r2, [pc, #340]	@ (8005594 <HAL_DMA_IRQHandler+0x42c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a54      	ldr	r2, [pc, #336]	@ (8005598 <HAL_DMA_IRQHandler+0x430>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_DMA_IRQHandler+0x2ee>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a52      	ldr	r2, [pc, #328]	@ (800559c <HAL_DMA_IRQHandler+0x434>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10a      	bne.n	800546c <HAL_DMA_IRQHandler+0x304>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	e003      	b.n	8005474 <HAL_DMA_IRQHandler+0x30c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f043 0202 	orr.w	r2, r3, #2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2204      	movs	r2, #4
 800549e:	409a      	lsls	r2, r3
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 808f 	beq.w	80055c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005560 <HAL_DMA_IRQHandler+0x3f8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04a      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005564 <HAL_DMA_IRQHandler+0x3fc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d045      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a29      	ldr	r2, [pc, #164]	@ (8005568 <HAL_DMA_IRQHandler+0x400>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d040      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a27      	ldr	r2, [pc, #156]	@ (800556c <HAL_DMA_IRQHandler+0x404>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d03b      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a26      	ldr	r2, [pc, #152]	@ (8005570 <HAL_DMA_IRQHandler+0x408>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d036      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <HAL_DMA_IRQHandler+0x40c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d031      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a23      	ldr	r2, [pc, #140]	@ (8005578 <HAL_DMA_IRQHandler+0x410>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d02c      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a21      	ldr	r2, [pc, #132]	@ (800557c <HAL_DMA_IRQHandler+0x414>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d027      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a20      	ldr	r2, [pc, #128]	@ (8005580 <HAL_DMA_IRQHandler+0x418>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1e      	ldr	r2, [pc, #120]	@ (8005584 <HAL_DMA_IRQHandler+0x41c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <HAL_DMA_IRQHandler+0x420>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1b      	ldr	r2, [pc, #108]	@ (800558c <HAL_DMA_IRQHandler+0x424>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1a      	ldr	r2, [pc, #104]	@ (8005590 <HAL_DMA_IRQHandler+0x428>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a18      	ldr	r2, [pc, #96]	@ (8005594 <HAL_DMA_IRQHandler+0x42c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a17      	ldr	r2, [pc, #92]	@ (8005598 <HAL_DMA_IRQHandler+0x430>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_DMA_IRQHandler+0x3e2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a15      	ldr	r2, [pc, #84]	@ (800559c <HAL_DMA_IRQHandler+0x434>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d12a      	bne.n	80055a0 <HAL_DMA_IRQHandler+0x438>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e023      	b.n	80055a8 <HAL_DMA_IRQHandler+0x440>
 8005560:	40020010 	.word	0x40020010
 8005564:	40020028 	.word	0x40020028
 8005568:	40020040 	.word	0x40020040
 800556c:	40020058 	.word	0x40020058
 8005570:	40020070 	.word	0x40020070
 8005574:	40020088 	.word	0x40020088
 8005578:	400200a0 	.word	0x400200a0
 800557c:	400200b8 	.word	0x400200b8
 8005580:	40020410 	.word	0x40020410
 8005584:	40020428 	.word	0x40020428
 8005588:	40020440 	.word	0x40020440
 800558c:	40020458 	.word	0x40020458
 8005590:	40020470 	.word	0x40020470
 8005594:	40020488 	.word	0x40020488
 8005598:	400204a0 	.word	0x400204a0
 800559c:	400204b8 	.word	0x400204b8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2204      	movs	r2, #4
 80055b6:	409a      	lsls	r2, r3
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	f043 0204 	orr.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2210      	movs	r2, #16
 80055d2:	409a      	lsls	r2, r3
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80a6 	beq.w	800572a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a85      	ldr	r2, [pc, #532]	@ (80057f8 <HAL_DMA_IRQHandler+0x690>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d04a      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a83      	ldr	r2, [pc, #524]	@ (80057fc <HAL_DMA_IRQHandler+0x694>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d045      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a82      	ldr	r2, [pc, #520]	@ (8005800 <HAL_DMA_IRQHandler+0x698>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d040      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a80      	ldr	r2, [pc, #512]	@ (8005804 <HAL_DMA_IRQHandler+0x69c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d03b      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7f      	ldr	r2, [pc, #508]	@ (8005808 <HAL_DMA_IRQHandler+0x6a0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d036      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a7d      	ldr	r2, [pc, #500]	@ (800580c <HAL_DMA_IRQHandler+0x6a4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d031      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a7c      	ldr	r2, [pc, #496]	@ (8005810 <HAL_DMA_IRQHandler+0x6a8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d02c      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a7a      	ldr	r2, [pc, #488]	@ (8005814 <HAL_DMA_IRQHandler+0x6ac>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d027      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a79      	ldr	r2, [pc, #484]	@ (8005818 <HAL_DMA_IRQHandler+0x6b0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d022      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a77      	ldr	r2, [pc, #476]	@ (800581c <HAL_DMA_IRQHandler+0x6b4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01d      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a76      	ldr	r2, [pc, #472]	@ (8005820 <HAL_DMA_IRQHandler+0x6b8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d018      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a74      	ldr	r2, [pc, #464]	@ (8005824 <HAL_DMA_IRQHandler+0x6bc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a73      	ldr	r2, [pc, #460]	@ (8005828 <HAL_DMA_IRQHandler+0x6c0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00e      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a71      	ldr	r2, [pc, #452]	@ (800582c <HAL_DMA_IRQHandler+0x6c4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a70      	ldr	r2, [pc, #448]	@ (8005830 <HAL_DMA_IRQHandler+0x6c8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_DMA_IRQHandler+0x516>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a6e      	ldr	r2, [pc, #440]	@ (8005834 <HAL_DMA_IRQHandler+0x6cc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d10a      	bne.n	8005694 <HAL_DMA_IRQHandler+0x52c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e009      	b.n	80056a8 <HAL_DMA_IRQHandler+0x540>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d03e      	beq.n	800572a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2210      	movs	r2, #16
 80056b6:	409a      	lsls	r2, r3
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d024      	beq.n	800572a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
 80056e8:	e01f      	b.n	800572a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01b      	beq.n	800572a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
 80056fa:	e016      	b.n	800572a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0208 	bic.w	r2, r2, #8
 8005718:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2220      	movs	r2, #32
 8005734:	409a      	lsls	r2, r3
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8110 	beq.w	8005960 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2c      	ldr	r2, [pc, #176]	@ (80057f8 <HAL_DMA_IRQHandler+0x690>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d04a      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a2b      	ldr	r2, [pc, #172]	@ (80057fc <HAL_DMA_IRQHandler+0x694>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d045      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a29      	ldr	r2, [pc, #164]	@ (8005800 <HAL_DMA_IRQHandler+0x698>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d040      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a28      	ldr	r2, [pc, #160]	@ (8005804 <HAL_DMA_IRQHandler+0x69c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d03b      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a26      	ldr	r2, [pc, #152]	@ (8005808 <HAL_DMA_IRQHandler+0x6a0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d036      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a25      	ldr	r2, [pc, #148]	@ (800580c <HAL_DMA_IRQHandler+0x6a4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d031      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a23      	ldr	r2, [pc, #140]	@ (8005810 <HAL_DMA_IRQHandler+0x6a8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d02c      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <HAL_DMA_IRQHandler+0x6ac>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d027      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a20      	ldr	r2, [pc, #128]	@ (8005818 <HAL_DMA_IRQHandler+0x6b0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d022      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <HAL_DMA_IRQHandler+0x6b4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d01d      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005820 <HAL_DMA_IRQHandler+0x6b8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d018      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <HAL_DMA_IRQHandler+0x6bc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d013      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005828 <HAL_DMA_IRQHandler+0x6c0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a19      	ldr	r2, [pc, #100]	@ (800582c <HAL_DMA_IRQHandler+0x6c4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d009      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a17      	ldr	r2, [pc, #92]	@ (8005830 <HAL_DMA_IRQHandler+0x6c8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x678>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a16      	ldr	r2, [pc, #88]	@ (8005834 <HAL_DMA_IRQHandler+0x6cc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d12b      	bne.n	8005838 <HAL_DMA_IRQHandler+0x6d0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e02a      	b.n	800584c <HAL_DMA_IRQHandler+0x6e4>
 80057f6:	bf00      	nop
 80057f8:	40020010 	.word	0x40020010
 80057fc:	40020028 	.word	0x40020028
 8005800:	40020040 	.word	0x40020040
 8005804:	40020058 	.word	0x40020058
 8005808:	40020070 	.word	0x40020070
 800580c:	40020088 	.word	0x40020088
 8005810:	400200a0 	.word	0x400200a0
 8005814:	400200b8 	.word	0x400200b8
 8005818:	40020410 	.word	0x40020410
 800581c:	40020428 	.word	0x40020428
 8005820:	40020440 	.word	0x40020440
 8005824:	40020458 	.word	0x40020458
 8005828:	40020470 	.word	0x40020470
 800582c:	40020488 	.word	0x40020488
 8005830:	400204a0 	.word	0x400204a0
 8005834:	400204b8 	.word	0x400204b8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	bf14      	ite	ne
 8005846:	2301      	movne	r3, #1
 8005848:	2300      	moveq	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8087 	beq.w	8005960 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2220      	movs	r2, #32
 800585c:	409a      	lsls	r2, r3
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b04      	cmp	r3, #4
 800586c:	d139      	bne.n	80058e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0216 	bic.w	r2, r2, #22
 800587c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800588c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_DMA_IRQHandler+0x736>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0208 	bic.w	r2, r2, #8
 80058ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	223f      	movs	r2, #63	@ 0x3f
 80058b8:	409a      	lsls	r2, r3
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 834a 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
          }
          return;
 80058e0:	e344      	b.n	8005f6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d018      	beq.n	8005922 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d108      	bne.n	8005910 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005902:	2b00      	cmp	r3, #0
 8005904:	d02c      	beq.n	8005960 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
 800590e:	e027      	b.n	8005960 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d023      	beq.n	8005960 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
 8005920:	e01e      	b.n	8005960 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10f      	bne.n	8005950 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0210 	bic.w	r2, r2, #16
 800593e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8306 	beq.w	8005f76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8088 	beq.w	8005a88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2204      	movs	r2, #4
 800597c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a7a      	ldr	r2, [pc, #488]	@ (8005b70 <HAL_DMA_IRQHandler+0xa08>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d04a      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a79      	ldr	r2, [pc, #484]	@ (8005b74 <HAL_DMA_IRQHandler+0xa0c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d045      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a77      	ldr	r2, [pc, #476]	@ (8005b78 <HAL_DMA_IRQHandler+0xa10>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d040      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a76      	ldr	r2, [pc, #472]	@ (8005b7c <HAL_DMA_IRQHandler+0xa14>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d03b      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a74      	ldr	r2, [pc, #464]	@ (8005b80 <HAL_DMA_IRQHandler+0xa18>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d036      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a73      	ldr	r2, [pc, #460]	@ (8005b84 <HAL_DMA_IRQHandler+0xa1c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d031      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a71      	ldr	r2, [pc, #452]	@ (8005b88 <HAL_DMA_IRQHandler+0xa20>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d02c      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a70      	ldr	r2, [pc, #448]	@ (8005b8c <HAL_DMA_IRQHandler+0xa24>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d027      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b90 <HAL_DMA_IRQHandler+0xa28>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d022      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a6d      	ldr	r2, [pc, #436]	@ (8005b94 <HAL_DMA_IRQHandler+0xa2c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d01d      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005b98 <HAL_DMA_IRQHandler+0xa30>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d018      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b9c <HAL_DMA_IRQHandler+0xa34>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a68      	ldr	r2, [pc, #416]	@ (8005ba0 <HAL_DMA_IRQHandler+0xa38>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a67      	ldr	r2, [pc, #412]	@ (8005ba4 <HAL_DMA_IRQHandler+0xa3c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a65      	ldr	r2, [pc, #404]	@ (8005ba8 <HAL_DMA_IRQHandler+0xa40>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x8b8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a64      	ldr	r2, [pc, #400]	@ (8005bac <HAL_DMA_IRQHandler+0xa44>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <HAL_DMA_IRQHandler+0x8ca>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e007      	b.n	8005a42 <HAL_DMA_IRQHandler+0x8da>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d307      	bcc.n	8005a5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f2      	bne.n	8005a42 <HAL_DMA_IRQHandler+0x8da>
 8005a5c:	e000      	b.n	8005a60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2203      	movs	r2, #3
 8005a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005a76:	e003      	b.n	8005a80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8272 	beq.w	8005f76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
 8005a9a:	e26c      	b.n	8005f76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a43      	ldr	r2, [pc, #268]	@ (8005bb0 <HAL_DMA_IRQHandler+0xa48>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a42      	ldr	r2, [pc, #264]	@ (8005bb4 <HAL_DMA_IRQHandler+0xa4c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a40      	ldr	r2, [pc, #256]	@ (8005bb8 <HAL_DMA_IRQHandler+0xa50>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bbc <HAL_DMA_IRQHandler+0xa54>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8005bc0 <HAL_DMA_IRQHandler+0xa58>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8005bc4 <HAL_DMA_IRQHandler+0xa5c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3a      	ldr	r2, [pc, #232]	@ (8005bc8 <HAL_DMA_IRQHandler+0xa60>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_DMA_IRQHandler+0x984>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a39      	ldr	r2, [pc, #228]	@ (8005bcc <HAL_DMA_IRQHandler+0xa64>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x988>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_IRQHandler+0x98a>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 823f 	beq.w	8005f76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2204      	movs	r2, #4
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80cd 	beq.w	8005cb0 <HAL_DMA_IRQHandler+0xb48>
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80c7 	beq.w	8005cb0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d049      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8210 	beq.w	8005f70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b58:	e20a      	b.n	8005f70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8206 	beq.w	8005f70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b6c:	e200      	b.n	8005f70 <HAL_DMA_IRQHandler+0xe08>
 8005b6e:	bf00      	nop
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
 8005bb0:	58025408 	.word	0x58025408
 8005bb4:	5802541c 	.word	0x5802541c
 8005bb8:	58025430 	.word	0x58025430
 8005bbc:	58025444 	.word	0x58025444
 8005bc0:	58025458 	.word	0x58025458
 8005bc4:	5802546c 	.word	0x5802546c
 8005bc8:	58025480 	.word	0x58025480
 8005bcc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d160      	bne.n	8005c9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a7f      	ldr	r2, [pc, #508]	@ (8005ddc <HAL_DMA_IRQHandler+0xc74>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d04a      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a7d      	ldr	r2, [pc, #500]	@ (8005de0 <HAL_DMA_IRQHandler+0xc78>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d045      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8005de4 <HAL_DMA_IRQHandler+0xc7c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d040      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a7a      	ldr	r2, [pc, #488]	@ (8005de8 <HAL_DMA_IRQHandler+0xc80>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d03b      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a79      	ldr	r2, [pc, #484]	@ (8005dec <HAL_DMA_IRQHandler+0xc84>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d036      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a77      	ldr	r2, [pc, #476]	@ (8005df0 <HAL_DMA_IRQHandler+0xc88>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d031      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a76      	ldr	r2, [pc, #472]	@ (8005df4 <HAL_DMA_IRQHandler+0xc8c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d02c      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a74      	ldr	r2, [pc, #464]	@ (8005df8 <HAL_DMA_IRQHandler+0xc90>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d027      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a73      	ldr	r2, [pc, #460]	@ (8005dfc <HAL_DMA_IRQHandler+0xc94>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a71      	ldr	r2, [pc, #452]	@ (8005e00 <HAL_DMA_IRQHandler+0xc98>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01d      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a70      	ldr	r2, [pc, #448]	@ (8005e04 <HAL_DMA_IRQHandler+0xc9c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8005e08 <HAL_DMA_IRQHandler+0xca0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6d      	ldr	r2, [pc, #436]	@ (8005e0c <HAL_DMA_IRQHandler+0xca4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a6b      	ldr	r2, [pc, #428]	@ (8005e10 <HAL_DMA_IRQHandler+0xca8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8005e14 <HAL_DMA_IRQHandler+0xcac>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xb12>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a68      	ldr	r2, [pc, #416]	@ (8005e18 <HAL_DMA_IRQHandler+0xcb0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <HAL_DMA_IRQHandler+0xb24>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0208 	bic.w	r2, r2, #8
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e007      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb34>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8165 	beq.w	8005f70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cae:	e15f      	b.n	8005f70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	2202      	movs	r2, #2
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80c5 	beq.w	8005e50 <HAL_DMA_IRQHandler+0xce8>
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80bf 	beq.w	8005e50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2202      	movs	r2, #2
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d018      	beq.n	8005d1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 813a 	beq.w	8005f74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d08:	e134      	b.n	8005f74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8130 	beq.w	8005f74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d1c:	e12a      	b.n	8005f74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f040 8089 	bne.w	8005e3c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ddc <HAL_DMA_IRQHandler+0xc74>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d04a      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a29      	ldr	r2, [pc, #164]	@ (8005de0 <HAL_DMA_IRQHandler+0xc78>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d045      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a28      	ldr	r2, [pc, #160]	@ (8005de4 <HAL_DMA_IRQHandler+0xc7c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d040      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	@ (8005de8 <HAL_DMA_IRQHandler+0xc80>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d03b      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a25      	ldr	r2, [pc, #148]	@ (8005dec <HAL_DMA_IRQHandler+0xc84>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d036      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a23      	ldr	r2, [pc, #140]	@ (8005df0 <HAL_DMA_IRQHandler+0xc88>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d031      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	@ (8005df4 <HAL_DMA_IRQHandler+0xc8c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d02c      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a20      	ldr	r2, [pc, #128]	@ (8005df8 <HAL_DMA_IRQHandler+0xc90>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d027      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dfc <HAL_DMA_IRQHandler+0xc94>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <HAL_DMA_IRQHandler+0xc98>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01d      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1c      	ldr	r2, [pc, #112]	@ (8005e04 <HAL_DMA_IRQHandler+0xc9c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <HAL_DMA_IRQHandler+0xca0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a19      	ldr	r2, [pc, #100]	@ (8005e0c <HAL_DMA_IRQHandler+0xca4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <HAL_DMA_IRQHandler+0xca8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a16      	ldr	r2, [pc, #88]	@ (8005e14 <HAL_DMA_IRQHandler+0xcac>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_DMA_IRQHandler+0xc62>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a14      	ldr	r2, [pc, #80]	@ (8005e18 <HAL_DMA_IRQHandler+0xcb0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d128      	bne.n	8005e1c <HAL_DMA_IRQHandler+0xcb4>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0214 	bic.w	r2, r2, #20
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e027      	b.n	8005e2c <HAL_DMA_IRQHandler+0xcc4>
 8005ddc:	40020010 	.word	0x40020010
 8005de0:	40020028 	.word	0x40020028
 8005de4:	40020040 	.word	0x40020040
 8005de8:	40020058 	.word	0x40020058
 8005dec:	40020070 	.word	0x40020070
 8005df0:	40020088 	.word	0x40020088
 8005df4:	400200a0 	.word	0x400200a0
 8005df8:	400200b8 	.word	0x400200b8
 8005dfc:	40020410 	.word	0x40020410
 8005e00:	40020428 	.word	0x40020428
 8005e04:	40020440 	.word	0x40020440
 8005e08:	40020458 	.word	0x40020458
 8005e0c:	40020470 	.word	0x40020470
 8005e10:	40020488 	.word	0x40020488
 8005e14:	400204a0 	.word	0x400204a0
 8005e18:	400204b8 	.word	0x400204b8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 020a 	bic.w	r2, r2, #10
 8005e2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8097 	beq.w	8005f74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e4e:	e091      	b.n	8005f74 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	2208      	movs	r2, #8
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8088 	beq.w	8005f76 <HAL_DMA_IRQHandler+0xe0e>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8082 	beq.w	8005f76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a41      	ldr	r2, [pc, #260]	@ (8005f7c <HAL_DMA_IRQHandler+0xe14>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d04a      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a3f      	ldr	r2, [pc, #252]	@ (8005f80 <HAL_DMA_IRQHandler+0xe18>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d045      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f84 <HAL_DMA_IRQHandler+0xe1c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d040      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a3c      	ldr	r2, [pc, #240]	@ (8005f88 <HAL_DMA_IRQHandler+0xe20>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d03b      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8005f8c <HAL_DMA_IRQHandler+0xe24>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d036      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a39      	ldr	r2, [pc, #228]	@ (8005f90 <HAL_DMA_IRQHandler+0xe28>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d031      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a38      	ldr	r2, [pc, #224]	@ (8005f94 <HAL_DMA_IRQHandler+0xe2c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d02c      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a36      	ldr	r2, [pc, #216]	@ (8005f98 <HAL_DMA_IRQHandler+0xe30>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d027      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a35      	ldr	r2, [pc, #212]	@ (8005f9c <HAL_DMA_IRQHandler+0xe34>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a33      	ldr	r2, [pc, #204]	@ (8005fa0 <HAL_DMA_IRQHandler+0xe38>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01d      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a32      	ldr	r2, [pc, #200]	@ (8005fa4 <HAL_DMA_IRQHandler+0xe3c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a30      	ldr	r2, [pc, #192]	@ (8005fa8 <HAL_DMA_IRQHandler+0xe40>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2f      	ldr	r2, [pc, #188]	@ (8005fac <HAL_DMA_IRQHandler+0xe44>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb0 <HAL_DMA_IRQHandler+0xe48>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb4 <HAL_DMA_IRQHandler+0xe4c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xdaa>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb8 <HAL_DMA_IRQHandler+0xe50>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <HAL_DMA_IRQHandler+0xdbc>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 021c 	bic.w	r2, r2, #28
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e007      	b.n	8005f34 <HAL_DMA_IRQHandler+0xdcc>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 020e 	bic.w	r2, r2, #14
 8005f32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
 8005f6a:	e004      	b.n	8005f76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f6c:	bf00      	nop
 8005f6e:	e002      	b.n	8005f76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f76:	3728      	adds	r7, #40	@ 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8

08005fbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a7f      	ldr	r2, [pc, #508]	@ (80061d8 <DMA_SetConfig+0x21c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d072      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a7d      	ldr	r2, [pc, #500]	@ (80061dc <DMA_SetConfig+0x220>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d06d      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7c      	ldr	r2, [pc, #496]	@ (80061e0 <DMA_SetConfig+0x224>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d068      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80061e4 <DMA_SetConfig+0x228>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d063      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a79      	ldr	r2, [pc, #484]	@ (80061e8 <DMA_SetConfig+0x22c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d05e      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a77      	ldr	r2, [pc, #476]	@ (80061ec <DMA_SetConfig+0x230>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d059      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a76      	ldr	r2, [pc, #472]	@ (80061f0 <DMA_SetConfig+0x234>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d054      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a74      	ldr	r2, [pc, #464]	@ (80061f4 <DMA_SetConfig+0x238>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d04f      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a73      	ldr	r2, [pc, #460]	@ (80061f8 <DMA_SetConfig+0x23c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d04a      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a71      	ldr	r2, [pc, #452]	@ (80061fc <DMA_SetConfig+0x240>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d045      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a70      	ldr	r2, [pc, #448]	@ (8006200 <DMA_SetConfig+0x244>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d040      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6e      	ldr	r2, [pc, #440]	@ (8006204 <DMA_SetConfig+0x248>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d03b      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6d      	ldr	r2, [pc, #436]	@ (8006208 <DMA_SetConfig+0x24c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d036      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a6b      	ldr	r2, [pc, #428]	@ (800620c <DMA_SetConfig+0x250>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d031      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6a      	ldr	r2, [pc, #424]	@ (8006210 <DMA_SetConfig+0x254>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d02c      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a68      	ldr	r2, [pc, #416]	@ (8006214 <DMA_SetConfig+0x258>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d027      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a67      	ldr	r2, [pc, #412]	@ (8006218 <DMA_SetConfig+0x25c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d022      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a65      	ldr	r2, [pc, #404]	@ (800621c <DMA_SetConfig+0x260>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d01d      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a64      	ldr	r2, [pc, #400]	@ (8006220 <DMA_SetConfig+0x264>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d018      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a62      	ldr	r2, [pc, #392]	@ (8006224 <DMA_SetConfig+0x268>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a61      	ldr	r2, [pc, #388]	@ (8006228 <DMA_SetConfig+0x26c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00e      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5f      	ldr	r2, [pc, #380]	@ (800622c <DMA_SetConfig+0x270>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d009      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006230 <DMA_SetConfig+0x274>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a5c      	ldr	r2, [pc, #368]	@ (8006234 <DMA_SetConfig+0x278>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <DMA_SetConfig+0x10e>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <DMA_SetConfig+0x110>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80060d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a39      	ldr	r2, [pc, #228]	@ (80061d8 <DMA_SetConfig+0x21c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <DMA_SetConfig+0x1d0>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a38      	ldr	r2, [pc, #224]	@ (80061dc <DMA_SetConfig+0x220>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a36      	ldr	r2, [pc, #216]	@ (80061e0 <DMA_SetConfig+0x224>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a35      	ldr	r2, [pc, #212]	@ (80061e4 <DMA_SetConfig+0x228>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a33      	ldr	r2, [pc, #204]	@ (80061e8 <DMA_SetConfig+0x22c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a32      	ldr	r2, [pc, #200]	@ (80061ec <DMA_SetConfig+0x230>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <DMA_SetConfig+0x234>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2f      	ldr	r2, [pc, #188]	@ (80061f4 <DMA_SetConfig+0x238>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2d      	ldr	r2, [pc, #180]	@ (80061f8 <DMA_SetConfig+0x23c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2c      	ldr	r2, [pc, #176]	@ (80061fc <DMA_SetConfig+0x240>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2a      	ldr	r2, [pc, #168]	@ (8006200 <DMA_SetConfig+0x244>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a29      	ldr	r2, [pc, #164]	@ (8006204 <DMA_SetConfig+0x248>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a27      	ldr	r2, [pc, #156]	@ (8006208 <DMA_SetConfig+0x24c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a26      	ldr	r2, [pc, #152]	@ (800620c <DMA_SetConfig+0x250>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <DMA_SetConfig+0x254>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a23      	ldr	r2, [pc, #140]	@ (8006214 <DMA_SetConfig+0x258>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <DMA_SetConfig+0x1d4>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <DMA_SetConfig+0x1d6>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d059      	beq.n	800624a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	223f      	movs	r2, #63	@ 0x3f
 80061a0:	409a      	lsls	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d138      	bne.n	8006238 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061d6:	e086      	b.n	80062e6 <DMA_SetConfig+0x32a>
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
 8006218:	58025408 	.word	0x58025408
 800621c:	5802541c 	.word	0x5802541c
 8006220:	58025430 	.word	0x58025430
 8006224:	58025444 	.word	0x58025444
 8006228:	58025458 	.word	0x58025458
 800622c:	5802546c 	.word	0x5802546c
 8006230:	58025480 	.word	0x58025480
 8006234:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	60da      	str	r2, [r3, #12]
}
 8006248:	e04d      	b.n	80062e6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a29      	ldr	r2, [pc, #164]	@ (80062f4 <DMA_SetConfig+0x338>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <DMA_SetConfig+0x2de>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a27      	ldr	r2, [pc, #156]	@ (80062f8 <DMA_SetConfig+0x33c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <DMA_SetConfig+0x2de>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a26      	ldr	r2, [pc, #152]	@ (80062fc <DMA_SetConfig+0x340>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <DMA_SetConfig+0x2de>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a24      	ldr	r2, [pc, #144]	@ (8006300 <DMA_SetConfig+0x344>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <DMA_SetConfig+0x2de>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a23      	ldr	r2, [pc, #140]	@ (8006304 <DMA_SetConfig+0x348>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <DMA_SetConfig+0x2de>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a21      	ldr	r2, [pc, #132]	@ (8006308 <DMA_SetConfig+0x34c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <DMA_SetConfig+0x2de>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a20      	ldr	r2, [pc, #128]	@ (800630c <DMA_SetConfig+0x350>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <DMA_SetConfig+0x2de>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1e      	ldr	r2, [pc, #120]	@ (8006310 <DMA_SetConfig+0x354>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <DMA_SetConfig+0x2e2>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <DMA_SetConfig+0x2e4>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b40      	cmp	r3, #64	@ 0x40
 80062c2:	d108      	bne.n	80062d6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	60da      	str	r2, [r3, #12]
}
 80062d4:	e007      	b.n	80062e6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	60da      	str	r2, [r3, #12]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	58025408 	.word	0x58025408
 80062f8:	5802541c 	.word	0x5802541c
 80062fc:	58025430 	.word	0x58025430
 8006300:	58025444 	.word	0x58025444
 8006304:	58025458 	.word	0x58025458
 8006308:	5802546c 	.word	0x5802546c
 800630c:	58025480 	.word	0x58025480
 8006310:	58025494 	.word	0x58025494

08006314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a42      	ldr	r2, [pc, #264]	@ (800642c <DMA_CalcBaseAndBitshift+0x118>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d04a      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a41      	ldr	r2, [pc, #260]	@ (8006430 <DMA_CalcBaseAndBitshift+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d045      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3f      	ldr	r2, [pc, #252]	@ (8006434 <DMA_CalcBaseAndBitshift+0x120>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d040      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3e      	ldr	r2, [pc, #248]	@ (8006438 <DMA_CalcBaseAndBitshift+0x124>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d03b      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a3c      	ldr	r2, [pc, #240]	@ (800643c <DMA_CalcBaseAndBitshift+0x128>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d036      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3b      	ldr	r2, [pc, #236]	@ (8006440 <DMA_CalcBaseAndBitshift+0x12c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d031      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a39      	ldr	r2, [pc, #228]	@ (8006444 <DMA_CalcBaseAndBitshift+0x130>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d02c      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a38      	ldr	r2, [pc, #224]	@ (8006448 <DMA_CalcBaseAndBitshift+0x134>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d027      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a36      	ldr	r2, [pc, #216]	@ (800644c <DMA_CalcBaseAndBitshift+0x138>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d022      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a35      	ldr	r2, [pc, #212]	@ (8006450 <DMA_CalcBaseAndBitshift+0x13c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01d      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a33      	ldr	r2, [pc, #204]	@ (8006454 <DMA_CalcBaseAndBitshift+0x140>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d018      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a32      	ldr	r2, [pc, #200]	@ (8006458 <DMA_CalcBaseAndBitshift+0x144>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a30      	ldr	r2, [pc, #192]	@ (800645c <DMA_CalcBaseAndBitshift+0x148>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006460 <DMA_CalcBaseAndBitshift+0x14c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006464 <DMA_CalcBaseAndBitshift+0x150>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <DMA_CalcBaseAndBitshift+0x154>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <DMA_CalcBaseAndBitshift+0xac>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <DMA_CalcBaseAndBitshift+0xae>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d024      	beq.n	8006410 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	3b10      	subs	r3, #16
 80063ce:	4a27      	ldr	r2, [pc, #156]	@ (800646c <DMA_CalcBaseAndBitshift+0x158>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	4a24      	ldr	r2, [pc, #144]	@ (8006470 <DMA_CalcBaseAndBitshift+0x15c>)
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	461a      	mov	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d908      	bls.n	8006400 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006474 <DMA_CalcBaseAndBitshift+0x160>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80063fe:	e00d      	b.n	800641c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	4b1b      	ldr	r3, [pc, #108]	@ (8006474 <DMA_CalcBaseAndBitshift+0x160>)
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6593      	str	r3, [r2, #88]	@ 0x58
 800640e:	e005      	b.n	800641c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40020010 	.word	0x40020010
 8006430:	40020028 	.word	0x40020028
 8006434:	40020040 	.word	0x40020040
 8006438:	40020058 	.word	0x40020058
 800643c:	40020070 	.word	0x40020070
 8006440:	40020088 	.word	0x40020088
 8006444:	400200a0 	.word	0x400200a0
 8006448:	400200b8 	.word	0x400200b8
 800644c:	40020410 	.word	0x40020410
 8006450:	40020428 	.word	0x40020428
 8006454:	40020440 	.word	0x40020440
 8006458:	40020458 	.word	0x40020458
 800645c:	40020470 	.word	0x40020470
 8006460:	40020488 	.word	0x40020488
 8006464:	400204a0 	.word	0x400204a0
 8006468:	400204b8 	.word	0x400204b8
 800646c:	aaaaaaab 	.word	0xaaaaaaab
 8006470:	0801dbf4 	.word	0x0801dbf4
 8006474:	fffffc00 	.word	0xfffffc00

08006478 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d120      	bne.n	80064ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	2b03      	cmp	r3, #3
 8006492:	d858      	bhi.n	8006546 <DMA_CheckFifoParam+0xce>
 8006494:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <DMA_CheckFifoParam+0x24>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064bf 	.word	0x080064bf
 80064a4:	080064ad 	.word	0x080064ad
 80064a8:	08006547 	.word	0x08006547
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d048      	beq.n	800654a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064bc:	e045      	b.n	800654a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064c6:	d142      	bne.n	800654e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064cc:	e03f      	b.n	800654e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064d6:	d123      	bne.n	8006520 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d838      	bhi.n	8006552 <DMA_CheckFifoParam+0xda>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <DMA_CheckFifoParam+0x70>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	080064ff 	.word	0x080064ff
 80064f0:	080064f9 	.word	0x080064f9
 80064f4:	08006511 	.word	0x08006511
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
        break;
 80064fc:	e030      	b.n	8006560 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d025      	beq.n	8006556 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800650e:	e022      	b.n	8006556 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006518:	d11f      	bne.n	800655a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800651e:	e01c      	b.n	800655a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	2b02      	cmp	r3, #2
 8006526:	d902      	bls.n	800652e <DMA_CheckFifoParam+0xb6>
 8006528:	2b03      	cmp	r3, #3
 800652a:	d003      	beq.n	8006534 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800652c:	e018      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
        break;
 8006532:	e015      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
    break;
 8006544:	e00b      	b.n	800655e <DMA_CheckFifoParam+0xe6>
        break;
 8006546:	bf00      	nop
 8006548:	e00a      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 800654a:	bf00      	nop
 800654c:	e008      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 800654e:	bf00      	nop
 8006550:	e006      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 8006552:	bf00      	nop
 8006554:	e004      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 8006556:	bf00      	nop
 8006558:	e002      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
    break;
 800655e:	bf00      	nop
    }
  }

  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a38      	ldr	r2, [pc, #224]	@ (8006664 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	@ (8006668 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a35      	ldr	r2, [pc, #212]	@ (800666c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a33      	ldr	r2, [pc, #204]	@ (8006670 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	@ (8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a30      	ldr	r2, [pc, #192]	@ (8006678 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2f      	ldr	r2, [pc, #188]	@ (800667c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01a      	beq.n	800660e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	3b08      	subs	r3, #8
 80065e0:	4a28      	ldr	r2, [pc, #160]	@ (8006684 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	091b      	lsrs	r3, r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4b26      	ldr	r3, [pc, #152]	@ (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a24      	ldr	r2, [pc, #144]	@ (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2201      	movs	r2, #1
 8006606:	409a      	lsls	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800660c:	e024      	b.n	8006658 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	3b10      	subs	r3, #16
 8006616:	4a1e      	ldr	r2, [pc, #120]	@ (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a1c      	ldr	r2, [pc, #112]	@ (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d806      	bhi.n	8006636 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d902      	bls.n	8006636 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3308      	adds	r3, #8
 8006634:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4b18      	ldr	r3, [pc, #96]	@ (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a16      	ldr	r2, [pc, #88]	@ (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006648:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2201      	movs	r2, #1
 8006652:	409a      	lsls	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	58025408 	.word	0x58025408
 8006668:	5802541c 	.word	0x5802541c
 800666c:	58025430 	.word	0x58025430
 8006670:	58025444 	.word	0x58025444
 8006674:	58025458 	.word	0x58025458
 8006678:	5802546c 	.word	0x5802546c
 800667c:	58025480 	.word	0x58025480
 8006680:	58025494 	.word	0x58025494
 8006684:	cccccccd 	.word	0xcccccccd
 8006688:	16009600 	.word	0x16009600
 800668c:	58025880 	.word	0x58025880
 8006690:	aaaaaaab 	.word	0xaaaaaaab
 8006694:	400204b8 	.word	0x400204b8
 8006698:	4002040f 	.word	0x4002040f
 800669c:	10008200 	.word	0x10008200
 80066a0:	40020880 	.word	0x40020880

080066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d04a      	beq.n	8006750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d847      	bhi.n	8006750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a25      	ldr	r2, [pc, #148]	@ (800675c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d022      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a24      	ldr	r2, [pc, #144]	@ (8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01d      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a22      	ldr	r2, [pc, #136]	@ (8006764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d018      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a21      	ldr	r2, [pc, #132]	@ (8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1f      	ldr	r2, [pc, #124]	@ (800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00e      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1c      	ldr	r2, [pc, #112]	@ (8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d101      	bne.n	8006714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4b17      	ldr	r3, [pc, #92]	@ (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800672c:	671a      	str	r2, [r3, #112]	@ 0x70
 800672e:	e009      	b.n	8006744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	461a      	mov	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a11      	ldr	r2, [pc, #68]	@ (8006788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006742:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b01      	subs	r3, #1
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	58025408 	.word	0x58025408
 8006760:	5802541c 	.word	0x5802541c
 8006764:	58025430 	.word	0x58025430
 8006768:	58025444 	.word	0x58025444
 800676c:	58025458 	.word	0x58025458
 8006770:	5802546c 	.word	0x5802546c
 8006774:	58025480 	.word	0x58025480
 8006778:	58025494 	.word	0x58025494
 800677c:	1600963f 	.word	0x1600963f
 8006780:	58025940 	.word	0x58025940
 8006784:	1000823f 	.word	0x1000823f
 8006788:	40020940 	.word	0x40020940

0800678c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	@ 0x24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800679a:	4b86      	ldr	r3, [pc, #536]	@ (80069b4 <HAL_GPIO_Init+0x228>)
 800679c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800679e:	e18c      	b.n	8006aba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	2101      	movs	r1, #1
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 817e 	beq.w	8006ab4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d005      	beq.n	80067d0 <HAL_GPIO_Init+0x44>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d130      	bne.n	8006832 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	2203      	movs	r2, #3
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4013      	ands	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006806:	2201      	movs	r2, #1
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43db      	mvns	r3, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4013      	ands	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	f003 0201 	and.w	r2, r3, #1
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b03      	cmp	r3, #3
 800683c:	d017      	beq.n	800686e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	2203      	movs	r2, #3
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4313      	orrs	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d123      	bne.n	80068c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	08da      	lsrs	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3208      	adds	r2, #8
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	220f      	movs	r2, #15
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43db      	mvns	r3, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	4013      	ands	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	08da      	lsrs	r2, r3, #3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3208      	adds	r2, #8
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	2203      	movs	r2, #3
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43db      	mvns	r3, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4013      	ands	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 0203 	and.w	r2, r3, #3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80d8 	beq.w	8006ab4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006904:	4b2c      	ldr	r3, [pc, #176]	@ (80069b8 <HAL_GPIO_Init+0x22c>)
 8006906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800690a:	4a2b      	ldr	r2, [pc, #172]	@ (80069b8 <HAL_GPIO_Init+0x22c>)
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006914:	4b28      	ldr	r3, [pc, #160]	@ (80069b8 <HAL_GPIO_Init+0x22c>)
 8006916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006922:	4a26      	ldr	r2, [pc, #152]	@ (80069bc <HAL_GPIO_Init+0x230>)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	089b      	lsrs	r3, r3, #2
 8006928:	3302      	adds	r3, #2
 800692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	220f      	movs	r2, #15
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43db      	mvns	r3, r3
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	4013      	ands	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1d      	ldr	r2, [pc, #116]	@ (80069c0 <HAL_GPIO_Init+0x234>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d04a      	beq.n	80069e4 <HAL_GPIO_Init+0x258>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1c      	ldr	r2, [pc, #112]	@ (80069c4 <HAL_GPIO_Init+0x238>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d02b      	beq.n	80069ae <HAL_GPIO_Init+0x222>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <HAL_GPIO_Init+0x23c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d025      	beq.n	80069aa <HAL_GPIO_Init+0x21e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1a      	ldr	r2, [pc, #104]	@ (80069cc <HAL_GPIO_Init+0x240>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01f      	beq.n	80069a6 <HAL_GPIO_Init+0x21a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a19      	ldr	r2, [pc, #100]	@ (80069d0 <HAL_GPIO_Init+0x244>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d019      	beq.n	80069a2 <HAL_GPIO_Init+0x216>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a18      	ldr	r2, [pc, #96]	@ (80069d4 <HAL_GPIO_Init+0x248>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d013      	beq.n	800699e <HAL_GPIO_Init+0x212>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <HAL_GPIO_Init+0x24c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00d      	beq.n	800699a <HAL_GPIO_Init+0x20e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <HAL_GPIO_Init+0x250>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <HAL_GPIO_Init+0x20a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <HAL_GPIO_Init+0x254>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d101      	bne.n	8006992 <HAL_GPIO_Init+0x206>
 800698e:	2309      	movs	r3, #9
 8006990:	e029      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 8006992:	230a      	movs	r3, #10
 8006994:	e027      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 8006996:	2307      	movs	r3, #7
 8006998:	e025      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 800699a:	2306      	movs	r3, #6
 800699c:	e023      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 800699e:	2305      	movs	r3, #5
 80069a0:	e021      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 80069a2:	2304      	movs	r3, #4
 80069a4:	e01f      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 80069a6:	2303      	movs	r3, #3
 80069a8:	e01d      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e01b      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e019      	b.n	80069e6 <HAL_GPIO_Init+0x25a>
 80069b2:	bf00      	nop
 80069b4:	58000080 	.word	0x58000080
 80069b8:	58024400 	.word	0x58024400
 80069bc:	58000400 	.word	0x58000400
 80069c0:	58020000 	.word	0x58020000
 80069c4:	58020400 	.word	0x58020400
 80069c8:	58020800 	.word	0x58020800
 80069cc:	58020c00 	.word	0x58020c00
 80069d0:	58021000 	.word	0x58021000
 80069d4:	58021400 	.word	0x58021400
 80069d8:	58021800 	.word	0x58021800
 80069dc:	58021c00 	.word	0x58021c00
 80069e0:	58022400 	.word	0x58022400
 80069e4:	2300      	movs	r3, #0
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	f002 0203 	and.w	r2, r2, #3
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	4093      	lsls	r3, r2
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069f6:	4938      	ldr	r1, [pc, #224]	@ (8006ad8 <HAL_GPIO_Init+0x34c>)
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	3302      	adds	r3, #2
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4013      	ands	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	43db      	mvns	r3, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4013      	ands	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f ae6b 	bne.w	80067a0 <HAL_GPIO_Init+0x14>
  }
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	3724      	adds	r7, #36	@ 0x24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	58000400 	.word	0x58000400

08006adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006aec:	787b      	ldrb	r3, [r7, #1]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006af2:	887a      	ldrh	r2, [r7, #2]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006af8:	e003      	b.n	8006b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006afa:	887b      	ldrh	r3, [r7, #2]
 8006afc:	041a      	lsls	r2, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	619a      	str	r2, [r3, #24]
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	4603      	mov	r3, r0
 8006b16:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7f9 fe09 	bl	800074c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e08b      	b.n	8006c6e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fa ffb2 	bl	8001ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	@ 0x24
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d107      	bne.n	8006bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	e006      	b.n	8006bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d108      	bne.n	8006be6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	e007      	b.n	8006bf6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6859      	ldr	r1, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4b1d      	ldr	r3, [pc, #116]	@ (8006c78 <HAL_I2C_Init+0x134>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69d9      	ldr	r1, [r3, #28]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	02008000 	.word	0x02008000

08006c7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	461a      	mov	r2, r3
 8006c88:	460b      	mov	r3, r1
 8006c8a:	817b      	strh	r3, [r7, #10]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	f040 80fd 	bne.w	8006e98 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_I2C_Master_Transmit+0x30>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e0f6      	b.n	8006e9a <HAL_I2C_Master_Transmit+0x21e>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cb4:	f7fd f838 	bl	8003d28 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	2319      	movs	r3, #25
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fa0a 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e0e1      	b.n	8006e9a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2221      	movs	r2, #33	@ 0x21
 8006cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	893a      	ldrh	r2, [r7, #8]
 8006cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2bff      	cmp	r3, #255	@ 0xff
 8006d06:	d906      	bls.n	8006d16 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	22ff      	movs	r2, #255	@ 0xff
 8006d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006d0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e007      	b.n	8006d26 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006d20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d024      	beq.n	8006d78 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	3301      	adds	r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	8979      	ldrh	r1, [r7, #10]
 8006d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8006ea4 <HAL_I2C_Master_Transmit+0x228>)
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fc05 	bl	8007580 <I2C_TransferConfig>
 8006d76:	e066      	b.n	8006e46 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	8979      	ldrh	r1, [r7, #10]
 8006d80:	4b48      	ldr	r3, [pc, #288]	@ (8006ea4 <HAL_I2C_Master_Transmit+0x228>)
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fbfa 	bl	8007580 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006d8c:	e05b      	b.n	8006e46 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	6a39      	ldr	r1, [r7, #32]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 f9fd 	bl	8007192 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e07b      	b.n	8006e9a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	781a      	ldrb	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d034      	beq.n	8006e46 <HAL_I2C_Master_Transmit+0x1ca>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d130      	bne.n	8006e46 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	2200      	movs	r2, #0
 8006dec:	2180      	movs	r1, #128	@ 0x80
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f976 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e04d      	b.n	8006e9a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2bff      	cmp	r3, #255	@ 0xff
 8006e06:	d90e      	bls.n	8006e26 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	22ff      	movs	r2, #255	@ 0xff
 8006e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	8979      	ldrh	r1, [r7, #10]
 8006e16:	2300      	movs	r3, #0
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fbae 	bl	8007580 <I2C_TransferConfig>
 8006e24:	e00f      	b.n	8006e46 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	8979      	ldrh	r1, [r7, #10]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fb9d 	bl	8007580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d19e      	bne.n	8006d8e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	6a39      	ldr	r1, [r7, #32]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f9e3 	bl	8007220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e01a      	b.n	8006e9a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <HAL_I2C_Master_Transmit+0x22c>)
 8006e78:	400b      	ands	r3, r1
 8006e7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	80002000 	.word	0x80002000
 8006ea8:	fe00e800 	.word	0xfe00e800

08006eac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	460b      	mov	r3, r1
 8006eba:	817b      	strh	r3, [r7, #10]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	f040 80db 	bne.w	8007084 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_I2C_Master_Receive+0x30>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e0d4      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ee4:	f7fc ff20 	bl	8003d28 <HAL_GetTick>
 8006ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2319      	movs	r3, #25
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f8f2 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e0bf      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2222      	movs	r2, #34	@ 0x22
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2210      	movs	r2, #16
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	893a      	ldrh	r2, [r7, #8]
 8006f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2bff      	cmp	r3, #255	@ 0xff
 8006f36:	d90e      	bls.n	8006f56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	22ff      	movs	r2, #255	@ 0xff
 8006f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	8979      	ldrh	r1, [r7, #10]
 8006f46:	4b52      	ldr	r3, [pc, #328]	@ (8007090 <HAL_I2C_Master_Receive+0x1e4>)
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fb16 	bl	8007580 <I2C_TransferConfig>
 8006f54:	e06d      	b.n	8007032 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	8979      	ldrh	r1, [r7, #10]
 8006f68:	4b49      	ldr	r3, [pc, #292]	@ (8007090 <HAL_I2C_Master_Receive+0x1e4>)
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fb05 	bl	8007580 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006f76:	e05c      	b.n	8007032 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	6a39      	ldr	r1, [r7, #32]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f993 	bl	80072a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e07c      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d034      	beq.n	8007032 <HAL_I2C_Master_Receive+0x186>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d130      	bne.n	8007032 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2180      	movs	r1, #128	@ 0x80
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f880 	bl	80070e0 <I2C_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e04d      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2bff      	cmp	r3, #255	@ 0xff
 8006ff2:	d90e      	bls.n	8007012 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	22ff      	movs	r2, #255	@ 0xff
 8006ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	8979      	ldrh	r1, [r7, #10]
 8007002:	2300      	movs	r3, #0
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fab8 	bl	8007580 <I2C_TransferConfig>
 8007010:	e00f      	b.n	8007032 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	b2da      	uxtb	r2, r3
 8007022:	8979      	ldrh	r1, [r7, #10]
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 faa7 	bl	8007580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d19d      	bne.n	8006f78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	6a39      	ldr	r1, [r7, #32]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f8ed 	bl	8007220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e01a      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2220      	movs	r2, #32
 8007056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <HAL_I2C_Master_Receive+0x1e8>)
 8007064:	400b      	ands	r3, r1
 8007066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	e000      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	80002400 	.word	0x80002400
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d007      	beq.n	80070d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	619a      	str	r2, [r3, #24]
  }
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f0:	e03b      	b.n	800716a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f962 	bl	80073c0 <I2C_IsErrorOccurred>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e041      	b.n	800718a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d02d      	beq.n	800716a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710e:	f7fc fe0b 	bl	8003d28 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <I2C_WaitOnFlagUntilTimeout+0x44>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d122      	bne.n	800716a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	bf0c      	ite	eq
 8007134:	2301      	moveq	r3, #1
 8007136:	2300      	movne	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	429a      	cmp	r2, r3
 8007140:	d113      	bne.n	800716a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007146:	f043 0220 	orr.w	r2, r3, #32
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e00f      	b.n	800718a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699a      	ldr	r2, [r3, #24]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4013      	ands	r3, r2
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	bf0c      	ite	eq
 800717a:	2301      	moveq	r3, #1
 800717c:	2300      	movne	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	429a      	cmp	r2, r3
 8007186:	d0b4      	beq.n	80070f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800719e:	e033      	b.n	8007208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f90b 	bl	80073c0 <I2C_IsErrorOccurred>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e031      	b.n	8007218 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ba:	d025      	beq.n	8007208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071bc:	f7fc fdb4 	bl	8003d28 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d302      	bcc.n	80071d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11a      	bne.n	8007208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d013      	beq.n	8007208 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e4:	f043 0220 	orr.w	r2, r3, #32
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e007      	b.n	8007218 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b02      	cmp	r3, #2
 8007214:	d1c4      	bne.n	80071a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800722c:	e02f      	b.n	800728e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f8c4 	bl	80073c0 <I2C_IsErrorOccurred>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e02d      	b.n	800729e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007242:	f7fc fd71 	bl	8003d28 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	429a      	cmp	r2, r3
 8007250:	d302      	bcc.n	8007258 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11a      	bne.n	800728e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b20      	cmp	r3, #32
 8007264:	d013      	beq.n	800728e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726a:	f043 0220 	orr.w	r2, r3, #32
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e007      	b.n	800729e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b20      	cmp	r3, #32
 800729a:	d1c8      	bne.n	800722e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80072b8:	e071      	b.n	800739e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f87e 	bl	80073c0 <I2C_IsErrorOccurred>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d13b      	bne.n	8007354 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d138      	bne.n	8007354 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d105      	bne.n	80072fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b10      	cmp	r3, #16
 8007308:	d121      	bne.n	800734e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2210      	movs	r2, #16
 8007310:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2204      	movs	r2, #4
 8007316:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2220      	movs	r2, #32
 800731e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6859      	ldr	r1, [r3, #4]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	4b24      	ldr	r3, [pc, #144]	@ (80073bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800732c:	400b      	ands	r3, r1
 800732e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
 800734c:	e002      	b.n	8007354 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007354:	f7fc fce8 	bl	8003d28 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d119      	bne.n	800739e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d116      	bne.n	800739e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d00f      	beq.n	800739e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d002      	beq.n	80073b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d083      	beq.n	80072ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	fe00e800 	.word	0xfe00e800

080073c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08a      	sub	sp, #40	@ 0x28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d068      	beq.n	80074be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2210      	movs	r2, #16
 80073f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073f4:	e049      	b.n	800748a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fc:	d045      	beq.n	800748a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073fe:	f7fc fc93 	bl	8003d28 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	d302      	bcc.n	8007414 <I2C_IsErrorOccurred+0x54>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d13a      	bne.n	800748a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800741e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007426:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007436:	d121      	bne.n	800747c <I2C_IsErrorOccurred+0xbc>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800743e:	d01d      	beq.n	800747c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007440:	7cfb      	ldrb	r3, [r7, #19]
 8007442:	2b20      	cmp	r3, #32
 8007444:	d01a      	beq.n	800747c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007454:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007456:	f7fc fc67 	bl	8003d28 <HAL_GetTick>
 800745a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800745c:	e00e      	b.n	800747c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800745e:	f7fc fc63 	bl	8003d28 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b19      	cmp	r3, #25
 800746a:	d907      	bls.n	800747c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f043 0320 	orr.w	r3, r3, #32
 8007472:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800747a:	e006      	b.n	800748a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b20      	cmp	r3, #32
 8007488:	d1e9      	bne.n	800745e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b20      	cmp	r3, #32
 8007496:	d003      	beq.n	80074a0 <I2C_IsErrorOccurred+0xe0>
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0aa      	beq.n	80073f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2220      	movs	r2, #32
 80074ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	f043 0304 	orr.w	r3, r3, #4
 80074b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f043 0308 	orr.w	r3, r3, #8
 80074f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007502:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f043 0302 	orr.w	r3, r3, #2
 800751a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01c      	beq.n	800756e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fdaf 	bl	8007098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <I2C_IsErrorOccurred+0x1bc>)
 8007546:	400b      	ands	r3, r1
 8007548:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800756e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007572:	4618      	mov	r0, r3
 8007574:	3728      	adds	r7, #40	@ 0x28
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	fe00e800 	.word	0xfe00e800

08007580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	4613      	mov	r3, r2
 8007590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007592:	897b      	ldrh	r3, [r7, #10]
 8007594:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007598:	7a7b      	ldrb	r3, [r7, #9]
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ae:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	0d5b      	lsrs	r3, r3, #21
 80075ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80075be:	4b08      	ldr	r3, [pc, #32]	@ (80075e0 <I2C_TransferConfig+0x60>)
 80075c0:	430b      	orrs	r3, r1
 80075c2:	43db      	mvns	r3, r3
 80075c4:	ea02 0103 	and.w	r1, r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	03ff63ff 	.word	0x03ff63ff

080075e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d138      	bne.n	800766c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007604:	2302      	movs	r3, #2
 8007606:	e032      	b.n	800766e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2224      	movs	r2, #36	@ 0x24
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0201 	bic.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b20      	cmp	r3, #32
 800768e:	d139      	bne.n	8007704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800769a:	2302      	movs	r3, #2
 800769c:	e033      	b.n	8007706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2224      	movs	r2, #36	@ 0x24
 80076aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0201 	bic.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	e000      	b.n	8007706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
  }
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
	...

08007714 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e11a      	b.n	800795c <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fa fa82 	bl	8001c44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b01      	cmp	r3, #1
 8007754:	d107      	bne.n	8007766 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b04      	cmp	r3, #4
 8007774:	d008      	beq.n	8007788 <HAL_I2S_Init+0x74>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2b06      	cmp	r3, #6
 800777c:	d004      	beq.n	8007788 <HAL_I2S_Init+0x74>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b0a      	cmp	r3, #10
 8007784:	f040 8094 	bne.w	80078b0 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d067      	beq.n	8007860 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8007798:	2302      	movs	r3, #2
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e001      	b.n	80077a2 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2b30      	cmp	r3, #48	@ 0x30
 80077a8:	d003      	beq.n	80077b2 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80077ae:	2bb0      	cmp	r3, #176	@ 0xb0
 80077b0:	d102      	bne.n	80077b8 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80077b2:	2301      	movs	r3, #1
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	e001      	b.n	80077bc <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a68      	ldr	r2, [pc, #416]	@ (8007964 <HAL_I2S_Init+0x250>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d107      	bne.n	80077d6 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80077c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80077ca:	f04f 0100 	mov.w	r1, #0
 80077ce:	f003 fbdd 	bl	800af8c <HAL_RCCEx_GetPeriphCLKFreq>
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	e006      	b.n	80077e4 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80077d6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80077da:	f04f 0100 	mov.w	r1, #0
 80077de:	f003 fbd5 	bl	800af8c <HAL_RCCEx_GetPeriphCLKFreq>
 80077e2:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077ec:	d113      	bne.n	8007816 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80077ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	3305      	adds	r3, #5
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	e014      	b.n	8007840 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8007816:	2220      	movs	r2, #32
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	fbb2 f2f3 	udiv	r2, r2, r3
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	fbb2 f3f3 	udiv	r3, r2, r3
 800783c:	3305      	adds	r3, #5
 800783e:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4a49      	ldr	r2, [pc, #292]	@ (8007968 <HAL_I2S_Init+0x254>)
 8007844:	fba2 2303 	umull	r2, r3, r2, r3
 8007848:	08db      	lsrs	r3, r3, #3
 800784a:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	e003      	b.n	8007868 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8007860:	2302      	movs	r3, #2
 8007862:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8007864:	2300      	movs	r3, #0
 8007866:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d102      	bne.n	8007874 <HAL_I2S_Init+0x160>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d002      	beq.n	800787a <HAL_I2S_Init+0x166>
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2bff      	cmp	r3, #255	@ 0xff
 8007878:	d907      	bls.n	800788a <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787e:	f043 0210 	orr.w	r2, r3, #16
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e068      	b.n	800795c <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8007890:	2301      	movs	r3, #1
 8007892:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800789a:	4b34      	ldr	r3, [pc, #208]	@ (800796c <HAL_I2S_Init+0x258>)
 800789c:	4013      	ands	r3, r2
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	0411      	lsls	r1, r2, #16
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	0612      	lsls	r2, r2, #24
 80078a6:	4311      	orrs	r1, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007970 <HAL_I2S_Init+0x25c>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6851      	ldr	r1, [r2, #4]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6892      	ldr	r2, [r2, #8]
 80078c2:	4311      	orrs	r1, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	68d2      	ldr	r2, [r2, #12]
 80078c8:	4311      	orrs	r1, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6992      	ldr	r2, [r2, #24]
 80078ce:	4311      	orrs	r1, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6a12      	ldr	r2, [r2, #32]
 80078d4:	4311      	orrs	r1, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078da:	4311      	orrs	r1, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6912      	ldr	r2, [r2, #16]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80078f6:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007906:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69da      	ldr	r2, [r3, #28]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b04      	cmp	r3, #4
 8007924:	d007      	beq.n	8007936 <HAL_I2S_Init+0x222>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b06      	cmp	r3, #6
 800792c:	d003      	beq.n	8007936 <HAL_I2S_Init+0x222>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b0a      	cmp	r3, #10
 8007934:	d10a      	bne.n	800794c <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58001400 	.word	0x58001400
 8007968:	cccccccd 	.word	0xcccccccd
 800796c:	fe00ffff 	.word	0xfe00ffff
 8007970:	fdff9040 	.word	0xfdff9040

08007974 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_I2S_Receive_DMA+0x1e>
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e086      	b.n	8007aa4 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d001      	beq.n	80079a6 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
 80079a4:	e07e      	b.n	8007aa4 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_I2S_Receive_DMA+0x42>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e076      	b.n	8007aa4 <HAL_I2S_Receive_DMA+0x130>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2204      	movs	r2, #4
 80079c2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f4:	4a2d      	ldr	r2, [pc, #180]	@ (8007aac <HAL_I2S_Receive_DMA+0x138>)
 80079f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fc:	4a2c      	ldr	r2, [pc, #176]	@ (8007ab0 <HAL_I2S_Receive_DMA+0x13c>)
 80079fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a04:	4a2b      	ldr	r2, [pc, #172]	@ (8007ab4 <HAL_I2S_Receive_DMA+0x140>)
 8007a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3330      	adds	r3, #48	@ 0x30
 8007a12:	4619      	mov	r1, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a18:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007a1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007a20:	f7fc fe1a 	bl	8004658 <HAL_DMA_Start_IT>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d011      	beq.n	8007a4e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a2e:	f043 0208 	orr.w	r2, r3, #8
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	e02a      	b.n	8007aa4 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a6a:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d107      	bne.n	8007a8a <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a98:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	08007bad 	.word	0x08007bad
 8007ab0:	08007b6b 	.word	0x08007b6b
 8007ab4:	08007bc9 	.word	0x08007bc9

08007ab8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ad2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ae2:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00f      	beq.n	8007b0c <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fd f81b 	bl	8004b2c <HAL_DMA_Abort>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b00:	f043 0208 	orr.w	r2, r3, #8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fd f807 	bl	8004b2c <HAL_DMA_Abort>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b28:	f043 0208 	orr.w	r2, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0201 	bic.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10e      	bne.n	8007b9e <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b8e:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7f9 fbe2 	bl	8001368 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7f9 fbc4 	bl	8001348 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007be4:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfe:	f043 0208 	orr.w	r2, r3, #8
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ffa5 	bl	8007b56 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e0fe      	b.n	8007e24 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fa fab8 	bl	80021b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2203      	movs	r2, #3
 8007c44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f009 fd9f 	bl	8011790 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7c1a      	ldrb	r2, [r3, #16]
 8007c5a:	f88d 2000 	strb.w	r2, [sp]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c62:	f009 fc81 	bl	8011568 <USB_CoreInit>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0d5      	b.n	8007e24 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f009 fd97 	bl	80117b2 <USB_SetCurrentMode>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e0c6      	b.n	8007e24 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]
 8007c9a:	e04a      	b.n	8007d32 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c9c:	7bfa      	ldrb	r2, [r7, #15]
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	3315      	adds	r3, #21
 8007cac:	2201      	movs	r2, #1
 8007cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cb0:	7bfa      	ldrb	r2, [r7, #15]
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	3314      	adds	r3, #20
 8007cc0:	7bfa      	ldrb	r2, [r7, #15]
 8007cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	b298      	uxth	r0, r3
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	332e      	adds	r3, #46	@ 0x2e
 8007cd8:	4602      	mov	r2, r0
 8007cda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cdc:	7bfa      	ldrb	r2, [r7, #15]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	3318      	adds	r3, #24
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007cf0:	7bfa      	ldrb	r2, [r7, #15]
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	331c      	adds	r3, #28
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d04:	7bfa      	ldrb	r2, [r7, #15]
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	3320      	adds	r3, #32
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d18:	7bfa      	ldrb	r2, [r7, #15]
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	3324      	adds	r3, #36	@ 0x24
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	7bfa      	ldrb	r2, [r7, #15]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d3af      	bcc.n	8007c9c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
 8007d40:	e044      	b.n	8007dcc <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d58:	7bfa      	ldrb	r2, [r7, #15]
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007d6a:	7bfa      	ldrb	r2, [r7, #15]
 8007d6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d6e:	7bfa      	ldrb	r2, [r7, #15]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d84:	7bfa      	ldrb	r2, [r7, #15]
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d9a:	7bfa      	ldrb	r2, [r7, #15]
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007db0:	7bfa      	ldrb	r2, [r7, #15]
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	4613      	mov	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	791b      	ldrb	r3, [r3, #4]
 8007dd0:	7bfa      	ldrb	r2, [r7, #15]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d3b5      	bcc.n	8007d42 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7c1a      	ldrb	r2, [r3, #16]
 8007dde:	f88d 2000 	strb.w	r2, [sp]
 8007de2:	3304      	adds	r3, #4
 8007de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007de6:	f009 fd31 	bl	801184c <USB_DevInit>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e013      	b.n	8007e24 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7b1b      	ldrb	r3, [r3, #12]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d102      	bne.n	8007e18 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 ff3a 	bl	8008c8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f00a f851 	bl	8011ec4 <USB_DevDisconnect>

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007e2c:	b590      	push	{r4, r7, lr}
 8007e2e:	b08d      	sub	sp, #52	@ 0x34
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f00a f8f2 	bl	801202c <USB_GetMode>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 84b9 	bne.w	80087c2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f00a f856 	bl	8011f06 <USB_ReadInterrupts>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 84af 	beq.w	80087c0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f00a f843 	bl	8011f06 <USB_ReadInterrupts>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d107      	bne.n	8007e9a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695a      	ldr	r2, [r3, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f002 0202 	and.w	r2, r2, #2
 8007e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f00a f831 	bl	8011f06 <USB_ReadInterrupts>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d161      	bne.n	8007f72 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0210 	bic.w	r2, r2, #16
 8007ebc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f003 020f 	and.w	r2, r3, #15
 8007eca:	4613      	mov	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4413      	add	r3, r2
 8007eda:	3304      	adds	r3, #4
 8007edc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007ee4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ee8:	d124      	bne.n	8007f34 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d035      	beq.n	8007f62 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	6a38      	ldr	r0, [r7, #32]
 8007f0a:	f009 ff83 	bl	8011e14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f1a:	441a      	add	r2, r3
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	695a      	ldr	r2, [r3, #20]
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	091b      	lsrs	r3, r3, #4
 8007f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f2c:	441a      	add	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	615a      	str	r2, [r3, #20]
 8007f32:	e016      	b.n	8007f62 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007f3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f3e:	d110      	bne.n	8007f62 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f46:	2208      	movs	r2, #8
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6a38      	ldr	r0, [r7, #32]
 8007f4c:	f009 ff62 	bl	8011e14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	091b      	lsrs	r3, r3, #4
 8007f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f5c:	441a      	add	r2, r3
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0210 	orr.w	r2, r2, #16
 8007f70:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f009 ffc5 	bl	8011f06 <USB_ReadInterrupts>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f82:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f86:	f040 80a7 	bne.w	80080d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f009 ffca 	bl	8011f2c <USB_ReadDevAllOutEpInterrupt>
 8007f98:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007f9a:	e099      	b.n	80080d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 808e 	beq.w	80080c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f009 ffee 	bl	8011f94 <USB_ReadDevOutEPInterrupt>
 8007fb8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00c      	beq.n	8007fde <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007fd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fd29 	bl	8008a30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00c      	beq.n	8008002 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ffa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fdff 	bl	8008c00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	2b00      	cmp	r3, #0
 800800a:	d008      	beq.n	800801e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008018:	461a      	mov	r2, r3
 800801a:	2310      	movs	r3, #16
 800801c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d030      	beq.n	800808a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008030:	2b80      	cmp	r3, #128	@ 0x80
 8008032:	d109      	bne.n	8008048 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008046:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804a:	4613      	mov	r3, r2
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	3304      	adds	r3, #4
 800805c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	78db      	ldrb	r3, [r3, #3]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d108      	bne.n	8008078 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	b2db      	uxtb	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fbf2 	bl	800885c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008084:	461a      	mov	r2, r3
 8008086:	2302      	movs	r3, #2
 8008088:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a0:	461a      	mov	r2, r3
 80080a2:	2320      	movs	r3, #32
 80080a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080bc:	461a      	mov	r2, r3
 80080be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80080c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	3301      	adds	r3, #1
 80080c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80080d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f47f af62 	bne.w	8007f9c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f009 ff12 	bl	8011f06 <USB_ReadInterrupts>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080ec:	f040 80db 	bne.w	80082a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f009 ff33 	bl	8011f60 <USB_ReadDevAllInEpInterrupt>
 80080fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008100:	e0cd      	b.n	800829e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80c2 	beq.w	8008292 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f009 ff59 	bl	8011fd0 <USB_ReadDevInEPInterrupt>
 800811e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d057      	beq.n	80081da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	2201      	movs	r2, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800813e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	43db      	mvns	r3, r3
 8008144:	69f9      	ldr	r1, [r7, #28]
 8008146:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800814a:	4013      	ands	r3, r2
 800814c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800815a:	461a      	mov	r2, r3
 800815c:	2301      	movs	r3, #1
 800815e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	799b      	ldrb	r3, [r3, #6]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d132      	bne.n	80081ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800816c:	4613      	mov	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	3320      	adds	r3, #32
 8008178:	6819      	ldr	r1, [r3, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817e:	4613      	mov	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4403      	add	r3, r0
 8008188:	331c      	adds	r3, #28
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4419      	add	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008192:	4613      	mov	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4403      	add	r3, r0
 800819c:	3320      	adds	r3, #32
 800819e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d113      	bne.n	80081ce <HAL_PCD_IRQHandler+0x3a2>
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	3324      	adds	r3, #36	@ 0x24
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081c6:	461a      	mov	r2, r3
 80081c8:	2101      	movs	r1, #1
 80081ca:	f009 ff61 	bl	8012090 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fb03 	bl	80087e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d008      	beq.n	80081f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f0:	461a      	mov	r2, r3
 80081f2:	2308      	movs	r3, #8
 80081f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d008      	beq.n	8008212 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800820c:	461a      	mov	r2, r3
 800820e:	2310      	movs	r3, #16
 8008210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008228:	461a      	mov	r2, r3
 800822a:	2340      	movs	r3, #64	@ 0x40
 800822c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d023      	beq.n	8008280 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800823a:	6a38      	ldr	r0, [r7, #32]
 800823c:	f009 fc64 	bl	8011b08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008242:	4613      	mov	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	3310      	adds	r3, #16
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	3304      	adds	r3, #4
 8008252:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	78db      	ldrb	r3, [r3, #3]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d108      	bne.n	800826e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2200      	movs	r2, #0
 8008260:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb03 	bl	8008874 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800827a:	461a      	mov	r2, r3
 800827c:	2302      	movs	r3, #2
 800827e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800828a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb42 	bl	8008916 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	3301      	adds	r3, #1
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800829e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f47f af2e 	bne.w	8008102 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f009 fe2b 	bl	8011f06 <USB_ReadInterrupts>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ba:	d122      	bne.n	8008302 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082ca:	f023 0301 	bic.w	r3, r3, #1
 80082ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d108      	bne.n	80082ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80082e2:	2100      	movs	r1, #0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fcf5 	bl	8008cd4 <HAL_PCDEx_LPM_Callback>
 80082ea:	e002      	b.n	80082f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 faab 	bl	8008848 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	695a      	ldr	r2, [r3, #20]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008300:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f009 fdfd 	bl	8011f06 <USB_ReadInterrupts>
 800830c:	4603      	mov	r3, r0
 800830e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008316:	d112      	bne.n	800833e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b01      	cmp	r3, #1
 8008326:	d102      	bne.n	800832e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fa83 	bl	8008834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800833c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f009 fddf 	bl	8011f06 <USB_ReadInterrupts>
 8008348:	4603      	mov	r3, r0
 800834a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008352:	d121      	bne.n	8008398 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695a      	ldr	r2, [r3, #20]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008362:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800836a:	2b00      	cmp	r3, #0
 800836c:	d111      	bne.n	8008392 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837c:	089b      	lsrs	r3, r3, #2
 800837e:	f003 020f 	and.w	r2, r3, #15
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008388:	2101      	movs	r1, #1
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fca2 	bl	8008cd4 <HAL_PCDEx_LPM_Callback>
 8008390:	e002      	b.n	8008398 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa4e 	bl	8008834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f009 fdb2 	bl	8011f06 <USB_ReadInterrupts>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ac:	f040 80b7 	bne.w	800851e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083be:	f023 0301 	bic.w	r3, r3, #1
 80083c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2110      	movs	r1, #16
 80083ca:	4618      	mov	r0, r3
 80083cc:	f009 fb9c 	bl	8011b08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083d4:	e046      	b.n	8008464 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e2:	461a      	mov	r2, r3
 80083e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80083ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008404:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008408:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800840a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008416:	461a      	mov	r2, r3
 8008418:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800841c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800841e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	440a      	add	r2, r1
 8008434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008438:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800843c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	440a      	add	r2, r1
 8008454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008458:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800845c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800845e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008460:	3301      	adds	r3, #1
 8008462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	791b      	ldrb	r3, [r3, #4]
 8008468:	461a      	mov	r2, r3
 800846a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846c:	4293      	cmp	r3, r2
 800846e:	d3b2      	bcc.n	80083d6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800847e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008482:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	7bdb      	ldrb	r3, [r3, #15]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d016      	beq.n	80084ba <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800849c:	f043 030b 	orr.w	r3, r3, #11
 80084a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084b2:	f043 030b 	orr.w	r3, r3, #11
 80084b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80084b8:	e015      	b.n	80084e6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c0:	695a      	ldr	r2, [r3, #20]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c8:	4619      	mov	r1, r3
 80084ca:	f242 032b 	movw	r3, #8235	@ 0x202b
 80084ce:	4313      	orrs	r3, r2
 80084d0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084e0:	f043 030b 	orr.w	r3, r3, #11
 80084e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80084f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008508:	461a      	mov	r2, r3
 800850a:	f009 fdc1 	bl	8012090 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695a      	ldr	r2, [r3, #20]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800851c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f009 fcef 	bl	8011f06 <USB_ReadInterrupts>
 8008528:	4603      	mov	r3, r0
 800852a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800852e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008532:	d123      	bne.n	800857c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f009 fd85 	bl	8012048 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f009 fb59 	bl	8011bfa <USB_GetDevSpeed>
 8008548:	4603      	mov	r3, r0
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681c      	ldr	r4, [r3, #0]
 8008554:	f001 fb1e 	bl	8009b94 <HAL_RCC_GetHCLKFreq>
 8008558:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800855e:	461a      	mov	r2, r3
 8008560:	4620      	mov	r0, r4
 8008562:	f009 f873 	bl	801164c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f95a 	bl	8008820 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695a      	ldr	r2, [r3, #20]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800857a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f009 fcc0 	bl	8011f06 <USB_ReadInterrupts>
 8008586:	4603      	mov	r3, r0
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b08      	cmp	r3, #8
 800858e:	d10a      	bne.n	80085a6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f93b 	bl	800880c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695a      	ldr	r2, [r3, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f002 0208 	and.w	r2, r2, #8
 80085a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f009 fcab 	bl	8011f06 <USB_ReadInterrupts>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b80      	cmp	r3, #128	@ 0x80
 80085b8:	d123      	bne.n	8008602 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085c6:	2301      	movs	r3, #1
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ca:	e014      	b.n	80085f6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d0:	4613      	mov	r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d105      	bne.n	80085f0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f962 	bl	80088b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	3301      	adds	r3, #1
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	4293      	cmp	r3, r2
 8008600:	d3e4      	bcc.n	80085cc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f009 fc7d 	bl	8011f06 <USB_ReadInterrupts>
 800860c:	4603      	mov	r3, r0
 800860e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008616:	d13c      	bne.n	8008692 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008618:	2301      	movs	r3, #1
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
 800861c:	e02b      	b.n	8008676 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008632:	4613      	mov	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	3318      	adds	r3, #24
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d115      	bne.n	8008670 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008644:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008646:	2b00      	cmp	r3, #0
 8008648:	da12      	bge.n	8008670 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800864e:	4613      	mov	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	3317      	adds	r3, #23
 800865a:	2201      	movs	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f922 	bl	80088b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008672:	3301      	adds	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	@ 0x24
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	791b      	ldrb	r3, [r3, #4]
 800867a:	461a      	mov	r2, r3
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	4293      	cmp	r3, r2
 8008680:	d3cd      	bcc.n	800861e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695a      	ldr	r2, [r3, #20]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f009 fc35 	bl	8011f06 <USB_ReadInterrupts>
 800869c:	4603      	mov	r3, r0
 800869e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086a6:	d156      	bne.n	8008756 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086a8:	2301      	movs	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ac:	e045      	b.n	800873a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c2:	4613      	mov	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d12e      	bne.n	8008734 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80086d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80086d8:	2b00      	cmp	r3, #0
 80086da:	da2b      	bge.n	8008734 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	0c1a      	lsrs	r2, r3, #16
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80086e6:	4053      	eors	r3, r2
 80086e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d121      	bne.n	8008734 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086f4:	4613      	mov	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008702:	2201      	movs	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800872c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008730:	6053      	str	r3, [r2, #4]
            break;
 8008732:	e008      	b.n	8008746 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	3301      	adds	r3, #1
 8008738:	627b      	str	r3, [r7, #36]	@ 0x24
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	461a      	mov	r2, r3
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	4293      	cmp	r3, r2
 8008744:	d3b3      	bcc.n	80086ae <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f009 fbd3 	bl	8011f06 <USB_ReadInterrupts>
 8008760:	4603      	mov	r3, r0
 8008762:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876a:	d10a      	bne.n	8008782 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f88d 	bl	800888c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f009 fbbd 	bl	8011f06 <USB_ReadInterrupts>
 800878c:	4603      	mov	r3, r0
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b04      	cmp	r3, #4
 8008794:	d115      	bne.n	80087c2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f879 	bl	80088a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6859      	ldr	r1, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	e000      	b.n	80087c2 <HAL_PCD_IRQHandler+0x996>
      return;
 80087c0:	bf00      	nop
    }
  }
}
 80087c2:	3734      	adds	r7, #52	@ 0x34
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd90      	pop	{r4, r7, pc}

080087c8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80088c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da0c      	bge.n	80088e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	f003 020f 	and.w	r2, r3, #15
 80088ce:	4613      	mov	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3310      	adds	r3, #16
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	e00c      	b.n	80088fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	f003 020f 	and.w	r2, r3, #15
 80088e8:	4613      	mov	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	3304      	adds	r3, #4
 80088fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68f9      	ldr	r1, [r7, #12]
 8008902:	4618      	mov	r0, r3
 8008904:	f009 f99e 	bl	8011c44 <USB_EPStopXfer>
 8008908:	4603      	mov	r3, r0
 800890a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800890c:	7afb      	ldrb	r3, [r7, #11]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b08a      	sub	sp, #40	@ 0x28
 800891a:	af02      	add	r7, sp, #8
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	3310      	adds	r3, #16
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	3304      	adds	r3, #4
 800893c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	695a      	ldr	r2, [r3, #20]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	429a      	cmp	r2, r3
 8008948:	d901      	bls.n	800894e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e06b      	b.n	8008a26 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	691a      	ldr	r2, [r3, #16]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	429a      	cmp	r2, r3
 8008962:	d902      	bls.n	800896a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3303      	adds	r3, #3
 800896e:	089b      	lsrs	r3, r3, #2
 8008970:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008972:	e02a      	b.n	80089ca <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	429a      	cmp	r2, r3
 8008988:	d902      	bls.n	8008990 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	3303      	adds	r3, #3
 8008994:	089b      	lsrs	r3, r3, #2
 8008996:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68d9      	ldr	r1, [r3, #12]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4603      	mov	r3, r0
 80089ac:	6978      	ldr	r0, [r7, #20]
 80089ae:	f009 f9f3 	bl	8011d98 <USB_WritePacket>

    ep->xfer_buff  += len;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	441a      	add	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	695a      	ldr	r2, [r3, #20]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d809      	bhi.n	80089f4 <PCD_WriteEmptyTxFifo+0xde>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	695a      	ldr	r2, [r3, #20]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d203      	bcs.n	80089f4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1bf      	bne.n	8008974 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d811      	bhi.n	8008a24 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	2201      	movs	r2, #1
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	6939      	ldr	r1, [r7, #16]
 8008a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a20:	4013      	ands	r3, r2
 8008a22:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	333c      	adds	r3, #60	@ 0x3c
 8008a48:	3304      	adds	r3, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	799b      	ldrb	r3, [r3, #6]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d17b      	bne.n	8008b5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d015      	beq.n	8008a9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4a61      	ldr	r2, [pc, #388]	@ (8008bf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	f240 80b9 	bls.w	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80b3 	beq.w	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a92:	461a      	mov	r2, r3
 8008a94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a98:	6093      	str	r3, [r2, #8]
 8008a9a:	e0a7      	b.n	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	6093      	str	r3, [r2, #8]
 8008ab8:	e098      	b.n	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 8093 	bne.w	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8008bf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d90f      	bls.n	8008aee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aea:	6093      	str	r3, [r2, #8]
 8008aec:	e07e      	b.n	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4613      	mov	r3, r2
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	4413      	add	r3, r2
 8008b00:	3304      	adds	r3, #4
 8008b02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a1a      	ldr	r2, [r3, #32]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	0159      	lsls	r1, r3, #5
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	440b      	add	r3, r1
 8008b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d114      	bne.n	8008b50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d109      	bne.n	8008b42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	f009 faa8 	bl	8012090 <USB_EP0_OutStart>
 8008b40:	e006      	b.n	8008b50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fe36 	bl	80087c8 <HAL_PCD_DataOutStageCallback>
 8008b5c:	e046      	b.n	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4a26      	ldr	r2, [pc, #152]	@ (8008bfc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d124      	bne.n	8008bb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b82:	6093      	str	r3, [r2, #8]
 8008b84:	e032      	b.n	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d008      	beq.n	8008ba2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	2320      	movs	r3, #32
 8008ba0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fe0d 	bl	80087c8 <HAL_PCD_DataOutStageCallback>
 8008bae:	e01d      	b.n	8008bec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d114      	bne.n	8008be0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d108      	bne.n	8008be0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f009 fa58 	bl	8012090 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fdee 	bl	80087c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	4f54300a 	.word	0x4f54300a
 8008bfc:	4f54310a 	.word	0x4f54310a

08008c00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	333c      	adds	r3, #60	@ 0x3c
 8008c18:	3304      	adds	r3, #4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4a15      	ldr	r2, [pc, #84]	@ (8008c88 <PCD_EP_OutSetupPacket_int+0x88>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d90e      	bls.n	8008c54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff fdcf 	bl	80087f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c88 <PCD_EP_OutSetupPacket_int+0x88>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d90c      	bls.n	8008c7c <PCD_EP_OutSetupPacket_int+0x7c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	799b      	ldrb	r3, [r3, #6]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d108      	bne.n	8008c7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c74:	461a      	mov	r2, r3
 8008c76:	2101      	movs	r1, #1
 8008c78:	f009 fa0a 	bl	8012090 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	4f54300a 	.word	0x4f54300a

08008c8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008cba:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <HAL_PCDEx_ActivateLPM+0x44>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	10000003 	.word	0x10000003

08008cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008cf4:	4b19      	ldr	r3, [pc, #100]	@ (8008d5c <HAL_PWREx_ConfigSupply+0x70>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d00a      	beq.n	8008d16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d00:	4b16      	ldr	r3, [pc, #88]	@ (8008d5c <HAL_PWREx_ConfigSupply+0x70>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d001      	beq.n	8008d12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e01f      	b.n	8008d52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e01d      	b.n	8008d52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d16:	4b11      	ldr	r3, [pc, #68]	@ (8008d5c <HAL_PWREx_ConfigSupply+0x70>)
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f023 0207 	bic.w	r2, r3, #7
 8008d1e:	490f      	ldr	r1, [pc, #60]	@ (8008d5c <HAL_PWREx_ConfigSupply+0x70>)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d26:	f7fa ffff 	bl	8003d28 <HAL_GetTick>
 8008d2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d2c:	e009      	b.n	8008d42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d2e:	f7fa fffb 	bl	8003d28 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d3c:	d901      	bls.n	8008d42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e007      	b.n	8008d52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d42:	4b06      	ldr	r3, [pc, #24]	@ (8008d5c <HAL_PWREx_ConfigSupply+0x70>)
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d4e:	d1ee      	bne.n	8008d2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	58024800 	.word	0x58024800

08008d60 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008d64:	4b05      	ldr	r3, [pc, #20]	@ (8008d7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4a04      	ldr	r2, [pc, #16]	@ (8008d7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d6e:	60d3      	str	r3, [r2, #12]
}
 8008d70:	bf00      	nop
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	58024800 	.word	0x58024800

08008d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	@ 0x30
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e3c8      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8087 	beq.w	8008eae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008da0:	4b88      	ldr	r3, [pc, #544]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008daa:	4b86      	ldr	r3, [pc, #536]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	2b10      	cmp	r3, #16
 8008db4:	d007      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x46>
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	2b18      	cmp	r3, #24
 8008dba:	d110      	bne.n	8008dde <HAL_RCC_OscConfig+0x5e>
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d10b      	bne.n	8008dde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d06c      	beq.n	8008eac <HAL_RCC_OscConfig+0x12c>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d168      	bne.n	8008eac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e3a2      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de6:	d106      	bne.n	8008df6 <HAL_RCC_OscConfig+0x76>
 8008de8:	4b76      	ldr	r3, [pc, #472]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a75      	ldr	r2, [pc, #468]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	e02e      	b.n	8008e54 <HAL_RCC_OscConfig+0xd4>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10c      	bne.n	8008e18 <HAL_RCC_OscConfig+0x98>
 8008dfe:	4b71      	ldr	r3, [pc, #452]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a70      	ldr	r2, [pc, #448]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	e01d      	b.n	8008e54 <HAL_RCC_OscConfig+0xd4>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e20:	d10c      	bne.n	8008e3c <HAL_RCC_OscConfig+0xbc>
 8008e22:	4b68      	ldr	r3, [pc, #416]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a67      	ldr	r2, [pc, #412]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	4b65      	ldr	r3, [pc, #404]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a64      	ldr	r2, [pc, #400]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e00b      	b.n	8008e54 <HAL_RCC_OscConfig+0xd4>
 8008e3c:	4b61      	ldr	r3, [pc, #388]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a60      	ldr	r2, [pc, #384]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	4b5e      	ldr	r3, [pc, #376]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d013      	beq.n	8008e84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5c:	f7fa ff64 	bl	8003d28 <HAL_GetTick>
 8008e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e64:	f7fa ff60 	bl	8003d28 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b64      	cmp	r3, #100	@ 0x64
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e356      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e76:	4b53      	ldr	r3, [pc, #332]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0f0      	beq.n	8008e64 <HAL_RCC_OscConfig+0xe4>
 8008e82:	e014      	b.n	8008eae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e84:	f7fa ff50 	bl	8003d28 <HAL_GetTick>
 8008e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e8c:	f7fa ff4c 	bl	8003d28 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b64      	cmp	r3, #100	@ 0x64
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e342      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e9e:	4b49      	ldr	r3, [pc, #292]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f0      	bne.n	8008e8c <HAL_RCC_OscConfig+0x10c>
 8008eaa:	e000      	b.n	8008eae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 808c 	beq.w	8008fd4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ebc:	4b41      	ldr	r3, [pc, #260]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ec4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x162>
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	2b18      	cmp	r3, #24
 8008ed6:	d137      	bne.n	8008f48 <HAL_RCC_OscConfig+0x1c8>
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d132      	bne.n	8008f48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ee2:	4b38      	ldr	r3, [pc, #224]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <HAL_RCC_OscConfig+0x17a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e314      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008efa:	4b32      	ldr	r3, [pc, #200]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f023 0219 	bic.w	r2, r3, #25
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	492f      	ldr	r1, [pc, #188]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0c:	f7fa ff0c 	bl	8003d28 <HAL_GetTick>
 8008f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f14:	f7fa ff08 	bl	8003d28 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e2fe      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f26:	4b27      	ldr	r3, [pc, #156]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f0      	beq.n	8008f14 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f32:	4b24      	ldr	r3, [pc, #144]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	4920      	ldr	r1, [pc, #128]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f46:	e045      	b.n	8008fd4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d026      	beq.n	8008f9e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f50:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f023 0219 	bic.w	r2, r3, #25
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4919      	ldr	r1, [pc, #100]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f62:	f7fa fee1 	bl	8003d28 <HAL_GetTick>
 8008f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f6a:	f7fa fedd 	bl	8003d28 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e2d3      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f7c:	4b11      	ldr	r3, [pc, #68]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f88:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	061b      	lsls	r3, r3, #24
 8008f96:	490b      	ldr	r1, [pc, #44]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	604b      	str	r3, [r1, #4]
 8008f9c:	e01a      	b.n	8008fd4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f9e:	4b09      	ldr	r3, [pc, #36]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a08      	ldr	r2, [pc, #32]	@ (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008fa4:	f023 0301 	bic.w	r3, r3, #1
 8008fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008faa:	f7fa febd 	bl	8003d28 <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fb0:	e00a      	b.n	8008fc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fb2:	f7fa feb9 	bl	8003d28 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d903      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e2af      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
 8008fc4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fc8:	4b96      	ldr	r3, [pc, #600]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1ee      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d06a      	beq.n	80090b6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fe0:	4b90      	ldr	r3, [pc, #576]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fe8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fea:	4b8e      	ldr	r3, [pc, #568]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d007      	beq.n	8009006 <HAL_RCC_OscConfig+0x286>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b18      	cmp	r3, #24
 8008ffa:	d11b      	bne.n	8009034 <HAL_RCC_OscConfig+0x2b4>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b01      	cmp	r3, #1
 8009004:	d116      	bne.n	8009034 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009006:	4b87      	ldr	r3, [pc, #540]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <HAL_RCC_OscConfig+0x29e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	2b80      	cmp	r3, #128	@ 0x80
 8009018:	d001      	beq.n	800901e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e282      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800901e:	4b81      	ldr	r3, [pc, #516]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	061b      	lsls	r3, r3, #24
 800902c:	497d      	ldr	r1, [pc, #500]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800902e:	4313      	orrs	r3, r2
 8009030:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009032:	e040      	b.n	80090b6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d023      	beq.n	8009084 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800903c:	4b79      	ldr	r3, [pc, #484]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a78      	ldr	r2, [pc, #480]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009048:	f7fa fe6e 	bl	8003d28 <HAL_GetTick>
 800904c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009050:	f7fa fe6a 	bl	8003d28 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e260      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009062:	4b70      	ldr	r3, [pc, #448]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f0      	beq.n	8009050 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800906e:	4b6d      	ldr	r3, [pc, #436]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	061b      	lsls	r3, r3, #24
 800907c:	4969      	ldr	r1, [pc, #420]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800907e:	4313      	orrs	r3, r2
 8009080:	60cb      	str	r3, [r1, #12]
 8009082:	e018      	b.n	80090b6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009084:	4b67      	ldr	r3, [pc, #412]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a66      	ldr	r2, [pc, #408]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800908a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fa fe4a 	bl	8003d28 <HAL_GetTick>
 8009094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009098:	f7fa fe46 	bl	8003d28 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e23c      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090aa:	4b5e      	ldr	r3, [pc, #376]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1f0      	bne.n	8009098 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d036      	beq.n	8009130 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d019      	beq.n	80090fe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090ca:	4b56      	ldr	r3, [pc, #344]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ce:	4a55      	ldr	r2, [pc, #340]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d6:	f7fa fe27 	bl	8003d28 <HAL_GetTick>
 80090da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090dc:	e008      	b.n	80090f0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090de:	f7fa fe23 	bl	8003d28 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e219      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090f0:	4b4c      	ldr	r3, [pc, #304]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f0      	beq.n	80090de <HAL_RCC_OscConfig+0x35e>
 80090fc:	e018      	b.n	8009130 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090fe:	4b49      	ldr	r3, [pc, #292]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009102:	4a48      	ldr	r2, [pc, #288]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009104:	f023 0301 	bic.w	r3, r3, #1
 8009108:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800910a:	f7fa fe0d 	bl	8003d28 <HAL_GetTick>
 800910e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009110:	e008      	b.n	8009124 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009112:	f7fa fe09 	bl	8003d28 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b02      	cmp	r3, #2
 800911e:	d901      	bls.n	8009124 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e1ff      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009124:	4b3f      	ldr	r3, [pc, #252]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1f0      	bne.n	8009112 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d036      	beq.n	80091aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d019      	beq.n	8009178 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009144:	4b37      	ldr	r3, [pc, #220]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a36      	ldr	r2, [pc, #216]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800914a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800914e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009150:	f7fa fdea 	bl	8003d28 <HAL_GetTick>
 8009154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009158:	f7fa fde6 	bl	8003d28 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e1dc      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800916a:	4b2e      	ldr	r3, [pc, #184]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f0      	beq.n	8009158 <HAL_RCC_OscConfig+0x3d8>
 8009176:	e018      	b.n	80091aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009178:	4b2a      	ldr	r3, [pc, #168]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a29      	ldr	r2, [pc, #164]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800917e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009184:	f7fa fdd0 	bl	8003d28 <HAL_GetTick>
 8009188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800918c:	f7fa fdcc 	bl	8003d28 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e1c2      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800919e:	4b21      	ldr	r3, [pc, #132]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1f0      	bne.n	800918c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8086 	beq.w	80092c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009228 <HAL_RCC_OscConfig+0x4a8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009228 <HAL_RCC_OscConfig+0x4a8>)
 80091be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091c4:	f7fa fdb0 	bl	8003d28 <HAL_GetTick>
 80091c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091cc:	f7fa fdac 	bl	8003d28 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b64      	cmp	r3, #100	@ 0x64
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e1a2      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091de:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <HAL_RCC_OscConfig+0x4a8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0f0      	beq.n	80091cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d106      	bne.n	8009200 <HAL_RCC_OscConfig+0x480>
 80091f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80091f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091f6:	4a0b      	ldr	r2, [pc, #44]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80091fe:	e032      	b.n	8009266 <HAL_RCC_OscConfig+0x4e6>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d111      	bne.n	800922c <HAL_RCC_OscConfig+0x4ac>
 8009208:	4b06      	ldr	r3, [pc, #24]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800920a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800920c:	4a05      	ldr	r2, [pc, #20]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	6713      	str	r3, [r2, #112]	@ 0x70
 8009214:	4b03      	ldr	r3, [pc, #12]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009218:	4a02      	ldr	r2, [pc, #8]	@ (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800921a:	f023 0304 	bic.w	r3, r3, #4
 800921e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009220:	e021      	b.n	8009266 <HAL_RCC_OscConfig+0x4e6>
 8009222:	bf00      	nop
 8009224:	58024400 	.word	0x58024400
 8009228:	58024800 	.word	0x58024800
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b05      	cmp	r3, #5
 8009232:	d10c      	bne.n	800924e <HAL_RCC_OscConfig+0x4ce>
 8009234:	4b83      	ldr	r3, [pc, #524]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009238:	4a82      	ldr	r2, [pc, #520]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800923a:	f043 0304 	orr.w	r3, r3, #4
 800923e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009240:	4b80      	ldr	r3, [pc, #512]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009244:	4a7f      	ldr	r2, [pc, #508]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	6713      	str	r3, [r2, #112]	@ 0x70
 800924c:	e00b      	b.n	8009266 <HAL_RCC_OscConfig+0x4e6>
 800924e:	4b7d      	ldr	r3, [pc, #500]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009252:	4a7c      	ldr	r2, [pc, #496]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	6713      	str	r3, [r2, #112]	@ 0x70
 800925a:	4b7a      	ldr	r3, [pc, #488]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925e:	4a79      	ldr	r2, [pc, #484]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009260:	f023 0304 	bic.w	r3, r3, #4
 8009264:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926e:	f7fa fd5b 	bl	8003d28 <HAL_GetTick>
 8009272:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009274:	e00a      	b.n	800928c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009276:	f7fa fd57 	bl	8003d28 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009284:	4293      	cmp	r3, r2
 8009286:	d901      	bls.n	800928c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e14b      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800928c:	4b6d      	ldr	r3, [pc, #436]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800928e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0ee      	beq.n	8009276 <HAL_RCC_OscConfig+0x4f6>
 8009298:	e014      	b.n	80092c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929a:	f7fa fd45 	bl	8003d28 <HAL_GetTick>
 800929e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092a0:	e00a      	b.n	80092b8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a2:	f7fa fd41 	bl	8003d28 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e135      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092b8:	4b62      	ldr	r3, [pc, #392]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1ee      	bne.n	80092a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 812a 	beq.w	8009522 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092ce:	4b5d      	ldr	r3, [pc, #372]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092d6:	2b18      	cmp	r3, #24
 80092d8:	f000 80ba 	beq.w	8009450 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f040 8095 	bne.w	8009410 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092e6:	4b57      	ldr	r3, [pc, #348]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a56      	ldr	r2, [pc, #344]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f2:	f7fa fd19 	bl	8003d28 <HAL_GetTick>
 80092f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092fa:	f7fa fd15 	bl	8003d28 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e10b      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800930c:	4b4d      	ldr	r3, [pc, #308]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1f0      	bne.n	80092fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009318:	4b4a      	ldr	r3, [pc, #296]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800931a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800931c:	4b4a      	ldr	r3, [pc, #296]	@ (8009448 <HAL_RCC_OscConfig+0x6c8>)
 800931e:	4013      	ands	r3, r2
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009328:	0112      	lsls	r2, r2, #4
 800932a:	430a      	orrs	r2, r1
 800932c:	4945      	ldr	r1, [pc, #276]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800932e:	4313      	orrs	r3, r2
 8009330:	628b      	str	r3, [r1, #40]	@ 0x28
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	3b01      	subs	r3, #1
 8009338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009340:	3b01      	subs	r3, #1
 8009342:	025b      	lsls	r3, r3, #9
 8009344:	b29b      	uxth	r3, r3
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	3b01      	subs	r3, #1
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009354:	431a      	orrs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935a:	3b01      	subs	r3, #1
 800935c:	061b      	lsls	r3, r3, #24
 800935e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009362:	4938      	ldr	r1, [pc, #224]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009364:	4313      	orrs	r3, r2
 8009366:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009368:	4b36      	ldr	r3, [pc, #216]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	4a35      	ldr	r2, [pc, #212]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009374:	4b33      	ldr	r3, [pc, #204]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009378:	4b34      	ldr	r3, [pc, #208]	@ (800944c <HAL_RCC_OscConfig+0x6cc>)
 800937a:	4013      	ands	r3, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009380:	00d2      	lsls	r2, r2, #3
 8009382:	4930      	ldr	r1, [pc, #192]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009384:	4313      	orrs	r3, r2
 8009386:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009388:	4b2e      	ldr	r3, [pc, #184]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938c:	f023 020c 	bic.w	r2, r3, #12
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009394:	492b      	ldr	r1, [pc, #172]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009396:	4313      	orrs	r3, r2
 8009398:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800939a:	4b2a      	ldr	r3, [pc, #168]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800939c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939e:	f023 0202 	bic.w	r2, r3, #2
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a6:	4927      	ldr	r1, [pc, #156]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093ac:	4b25      	ldr	r3, [pc, #148]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b0:	4a24      	ldr	r2, [pc, #144]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b8:	4b22      	ldr	r3, [pc, #136]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	4a21      	ldr	r2, [pc, #132]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093c4:	4b1f      	ldr	r3, [pc, #124]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80093d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093dc:	4b19      	ldr	r3, [pc, #100]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a18      	ldr	r2, [pc, #96]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e8:	f7fa fc9e 	bl	8003d28 <HAL_GetTick>
 80093ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f0:	f7fa fc9a 	bl	8003d28 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e090      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009402:	4b10      	ldr	r3, [pc, #64]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x670>
 800940e:	e088      	b.n	8009522 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009410:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a0b      	ldr	r2, [pc, #44]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800941a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941c:	f7fa fc84 	bl	8003d28 <HAL_GetTick>
 8009420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009422:	e008      	b.n	8009436 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009424:	f7fa fc80 	bl	8003d28 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e076      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009436:	4b03      	ldr	r3, [pc, #12]	@ (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f0      	bne.n	8009424 <HAL_RCC_OscConfig+0x6a4>
 8009442:	e06e      	b.n	8009522 <HAL_RCC_OscConfig+0x7a2>
 8009444:	58024400 	.word	0x58024400
 8009448:	fffffc0c 	.word	0xfffffc0c
 800944c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009450:	4b36      	ldr	r3, [pc, #216]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009456:	4b35      	ldr	r3, [pc, #212]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 8009458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009460:	2b01      	cmp	r3, #1
 8009462:	d031      	beq.n	80094c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f003 0203 	and.w	r2, r3, #3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800946e:	429a      	cmp	r2, r3
 8009470:	d12a      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	091b      	lsrs	r3, r3, #4
 8009476:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800947e:	429a      	cmp	r2, r3
 8009480:	d122      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800948e:	429a      	cmp	r2, r3
 8009490:	d11a      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	0a5b      	lsrs	r3, r3, #9
 8009496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800949e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d111      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0c1b      	lsrs	r3, r3, #16
 80094a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d108      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	0e1b      	lsrs	r3, r3, #24
 80094ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d001      	beq.n	80094cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e02b      	b.n	8009524 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80094cc:	4b17      	ldr	r3, [pc, #92]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 80094ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094d0:	08db      	lsrs	r3, r3, #3
 80094d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d01f      	beq.n	8009522 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094e2:	4b12      	ldr	r3, [pc, #72]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e6:	4a11      	ldr	r2, [pc, #68]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094ee:	f7fa fc1b 	bl	8003d28 <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80094f4:	bf00      	nop
 80094f6:	f7fa fc17 	bl	8003d28 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fe:	4293      	cmp	r3, r2
 8009500:	d0f9      	beq.n	80094f6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009502:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 8009504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009506:	4b0a      	ldr	r3, [pc, #40]	@ (8009530 <HAL_RCC_OscConfig+0x7b0>)
 8009508:	4013      	ands	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800950e:	00d2      	lsls	r2, r2, #3
 8009510:	4906      	ldr	r1, [pc, #24]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 8009512:	4313      	orrs	r3, r2
 8009514:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009516:	4b05      	ldr	r3, [pc, #20]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 8009518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951a:	4a04      	ldr	r2, [pc, #16]	@ (800952c <HAL_RCC_OscConfig+0x7ac>)
 800951c:	f043 0301 	orr.w	r3, r3, #1
 8009520:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3730      	adds	r7, #48	@ 0x30
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	58024400 	.word	0x58024400
 8009530:	ffff0007 	.word	0xffff0007

08009534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e19c      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009548:	4b8a      	ldr	r3, [pc, #552]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 030f 	and.w	r3, r3, #15
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d910      	bls.n	8009578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009556:	4b87      	ldr	r3, [pc, #540]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f023 020f 	bic.w	r2, r3, #15
 800955e:	4985      	ldr	r1, [pc, #532]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	4313      	orrs	r3, r2
 8009564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009566:	4b83      	ldr	r3, [pc, #524]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d001      	beq.n	8009578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e184      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d010      	beq.n	80095a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	4b7b      	ldr	r3, [pc, #492]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009590:	429a      	cmp	r2, r3
 8009592:	d908      	bls.n	80095a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009594:	4b78      	ldr	r3, [pc, #480]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	4975      	ldr	r1, [pc, #468]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0308 	and.w	r3, r3, #8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d010      	beq.n	80095d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	695a      	ldr	r2, [r3, #20]
 80095b6:	4b70      	ldr	r3, [pc, #448]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095be:	429a      	cmp	r2, r3
 80095c0:	d908      	bls.n	80095d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095c2:	4b6d      	ldr	r3, [pc, #436]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	496a      	ldr	r1, [pc, #424]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d010      	beq.n	8009602 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	4b64      	ldr	r3, [pc, #400]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d908      	bls.n	8009602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095f0:	4b61      	ldr	r3, [pc, #388]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	495e      	ldr	r1, [pc, #376]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d010      	beq.n	8009630 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69da      	ldr	r2, [r3, #28]
 8009612:	4b59      	ldr	r3, [pc, #356]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800961a:	429a      	cmp	r2, r3
 800961c:	d908      	bls.n	8009630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800961e:	4b56      	ldr	r3, [pc, #344]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	4953      	ldr	r1, [pc, #332]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 800962c:	4313      	orrs	r3, r2
 800962e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d010      	beq.n	800965e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	4b4d      	ldr	r3, [pc, #308]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	429a      	cmp	r2, r3
 800964a:	d908      	bls.n	800965e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800964c:	4b4a      	ldr	r3, [pc, #296]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f023 020f 	bic.w	r2, r3, #15
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	4947      	ldr	r1, [pc, #284]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 800965a:	4313      	orrs	r3, r2
 800965c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d055      	beq.n	8009716 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800966a:	4b43      	ldr	r3, [pc, #268]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	4940      	ldr	r1, [pc, #256]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009678:	4313      	orrs	r3, r2
 800967a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d107      	bne.n	8009694 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009684:	4b3c      	ldr	r3, [pc, #240]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d121      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0f6      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b03      	cmp	r3, #3
 800969a:	d107      	bne.n	80096ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800969c:	4b36      	ldr	r3, [pc, #216]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d115      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e0ea      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096b4:	4b30      	ldr	r3, [pc, #192]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e0de      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096c4:	4b2c      	ldr	r3, [pc, #176]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e0d6      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096d4:	4b28      	ldr	r3, [pc, #160]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f023 0207 	bic.w	r2, r3, #7
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	4925      	ldr	r1, [pc, #148]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e6:	f7fa fb1f 	bl	8003d28 <HAL_GetTick>
 80096ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ec:	e00a      	b.n	8009704 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ee:	f7fa fb1b 	bl	8003d28 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e0be      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009704:	4b1c      	ldr	r3, [pc, #112]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	429a      	cmp	r2, r3
 8009714:	d1eb      	bne.n	80096ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d010      	beq.n	8009744 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	4b14      	ldr	r3, [pc, #80]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	429a      	cmp	r2, r3
 8009730:	d208      	bcs.n	8009744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009732:	4b11      	ldr	r3, [pc, #68]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	f023 020f 	bic.w	r2, r3, #15
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	490e      	ldr	r1, [pc, #56]	@ (8009778 <HAL_RCC_ClockConfig+0x244>)
 8009740:	4313      	orrs	r3, r2
 8009742:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009744:	4b0b      	ldr	r3, [pc, #44]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d214      	bcs.n	800977c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009752:	4b08      	ldr	r3, [pc, #32]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f023 020f 	bic.w	r2, r3, #15
 800975a:	4906      	ldr	r1, [pc, #24]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	4313      	orrs	r3, r2
 8009760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009762:	4b04      	ldr	r3, [pc, #16]	@ (8009774 <HAL_RCC_ClockConfig+0x240>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	429a      	cmp	r2, r3
 800976e:	d005      	beq.n	800977c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e086      	b.n	8009882 <HAL_RCC_ClockConfig+0x34e>
 8009774:	52002000 	.word	0x52002000
 8009778:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b00      	cmp	r3, #0
 8009786:	d010      	beq.n	80097aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	4b3f      	ldr	r3, [pc, #252]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009794:	429a      	cmp	r2, r3
 8009796:	d208      	bcs.n	80097aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009798:	4b3c      	ldr	r3, [pc, #240]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	4939      	ldr	r1, [pc, #228]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d010      	beq.n	80097d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	4b34      	ldr	r3, [pc, #208]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d208      	bcs.n	80097d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097c6:	4b31      	ldr	r3, [pc, #196]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	492e      	ldr	r1, [pc, #184]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	699a      	ldr	r2, [r3, #24]
 80097e8:	4b28      	ldr	r3, [pc, #160]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d208      	bcs.n	8009806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097f4:	4b25      	ldr	r3, [pc, #148]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	4922      	ldr	r1, [pc, #136]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 8009802:	4313      	orrs	r3, r2
 8009804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d010      	beq.n	8009834 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	69da      	ldr	r2, [r3, #28]
 8009816:	4b1d      	ldr	r3, [pc, #116]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800981e:	429a      	cmp	r2, r3
 8009820:	d208      	bcs.n	8009834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009822:	4b1a      	ldr	r3, [pc, #104]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	4917      	ldr	r1, [pc, #92]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 8009830:	4313      	orrs	r3, r2
 8009832:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009834:	f000 f834 	bl	80098a0 <HAL_RCC_GetSysClockFreq>
 8009838:	4602      	mov	r2, r0
 800983a:	4b14      	ldr	r3, [pc, #80]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	f003 030f 	and.w	r3, r3, #15
 8009844:	4912      	ldr	r1, [pc, #72]	@ (8009890 <HAL_RCC_ClockConfig+0x35c>)
 8009846:	5ccb      	ldrb	r3, [r1, r3]
 8009848:	f003 031f 	and.w	r3, r3, #31
 800984c:	fa22 f303 	lsr.w	r3, r2, r3
 8009850:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009852:	4b0e      	ldr	r3, [pc, #56]	@ (800988c <HAL_RCC_ClockConfig+0x358>)
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	4a0d      	ldr	r2, [pc, #52]	@ (8009890 <HAL_RCC_ClockConfig+0x35c>)
 800985c:	5cd3      	ldrb	r3, [r2, r3]
 800985e:	f003 031f 	and.w	r3, r3, #31
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	fa22 f303 	lsr.w	r3, r2, r3
 8009868:	4a0a      	ldr	r2, [pc, #40]	@ (8009894 <HAL_RCC_ClockConfig+0x360>)
 800986a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800986c:	4a0a      	ldr	r2, [pc, #40]	@ (8009898 <HAL_RCC_ClockConfig+0x364>)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009872:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <HAL_RCC_ClockConfig+0x368>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7fa fa0c 	bl	8003c94 <HAL_InitTick>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009880:	7bfb      	ldrb	r3, [r7, #15]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	58024400 	.word	0x58024400
 8009890:	0801dbd4 	.word	0x0801dbd4
 8009894:	24000004 	.word	0x24000004
 8009898:	24000000 	.word	0x24000000
 800989c:	24000008 	.word	0x24000008

080098a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b089      	sub	sp, #36	@ 0x24
 80098a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098a6:	4bb3      	ldr	r3, [pc, #716]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098ae:	2b18      	cmp	r3, #24
 80098b0:	f200 8155 	bhi.w	8009b5e <HAL_RCC_GetSysClockFreq+0x2be>
 80098b4:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	08009921 	.word	0x08009921
 80098c0:	08009b5f 	.word	0x08009b5f
 80098c4:	08009b5f 	.word	0x08009b5f
 80098c8:	08009b5f 	.word	0x08009b5f
 80098cc:	08009b5f 	.word	0x08009b5f
 80098d0:	08009b5f 	.word	0x08009b5f
 80098d4:	08009b5f 	.word	0x08009b5f
 80098d8:	08009b5f 	.word	0x08009b5f
 80098dc:	08009947 	.word	0x08009947
 80098e0:	08009b5f 	.word	0x08009b5f
 80098e4:	08009b5f 	.word	0x08009b5f
 80098e8:	08009b5f 	.word	0x08009b5f
 80098ec:	08009b5f 	.word	0x08009b5f
 80098f0:	08009b5f 	.word	0x08009b5f
 80098f4:	08009b5f 	.word	0x08009b5f
 80098f8:	08009b5f 	.word	0x08009b5f
 80098fc:	0800994d 	.word	0x0800994d
 8009900:	08009b5f 	.word	0x08009b5f
 8009904:	08009b5f 	.word	0x08009b5f
 8009908:	08009b5f 	.word	0x08009b5f
 800990c:	08009b5f 	.word	0x08009b5f
 8009910:	08009b5f 	.word	0x08009b5f
 8009914:	08009b5f 	.word	0x08009b5f
 8009918:	08009b5f 	.word	0x08009b5f
 800991c:	08009953 	.word	0x08009953
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009920:	4b94      	ldr	r3, [pc, #592]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0320 	and.w	r3, r3, #32
 8009928:	2b00      	cmp	r3, #0
 800992a:	d009      	beq.n	8009940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800992c:	4b91      	ldr	r3, [pc, #580]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	08db      	lsrs	r3, r3, #3
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	4a90      	ldr	r2, [pc, #576]	@ (8009b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009938:	fa22 f303 	lsr.w	r3, r2, r3
 800993c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800993e:	e111      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009940:	4b8d      	ldr	r3, [pc, #564]	@ (8009b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009942:	61bb      	str	r3, [r7, #24]
      break;
 8009944:	e10e      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009946:	4b8d      	ldr	r3, [pc, #564]	@ (8009b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009948:	61bb      	str	r3, [r7, #24]
      break;
 800994a:	e10b      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800994c:	4b8c      	ldr	r3, [pc, #560]	@ (8009b80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800994e:	61bb      	str	r3, [r7, #24]
      break;
 8009950:	e108      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009952:	4b88      	ldr	r3, [pc, #544]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800995c:	4b85      	ldr	r3, [pc, #532]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800995e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009960:	091b      	lsrs	r3, r3, #4
 8009962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009966:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009968:	4b82      	ldr	r3, [pc, #520]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800996a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009972:	4b80      	ldr	r3, [pc, #512]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009976:	08db      	lsrs	r3, r3, #3
 8009978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	fb02 f303 	mul.w	r3, r2, r3
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 80e1 	beq.w	8009b58 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b02      	cmp	r3, #2
 800999a:	f000 8083 	beq.w	8009aa4 <HAL_RCC_GetSysClockFreq+0x204>
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	f200 80a1 	bhi.w	8009ae8 <HAL_RCC_GetSysClockFreq+0x248>
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <HAL_RCC_GetSysClockFreq+0x114>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d056      	beq.n	8009a60 <HAL_RCC_GetSysClockFreq+0x1c0>
 80099b2:	e099      	b.n	8009ae8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099b4:	4b6f      	ldr	r3, [pc, #444]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d02d      	beq.n	8009a1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099c0:	4b6c      	ldr	r3, [pc, #432]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	08db      	lsrs	r3, r3, #3
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	4a6b      	ldr	r2, [pc, #428]	@ (8009b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099cc:	fa22 f303 	lsr.w	r3, r2, r3
 80099d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	ee07 3a90 	vmov	s15, r3
 80099d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b62      	ldr	r3, [pc, #392]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009a1a:	e087      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009b88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2e:	4b51      	ldr	r3, [pc, #324]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a5e:	e065      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	ee07 3a90 	vmov	s15, r3
 8009a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a72:	4b40      	ldr	r3, [pc, #256]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aa2:	e043      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009b90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009abe:	ee07 3a90 	vmov	s15, r3
 8009ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ae6:	e021      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afa:	4b1e      	ldr	r3, [pc, #120]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b2c:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b30:	0a5b      	lsrs	r3, r3, #9
 8009b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b36:	3301      	adds	r3, #1
 8009b38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	ee07 3a90 	vmov	s15, r3
 8009b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b50:	ee17 3a90 	vmov	r3, s15
 8009b54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b56:	e005      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	61bb      	str	r3, [r7, #24]
      break;
 8009b5c:	e002      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b5e:	4b07      	ldr	r3, [pc, #28]	@ (8009b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b60:	61bb      	str	r3, [r7, #24]
      break;
 8009b62:	bf00      	nop
  }

  return sysclockfreq;
 8009b64:	69bb      	ldr	r3, [r7, #24]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3724      	adds	r7, #36	@ 0x24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	58024400 	.word	0x58024400
 8009b78:	03d09000 	.word	0x03d09000
 8009b7c:	003d0900 	.word	0x003d0900
 8009b80:	017d7840 	.word	0x017d7840
 8009b84:	46000000 	.word	0x46000000
 8009b88:	4c742400 	.word	0x4c742400
 8009b8c:	4a742400 	.word	0x4a742400
 8009b90:	4bbebc20 	.word	0x4bbebc20

08009b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b9a:	f7ff fe81 	bl	80098a0 <HAL_RCC_GetSysClockFreq>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	4b10      	ldr	r3, [pc, #64]	@ (8009be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	0a1b      	lsrs	r3, r3, #8
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	490f      	ldr	r1, [pc, #60]	@ (8009be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bac:	5ccb      	ldrb	r3, [r1, r3]
 8009bae:	f003 031f 	and.w	r3, r3, #31
 8009bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f003 030f 	and.w	r3, r3, #15
 8009bc0:	4a09      	ldr	r2, [pc, #36]	@ (8009be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bc2:	5cd3      	ldrb	r3, [r2, r3]
 8009bc4:	f003 031f 	and.w	r3, r3, #31
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	fa22 f303 	lsr.w	r3, r2, r3
 8009bce:	4a07      	ldr	r2, [pc, #28]	@ (8009bec <HAL_RCC_GetHCLKFreq+0x58>)
 8009bd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bd2:	4a07      	ldr	r2, [pc, #28]	@ (8009bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009bd8:	4b04      	ldr	r3, [pc, #16]	@ (8009bec <HAL_RCC_GetHCLKFreq+0x58>)
 8009bda:	681b      	ldr	r3, [r3, #0]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	58024400 	.word	0x58024400
 8009be8:	0801dbd4 	.word	0x0801dbd4
 8009bec:	24000004 	.word	0x24000004
 8009bf0:	24000000 	.word	0x24000000

08009bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bf8:	f7ff ffcc 	bl	8009b94 <HAL_RCC_GetHCLKFreq>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	4b06      	ldr	r3, [pc, #24]	@ (8009c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	091b      	lsrs	r3, r3, #4
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	4904      	ldr	r1, [pc, #16]	@ (8009c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c0a:	5ccb      	ldrb	r3, [r1, r3]
 8009c0c:	f003 031f 	and.w	r3, r3, #31
 8009c10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	58024400 	.word	0x58024400
 8009c1c:	0801dbd4 	.word	0x0801dbd4

08009c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c24:	f7ff ffb6 	bl	8009b94 <HAL_RCC_GetHCLKFreq>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	4b06      	ldr	r3, [pc, #24]	@ (8009c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	f003 0307 	and.w	r3, r3, #7
 8009c34:	4904      	ldr	r1, [pc, #16]	@ (8009c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c36:	5ccb      	ldrb	r3, [r1, r3]
 8009c38:	f003 031f 	and.w	r3, r3, #31
 8009c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	58024400 	.word	0x58024400
 8009c48:	0801dbd4 	.word	0x0801dbd4

08009c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c50:	b0c6      	sub	sp, #280	@ 0x118
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009c70:	2500      	movs	r5, #0
 8009c72:	ea54 0305 	orrs.w	r3, r4, r5
 8009c76:	d049      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c82:	d02f      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c88:	d828      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c8e:	d01a      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c94:	d822      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c9e:	d007      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ca0:	e01c      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca2:	4bab      	ldr	r3, [pc, #684]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca6:	4aaa      	ldr	r2, [pc, #680]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cae:	e01a      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f002 fa49 	bl	800c150 <RCCEx_PLL2_Config>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cc4:	e00f      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cca:	3328      	adds	r3, #40	@ 0x28
 8009ccc:	2102      	movs	r1, #2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f002 faf0 	bl	800c2b4 <RCCEx_PLL3_Config>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cda:	e004      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009cee:	4b98      	ldr	r3, [pc, #608]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cfc:	4a94      	ldr	r2, [pc, #592]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d02:	e003      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	ea58 0309 	orrs.w	r3, r8, r9
 8009d20:	d047      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d82a      	bhi.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d49 	.word	0x08009d49
 8009d38:	08009d57 	.word	0x08009d57
 8009d3c:	08009d6d 	.word	0x08009d6d
 8009d40:	08009d8b 	.word	0x08009d8b
 8009d44:	08009d8b 	.word	0x08009d8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d48:	4b81      	ldr	r3, [pc, #516]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4c:	4a80      	ldr	r2, [pc, #512]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d54:	e01a      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f002 f9f6 	bl	800c150 <RCCEx_PLL2_Config>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d6a:	e00f      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d70:	3328      	adds	r3, #40	@ 0x28
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f002 fa9d 	bl	800c2b4 <RCCEx_PLL3_Config>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d80:	e004      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d88:	e000      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d94:	4b6e      	ldr	r3, [pc, #440]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d98:	f023 0107 	bic.w	r1, r3, #7
 8009d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da2:	4a6b      	ldr	r2, [pc, #428]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009da8:	e003      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009dbe:	f04f 0b00 	mov.w	fp, #0
 8009dc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009dc6:	d05b      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dd0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009dd4:	d03b      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009dd6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009dda:	d834      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ddc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009de0:	d037      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009de2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009de6:	d82e      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009de8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009dec:	d033      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009dee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009df2:	d828      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009df8:	d01a      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dfe:	d822      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009e04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e08:	d007      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009e0a:	e01c      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e0c:	4b50      	ldr	r3, [pc, #320]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e10:	4a4f      	ldr	r2, [pc, #316]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e18:	e01e      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1e:	3308      	adds	r3, #8
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f002 f994 	bl	800c150 <RCCEx_PLL2_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e2e:	e013      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e34:	3328      	adds	r3, #40	@ 0x28
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f002 fa3b 	bl	800c2b4 <RCCEx_PLL3_Config>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e44:	e008      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e4c:	e004      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e4e:	bf00      	nop
 8009e50:	e002      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e60:	4b3b      	ldr	r3, [pc, #236]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e64:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e70:	4a37      	ldr	r2, [pc, #220]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e72:	430b      	orrs	r3, r1
 8009e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e76:	e003      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009e90:	2300      	movs	r3, #0
 8009e92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	d05d      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ea8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009eac:	d03b      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009eae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009eb2:	d834      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eb8:	d037      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009eba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ebe:	d82e      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ec0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ec4:	d033      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009ec6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009eca:	d828      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ed0:	d01a      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009ed2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ed6:	d822      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ee0:	d007      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009ee2:	e01c      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee8:	4a19      	ldr	r2, [pc, #100]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ef0:	e01e      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 f928 	bl	800c150 <RCCEx_PLL2_Config>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f06:	e013      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0c:	3328      	adds	r3, #40	@ 0x28
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4618      	mov	r0, r3
 8009f12:	f002 f9cf 	bl	800c2b4 <RCCEx_PLL3_Config>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f1c:	e008      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f24:	e004      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f26:	bf00      	nop
 8009f28:	e002      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f2a:	bf00      	nop
 8009f2c:	e000      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10d      	bne.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f38:	4b05      	ldr	r3, [pc, #20]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f48:	4a01      	ldr	r2, [pc, #4]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f4e:	e005      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009f68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f72:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	d03a      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f82:	2b30      	cmp	r3, #48	@ 0x30
 8009f84:	d01f      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009f86:	2b30      	cmp	r3, #48	@ 0x30
 8009f88:	d819      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d00c      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	d815      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d019      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d111      	bne.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f9a:	4baa      	ldr	r3, [pc, #680]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9e:	4aa9      	ldr	r2, [pc, #676]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009fa6:	e011      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fac:	3308      	adds	r3, #8
 8009fae:	2102      	movs	r1, #2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 f8cd 	bl	800c150 <RCCEx_PLL2_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009fbc:	e006      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fc4:	e002      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009fd4:	4b9b      	ldr	r3, [pc, #620]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fe2:	4a98      	ldr	r2, [pc, #608]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009fe8:	e003      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a002:	2300      	movs	r3, #0
 800a004:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a008:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a00c:	460b      	mov	r3, r1
 800a00e:	4313      	orrs	r3, r2
 800a010:	d051      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a01c:	d035      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a01e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a022:	d82e      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a024:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a028:	d031      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a02a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a02e:	d828      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a034:	d01a      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a03a:	d822      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a044:	d007      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a046:	e01c      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a048:	4b7e      	ldr	r3, [pc, #504]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04c:	4a7d      	ldr	r2, [pc, #500]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a054:	e01c      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	3308      	adds	r3, #8
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f002 f876 	bl	800c150 <RCCEx_PLL2_Config>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a06a:	e011      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	3328      	adds	r3, #40	@ 0x28
 800a072:	2100      	movs	r1, #0
 800a074:	4618      	mov	r0, r3
 800a076:	f002 f91d 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a080:	e006      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a088:	e002      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a08a:	bf00      	nop
 800a08c:	e000      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a08e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a098:	4b6a      	ldr	r3, [pc, #424]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a09c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0a6:	4a67      	ldr	r2, [pc, #412]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0ac:	e003      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a0c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a0cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	d053      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0e0:	d033      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a0e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0e6:	d82c      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a0e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0ec:	d02f      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a0ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0f2:	d826      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a0f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0f8:	d02b      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a0fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0fe:	d820      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a104:	d012      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a10a:	d81a      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d022      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a114:	d115      	bne.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11a:	3308      	adds	r3, #8
 800a11c:	2101      	movs	r1, #1
 800a11e:	4618      	mov	r0, r3
 800a120:	f002 f816 	bl	800c150 <RCCEx_PLL2_Config>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a12a:	e015      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a130:	3328      	adds	r3, #40	@ 0x28
 800a132:	2101      	movs	r1, #1
 800a134:	4618      	mov	r0, r3
 800a136:	f002 f8bd 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a140:	e00a      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a148:	e006      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a14a:	bf00      	nop
 800a14c:	e004      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a14e:	bf00      	nop
 800a150:	e002      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a152:	bf00      	nop
 800a154:	e000      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a156:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a160:	4b38      	ldr	r3, [pc, #224]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a164:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a16e:	4a35      	ldr	r2, [pc, #212]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a170:	430b      	orrs	r3, r1
 800a172:	6513      	str	r3, [r2, #80]	@ 0x50
 800a174:	e003      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a17a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a18a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a18e:	2300      	movs	r3, #0
 800a190:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a194:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a198:	460b      	mov	r3, r1
 800a19a:	4313      	orrs	r3, r2
 800a19c:	d058      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a1a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1aa:	d033      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a1ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1b0:	d82c      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b6:	d02f      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a1b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1bc:	d826      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a1c2:	d02b      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a1c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a1c8:	d820      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ce:	d012      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d4:	d81a      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d022      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a1da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1de:	d115      	bne.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 ffb1 	bl	800c150 <RCCEx_PLL2_Config>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1f4:	e015      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fa:	3328      	adds	r3, #40	@ 0x28
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	4618      	mov	r0, r3
 800a200:	f002 f858 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a20a:	e00a      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a212:	e006      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a214:	bf00      	nop
 800a216:	e004      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a218:	bf00      	nop
 800a21a:	e002      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a21c:	bf00      	nop
 800a21e:	e000      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10e      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a22a:	4b06      	ldr	r3, [pc, #24]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a22e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a236:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a23a:	4a02      	ldr	r2, [pc, #8]	@ (800a244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a240:	e006      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a242:	bf00      	nop
 800a244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a24c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a25c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a260:	2300      	movs	r3, #0
 800a262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a266:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4313      	orrs	r3, r2
 800a26e:	d037      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a27a:	d00e      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a27c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a280:	d816      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d018      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a28a:	d111      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a28c:	4bc4      	ldr	r3, [pc, #784]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a290:	4ac3      	ldr	r2, [pc, #780]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a298:	e00f      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29e:	3308      	adds	r3, #8
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 ff54 	bl	800c150 <RCCEx_PLL2_Config>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2ae:	e004      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2b6:	e000      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a2b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2c2:	4bb7      	ldr	r3, [pc, #732]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d0:	4ab3      	ldr	r2, [pc, #716]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2d6:	e003      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a2ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a2f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	d039      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a306:	2b03      	cmp	r3, #3
 800a308:	d81c      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a30a:	a201      	add	r2, pc, #4	@ (adr r2, 800a310 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a34d 	.word	0x0800a34d
 800a314:	0800a321 	.word	0x0800a321
 800a318:	0800a32f 	.word	0x0800a32f
 800a31c:	0800a34d 	.word	0x0800a34d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a320:	4b9f      	ldr	r3, [pc, #636]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a324:	4a9e      	ldr	r2, [pc, #632]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a32a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a32c:	e00f      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a332:	3308      	adds	r3, #8
 800a334:	2102      	movs	r1, #2
 800a336:	4618      	mov	r0, r3
 800a338:	f001 ff0a 	bl	800c150 <RCCEx_PLL2_Config>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a342:	e004      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a34a:	e000      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a34e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a356:	4b92      	ldr	r3, [pc, #584]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a35a:	f023 0103 	bic.w	r1, r3, #3
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a364:	4a8e      	ldr	r2, [pc, #568]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a366:	430b      	orrs	r3, r1
 800a368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a36a:	e003      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a36c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a370:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a380:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a384:	2300      	movs	r3, #0
 800a386:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a38a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a38e:	460b      	mov	r3, r1
 800a390:	4313      	orrs	r3, r2
 800a392:	f000 8099 	beq.w	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a396:	4b83      	ldr	r3, [pc, #524]	@ (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a82      	ldr	r2, [pc, #520]	@ (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a39c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3a2:	f7f9 fcc1 	bl	8003d28 <HAL_GetTick>
 800a3a6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3aa:	e00b      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3ac:	f7f9 fcbc 	bl	8003d28 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b64      	cmp	r3, #100	@ 0x64
 800a3ba:	d903      	bls.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3c2:	e005      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3c4:	4b77      	ldr	r3, [pc, #476]	@ (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0ed      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a3d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d173      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3d8:	4b71      	ldr	r3, [pc, #452]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3e4:	4053      	eors	r3, r2
 800a3e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d015      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3ee:	4b6c      	ldr	r3, [pc, #432]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3fa:	4b69      	ldr	r3, [pc, #420]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3fe:	4a68      	ldr	r2, [pc, #416]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a404:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a406:	4b66      	ldr	r3, [pc, #408]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40a:	4a65      	ldr	r2, [pc, #404]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a40c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a410:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a412:	4a63      	ldr	r2, [pc, #396]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a418:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a41e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a426:	d118      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a428:	f7f9 fc7e 	bl	8003d28 <HAL_GetTick>
 800a42c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a430:	e00d      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a432:	f7f9 fc79 	bl	8003d28 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a43c:	1ad2      	subs	r2, r2, r3
 800a43e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a442:	429a      	cmp	r2, r3
 800a444:	d903      	bls.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a44c:	e005      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a44e:	4b54      	ldr	r3, [pc, #336]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0eb      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a45a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d129      	bne.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a46a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a46e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a472:	d10e      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a474:	4b4a      	ldr	r3, [pc, #296]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a484:	091a      	lsrs	r2, r3, #4
 800a486:	4b48      	ldr	r3, [pc, #288]	@ (800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a488:	4013      	ands	r3, r2
 800a48a:	4a45      	ldr	r2, [pc, #276]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a48c:	430b      	orrs	r3, r1
 800a48e:	6113      	str	r3, [r2, #16]
 800a490:	e005      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a492:	4b43      	ldr	r3, [pc, #268]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	4a42      	ldr	r2, [pc, #264]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a49c:	6113      	str	r3, [r2, #16]
 800a49e:	4b40      	ldr	r3, [pc, #256]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4ae:	4a3c      	ldr	r2, [pc, #240]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a4be:	e003      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f002 0301 	and.w	r3, r2, #1
 800a4d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a4de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	f000 808f 	beq.w	800a608 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4f0:	2b28      	cmp	r3, #40	@ 0x28
 800a4f2:	d871      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a5e1 	.word	0x0800a5e1
 800a500:	0800a5d9 	.word	0x0800a5d9
 800a504:	0800a5d9 	.word	0x0800a5d9
 800a508:	0800a5d9 	.word	0x0800a5d9
 800a50c:	0800a5d9 	.word	0x0800a5d9
 800a510:	0800a5d9 	.word	0x0800a5d9
 800a514:	0800a5d9 	.word	0x0800a5d9
 800a518:	0800a5d9 	.word	0x0800a5d9
 800a51c:	0800a5ad 	.word	0x0800a5ad
 800a520:	0800a5d9 	.word	0x0800a5d9
 800a524:	0800a5d9 	.word	0x0800a5d9
 800a528:	0800a5d9 	.word	0x0800a5d9
 800a52c:	0800a5d9 	.word	0x0800a5d9
 800a530:	0800a5d9 	.word	0x0800a5d9
 800a534:	0800a5d9 	.word	0x0800a5d9
 800a538:	0800a5d9 	.word	0x0800a5d9
 800a53c:	0800a5c3 	.word	0x0800a5c3
 800a540:	0800a5d9 	.word	0x0800a5d9
 800a544:	0800a5d9 	.word	0x0800a5d9
 800a548:	0800a5d9 	.word	0x0800a5d9
 800a54c:	0800a5d9 	.word	0x0800a5d9
 800a550:	0800a5d9 	.word	0x0800a5d9
 800a554:	0800a5d9 	.word	0x0800a5d9
 800a558:	0800a5d9 	.word	0x0800a5d9
 800a55c:	0800a5e1 	.word	0x0800a5e1
 800a560:	0800a5d9 	.word	0x0800a5d9
 800a564:	0800a5d9 	.word	0x0800a5d9
 800a568:	0800a5d9 	.word	0x0800a5d9
 800a56c:	0800a5d9 	.word	0x0800a5d9
 800a570:	0800a5d9 	.word	0x0800a5d9
 800a574:	0800a5d9 	.word	0x0800a5d9
 800a578:	0800a5d9 	.word	0x0800a5d9
 800a57c:	0800a5e1 	.word	0x0800a5e1
 800a580:	0800a5d9 	.word	0x0800a5d9
 800a584:	0800a5d9 	.word	0x0800a5d9
 800a588:	0800a5d9 	.word	0x0800a5d9
 800a58c:	0800a5d9 	.word	0x0800a5d9
 800a590:	0800a5d9 	.word	0x0800a5d9
 800a594:	0800a5d9 	.word	0x0800a5d9
 800a598:	0800a5d9 	.word	0x0800a5d9
 800a59c:	0800a5e1 	.word	0x0800a5e1
 800a5a0:	58024400 	.word	0x58024400
 800a5a4:	58024800 	.word	0x58024800
 800a5a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 fdcb 	bl	800c150 <RCCEx_PLL2_Config>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5c0:	e00f      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c6:	3328      	adds	r3, #40	@ 0x28
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 fe72 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5d6:	e004      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5de:	e000      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10a      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5ea:	4bbf      	ldr	r3, [pc, #764]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5f8:	4abb      	ldr	r2, [pc, #748]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a5fe:	e003      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f002 0302 	and.w	r3, r2, #2
 800a614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a618:	2300      	movs	r3, #0
 800a61a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a61e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a622:	460b      	mov	r3, r1
 800a624:	4313      	orrs	r3, r2
 800a626:	d041      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d824      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a632:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a685 	.word	0x0800a685
 800a63c:	0800a651 	.word	0x0800a651
 800a640:	0800a667 	.word	0x0800a667
 800a644:	0800a685 	.word	0x0800a685
 800a648:	0800a685 	.word	0x0800a685
 800a64c:	0800a685 	.word	0x0800a685
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a654:	3308      	adds	r3, #8
 800a656:	2101      	movs	r1, #1
 800a658:	4618      	mov	r0, r3
 800a65a:	f001 fd79 	bl	800c150 <RCCEx_PLL2_Config>
 800a65e:	4603      	mov	r3, r0
 800a660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a664:	e00f      	b.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a66a:	3328      	adds	r3, #40	@ 0x28
 800a66c:	2101      	movs	r1, #1
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 fe20 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a67a:	e004      	b.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a682:	e000      	b.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a684:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a68e:	4b96      	ldr	r3, [pc, #600]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a692:	f023 0107 	bic.w	r1, r3, #7
 800a696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a69c:	4a92      	ldr	r2, [pc, #584]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6a2:	e003      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f002 0304 	and.w	r3, r2, #4
 800a6b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a6c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	d044      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6d4:	2b05      	cmp	r3, #5
 800a6d6:	d825      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6de:	bf00      	nop
 800a6e0:	0800a72d 	.word	0x0800a72d
 800a6e4:	0800a6f9 	.word	0x0800a6f9
 800a6e8:	0800a70f 	.word	0x0800a70f
 800a6ec:	0800a72d 	.word	0x0800a72d
 800a6f0:	0800a72d 	.word	0x0800a72d
 800a6f4:	0800a72d 	.word	0x0800a72d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	2101      	movs	r1, #1
 800a700:	4618      	mov	r0, r3
 800a702:	f001 fd25 	bl	800c150 <RCCEx_PLL2_Config>
 800a706:	4603      	mov	r3, r0
 800a708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a70c:	e00f      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a712:	3328      	adds	r3, #40	@ 0x28
 800a714:	2101      	movs	r1, #1
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fdcc 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a722:	e004      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a72a:	e000      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a72c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10b      	bne.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a736:	4b6c      	ldr	r3, [pc, #432]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73a:	f023 0107 	bic.w	r1, r3, #7
 800a73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a746:	4a68      	ldr	r2, [pc, #416]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a748:	430b      	orrs	r3, r1
 800a74a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a74c:	e003      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a752:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f002 0320 	and.w	r3, r2, #32
 800a762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a766:	2300      	movs	r3, #0
 800a768:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a76c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a770:	460b      	mov	r3, r1
 800a772:	4313      	orrs	r3, r2
 800a774:	d055      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a77e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a782:	d033      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a788:	d82c      	bhi.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a78e:	d02f      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a794:	d826      	bhi.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a79a:	d02b      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a79c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7a0:	d820      	bhi.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a6:	d012      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ac:	d81a      	bhi.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d022      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a7b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7b6:	d115      	bne.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7bc:	3308      	adds	r3, #8
 800a7be:	2100      	movs	r1, #0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 fcc5 	bl	800c150 <RCCEx_PLL2_Config>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7cc:	e015      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d2:	3328      	adds	r3, #40	@ 0x28
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 fd6c 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7e2:	e00a      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7ea:	e006      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7ec:	bf00      	nop
 800a7ee:	e004      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7f0:	bf00      	nop
 800a7f2:	e002      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7f4:	bf00      	nop
 800a7f6:	e000      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a802:	4b39      	ldr	r3, [pc, #228]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a806:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a812:	4a35      	ldr	r2, [pc, #212]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a814:	430b      	orrs	r3, r1
 800a816:	6553      	str	r3, [r2, #84]	@ 0x54
 800a818:	e003      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a81e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a82e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a832:	2300      	movs	r3, #0
 800a834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a838:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a83c:	460b      	mov	r3, r1
 800a83e:	4313      	orrs	r3, r2
 800a840:	d058      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a84a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a84e:	d033      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a850:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a854:	d82c      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85a:	d02f      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a85c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a860:	d826      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a866:	d02b      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a86c:	d820      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a86e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a872:	d012      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a878:	d81a      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d022      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a87e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a882:	d115      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a888:	3308      	adds	r3, #8
 800a88a:	2100      	movs	r1, #0
 800a88c:	4618      	mov	r0, r3
 800a88e:	f001 fc5f 	bl	800c150 <RCCEx_PLL2_Config>
 800a892:	4603      	mov	r3, r0
 800a894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a898:	e015      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89e:	3328      	adds	r3, #40	@ 0x28
 800a8a0:	2102      	movs	r1, #2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fd06 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8ae:	e00a      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8b6:	e006      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8b8:	bf00      	nop
 800a8ba:	e004      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8bc:	bf00      	nop
 800a8be:	e002      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8c0:	bf00      	nop
 800a8c2:	e000      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10e      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8ce:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8de:	4a02      	ldr	r2, [pc, #8]	@ (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8e4:	e006      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a8e6:	bf00      	nop
 800a8e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a900:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a904:	2300      	movs	r3, #0
 800a906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a90a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a90e:	460b      	mov	r3, r1
 800a910:	4313      	orrs	r3, r2
 800a912:	d055      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a91c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a920:	d033      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a922:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a926:	d82c      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a92c:	d02f      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a92e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a932:	d826      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a934:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a938:	d02b      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a93a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a93e:	d820      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a944:	d012      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a94a:	d81a      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d022      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a954:	d115      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95a:	3308      	adds	r3, #8
 800a95c:	2100      	movs	r1, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f001 fbf6 	bl	800c150 <RCCEx_PLL2_Config>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a96a:	e015      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a970:	3328      	adds	r3, #40	@ 0x28
 800a972:	2102      	movs	r1, #2
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fc9d 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a980:	e00a      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a988:	e006      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a98a:	bf00      	nop
 800a98c:	e004      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a98e:	bf00      	nop
 800a990:	e002      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a992:	bf00      	nop
 800a994:	e000      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a996:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10b      	bne.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9a0:	4ba0      	ldr	r3, [pc, #640]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9b0:	4a9c      	ldr	r2, [pc, #624]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9b2:	430b      	orrs	r3, r1
 800a9b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9b6:	e003      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	f002 0308 	and.w	r3, r2, #8
 800a9cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	d01e      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ec:	d10c      	bne.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f2:	3328      	adds	r3, #40	@ 0x28
 800a9f4:	2102      	movs	r1, #2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f001 fc5c 	bl	800c2b4 <RCCEx_PLL3_Config>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aa08:	4b86      	ldr	r3, [pc, #536]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa18:	4a82      	ldr	r2, [pc, #520]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa1a:	430b      	orrs	r3, r1
 800aa1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f002 0310 	and.w	r3, r2, #16
 800aa2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa34:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d01e      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa4a:	d10c      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa50:	3328      	adds	r3, #40	@ 0x28
 800aa52:	2102      	movs	r1, #2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f001 fc2d 	bl	800c2b4 <RCCEx_PLL3_Config>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa66:	4b6f      	ldr	r3, [pc, #444]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa76:	4a6b      	ldr	r2, [pc, #428]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aa88:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aa92:	460b      	mov	r3, r1
 800aa94:	4313      	orrs	r3, r2
 800aa96:	d03e      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aaa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaa4:	d022      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aaa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaaa:	d81b      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab4:	d00b      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aab6:	e015      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aabc:	3308      	adds	r3, #8
 800aabe:	2100      	movs	r1, #0
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 fb45 	bl	800c150 <RCCEx_PLL2_Config>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aacc:	e00f      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad2:	3328      	adds	r3, #40	@ 0x28
 800aad4:	2102      	movs	r1, #2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 fbec 	bl	800c2b4 <RCCEx_PLL3_Config>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aae2:	e004      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aaea:	e000      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800aaec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aaf6:	4b4b      	ldr	r3, [pc, #300]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aafa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800aafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab06:	4a47      	ldr	r2, [pc, #284]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab0c:	e003      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ab22:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab24:	2300      	movs	r3, #0
 800ab26:	677b      	str	r3, [r7, #116]	@ 0x74
 800ab28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	d03b      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab3e:	d01f      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ab40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab44:	d818      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ab46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab4a:	d003      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ab4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab50:	d007      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ab52:	e011      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab54:	4b33      	ldr	r3, [pc, #204]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab58:	4a32      	ldr	r2, [pc, #200]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab60:	e00f      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab66:	3328      	adds	r3, #40	@ 0x28
 800ab68:	2101      	movs	r1, #1
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f001 fba2 	bl	800c2b4 <RCCEx_PLL3_Config>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab76:	e004      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab7e:	e000      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ab80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10b      	bne.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab8a:	4b26      	ldr	r3, [pc, #152]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab9a:	4a22      	ldr	r2, [pc, #136]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6553      	str	r3, [r2, #84]	@ 0x54
 800aba0:	e003      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aba6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800abb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abb8:	2300      	movs	r3, #0
 800abba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800abbc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800abc0:	460b      	mov	r3, r1
 800abc2:	4313      	orrs	r3, r2
 800abc4:	d034      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800abc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800abd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abd4:	d007      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800abd6:	e011      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd8:	4b12      	ldr	r3, [pc, #72]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abdc:	4a11      	ldr	r2, [pc, #68]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abe4:	e00e      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abea:	3308      	adds	r3, #8
 800abec:	2102      	movs	r1, #2
 800abee:	4618      	mov	r0, r3
 800abf0:	f001 faae 	bl	800c150 <RCCEx_PLL2_Config>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abfa:	e003      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10d      	bne.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac0c:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac1a:	4a02      	ldr	r2, [pc, #8]	@ (800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac20:	e006      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ac22:	bf00      	nop
 800ac24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ac3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac3e:	2300      	movs	r3, #0
 800ac40:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac42:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ac46:	460b      	mov	r3, r1
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	d00c      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac50:	3328      	adds	r3, #40	@ 0x28
 800ac52:	2102      	movs	r1, #2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f001 fb2d 	bl	800c2b4 <RCCEx_PLL3_Config>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ac72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac74:	2300      	movs	r3, #0
 800ac76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	d036      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac8c:	d018      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ac8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac92:	d811      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac98:	d014      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ac9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac9e:	d80b      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d011      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800aca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aca8:	d106      	bne.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acaa:	4bb7      	ldr	r3, [pc, #732]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acae:	4ab6      	ldr	r2, [pc, #728]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800acb6:	e008      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acbe:	e004      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800acc0:	bf00      	nop
 800acc2:	e002      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800acc4:	bf00      	nop
 800acc6:	e000      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800acc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10a      	bne.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acd2:	4bad      	ldr	r3, [pc, #692]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800acda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ace0:	4aa9      	ldr	r2, [pc, #676]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ace2:	430b      	orrs	r3, r1
 800ace4:	6553      	str	r3, [r2, #84]	@ 0x54
 800ace6:	e003      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800acfc:	653b      	str	r3, [r7, #80]	@ 0x50
 800acfe:	2300      	movs	r3, #0
 800ad00:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ad06:	460b      	mov	r3, r1
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	d009      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad0c:	4b9e      	ldr	r3, [pc, #632]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad1a:	4a9b      	ldr	r2, [pc, #620]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad1c:	430b      	orrs	r3, r1
 800ad1e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ad2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad2e:	2300      	movs	r3, #0
 800ad30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ad36:	460b      	mov	r3, r1
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	d009      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad3c:	4b92      	ldr	r3, [pc, #584]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad40:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad4a:	4a8f      	ldr	r2, [pc, #572]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ad5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad5e:	2300      	movs	r3, #0
 800ad60:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ad66:	460b      	mov	r3, r1
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	d00e      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad6c:	4b86      	ldr	r3, [pc, #536]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	4a85      	ldr	r2, [pc, #532]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ad76:	6113      	str	r3, [r2, #16]
 800ad78:	4b83      	ldr	r3, [pc, #524]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad7a:	6919      	ldr	r1, [r3, #16]
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad84:	4a80      	ldr	r2, [pc, #512]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad86:	430b      	orrs	r3, r1
 800ad88:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ad96:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad98:	2300      	movs	r3, #0
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ada0:	460b      	mov	r3, r1
 800ada2:	4313      	orrs	r3, r2
 800ada4:	d009      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ada6:	4b78      	ldr	r3, [pc, #480]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ada8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adaa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adb4:	4a74      	ldr	r2, [pc, #464]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adb6:	430b      	orrs	r3, r1
 800adb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800adc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800adc8:	2300      	movs	r3, #0
 800adca:	637b      	str	r3, [r7, #52]	@ 0x34
 800adcc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800add0:	460b      	mov	r3, r1
 800add2:	4313      	orrs	r3, r2
 800add4:	d00a      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800add6:	4b6c      	ldr	r3, [pc, #432]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800add8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adda:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade6:	4a68      	ldr	r2, [pc, #416]	@ (800af88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ade8:	430b      	orrs	r3, r1
 800adea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	2100      	movs	r1, #0
 800adf6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adfe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ae02:	460b      	mov	r3, r1
 800ae04:	4313      	orrs	r3, r2
 800ae06:	d011      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f001 f99d 	bl	800c150 <RCCEx_PLL2_Config>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ae1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	2100      	movs	r1, #0
 800ae36:	6239      	str	r1, [r7, #32]
 800ae38:	f003 0302 	and.w	r3, r3, #2
 800ae3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae42:	460b      	mov	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	d011      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4c:	3308      	adds	r3, #8
 800ae4e:	2101      	movs	r1, #1
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 f97d 	bl	800c150 <RCCEx_PLL2_Config>
 800ae56:	4603      	mov	r3, r0
 800ae58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ae5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	2100      	movs	r1, #0
 800ae76:	61b9      	str	r1, [r7, #24]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	61fb      	str	r3, [r7, #28]
 800ae7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae82:	460b      	mov	r3, r1
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d011      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	2102      	movs	r1, #2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 f95d 	bl	800c150 <RCCEx_PLL2_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ae9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	6139      	str	r1, [r7, #16]
 800aeb8:	f003 0308 	and.w	r3, r3, #8
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aec2:	460b      	mov	r3, r1
 800aec4:	4313      	orrs	r3, r2
 800aec6:	d011      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aecc:	3328      	adds	r3, #40	@ 0x28
 800aece:	2100      	movs	r1, #0
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 f9ef 	bl	800c2b4 <RCCEx_PLL3_Config>
 800aed6:	4603      	mov	r3, r0
 800aed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800aedc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aeec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	2100      	movs	r1, #0
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	f003 0310 	and.w	r3, r3, #16
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af02:	460b      	mov	r3, r1
 800af04:	4313      	orrs	r3, r2
 800af06:	d011      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0c:	3328      	adds	r3, #40	@ 0x28
 800af0e:	2101      	movs	r1, #1
 800af10:	4618      	mov	r0, r3
 800af12:	f001 f9cf 	bl	800c2b4 <RCCEx_PLL3_Config>
 800af16:	4603      	mov	r3, r0
 800af18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af20:	2b00      	cmp	r3, #0
 800af22:	d003      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	2100      	movs	r1, #0
 800af36:	6039      	str	r1, [r7, #0]
 800af38:	f003 0320 	and.w	r3, r3, #32
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af42:	460b      	mov	r3, r1
 800af44:	4313      	orrs	r3, r2
 800af46:	d011      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4c:	3328      	adds	r3, #40	@ 0x28
 800af4e:	2102      	movs	r1, #2
 800af50:	4618      	mov	r0, r3
 800af52:	f001 f9af 	bl	800c2b4 <RCCEx_PLL3_Config>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800af6c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	e000      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800af80:	46bd      	mov	sp, r7
 800af82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af86:	bf00      	nop
 800af88:	58024400 	.word	0x58024400

0800af8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b090      	sub	sp, #64	@ 0x40
 800af90:	af00      	add	r7, sp, #0
 800af92:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af9a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800af9e:	430b      	orrs	r3, r1
 800afa0:	f040 8094 	bne.w	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afa4:	4b9b      	ldr	r3, [pc, #620]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	f200 8087 	bhi.w	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800afb6:	a201      	add	r2, pc, #4	@ (adr r2, 800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800afb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbc:	0800afd1 	.word	0x0800afd1
 800afc0:	0800aff9 	.word	0x0800aff9
 800afc4:	0800b021 	.word	0x0800b021
 800afc8:	0800b0bd 	.word	0x0800b0bd
 800afcc:	0800b049 	.word	0x0800b049
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afd0:	4b90      	ldr	r3, [pc, #576]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afdc:	d108      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 ff62 	bl	800beac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afec:	f000 bc93 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff4:	f000 bc8f 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aff8:	4b86      	ldr	r3, [pc, #536]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b004:	d108      	bne.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b006:	f107 0318 	add.w	r3, r7, #24
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 fca6 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b014:	f000 bc7f 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b01c:	f000 bc7b 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b020:	4b7c      	ldr	r3, [pc, #496]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b02c:	d108      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02e:	f107 030c 	add.w	r3, r7, #12
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fde6 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b03c:	f000 bc6b 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b044:	f000 bc67 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b048:	4b72      	ldr	r3, [pc, #456]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b04a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b04c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b052:	4b70      	ldr	r3, [pc, #448]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0304 	and.w	r3, r3, #4
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d10c      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b060:	2b00      	cmp	r3, #0
 800b062:	d109      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b064:	4b6b      	ldr	r3, [pc, #428]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	08db      	lsrs	r3, r3, #3
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	4a6a      	ldr	r2, [pc, #424]	@ (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b070:	fa22 f303 	lsr.w	r3, r2, r3
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b076:	e01f      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b078:	4b66      	ldr	r3, [pc, #408]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b084:	d106      	bne.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b08c:	d102      	bne.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b08e:	4b63      	ldr	r3, [pc, #396]	@ (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b092:	e011      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b094:	4b5f      	ldr	r3, [pc, #380]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b09c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a0:	d106      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0a8:	d102      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0aa:	4b5d      	ldr	r3, [pc, #372]	@ (800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0ae:	e003      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b0b4:	f000 bc2f 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0b8:	f000 bc2d 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0bc:	4b59      	ldr	r3, [pc, #356]	@ (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c0:	f000 bc29 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c8:	f000 bc25 	b.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b0d4:	430b      	orrs	r3, r1
 800b0d6:	f040 80a7 	bne.w	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b0da:	4b4e      	ldr	r3, [pc, #312]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0de:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b0e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b0ea:	d054      	beq.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b0f2:	f200 808b 	bhi.w	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b0fc:	f000 8083 	beq.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b106:	f200 8081 	bhi.w	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b110:	d02f      	beq.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b118:	d878      	bhi.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b122:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b126:	d012      	beq.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b128:	e070      	b.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b12a:	4b3a      	ldr	r3, [pc, #232]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b136:	d107      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 feb5 	bl	800beac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b146:	e3e6      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14c:	e3e3      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b14e:	4b31      	ldr	r3, [pc, #196]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b15a:	d107      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b15c:	f107 0318 	add.w	r3, r7, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fbfb 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b16a:	e3d4      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b170:	e3d1      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b172:	4b28      	ldr	r3, [pc, #160]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b17e:	d107      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	4618      	mov	r0, r3
 800b186:	f000 fd3d 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18e:	e3c2      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b194:	e3bf      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b196:	4b1f      	ldr	r3, [pc, #124]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b19a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b19e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d10c      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1b2:	4b18      	ldr	r3, [pc, #96]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	08db      	lsrs	r3, r3, #3
 800b1b8:	f003 0303 	and.w	r3, r3, #3
 800b1bc:	4a16      	ldr	r2, [pc, #88]	@ (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b1be:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1c4:	e01e      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1c6:	4b13      	ldr	r3, [pc, #76]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1d2:	d106      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1da:	d102      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1e0:	e010      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1ee:	d106      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1f6:	d102      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1f8:	4b09      	ldr	r3, [pc, #36]	@ (800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1fc:	e002      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b202:	e388      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b204:	e387      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b206:	4b07      	ldr	r3, [pc, #28]	@ (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20a:	e384      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b210:	e381      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b212:	bf00      	nop
 800b214:	58024400 	.word	0x58024400
 800b218:	03d09000 	.word	0x03d09000
 800b21c:	003d0900 	.word	0x003d0900
 800b220:	017d7840 	.word	0x017d7840
 800b224:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b22c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b230:	430b      	orrs	r3, r1
 800b232:	f040 809c 	bne.w	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b236:	4b9e      	ldr	r3, [pc, #632]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b23a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b23e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b246:	d054      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b24e:	f200 808b 	bhi.w	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b258:	f000 8083 	beq.w	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b262:	f200 8081 	bhi.w	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b26c:	d02f      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b274:	d878      	bhi.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d004      	beq.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b282:	d012      	beq.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b284:	e070      	b.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b286:	4b8a      	ldr	r3, [pc, #552]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b28e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b292:	d107      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fe07 	bl	800beac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a2:	e338      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a8:	e335      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2aa:	4b81      	ldr	r3, [pc, #516]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2b6:	d107      	bne.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b8:	f107 0318 	add.w	r3, r7, #24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fb4d 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c6:	e326      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2cc:	e323      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ce:	4b78      	ldr	r3, [pc, #480]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2da:	d107      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2dc:	f107 030c 	add.w	r3, r7, #12
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fc8f 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ea:	e314      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e311      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2f2:	4b6f      	ldr	r3, [pc, #444]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2fc:	4b6c      	ldr	r3, [pc, #432]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b04      	cmp	r3, #4
 800b306:	d10c      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b30e:	4b68      	ldr	r3, [pc, #416]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	08db      	lsrs	r3, r3, #3
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	4a66      	ldr	r2, [pc, #408]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b31a:	fa22 f303 	lsr.w	r3, r2, r3
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b320:	e01e      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b322:	4b63      	ldr	r3, [pc, #396]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b32e:	d106      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b336:	d102      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b338:	4b5f      	ldr	r3, [pc, #380]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b33c:	e010      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b33e:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b34a:	d106      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b352:	d102      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b354:	4b59      	ldr	r3, [pc, #356]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b358:	e002      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b35e:	e2da      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b360:	e2d9      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b362:	4b57      	ldr	r3, [pc, #348]	@ (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b366:	e2d6      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36c:	e2d3      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b36e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b372:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b376:	430b      	orrs	r3, r1
 800b378:	f040 80a7 	bne.w	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b37c:	4b4c      	ldr	r3, [pc, #304]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b37e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b380:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b384:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b38c:	d055      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b394:	f200 8096 	bhi.w	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b39e:	f000 8084 	beq.w	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3a8:	f200 808c 	bhi.w	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3b2:	d030      	beq.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3ba:	f200 8083 	bhi.w	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d004      	beq.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ca:	d012      	beq.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b3cc:	e07a      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ce:	4b38      	ldr	r3, [pc, #224]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3da:	d107      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fd63 	bl	800beac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ea:	e294      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f0:	e291      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3f2:	4b2f      	ldr	r3, [pc, #188]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3fe:	d107      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b400:	f107 0318 	add.w	r3, r7, #24
 800b404:	4618      	mov	r0, r3
 800b406:	f000 faa9 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b40e:	e282      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b414:	e27f      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b416:	4b26      	ldr	r3, [pc, #152]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b41e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b422:	d107      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b424:	f107 030c 	add.w	r3, r7, #12
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fbeb 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b432:	e270      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b438:	e26d      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b43a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b43c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b43e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b442:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b444:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d10c      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b456:	4b16      	ldr	r3, [pc, #88]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	08db      	lsrs	r3, r3, #3
 800b45c:	f003 0303 	and.w	r3, r3, #3
 800b460:	4a14      	ldr	r2, [pc, #80]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b462:	fa22 f303 	lsr.w	r3, r2, r3
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b468:	e01e      	b.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b46a:	4b11      	ldr	r3, [pc, #68]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b476:	d106      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b47e:	d102      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b480:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b484:	e010      	b.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b486:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b48e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b492:	d106      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b49a:	d102      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b49c:	4b07      	ldr	r3, [pc, #28]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4a0:	e002      	b.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4a6:	e236      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4a8:	e235      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4aa:	4b05      	ldr	r3, [pc, #20]	@ (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ae:	e232      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4b0:	58024400 	.word	0x58024400
 800b4b4:	03d09000 	.word	0x03d09000
 800b4b8:	003d0900 	.word	0x003d0900
 800b4bc:	017d7840 	.word	0x017d7840
 800b4c0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c8:	e225      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b4ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	f040 8085 	bne.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b4d8:	4b9c      	ldr	r3, [pc, #624]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4e8:	d06b      	beq.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4f0:	d874      	bhi.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4f8:	d056      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b500:	d86c      	bhi.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b504:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b508:	d03b      	beq.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b510:	d864      	bhi.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b518:	d021      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b520:	d85c      	bhi.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b52e:	d004      	beq.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b530:	e054      	b.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b532:	f7fe fb5f 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 800b536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b538:	e1ed      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b53a:	4b84      	ldr	r3, [pc, #528]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b546:	d107      	bne.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b548:	f107 0318 	add.w	r3, r7, #24
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fa05 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b556:	e1de      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b55c:	e1db      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b55e:	4b7b      	ldr	r3, [pc, #492]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b56a:	d107      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b56c:	f107 030c 	add.w	r3, r7, #12
 800b570:	4618      	mov	r0, r3
 800b572:	f000 fb47 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57a:	e1cc      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b580:	e1c9      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b582:	4b72      	ldr	r3, [pc, #456]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d109      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b58e:	4b6f      	ldr	r3, [pc, #444]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	08db      	lsrs	r3, r3, #3
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	4a6d      	ldr	r2, [pc, #436]	@ (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b59a:	fa22 f303 	lsr.w	r3, r2, r3
 800b59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a0:	e1b9      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a6:	e1b6      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5a8:	4b68      	ldr	r3, [pc, #416]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5b4:	d102      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b5b6:	4b67      	ldr	r3, [pc, #412]	@ (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ba:	e1ac      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c0:	e1a9      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5c2:	4b62      	ldr	r3, [pc, #392]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5ce:	d102      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b5d0:	4b61      	ldr	r3, [pc, #388]	@ (800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d4:	e19f      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5da:	e19c      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e0:	e199      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	d173      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b5ee:	4b57      	ldr	r3, [pc, #348]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b5f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5fe:	d02f      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b606:	d863      	bhi.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d004      	beq.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b614:	d012      	beq.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b616:	e05b      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b618:	4b4c      	ldr	r3, [pc, #304]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b624:	d107      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b626:	f107 0318 	add.w	r3, r7, #24
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 f996 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b634:	e16f      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63a:	e16c      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b63c:	4b43      	ldr	r3, [pc, #268]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b648:	d107      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b64a:	f107 030c 	add.w	r3, r7, #12
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fad8 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b658:	e15d      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b65e:	e15a      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b660:	4b3a      	ldr	r3, [pc, #232]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b664:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b668:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b66a:	4b38      	ldr	r3, [pc, #224]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b04      	cmp	r3, #4
 800b674:	d10c      	bne.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b67c:	4b33      	ldr	r3, [pc, #204]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	08db      	lsrs	r3, r3, #3
 800b682:	f003 0303 	and.w	r3, r3, #3
 800b686:	4a32      	ldr	r2, [pc, #200]	@ (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b688:	fa22 f303 	lsr.w	r3, r2, r3
 800b68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b68e:	e01e      	b.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b690:	4b2e      	ldr	r3, [pc, #184]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b69c:	d106      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6a4:	d102      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6a6:	4b2b      	ldr	r3, [pc, #172]	@ (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6aa:	e010      	b.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6ac:	4b27      	ldr	r3, [pc, #156]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6b8:	d106      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6c2:	4b25      	ldr	r3, [pc, #148]	@ (800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6c6:	e002      	b.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6cc:	e123      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6ce:	e122      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d4:	e11f      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6da:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b6de:	430b      	orrs	r3, r1
 800b6e0:	d13c      	bne.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b6e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d004      	beq.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6f8:	d012      	beq.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b6fa:	e023      	b.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6fc:	4b13      	ldr	r3, [pc, #76]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b708:	d107      	bne.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b70a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fbcc 	bl	800beac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b718:	e0fd      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b71e:	e0fa      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b720:	4b0a      	ldr	r3, [pc, #40]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b72c:	d107      	bne.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b72e:	f107 0318 	add.w	r3, r7, #24
 800b732:	4618      	mov	r0, r3
 800b734:	f000 f912 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b73c:	e0eb      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b742:	e0e8      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b748:	e0e5      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b74a:	bf00      	nop
 800b74c:	58024400 	.word	0x58024400
 800b750:	03d09000 	.word	0x03d09000
 800b754:	003d0900 	.word	0x003d0900
 800b758:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b75c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b760:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b764:	430b      	orrs	r3, r1
 800b766:	f040 8085 	bne.w	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b76a:	4b6d      	ldr	r3, [pc, #436]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b76e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b772:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b77a:	d06b      	beq.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b782:	d874      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b78a:	d056      	beq.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b792:	d86c      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b79a:	d03b      	beq.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7a2:	d864      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7aa:	d021      	beq.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7b2:	d85c      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d004      	beq.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7c0:	d004      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b7c2:	e054      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b7c4:	f000 f8b4 	bl	800b930 <HAL_RCCEx_GetD3PCLK1Freq>
 800b7c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7ca:	e0a4      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7cc:	4b54      	ldr	r3, [pc, #336]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7d8:	d107      	bne.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7da:	f107 0318 	add.w	r3, r7, #24
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 f8bc 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e8:	e095      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ee:	e092      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7f0:	4b4b      	ldr	r3, [pc, #300]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7fc:	d107      	bne.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7fe:	f107 030c 	add.w	r3, r7, #12
 800b802:	4618      	mov	r0, r3
 800b804:	f000 f9fe 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80c:	e083      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b812:	e080      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b814:	4b42      	ldr	r3, [pc, #264]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d109      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b820:	4b3f      	ldr	r3, [pc, #252]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	4a3e      	ldr	r2, [pc, #248]	@ (800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
 800b830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b832:	e070      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b838:	e06d      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b83a:	4b39      	ldr	r3, [pc, #228]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b846:	d102      	bne.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b848:	4b37      	ldr	r3, [pc, #220]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84c:	e063      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b852:	e060      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b854:	4b32      	ldr	r3, [pc, #200]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b85c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b860:	d102      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b862:	4b32      	ldr	r3, [pc, #200]	@ (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b866:	e056      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86c:	e053      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b872:	e050      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b878:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b87c:	430b      	orrs	r3, r1
 800b87e:	d148      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b880:	4b27      	ldr	r3, [pc, #156]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b884:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b888:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b890:	d02a      	beq.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b898:	d838      	bhi.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a6:	d00d      	beq.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b8a8:	e030      	b.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8b6:	d102      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8bc:	e02b      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8c2:	e028      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8c4:	4b16      	ldr	r3, [pc, #88]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8d0:	d107      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fae8 	bl	800beac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e0:	e019      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8e6:	e016      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8f4:	d107      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f6:	f107 0318 	add.w	r3, r7, #24
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 f82e 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b904:	e007      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90a:	e004      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b910:	e001      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3740      	adds	r7, #64	@ 0x40
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	58024400 	.word	0x58024400
 800b924:	03d09000 	.word	0x03d09000
 800b928:	003d0900 	.word	0x003d0900
 800b92c:	017d7840 	.word	0x017d7840

0800b930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b934:	f7fe f92e 	bl	8009b94 <HAL_RCC_GetHCLKFreq>
 800b938:	4602      	mov	r2, r0
 800b93a:	4b06      	ldr	r3, [pc, #24]	@ (800b954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	091b      	lsrs	r3, r3, #4
 800b940:	f003 0307 	and.w	r3, r3, #7
 800b944:	4904      	ldr	r1, [pc, #16]	@ (800b958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b946:	5ccb      	ldrb	r3, [r1, r3]
 800b948:	f003 031f 	and.w	r3, r3, #31
 800b94c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b950:	4618      	mov	r0, r3
 800b952:	bd80      	pop	{r7, pc}
 800b954:	58024400 	.word	0x58024400
 800b958:	0801dbd4 	.word	0x0801dbd4

0800b95c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b089      	sub	sp, #36	@ 0x24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b964:	4ba1      	ldr	r3, [pc, #644]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b968:	f003 0303 	and.w	r3, r3, #3
 800b96c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b96e:	4b9f      	ldr	r3, [pc, #636]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b972:	0b1b      	lsrs	r3, r3, #12
 800b974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b97a:	4b9c      	ldr	r3, [pc, #624]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97e:	091b      	lsrs	r3, r3, #4
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b986:	4b99      	ldr	r3, [pc, #612]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b98a:	08db      	lsrs	r3, r3, #3
 800b98c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	fb02 f303 	mul.w	r3, r2, r3
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 8111 	beq.w	800bbcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	f000 8083 	beq.w	800bab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	f200 80a1 	bhi.w	800bafc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d056      	beq.n	800ba74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b9c6:	e099      	b.n	800bafc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9c8:	4b88      	ldr	r3, [pc, #544]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 0320 	and.w	r3, r3, #32
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d02d      	beq.n	800ba30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9d4:	4b85      	ldr	r3, [pc, #532]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	08db      	lsrs	r3, r3, #3
 800b9da:	f003 0303 	and.w	r3, r3, #3
 800b9de:	4a84      	ldr	r2, [pc, #528]	@ (800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	ee07 3a90 	vmov	s15, r3
 800b9ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fe:	4b7b      	ldr	r3, [pc, #492]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba06:	ee07 3a90 	vmov	s15, r3
 800ba0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba2e:	e087      	b.n	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	ee07 3a90 	vmov	s15, r3
 800ba36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba42:	4b6a      	ldr	r3, [pc, #424]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4a:	ee07 3a90 	vmov	s15, r3
 800ba4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba72:	e065      	b.n	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba86:	4b59      	ldr	r3, [pc, #356]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab6:	e043      	b.n	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baca:	4b48      	ldr	r3, [pc, #288]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bacc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bada:	ed97 6a03 	vldr	s12, [r7, #12]
 800bade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bafa:	e021      	b.n	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0e:	4b37      	ldr	r3, [pc, #220]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bb40:	4b2a      	ldr	r3, [pc, #168]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb44:	0a5b      	lsrs	r3, r3, #9
 800bb46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb66:	ee17 2a90 	vmov	r2, s15
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bb6e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb72:	0c1b      	lsrs	r3, r3, #16
 800bb74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb78:	ee07 3a90 	vmov	s15, r3
 800bb7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb88:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb94:	ee17 2a90 	vmov	r2, s15
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bb9c:	4b13      	ldr	r3, [pc, #76]	@ (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba0:	0e1b      	lsrs	r3, r3, #24
 800bba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbc2:	ee17 2a90 	vmov	r2, s15
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bbca:	e008      	b.n	800bbde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	609a      	str	r2, [r3, #8]
}
 800bbde:	bf00      	nop
 800bbe0:	3724      	adds	r7, #36	@ 0x24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	03d09000 	.word	0x03d09000
 800bbf4:	46000000 	.word	0x46000000
 800bbf8:	4c742400 	.word	0x4c742400
 800bbfc:	4a742400 	.word	0x4a742400
 800bc00:	4bbebc20 	.word	0x4bbebc20

0800bc04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b089      	sub	sp, #36	@ 0x24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc0c:	4ba1      	ldr	r3, [pc, #644]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc16:	4b9f      	ldr	r3, [pc, #636]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc1a:	0d1b      	lsrs	r3, r3, #20
 800bc1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc22:	4b9c      	ldr	r3, [pc, #624]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	0a1b      	lsrs	r3, r3, #8
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc2e:	4b99      	ldr	r3, [pc, #612]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	fb02 f303 	mul.w	r3, r2, r3
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8111 	beq.w	800be74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	f000 8083 	beq.w	800bd60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	f200 80a1 	bhi.w	800bda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d056      	beq.n	800bd1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc6e:	e099      	b.n	800bda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc70:	4b88      	ldr	r3, [pc, #544]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0320 	and.w	r3, r3, #32
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d02d      	beq.n	800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc7c:	4b85      	ldr	r3, [pc, #532]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	08db      	lsrs	r3, r3, #3
 800bc82:	f003 0303 	and.w	r3, r3, #3
 800bc86:	4a84      	ldr	r2, [pc, #528]	@ (800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc88:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	ee07 3a90 	vmov	s15, r3
 800bc94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	ee07 3a90 	vmov	s15, r3
 800bc9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca6:	4b7b      	ldr	r3, [pc, #492]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcae:	ee07 3a90 	vmov	s15, r3
 800bcb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcd6:	e087      	b.n	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	ee07 3a90 	vmov	s15, r3
 800bcde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcea:	4b6a      	ldr	r3, [pc, #424]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf2:	ee07 3a90 	vmov	s15, r3
 800bcf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd1a:	e065      	b.n	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	ee07 3a90 	vmov	s15, r3
 800bd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2e:	4b59      	ldr	r3, [pc, #356]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd36:	ee07 3a90 	vmov	s15, r3
 800bd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd5e:	e043      	b.n	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	ee07 3a90 	vmov	s15, r3
 800bd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd72:	4b48      	ldr	r3, [pc, #288]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bda2:	e021      	b.n	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb6:	4b37      	ldr	r3, [pc, #220]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bde6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bde8:	4b2a      	ldr	r3, [pc, #168]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdec:	0a5b      	lsrs	r3, r3, #9
 800bdee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf2:	ee07 3a90 	vmov	s15, r3
 800bdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be02:	edd7 6a07 	vldr	s13, [r7, #28]
 800be06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be0e:	ee17 2a90 	vmov	r2, s15
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be16:	4b1f      	ldr	r3, [pc, #124]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be1a:	0c1b      	lsrs	r3, r3, #16
 800be1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be20:	ee07 3a90 	vmov	s15, r3
 800be24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be30:	edd7 6a07 	vldr	s13, [r7, #28]
 800be34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3c:	ee17 2a90 	vmov	r2, s15
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800be44:	4b13      	ldr	r3, [pc, #76]	@ (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be48:	0e1b      	lsrs	r3, r3, #24
 800be4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6a:	ee17 2a90 	vmov	r2, s15
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be72:	e008      	b.n	800be86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	609a      	str	r2, [r3, #8]
}
 800be86:	bf00      	nop
 800be88:	3724      	adds	r7, #36	@ 0x24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	58024400 	.word	0x58024400
 800be98:	03d09000 	.word	0x03d09000
 800be9c:	46000000 	.word	0x46000000
 800bea0:	4c742400 	.word	0x4c742400
 800bea4:	4a742400 	.word	0x4a742400
 800bea8:	4bbebc20 	.word	0x4bbebc20

0800beac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800beac:	b480      	push	{r7}
 800beae:	b089      	sub	sp, #36	@ 0x24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800beb4:	4ba0      	ldr	r3, [pc, #640]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800beb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb8:	f003 0303 	and.w	r3, r3, #3
 800bebc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bebe:	4b9e      	ldr	r3, [pc, #632]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec2:	091b      	lsrs	r3, r3, #4
 800bec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bec8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800beca:	4b9b      	ldr	r3, [pc, #620]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800becc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bed4:	4b98      	ldr	r3, [pc, #608]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed8:	08db      	lsrs	r3, r3, #3
 800beda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	fb02 f303 	mul.w	r3, r2, r3
 800bee4:	ee07 3a90 	vmov	s15, r3
 800bee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8111 	beq.w	800c11a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	2b02      	cmp	r3, #2
 800befc:	f000 8083 	beq.w	800c006 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	f200 80a1 	bhi.w	800c04a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d056      	beq.n	800bfc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf14:	e099      	b.n	800c04a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf16:	4b88      	ldr	r3, [pc, #544]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d02d      	beq.n	800bf7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf22:	4b85      	ldr	r3, [pc, #532]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	08db      	lsrs	r3, r3, #3
 800bf28:	f003 0303 	and.w	r3, r3, #3
 800bf2c:	4a83      	ldr	r2, [pc, #524]	@ (800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bf2e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	ee07 3a90 	vmov	s15, r3
 800bf3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	ee07 3a90 	vmov	s15, r3
 800bf44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4c:	4b7a      	ldr	r3, [pc, #488]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf54:	ee07 3a90 	vmov	s15, r3
 800bf58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf60:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf7c:	e087      	b.n	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	ee07 3a90 	vmov	s15, r3
 800bf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c144 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf90:	4b69      	ldr	r3, [pc, #420]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf98:	ee07 3a90 	vmov	s15, r3
 800bf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfa4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfc0:	e065      	b.n	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	ee07 3a90 	vmov	s15, r3
 800bfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfcc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bfd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd4:	4b58      	ldr	r3, [pc, #352]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfdc:	ee07 3a90 	vmov	s15, r3
 800bfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfe8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c004:	e043      	b.n	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	ee07 3a90 	vmov	s15, r3
 800c00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c010:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c14c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c018:	4b47      	ldr	r3, [pc, #284]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c028:	ed97 6a03 	vldr	s12, [r7, #12]
 800c02c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c048:	e021      	b.n	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c054:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c144 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c05c:	4b36      	ldr	r3, [pc, #216]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c070:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c08c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c08e:	4b2a      	ldr	r3, [pc, #168]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c092:	0a5b      	lsrs	r3, r3, #9
 800c094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c098:	ee07 3a90 	vmov	s15, r3
 800c09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b4:	ee17 2a90 	vmov	r2, s15
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c0bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c0:	0c1b      	lsrs	r3, r3, #16
 800c0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0e2:	ee17 2a90 	vmov	r2, s15
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c0ea:	4b13      	ldr	r3, [pc, #76]	@ (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ee:	0e1b      	lsrs	r3, r3, #24
 800c0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0f4:	ee07 3a90 	vmov	s15, r3
 800c0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c104:	edd7 6a07 	vldr	s13, [r7, #28]
 800c108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c110:	ee17 2a90 	vmov	r2, s15
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c118:	e008      	b.n	800c12c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	609a      	str	r2, [r3, #8]
}
 800c12c:	bf00      	nop
 800c12e:	3724      	adds	r7, #36	@ 0x24
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	58024400 	.word	0x58024400
 800c13c:	03d09000 	.word	0x03d09000
 800c140:	46000000 	.word	0x46000000
 800c144:	4c742400 	.word	0x4c742400
 800c148:	4a742400 	.word	0x4a742400
 800c14c:	4bbebc20 	.word	0x4bbebc20

0800c150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c15e:	4b53      	ldr	r3, [pc, #332]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	2b03      	cmp	r3, #3
 800c168:	d101      	bne.n	800c16e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e099      	b.n	800c2a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c16e:	4b4f      	ldr	r3, [pc, #316]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a4e      	ldr	r2, [pc, #312]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c174:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c17a:	f7f7 fdd5 	bl	8003d28 <HAL_GetTick>
 800c17e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c180:	e008      	b.n	800c194 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c182:	f7f7 fdd1 	bl	8003d28 <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d901      	bls.n	800c194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e086      	b.n	800c2a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c194:	4b45      	ldr	r3, [pc, #276]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1f0      	bne.n	800c182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1a0:	4b42      	ldr	r3, [pc, #264]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	031b      	lsls	r3, r3, #12
 800c1ae:	493f      	ldr	r1, [pc, #252]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	025b      	lsls	r3, r3, #9
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	041b      	lsls	r3, r3, #16
 800c1d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	061b      	lsls	r3, r3, #24
 800c1e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c1e4:	4931      	ldr	r1, [pc, #196]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1ea:	4b30      	ldr	r3, [pc, #192]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	492d      	ldr	r1, [pc, #180]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1fc:	4b2b      	ldr	r3, [pc, #172]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c200:	f023 0220 	bic.w	r2, r3, #32
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	4928      	ldr	r1, [pc, #160]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c20e:	4b27      	ldr	r3, [pc, #156]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c212:	4a26      	ldr	r2, [pc, #152]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c214:	f023 0310 	bic.w	r3, r3, #16
 800c218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c21a:	4b24      	ldr	r3, [pc, #144]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c21c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c21e:	4b24      	ldr	r3, [pc, #144]	@ (800c2b0 <RCCEx_PLL2_Config+0x160>)
 800c220:	4013      	ands	r3, r2
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	69d2      	ldr	r2, [r2, #28]
 800c226:	00d2      	lsls	r2, r2, #3
 800c228:	4920      	ldr	r1, [pc, #128]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c22a:	4313      	orrs	r3, r2
 800c22c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c22e:	4b1f      	ldr	r3, [pc, #124]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c232:	4a1e      	ldr	r2, [pc, #120]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c234:	f043 0310 	orr.w	r3, r3, #16
 800c238:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d106      	bne.n	800c24e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c240:	4b1a      	ldr	r3, [pc, #104]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c244:	4a19      	ldr	r2, [pc, #100]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c24a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c24c:	e00f      	b.n	800c26e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d106      	bne.n	800c262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c254:	4b15      	ldr	r3, [pc, #84]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	4a14      	ldr	r2, [pc, #80]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c25a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c25e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c260:	e005      	b.n	800c26e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c262:	4b12      	ldr	r3, [pc, #72]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c266:	4a11      	ldr	r2, [pc, #68]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c26c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c26e:	4b0f      	ldr	r3, [pc, #60]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a0e      	ldr	r2, [pc, #56]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c27a:	f7f7 fd55 	bl	8003d28 <HAL_GetTick>
 800c27e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c280:	e008      	b.n	800c294 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c282:	f7f7 fd51 	bl	8003d28 <HAL_GetTick>
 800c286:	4602      	mov	r2, r0
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d901      	bls.n	800c294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e006      	b.n	800c2a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c294:	4b05      	ldr	r3, [pc, #20]	@ (800c2ac <RCCEx_PLL2_Config+0x15c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0f0      	beq.n	800c282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	58024400 	.word	0x58024400
 800c2b0:	ffff0007 	.word	0xffff0007

0800c2b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2c2:	4b53      	ldr	r3, [pc, #332]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c6:	f003 0303 	and.w	r3, r3, #3
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d101      	bne.n	800c2d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e099      	b.n	800c406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2d2:	4b4f      	ldr	r3, [pc, #316]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a4e      	ldr	r2, [pc, #312]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c2d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2de:	f7f7 fd23 	bl	8003d28 <HAL_GetTick>
 800c2e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2e4:	e008      	b.n	800c2f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2e6:	f7f7 fd1f 	bl	8003d28 <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d901      	bls.n	800c2f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e086      	b.n	800c406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2f8:	4b45      	ldr	r3, [pc, #276]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1f0      	bne.n	800c2e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c304:	4b42      	ldr	r3, [pc, #264]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c308:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	051b      	lsls	r3, r3, #20
 800c312:	493f      	ldr	r1, [pc, #252]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c314:	4313      	orrs	r3, r2
 800c316:	628b      	str	r3, [r1, #40]	@ 0x28
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	3b01      	subs	r3, #1
 800c328:	025b      	lsls	r3, r3, #9
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	3b01      	subs	r3, #1
 800c334:	041b      	lsls	r3, r3, #16
 800c336:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c33a:	431a      	orrs	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	3b01      	subs	r3, #1
 800c342:	061b      	lsls	r3, r3, #24
 800c344:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c348:	4931      	ldr	r1, [pc, #196]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c34a:	4313      	orrs	r3, r2
 800c34c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c34e:	4b30      	ldr	r3, [pc, #192]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c352:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	492d      	ldr	r1, [pc, #180]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c35c:	4313      	orrs	r3, r2
 800c35e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c360:	4b2b      	ldr	r3, [pc, #172]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c364:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	699b      	ldr	r3, [r3, #24]
 800c36c:	4928      	ldr	r1, [pc, #160]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c372:	4b27      	ldr	r3, [pc, #156]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	4a26      	ldr	r2, [pc, #152]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c37e:	4b24      	ldr	r3, [pc, #144]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c382:	4b24      	ldr	r3, [pc, #144]	@ (800c414 <RCCEx_PLL3_Config+0x160>)
 800c384:	4013      	ands	r3, r2
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	69d2      	ldr	r2, [r2, #28]
 800c38a:	00d2      	lsls	r2, r2, #3
 800c38c:	4920      	ldr	r1, [pc, #128]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c392:	4b1f      	ldr	r3, [pc, #124]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c396:	4a1e      	ldr	r2, [pc, #120]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c39c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a8:	4a19      	ldr	r2, [pc, #100]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3b0:	e00f      	b.n	800c3d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d106      	bne.n	800c3c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3b8:	4b15      	ldr	r3, [pc, #84]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3bc:	4a14      	ldr	r2, [pc, #80]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3c4:	e005      	b.n	800c3d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3c6:	4b12      	ldr	r3, [pc, #72]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ca:	4a11      	ldr	r2, [pc, #68]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a0e      	ldr	r2, [pc, #56]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3de:	f7f7 fca3 	bl	8003d28 <HAL_GetTick>
 800c3e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3e4:	e008      	b.n	800c3f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3e6:	f7f7 fc9f 	bl	8003d28 <HAL_GetTick>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d901      	bls.n	800c3f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e006      	b.n	800c406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3f8:	4b05      	ldr	r3, [pc, #20]	@ (800c410 <RCCEx_PLL3_Config+0x15c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0f0      	beq.n	800c3e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	58024400 	.word	0x58024400
 800c414:	ffff0007 	.word	0xffff0007

0800c418 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	@ 0x28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e075      	b.n	800c516 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d105      	bne.n	800c442 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7f5 fd69 	bl	8001f14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2204      	movs	r2, #4
 800c446:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f868 	bl	800c520 <HAL_SD_InitCard>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e05d      	b.n	800c516 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4619      	mov	r1, r3
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fdb5 	bl	800cfd0 <HAL_SD_GetCardStatus>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e052      	b.n	800c516 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c470:	7e3b      	ldrb	r3, [r7, #24]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c476:	7e7b      	ldrb	r3, [r7, #25]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c480:	2b01      	cmp	r3, #1
 800c482:	d10a      	bne.n	800c49a <HAL_SD_Init+0x82>
 800c484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c486:	2b00      	cmp	r3, #0
 800c488:	d102      	bne.n	800c490 <HAL_SD_Init+0x78>
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d004      	beq.n	800c49a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c496:	659a      	str	r2, [r3, #88]	@ 0x58
 800c498:	e00b      	b.n	800c4b2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d104      	bne.n	800c4ac <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4a8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c4aa:	e002      	b.n	800c4b2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fe73 	bl	800d1a4 <HAL_SD_ConfigWideBusOperation>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e026      	b.n	800c516 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c4c8:	f7f7 fc2e 	bl	8003d28 <HAL_GetTick>
 800c4cc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c4ce:	e011      	b.n	800c4f4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c4d0:	f7f7 fc2a 	bl	8003d28 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4de:	d109      	bne.n	800c4f4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c4e6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e010      	b.n	800c516 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 ff67 	bl	800d3c8 <HAL_SD_GetCardState>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	d1e7      	bne.n	800c4d0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3728      	adds	r7, #40	@ 0x28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c520:	b590      	push	{r4, r7, lr}
 800c522:	b08d      	sub	sp, #52	@ 0x34
 800c524:	af02      	add	r7, sp, #8
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c52c:	2300      	movs	r3, #0
 800c52e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c530:	2300      	movs	r3, #0
 800c532:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c534:	2300      	movs	r3, #0
 800c536:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c538:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c53c:	f04f 0100 	mov.w	r1, #0
 800c540:	f7fe fd24 	bl	800af8c <HAL_RCCEx_GetPeriphCLKFreq>
 800c544:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d109      	bne.n	800c560 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c55a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e070      	b.n	800c642 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c562:	0a1b      	lsrs	r3, r3, #8
 800c564:	4a39      	ldr	r2, [pc, #228]	@ (800c64c <HAL_SD_InitCard+0x12c>)
 800c566:	fba2 2303 	umull	r2, r3, r2, r3
 800c56a:	091b      	lsrs	r3, r3, #4
 800c56c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681c      	ldr	r4, [r3, #0]
 800c572:	466a      	mov	r2, sp
 800c574:	f107 0318 	add.w	r3, r7, #24
 800c578:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c57c:	e882 0003 	stmia.w	r2, {r0, r1}
 800c580:	f107 030c 	add.w	r3, r7, #12
 800c584:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c586:	4620      	mov	r0, r4
 800c588:	f004 fa24 	bl	80109d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f004 fa67 	bl	8010a64 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d005      	beq.n	800c5a8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	005b      	lsls	r3, r3, #1
 800c5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c5ae:	4a28      	ldr	r2, [pc, #160]	@ (800c650 <HAL_SD_InitCard+0x130>)
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7f7 fbc1 	bl	8003d40 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fff0 	bl	800d5a4 <SD_PowerON>
 800c5c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00b      	beq.n	800c5e4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e02e      	b.n	800c642 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 ff0f 	bl	800d408 <SD_InitCard>
 800c5ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e01b      	b.n	800c642 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c612:	4618      	mov	r0, r3
 800c614:	f004 fabc 	bl	8010b90 <SDMMC_CmdBlockLength>
 800c618:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00f      	beq.n	800c640 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a0b      	ldr	r2, [pc, #44]	@ (800c654 <HAL_SD_InitCard+0x134>)
 800c626:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	431a      	orrs	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e000      	b.n	800c642 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	372c      	adds	r7, #44	@ 0x2c
 800c646:	46bd      	mov	sp, r7
 800c648:	bd90      	pop	{r4, r7, pc}
 800c64a:	bf00      	nop
 800c64c:	014f8b59 	.word	0x014f8b59
 800c650:	00012110 	.word	0x00012110
 800c654:	1fe00fff 	.word	0x1fe00fff

0800c658 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b092      	sub	sp, #72	@ 0x48
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c666:	f7f7 fb5f 	bl	8003d28 <HAL_GetTick>
 800c66a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d107      	bne.n	800c68a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e167      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b01      	cmp	r3, #1
 800c694:	f040 815a 	bne.w	800c94c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c69e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	441a      	add	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d907      	bls.n	800c6bc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e14e      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2203      	movs	r2, #3
 800c6c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d002      	beq.n	800c6da <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	025b      	lsls	r3, r3, #9
 800c6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c6da:	f04f 33ff 	mov.w	r3, #4294967295
 800c6de:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	025b      	lsls	r3, r3, #9
 800c6e4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c6e6:	2390      	movs	r3, #144	@ 0x90
 800c6e8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f107 0214 	add.w	r2, r7, #20
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f004 fa19 	bl	8010b38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68da      	ldr	r2, [r3, #12]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c714:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d90a      	bls.n	800c732 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2202      	movs	r2, #2
 800c720:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c728:	4618      	mov	r0, r3
 800c72a:	f004 fa77 	bl	8010c1c <SDMMC_CmdReadMultiBlock>
 800c72e:	6478      	str	r0, [r7, #68]	@ 0x44
 800c730:	e009      	b.n	800c746 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2201      	movs	r2, #1
 800c736:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c73e:	4618      	mov	r0, r3
 800c740:	f004 fa49 	bl	8010bd6 <SDMMC_CmdReadSingleBlock>
 800c744:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d012      	beq.n	800c772 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a84      	ldr	r2, [pc, #528]	@ (800c964 <HAL_SD_ReadBlocks+0x30c>)
 800c752:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c75a:	431a      	orrs	r2, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e0f3      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c776:	e058      	b.n	800c82a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c77e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d033      	beq.n	800c7ee <HAL_SD_ReadBlocks+0x196>
 800c786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c788:	2b1f      	cmp	r3, #31
 800c78a:	d930      	bls.n	800c7ee <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800c78c:	2300      	movs	r3, #0
 800c78e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c790:	e027      	b.n	800c7e2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4618      	mov	r0, r3
 800c798:	f004 f946 	bl	8010a28 <SDMMC_ReadFIFO>
 800c79c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ae:	0a1b      	lsrs	r3, r3, #8
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7be:	0c1b      	lsrs	r3, r3, #16
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ce:	0e1b      	lsrs	r3, r3, #24
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d8:	3301      	adds	r3, #1
 800c7da:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800c7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7de:	3301      	adds	r3, #1
 800c7e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7e4:	2b07      	cmp	r3, #7
 800c7e6:	d9d4      	bls.n	800c792 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800c7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ea:	3b20      	subs	r3, #32
 800c7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c7ee:	f7f7 fa9b 	bl	8003d28 <HAL_GetTick>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d902      	bls.n	800c804 <HAL_SD_ReadBlocks+0x1ac>
 800c7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c800:	2b00      	cmp	r3, #0
 800c802:	d112      	bne.n	800c82a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a56      	ldr	r2, [pc, #344]	@ (800c964 <HAL_SD_ReadBlocks+0x30c>)
 800c80a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e097      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c830:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c834:	2b00      	cmp	r3, #0
 800c836:	d09f      	beq.n	800c778 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68da      	ldr	r2, [r3, #12]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c846:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c84e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c852:	2b00      	cmp	r3, #0
 800c854:	d022      	beq.n	800c89c <HAL_SD_ReadBlocks+0x244>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d91f      	bls.n	800c89c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c860:	2b03      	cmp	r3, #3
 800c862:	d01b      	beq.n	800c89c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4618      	mov	r0, r3
 800c86a:	f004 fa41 	bl	8010cf0 <SDMMC_CmdStopTransfer>
 800c86e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c872:	2b00      	cmp	r3, #0
 800c874:	d012      	beq.n	800c89c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a3a      	ldr	r2, [pc, #232]	@ (800c964 <HAL_SD_ReadBlocks+0x30c>)
 800c87c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c884:	431a      	orrs	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e05e      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a2:	f003 0308 	and.w	r3, r3, #8
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d012      	beq.n	800c8d0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a2d      	ldr	r2, [pc, #180]	@ (800c964 <HAL_SD_ReadBlocks+0x30c>)
 800c8b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8b6:	f043 0208 	orr.w	r2, r3, #8
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e044      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8d6:	f003 0302 	and.w	r3, r3, #2
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d012      	beq.n	800c904 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a20      	ldr	r2, [pc, #128]	@ (800c964 <HAL_SD_ReadBlocks+0x30c>)
 800c8e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ea:	f043 0202 	orr.w	r2, r3, #2
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e02a      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c90a:	f003 0320 	and.w	r3, r3, #32
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d012      	beq.n	800c938 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a13      	ldr	r2, [pc, #76]	@ (800c964 <HAL_SD_ReadBlocks+0x30c>)
 800c918:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c91e:	f043 0220 	orr.w	r2, r3, #32
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	e010      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a0a      	ldr	r2, [pc, #40]	@ (800c968 <HAL_SD_ReadBlocks+0x310>)
 800c93e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	e006      	b.n	800c95a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c950:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
  }
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3748      	adds	r7, #72	@ 0x48
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	1fe00fff 	.word	0x1fe00fff
 800c968:	18000f3a 	.word	0x18000f3a

0800c96c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b092      	sub	sp, #72	@ 0x48
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c97a:	f7f7 f9d5 	bl	8003d28 <HAL_GetTick>
 800c97e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d107      	bne.n	800c99e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c992:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e16b      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	f040 815e 	bne.w	800cc68 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c9b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	441a      	add	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d907      	bls.n	800c9d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e152      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d002      	beq.n	800c9ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ea:	025b      	lsls	r3, r3, #9
 800c9ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	025b      	lsls	r3, r3, #9
 800c9f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c9fa:	2390      	movs	r3, #144	@ 0x90
 800c9fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ca06:	2300      	movs	r3, #0
 800ca08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f107 0218 	add.w	r2, r7, #24
 800ca12:	4611      	mov	r1, r2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f004 f88f 	bl	8010b38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68da      	ldr	r2, [r3, #12]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca28:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d90a      	bls.n	800ca46 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2220      	movs	r2, #32
 800ca34:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f004 f933 	bl	8010ca8 <SDMMC_CmdWriteMultiBlock>
 800ca42:	6478      	str	r0, [r7, #68]	@ 0x44
 800ca44:	e009      	b.n	800ca5a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2210      	movs	r2, #16
 800ca4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca52:	4618      	mov	r0, r3
 800ca54:	f004 f905 	bl	8010c62 <SDMMC_CmdWriteSingleBlock>
 800ca58:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d012      	beq.n	800ca86 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a86      	ldr	r2, [pc, #536]	@ (800cc80 <HAL_SD_WriteBlocks+0x314>)
 800ca66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca6e:	431a      	orrs	r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e0f7      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800ca8a:	e05c      	b.n	800cb46 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d037      	beq.n	800cb0a <HAL_SD_WriteBlocks+0x19e>
 800ca9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9c:	2b1f      	cmp	r3, #31
 800ca9e:	d934      	bls.n	800cb0a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800caa0:	2300      	movs	r3, #0
 800caa2:	643b      	str	r3, [r7, #64]	@ 0x40
 800caa4:	e02b      	b.n	800cafe <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800caa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800caac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caae:	3301      	adds	r3, #1
 800cab0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	021a      	lsls	r2, r3, #8
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	4313      	orrs	r3, r2
 800cabc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac0:	3301      	adds	r3, #1
 800cac2:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	041a      	lsls	r2, r3, #16
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	4313      	orrs	r3, r2
 800cace:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad2:	3301      	adds	r3, #1
 800cad4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	061a      	lsls	r2, r3, #24
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	4313      	orrs	r3, r2
 800cae0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae4:	3301      	adds	r3, #1
 800cae6:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f107 0214 	add.w	r2, r7, #20
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f003 ffa5 	bl	8010a42 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800caf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cafa:	3301      	adds	r3, #1
 800cafc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cafe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb00:	2b07      	cmp	r3, #7
 800cb02:	d9d0      	bls.n	800caa6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800cb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb06:	3b20      	subs	r3, #32
 800cb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cb0a:	f7f7 f90d 	bl	8003d28 <HAL_GetTick>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb12:	1ad3      	subs	r3, r2, r3
 800cb14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d902      	bls.n	800cb20 <HAL_SD_WriteBlocks+0x1b4>
 800cb1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d112      	bne.n	800cb46 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a56      	ldr	r2, [pc, #344]	@ (800cc80 <HAL_SD_WriteBlocks+0x314>)
 800cb26:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb2e:	431a      	orrs	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e097      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb4c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d09b      	beq.n	800ca8c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68da      	ldr	r2, [r3, #12]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb62:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d022      	beq.n	800cbb8 <HAL_SD_WriteBlocks+0x24c>
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d91f      	bls.n	800cbb8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d01b      	beq.n	800cbb8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f004 f8b3 	bl	8010cf0 <SDMMC_CmdStopTransfer>
 800cb8a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800cb8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d012      	beq.n	800cbb8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a3a      	ldr	r2, [pc, #232]	@ (800cc80 <HAL_SD_WriteBlocks+0x314>)
 800cb98:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba0:	431a      	orrs	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e05e      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbbe:	f003 0308 	and.w	r3, r3, #8
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d012      	beq.n	800cbec <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a2d      	ldr	r2, [pc, #180]	@ (800cc80 <HAL_SD_WriteBlocks+0x314>)
 800cbcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbd2:	f043 0208 	orr.w	r2, r3, #8
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e044      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d012      	beq.n	800cc20 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a20      	ldr	r2, [pc, #128]	@ (800cc80 <HAL_SD_WriteBlocks+0x314>)
 800cc00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc06:	f043 0202 	orr.w	r2, r3, #2
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e02a      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc26:	f003 0310 	and.w	r3, r3, #16
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d012      	beq.n	800cc54 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a13      	ldr	r2, [pc, #76]	@ (800cc80 <HAL_SD_WriteBlocks+0x314>)
 800cc34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc3a:	f043 0210 	orr.w	r2, r3, #16
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2201      	movs	r2, #1
 800cc46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e010      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a0a      	ldr	r2, [pc, #40]	@ (800cc84 <HAL_SD_WriteBlocks+0x318>)
 800cc5a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	e006      	b.n	800cc76 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
  }
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3748      	adds	r7, #72	@ 0x48
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	1fe00fff 	.word	0x1fe00fff
 800cc84:	18000f3a 	.word	0x18000f3a

0800cc88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc96:	0f9b      	lsrs	r3, r3, #30
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cca2:	0e9b      	lsrs	r3, r3, #26
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	f003 030f 	and.w	r3, r3, #15
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccb4:	0e1b      	lsrs	r3, r3, #24
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0303 	and.w	r3, r3, #3
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccc6:	0c1b      	lsrs	r3, r3, #16
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccd2:	0a1b      	lsrs	r3, r3, #8
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cce8:	0d1b      	lsrs	r3, r3, #20
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccf4:	0c1b      	lsrs	r3, r3, #16
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	f003 030f 	and.w	r3, r3, #15
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd06:	0bdb      	lsrs	r3, r3, #15
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd18:	0b9b      	lsrs	r3, r3, #14
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd2a:	0b5b      	lsrs	r3, r3, #13
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd3c:	0b1b      	lsrs	r3, r3, #12
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d163      	bne.n	800ce20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd5c:	009a      	lsls	r2, r3, #2
 800cd5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cd62:	4013      	ands	r3, r2
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cd68:	0f92      	lsrs	r2, r2, #30
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd74:	0edb      	lsrs	r3, r3, #27
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	f003 0307 	and.w	r3, r3, #7
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd86:	0e1b      	lsrs	r3, r3, #24
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	f003 0307 	and.w	r3, r3, #7
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd98:	0d5b      	lsrs	r3, r3, #21
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	f003 0307 	and.w	r3, r3, #7
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdaa:	0c9b      	lsrs	r3, r3, #18
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 0307 	and.w	r3, r3, #7
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdbc:	0bdb      	lsrs	r3, r3, #15
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	f003 0307 	and.w	r3, r3, #7
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	7e1b      	ldrb	r3, [r3, #24]
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	3302      	adds	r3, #2
 800cde0:	2201      	movs	r2, #1
 800cde2:	fa02 f303 	lsl.w	r3, r2, r3
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cdea:	fb03 f202 	mul.w	r2, r3, r2
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	7a1b      	ldrb	r3, [r3, #8]
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	f003 030f 	and.w	r3, r3, #15
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	409a      	lsls	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ce0c:	0a52      	lsrs	r2, r2, #9
 800ce0e:	fb03 f202 	mul.w	r2, r3, r2
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce1c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ce1e:	e031      	b.n	800ce84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d11d      	bne.n	800ce64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce2c:	041b      	lsls	r3, r3, #16
 800ce2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce36:	0c1b      	lsrs	r3, r3, #16
 800ce38:	431a      	orrs	r2, r3
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	3301      	adds	r3, #1
 800ce44:	029a      	lsls	r2, r3, #10
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce58:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	655a      	str	r2, [r3, #84]	@ 0x54
 800ce62:	e00f      	b.n	800ce84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a58      	ldr	r2, [pc, #352]	@ (800cfcc <HAL_SD_GetCardCSD+0x344>)
 800ce6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e09d      	b.n	800cfc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce88:	0b9b      	lsrs	r3, r3, #14
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	f003 0301 	and.w	r3, r3, #1
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce9a:	09db      	lsrs	r3, r3, #7
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cea2:	b2da      	uxtb	r2, r3
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cebc:	0fdb      	lsrs	r3, r3, #31
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cec8:	0f5b      	lsrs	r3, r3, #29
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	f003 0303 	and.w	r3, r3, #3
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ceda:	0e9b      	lsrs	r3, r3, #26
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	f003 0307 	and.w	r3, r3, #7
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ceec:	0d9b      	lsrs	r3, r3, #22
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	f003 030f 	and.w	r3, r3, #15
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cefe:	0d5b      	lsrs	r3, r3, #21
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf1a:	0c1b      	lsrs	r3, r3, #16
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf2e:	0bdb      	lsrs	r3, r3, #15
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf42:	0b9b      	lsrs	r3, r3, #14
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf56:	0b5b      	lsrs	r3, r3, #13
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf6a:	0b1b      	lsrs	r3, r3, #12
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf7e:	0a9b      	lsrs	r3, r3, #10
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	f003 0303 	and.w	r3, r3, #3
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf92:	0a1b      	lsrs	r3, r3, #8
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	f003 0303 	and.w	r3, r3, #3
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfa6:	085b      	lsrs	r3, r3, #1
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	1fe00fff 	.word	0x1fe00fff

0800cfd0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b094      	sub	sp, #80	@ 0x50
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	d101      	bne.n	800cff0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e0a7      	b.n	800d140 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cff0:	f107 0308 	add.w	r3, r7, #8
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fb62 	bl	800d6c0 <SD_SendSDStatus>
 800cffc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d000:	2b00      	cmp	r3, #0
 800d002:	d011      	beq.n	800d028 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a4f      	ldr	r2, [pc, #316]	@ (800d148 <HAL_SD_GetCardStatus+0x178>)
 800d00a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d012:	431a      	orrs	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d020:	2301      	movs	r3, #1
 800d022:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d026:	e070      	b.n	800d10a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	099b      	lsrs	r3, r3, #6
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	f003 0303 	and.w	r3, r3, #3
 800d032:	b2da      	uxtb	r2, r3
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	095b      	lsrs	r3, r3, #5
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	b2da      	uxtb	r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	0a1b      	lsrs	r3, r3, #8
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d052:	b29a      	uxth	r2, r3
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	0e1b      	lsrs	r3, r3, #24
 800d058:	b29b      	uxth	r3, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	061a      	lsls	r2, r3, #24
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	021b      	lsls	r3, r3, #8
 800d06a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d06e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	0a1b      	lsrs	r3, r3, #8
 800d074:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d078:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	0e1b      	lsrs	r3, r3, #24
 800d07e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	b2da      	uxtb	r2, r3
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	b2da      	uxtb	r2, r3
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	0d1b      	lsrs	r3, r3, #20
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	f003 030f 	and.w	r3, r3, #15
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	0c1b      	lsrs	r3, r3, #16
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	0a9b      	lsrs	r3, r3, #10
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	0a1b      	lsrs	r3, r3, #8
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	f003 0303 	and.w	r3, r3, #3
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	091b      	lsrs	r3, r3, #4
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	f003 030f 	and.w	r3, r3, #15
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	f003 030f 	and.w	r3, r3, #15
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	0e1b      	lsrs	r3, r3, #24
 800d104:	b2da      	uxtb	r2, r3
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d112:	4618      	mov	r0, r3
 800d114:	f003 fd3c 	bl	8010b90 <SDMMC_CmdBlockLength>
 800d118:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00d      	beq.n	800d13c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a08      	ldr	r2, [pc, #32]	@ (800d148 <HAL_SD_GetCardStatus+0x178>)
 800d126:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d12c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800d13c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d140:	4618      	mov	r0, r3
 800d142:	3750      	adds	r7, #80	@ 0x50
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	1fe00fff 	.word	0x1fe00fff

0800d14c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b08d      	sub	sp, #52	@ 0x34
 800d1a8:	af02      	add	r7, sp, #8
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2203      	movs	r2, #3
 800d1b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d02e      	beq.n	800d222 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1ca:	d106      	bne.n	800d1da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	635a      	str	r2, [r3, #52]	@ 0x34
 800d1d8:	e029      	b.n	800d22e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1e0:	d10a      	bne.n	800d1f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fb64 	bl	800d8b0 <SD_WideBus_Enable>
 800d1e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	431a      	orrs	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	635a      	str	r2, [r3, #52]	@ 0x34
 800d1f6:	e01a      	b.n	800d22e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10a      	bne.n	800d214 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fba1 	bl	800d946 <SD_WideBus_Disable>
 800d204:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	431a      	orrs	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	635a      	str	r2, [r3, #52]	@ 0x34
 800d212:	e00c      	b.n	800d22e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d218:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d220:	e005      	b.n	800d22e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d226:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d232:	2b00      	cmp	r3, #0
 800d234:	d007      	beq.n	800d246 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a5f      	ldr	r2, [pc, #380]	@ (800d3b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d23c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d244:	e096      	b.n	800d374 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d246:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d24a:	f04f 0100 	mov.w	r1, #0
 800d24e:	f7fd fe9d 	bl	800af8c <HAL_RCCEx_GetPeriphCLKFreq>
 800d252:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 8083 	beq.w	800d362 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	695a      	ldr	r2, [r3, #20]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	4950      	ldr	r1, [pc, #320]	@ (800d3bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d27a:	fba1 1303 	umull	r1, r3, r1, r3
 800d27e:	0e1b      	lsrs	r3, r3, #24
 800d280:	429a      	cmp	r2, r3
 800d282:	d303      	bcc.n	800d28c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	61bb      	str	r3, [r7, #24]
 800d28a:	e05a      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d294:	d103      	bne.n	800d29e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	e051      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2a6:	d126      	bne.n	800d2f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	695b      	ldr	r3, [r3, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10e      	bne.n	800d2ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	4a43      	ldr	r2, [pc, #268]	@ (800d3c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d906      	bls.n	800d2c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	4a40      	ldr	r2, [pc, #256]	@ (800d3bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c0:	0e5b      	lsrs	r3, r3, #25
 800d2c2:	61bb      	str	r3, [r7, #24]
 800d2c4:	e03d      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	61bb      	str	r3, [r7, #24]
 800d2cc:	e039      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	69fa      	ldr	r2, [r7, #28]
 800d2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2da:	4a39      	ldr	r2, [pc, #228]	@ (800d3c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d906      	bls.n	800d2ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	4a36      	ldr	r2, [pc, #216]	@ (800d3bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e8:	0e5b      	lsrs	r3, r3, #25
 800d2ea:	61bb      	str	r3, [r7, #24]
 800d2ec:	e029      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	61bb      	str	r3, [r7, #24]
 800d2f4:	e025      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10e      	bne.n	800d31c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	4a30      	ldr	r2, [pc, #192]	@ (800d3c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d906      	bls.n	800d314 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	4a2c      	ldr	r2, [pc, #176]	@ (800d3bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d30a:	fba2 2303 	umull	r2, r3, r2, r3
 800d30e:	0e1b      	lsrs	r3, r3, #24
 800d310:	61bb      	str	r3, [r7, #24]
 800d312:	e016      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	61bb      	str	r3, [r7, #24]
 800d31a:	e012      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	69fa      	ldr	r2, [r7, #28]
 800d324:	fbb2 f3f3 	udiv	r3, r2, r3
 800d328:	4a26      	ldr	r2, [pc, #152]	@ (800d3c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d906      	bls.n	800d33c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	4a22      	ldr	r2, [pc, #136]	@ (800d3bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d332:	fba2 2303 	umull	r2, r3, r2, r3
 800d336:	0e1b      	lsrs	r3, r3, #24
 800d338:	61bb      	str	r3, [r7, #24]
 800d33a:	e002      	b.n	800d342 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681c      	ldr	r4, [r3, #0]
 800d346:	466a      	mov	r2, sp
 800d348:	f107 0314 	add.w	r3, r7, #20
 800d34c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d350:	e882 0003 	stmia.w	r2, {r0, r1}
 800d354:	f107 0308 	add.w	r3, r7, #8
 800d358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d35a:	4620      	mov	r0, r4
 800d35c:	f003 fb3a 	bl	80109d4 <SDMMC_Init>
 800d360:	e008      	b.n	800d374 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d366:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d37c:	4618      	mov	r0, r3
 800d37e:	f003 fc07 	bl	8010b90 <SDMMC_CmdBlockLength>
 800d382:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00c      	beq.n	800d3a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a0a      	ldr	r2, [pc, #40]	@ (800d3b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d390:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	431a      	orrs	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	372c      	adds	r7, #44	@ 0x2c
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd90      	pop	{r4, r7, pc}
 800d3b8:	1fe00fff 	.word	0x1fe00fff
 800d3bc:	55e63b89 	.word	0x55e63b89
 800d3c0:	02faf080 	.word	0x02faf080
 800d3c4:	017d7840 	.word	0x017d7840

0800d3c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d3d4:	f107 030c 	add.w	r3, r7, #12
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fa40 	bl	800d860 <SD_SendStatus>
 800d3e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d005      	beq.n	800d3f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	431a      	orrs	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	0a5b      	lsrs	r3, r3, #9
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d3fe:	693b      	ldr	r3, [r7, #16]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b090      	sub	sp, #64	@ 0x40
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d414:	f7f6 fc88 	bl	8003d28 <HAL_GetTick>
 800d418:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4618      	mov	r0, r3
 800d420:	f003 fb31 	bl	8010a86 <SDMMC_GetPowerState>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d102      	bne.n	800d430 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d42a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d42e:	e0b5      	b.n	800d59c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d434:	2b03      	cmp	r3, #3
 800d436:	d02e      	beq.n	800d496 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f003 fd7c 	bl	8010f3a <SDMMC_CmdSendCID>
 800d442:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <SD_InitCard+0x46>
    {
      return errorstate;
 800d44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d44c:	e0a6      	b.n	800d59c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2100      	movs	r1, #0
 800d454:	4618      	mov	r0, r3
 800d456:	f003 fb5c 	bl	8010b12 <SDMMC_GetResponse>
 800d45a:	4602      	mov	r2, r0
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2104      	movs	r1, #4
 800d466:	4618      	mov	r0, r3
 800d468:	f003 fb53 	bl	8010b12 <SDMMC_GetResponse>
 800d46c:	4602      	mov	r2, r0
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2108      	movs	r1, #8
 800d478:	4618      	mov	r0, r3
 800d47a:	f003 fb4a 	bl	8010b12 <SDMMC_GetResponse>
 800d47e:	4602      	mov	r2, r0
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	210c      	movs	r1, #12
 800d48a:	4618      	mov	r0, r3
 800d48c:	f003 fb41 	bl	8010b12 <SDMMC_GetResponse>
 800d490:	4602      	mov	r2, r0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	d01d      	beq.n	800d4da <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d49e:	e019      	b.n	800d4d4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f107 020a 	add.w	r2, r7, #10
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f003 fd84 	bl	8010fb8 <SDMMC_CmdSetRelAdd>
 800d4b0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <SD_InitCard+0xb4>
      {
        return errorstate;
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ba:	e06f      	b.n	800d59c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d4bc:	f7f6 fc34 	bl	8003d28 <HAL_GetTick>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d902      	bls.n	800d4d4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d4ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4d2:	e063      	b.n	800d59c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d4d4:	897b      	ldrh	r3, [r7, #10]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d0e2      	beq.n	800d4a0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d036      	beq.n	800d550 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d4e2:	897b      	ldrh	r3, [r7, #10]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f2:	041b      	lsls	r3, r3, #16
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f003 fd3e 	bl	8010f78 <SDMMC_CmdSendCSD>
 800d4fc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <SD_InitCard+0x100>
    {
      return errorstate;
 800d504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d506:	e049      	b.n	800d59c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2100      	movs	r1, #0
 800d50e:	4618      	mov	r0, r3
 800d510:	f003 faff 	bl	8010b12 <SDMMC_GetResponse>
 800d514:	4602      	mov	r2, r0
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2104      	movs	r1, #4
 800d520:	4618      	mov	r0, r3
 800d522:	f003 faf6 	bl	8010b12 <SDMMC_GetResponse>
 800d526:	4602      	mov	r2, r0
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2108      	movs	r1, #8
 800d532:	4618      	mov	r0, r3
 800d534:	f003 faed 	bl	8010b12 <SDMMC_GetResponse>
 800d538:	4602      	mov	r2, r0
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	210c      	movs	r1, #12
 800d544:	4618      	mov	r0, r3
 800d546:	f003 fae4 	bl	8010b12 <SDMMC_GetResponse>
 800d54a:	4602      	mov	r2, r0
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2104      	movs	r1, #4
 800d556:	4618      	mov	r0, r3
 800d558:	f003 fadb 	bl	8010b12 <SDMMC_GetResponse>
 800d55c:	4603      	mov	r3, r0
 800d55e:	0d1a      	lsrs	r2, r3, #20
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d564:	f107 030c 	add.w	r3, r7, #12
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7ff fb8c 	bl	800cc88 <HAL_SD_GetCardCSD>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d576:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d57a:	e00f      	b.n	800d59c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d584:	041b      	lsls	r3, r3, #16
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f003 fbed 	bl	8010d68 <SDMMC_CmdSelDesel>
 800d58e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <SD_InitCard+0x192>
  {
    return errorstate;
 800d596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d598:	e000      	b.n	800d59c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3740      	adds	r7, #64	@ 0x40
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f003 fbf6 	bl	8010dae <SDMMC_CmdGoIdleState>
 800d5c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <SD_PowerON+0x2a>
  {
    return errorstate;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	e072      	b.n	800d6b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f003 fc09 	bl	8010dea <SDMMC_CmdOperCond>
 800d5d8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5e0:	d10d      	bne.n	800d5fe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f003 fbde 	bl	8010dae <SDMMC_CmdGoIdleState>
 800d5f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d004      	beq.n	800d604 <SD_PowerON+0x60>
    {
      return errorstate;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	e05a      	b.n	800d6b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d137      	bne.n	800d67c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2100      	movs	r1, #0
 800d612:	4618      	mov	r0, r3
 800d614:	f003 fc09 	bl	8010e2a <SDMMC_CmdAppCommand>
 800d618:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d02d      	beq.n	800d67c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d620:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d624:	e046      	b.n	800d6b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2100      	movs	r1, #0
 800d62c:	4618      	mov	r0, r3
 800d62e:	f003 fbfc 	bl	8010e2a <SDMMC_CmdAppCommand>
 800d632:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <SD_PowerON+0x9a>
    {
      return errorstate;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	e03a      	b.n	800d6b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	491e      	ldr	r1, [pc, #120]	@ (800d6bc <SD_PowerON+0x118>)
 800d644:	4618      	mov	r0, r3
 800d646:	f003 fc13 	bl	8010e70 <SDMMC_CmdAppOperCommand>
 800d64a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d652:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d656:	e02d      	b.n	800d6b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f003 fa57 	bl	8010b12 <SDMMC_GetResponse>
 800d664:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	0fdb      	lsrs	r3, r3, #31
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d101      	bne.n	800d672 <SD_PowerON+0xce>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <SD_PowerON+0xd0>
 800d672:	2300      	movs	r3, #0
 800d674:	613b      	str	r3, [r7, #16]

    count++;
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	3301      	adds	r3, #1
 800d67a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d682:	4293      	cmp	r3, r2
 800d684:	d802      	bhi.n	800d68c <SD_PowerON+0xe8>
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d0cc      	beq.n	800d626 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d692:	4293      	cmp	r3, r2
 800d694:	d902      	bls.n	800d69c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d696:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d69a:	e00b      	b.n	800d6b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	c1100000 	.word	0xc1100000

0800d6c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08c      	sub	sp, #48	@ 0x30
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d6ca:	f7f6 fb2d 	bl	8003d28 <HAL_GetTick>
 800d6ce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2100      	movs	r1, #0
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f003 fa19 	bl	8010b12 <SDMMC_GetResponse>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6ea:	d102      	bne.n	800d6f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d6ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d6f0:	e0b0      	b.n	800d854 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2140      	movs	r1, #64	@ 0x40
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f003 fa49 	bl	8010b90 <SDMMC_CmdBlockLength>
 800d6fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d700:	6a3b      	ldr	r3, [r7, #32]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d005      	beq.n	800d712 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	e0a0      	b.n	800d854 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d71a:	041b      	lsls	r3, r3, #16
 800d71c:	4619      	mov	r1, r3
 800d71e:	4610      	mov	r0, r2
 800d720:	f003 fb83 	bl	8010e2a <SDMMC_CmdAppCommand>
 800d724:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d005      	beq.n	800d738 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	e08d      	b.n	800d854 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d738:	f04f 33ff 	mov.w	r3, #4294967295
 800d73c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d73e:	2340      	movs	r3, #64	@ 0x40
 800d740:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d742:	2360      	movs	r3, #96	@ 0x60
 800d744:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d746:	2302      	movs	r3, #2
 800d748:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d74e:	2301      	movs	r3, #1
 800d750:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f107 0208 	add.w	r2, r7, #8
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f003 f9eb 	bl	8010b38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	f003 fc6b 	bl	8011042 <SDMMC_CmdStatusRegister>
 800d76c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d02b      	beq.n	800d7cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	e069      	b.n	800d854 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d013      	beq.n	800d7b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d78e:	2300      	movs	r3, #0
 800d790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d792:	e00d      	b.n	800d7b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4618      	mov	r0, r3
 800d79a:	f003 f945 	bl	8010a28 <SDMMC_ReadFIFO>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a2:	601a      	str	r2, [r3, #0]
        pData++;
 800d7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b2:	2b07      	cmp	r3, #7
 800d7b4:	d9ee      	bls.n	800d794 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800d7b6:	f7f6 fab7 	bl	8003d28 <HAL_GetTick>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c4:	d102      	bne.n	800d7cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d7c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7ca:	e043      	b.n	800d854 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7d2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0d2      	beq.n	800d780 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7e0:	f003 0308 	and.w	r3, r3, #8
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d7e8:	2308      	movs	r3, #8
 800d7ea:	e033      	b.n	800d854 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f2:	f003 0302 	and.w	r3, r3, #2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	e02a      	b.n	800d854 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d804:	f003 0320 	and.w	r3, r3, #32
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d017      	beq.n	800d83c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d80c:	2320      	movs	r3, #32
 800d80e:	e021      	b.n	800d854 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4618      	mov	r0, r3
 800d816:	f003 f907 	bl	8010a28 <SDMMC_ReadFIFO>
 800d81a:	4602      	mov	r2, r0
 800d81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81e:	601a      	str	r2, [r3, #0]
    pData++;
 800d820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d822:	3304      	adds	r3, #4
 800d824:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800d826:	f7f6 fa7f 	bl	8003d28 <HAL_GetTick>
 800d82a:	4602      	mov	r2, r0
 800d82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d834:	d102      	bne.n	800d83c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d836:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d83a:	e00b      	b.n	800d854 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e2      	bne.n	800d810 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a03      	ldr	r2, [pc, #12]	@ (800d85c <SD_SendSDStatus+0x19c>)
 800d850:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3730      	adds	r7, #48	@ 0x30
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	18000f3a 	.word	0x18000f3a

0800d860 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d870:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d874:	e018      	b.n	800d8a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d87e:	041b      	lsls	r3, r3, #16
 800d880:	4619      	mov	r1, r3
 800d882:	4610      	mov	r0, r2
 800d884:	f003 fbba 	bl	8010ffc <SDMMC_CmdSendStatus>
 800d888:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	e009      	b.n	800d8a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f003 f939 	bl	8010b12 <SDMMC_GetResponse>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f003 f923 	bl	8010b12 <SDMMC_GetResponse>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d8d6:	d102      	bne.n	800d8de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d8d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d8dc:	e02f      	b.n	800d93e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d8de:	f107 030c 	add.w	r3, r7, #12
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f879 	bl	800d9dc <SD_FindSCR>
 800d8ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	e023      	b.n	800d93e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d01c      	beq.n	800d93a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d908:	041b      	lsls	r3, r3, #16
 800d90a:	4619      	mov	r1, r3
 800d90c:	4610      	mov	r0, r2
 800d90e:	f003 fa8c 	bl	8010e2a <SDMMC_CmdAppCommand>
 800d912:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	e00f      	b.n	800d93e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2102      	movs	r1, #2
 800d924:	4618      	mov	r0, r3
 800d926:	f003 fac3 	bl	8010eb0 <SDMMC_CmdBusWidth>
 800d92a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	e003      	b.n	800d93e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d936:	2300      	movs	r3, #0
 800d938:	e001      	b.n	800d93e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d93a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b086      	sub	sp, #24
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d94e:	2300      	movs	r3, #0
 800d950:	60fb      	str	r3, [r7, #12]
 800d952:	2300      	movs	r3, #0
 800d954:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2100      	movs	r1, #0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f003 f8d8 	bl	8010b12 <SDMMC_GetResponse>
 800d962:	4603      	mov	r3, r0
 800d964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d96c:	d102      	bne.n	800d974 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d96e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d972:	e02f      	b.n	800d9d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d974:	f107 030c 	add.w	r3, r7, #12
 800d978:	4619      	mov	r1, r3
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f82e 	bl	800d9dc <SD_FindSCR>
 800d980:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	e023      	b.n	800d9d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d992:	2b00      	cmp	r3, #0
 800d994:	d01c      	beq.n	800d9d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d99e:	041b      	lsls	r3, r3, #16
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	f003 fa41 	bl	8010e2a <SDMMC_CmdAppCommand>
 800d9a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	e00f      	b.n	800d9d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f003 fa78 	bl	8010eb0 <SDMMC_CmdBusWidth>
 800d9c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	e003      	b.n	800d9d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	e001      	b.n	800d9d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d9d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08e      	sub	sp, #56	@ 0x38
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d9e6:	f7f6 f99f 	bl	8003d28 <HAL_GetTick>
 800d9ea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	60bb      	str	r3, [r7, #8]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2108      	movs	r1, #8
 800da02:	4618      	mov	r0, r3
 800da04:	f003 f8c4 	bl	8010b90 <SDMMC_CmdBlockLength>
 800da08:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800da0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <SD_FindSCR+0x38>
  {
    return errorstate;
 800da10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da12:	e0ad      	b.n	800db70 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da1c:	041b      	lsls	r3, r3, #16
 800da1e:	4619      	mov	r1, r3
 800da20:	4610      	mov	r0, r2
 800da22:	f003 fa02 	bl	8010e2a <SDMMC_CmdAppCommand>
 800da26:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800da28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <SD_FindSCR+0x56>
  {
    return errorstate;
 800da2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da30:	e09e      	b.n	800db70 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da32:	f04f 33ff 	mov.w	r3, #4294967295
 800da36:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800da38:	2308      	movs	r3, #8
 800da3a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800da3c:	2330      	movs	r3, #48	@ 0x30
 800da3e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800da40:	2302      	movs	r3, #2
 800da42:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800da44:	2300      	movs	r3, #0
 800da46:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800da48:	2301      	movs	r3, #1
 800da4a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f107 0210 	add.w	r2, r7, #16
 800da54:	4611      	mov	r1, r2
 800da56:	4618      	mov	r0, r3
 800da58:	f003 f86e 	bl	8010b38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4618      	mov	r0, r3
 800da62:	f003 fa48 	bl	8010ef6 <SDMMC_CmdSendSCR>
 800da66:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800da68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d027      	beq.n	800dabe <SD_FindSCR+0xe2>
  {
    return errorstate;
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	e07e      	b.n	800db70 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d113      	bne.n	800daa8 <SD_FindSCR+0xcc>
 800da80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da82:	2b00      	cmp	r3, #0
 800da84:	d110      	bne.n	800daa8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f002 ffcc 	bl	8010a28 <SDMMC_ReadFIFO>
 800da90:	4603      	mov	r3, r0
 800da92:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f002 ffc5 	bl	8010a28 <SDMMC_ReadFIFO>
 800da9e:	4603      	mov	r3, r0
 800daa0:	60fb      	str	r3, [r7, #12]
      index++;
 800daa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daa4:	3301      	adds	r3, #1
 800daa6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800daa8:	f7f6 f93e 	bl	8003d28 <HAL_GetTick>
 800daac:	4602      	mov	r2, r0
 800daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab6:	d102      	bne.n	800dabe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dab8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dabc:	e058      	b.n	800db70 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dac4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dac8:	4013      	ands	r3, r2
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d0d1      	beq.n	800da72 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad4:	f003 0308 	and.w	r3, r3, #8
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d005      	beq.n	800dae8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2208      	movs	r2, #8
 800dae2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dae4:	2308      	movs	r3, #8
 800dae6:	e043      	b.n	800db70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daee:	f003 0302 	and.w	r3, r3, #2
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d005      	beq.n	800db02 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2202      	movs	r2, #2
 800dafc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dafe:	2302      	movs	r3, #2
 800db00:	e036      	b.n	800db70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db08:	f003 0320 	and.w	r3, r3, #32
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d005      	beq.n	800db1c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2220      	movs	r2, #32
 800db16:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800db18:	2320      	movs	r3, #32
 800db1a:	e029      	b.n	800db70 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a15      	ldr	r2, [pc, #84]	@ (800db78 <SD_FindSCR+0x19c>)
 800db22:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	061a      	lsls	r2, r3, #24
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	021b      	lsls	r3, r3, #8
 800db2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	0a1b      	lsrs	r3, r3, #8
 800db36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800db3a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	0e1b      	lsrs	r3, r3, #24
 800db40:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800db42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db44:	601a      	str	r2, [r3, #0]
    scr++;
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	3304      	adds	r3, #4
 800db4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	061a      	lsls	r2, r3, #24
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	021b      	lsls	r3, r3, #8
 800db54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	0a1b      	lsrs	r3, r3, #8
 800db5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800db62:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	0e1b      	lsrs	r3, r3, #24
 800db68:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3738      	adds	r7, #56	@ 0x38
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	18000f3a 	.word	0x18000f3a

0800db7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e10f      	b.n	800ddae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a87      	ldr	r2, [pc, #540]	@ (800ddb8 <HAL_SPI_Init+0x23c>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d00f      	beq.n	800dbbe <HAL_SPI_Init+0x42>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a86      	ldr	r2, [pc, #536]	@ (800ddbc <HAL_SPI_Init+0x240>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00a      	beq.n	800dbbe <HAL_SPI_Init+0x42>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a84      	ldr	r2, [pc, #528]	@ (800ddc0 <HAL_SPI_Init+0x244>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d005      	beq.n	800dbbe <HAL_SPI_Init+0x42>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	2b0f      	cmp	r3, #15
 800dbb8:	d901      	bls.n	800dbbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e0f7      	b.n	800ddae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fbbc 	bl	800e33c <SPI_GetPacketSize>
 800dbc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a7b      	ldr	r2, [pc, #492]	@ (800ddb8 <HAL_SPI_Init+0x23c>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d00c      	beq.n	800dbea <HAL_SPI_Init+0x6e>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a79      	ldr	r2, [pc, #484]	@ (800ddbc <HAL_SPI_Init+0x240>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d007      	beq.n	800dbea <HAL_SPI_Init+0x6e>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a78      	ldr	r2, [pc, #480]	@ (800ddc0 <HAL_SPI_Init+0x244>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d002      	beq.n	800dbea <HAL_SPI_Init+0x6e>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2b08      	cmp	r3, #8
 800dbe8:	d811      	bhi.n	800dc0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dbee:	4a72      	ldr	r2, [pc, #456]	@ (800ddb8 <HAL_SPI_Init+0x23c>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d009      	beq.n	800dc08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a70      	ldr	r2, [pc, #448]	@ (800ddbc <HAL_SPI_Init+0x240>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d004      	beq.n	800dc08 <HAL_SPI_Init+0x8c>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a6f      	ldr	r2, [pc, #444]	@ (800ddc0 <HAL_SPI_Init+0x244>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d104      	bne.n	800dc12 <HAL_SPI_Init+0x96>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b10      	cmp	r3, #16
 800dc0c:	d901      	bls.n	800dc12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e0cd      	b.n	800ddae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7f4 fa02 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2202      	movs	r2, #2
 800dc30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 0201 	bic.w	r2, r2, #1
 800dc42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800dc4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc58:	d119      	bne.n	800dc8e <HAL_SPI_Init+0x112>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc62:	d103      	bne.n	800dc6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d008      	beq.n	800dc7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10c      	bne.n	800dc8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc7c:	d107      	bne.n	800dc8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dc8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00f      	beq.n	800dcba <HAL_SPI_Init+0x13e>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	2b06      	cmp	r3, #6
 800dca0:	d90b      	bls.n	800dcba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	e007      	b.n	800dcca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dcc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	69da      	ldr	r2, [r3, #28]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	431a      	orrs	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcdc:	ea42 0103 	orr.w	r1, r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	68da      	ldr	r2, [r3, #12]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf4:	431a      	orrs	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfa:	431a      	orrs	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	431a      	orrs	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	431a      	orrs	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	431a      	orrs	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	431a      	orrs	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	431a      	orrs	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	431a      	orrs	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd2a:	ea42 0103 	orr.w	r1, r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d113      	bne.n	800dd6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dd68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f022 0201 	bic.w	r2, r2, #1
 800dd78:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00a      	beq.n	800dd9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	430a      	orrs	r2, r1
 800dd9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	40013000 	.word	0x40013000
 800ddbc:	40003800 	.word	0x40003800
 800ddc0:	40003c00 	.word	0x40003c00

0800ddc4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	603b      	str	r3, [r7, #0]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	3320      	adds	r3, #32
 800ddda:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dddc:	f7f5 ffa4 	bl	8003d28 <HAL_GetTick>
 800dde0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d001      	beq.n	800ddf2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ddee:	2302      	movs	r3, #2
 800ddf0:	e1d1      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d002      	beq.n	800ddfe <HAL_SPI_Transmit+0x3a>
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e1c9      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <HAL_SPI_Transmit+0x4c>
 800de0c:	2302      	movs	r3, #2
 800de0e:	e1c2      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2203      	movs	r2, #3
 800de1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	88fa      	ldrh	r2, [r7, #6]
 800de32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	88fa      	ldrh	r2, [r7, #6]
 800de3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2200      	movs	r2, #0
 800de50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800de68:	d108      	bne.n	800de7c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	e009      	b.n	800de90 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800de8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	4b96      	ldr	r3, [pc, #600]	@ (800e0f0 <HAL_SPI_Transmit+0x32c>)
 800de98:	4013      	ands	r3, r2
 800de9a:	88f9      	ldrh	r1, [r7, #6]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	6812      	ldr	r2, [r2, #0]
 800dea0:	430b      	orrs	r3, r1
 800dea2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0201 	orr.w	r2, r2, #1
 800deb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800debc:	d107      	bne.n	800dece <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800decc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	2b0f      	cmp	r3, #15
 800ded4:	d947      	bls.n	800df66 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ded6:	e03f      	b.n	800df58 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d114      	bne.n	800df10 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6812      	ldr	r2, [r2, #0]
 800def0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800def6:	1d1a      	adds	r2, r3, #4
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df02:	b29b      	uxth	r3, r3
 800df04:	3b01      	subs	r3, #1
 800df06:	b29a      	uxth	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800df0e:	e023      	b.n	800df58 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df10:	f7f5 ff0a 	bl	8003d28 <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d803      	bhi.n	800df28 <HAL_SPI_Transmit+0x164>
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df26:	d102      	bne.n	800df2e <HAL_SPI_Transmit+0x16a>
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d114      	bne.n	800df58 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f936 	bl	800e1a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2201      	movs	r2, #1
 800df48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800df54:	2303      	movs	r3, #3
 800df56:	e11e      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df5e:	b29b      	uxth	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1b9      	bne.n	800ded8 <HAL_SPI_Transmit+0x114>
 800df64:	e0f1      	b.n	800e14a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	2b07      	cmp	r3, #7
 800df6c:	f240 80e6 	bls.w	800e13c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800df70:	e05d      	b.n	800e02e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	695b      	ldr	r3, [r3, #20]
 800df78:	f003 0302 	and.w	r3, r3, #2
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d132      	bne.n	800dfe6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df86:	b29b      	uxth	r3, r3
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d918      	bls.n	800dfbe <HAL_SPI_Transmit+0x1fa>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df90:	2b00      	cmp	r3, #0
 800df92:	d014      	beq.n	800dfbe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6812      	ldr	r2, [r2, #0]
 800df9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfa4:	1d1a      	adds	r2, r3, #4
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b02      	subs	r3, #2
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dfbc:	e037      	b.n	800e02e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfc2:	881a      	ldrh	r2, [r3, #0]
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfcc:	1c9a      	adds	r2, r3, #2
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dfe4:	e023      	b.n	800e02e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfe6:	f7f5 fe9f 	bl	8003d28 <HAL_GetTick>
 800dfea:	4602      	mov	r2, r0
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d803      	bhi.n	800dffe <HAL_SPI_Transmit+0x23a>
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffc:	d102      	bne.n	800e004 <HAL_SPI_Transmit+0x240>
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d114      	bne.n	800e02e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f000 f8cb 	bl	800e1a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e010:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e02a:	2303      	movs	r3, #3
 800e02c:	e0b3      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e034:	b29b      	uxth	r3, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d19b      	bne.n	800df72 <HAL_SPI_Transmit+0x1ae>
 800e03a:	e086      	b.n	800e14a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	f003 0302 	and.w	r3, r3, #2
 800e046:	2b02      	cmp	r3, #2
 800e048:	d154      	bne.n	800e0f4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e050:	b29b      	uxth	r3, r3
 800e052:	2b03      	cmp	r3, #3
 800e054:	d918      	bls.n	800e088 <HAL_SPI_Transmit+0x2c4>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e05a:	2b40      	cmp	r3, #64	@ 0x40
 800e05c:	d914      	bls.n	800e088 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6812      	ldr	r2, [r2, #0]
 800e068:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b04      	subs	r3, #4
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e086:	e059      	b.n	800e13c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e08e:	b29b      	uxth	r3, r3
 800e090:	2b01      	cmp	r3, #1
 800e092:	d917      	bls.n	800e0c4 <HAL_SPI_Transmit+0x300>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d013      	beq.n	800e0c4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0a0:	881a      	ldrh	r2, [r3, #0]
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0aa:	1c9a      	adds	r2, r3, #2
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	3b02      	subs	r3, #2
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e0c2:	e03b      	b.n	800e13c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	3320      	adds	r3, #32
 800e0ce:	7812      	ldrb	r2, [r2, #0]
 800e0d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e0ee:	e025      	b.n	800e13c <HAL_SPI_Transmit+0x378>
 800e0f0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0f4:	f7f5 fe18 	bl	8003d28 <HAL_GetTick>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	429a      	cmp	r2, r3
 800e102:	d803      	bhi.n	800e10c <HAL_SPI_Transmit+0x348>
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10a:	d102      	bne.n	800e112 <HAL_SPI_Transmit+0x34e>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d114      	bne.n	800e13c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f000 f844 	bl	800e1a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e11e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	e02c      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e142:	b29b      	uxth	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	f47f af79 	bne.w	800e03c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2200      	movs	r2, #0
 800e152:	2108      	movs	r1, #8
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f8c3 	bl	800e2e0 <SPI_WaitOnFlagUntilTimeout>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d007      	beq.n	800e170 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e166:	f043 0220 	orr.w	r2, r3, #32
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f815 	bl	800e1a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e000      	b.n	800e196 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800e194:	2300      	movs	r3, #0
  }
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop

0800e1a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	695b      	ldr	r3, [r3, #20]
 800e1ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	699a      	ldr	r2, [r3, #24]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0208 	orr.w	r2, r2, #8
 800e1be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f042 0210 	orr.w	r2, r2, #16
 800e1ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f022 0201 	bic.w	r2, r2, #1
 800e1de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6919      	ldr	r1, [r3, #16]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	4b3c      	ldr	r3, [pc, #240]	@ (800e2dc <SPI_CloseTransfer+0x13c>)
 800e1ec:	400b      	ands	r3, r1
 800e1ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	689a      	ldr	r2, [r3, #8]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e1fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e206:	b2db      	uxtb	r3, r3
 800e208:	2b04      	cmp	r3, #4
 800e20a:	d014      	beq.n	800e236 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00f      	beq.n	800e236 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e21c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	699a      	ldr	r2, [r3, #24]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f042 0220 	orr.w	r2, r2, #32
 800e234:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d014      	beq.n	800e26c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00f      	beq.n	800e26c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e252:	f043 0204 	orr.w	r2, r3, #4
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	699a      	ldr	r2, [r3, #24]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e26a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00f      	beq.n	800e296 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e27c:	f043 0201 	orr.w	r2, r3, #1
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	699a      	ldr	r2, [r3, #24]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e294:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00f      	beq.n	800e2c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2a6:	f043 0208 	orr.w	r2, r3, #8
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	699a      	ldr	r2, [r3, #24]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e2be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e2d0:	bf00      	nop
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	fffffc90 	.word	0xfffffc90

0800e2e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e2f0:	e010      	b.n	800e314 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2f2:	f7f5 fd19 	bl	8003d28 <HAL_GetTick>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	683a      	ldr	r2, [r7, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d803      	bhi.n	800e30a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e308:	d102      	bne.n	800e310 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e310:	2303      	movs	r3, #3
 800e312:	e00f      	b.n	800e334 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	695a      	ldr	r2, [r3, #20]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	4013      	ands	r3, r2
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	429a      	cmp	r2, r3
 800e322:	bf0c      	ite	eq
 800e324:	2301      	moveq	r3, #1
 800e326:	2300      	movne	r3, #0
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	461a      	mov	r2, r3
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d0df      	beq.n	800e2f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e348:	095b      	lsrs	r3, r3, #5
 800e34a:	3301      	adds	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	3301      	adds	r3, #1
 800e354:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	3307      	adds	r3, #7
 800e35a:	08db      	lsrs	r3, r3, #3
 800e35c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	fb02 f303 	mul.w	r3, r2, r3
}
 800e366:	4618      	mov	r0, r3
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b082      	sub	sp, #8
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e380:	2301      	movs	r3, #1
 800e382:	e049      	b.n	800e418 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d106      	bne.n	800e39e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7f3 feb1 	bl	8002100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2202      	movs	r2, #2
 800e3a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	f000 fbbf 	bl	800eb34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2201      	movs	r2, #1
 800e402:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	e049      	b.n	800e4c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d106      	bne.n	800e44c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2200      	movs	r2, #0
 800e442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f841 	bl	800e4ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2202      	movs	r2, #2
 800e450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3304      	adds	r3, #4
 800e45c:	4619      	mov	r1, r3
 800e45e:	4610      	mov	r0, r2
 800e460:	f000 fb68 	bl	800eb34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e4c4:	2300      	movs	r3, #0
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e4d6:	bf00      	nop
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
	...

0800e4e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d109      	bne.n	800e508 <HAL_TIM_PWM_Start+0x24>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	bf14      	ite	ne
 800e500:	2301      	movne	r3, #1
 800e502:	2300      	moveq	r3, #0
 800e504:	b2db      	uxtb	r3, r3
 800e506:	e03c      	b.n	800e582 <HAL_TIM_PWM_Start+0x9e>
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d109      	bne.n	800e522 <HAL_TIM_PWM_Start+0x3e>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b01      	cmp	r3, #1
 800e518:	bf14      	ite	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	2300      	moveq	r3, #0
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	e02f      	b.n	800e582 <HAL_TIM_PWM_Start+0x9e>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b08      	cmp	r3, #8
 800e526:	d109      	bne.n	800e53c <HAL_TIM_PWM_Start+0x58>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b01      	cmp	r3, #1
 800e532:	bf14      	ite	ne
 800e534:	2301      	movne	r3, #1
 800e536:	2300      	moveq	r3, #0
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	e022      	b.n	800e582 <HAL_TIM_PWM_Start+0x9e>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b0c      	cmp	r3, #12
 800e540:	d109      	bne.n	800e556 <HAL_TIM_PWM_Start+0x72>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	bf14      	ite	ne
 800e54e:	2301      	movne	r3, #1
 800e550:	2300      	moveq	r3, #0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	e015      	b.n	800e582 <HAL_TIM_PWM_Start+0x9e>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d109      	bne.n	800e570 <HAL_TIM_PWM_Start+0x8c>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e562:	b2db      	uxtb	r3, r3
 800e564:	2b01      	cmp	r3, #1
 800e566:	bf14      	ite	ne
 800e568:	2301      	movne	r3, #1
 800e56a:	2300      	moveq	r3, #0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	e008      	b.n	800e582 <HAL_TIM_PWM_Start+0x9e>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e576:	b2db      	uxtb	r3, r3
 800e578:	2b01      	cmp	r3, #1
 800e57a:	bf14      	ite	ne
 800e57c:	2301      	movne	r3, #1
 800e57e:	2300      	moveq	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d001      	beq.n	800e58a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e0ab      	b.n	800e6e2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <HAL_TIM_PWM_Start+0xb6>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2202      	movs	r2, #2
 800e594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e598:	e023      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xfe>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	d104      	bne.n	800e5aa <HAL_TIM_PWM_Start+0xc6>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e5a8:	e01b      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xfe>
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	d104      	bne.n	800e5ba <HAL_TIM_PWM_Start+0xd6>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5b8:	e013      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xfe>
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b0c      	cmp	r3, #12
 800e5be:	d104      	bne.n	800e5ca <HAL_TIM_PWM_Start+0xe6>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e5c8:	e00b      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xfe>
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b10      	cmp	r3, #16
 800e5ce:	d104      	bne.n	800e5da <HAL_TIM_PWM_Start+0xf6>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5d8:	e003      	b.n	800e5e2 <HAL_TIM_PWM_Start+0xfe>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2202      	movs	r2, #2
 800e5de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 fec2 	bl	800f374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a3d      	ldr	r2, [pc, #244]	@ (800e6ec <HAL_TIM_PWM_Start+0x208>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d013      	beq.n	800e622 <HAL_TIM_PWM_Start+0x13e>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a3c      	ldr	r2, [pc, #240]	@ (800e6f0 <HAL_TIM_PWM_Start+0x20c>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d00e      	beq.n	800e622 <HAL_TIM_PWM_Start+0x13e>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a3a      	ldr	r2, [pc, #232]	@ (800e6f4 <HAL_TIM_PWM_Start+0x210>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d009      	beq.n	800e622 <HAL_TIM_PWM_Start+0x13e>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a39      	ldr	r2, [pc, #228]	@ (800e6f8 <HAL_TIM_PWM_Start+0x214>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d004      	beq.n	800e622 <HAL_TIM_PWM_Start+0x13e>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a37      	ldr	r2, [pc, #220]	@ (800e6fc <HAL_TIM_PWM_Start+0x218>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d101      	bne.n	800e626 <HAL_TIM_PWM_Start+0x142>
 800e622:	2301      	movs	r3, #1
 800e624:	e000      	b.n	800e628 <HAL_TIM_PWM_Start+0x144>
 800e626:	2300      	movs	r3, #0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d007      	beq.n	800e63c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e63a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a2a      	ldr	r2, [pc, #168]	@ (800e6ec <HAL_TIM_PWM_Start+0x208>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d02c      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e64e:	d027      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a2a      	ldr	r2, [pc, #168]	@ (800e700 <HAL_TIM_PWM_Start+0x21c>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d022      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a29      	ldr	r2, [pc, #164]	@ (800e704 <HAL_TIM_PWM_Start+0x220>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d01d      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a27      	ldr	r2, [pc, #156]	@ (800e708 <HAL_TIM_PWM_Start+0x224>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d018      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a1f      	ldr	r2, [pc, #124]	@ (800e6f0 <HAL_TIM_PWM_Start+0x20c>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d013      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a23      	ldr	r2, [pc, #140]	@ (800e70c <HAL_TIM_PWM_Start+0x228>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d00e      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a1b      	ldr	r2, [pc, #108]	@ (800e6f4 <HAL_TIM_PWM_Start+0x210>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d009      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a1f      	ldr	r2, [pc, #124]	@ (800e710 <HAL_TIM_PWM_Start+0x22c>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d004      	beq.n	800e6a0 <HAL_TIM_PWM_Start+0x1bc>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a1e      	ldr	r2, [pc, #120]	@ (800e714 <HAL_TIM_PWM_Start+0x230>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d115      	bne.n	800e6cc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	689a      	ldr	r2, [r3, #8]
 800e6a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e718 <HAL_TIM_PWM_Start+0x234>)
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b06      	cmp	r3, #6
 800e6b0:	d015      	beq.n	800e6de <HAL_TIM_PWM_Start+0x1fa>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6b8:	d011      	beq.n	800e6de <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f042 0201 	orr.w	r2, r2, #1
 800e6c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ca:	e008      	b.n	800e6de <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f042 0201 	orr.w	r2, r2, #1
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	e000      	b.n	800e6e0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	40010000 	.word	0x40010000
 800e6f0:	40010400 	.word	0x40010400
 800e6f4:	40014000 	.word	0x40014000
 800e6f8:	40014400 	.word	0x40014400
 800e6fc:	40014800 	.word	0x40014800
 800e700:	40000400 	.word	0x40000400
 800e704:	40000800 	.word	0x40000800
 800e708:	40000c00 	.word	0x40000c00
 800e70c:	40001800 	.word	0x40001800
 800e710:	4000e000 	.word	0x4000e000
 800e714:	4000e400 	.word	0x4000e400
 800e718:	00010007 	.word	0x00010007

0800e71c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e732:	2b01      	cmp	r3, #1
 800e734:	d101      	bne.n	800e73a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e736:	2302      	movs	r3, #2
 800e738:	e0ff      	b.n	800e93a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2201      	movs	r2, #1
 800e73e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b14      	cmp	r3, #20
 800e746:	f200 80f0 	bhi.w	800e92a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e74a:	a201      	add	r2, pc, #4	@ (adr r2, 800e750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e750:	0800e7a5 	.word	0x0800e7a5
 800e754:	0800e92b 	.word	0x0800e92b
 800e758:	0800e92b 	.word	0x0800e92b
 800e75c:	0800e92b 	.word	0x0800e92b
 800e760:	0800e7e5 	.word	0x0800e7e5
 800e764:	0800e92b 	.word	0x0800e92b
 800e768:	0800e92b 	.word	0x0800e92b
 800e76c:	0800e92b 	.word	0x0800e92b
 800e770:	0800e827 	.word	0x0800e827
 800e774:	0800e92b 	.word	0x0800e92b
 800e778:	0800e92b 	.word	0x0800e92b
 800e77c:	0800e92b 	.word	0x0800e92b
 800e780:	0800e867 	.word	0x0800e867
 800e784:	0800e92b 	.word	0x0800e92b
 800e788:	0800e92b 	.word	0x0800e92b
 800e78c:	0800e92b 	.word	0x0800e92b
 800e790:	0800e8a9 	.word	0x0800e8a9
 800e794:	0800e92b 	.word	0x0800e92b
 800e798:	0800e92b 	.word	0x0800e92b
 800e79c:	0800e92b 	.word	0x0800e92b
 800e7a0:	0800e8e9 	.word	0x0800e8e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68b9      	ldr	r1, [r7, #8]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f000 fa6e 	bl	800ec8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	699a      	ldr	r2, [r3, #24]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f042 0208 	orr.w	r2, r2, #8
 800e7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	699a      	ldr	r2, [r3, #24]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f022 0204 	bic.w	r2, r2, #4
 800e7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	6999      	ldr	r1, [r3, #24]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	691a      	ldr	r2, [r3, #16]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	430a      	orrs	r2, r1
 800e7e0:	619a      	str	r2, [r3, #24]
      break;
 800e7e2:	e0a5      	b.n	800e930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	68b9      	ldr	r1, [r7, #8]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f000 fade 	bl	800edac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	699a      	ldr	r2, [r3, #24]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	699a      	ldr	r2, [r3, #24]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e80e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6999      	ldr	r1, [r3, #24]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	021a      	lsls	r2, r3, #8
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	430a      	orrs	r2, r1
 800e822:	619a      	str	r2, [r3, #24]
      break;
 800e824:	e084      	b.n	800e930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 fb47 	bl	800eec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	69da      	ldr	r2, [r3, #28]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f042 0208 	orr.w	r2, r2, #8
 800e840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	69da      	ldr	r2, [r3, #28]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f022 0204 	bic.w	r2, r2, #4
 800e850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	69d9      	ldr	r1, [r3, #28]
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	691a      	ldr	r2, [r3, #16]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	430a      	orrs	r2, r1
 800e862:	61da      	str	r2, [r3, #28]
      break;
 800e864:	e064      	b.n	800e930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68b9      	ldr	r1, [r7, #8]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f000 fbaf 	bl	800efd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	69da      	ldr	r2, [r3, #28]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	69da      	ldr	r2, [r3, #28]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	69d9      	ldr	r1, [r3, #28]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	021a      	lsls	r2, r3, #8
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	430a      	orrs	r2, r1
 800e8a4:	61da      	str	r2, [r3, #28]
      break;
 800e8a6:	e043      	b.n	800e930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68b9      	ldr	r1, [r7, #8]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f000 fbf8 	bl	800f0a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f042 0208 	orr.w	r2, r2, #8
 800e8c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f022 0204 	bic.w	r2, r2, #4
 800e8d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	691a      	ldr	r2, [r3, #16]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	430a      	orrs	r2, r1
 800e8e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e8e6:	e023      	b.n	800e930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68b9      	ldr	r1, [r7, #8]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fc3c 	bl	800f16c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e902:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e912:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	691b      	ldr	r3, [r3, #16]
 800e91e:	021a      	lsls	r2, r3, #8
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	430a      	orrs	r2, r1
 800e926:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e928:	e002      	b.n	800e930 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e92a:	2301      	movs	r3, #1
 800e92c:	75fb      	strb	r3, [r7, #23]
      break;
 800e92e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2200      	movs	r2, #0
 800e934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e938:	7dfb      	ldrb	r3, [r7, #23]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop

0800e944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d101      	bne.n	800e960 <HAL_TIM_ConfigClockSource+0x1c>
 800e95c:	2302      	movs	r3, #2
 800e95e:	e0dc      	b.n	800eb1a <HAL_TIM_ConfigClockSource+0x1d6>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2202      	movs	r2, #2
 800e96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	4b6a      	ldr	r3, [pc, #424]	@ (800eb24 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a64      	ldr	r2, [pc, #400]	@ (800eb28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e996:	4293      	cmp	r3, r2
 800e998:	f000 80a9 	beq.w	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800e99c:	4a62      	ldr	r2, [pc, #392]	@ (800eb28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	f200 80ae 	bhi.w	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9a4:	4a61      	ldr	r2, [pc, #388]	@ (800eb2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	f000 80a1 	beq.w	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800e9ac:	4a5f      	ldr	r2, [pc, #380]	@ (800eb2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	f200 80a6 	bhi.w	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9b4:	4a5e      	ldr	r2, [pc, #376]	@ (800eb30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	f000 8099 	beq.w	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800e9bc:	4a5c      	ldr	r2, [pc, #368]	@ (800eb30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	f200 809e 	bhi.w	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e9c8:	f000 8091 	beq.w	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800e9cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e9d0:	f200 8096 	bhi.w	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e9d8:	f000 8089 	beq.w	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800e9dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e9e0:	f200 808e 	bhi.w	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9e8:	d03e      	beq.n	800ea68 <HAL_TIM_ConfigClockSource+0x124>
 800e9ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9ee:	f200 8087 	bhi.w	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9f6:	f000 8086 	beq.w	800eb06 <HAL_TIM_ConfigClockSource+0x1c2>
 800e9fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9fe:	d87f      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea00:	2b70      	cmp	r3, #112	@ 0x70
 800ea02:	d01a      	beq.n	800ea3a <HAL_TIM_ConfigClockSource+0xf6>
 800ea04:	2b70      	cmp	r3, #112	@ 0x70
 800ea06:	d87b      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea08:	2b60      	cmp	r3, #96	@ 0x60
 800ea0a:	d050      	beq.n	800eaae <HAL_TIM_ConfigClockSource+0x16a>
 800ea0c:	2b60      	cmp	r3, #96	@ 0x60
 800ea0e:	d877      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea10:	2b50      	cmp	r3, #80	@ 0x50
 800ea12:	d03c      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0x14a>
 800ea14:	2b50      	cmp	r3, #80	@ 0x50
 800ea16:	d873      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea18:	2b40      	cmp	r3, #64	@ 0x40
 800ea1a:	d058      	beq.n	800eace <HAL_TIM_ConfigClockSource+0x18a>
 800ea1c:	2b40      	cmp	r3, #64	@ 0x40
 800ea1e:	d86f      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea20:	2b30      	cmp	r3, #48	@ 0x30
 800ea22:	d064      	beq.n	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800ea24:	2b30      	cmp	r3, #48	@ 0x30
 800ea26:	d86b      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea28:	2b20      	cmp	r3, #32
 800ea2a:	d060      	beq.n	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800ea2c:	2b20      	cmp	r3, #32
 800ea2e:	d867      	bhi.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d05c      	beq.n	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800ea34:	2b10      	cmp	r3, #16
 800ea36:	d05a      	beq.n	800eaee <HAL_TIM_ConfigClockSource+0x1aa>
 800ea38:	e062      	b.n	800eb00 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea4a:	f000 fc73 	bl	800f334 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ea5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	609a      	str	r2, [r3, #8]
      break;
 800ea66:	e04f      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea78:	f000 fc5c 	bl	800f334 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	689a      	ldr	r2, [r3, #8]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea8a:	609a      	str	r2, [r3, #8]
      break;
 800ea8c:	e03c      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	f000 fbcc 	bl	800f238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2150      	movs	r1, #80	@ 0x50
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 fc26 	bl	800f2f8 <TIM_ITRx_SetConfig>
      break;
 800eaac:	e02c      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eaba:	461a      	mov	r2, r3
 800eabc:	f000 fbeb 	bl	800f296 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2160      	movs	r1, #96	@ 0x60
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 fc16 	bl	800f2f8 <TIM_ITRx_SetConfig>
      break;
 800eacc:	e01c      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eada:	461a      	mov	r2, r3
 800eadc:	f000 fbac 	bl	800f238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2140      	movs	r1, #64	@ 0x40
 800eae6:	4618      	mov	r0, r3
 800eae8:	f000 fc06 	bl	800f2f8 <TIM_ITRx_SetConfig>
      break;
 800eaec:	e00c      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4610      	mov	r0, r2
 800eafa:	f000 fbfd 	bl	800f2f8 <TIM_ITRx_SetConfig>
      break;
 800eafe:	e003      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	73fb      	strb	r3, [r7, #15]
      break;
 800eb04:	e000      	b.n	800eb08 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800eb06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	ffceff88 	.word	0xffceff88
 800eb28:	00100040 	.word	0x00100040
 800eb2c:	00100030 	.word	0x00100030
 800eb30:	00100020 	.word	0x00100020

0800eb34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a47      	ldr	r2, [pc, #284]	@ (800ec64 <TIM_Base_SetConfig+0x130>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d013      	beq.n	800eb74 <TIM_Base_SetConfig+0x40>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb52:	d00f      	beq.n	800eb74 <TIM_Base_SetConfig+0x40>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a44      	ldr	r2, [pc, #272]	@ (800ec68 <TIM_Base_SetConfig+0x134>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d00b      	beq.n	800eb74 <TIM_Base_SetConfig+0x40>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a43      	ldr	r2, [pc, #268]	@ (800ec6c <TIM_Base_SetConfig+0x138>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d007      	beq.n	800eb74 <TIM_Base_SetConfig+0x40>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a42      	ldr	r2, [pc, #264]	@ (800ec70 <TIM_Base_SetConfig+0x13c>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d003      	beq.n	800eb74 <TIM_Base_SetConfig+0x40>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a41      	ldr	r2, [pc, #260]	@ (800ec74 <TIM_Base_SetConfig+0x140>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d108      	bne.n	800eb86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a36      	ldr	r2, [pc, #216]	@ (800ec64 <TIM_Base_SetConfig+0x130>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d027      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb94:	d023      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a33      	ldr	r2, [pc, #204]	@ (800ec68 <TIM_Base_SetConfig+0x134>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d01f      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a32      	ldr	r2, [pc, #200]	@ (800ec6c <TIM_Base_SetConfig+0x138>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d01b      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a31      	ldr	r2, [pc, #196]	@ (800ec70 <TIM_Base_SetConfig+0x13c>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d017      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4a30      	ldr	r2, [pc, #192]	@ (800ec74 <TIM_Base_SetConfig+0x140>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d013      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a2f      	ldr	r2, [pc, #188]	@ (800ec78 <TIM_Base_SetConfig+0x144>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d00f      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4a2e      	ldr	r2, [pc, #184]	@ (800ec7c <TIM_Base_SetConfig+0x148>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d00b      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a2d      	ldr	r2, [pc, #180]	@ (800ec80 <TIM_Base_SetConfig+0x14c>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d007      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a2c      	ldr	r2, [pc, #176]	@ (800ec84 <TIM_Base_SetConfig+0x150>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d003      	beq.n	800ebde <TIM_Base_SetConfig+0xaa>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a2b      	ldr	r2, [pc, #172]	@ (800ec88 <TIM_Base_SetConfig+0x154>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d108      	bne.n	800ebf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	695b      	ldr	r3, [r3, #20]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	689a      	ldr	r2, [r3, #8]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4a14      	ldr	r2, [pc, #80]	@ (800ec64 <TIM_Base_SetConfig+0x130>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d00f      	beq.n	800ec36 <TIM_Base_SetConfig+0x102>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a16      	ldr	r2, [pc, #88]	@ (800ec74 <TIM_Base_SetConfig+0x140>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d00b      	beq.n	800ec36 <TIM_Base_SetConfig+0x102>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a15      	ldr	r2, [pc, #84]	@ (800ec78 <TIM_Base_SetConfig+0x144>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d007      	beq.n	800ec36 <TIM_Base_SetConfig+0x102>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a14      	ldr	r2, [pc, #80]	@ (800ec7c <TIM_Base_SetConfig+0x148>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d003      	beq.n	800ec36 <TIM_Base_SetConfig+0x102>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	4a13      	ldr	r2, [pc, #76]	@ (800ec80 <TIM_Base_SetConfig+0x14c>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d103      	bne.n	800ec3e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	691a      	ldr	r2, [r3, #16]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f043 0204 	orr.w	r2, r3, #4
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	601a      	str	r2, [r3, #0]
}
 800ec56:	bf00      	nop
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	40010000 	.word	0x40010000
 800ec68:	40000400 	.word	0x40000400
 800ec6c:	40000800 	.word	0x40000800
 800ec70:	40000c00 	.word	0x40000c00
 800ec74:	40010400 	.word	0x40010400
 800ec78:	40014000 	.word	0x40014000
 800ec7c:	40014400 	.word	0x40014400
 800ec80:	40014800 	.word	0x40014800
 800ec84:	4000e000 	.word	0x4000e000
 800ec88:	4000e400 	.word	0x4000e400

0800ec8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a1b      	ldr	r3, [r3, #32]
 800eca0:	f023 0201 	bic.w	r2, r3, #1
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	4b37      	ldr	r3, [pc, #220]	@ (800ed94 <TIM_OC1_SetConfig+0x108>)
 800ecb8:	4013      	ands	r3, r2
 800ecba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f023 0303 	bic.w	r3, r3, #3
 800ecc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f023 0302 	bic.w	r3, r3, #2
 800ecd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	697a      	ldr	r2, [r7, #20]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a2d      	ldr	r2, [pc, #180]	@ (800ed98 <TIM_OC1_SetConfig+0x10c>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d00f      	beq.n	800ed08 <TIM_OC1_SetConfig+0x7c>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a2c      	ldr	r2, [pc, #176]	@ (800ed9c <TIM_OC1_SetConfig+0x110>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d00b      	beq.n	800ed08 <TIM_OC1_SetConfig+0x7c>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4a2b      	ldr	r2, [pc, #172]	@ (800eda0 <TIM_OC1_SetConfig+0x114>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d007      	beq.n	800ed08 <TIM_OC1_SetConfig+0x7c>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4a2a      	ldr	r2, [pc, #168]	@ (800eda4 <TIM_OC1_SetConfig+0x118>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d003      	beq.n	800ed08 <TIM_OC1_SetConfig+0x7c>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	4a29      	ldr	r2, [pc, #164]	@ (800eda8 <TIM_OC1_SetConfig+0x11c>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d10c      	bne.n	800ed22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	f023 0308 	bic.w	r3, r3, #8
 800ed0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	697a      	ldr	r2, [r7, #20]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	f023 0304 	bic.w	r3, r3, #4
 800ed20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a1c      	ldr	r2, [pc, #112]	@ (800ed98 <TIM_OC1_SetConfig+0x10c>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d00f      	beq.n	800ed4a <TIM_OC1_SetConfig+0xbe>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ed9c <TIM_OC1_SetConfig+0x110>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d00b      	beq.n	800ed4a <TIM_OC1_SetConfig+0xbe>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a1a      	ldr	r2, [pc, #104]	@ (800eda0 <TIM_OC1_SetConfig+0x114>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d007      	beq.n	800ed4a <TIM_OC1_SetConfig+0xbe>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a19      	ldr	r2, [pc, #100]	@ (800eda4 <TIM_OC1_SetConfig+0x118>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d003      	beq.n	800ed4a <TIM_OC1_SetConfig+0xbe>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a18      	ldr	r2, [pc, #96]	@ (800eda8 <TIM_OC1_SetConfig+0x11c>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d111      	bne.n	800ed6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	621a      	str	r2, [r3, #32]
}
 800ed88:	bf00      	nop
 800ed8a:	371c      	adds	r7, #28
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	fffeff8f 	.word	0xfffeff8f
 800ed98:	40010000 	.word	0x40010000
 800ed9c:	40010400 	.word	0x40010400
 800eda0:	40014000 	.word	0x40014000
 800eda4:	40014400 	.word	0x40014400
 800eda8:	40014800 	.word	0x40014800

0800edac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800edac:	b480      	push	{r7}
 800edae:	b087      	sub	sp, #28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a1b      	ldr	r3, [r3, #32]
 800edc0:	f023 0210 	bic.w	r2, r3, #16
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	699b      	ldr	r3, [r3, #24]
 800edd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	4b34      	ldr	r3, [pc, #208]	@ (800eea8 <TIM_OC2_SetConfig+0xfc>)
 800edd8:	4013      	ands	r3, r2
 800edda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ede2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	021b      	lsls	r3, r3, #8
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	4313      	orrs	r3, r2
 800edee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	f023 0320 	bic.w	r3, r3, #32
 800edf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	011b      	lsls	r3, r3, #4
 800edfe:	697a      	ldr	r2, [r7, #20]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4a29      	ldr	r2, [pc, #164]	@ (800eeac <TIM_OC2_SetConfig+0x100>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d003      	beq.n	800ee14 <TIM_OC2_SetConfig+0x68>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a28      	ldr	r2, [pc, #160]	@ (800eeb0 <TIM_OC2_SetConfig+0x104>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d10d      	bne.n	800ee30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	011b      	lsls	r3, r3, #4
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	4313      	orrs	r3, r2
 800ee26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4a1e      	ldr	r2, [pc, #120]	@ (800eeac <TIM_OC2_SetConfig+0x100>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d00f      	beq.n	800ee58 <TIM_OC2_SetConfig+0xac>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	4a1d      	ldr	r2, [pc, #116]	@ (800eeb0 <TIM_OC2_SetConfig+0x104>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d00b      	beq.n	800ee58 <TIM_OC2_SetConfig+0xac>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a1c      	ldr	r2, [pc, #112]	@ (800eeb4 <TIM_OC2_SetConfig+0x108>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d007      	beq.n	800ee58 <TIM_OC2_SetConfig+0xac>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a1b      	ldr	r2, [pc, #108]	@ (800eeb8 <TIM_OC2_SetConfig+0x10c>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d003      	beq.n	800ee58 <TIM_OC2_SetConfig+0xac>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a1a      	ldr	r2, [pc, #104]	@ (800eebc <TIM_OC2_SetConfig+0x110>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d113      	bne.n	800ee80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	695b      	ldr	r3, [r3, #20]
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	693a      	ldr	r2, [r7, #16]
 800ee84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	685a      	ldr	r2, [r3, #4]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	621a      	str	r2, [r3, #32]
}
 800ee9a:	bf00      	nop
 800ee9c:	371c      	adds	r7, #28
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	feff8fff 	.word	0xfeff8fff
 800eeac:	40010000 	.word	0x40010000
 800eeb0:	40010400 	.word	0x40010400
 800eeb4:	40014000 	.word	0x40014000
 800eeb8:	40014400 	.word	0x40014400
 800eebc:	40014800 	.word	0x40014800

0800eec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b087      	sub	sp, #28
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a1b      	ldr	r3, [r3, #32]
 800eed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	69db      	ldr	r3, [r3, #28]
 800eee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	4b33      	ldr	r3, [pc, #204]	@ (800efb8 <TIM_OC3_SetConfig+0xf8>)
 800eeec:	4013      	ands	r3, r2
 800eeee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f023 0303 	bic.w	r3, r3, #3
 800eef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	021b      	lsls	r3, r3, #8
 800ef10:	697a      	ldr	r2, [r7, #20]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a28      	ldr	r2, [pc, #160]	@ (800efbc <TIM_OC3_SetConfig+0xfc>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d003      	beq.n	800ef26 <TIM_OC3_SetConfig+0x66>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a27      	ldr	r2, [pc, #156]	@ (800efc0 <TIM_OC3_SetConfig+0x100>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d10d      	bne.n	800ef42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	021b      	lsls	r3, r3, #8
 800ef34:	697a      	ldr	r2, [r7, #20]
 800ef36:	4313      	orrs	r3, r2
 800ef38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a1d      	ldr	r2, [pc, #116]	@ (800efbc <TIM_OC3_SetConfig+0xfc>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d00f      	beq.n	800ef6a <TIM_OC3_SetConfig+0xaa>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a1c      	ldr	r2, [pc, #112]	@ (800efc0 <TIM_OC3_SetConfig+0x100>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d00b      	beq.n	800ef6a <TIM_OC3_SetConfig+0xaa>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a1b      	ldr	r2, [pc, #108]	@ (800efc4 <TIM_OC3_SetConfig+0x104>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d007      	beq.n	800ef6a <TIM_OC3_SetConfig+0xaa>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a1a      	ldr	r2, [pc, #104]	@ (800efc8 <TIM_OC3_SetConfig+0x108>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d003      	beq.n	800ef6a <TIM_OC3_SetConfig+0xaa>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a19      	ldr	r2, [pc, #100]	@ (800efcc <TIM_OC3_SetConfig+0x10c>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d113      	bne.n	800ef92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	695b      	ldr	r3, [r3, #20]
 800ef7e:	011b      	lsls	r3, r3, #4
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	011b      	lsls	r3, r3, #4
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	621a      	str	r2, [r3, #32]
}
 800efac:	bf00      	nop
 800efae:	371c      	adds	r7, #28
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	fffeff8f 	.word	0xfffeff8f
 800efbc:	40010000 	.word	0x40010000
 800efc0:	40010400 	.word	0x40010400
 800efc4:	40014000 	.word	0x40014000
 800efc8:	40014400 	.word	0x40014400
 800efcc:	40014800 	.word	0x40014800

0800efd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a1b      	ldr	r3, [r3, #32]
 800efe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4b24      	ldr	r3, [pc, #144]	@ (800f08c <TIM_OC4_SetConfig+0xbc>)
 800effc:	4013      	ands	r3, r2
 800effe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	021b      	lsls	r3, r3, #8
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	4313      	orrs	r3, r2
 800f012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f01a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	031b      	lsls	r3, r3, #12
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	4313      	orrs	r3, r2
 800f026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a19      	ldr	r2, [pc, #100]	@ (800f090 <TIM_OC4_SetConfig+0xc0>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d00f      	beq.n	800f050 <TIM_OC4_SetConfig+0x80>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a18      	ldr	r2, [pc, #96]	@ (800f094 <TIM_OC4_SetConfig+0xc4>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d00b      	beq.n	800f050 <TIM_OC4_SetConfig+0x80>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a17      	ldr	r2, [pc, #92]	@ (800f098 <TIM_OC4_SetConfig+0xc8>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d007      	beq.n	800f050 <TIM_OC4_SetConfig+0x80>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a16      	ldr	r2, [pc, #88]	@ (800f09c <TIM_OC4_SetConfig+0xcc>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d003      	beq.n	800f050 <TIM_OC4_SetConfig+0x80>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a15      	ldr	r2, [pc, #84]	@ (800f0a0 <TIM_OC4_SetConfig+0xd0>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d109      	bne.n	800f064 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	019b      	lsls	r3, r3, #6
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	4313      	orrs	r3, r2
 800f062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	697a      	ldr	r2, [r7, #20]
 800f068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	685a      	ldr	r2, [r3, #4]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	693a      	ldr	r2, [r7, #16]
 800f07c:	621a      	str	r2, [r3, #32]
}
 800f07e:	bf00      	nop
 800f080:	371c      	adds	r7, #28
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	feff8fff 	.word	0xfeff8fff
 800f090:	40010000 	.word	0x40010000
 800f094:	40010400 	.word	0x40010400
 800f098:	40014000 	.word	0x40014000
 800f09c:	40014400 	.word	0x40014400
 800f0a0:	40014800 	.word	0x40014800

0800f0a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b087      	sub	sp, #28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a1b      	ldr	r3, [r3, #32]
 800f0b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	4b21      	ldr	r3, [pc, #132]	@ (800f154 <TIM_OC5_SetConfig+0xb0>)
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68fa      	ldr	r2, [r7, #12]
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f0e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	041b      	lsls	r3, r3, #16
 800f0ec:	693a      	ldr	r2, [r7, #16]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a18      	ldr	r2, [pc, #96]	@ (800f158 <TIM_OC5_SetConfig+0xb4>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d00f      	beq.n	800f11a <TIM_OC5_SetConfig+0x76>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4a17      	ldr	r2, [pc, #92]	@ (800f15c <TIM_OC5_SetConfig+0xb8>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d00b      	beq.n	800f11a <TIM_OC5_SetConfig+0x76>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4a16      	ldr	r2, [pc, #88]	@ (800f160 <TIM_OC5_SetConfig+0xbc>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d007      	beq.n	800f11a <TIM_OC5_SetConfig+0x76>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a15      	ldr	r2, [pc, #84]	@ (800f164 <TIM_OC5_SetConfig+0xc0>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d003      	beq.n	800f11a <TIM_OC5_SetConfig+0x76>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4a14      	ldr	r2, [pc, #80]	@ (800f168 <TIM_OC5_SetConfig+0xc4>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d109      	bne.n	800f12e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	695b      	ldr	r3, [r3, #20]
 800f126:	021b      	lsls	r3, r3, #8
 800f128:	697a      	ldr	r2, [r7, #20]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	697a      	ldr	r2, [r7, #20]
 800f132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	685a      	ldr	r2, [r3, #4]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	621a      	str	r2, [r3, #32]
}
 800f148:	bf00      	nop
 800f14a:	371c      	adds	r7, #28
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	fffeff8f 	.word	0xfffeff8f
 800f158:	40010000 	.word	0x40010000
 800f15c:	40010400 	.word	0x40010400
 800f160:	40014000 	.word	0x40014000
 800f164:	40014400 	.word	0x40014400
 800f168:	40014800 	.word	0x40014800

0800f16c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b087      	sub	sp, #28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a1b      	ldr	r3, [r3, #32]
 800f17a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a1b      	ldr	r3, [r3, #32]
 800f180:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	4b22      	ldr	r3, [pc, #136]	@ (800f220 <TIM_OC6_SetConfig+0xb4>)
 800f198:	4013      	ands	r3, r2
 800f19a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	021b      	lsls	r3, r3, #8
 800f1a2:	68fa      	ldr	r2, [r7, #12]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f1ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	051b      	lsls	r3, r3, #20
 800f1b6:	693a      	ldr	r2, [r7, #16]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a19      	ldr	r2, [pc, #100]	@ (800f224 <TIM_OC6_SetConfig+0xb8>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d00f      	beq.n	800f1e4 <TIM_OC6_SetConfig+0x78>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a18      	ldr	r2, [pc, #96]	@ (800f228 <TIM_OC6_SetConfig+0xbc>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d00b      	beq.n	800f1e4 <TIM_OC6_SetConfig+0x78>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4a17      	ldr	r2, [pc, #92]	@ (800f22c <TIM_OC6_SetConfig+0xc0>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d007      	beq.n	800f1e4 <TIM_OC6_SetConfig+0x78>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4a16      	ldr	r2, [pc, #88]	@ (800f230 <TIM_OC6_SetConfig+0xc4>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d003      	beq.n	800f1e4 <TIM_OC6_SetConfig+0x78>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4a15      	ldr	r2, [pc, #84]	@ (800f234 <TIM_OC6_SetConfig+0xc8>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d109      	bne.n	800f1f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	029b      	lsls	r3, r3, #10
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	697a      	ldr	r2, [r7, #20]
 800f1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	685a      	ldr	r2, [r3, #4]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	621a      	str	r2, [r3, #32]
}
 800f212:	bf00      	nop
 800f214:	371c      	adds	r7, #28
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	feff8fff 	.word	0xfeff8fff
 800f224:	40010000 	.word	0x40010000
 800f228:	40010400 	.word	0x40010400
 800f22c:	40014000 	.word	0x40014000
 800f230:	40014400 	.word	0x40014400
 800f234:	40014800 	.word	0x40014800

0800f238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f238:	b480      	push	{r7}
 800f23a:	b087      	sub	sp, #28
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6a1b      	ldr	r3, [r3, #32]
 800f248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	f023 0201 	bic.w	r2, r3, #1
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	699b      	ldr	r3, [r3, #24]
 800f25a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	f023 030a 	bic.w	r3, r3, #10
 800f274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f276:	697a      	ldr	r2, [r7, #20]
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	4313      	orrs	r3, r2
 800f27c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	693a      	ldr	r2, [r7, #16]
 800f282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	621a      	str	r2, [r3, #32]
}
 800f28a:	bf00      	nop
 800f28c:	371c      	adds	r7, #28
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr

0800f296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f296:	b480      	push	{r7}
 800f298:	b087      	sub	sp, #28
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6a1b      	ldr	r3, [r3, #32]
 800f2ac:	f023 0210 	bic.w	r2, r3, #16
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f2c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	031b      	lsls	r3, r3, #12
 800f2c6:	693a      	ldr	r2, [r7, #16]
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f2d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	011b      	lsls	r3, r3, #4
 800f2d8:	697a      	ldr	r2, [r7, #20]
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	693a      	ldr	r2, [r7, #16]
 800f2e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	697a      	ldr	r2, [r7, #20]
 800f2e8:	621a      	str	r2, [r3, #32]
}
 800f2ea:	bf00      	nop
 800f2ec:	371c      	adds	r7, #28
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
	...

0800f2f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	4b09      	ldr	r3, [pc, #36]	@ (800f330 <TIM_ITRx_SetConfig+0x38>)
 800f30c:	4013      	ands	r3, r2
 800f30e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	4313      	orrs	r3, r2
 800f316:	f043 0307 	orr.w	r3, r3, #7
 800f31a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	609a      	str	r2, [r3, #8]
}
 800f322:	bf00      	nop
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	ffcfff8f 	.word	0xffcfff8f

0800f334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f34e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	021a      	lsls	r2, r3, #8
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	431a      	orrs	r2, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	4313      	orrs	r3, r2
 800f360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	697a      	ldr	r2, [r7, #20]
 800f366:	609a      	str	r2, [r3, #8]
}
 800f368:	bf00      	nop
 800f36a:	371c      	adds	r7, #28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f374:	b480      	push	{r7}
 800f376:	b087      	sub	sp, #28
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	f003 031f 	and.w	r3, r3, #31
 800f386:	2201      	movs	r2, #1
 800f388:	fa02 f303 	lsl.w	r3, r2, r3
 800f38c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6a1a      	ldr	r2, [r3, #32]
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	43db      	mvns	r3, r3
 800f396:	401a      	ands	r2, r3
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6a1a      	ldr	r2, [r3, #32]
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	f003 031f 	and.w	r3, r3, #31
 800f3a6:	6879      	ldr	r1, [r7, #4]
 800f3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ac:	431a      	orrs	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	621a      	str	r2, [r3, #32]
}
 800f3b2:	bf00      	nop
 800f3b4:	371c      	adds	r7, #28
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
	...

0800f3c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d101      	bne.n	800f3d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	e077      	b.n	800f4c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a35      	ldr	r2, [pc, #212]	@ (800f4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d004      	beq.n	800f40c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a34      	ldr	r2, [pc, #208]	@ (800f4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d108      	bne.n	800f41e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	4313      	orrs	r3, r2
 800f42e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a25      	ldr	r2, [pc, #148]	@ (800f4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d02c      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f44a:	d027      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a22      	ldr	r2, [pc, #136]	@ (800f4dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d022      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a21      	ldr	r2, [pc, #132]	@ (800f4e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d01d      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a1f      	ldr	r2, [pc, #124]	@ (800f4e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d018      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4a1a      	ldr	r2, [pc, #104]	@ (800f4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d013      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a1b      	ldr	r2, [pc, #108]	@ (800f4e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d00e      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4a1a      	ldr	r2, [pc, #104]	@ (800f4ec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d009      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a18      	ldr	r2, [pc, #96]	@ (800f4f0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d004      	beq.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	4a17      	ldr	r2, [pc, #92]	@ (800f4f4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d10c      	bne.n	800f4b6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3714      	adds	r7, #20
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	40010000 	.word	0x40010000
 800f4d8:	40010400 	.word	0x40010400
 800f4dc:	40000400 	.word	0x40000400
 800f4e0:	40000800 	.word	0x40000800
 800f4e4:	40000c00 	.word	0x40000c00
 800f4e8:	40001800 	.word	0x40001800
 800f4ec:	40014000 	.word	0x40014000
 800f4f0:	4000e000 	.word	0x4000e000
 800f4f4:	4000e400 	.word	0x4000e400

0800f4f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d101      	bne.n	800f50a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	e042      	b.n	800f590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f510:	2b00      	cmp	r3, #0
 800f512:	d106      	bne.n	800f522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7f2 fc3f 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2224      	movs	r2, #36	@ 0x24
 800f526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f022 0201 	bic.w	r2, r2, #1
 800f538:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 ff22 	bl	801038c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 f8b3 	bl	800f6b4 <UART_SetConfig>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b01      	cmp	r3, #1
 800f552:	d101      	bne.n	800f558 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f554:	2301      	movs	r3, #1
 800f556:	e01b      	b.n	800f590 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	689a      	ldr	r2, [r3, #8]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f042 0201 	orr.w	r2, r2, #1
 800f586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 ffa1 	bl	80104d0 <UART_CheckIdleState>
 800f58e:	4603      	mov	r3, r0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08a      	sub	sp, #40	@ 0x28
 800f59c:	af02      	add	r7, sp, #8
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	603b      	str	r3, [r7, #0]
 800f5a4:	4613      	mov	r3, r2
 800f5a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5ae:	2b20      	cmp	r3, #32
 800f5b0:	d17b      	bne.n	800f6aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d002      	beq.n	800f5be <HAL_UART_Transmit+0x26>
 800f5b8:	88fb      	ldrh	r3, [r7, #6]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e074      	b.n	800f6ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2221      	movs	r2, #33	@ 0x21
 800f5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5d2:	f7f4 fba9 	bl	8003d28 <HAL_GetTick>
 800f5d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	88fa      	ldrh	r2, [r7, #6]
 800f5dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	88fa      	ldrh	r2, [r7, #6]
 800f5e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5f0:	d108      	bne.n	800f604 <HAL_UART_Transmit+0x6c>
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d104      	bne.n	800f604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	61bb      	str	r3, [r7, #24]
 800f602:	e003      	b.n	800f60c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f608:	2300      	movs	r3, #0
 800f60a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f60c:	e030      	b.n	800f670 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2200      	movs	r2, #0
 800f616:	2180      	movs	r1, #128	@ 0x80
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f001 f803 	bl	8010624 <UART_WaitOnFlagUntilTimeout>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d005      	beq.n	800f630 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2220      	movs	r2, #32
 800f628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f62c:	2303      	movs	r3, #3
 800f62e:	e03d      	b.n	800f6ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10b      	bne.n	800f64e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	461a      	mov	r2, r3
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f644:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	3302      	adds	r3, #2
 800f64a:	61bb      	str	r3, [r7, #24]
 800f64c:	e007      	b.n	800f65e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	781a      	ldrb	r2, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	3301      	adds	r3, #1
 800f65c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f664:	b29b      	uxth	r3, r3
 800f666:	3b01      	subs	r3, #1
 800f668:	b29a      	uxth	r2, r3
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f676:	b29b      	uxth	r3, r3
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1c8      	bne.n	800f60e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2200      	movs	r2, #0
 800f684:	2140      	movs	r1, #64	@ 0x40
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f000 ffcc 	bl	8010624 <UART_WaitOnFlagUntilTimeout>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d005      	beq.n	800f69e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2220      	movs	r2, #32
 800f696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f69a:	2303      	movs	r3, #3
 800f69c:	e006      	b.n	800f6ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2220      	movs	r2, #32
 800f6a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e000      	b.n	800f6ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f6aa:	2302      	movs	r3, #2
  }
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3720      	adds	r7, #32
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6b8:	b092      	sub	sp, #72	@ 0x48
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	689a      	ldr	r2, [r3, #8]
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	431a      	orrs	r2, r3
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	69db      	ldr	r3, [r3, #28]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4bbe      	ldr	r3, [pc, #760]	@ (800f9dc <UART_SetConfig+0x328>)
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	697a      	ldr	r2, [r7, #20]
 800f6e8:	6812      	ldr	r2, [r2, #0]
 800f6ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f6ec:	430b      	orrs	r3, r1
 800f6ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	68da      	ldr	r2, [r3, #12]
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	430a      	orrs	r2, r1
 800f704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	699b      	ldr	r3, [r3, #24]
 800f70a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4ab3      	ldr	r2, [pc, #716]	@ (800f9e0 <UART_SetConfig+0x32c>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d004      	beq.n	800f720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f71c:	4313      	orrs	r3, r2
 800f71e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	689a      	ldr	r2, [r3, #8]
 800f726:	4baf      	ldr	r3, [pc, #700]	@ (800f9e4 <UART_SetConfig+0x330>)
 800f728:	4013      	ands	r3, r2
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	6812      	ldr	r2, [r2, #0]
 800f72e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f730:	430b      	orrs	r3, r1
 800f732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f73a:	f023 010f 	bic.w	r1, r3, #15
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4aa6      	ldr	r2, [pc, #664]	@ (800f9e8 <UART_SetConfig+0x334>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d177      	bne.n	800f844 <UART_SetConfig+0x190>
 800f754:	4ba5      	ldr	r3, [pc, #660]	@ (800f9ec <UART_SetConfig+0x338>)
 800f756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f758:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f75c:	2b28      	cmp	r3, #40	@ 0x28
 800f75e:	d86d      	bhi.n	800f83c <UART_SetConfig+0x188>
 800f760:	a201      	add	r2, pc, #4	@ (adr r2, 800f768 <UART_SetConfig+0xb4>)
 800f762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f766:	bf00      	nop
 800f768:	0800f80d 	.word	0x0800f80d
 800f76c:	0800f83d 	.word	0x0800f83d
 800f770:	0800f83d 	.word	0x0800f83d
 800f774:	0800f83d 	.word	0x0800f83d
 800f778:	0800f83d 	.word	0x0800f83d
 800f77c:	0800f83d 	.word	0x0800f83d
 800f780:	0800f83d 	.word	0x0800f83d
 800f784:	0800f83d 	.word	0x0800f83d
 800f788:	0800f815 	.word	0x0800f815
 800f78c:	0800f83d 	.word	0x0800f83d
 800f790:	0800f83d 	.word	0x0800f83d
 800f794:	0800f83d 	.word	0x0800f83d
 800f798:	0800f83d 	.word	0x0800f83d
 800f79c:	0800f83d 	.word	0x0800f83d
 800f7a0:	0800f83d 	.word	0x0800f83d
 800f7a4:	0800f83d 	.word	0x0800f83d
 800f7a8:	0800f81d 	.word	0x0800f81d
 800f7ac:	0800f83d 	.word	0x0800f83d
 800f7b0:	0800f83d 	.word	0x0800f83d
 800f7b4:	0800f83d 	.word	0x0800f83d
 800f7b8:	0800f83d 	.word	0x0800f83d
 800f7bc:	0800f83d 	.word	0x0800f83d
 800f7c0:	0800f83d 	.word	0x0800f83d
 800f7c4:	0800f83d 	.word	0x0800f83d
 800f7c8:	0800f825 	.word	0x0800f825
 800f7cc:	0800f83d 	.word	0x0800f83d
 800f7d0:	0800f83d 	.word	0x0800f83d
 800f7d4:	0800f83d 	.word	0x0800f83d
 800f7d8:	0800f83d 	.word	0x0800f83d
 800f7dc:	0800f83d 	.word	0x0800f83d
 800f7e0:	0800f83d 	.word	0x0800f83d
 800f7e4:	0800f83d 	.word	0x0800f83d
 800f7e8:	0800f82d 	.word	0x0800f82d
 800f7ec:	0800f83d 	.word	0x0800f83d
 800f7f0:	0800f83d 	.word	0x0800f83d
 800f7f4:	0800f83d 	.word	0x0800f83d
 800f7f8:	0800f83d 	.word	0x0800f83d
 800f7fc:	0800f83d 	.word	0x0800f83d
 800f800:	0800f83d 	.word	0x0800f83d
 800f804:	0800f83d 	.word	0x0800f83d
 800f808:	0800f835 	.word	0x0800f835
 800f80c:	2301      	movs	r3, #1
 800f80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f812:	e326      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f814:	2304      	movs	r3, #4
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81a:	e322      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f81c:	2308      	movs	r3, #8
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f822:	e31e      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f824:	2310      	movs	r3, #16
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82a:	e31a      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f82c:	2320      	movs	r3, #32
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f832:	e316      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f834:	2340      	movs	r3, #64	@ 0x40
 800f836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83a:	e312      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f83c:	2380      	movs	r3, #128	@ 0x80
 800f83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f842:	e30e      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a69      	ldr	r2, [pc, #420]	@ (800f9f0 <UART_SetConfig+0x33c>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d130      	bne.n	800f8b0 <UART_SetConfig+0x1fc>
 800f84e:	4b67      	ldr	r3, [pc, #412]	@ (800f9ec <UART_SetConfig+0x338>)
 800f850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f852:	f003 0307 	and.w	r3, r3, #7
 800f856:	2b05      	cmp	r3, #5
 800f858:	d826      	bhi.n	800f8a8 <UART_SetConfig+0x1f4>
 800f85a:	a201      	add	r2, pc, #4	@ (adr r2, 800f860 <UART_SetConfig+0x1ac>)
 800f85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f860:	0800f879 	.word	0x0800f879
 800f864:	0800f881 	.word	0x0800f881
 800f868:	0800f889 	.word	0x0800f889
 800f86c:	0800f891 	.word	0x0800f891
 800f870:	0800f899 	.word	0x0800f899
 800f874:	0800f8a1 	.word	0x0800f8a1
 800f878:	2300      	movs	r3, #0
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f87e:	e2f0      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f880:	2304      	movs	r3, #4
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f886:	e2ec      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f888:	2308      	movs	r3, #8
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88e:	e2e8      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f890:	2310      	movs	r3, #16
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f896:	e2e4      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f898:	2320      	movs	r3, #32
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89e:	e2e0      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f8a0:	2340      	movs	r3, #64	@ 0x40
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a6:	e2dc      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f8a8:	2380      	movs	r3, #128	@ 0x80
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ae:	e2d8      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a4f      	ldr	r2, [pc, #316]	@ (800f9f4 <UART_SetConfig+0x340>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d130      	bne.n	800f91c <UART_SetConfig+0x268>
 800f8ba:	4b4c      	ldr	r3, [pc, #304]	@ (800f9ec <UART_SetConfig+0x338>)
 800f8bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8be:	f003 0307 	and.w	r3, r3, #7
 800f8c2:	2b05      	cmp	r3, #5
 800f8c4:	d826      	bhi.n	800f914 <UART_SetConfig+0x260>
 800f8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f8cc <UART_SetConfig+0x218>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f8e5 	.word	0x0800f8e5
 800f8d0:	0800f8ed 	.word	0x0800f8ed
 800f8d4:	0800f8f5 	.word	0x0800f8f5
 800f8d8:	0800f8fd 	.word	0x0800f8fd
 800f8dc:	0800f905 	.word	0x0800f905
 800f8e0:	0800f90d 	.word	0x0800f90d
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ea:	e2ba      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f8ec:	2304      	movs	r3, #4
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f2:	e2b6      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f8f4:	2308      	movs	r3, #8
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fa:	e2b2      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f8fc:	2310      	movs	r3, #16
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f902:	e2ae      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f904:	2320      	movs	r3, #32
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90a:	e2aa      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f90c:	2340      	movs	r3, #64	@ 0x40
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f912:	e2a6      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f914:	2380      	movs	r3, #128	@ 0x80
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91a:	e2a2      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a35      	ldr	r2, [pc, #212]	@ (800f9f8 <UART_SetConfig+0x344>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d130      	bne.n	800f988 <UART_SetConfig+0x2d4>
 800f926:	4b31      	ldr	r3, [pc, #196]	@ (800f9ec <UART_SetConfig+0x338>)
 800f928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f92a:	f003 0307 	and.w	r3, r3, #7
 800f92e:	2b05      	cmp	r3, #5
 800f930:	d826      	bhi.n	800f980 <UART_SetConfig+0x2cc>
 800f932:	a201      	add	r2, pc, #4	@ (adr r2, 800f938 <UART_SetConfig+0x284>)
 800f934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f938:	0800f951 	.word	0x0800f951
 800f93c:	0800f959 	.word	0x0800f959
 800f940:	0800f961 	.word	0x0800f961
 800f944:	0800f969 	.word	0x0800f969
 800f948:	0800f971 	.word	0x0800f971
 800f94c:	0800f979 	.word	0x0800f979
 800f950:	2300      	movs	r3, #0
 800f952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f956:	e284      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f958:	2304      	movs	r3, #4
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95e:	e280      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f960:	2308      	movs	r3, #8
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f966:	e27c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f968:	2310      	movs	r3, #16
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96e:	e278      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f970:	2320      	movs	r3, #32
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f976:	e274      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f978:	2340      	movs	r3, #64	@ 0x40
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97e:	e270      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f980:	2380      	movs	r3, #128	@ 0x80
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f986:	e26c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4a1b      	ldr	r2, [pc, #108]	@ (800f9fc <UART_SetConfig+0x348>)
 800f98e:	4293      	cmp	r3, r2
 800f990:	d142      	bne.n	800fa18 <UART_SetConfig+0x364>
 800f992:	4b16      	ldr	r3, [pc, #88]	@ (800f9ec <UART_SetConfig+0x338>)
 800f994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f996:	f003 0307 	and.w	r3, r3, #7
 800f99a:	2b05      	cmp	r3, #5
 800f99c:	d838      	bhi.n	800fa10 <UART_SetConfig+0x35c>
 800f99e:	a201      	add	r2, pc, #4	@ (adr r2, 800f9a4 <UART_SetConfig+0x2f0>)
 800f9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a4:	0800f9bd 	.word	0x0800f9bd
 800f9a8:	0800f9c5 	.word	0x0800f9c5
 800f9ac:	0800f9cd 	.word	0x0800f9cd
 800f9b0:	0800f9d5 	.word	0x0800f9d5
 800f9b4:	0800fa01 	.word	0x0800fa01
 800f9b8:	0800fa09 	.word	0x0800fa09
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c2:	e24e      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f9c4:	2304      	movs	r3, #4
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ca:	e24a      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f9cc:	2308      	movs	r3, #8
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d2:	e246      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f9d4:	2310      	movs	r3, #16
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9da:	e242      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800f9dc:	cfff69f3 	.word	0xcfff69f3
 800f9e0:	58000c00 	.word	0x58000c00
 800f9e4:	11fff4ff 	.word	0x11fff4ff
 800f9e8:	40011000 	.word	0x40011000
 800f9ec:	58024400 	.word	0x58024400
 800f9f0:	40004400 	.word	0x40004400
 800f9f4:	40004800 	.word	0x40004800
 800f9f8:	40004c00 	.word	0x40004c00
 800f9fc:	40005000 	.word	0x40005000
 800fa00:	2320      	movs	r3, #32
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e22c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fa08:	2340      	movs	r3, #64	@ 0x40
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0e:	e228      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fa10:	2380      	movs	r3, #128	@ 0x80
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa16:	e224      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4ab1      	ldr	r2, [pc, #708]	@ (800fce4 <UART_SetConfig+0x630>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d176      	bne.n	800fb10 <UART_SetConfig+0x45c>
 800fa22:	4bb1      	ldr	r3, [pc, #708]	@ (800fce8 <UART_SetConfig+0x634>)
 800fa24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa2a:	2b28      	cmp	r3, #40	@ 0x28
 800fa2c:	d86c      	bhi.n	800fb08 <UART_SetConfig+0x454>
 800fa2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa34 <UART_SetConfig+0x380>)
 800fa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa34:	0800fad9 	.word	0x0800fad9
 800fa38:	0800fb09 	.word	0x0800fb09
 800fa3c:	0800fb09 	.word	0x0800fb09
 800fa40:	0800fb09 	.word	0x0800fb09
 800fa44:	0800fb09 	.word	0x0800fb09
 800fa48:	0800fb09 	.word	0x0800fb09
 800fa4c:	0800fb09 	.word	0x0800fb09
 800fa50:	0800fb09 	.word	0x0800fb09
 800fa54:	0800fae1 	.word	0x0800fae1
 800fa58:	0800fb09 	.word	0x0800fb09
 800fa5c:	0800fb09 	.word	0x0800fb09
 800fa60:	0800fb09 	.word	0x0800fb09
 800fa64:	0800fb09 	.word	0x0800fb09
 800fa68:	0800fb09 	.word	0x0800fb09
 800fa6c:	0800fb09 	.word	0x0800fb09
 800fa70:	0800fb09 	.word	0x0800fb09
 800fa74:	0800fae9 	.word	0x0800fae9
 800fa78:	0800fb09 	.word	0x0800fb09
 800fa7c:	0800fb09 	.word	0x0800fb09
 800fa80:	0800fb09 	.word	0x0800fb09
 800fa84:	0800fb09 	.word	0x0800fb09
 800fa88:	0800fb09 	.word	0x0800fb09
 800fa8c:	0800fb09 	.word	0x0800fb09
 800fa90:	0800fb09 	.word	0x0800fb09
 800fa94:	0800faf1 	.word	0x0800faf1
 800fa98:	0800fb09 	.word	0x0800fb09
 800fa9c:	0800fb09 	.word	0x0800fb09
 800faa0:	0800fb09 	.word	0x0800fb09
 800faa4:	0800fb09 	.word	0x0800fb09
 800faa8:	0800fb09 	.word	0x0800fb09
 800faac:	0800fb09 	.word	0x0800fb09
 800fab0:	0800fb09 	.word	0x0800fb09
 800fab4:	0800faf9 	.word	0x0800faf9
 800fab8:	0800fb09 	.word	0x0800fb09
 800fabc:	0800fb09 	.word	0x0800fb09
 800fac0:	0800fb09 	.word	0x0800fb09
 800fac4:	0800fb09 	.word	0x0800fb09
 800fac8:	0800fb09 	.word	0x0800fb09
 800facc:	0800fb09 	.word	0x0800fb09
 800fad0:	0800fb09 	.word	0x0800fb09
 800fad4:	0800fb01 	.word	0x0800fb01
 800fad8:	2301      	movs	r3, #1
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fade:	e1c0      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fae0:	2304      	movs	r3, #4
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae6:	e1bc      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fae8:	2308      	movs	r3, #8
 800faea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faee:	e1b8      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800faf0:	2310      	movs	r3, #16
 800faf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf6:	e1b4      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800faf8:	2320      	movs	r3, #32
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafe:	e1b0      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb00:	2340      	movs	r3, #64	@ 0x40
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb06:	e1ac      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb08:	2380      	movs	r3, #128	@ 0x80
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e1a8      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4a75      	ldr	r2, [pc, #468]	@ (800fcec <UART_SetConfig+0x638>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d130      	bne.n	800fb7c <UART_SetConfig+0x4c8>
 800fb1a:	4b73      	ldr	r3, [pc, #460]	@ (800fce8 <UART_SetConfig+0x634>)
 800fb1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb1e:	f003 0307 	and.w	r3, r3, #7
 800fb22:	2b05      	cmp	r3, #5
 800fb24:	d826      	bhi.n	800fb74 <UART_SetConfig+0x4c0>
 800fb26:	a201      	add	r2, pc, #4	@ (adr r2, 800fb2c <UART_SetConfig+0x478>)
 800fb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2c:	0800fb45 	.word	0x0800fb45
 800fb30:	0800fb4d 	.word	0x0800fb4d
 800fb34:	0800fb55 	.word	0x0800fb55
 800fb38:	0800fb5d 	.word	0x0800fb5d
 800fb3c:	0800fb65 	.word	0x0800fb65
 800fb40:	0800fb6d 	.word	0x0800fb6d
 800fb44:	2300      	movs	r3, #0
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb4a:	e18a      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb4c:	2304      	movs	r3, #4
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e186      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb54:	2308      	movs	r3, #8
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb5a:	e182      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb5c:	2310      	movs	r3, #16
 800fb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb62:	e17e      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb64:	2320      	movs	r3, #32
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb6a:	e17a      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb6c:	2340      	movs	r3, #64	@ 0x40
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb72:	e176      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb74:	2380      	movs	r3, #128	@ 0x80
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7a:	e172      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a5b      	ldr	r2, [pc, #364]	@ (800fcf0 <UART_SetConfig+0x63c>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d130      	bne.n	800fbe8 <UART_SetConfig+0x534>
 800fb86:	4b58      	ldr	r3, [pc, #352]	@ (800fce8 <UART_SetConfig+0x634>)
 800fb88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb8a:	f003 0307 	and.w	r3, r3, #7
 800fb8e:	2b05      	cmp	r3, #5
 800fb90:	d826      	bhi.n	800fbe0 <UART_SetConfig+0x52c>
 800fb92:	a201      	add	r2, pc, #4	@ (adr r2, 800fb98 <UART_SetConfig+0x4e4>)
 800fb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb98:	0800fbb1 	.word	0x0800fbb1
 800fb9c:	0800fbb9 	.word	0x0800fbb9
 800fba0:	0800fbc1 	.word	0x0800fbc1
 800fba4:	0800fbc9 	.word	0x0800fbc9
 800fba8:	0800fbd1 	.word	0x0800fbd1
 800fbac:	0800fbd9 	.word	0x0800fbd9
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb6:	e154      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbb8:	2304      	movs	r3, #4
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e150      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbc0:	2308      	movs	r3, #8
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc6:	e14c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbc8:	2310      	movs	r3, #16
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbce:	e148      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbd0:	2320      	movs	r3, #32
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd6:	e144      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbd8:	2340      	movs	r3, #64	@ 0x40
 800fbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbde:	e140      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbe0:	2380      	movs	r3, #128	@ 0x80
 800fbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbe6:	e13c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a41      	ldr	r2, [pc, #260]	@ (800fcf4 <UART_SetConfig+0x640>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	f040 8082 	bne.w	800fcf8 <UART_SetConfig+0x644>
 800fbf4:	4b3c      	ldr	r3, [pc, #240]	@ (800fce8 <UART_SetConfig+0x634>)
 800fbf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fbfc:	2b28      	cmp	r3, #40	@ 0x28
 800fbfe:	d86d      	bhi.n	800fcdc <UART_SetConfig+0x628>
 800fc00:	a201      	add	r2, pc, #4	@ (adr r2, 800fc08 <UART_SetConfig+0x554>)
 800fc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc06:	bf00      	nop
 800fc08:	0800fcad 	.word	0x0800fcad
 800fc0c:	0800fcdd 	.word	0x0800fcdd
 800fc10:	0800fcdd 	.word	0x0800fcdd
 800fc14:	0800fcdd 	.word	0x0800fcdd
 800fc18:	0800fcdd 	.word	0x0800fcdd
 800fc1c:	0800fcdd 	.word	0x0800fcdd
 800fc20:	0800fcdd 	.word	0x0800fcdd
 800fc24:	0800fcdd 	.word	0x0800fcdd
 800fc28:	0800fcb5 	.word	0x0800fcb5
 800fc2c:	0800fcdd 	.word	0x0800fcdd
 800fc30:	0800fcdd 	.word	0x0800fcdd
 800fc34:	0800fcdd 	.word	0x0800fcdd
 800fc38:	0800fcdd 	.word	0x0800fcdd
 800fc3c:	0800fcdd 	.word	0x0800fcdd
 800fc40:	0800fcdd 	.word	0x0800fcdd
 800fc44:	0800fcdd 	.word	0x0800fcdd
 800fc48:	0800fcbd 	.word	0x0800fcbd
 800fc4c:	0800fcdd 	.word	0x0800fcdd
 800fc50:	0800fcdd 	.word	0x0800fcdd
 800fc54:	0800fcdd 	.word	0x0800fcdd
 800fc58:	0800fcdd 	.word	0x0800fcdd
 800fc5c:	0800fcdd 	.word	0x0800fcdd
 800fc60:	0800fcdd 	.word	0x0800fcdd
 800fc64:	0800fcdd 	.word	0x0800fcdd
 800fc68:	0800fcc5 	.word	0x0800fcc5
 800fc6c:	0800fcdd 	.word	0x0800fcdd
 800fc70:	0800fcdd 	.word	0x0800fcdd
 800fc74:	0800fcdd 	.word	0x0800fcdd
 800fc78:	0800fcdd 	.word	0x0800fcdd
 800fc7c:	0800fcdd 	.word	0x0800fcdd
 800fc80:	0800fcdd 	.word	0x0800fcdd
 800fc84:	0800fcdd 	.word	0x0800fcdd
 800fc88:	0800fccd 	.word	0x0800fccd
 800fc8c:	0800fcdd 	.word	0x0800fcdd
 800fc90:	0800fcdd 	.word	0x0800fcdd
 800fc94:	0800fcdd 	.word	0x0800fcdd
 800fc98:	0800fcdd 	.word	0x0800fcdd
 800fc9c:	0800fcdd 	.word	0x0800fcdd
 800fca0:	0800fcdd 	.word	0x0800fcdd
 800fca4:	0800fcdd 	.word	0x0800fcdd
 800fca8:	0800fcd5 	.word	0x0800fcd5
 800fcac:	2301      	movs	r3, #1
 800fcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb2:	e0d6      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fcb4:	2304      	movs	r3, #4
 800fcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcba:	e0d2      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fcbc:	2308      	movs	r3, #8
 800fcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcc2:	e0ce      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fcc4:	2310      	movs	r3, #16
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcca:	e0ca      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fccc:	2320      	movs	r3, #32
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcd2:	e0c6      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fcd4:	2340      	movs	r3, #64	@ 0x40
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcda:	e0c2      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fcdc:	2380      	movs	r3, #128	@ 0x80
 800fcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fce2:	e0be      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fce4:	40011400 	.word	0x40011400
 800fce8:	58024400 	.word	0x58024400
 800fcec:	40007800 	.word	0x40007800
 800fcf0:	40007c00 	.word	0x40007c00
 800fcf4:	40011800 	.word	0x40011800
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4aad      	ldr	r2, [pc, #692]	@ (800ffb4 <UART_SetConfig+0x900>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d176      	bne.n	800fdf0 <UART_SetConfig+0x73c>
 800fd02:	4bad      	ldr	r3, [pc, #692]	@ (800ffb8 <UART_SetConfig+0x904>)
 800fd04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd0a:	2b28      	cmp	r3, #40	@ 0x28
 800fd0c:	d86c      	bhi.n	800fde8 <UART_SetConfig+0x734>
 800fd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd14 <UART_SetConfig+0x660>)
 800fd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd14:	0800fdb9 	.word	0x0800fdb9
 800fd18:	0800fde9 	.word	0x0800fde9
 800fd1c:	0800fde9 	.word	0x0800fde9
 800fd20:	0800fde9 	.word	0x0800fde9
 800fd24:	0800fde9 	.word	0x0800fde9
 800fd28:	0800fde9 	.word	0x0800fde9
 800fd2c:	0800fde9 	.word	0x0800fde9
 800fd30:	0800fde9 	.word	0x0800fde9
 800fd34:	0800fdc1 	.word	0x0800fdc1
 800fd38:	0800fde9 	.word	0x0800fde9
 800fd3c:	0800fde9 	.word	0x0800fde9
 800fd40:	0800fde9 	.word	0x0800fde9
 800fd44:	0800fde9 	.word	0x0800fde9
 800fd48:	0800fde9 	.word	0x0800fde9
 800fd4c:	0800fde9 	.word	0x0800fde9
 800fd50:	0800fde9 	.word	0x0800fde9
 800fd54:	0800fdc9 	.word	0x0800fdc9
 800fd58:	0800fde9 	.word	0x0800fde9
 800fd5c:	0800fde9 	.word	0x0800fde9
 800fd60:	0800fde9 	.word	0x0800fde9
 800fd64:	0800fde9 	.word	0x0800fde9
 800fd68:	0800fde9 	.word	0x0800fde9
 800fd6c:	0800fde9 	.word	0x0800fde9
 800fd70:	0800fde9 	.word	0x0800fde9
 800fd74:	0800fdd1 	.word	0x0800fdd1
 800fd78:	0800fde9 	.word	0x0800fde9
 800fd7c:	0800fde9 	.word	0x0800fde9
 800fd80:	0800fde9 	.word	0x0800fde9
 800fd84:	0800fde9 	.word	0x0800fde9
 800fd88:	0800fde9 	.word	0x0800fde9
 800fd8c:	0800fde9 	.word	0x0800fde9
 800fd90:	0800fde9 	.word	0x0800fde9
 800fd94:	0800fdd9 	.word	0x0800fdd9
 800fd98:	0800fde9 	.word	0x0800fde9
 800fd9c:	0800fde9 	.word	0x0800fde9
 800fda0:	0800fde9 	.word	0x0800fde9
 800fda4:	0800fde9 	.word	0x0800fde9
 800fda8:	0800fde9 	.word	0x0800fde9
 800fdac:	0800fde9 	.word	0x0800fde9
 800fdb0:	0800fde9 	.word	0x0800fde9
 800fdb4:	0800fde1 	.word	0x0800fde1
 800fdb8:	2301      	movs	r3, #1
 800fdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdbe:	e050      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fdc0:	2304      	movs	r3, #4
 800fdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdc6:	e04c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fdc8:	2308      	movs	r3, #8
 800fdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdce:	e048      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fdd0:	2310      	movs	r3, #16
 800fdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdd6:	e044      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fdd8:	2320      	movs	r3, #32
 800fdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdde:	e040      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fde0:	2340      	movs	r3, #64	@ 0x40
 800fde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fde6:	e03c      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fde8:	2380      	movs	r3, #128	@ 0x80
 800fdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdee:	e038      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a71      	ldr	r2, [pc, #452]	@ (800ffbc <UART_SetConfig+0x908>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d130      	bne.n	800fe5c <UART_SetConfig+0x7a8>
 800fdfa:	4b6f      	ldr	r3, [pc, #444]	@ (800ffb8 <UART_SetConfig+0x904>)
 800fdfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fdfe:	f003 0307 	and.w	r3, r3, #7
 800fe02:	2b05      	cmp	r3, #5
 800fe04:	d826      	bhi.n	800fe54 <UART_SetConfig+0x7a0>
 800fe06:	a201      	add	r2, pc, #4	@ (adr r2, 800fe0c <UART_SetConfig+0x758>)
 800fe08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0c:	0800fe25 	.word	0x0800fe25
 800fe10:	0800fe2d 	.word	0x0800fe2d
 800fe14:	0800fe35 	.word	0x0800fe35
 800fe18:	0800fe3d 	.word	0x0800fe3d
 800fe1c:	0800fe45 	.word	0x0800fe45
 800fe20:	0800fe4d 	.word	0x0800fe4d
 800fe24:	2302      	movs	r3, #2
 800fe26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe2a:	e01a      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe2c:	2304      	movs	r3, #4
 800fe2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe32:	e016      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe34:	2308      	movs	r3, #8
 800fe36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe3a:	e012      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe3c:	2310      	movs	r3, #16
 800fe3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe42:	e00e      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe44:	2320      	movs	r3, #32
 800fe46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe4a:	e00a      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe4c:	2340      	movs	r3, #64	@ 0x40
 800fe4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe52:	e006      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe54:	2380      	movs	r3, #128	@ 0x80
 800fe56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe5a:	e002      	b.n	800fe62 <UART_SetConfig+0x7ae>
 800fe5c:	2380      	movs	r3, #128	@ 0x80
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a55      	ldr	r2, [pc, #340]	@ (800ffbc <UART_SetConfig+0x908>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	f040 80f8 	bne.w	801005e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe72:	2b20      	cmp	r3, #32
 800fe74:	dc46      	bgt.n	800ff04 <UART_SetConfig+0x850>
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	db75      	blt.n	800ff66 <UART_SetConfig+0x8b2>
 800fe7a:	3b02      	subs	r3, #2
 800fe7c:	2b1e      	cmp	r3, #30
 800fe7e:	d872      	bhi.n	800ff66 <UART_SetConfig+0x8b2>
 800fe80:	a201      	add	r2, pc, #4	@ (adr r2, 800fe88 <UART_SetConfig+0x7d4>)
 800fe82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe86:	bf00      	nop
 800fe88:	0800ff0b 	.word	0x0800ff0b
 800fe8c:	0800ff67 	.word	0x0800ff67
 800fe90:	0800ff13 	.word	0x0800ff13
 800fe94:	0800ff67 	.word	0x0800ff67
 800fe98:	0800ff67 	.word	0x0800ff67
 800fe9c:	0800ff67 	.word	0x0800ff67
 800fea0:	0800ff23 	.word	0x0800ff23
 800fea4:	0800ff67 	.word	0x0800ff67
 800fea8:	0800ff67 	.word	0x0800ff67
 800feac:	0800ff67 	.word	0x0800ff67
 800feb0:	0800ff67 	.word	0x0800ff67
 800feb4:	0800ff67 	.word	0x0800ff67
 800feb8:	0800ff67 	.word	0x0800ff67
 800febc:	0800ff67 	.word	0x0800ff67
 800fec0:	0800ff33 	.word	0x0800ff33
 800fec4:	0800ff67 	.word	0x0800ff67
 800fec8:	0800ff67 	.word	0x0800ff67
 800fecc:	0800ff67 	.word	0x0800ff67
 800fed0:	0800ff67 	.word	0x0800ff67
 800fed4:	0800ff67 	.word	0x0800ff67
 800fed8:	0800ff67 	.word	0x0800ff67
 800fedc:	0800ff67 	.word	0x0800ff67
 800fee0:	0800ff67 	.word	0x0800ff67
 800fee4:	0800ff67 	.word	0x0800ff67
 800fee8:	0800ff67 	.word	0x0800ff67
 800feec:	0800ff67 	.word	0x0800ff67
 800fef0:	0800ff67 	.word	0x0800ff67
 800fef4:	0800ff67 	.word	0x0800ff67
 800fef8:	0800ff67 	.word	0x0800ff67
 800fefc:	0800ff67 	.word	0x0800ff67
 800ff00:	0800ff59 	.word	0x0800ff59
 800ff04:	2b40      	cmp	r3, #64	@ 0x40
 800ff06:	d02a      	beq.n	800ff5e <UART_SetConfig+0x8aa>
 800ff08:	e02d      	b.n	800ff66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff0a:	f7fb fd11 	bl	800b930 <HAL_RCCEx_GetD3PCLK1Freq>
 800ff0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff10:	e02f      	b.n	800ff72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fb fd20 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff20:	e027      	b.n	800ff72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff22:	f107 0318 	add.w	r3, r7, #24
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fb fe6c 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff30:	e01f      	b.n	800ff72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff32:	4b21      	ldr	r3, [pc, #132]	@ (800ffb8 <UART_SetConfig+0x904>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f003 0320 	and.w	r3, r3, #32
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d009      	beq.n	800ff52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ffb8 <UART_SetConfig+0x904>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	08db      	lsrs	r3, r3, #3
 800ff44:	f003 0303 	and.w	r3, r3, #3
 800ff48:	4a1d      	ldr	r2, [pc, #116]	@ (800ffc0 <UART_SetConfig+0x90c>)
 800ff4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff50:	e00f      	b.n	800ff72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ff52:	4b1b      	ldr	r3, [pc, #108]	@ (800ffc0 <UART_SetConfig+0x90c>)
 800ff54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff56:	e00c      	b.n	800ff72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff58:	4b1a      	ldr	r3, [pc, #104]	@ (800ffc4 <UART_SetConfig+0x910>)
 800ff5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff5c:	e009      	b.n	800ff72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff64:	e005      	b.n	800ff72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ff66:	2300      	movs	r3, #0
 800ff68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 81ee 	beq.w	8010356 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff7e:	4a12      	ldr	r2, [pc, #72]	@ (800ffc8 <UART_SetConfig+0x914>)
 800ff80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff84:	461a      	mov	r2, r3
 800ff86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	685a      	ldr	r2, [r3, #4]
 800ff92:	4613      	mov	r3, r2
 800ff94:	005b      	lsls	r3, r3, #1
 800ff96:	4413      	add	r3, r2
 800ff98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d305      	bcc.n	800ffaa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ffa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d910      	bls.n	800ffcc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ffb0:	e1d1      	b.n	8010356 <UART_SetConfig+0xca2>
 800ffb2:	bf00      	nop
 800ffb4:	40011c00 	.word	0x40011c00
 800ffb8:	58024400 	.word	0x58024400
 800ffbc:	58000c00 	.word	0x58000c00
 800ffc0:	03d09000 	.word	0x03d09000
 800ffc4:	003d0900 	.word	0x003d0900
 800ffc8:	0801dbfc 	.word	0x0801dbfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffce:	2200      	movs	r2, #0
 800ffd0:	60bb      	str	r3, [r7, #8]
 800ffd2:	60fa      	str	r2, [r7, #12]
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffd8:	4ac0      	ldr	r2, [pc, #768]	@ (80102dc <UART_SetConfig+0xc28>)
 800ffda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	607a      	str	r2, [r7, #4]
 800ffe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ffee:	f7f0 f9e7 	bl	80003c0 <__aeabi_uldivmod>
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	4610      	mov	r0, r2
 800fff8:	4619      	mov	r1, r3
 800fffa:	f04f 0200 	mov.w	r2, #0
 800fffe:	f04f 0300 	mov.w	r3, #0
 8010002:	020b      	lsls	r3, r1, #8
 8010004:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010008:	0202      	lsls	r2, r0, #8
 801000a:	6979      	ldr	r1, [r7, #20]
 801000c:	6849      	ldr	r1, [r1, #4]
 801000e:	0849      	lsrs	r1, r1, #1
 8010010:	2000      	movs	r0, #0
 8010012:	460c      	mov	r4, r1
 8010014:	4605      	mov	r5, r0
 8010016:	eb12 0804 	adds.w	r8, r2, r4
 801001a:	eb43 0905 	adc.w	r9, r3, r5
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	469a      	mov	sl, r3
 8010026:	4693      	mov	fp, r2
 8010028:	4652      	mov	r2, sl
 801002a:	465b      	mov	r3, fp
 801002c:	4640      	mov	r0, r8
 801002e:	4649      	mov	r1, r9
 8010030:	f7f0 f9c6 	bl	80003c0 <__aeabi_uldivmod>
 8010034:	4602      	mov	r2, r0
 8010036:	460b      	mov	r3, r1
 8010038:	4613      	mov	r3, r2
 801003a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801003c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801003e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010042:	d308      	bcc.n	8010056 <UART_SetConfig+0x9a2>
 8010044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801004a:	d204      	bcs.n	8010056 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010052:	60da      	str	r2, [r3, #12]
 8010054:	e17f      	b.n	8010356 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010056:	2301      	movs	r3, #1
 8010058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801005c:	e17b      	b.n	8010356 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	69db      	ldr	r3, [r3, #28]
 8010062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010066:	f040 80bd 	bne.w	80101e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801006a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801006e:	2b20      	cmp	r3, #32
 8010070:	dc48      	bgt.n	8010104 <UART_SetConfig+0xa50>
 8010072:	2b00      	cmp	r3, #0
 8010074:	db7b      	blt.n	801016e <UART_SetConfig+0xaba>
 8010076:	2b20      	cmp	r3, #32
 8010078:	d879      	bhi.n	801016e <UART_SetConfig+0xaba>
 801007a:	a201      	add	r2, pc, #4	@ (adr r2, 8010080 <UART_SetConfig+0x9cc>)
 801007c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010080:	0801010b 	.word	0x0801010b
 8010084:	08010113 	.word	0x08010113
 8010088:	0801016f 	.word	0x0801016f
 801008c:	0801016f 	.word	0x0801016f
 8010090:	0801011b 	.word	0x0801011b
 8010094:	0801016f 	.word	0x0801016f
 8010098:	0801016f 	.word	0x0801016f
 801009c:	0801016f 	.word	0x0801016f
 80100a0:	0801012b 	.word	0x0801012b
 80100a4:	0801016f 	.word	0x0801016f
 80100a8:	0801016f 	.word	0x0801016f
 80100ac:	0801016f 	.word	0x0801016f
 80100b0:	0801016f 	.word	0x0801016f
 80100b4:	0801016f 	.word	0x0801016f
 80100b8:	0801016f 	.word	0x0801016f
 80100bc:	0801016f 	.word	0x0801016f
 80100c0:	0801013b 	.word	0x0801013b
 80100c4:	0801016f 	.word	0x0801016f
 80100c8:	0801016f 	.word	0x0801016f
 80100cc:	0801016f 	.word	0x0801016f
 80100d0:	0801016f 	.word	0x0801016f
 80100d4:	0801016f 	.word	0x0801016f
 80100d8:	0801016f 	.word	0x0801016f
 80100dc:	0801016f 	.word	0x0801016f
 80100e0:	0801016f 	.word	0x0801016f
 80100e4:	0801016f 	.word	0x0801016f
 80100e8:	0801016f 	.word	0x0801016f
 80100ec:	0801016f 	.word	0x0801016f
 80100f0:	0801016f 	.word	0x0801016f
 80100f4:	0801016f 	.word	0x0801016f
 80100f8:	0801016f 	.word	0x0801016f
 80100fc:	0801016f 	.word	0x0801016f
 8010100:	08010161 	.word	0x08010161
 8010104:	2b40      	cmp	r3, #64	@ 0x40
 8010106:	d02e      	beq.n	8010166 <UART_SetConfig+0xab2>
 8010108:	e031      	b.n	801016e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801010a:	f7f9 fd73 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 801010e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010110:	e033      	b.n	801017a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010112:	f7f9 fd85 	bl	8009c20 <HAL_RCC_GetPCLK2Freq>
 8010116:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010118:	e02f      	b.n	801017a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801011a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801011e:	4618      	mov	r0, r3
 8010120:	f7fb fc1c 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010128:	e027      	b.n	801017a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801012a:	f107 0318 	add.w	r3, r7, #24
 801012e:	4618      	mov	r0, r3
 8010130:	f7fb fd68 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010138:	e01f      	b.n	801017a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801013a:	4b69      	ldr	r3, [pc, #420]	@ (80102e0 <UART_SetConfig+0xc2c>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f003 0320 	and.w	r3, r3, #32
 8010142:	2b00      	cmp	r3, #0
 8010144:	d009      	beq.n	801015a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010146:	4b66      	ldr	r3, [pc, #408]	@ (80102e0 <UART_SetConfig+0xc2c>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	08db      	lsrs	r3, r3, #3
 801014c:	f003 0303 	and.w	r3, r3, #3
 8010150:	4a64      	ldr	r2, [pc, #400]	@ (80102e4 <UART_SetConfig+0xc30>)
 8010152:	fa22 f303 	lsr.w	r3, r2, r3
 8010156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010158:	e00f      	b.n	801017a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801015a:	4b62      	ldr	r3, [pc, #392]	@ (80102e4 <UART_SetConfig+0xc30>)
 801015c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801015e:	e00c      	b.n	801017a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010160:	4b61      	ldr	r3, [pc, #388]	@ (80102e8 <UART_SetConfig+0xc34>)
 8010162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010164:	e009      	b.n	801017a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801016a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801016c:	e005      	b.n	801017a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801016e:	2300      	movs	r3, #0
 8010170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010172:	2301      	movs	r3, #1
 8010174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801017a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 80ea 	beq.w	8010356 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010186:	4a55      	ldr	r2, [pc, #340]	@ (80102dc <UART_SetConfig+0xc28>)
 8010188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801018c:	461a      	mov	r2, r3
 801018e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010190:	fbb3 f3f2 	udiv	r3, r3, r2
 8010194:	005a      	lsls	r2, r3, #1
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	085b      	lsrs	r3, r3, #1
 801019c:	441a      	add	r2, r3
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80101a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101aa:	2b0f      	cmp	r3, #15
 80101ac:	d916      	bls.n	80101dc <UART_SetConfig+0xb28>
 80101ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101b4:	d212      	bcs.n	80101dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	f023 030f 	bic.w	r3, r3, #15
 80101be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80101c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c2:	085b      	lsrs	r3, r3, #1
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80101ce:	4313      	orrs	r3, r2
 80101d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80101d8:	60da      	str	r2, [r3, #12]
 80101da:	e0bc      	b.n	8010356 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80101dc:	2301      	movs	r3, #1
 80101de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80101e2:	e0b8      	b.n	8010356 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80101e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80101e8:	2b20      	cmp	r3, #32
 80101ea:	dc4b      	bgt.n	8010284 <UART_SetConfig+0xbd0>
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f2c0 8087 	blt.w	8010300 <UART_SetConfig+0xc4c>
 80101f2:	2b20      	cmp	r3, #32
 80101f4:	f200 8084 	bhi.w	8010300 <UART_SetConfig+0xc4c>
 80101f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010200 <UART_SetConfig+0xb4c>)
 80101fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101fe:	bf00      	nop
 8010200:	0801028b 	.word	0x0801028b
 8010204:	08010293 	.word	0x08010293
 8010208:	08010301 	.word	0x08010301
 801020c:	08010301 	.word	0x08010301
 8010210:	0801029b 	.word	0x0801029b
 8010214:	08010301 	.word	0x08010301
 8010218:	08010301 	.word	0x08010301
 801021c:	08010301 	.word	0x08010301
 8010220:	080102ab 	.word	0x080102ab
 8010224:	08010301 	.word	0x08010301
 8010228:	08010301 	.word	0x08010301
 801022c:	08010301 	.word	0x08010301
 8010230:	08010301 	.word	0x08010301
 8010234:	08010301 	.word	0x08010301
 8010238:	08010301 	.word	0x08010301
 801023c:	08010301 	.word	0x08010301
 8010240:	080102bb 	.word	0x080102bb
 8010244:	08010301 	.word	0x08010301
 8010248:	08010301 	.word	0x08010301
 801024c:	08010301 	.word	0x08010301
 8010250:	08010301 	.word	0x08010301
 8010254:	08010301 	.word	0x08010301
 8010258:	08010301 	.word	0x08010301
 801025c:	08010301 	.word	0x08010301
 8010260:	08010301 	.word	0x08010301
 8010264:	08010301 	.word	0x08010301
 8010268:	08010301 	.word	0x08010301
 801026c:	08010301 	.word	0x08010301
 8010270:	08010301 	.word	0x08010301
 8010274:	08010301 	.word	0x08010301
 8010278:	08010301 	.word	0x08010301
 801027c:	08010301 	.word	0x08010301
 8010280:	080102f3 	.word	0x080102f3
 8010284:	2b40      	cmp	r3, #64	@ 0x40
 8010286:	d037      	beq.n	80102f8 <UART_SetConfig+0xc44>
 8010288:	e03a      	b.n	8010300 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801028a:	f7f9 fcb3 	bl	8009bf4 <HAL_RCC_GetPCLK1Freq>
 801028e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010290:	e03c      	b.n	801030c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010292:	f7f9 fcc5 	bl	8009c20 <HAL_RCC_GetPCLK2Freq>
 8010296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010298:	e038      	b.n	801030c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801029a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fb fb5c 	bl	800b95c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102a8:	e030      	b.n	801030c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102aa:	f107 0318 	add.w	r3, r7, #24
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fb fca8 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102b8:	e028      	b.n	801030c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102ba:	4b09      	ldr	r3, [pc, #36]	@ (80102e0 <UART_SetConfig+0xc2c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f003 0320 	and.w	r3, r3, #32
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d012      	beq.n	80102ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102c6:	4b06      	ldr	r3, [pc, #24]	@ (80102e0 <UART_SetConfig+0xc2c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	08db      	lsrs	r3, r3, #3
 80102cc:	f003 0303 	and.w	r3, r3, #3
 80102d0:	4a04      	ldr	r2, [pc, #16]	@ (80102e4 <UART_SetConfig+0xc30>)
 80102d2:	fa22 f303 	lsr.w	r3, r2, r3
 80102d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80102d8:	e018      	b.n	801030c <UART_SetConfig+0xc58>
 80102da:	bf00      	nop
 80102dc:	0801dbfc 	.word	0x0801dbfc
 80102e0:	58024400 	.word	0x58024400
 80102e4:	03d09000 	.word	0x03d09000
 80102e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80102ec:	4b24      	ldr	r3, [pc, #144]	@ (8010380 <UART_SetConfig+0xccc>)
 80102ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f0:	e00c      	b.n	801030c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102f2:	4b24      	ldr	r3, [pc, #144]	@ (8010384 <UART_SetConfig+0xcd0>)
 80102f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f6:	e009      	b.n	801030c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80102fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102fe:	e005      	b.n	801030c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010300:	2300      	movs	r3, #0
 8010302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801030a:	bf00      	nop
    }

    if (pclk != 0U)
 801030c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801030e:	2b00      	cmp	r3, #0
 8010310:	d021      	beq.n	8010356 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010316:	4a1c      	ldr	r2, [pc, #112]	@ (8010388 <UART_SetConfig+0xcd4>)
 8010318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801031c:	461a      	mov	r2, r3
 801031e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010320:	fbb3 f2f2 	udiv	r2, r3, r2
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	085b      	lsrs	r3, r3, #1
 801032a:	441a      	add	r2, r3
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	fbb2 f3f3 	udiv	r3, r2, r3
 8010334:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010338:	2b0f      	cmp	r3, #15
 801033a:	d909      	bls.n	8010350 <UART_SetConfig+0xc9c>
 801033c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010342:	d205      	bcs.n	8010350 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010346:	b29a      	uxth	r2, r3
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	60da      	str	r2, [r3, #12]
 801034e:	e002      	b.n	8010356 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010350:	2301      	movs	r3, #1
 8010352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	2201      	movs	r2, #1
 801035a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	2201      	movs	r2, #1
 8010362:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2200      	movs	r2, #0
 801036a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	2200      	movs	r2, #0
 8010370:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010372:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010376:	4618      	mov	r0, r3
 8010378:	3748      	adds	r7, #72	@ 0x48
 801037a:	46bd      	mov	sp, r7
 801037c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010380:	03d09000 	.word	0x03d09000
 8010384:	003d0900 	.word	0x003d0900
 8010388:	0801dbfc 	.word	0x0801dbfc

0801038c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801038c:	b480      	push	{r7}
 801038e:	b083      	sub	sp, #12
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010398:	f003 0308 	and.w	r3, r3, #8
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00a      	beq.n	80103b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	430a      	orrs	r2, r1
 80103b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ba:	f003 0301 	and.w	r3, r3, #1
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00a      	beq.n	80103d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	430a      	orrs	r2, r1
 80103d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103dc:	f003 0302 	and.w	r3, r3, #2
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00a      	beq.n	80103fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	430a      	orrs	r2, r1
 80103f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103fe:	f003 0304 	and.w	r3, r3, #4
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00a      	beq.n	801041c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	430a      	orrs	r2, r1
 801041a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010420:	f003 0310 	and.w	r3, r3, #16
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00a      	beq.n	801043e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	430a      	orrs	r2, r1
 801043c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010442:	f003 0320 	and.w	r3, r3, #32
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00a      	beq.n	8010460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	430a      	orrs	r2, r1
 801045e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010468:	2b00      	cmp	r3, #0
 801046a:	d01a      	beq.n	80104a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	430a      	orrs	r2, r1
 8010480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801048a:	d10a      	bne.n	80104a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	430a      	orrs	r2, r1
 80104a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00a      	beq.n	80104c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	430a      	orrs	r2, r1
 80104c2:	605a      	str	r2, [r3, #4]
  }
}
 80104c4:	bf00      	nop
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b098      	sub	sp, #96	@ 0x60
 80104d4:	af02      	add	r7, sp, #8
 80104d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80104e0:	f7f3 fc22 	bl	8003d28 <HAL_GetTick>
 80104e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f003 0308 	and.w	r3, r3, #8
 80104f0:	2b08      	cmp	r3, #8
 80104f2:	d12f      	bne.n	8010554 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80104f8:	9300      	str	r3, [sp, #0]
 80104fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104fc:	2200      	movs	r2, #0
 80104fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f88e 	bl	8010624 <UART_WaitOnFlagUntilTimeout>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d022      	beq.n	8010554 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010516:	e853 3f00 	ldrex	r3, [r3]
 801051a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801051c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801051e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010522:	653b      	str	r3, [r7, #80]	@ 0x50
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	461a      	mov	r2, r3
 801052a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801052c:	647b      	str	r3, [r7, #68]	@ 0x44
 801052e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010534:	e841 2300 	strex	r3, r2, [r1]
 8010538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801053a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1e6      	bne.n	801050e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2220      	movs	r2, #32
 8010544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010550:	2303      	movs	r3, #3
 8010552:	e063      	b.n	801061c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f003 0304 	and.w	r3, r3, #4
 801055e:	2b04      	cmp	r3, #4
 8010560:	d149      	bne.n	80105f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010562:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801056a:	2200      	movs	r2, #0
 801056c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f857 	bl	8010624 <UART_WaitOnFlagUntilTimeout>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d03c      	beq.n	80105f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010584:	e853 3f00 	ldrex	r3, [r3]
 8010588:	623b      	str	r3, [r7, #32]
   return(result);
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	461a      	mov	r2, r3
 8010598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801059a:	633b      	str	r3, [r7, #48]	@ 0x30
 801059c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801059e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80105a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105a2:	e841 2300 	strex	r3, r2, [r1]
 80105a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80105a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d1e6      	bne.n	801057c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	3308      	adds	r3, #8
 80105b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	e853 3f00 	ldrex	r3, [r3]
 80105bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f023 0301 	bic.w	r3, r3, #1
 80105c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	3308      	adds	r3, #8
 80105cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105ce:	61fa      	str	r2, [r7, #28]
 80105d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d2:	69b9      	ldr	r1, [r7, #24]
 80105d4:	69fa      	ldr	r2, [r7, #28]
 80105d6:	e841 2300 	strex	r3, r2, [r1]
 80105da:	617b      	str	r3, [r7, #20]
   return(result);
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1e5      	bne.n	80105ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2220      	movs	r2, #32
 80105e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105f2:	2303      	movs	r3, #3
 80105f4:	e012      	b.n	801061c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2220      	movs	r2, #32
 80105fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2220      	movs	r2, #32
 8010602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2200      	movs	r2, #0
 801060a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2200      	movs	r2, #0
 8010616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801061a:	2300      	movs	r3, #0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3758      	adds	r7, #88	@ 0x58
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	4613      	mov	r3, r2
 8010632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010634:	e04f      	b.n	80106d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801063c:	d04b      	beq.n	80106d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801063e:	f7f3 fb73 	bl	8003d28 <HAL_GetTick>
 8010642:	4602      	mov	r2, r0
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	1ad3      	subs	r3, r2, r3
 8010648:	69ba      	ldr	r2, [r7, #24]
 801064a:	429a      	cmp	r2, r3
 801064c:	d302      	bcc.n	8010654 <UART_WaitOnFlagUntilTimeout+0x30>
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d101      	bne.n	8010658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010654:	2303      	movs	r3, #3
 8010656:	e04e      	b.n	80106f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f003 0304 	and.w	r3, r3, #4
 8010662:	2b00      	cmp	r3, #0
 8010664:	d037      	beq.n	80106d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	2b80      	cmp	r3, #128	@ 0x80
 801066a:	d034      	beq.n	80106d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2b40      	cmp	r3, #64	@ 0x40
 8010670:	d031      	beq.n	80106d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	69db      	ldr	r3, [r3, #28]
 8010678:	f003 0308 	and.w	r3, r3, #8
 801067c:	2b08      	cmp	r3, #8
 801067e:	d110      	bne.n	80106a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2208      	movs	r2, #8
 8010686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	f000 f839 	bl	8010700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2208      	movs	r2, #8
 8010692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2200      	movs	r2, #0
 801069a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801069e:	2301      	movs	r3, #1
 80106a0:	e029      	b.n	80106f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	69db      	ldr	r3, [r3, #28]
 80106a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80106ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80106b0:	d111      	bne.n	80106d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80106ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106bc:	68f8      	ldr	r0, [r7, #12]
 80106be:	f000 f81f 	bl	8010700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2220      	movs	r2, #32
 80106c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2200      	movs	r2, #0
 80106ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80106d2:	2303      	movs	r3, #3
 80106d4:	e00f      	b.n	80106f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	69da      	ldr	r2, [r3, #28]
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	4013      	ands	r3, r2
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	bf0c      	ite	eq
 80106e6:	2301      	moveq	r3, #1
 80106e8:	2300      	movne	r3, #0
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	461a      	mov	r2, r3
 80106ee:	79fb      	ldrb	r3, [r7, #7]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d0a0      	beq.n	8010636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
	...

08010700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010700:	b480      	push	{r7}
 8010702:	b095      	sub	sp, #84	@ 0x54
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010710:	e853 3f00 	ldrex	r3, [r3]
 8010714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	461a      	mov	r2, r3
 8010724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010726:	643b      	str	r3, [r7, #64]	@ 0x40
 8010728:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801072c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801072e:	e841 2300 	strex	r3, r2, [r1]
 8010732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1e6      	bne.n	8010708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	3308      	adds	r3, #8
 8010740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010742:	6a3b      	ldr	r3, [r7, #32]
 8010744:	e853 3f00 	ldrex	r3, [r3]
 8010748:	61fb      	str	r3, [r7, #28]
   return(result);
 801074a:	69fa      	ldr	r2, [r7, #28]
 801074c:	4b1e      	ldr	r3, [pc, #120]	@ (80107c8 <UART_EndRxTransfer+0xc8>)
 801074e:	4013      	ands	r3, r2
 8010750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	3308      	adds	r3, #8
 8010758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801075a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801075c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010762:	e841 2300 	strex	r3, r2, [r1]
 8010766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1e5      	bne.n	801073a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010772:	2b01      	cmp	r3, #1
 8010774:	d118      	bne.n	80107a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	e853 3f00 	ldrex	r3, [r3]
 8010782:	60bb      	str	r3, [r7, #8]
   return(result);
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	f023 0310 	bic.w	r3, r3, #16
 801078a:	647b      	str	r3, [r7, #68]	@ 0x44
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	461a      	mov	r2, r3
 8010792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010794:	61bb      	str	r3, [r7, #24]
 8010796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010798:	6979      	ldr	r1, [r7, #20]
 801079a:	69ba      	ldr	r2, [r7, #24]
 801079c:	e841 2300 	strex	r3, r2, [r1]
 80107a0:	613b      	str	r3, [r7, #16]
   return(result);
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d1e6      	bne.n	8010776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2220      	movs	r2, #32
 80107ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80107bc:	bf00      	nop
 80107be:	3754      	adds	r7, #84	@ 0x54
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr
 80107c8:	effffffe 	.word	0xeffffffe

080107cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d101      	bne.n	80107e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80107de:	2302      	movs	r3, #2
 80107e0:	e027      	b.n	8010832 <HAL_UARTEx_DisableFifoMode+0x66>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2224      	movs	r2, #36	@ 0x24
 80107ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f022 0201 	bic.w	r2, r2, #1
 8010808:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2220      	movs	r2, #32
 8010824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3714      	adds	r7, #20
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr

0801083e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b084      	sub	sp, #16
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801084e:	2b01      	cmp	r3, #1
 8010850:	d101      	bne.n	8010856 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010852:	2302      	movs	r3, #2
 8010854:	e02d      	b.n	80108b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2224      	movs	r2, #36	@ 0x24
 8010862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f022 0201 	bic.w	r2, r2, #1
 801087c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	430a      	orrs	r2, r1
 8010890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 f850 	bl	8010938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2220      	movs	r2, #32
 80108a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b084      	sub	sp, #16
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80108ce:	2302      	movs	r3, #2
 80108d0:	e02d      	b.n	801092e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2201      	movs	r2, #1
 80108d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2224      	movs	r2, #36	@ 0x24
 80108de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f022 0201 	bic.w	r2, r2, #1
 80108f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	683a      	ldr	r2, [r7, #0]
 801090a:	430a      	orrs	r2, r1
 801090c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f812 	bl	8010938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2220      	movs	r2, #32
 8010920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010944:	2b00      	cmp	r3, #0
 8010946:	d108      	bne.n	801095a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2201      	movs	r2, #1
 8010954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010958:	e031      	b.n	80109be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801095a:	2310      	movs	r3, #16
 801095c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801095e:	2310      	movs	r3, #16
 8010960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	0e5b      	lsrs	r3, r3, #25
 801096a:	b2db      	uxtb	r3, r3
 801096c:	f003 0307 	and.w	r3, r3, #7
 8010970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	0f5b      	lsrs	r3, r3, #29
 801097a:	b2db      	uxtb	r3, r3
 801097c:	f003 0307 	and.w	r3, r3, #7
 8010980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010982:	7bbb      	ldrb	r3, [r7, #14]
 8010984:	7b3a      	ldrb	r2, [r7, #12]
 8010986:	4911      	ldr	r1, [pc, #68]	@ (80109cc <UARTEx_SetNbDataToProcess+0x94>)
 8010988:	5c8a      	ldrb	r2, [r1, r2]
 801098a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801098e:	7b3a      	ldrb	r2, [r7, #12]
 8010990:	490f      	ldr	r1, [pc, #60]	@ (80109d0 <UARTEx_SetNbDataToProcess+0x98>)
 8010992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010994:	fb93 f3f2 	sdiv	r3, r3, r2
 8010998:	b29a      	uxth	r2, r3
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
 80109a2:	7b7a      	ldrb	r2, [r7, #13]
 80109a4:	4909      	ldr	r1, [pc, #36]	@ (80109cc <UARTEx_SetNbDataToProcess+0x94>)
 80109a6:	5c8a      	ldrb	r2, [r1, r2]
 80109a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80109ac:	7b7a      	ldrb	r2, [r7, #13]
 80109ae:	4908      	ldr	r1, [pc, #32]	@ (80109d0 <UARTEx_SetNbDataToProcess+0x98>)
 80109b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80109be:	bf00      	nop
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	0801dc14 	.word	0x0801dc14
 80109d0:	0801dc1c 	.word	0x0801dc1c

080109d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80109d4:	b084      	sub	sp, #16
 80109d6:	b480      	push	{r7}
 80109d8:	b085      	sub	sp, #20
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	f107 001c 	add.w	r0, r7, #28
 80109e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80109ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80109ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80109ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80109f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80109f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80109f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80109f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80109f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80109fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	685a      	ldr	r2, [r3, #4]
 8010a06:	4b07      	ldr	r3, [pc, #28]	@ (8010a24 <SDMMC_Init+0x50>)
 8010a08:	4013      	ands	r3, r2
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3714      	adds	r7, #20
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	b004      	add	sp, #16
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	ffc02c00 	.word	0xffc02c00

08010a28 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	370c      	adds	r7, #12
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010a42:	b480      	push	{r7}
 8010a44:	b083      	sub	sp, #12
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
 8010a4a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010a56:	2300      	movs	r3, #0
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f043 0203 	orr.w	r2, r3, #3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8010a86:	b480      	push	{r7}
 8010a88:	b083      	sub	sp, #12
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f003 0303 	and.w	r3, r3, #3
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr
	...

08010aa4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b085      	sub	sp, #20
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010ac2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010ac8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010ace:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	68da      	ldr	r2, [r3, #12]
 8010ada:	4b06      	ldr	r3, [pc, #24]	@ (8010af4 <SDMMC_SendCommand+0x50>)
 8010adc:	4013      	ands	r3, r2
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	431a      	orrs	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr
 8010af4:	fffee0c0 	.word	0xfffee0c0

08010af8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	691b      	ldr	r3, [r3, #16]
 8010b04:	b2db      	uxtb	r3, r3
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b085      	sub	sp, #20
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	3314      	adds	r3, #20
 8010b20:	461a      	mov	r2, r3
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	4413      	add	r3, r2
 8010b26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3714      	adds	r7, #20
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	685a      	ldr	r2, [r3, #4]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010b5e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010b64:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010b6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	431a      	orrs	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010b82:	2300      	movs	r3, #0

}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b088      	sub	sp, #32
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010b9e:	2310      	movs	r3, #16
 8010ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bb2:	f107 0308 	add.w	r3, r7, #8
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff ff73 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bc2:	2110      	movs	r1, #16
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 fa5f 	bl	8011088 <SDMMC_GetCmdResp1>
 8010bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bcc:	69fb      	ldr	r3, [r7, #28]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3720      	adds	r7, #32
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b088      	sub	sp, #32
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
 8010bde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010be4:	2311      	movs	r3, #17
 8010be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bf8:	f107 0308 	add.w	r3, r7, #8
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7ff ff50 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c08:	2111      	movs	r1, #17
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 fa3c 	bl	8011088 <SDMMC_GetCmdResp1>
 8010c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c12:	69fb      	ldr	r3, [r7, #28]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3720      	adds	r7, #32
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b088      	sub	sp, #32
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010c2a:	2312      	movs	r3, #18
 8010c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c34:	2300      	movs	r3, #0
 8010c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c3e:	f107 0308 	add.w	r3, r7, #8
 8010c42:	4619      	mov	r1, r3
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7ff ff2d 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c4e:	2112      	movs	r1, #18
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 fa19 	bl	8011088 <SDMMC_GetCmdResp1>
 8010c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c58:	69fb      	ldr	r3, [r7, #28]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b088      	sub	sp, #32
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010c70:	2318      	movs	r3, #24
 8010c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c84:	f107 0308 	add.w	r3, r7, #8
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff ff0a 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c94:	2118      	movs	r1, #24
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 f9f6 	bl	8011088 <SDMMC_GetCmdResp1>
 8010c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c9e:	69fb      	ldr	r3, [r7, #28]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3720      	adds	r7, #32
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b088      	sub	sp, #32
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010cb6:	2319      	movs	r3, #25
 8010cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cca:	f107 0308 	add.w	r3, r7, #8
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f7ff fee7 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cda:	2119      	movs	r1, #25
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 f9d3 	bl	8011088 <SDMMC_GetCmdResp1>
 8010ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ce4:	69fb      	ldr	r3, [r7, #28]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3720      	adds	r7, #32
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
	...

08010cf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b088      	sub	sp, #32
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010cfc:	230c      	movs	r3, #12
 8010cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d06:	2300      	movs	r3, #0
 8010d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d0e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d28:	f107 0308 	add.w	r3, r7, #8
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7ff feb8 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010d34:	4a0b      	ldr	r2, [pc, #44]	@ (8010d64 <SDMMC_CmdStopTransfer+0x74>)
 8010d36:	210c      	movs	r1, #12
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 f9a5 	bl	8011088 <SDMMC_GetCmdResp1>
 8010d3e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010d4c:	69fb      	ldr	r3, [r7, #28]
 8010d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d52:	d101      	bne.n	8010d58 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010d54:	2300      	movs	r3, #0
 8010d56:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010d58:	69fb      	ldr	r3, [r7, #28]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3720      	adds	r7, #32
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	05f5e100 	.word	0x05f5e100

08010d68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b088      	sub	sp, #32
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010d76:	2307      	movs	r3, #7
 8010d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d8a:	f107 0308 	add.w	r3, r7, #8
 8010d8e:	4619      	mov	r1, r3
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff fe87 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d9a:	2107      	movs	r1, #7
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 f973 	bl	8011088 <SDMMC_GetCmdResp1>
 8010da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010da4:	69fb      	ldr	r3, [r7, #28]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3720      	adds	r7, #32
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b088      	sub	sp, #32
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010db6:	2300      	movs	r3, #0
 8010db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010dca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dcc:	f107 0308 	add.w	r3, r7, #8
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f7ff fe66 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 fb97 	bl	801150c <SDMMC_GetCmdError>
 8010dde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010de0:	69fb      	ldr	r3, [r7, #28]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3720      	adds	r7, #32
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b088      	sub	sp, #32
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010df2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010df8:	2308      	movs	r3, #8
 8010dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e02:	2300      	movs	r3, #0
 8010e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e0c:	f107 0308 	add.w	r3, r7, #8
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff fe46 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 fb29 	bl	8011470 <SDMMC_GetCmdResp7>
 8010e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e20:	69fb      	ldr	r3, [r7, #28]
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3720      	adds	r7, #32
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b088      	sub	sp, #32
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
 8010e32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010e38:	2337      	movs	r3, #55	@ 0x37
 8010e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e42:	2300      	movs	r3, #0
 8010e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e4c:	f107 0308 	add.w	r3, r7, #8
 8010e50:	4619      	mov	r1, r3
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7ff fe26 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e5c:	2137      	movs	r1, #55	@ 0x37
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 f912 	bl	8011088 <SDMMC_GetCmdResp1>
 8010e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e66:	69fb      	ldr	r3, [r7, #28]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3720      	adds	r7, #32
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b088      	sub	sp, #32
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010e7e:	2329      	movs	r3, #41	@ 0x29
 8010e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e92:	f107 0308 	add.w	r3, r7, #8
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fe03 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fa2e 	bl	8011300 <SDMMC_GetCmdResp3>
 8010ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ea6:	69fb      	ldr	r3, [r7, #28]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3720      	adds	r7, #32
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010ebe:	2306      	movs	r3, #6
 8010ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ed2:	f107 0308 	add.w	r3, r7, #8
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7ff fde3 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ee2:	2106      	movs	r1, #6
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 f8cf 	bl	8011088 <SDMMC_GetCmdResp1>
 8010eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010eec:	69fb      	ldr	r3, [r7, #28]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3720      	adds	r7, #32
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b088      	sub	sp, #32
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010efe:	2300      	movs	r3, #0
 8010f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010f02:	2333      	movs	r3, #51	@ 0x33
 8010f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010f14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f16:	f107 0308 	add.w	r3, r7, #8
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff fdc1 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f26:	2133      	movs	r1, #51	@ 0x33
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f8ad 	bl	8011088 <SDMMC_GetCmdResp1>
 8010f2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f30:	69fb      	ldr	r3, [r7, #28]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3720      	adds	r7, #32
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b088      	sub	sp, #32
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010f42:	2300      	movs	r3, #0
 8010f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010f46:	2302      	movs	r3, #2
 8010f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f50:	2300      	movs	r3, #0
 8010f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010f58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f5a:	f107 0308 	add.w	r3, r7, #8
 8010f5e:	4619      	mov	r1, r3
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f7ff fd9f 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 f980 	bl	801126c <SDMMC_GetCmdResp2>
 8010f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f6e:	69fb      	ldr	r3, [r7, #28]
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3720      	adds	r7, #32
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b088      	sub	sp, #32
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010f86:	2309      	movs	r3, #9
 8010f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010f8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f90:	2300      	movs	r3, #0
 8010f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010f98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f9a:	f107 0308 	add.w	r3, r7, #8
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7ff fd7f 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 f960 	bl	801126c <SDMMC_GetCmdResp2>
 8010fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fae:	69fb      	ldr	r3, [r7, #28]
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3720      	adds	r7, #32
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b088      	sub	sp, #32
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010fc6:	2303      	movs	r3, #3
 8010fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010fd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fda:	f107 0308 	add.w	r3, r7, #8
 8010fde:	4619      	mov	r1, r3
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7ff fd5f 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	2103      	movs	r1, #3
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 f9c8 	bl	8011380 <SDMMC_GetCmdResp6>
 8010ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ff2:	69fb      	ldr	r3, [r7, #28]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3720      	adds	r7, #32
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b088      	sub	sp, #32
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801100a:	230d      	movs	r3, #13
 801100c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801100e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011014:	2300      	movs	r3, #0
 8011016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801101c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801101e:	f107 0308 	add.w	r3, r7, #8
 8011022:	4619      	mov	r1, r3
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7ff fd3d 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801102a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801102e:	210d      	movs	r1, #13
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 f829 	bl	8011088 <SDMMC_GetCmdResp1>
 8011036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011038:	69fb      	ldr	r3, [r7, #28]
}
 801103a:	4618      	mov	r0, r3
 801103c:	3720      	adds	r7, #32
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b088      	sub	sp, #32
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801104a:	2300      	movs	r3, #0
 801104c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801104e:	230d      	movs	r3, #13
 8011050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011058:	2300      	movs	r3, #0
 801105a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011060:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011062:	f107 0308 	add.w	r3, r7, #8
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff fd1b 	bl	8010aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801106e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011072:	210d      	movs	r1, #13
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 f807 	bl	8011088 <SDMMC_GetCmdResp1>
 801107a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801107c:	69fb      	ldr	r3, [r7, #28]
}
 801107e:	4618      	mov	r0, r3
 8011080:	3720      	adds	r7, #32
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
	...

08011088 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	460b      	mov	r3, r1
 8011092:	607a      	str	r2, [r7, #4]
 8011094:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011096:	4b70      	ldr	r3, [pc, #448]	@ (8011258 <SDMMC_GetCmdResp1+0x1d0>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4a70      	ldr	r2, [pc, #448]	@ (801125c <SDMMC_GetCmdResp1+0x1d4>)
 801109c:	fba2 2303 	umull	r2, r3, r2, r3
 80110a0:	0a5a      	lsrs	r2, r3, #9
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	fb02 f303 	mul.w	r3, r2, r3
 80110a8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	1e5a      	subs	r2, r3, #1
 80110ae:	61fa      	str	r2, [r7, #28]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d102      	bne.n	80110ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110b8:	e0c9      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110be:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80110c0:	69ba      	ldr	r2, [r7, #24]
 80110c2:	4b67      	ldr	r3, [pc, #412]	@ (8011260 <SDMMC_GetCmdResp1+0x1d8>)
 80110c4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d0ef      	beq.n	80110aa <SDMMC_GetCmdResp1+0x22>
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1ea      	bne.n	80110aa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110d8:	f003 0304 	and.w	r3, r3, #4
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d004      	beq.n	80110ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2204      	movs	r2, #4
 80110e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110e6:	2304      	movs	r3, #4
 80110e8:	e0b1      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ee:	f003 0301 	and.w	r3, r3, #1
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d004      	beq.n	8011100 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2201      	movs	r2, #1
 80110fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110fc:	2301      	movs	r3, #1
 80110fe:	e0a6      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4a58      	ldr	r2, [pc, #352]	@ (8011264 <SDMMC_GetCmdResp1+0x1dc>)
 8011104:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f7ff fcf6 	bl	8010af8 <SDMMC_GetCommandResponse>
 801110c:	4603      	mov	r3, r0
 801110e:	461a      	mov	r2, r3
 8011110:	7afb      	ldrb	r3, [r7, #11]
 8011112:	4293      	cmp	r3, r2
 8011114:	d001      	beq.n	801111a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011116:	2301      	movs	r3, #1
 8011118:	e099      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801111a:	2100      	movs	r1, #0
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f7ff fcf8 	bl	8010b12 <SDMMC_GetResponse>
 8011122:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011124:	697a      	ldr	r2, [r7, #20]
 8011126:	4b50      	ldr	r3, [pc, #320]	@ (8011268 <SDMMC_GetCmdResp1+0x1e0>)
 8011128:	4013      	ands	r3, r2
 801112a:	2b00      	cmp	r3, #0
 801112c:	d101      	bne.n	8011132 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801112e:	2300      	movs	r3, #0
 8011130:	e08d      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2b00      	cmp	r3, #0
 8011136:	da02      	bge.n	801113e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011138:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801113c:	e087      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011144:	2b00      	cmp	r3, #0
 8011146:	d001      	beq.n	801114c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011148:	2340      	movs	r3, #64	@ 0x40
 801114a:	e080      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011156:	2380      	movs	r3, #128	@ 0x80
 8011158:	e079      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011168:	e071      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011178:	e069      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011188:	e061      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011194:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011198:	e059      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d002      	beq.n	80111aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80111a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80111a8:	e051      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d002      	beq.n	80111ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80111b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80111b8:	e049      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d002      	beq.n	80111ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80111c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80111c8:	e041      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80111d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111d8:	e039      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80111e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80111e8:	e031      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80111f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80111f8:	e029      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011204:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011208:	e021      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011214:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011218:	e019      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011224:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011228:	e011      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011234:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011238:	e009      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	f003 0308 	and.w	r3, r3, #8
 8011240:	2b00      	cmp	r3, #0
 8011242:	d002      	beq.n	801124a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011244:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011248:	e001      	b.n	801124e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801124a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801124e:	4618      	mov	r0, r3
 8011250:	3720      	adds	r7, #32
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	24000000 	.word	0x24000000
 801125c:	10624dd3 	.word	0x10624dd3
 8011260:	00200045 	.word	0x00200045
 8011264:	002000c5 	.word	0x002000c5
 8011268:	fdffe008 	.word	0xfdffe008

0801126c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011274:	4b1f      	ldr	r3, [pc, #124]	@ (80112f4 <SDMMC_GetCmdResp2+0x88>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a1f      	ldr	r2, [pc, #124]	@ (80112f8 <SDMMC_GetCmdResp2+0x8c>)
 801127a:	fba2 2303 	umull	r2, r3, r2, r3
 801127e:	0a5b      	lsrs	r3, r3, #9
 8011280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011284:	fb02 f303 	mul.w	r3, r2, r3
 8011288:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	1e5a      	subs	r2, r3, #1
 801128e:	60fa      	str	r2, [r7, #12]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d102      	bne.n	801129a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011294:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011298:	e026      	b.n	80112e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801129e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d0ef      	beq.n	801128a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d1ea      	bne.n	801128a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112b8:	f003 0304 	and.w	r3, r3, #4
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d004      	beq.n	80112ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2204      	movs	r2, #4
 80112c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112c6:	2304      	movs	r3, #4
 80112c8:	e00e      	b.n	80112e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112ce:	f003 0301 	and.w	r3, r3, #1
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d004      	beq.n	80112e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2201      	movs	r2, #1
 80112da:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112dc:	2301      	movs	r3, #1
 80112de:	e003      	b.n	80112e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4a06      	ldr	r2, [pc, #24]	@ (80112fc <SDMMC_GetCmdResp2+0x90>)
 80112e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3714      	adds	r7, #20
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr
 80112f4:	24000000 	.word	0x24000000
 80112f8:	10624dd3 	.word	0x10624dd3
 80112fc:	002000c5 	.word	0x002000c5

08011300 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011308:	4b1a      	ldr	r3, [pc, #104]	@ (8011374 <SDMMC_GetCmdResp3+0x74>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a1a      	ldr	r2, [pc, #104]	@ (8011378 <SDMMC_GetCmdResp3+0x78>)
 801130e:	fba2 2303 	umull	r2, r3, r2, r3
 8011312:	0a5b      	lsrs	r3, r3, #9
 8011314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011318:	fb02 f303 	mul.w	r3, r2, r3
 801131c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	1e5a      	subs	r2, r3, #1
 8011322:	60fa      	str	r2, [r7, #12]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d102      	bne.n	801132e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011328:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801132c:	e01b      	b.n	8011366 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011332:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0ef      	beq.n	801131e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011344:	2b00      	cmp	r3, #0
 8011346:	d1ea      	bne.n	801131e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801134c:	f003 0304 	and.w	r3, r3, #4
 8011350:	2b00      	cmp	r3, #0
 8011352:	d004      	beq.n	801135e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2204      	movs	r2, #4
 8011358:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801135a:	2304      	movs	r3, #4
 801135c:	e003      	b.n	8011366 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4a06      	ldr	r2, [pc, #24]	@ (801137c <SDMMC_GetCmdResp3+0x7c>)
 8011362:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3714      	adds	r7, #20
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	24000000 	.word	0x24000000
 8011378:	10624dd3 	.word	0x10624dd3
 801137c:	002000c5 	.word	0x002000c5

08011380 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b088      	sub	sp, #32
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	460b      	mov	r3, r1
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801138e:	4b35      	ldr	r3, [pc, #212]	@ (8011464 <SDMMC_GetCmdResp6+0xe4>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a35      	ldr	r2, [pc, #212]	@ (8011468 <SDMMC_GetCmdResp6+0xe8>)
 8011394:	fba2 2303 	umull	r2, r3, r2, r3
 8011398:	0a5b      	lsrs	r3, r3, #9
 801139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801139e:	fb02 f303 	mul.w	r3, r2, r3
 80113a2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	1e5a      	subs	r2, r3, #1
 80113a8:	61fa      	str	r2, [r7, #28]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d102      	bne.n	80113b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80113b2:	e052      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113b8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d0ef      	beq.n	80113a4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1ea      	bne.n	80113a4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113d2:	f003 0304 	and.w	r3, r3, #4
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d004      	beq.n	80113e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2204      	movs	r2, #4
 80113de:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113e0:	2304      	movs	r3, #4
 80113e2:	e03a      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113e8:	f003 0301 	and.w	r3, r3, #1
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d004      	beq.n	80113fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2201      	movs	r2, #1
 80113f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113f6:	2301      	movs	r3, #1
 80113f8:	e02f      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f7ff fb7c 	bl	8010af8 <SDMMC_GetCommandResponse>
 8011400:	4603      	mov	r3, r0
 8011402:	461a      	mov	r2, r3
 8011404:	7afb      	ldrb	r3, [r7, #11]
 8011406:	4293      	cmp	r3, r2
 8011408:	d001      	beq.n	801140e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801140a:	2301      	movs	r3, #1
 801140c:	e025      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	4a16      	ldr	r2, [pc, #88]	@ (801146c <SDMMC_GetCmdResp6+0xec>)
 8011412:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011414:	2100      	movs	r1, #0
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f7ff fb7b 	bl	8010b12 <SDMMC_GetResponse>
 801141c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011424:	2b00      	cmp	r3, #0
 8011426:	d106      	bne.n	8011436 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	0c1b      	lsrs	r3, r3, #16
 801142c:	b29a      	uxth	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011432:	2300      	movs	r3, #0
 8011434:	e011      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801143c:	2b00      	cmp	r3, #0
 801143e:	d002      	beq.n	8011446 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011444:	e009      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801144c:	2b00      	cmp	r3, #0
 801144e:	d002      	beq.n	8011456 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011454:	e001      	b.n	801145a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801145a:	4618      	mov	r0, r3
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	24000000 	.word	0x24000000
 8011468:	10624dd3 	.word	0x10624dd3
 801146c:	002000c5 	.word	0x002000c5

08011470 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011470:	b480      	push	{r7}
 8011472:	b085      	sub	sp, #20
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011478:	4b22      	ldr	r3, [pc, #136]	@ (8011504 <SDMMC_GetCmdResp7+0x94>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a22      	ldr	r2, [pc, #136]	@ (8011508 <SDMMC_GetCmdResp7+0x98>)
 801147e:	fba2 2303 	umull	r2, r3, r2, r3
 8011482:	0a5b      	lsrs	r3, r3, #9
 8011484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011488:	fb02 f303 	mul.w	r3, r2, r3
 801148c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	1e5a      	subs	r2, r3, #1
 8011492:	60fa      	str	r2, [r7, #12]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d102      	bne.n	801149e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011498:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801149c:	e02c      	b.n	80114f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d0ef      	beq.n	801148e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d1ea      	bne.n	801148e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114bc:	f003 0304 	and.w	r3, r3, #4
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d004      	beq.n	80114ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2204      	movs	r2, #4
 80114c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114ca:	2304      	movs	r3, #4
 80114cc:	e014      	b.n	80114f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d004      	beq.n	80114e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2201      	movs	r2, #1
 80114de:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114e0:	2301      	movs	r3, #1
 80114e2:	e009      	b.n	80114f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d002      	beq.n	80114f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2240      	movs	r2, #64	@ 0x40
 80114f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80114f6:	2300      	movs	r3, #0

}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr
 8011504:	24000000 	.word	0x24000000
 8011508:	10624dd3 	.word	0x10624dd3

0801150c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011514:	4b11      	ldr	r3, [pc, #68]	@ (801155c <SDMMC_GetCmdError+0x50>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4a11      	ldr	r2, [pc, #68]	@ (8011560 <SDMMC_GetCmdError+0x54>)
 801151a:	fba2 2303 	umull	r2, r3, r2, r3
 801151e:	0a5b      	lsrs	r3, r3, #9
 8011520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011524:	fb02 f303 	mul.w	r3, r2, r3
 8011528:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	1e5a      	subs	r2, r3, #1
 801152e:	60fa      	str	r2, [r7, #12]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d102      	bne.n	801153a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011534:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011538:	e009      	b.n	801154e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011542:	2b00      	cmp	r3, #0
 8011544:	d0f1      	beq.n	801152a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4a06      	ldr	r2, [pc, #24]	@ (8011564 <SDMMC_GetCmdError+0x58>)
 801154a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	24000000 	.word	0x24000000
 8011560:	10624dd3 	.word	0x10624dd3
 8011564:	002000c5 	.word	0x002000c5

08011568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011568:	b084      	sub	sp, #16
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	f107 001c 	add.w	r0, r7, #28
 8011576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801157a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801157e:	2b01      	cmp	r3, #1
 8011580:	d121      	bne.n	80115c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011586:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	68da      	ldr	r2, [r3, #12]
 8011592:	4b2c      	ldr	r3, [pc, #176]	@ (8011644 <USB_CoreInit+0xdc>)
 8011594:	4013      	ands	r3, r2
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80115a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d105      	bne.n	80115ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 fdc6 	bl	801214c <USB_CoreReset>
 80115c0:	4603      	mov	r3, r0
 80115c2:	73fb      	strb	r3, [r7, #15]
 80115c4:	e01b      	b.n	80115fe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fdba 	bl	801214c <USB_CoreReset>
 80115d8:	4603      	mov	r3, r0
 80115da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80115dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d106      	bne.n	80115f2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80115f0:	e005      	b.n	80115fe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80115fe:	7fbb      	ldrb	r3, [r7, #30]
 8011600:	2b01      	cmp	r3, #1
 8011602:	d116      	bne.n	8011632 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011608:	b29a      	uxth	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011612:	4b0d      	ldr	r3, [pc, #52]	@ (8011648 <USB_CoreInit+0xe0>)
 8011614:	4313      	orrs	r3, r2
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	f043 0206 	orr.w	r2, r3, #6
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	f043 0220 	orr.w	r2, r3, #32
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011632:	7bfb      	ldrb	r3, [r7, #15]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3710      	adds	r7, #16
 8011638:	46bd      	mov	sp, r7
 801163a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801163e:	b004      	add	sp, #16
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	ffbdffbf 	.word	0xffbdffbf
 8011648:	03ee0000 	.word	0x03ee0000

0801164c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801164c:	b480      	push	{r7}
 801164e:	b087      	sub	sp, #28
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	4613      	mov	r3, r2
 8011658:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801165a:	79fb      	ldrb	r3, [r7, #7]
 801165c:	2b02      	cmp	r3, #2
 801165e:	d165      	bne.n	801172c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	4a41      	ldr	r2, [pc, #260]	@ (8011768 <USB_SetTurnaroundTime+0x11c>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d906      	bls.n	8011676 <USB_SetTurnaroundTime+0x2a>
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	4a40      	ldr	r2, [pc, #256]	@ (801176c <USB_SetTurnaroundTime+0x120>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d202      	bcs.n	8011676 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011670:	230f      	movs	r3, #15
 8011672:	617b      	str	r3, [r7, #20]
 8011674:	e062      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	4a3c      	ldr	r2, [pc, #240]	@ (801176c <USB_SetTurnaroundTime+0x120>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d306      	bcc.n	801168c <USB_SetTurnaroundTime+0x40>
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	4a3b      	ldr	r2, [pc, #236]	@ (8011770 <USB_SetTurnaroundTime+0x124>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d202      	bcs.n	801168c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011686:	230e      	movs	r3, #14
 8011688:	617b      	str	r3, [r7, #20]
 801168a:	e057      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	4a38      	ldr	r2, [pc, #224]	@ (8011770 <USB_SetTurnaroundTime+0x124>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d306      	bcc.n	80116a2 <USB_SetTurnaroundTime+0x56>
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	4a37      	ldr	r2, [pc, #220]	@ (8011774 <USB_SetTurnaroundTime+0x128>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d202      	bcs.n	80116a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801169c:	230d      	movs	r3, #13
 801169e:	617b      	str	r3, [r7, #20]
 80116a0:	e04c      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	4a33      	ldr	r2, [pc, #204]	@ (8011774 <USB_SetTurnaroundTime+0x128>)
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d306      	bcc.n	80116b8 <USB_SetTurnaroundTime+0x6c>
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	4a32      	ldr	r2, [pc, #200]	@ (8011778 <USB_SetTurnaroundTime+0x12c>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d802      	bhi.n	80116b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80116b2:	230c      	movs	r3, #12
 80116b4:	617b      	str	r3, [r7, #20]
 80116b6:	e041      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	4a2f      	ldr	r2, [pc, #188]	@ (8011778 <USB_SetTurnaroundTime+0x12c>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	d906      	bls.n	80116ce <USB_SetTurnaroundTime+0x82>
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	4a2e      	ldr	r2, [pc, #184]	@ (801177c <USB_SetTurnaroundTime+0x130>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d802      	bhi.n	80116ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80116c8:	230b      	movs	r3, #11
 80116ca:	617b      	str	r3, [r7, #20]
 80116cc:	e036      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	4a2a      	ldr	r2, [pc, #168]	@ (801177c <USB_SetTurnaroundTime+0x130>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d906      	bls.n	80116e4 <USB_SetTurnaroundTime+0x98>
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	4a29      	ldr	r2, [pc, #164]	@ (8011780 <USB_SetTurnaroundTime+0x134>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d802      	bhi.n	80116e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80116de:	230a      	movs	r3, #10
 80116e0:	617b      	str	r3, [r7, #20]
 80116e2:	e02b      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	4a26      	ldr	r2, [pc, #152]	@ (8011780 <USB_SetTurnaroundTime+0x134>)
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d906      	bls.n	80116fa <USB_SetTurnaroundTime+0xae>
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	4a25      	ldr	r2, [pc, #148]	@ (8011784 <USB_SetTurnaroundTime+0x138>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d202      	bcs.n	80116fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80116f4:	2309      	movs	r3, #9
 80116f6:	617b      	str	r3, [r7, #20]
 80116f8:	e020      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	4a21      	ldr	r2, [pc, #132]	@ (8011784 <USB_SetTurnaroundTime+0x138>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d306      	bcc.n	8011710 <USB_SetTurnaroundTime+0xc4>
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4a20      	ldr	r2, [pc, #128]	@ (8011788 <USB_SetTurnaroundTime+0x13c>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d802      	bhi.n	8011710 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801170a:	2308      	movs	r3, #8
 801170c:	617b      	str	r3, [r7, #20]
 801170e:	e015      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	4a1d      	ldr	r2, [pc, #116]	@ (8011788 <USB_SetTurnaroundTime+0x13c>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d906      	bls.n	8011726 <USB_SetTurnaroundTime+0xda>
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	4a1c      	ldr	r2, [pc, #112]	@ (801178c <USB_SetTurnaroundTime+0x140>)
 801171c:	4293      	cmp	r3, r2
 801171e:	d202      	bcs.n	8011726 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011720:	2307      	movs	r3, #7
 8011722:	617b      	str	r3, [r7, #20]
 8011724:	e00a      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011726:	2306      	movs	r3, #6
 8011728:	617b      	str	r3, [r7, #20]
 801172a:	e007      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801172c:	79fb      	ldrb	r3, [r7, #7]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d102      	bne.n	8011738 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011732:	2309      	movs	r3, #9
 8011734:	617b      	str	r3, [r7, #20]
 8011736:	e001      	b.n	801173c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011738:	2309      	movs	r3, #9
 801173a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	68da      	ldr	r2, [r3, #12]
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	029b      	lsls	r3, r3, #10
 8011750:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011754:	431a      	orrs	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	371c      	adds	r7, #28
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr
 8011768:	00d8acbf 	.word	0x00d8acbf
 801176c:	00e4e1c0 	.word	0x00e4e1c0
 8011770:	00f42400 	.word	0x00f42400
 8011774:	01067380 	.word	0x01067380
 8011778:	011a499f 	.word	0x011a499f
 801177c:	01312cff 	.word	0x01312cff
 8011780:	014ca43f 	.word	0x014ca43f
 8011784:	016e3600 	.word	0x016e3600
 8011788:	01a6ab1f 	.word	0x01a6ab1f
 801178c:	01e84800 	.word	0x01e84800

08011790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	f023 0201 	bic.w	r2, r3, #1
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117a4:	2300      	movs	r3, #0
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	370c      	adds	r7, #12
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr

080117b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b084      	sub	sp, #16
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
 80117ba:	460b      	mov	r3, r1
 80117bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80117be:	2300      	movs	r3, #0
 80117c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80117ce:	78fb      	ldrb	r3, [r7, #3]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d115      	bne.n	8011800 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80117e0:	200a      	movs	r0, #10
 80117e2:	f7f2 faad 	bl	8003d40 <HAL_Delay>
      ms += 10U;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	330a      	adds	r3, #10
 80117ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f000 fc1d 	bl	801202c <USB_GetMode>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d01e      	beq.n	8011836 <USB_SetCurrentMode+0x84>
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80117fc:	d9f0      	bls.n	80117e0 <USB_SetCurrentMode+0x2e>
 80117fe:	e01a      	b.n	8011836 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011800:	78fb      	ldrb	r3, [r7, #3]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d115      	bne.n	8011832 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011812:	200a      	movs	r0, #10
 8011814:	f7f2 fa94 	bl	8003d40 <HAL_Delay>
      ms += 10U;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	330a      	adds	r3, #10
 801181c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 fc04 	bl	801202c <USB_GetMode>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d005      	beq.n	8011836 <USB_SetCurrentMode+0x84>
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2bc7      	cmp	r3, #199	@ 0xc7
 801182e:	d9f0      	bls.n	8011812 <USB_SetCurrentMode+0x60>
 8011830:	e001      	b.n	8011836 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011832:	2301      	movs	r3, #1
 8011834:	e005      	b.n	8011842 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2bc8      	cmp	r3, #200	@ 0xc8
 801183a:	d101      	bne.n	8011840 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801183c:	2301      	movs	r3, #1
 801183e:	e000      	b.n	8011842 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011840:	2300      	movs	r3, #0
}
 8011842:	4618      	mov	r0, r3
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
	...

0801184c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801184c:	b084      	sub	sp, #16
 801184e:	b580      	push	{r7, lr}
 8011850:	b086      	sub	sp, #24
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801185a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801185e:	2300      	movs	r3, #0
 8011860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011866:	2300      	movs	r3, #0
 8011868:	613b      	str	r3, [r7, #16]
 801186a:	e009      	b.n	8011880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	3340      	adds	r3, #64	@ 0x40
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	2200      	movs	r2, #0
 8011878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	3301      	adds	r3, #1
 801187e:	613b      	str	r3, [r7, #16]
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	2b0e      	cmp	r3, #14
 8011884:	d9f2      	bls.n	801186c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801188a:	2b00      	cmp	r3, #0
 801188c:	d11c      	bne.n	80118c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	68fa      	ldr	r2, [r7, #12]
 8011898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801189c:	f043 0302 	orr.w	r3, r3, #2
 80118a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	e005      	b.n	80118d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80118da:	461a      	mov	r2, r3
 80118dc:	2300      	movs	r3, #0
 80118de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80118e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d10d      	bne.n	8011904 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80118e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d104      	bne.n	80118fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80118f0:	2100      	movs	r1, #0
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f000 f968 	bl	8011bc8 <USB_SetDevSpeed>
 80118f8:	e008      	b.n	801190c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80118fa:	2101      	movs	r1, #1
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 f963 	bl	8011bc8 <USB_SetDevSpeed>
 8011902:	e003      	b.n	801190c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011904:	2103      	movs	r1, #3
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f95e 	bl	8011bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801190c:	2110      	movs	r1, #16
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 f8fa 	bl	8011b08 <USB_FlushTxFifo>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f000 f924 	bl	8011b6c <USB_FlushRxFifo>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801192a:	2301      	movs	r3, #1
 801192c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011934:	461a      	mov	r2, r3
 8011936:	2300      	movs	r3, #0
 8011938:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011940:	461a      	mov	r2, r3
 8011942:	2300      	movs	r3, #0
 8011944:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801194c:	461a      	mov	r2, r3
 801194e:	2300      	movs	r3, #0
 8011950:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011952:	2300      	movs	r3, #0
 8011954:	613b      	str	r3, [r7, #16]
 8011956:	e043      	b.n	80119e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	015a      	lsls	r2, r3, #5
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	4413      	add	r3, r2
 8011960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801196a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801196e:	d118      	bne.n	80119a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d10a      	bne.n	801198c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	015a      	lsls	r2, r3, #5
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	4413      	add	r3, r2
 801197e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011982:	461a      	mov	r2, r3
 8011984:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011988:	6013      	str	r3, [r2, #0]
 801198a:	e013      	b.n	80119b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	015a      	lsls	r2, r3, #5
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	4413      	add	r3, r2
 8011994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011998:	461a      	mov	r2, r3
 801199a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801199e:	6013      	str	r3, [r2, #0]
 80119a0:	e008      	b.n	80119b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	015a      	lsls	r2, r3, #5
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	4413      	add	r3, r2
 80119aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119ae:	461a      	mov	r2, r3
 80119b0:	2300      	movs	r3, #0
 80119b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	015a      	lsls	r2, r3, #5
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	4413      	add	r3, r2
 80119bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119c0:	461a      	mov	r2, r3
 80119c2:	2300      	movs	r3, #0
 80119c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	015a      	lsls	r2, r3, #5
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	4413      	add	r3, r2
 80119ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119d2:	461a      	mov	r2, r3
 80119d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80119d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	3301      	adds	r3, #1
 80119de:	613b      	str	r3, [r7, #16]
 80119e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80119e4:	461a      	mov	r2, r3
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d3b5      	bcc.n	8011958 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80119ec:	2300      	movs	r3, #0
 80119ee:	613b      	str	r3, [r7, #16]
 80119f0:	e043      	b.n	8011a7a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	015a      	lsls	r2, r3, #5
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	4413      	add	r3, r2
 80119fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a08:	d118      	bne.n	8011a3c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d10a      	bne.n	8011a26 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	015a      	lsls	r2, r3, #5
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	4413      	add	r3, r2
 8011a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011a22:	6013      	str	r3, [r2, #0]
 8011a24:	e013      	b.n	8011a4e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	015a      	lsls	r2, r3, #5
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a32:	461a      	mov	r2, r3
 8011a34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011a38:	6013      	str	r3, [r2, #0]
 8011a3a:	e008      	b.n	8011a4e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	015a      	lsls	r2, r3, #5
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	4413      	add	r3, r2
 8011a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a48:	461a      	mov	r2, r3
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	015a      	lsls	r2, r3, #5
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	4413      	add	r3, r2
 8011a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	015a      	lsls	r2, r3, #5
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	4413      	add	r3, r2
 8011a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011a72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	3301      	adds	r3, #1
 8011a78:	613b      	str	r3, [r7, #16]
 8011a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011a7e:	461a      	mov	r2, r3
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d3b5      	bcc.n	80119f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a8c:	691b      	ldr	r3, [r3, #16]
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011a98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011aa6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d105      	bne.n	8011abc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	699b      	ldr	r3, [r3, #24]
 8011ab4:	f043 0210 	orr.w	r2, r3, #16
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	699a      	ldr	r2, [r3, #24]
 8011ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8011b00 <USB_DevInit+0x2b4>)
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011ac8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d005      	beq.n	8011adc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	699b      	ldr	r3, [r3, #24]
 8011ad4:	f043 0208 	orr.w	r2, r3, #8
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011adc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d105      	bne.n	8011af0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	699a      	ldr	r2, [r3, #24]
 8011ae8:	4b06      	ldr	r3, [pc, #24]	@ (8011b04 <USB_DevInit+0x2b8>)
 8011aea:	4313      	orrs	r3, r2
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3718      	adds	r7, #24
 8011af6:	46bd      	mov	sp, r7
 8011af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011afc:	b004      	add	sp, #16
 8011afe:	4770      	bx	lr
 8011b00:	803c3800 	.word	0x803c3800
 8011b04:	40000004 	.word	0x40000004

08011b08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011b12:	2300      	movs	r3, #0
 8011b14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b22:	d901      	bls.n	8011b28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011b24:	2303      	movs	r3, #3
 8011b26:	e01b      	b.n	8011b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	691b      	ldr	r3, [r3, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	daf2      	bge.n	8011b16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011b30:	2300      	movs	r3, #0
 8011b32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	019b      	lsls	r3, r3, #6
 8011b38:	f043 0220 	orr.w	r2, r3, #32
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3301      	adds	r3, #1
 8011b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b4c:	d901      	bls.n	8011b52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	e006      	b.n	8011b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	691b      	ldr	r3, [r3, #16]
 8011b56:	f003 0320 	and.w	r3, r3, #32
 8011b5a:	2b20      	cmp	r3, #32
 8011b5c:	d0f0      	beq.n	8011b40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3714      	adds	r7, #20
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b085      	sub	sp, #20
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b74:	2300      	movs	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b84:	d901      	bls.n	8011b8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011b86:	2303      	movs	r3, #3
 8011b88:	e018      	b.n	8011bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	691b      	ldr	r3, [r3, #16]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	daf2      	bge.n	8011b78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011b92:	2300      	movs	r3, #0
 8011b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2210      	movs	r2, #16
 8011b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ba8:	d901      	bls.n	8011bae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011baa:	2303      	movs	r3, #3
 8011bac:	e006      	b.n	8011bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	691b      	ldr	r3, [r3, #16]
 8011bb2:	f003 0310 	and.w	r3, r3, #16
 8011bb6:	2b10      	cmp	r3, #16
 8011bb8:	d0f0      	beq.n	8011b9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3714      	adds	r7, #20
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	78fb      	ldrb	r3, [r7, #3]
 8011be2:	68f9      	ldr	r1, [r7, #12]
 8011be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011be8:	4313      	orrs	r3, r2
 8011bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3714      	adds	r7, #20
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b087      	sub	sp, #28
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	f003 0306 	and.w	r3, r3, #6
 8011c12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d102      	bne.n	8011c20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	75fb      	strb	r3, [r7, #23]
 8011c1e:	e00a      	b.n	8011c36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b02      	cmp	r3, #2
 8011c24:	d002      	beq.n	8011c2c <USB_GetDevSpeed+0x32>
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b06      	cmp	r3, #6
 8011c2a:	d102      	bne.n	8011c32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011c2c:	2302      	movs	r3, #2
 8011c2e:	75fb      	strb	r3, [r7, #23]
 8011c30:	e001      	b.n	8011c36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011c32:	230f      	movs	r3, #15
 8011c34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	371c      	adds	r7, #28
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b087      	sub	sp, #28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011c52:	2300      	movs	r3, #0
 8011c54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	785b      	ldrb	r3, [r3, #1]
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d14a      	bne.n	8011cf8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	015a      	lsls	r2, r3, #5
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c7a:	f040 8086 	bne.w	8011d8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	015a      	lsls	r2, r3, #5
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	4413      	add	r3, r2
 8011c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	7812      	ldrb	r2, [r2, #0]
 8011c92:	0151      	lsls	r1, r2, #5
 8011c94:	693a      	ldr	r2, [r7, #16]
 8011c96:	440a      	add	r2, r1
 8011c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011ca0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	015a      	lsls	r2, r3, #5
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	4413      	add	r3, r2
 8011cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	683a      	ldr	r2, [r7, #0]
 8011cb4:	7812      	ldrb	r2, [r2, #0]
 8011cb6:	0151      	lsls	r1, r2, #5
 8011cb8:	693a      	ldr	r2, [r7, #16]
 8011cba:	440a      	add	r2, r1
 8011cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011cc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011cc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d902      	bls.n	8011cdc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8011cda:	e056      	b.n	8011d8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	015a      	lsls	r2, r3, #5
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011cf4:	d0e7      	beq.n	8011cc6 <USB_EPStopXfer+0x82>
 8011cf6:	e048      	b.n	8011d8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	015a      	lsls	r2, r3, #5
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	4413      	add	r3, r2
 8011d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011d10:	d13b      	bne.n	8011d8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	015a      	lsls	r2, r3, #5
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	683a      	ldr	r2, [r7, #0]
 8011d24:	7812      	ldrb	r2, [r2, #0]
 8011d26:	0151      	lsls	r1, r2, #5
 8011d28:	693a      	ldr	r2, [r7, #16]
 8011d2a:	440a      	add	r2, r1
 8011d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011d34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	015a      	lsls	r2, r3, #5
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	7812      	ldrb	r2, [r2, #0]
 8011d4a:	0151      	lsls	r1, r2, #5
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	440a      	add	r2, r1
 8011d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d902      	bls.n	8011d70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8011d6e:	e00c      	b.n	8011d8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	015a      	lsls	r2, r3, #5
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	4413      	add	r3, r2
 8011d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011d88:	d0e7      	beq.n	8011d5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	371c      	adds	r7, #28
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b089      	sub	sp, #36	@ 0x24
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	4611      	mov	r1, r2
 8011da4:	461a      	mov	r2, r3
 8011da6:	460b      	mov	r3, r1
 8011da8:	71fb      	strb	r3, [r7, #7]
 8011daa:	4613      	mov	r3, r2
 8011dac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011db6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d123      	bne.n	8011e06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011dbe:	88bb      	ldrh	r3, [r7, #4]
 8011dc0:	3303      	adds	r3, #3
 8011dc2:	089b      	lsrs	r3, r3, #2
 8011dc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	61bb      	str	r3, [r7, #24]
 8011dca:	e018      	b.n	8011dfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011dcc:	79fb      	ldrb	r3, [r7, #7]
 8011dce:	031a      	lsls	r2, r3, #12
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011dd8:	461a      	mov	r2, r3
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011de0:	69fb      	ldr	r3, [r7, #28]
 8011de2:	3301      	adds	r3, #1
 8011de4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	3301      	adds	r3, #1
 8011dea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	3301      	adds	r3, #1
 8011df0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	3301      	adds	r3, #1
 8011df6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	61bb      	str	r3, [r7, #24]
 8011dfe:	69ba      	ldr	r2, [r7, #24]
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d3e2      	bcc.n	8011dcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3724      	adds	r7, #36	@ 0x24
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b08b      	sub	sp, #44	@ 0x2c
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	4613      	mov	r3, r2
 8011e20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011e2a:	88fb      	ldrh	r3, [r7, #6]
 8011e2c:	089b      	lsrs	r3, r3, #2
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011e32:	88fb      	ldrh	r3, [r7, #6]
 8011e34:	f003 0303 	and.w	r3, r3, #3
 8011e38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	623b      	str	r3, [r7, #32]
 8011e3e:	e014      	b.n	8011e6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011e40:	69bb      	ldr	r3, [r7, #24]
 8011e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4e:	3301      	adds	r3, #1
 8011e50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e54:	3301      	adds	r3, #1
 8011e56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e60:	3301      	adds	r3, #1
 8011e62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011e64:	6a3b      	ldr	r3, [r7, #32]
 8011e66:	3301      	adds	r3, #1
 8011e68:	623b      	str	r3, [r7, #32]
 8011e6a:	6a3a      	ldr	r2, [r7, #32]
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d3e6      	bcc.n	8011e40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011e72:	8bfb      	ldrh	r3, [r7, #30]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d01e      	beq.n	8011eb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e82:	461a      	mov	r2, r3
 8011e84:	f107 0310 	add.w	r3, r7, #16
 8011e88:	6812      	ldr	r2, [r2, #0]
 8011e8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011e8c:	693a      	ldr	r2, [r7, #16]
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	fa22 f303 	lsr.w	r3, r2, r3
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e9c:	701a      	strb	r2, [r3, #0]
      i++;
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	623b      	str	r3, [r7, #32]
      pDest++;
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011eaa:	8bfb      	ldrh	r3, [r7, #30]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011eb0:	8bfb      	ldrh	r3, [r7, #30]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1ea      	bne.n	8011e8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	372c      	adds	r7, #44	@ 0x2c
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011ede:	f023 0303 	bic.w	r3, r3, #3
 8011ee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	68fa      	ldr	r2, [r7, #12]
 8011eee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011ef2:	f043 0302 	orr.w	r3, r3, #2
 8011ef6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3714      	adds	r7, #20
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr

08011f06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b085      	sub	sp, #20
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	695b      	ldr	r3, [r3, #20]
 8011f12:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	699b      	ldr	r3, [r3, #24]
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3714      	adds	r7, #20
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr

08011f2c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b085      	sub	sp, #20
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f3e:	699b      	ldr	r3, [r3, #24]
 8011f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f48:	69db      	ldr	r3, [r3, #28]
 8011f4a:	68ba      	ldr	r2, [r7, #8]
 8011f4c:	4013      	ands	r3, r2
 8011f4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	0c1b      	lsrs	r3, r3, #16
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b085      	sub	sp, #20
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f72:	699b      	ldr	r3, [r3, #24]
 8011f74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f7c:	69db      	ldr	r3, [r3, #28]
 8011f7e:	68ba      	ldr	r2, [r7, #8]
 8011f80:	4013      	ands	r3, r2
 8011f82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	b29b      	uxth	r3, r3
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3714      	adds	r7, #20
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b085      	sub	sp, #20
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011fa4:	78fb      	ldrb	r3, [r7, #3]
 8011fa6:	015a      	lsls	r2, r3, #5
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	4413      	add	r3, r2
 8011fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fb0:	689b      	ldr	r3, [r3, #8]
 8011fb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fba:	695b      	ldr	r3, [r3, #20]
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	4013      	ands	r3, r2
 8011fc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011fc2:	68bb      	ldr	r3, [r7, #8]
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3714      	adds	r7, #20
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b087      	sub	sp, #28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	460b      	mov	r3, r1
 8011fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fe6:	691b      	ldr	r3, [r3, #16]
 8011fe8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ff2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011ff4:	78fb      	ldrb	r3, [r7, #3]
 8011ff6:	f003 030f 	and.w	r3, r3, #15
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8012000:	01db      	lsls	r3, r3, #7
 8012002:	b2db      	uxtb	r3, r3
 8012004:	693a      	ldr	r2, [r7, #16]
 8012006:	4313      	orrs	r3, r2
 8012008:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801200a:	78fb      	ldrb	r3, [r7, #3]
 801200c:	015a      	lsls	r2, r3, #5
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	4413      	add	r3, r2
 8012012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	693a      	ldr	r2, [r7, #16]
 801201a:	4013      	ands	r3, r2
 801201c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801201e:	68bb      	ldr	r3, [r7, #8]
}
 8012020:	4618      	mov	r0, r3
 8012022:	371c      	adds	r7, #28
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	695b      	ldr	r3, [r3, #20]
 8012038:	f003 0301 	and.w	r3, r3, #1
}
 801203c:	4618      	mov	r0, r3
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012048:	b480      	push	{r7}
 801204a:	b085      	sub	sp, #20
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012062:	4619      	mov	r1, r3
 8012064:	4b09      	ldr	r3, [pc, #36]	@ (801208c <USB_ActivateSetup+0x44>)
 8012066:	4013      	ands	r3, r2
 8012068:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	68fa      	ldr	r2, [r7, #12]
 8012074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801207c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801207e:	2300      	movs	r3, #0
}
 8012080:	4618      	mov	r0, r3
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr
 801208c:	fffff800 	.word	0xfffff800

08012090 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8012090:	b480      	push	{r7}
 8012092:	b087      	sub	sp, #28
 8012094:	af00      	add	r7, sp, #0
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	460b      	mov	r3, r1
 801209a:	607a      	str	r2, [r7, #4]
 801209c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	333c      	adds	r3, #60	@ 0x3c
 80120a6:	3304      	adds	r3, #4
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	4a26      	ldr	r2, [pc, #152]	@ (8012148 <USB_EP0_OutStart+0xb8>)
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d90a      	bls.n	80120ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80120c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80120c4:	d101      	bne.n	80120ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80120c6:	2300      	movs	r3, #0
 80120c8:	e037      	b.n	801213a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120d0:	461a      	mov	r2, r3
 80120d2:	2300      	movs	r3, #0
 80120d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	697a      	ldr	r2, [r7, #20]
 80120e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80120e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120f0:	691b      	ldr	r3, [r3, #16]
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120f8:	f043 0318 	orr.w	r3, r3, #24
 80120fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012104:	691b      	ldr	r3, [r3, #16]
 8012106:	697a      	ldr	r2, [r7, #20]
 8012108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801210c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012110:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012112:	7afb      	ldrb	r3, [r7, #11]
 8012114:	2b01      	cmp	r3, #1
 8012116:	d10f      	bne.n	8012138 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801211e:	461a      	mov	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	697a      	ldr	r2, [r7, #20]
 801212e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012132:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012136:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	371c      	adds	r7, #28
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	4f54300a 	.word	0x4f54300a

0801214c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012154:	2300      	movs	r3, #0
 8012156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	3301      	adds	r3, #1
 801215c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012164:	d901      	bls.n	801216a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012166:	2303      	movs	r3, #3
 8012168:	e01b      	b.n	80121a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	691b      	ldr	r3, [r3, #16]
 801216e:	2b00      	cmp	r3, #0
 8012170:	daf2      	bge.n	8012158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012172:	2300      	movs	r3, #0
 8012174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	691b      	ldr	r3, [r3, #16]
 801217a:	f043 0201 	orr.w	r2, r3, #1
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	3301      	adds	r3, #1
 8012186:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801218e:	d901      	bls.n	8012194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012190:	2303      	movs	r3, #3
 8012192:	e006      	b.n	80121a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	691b      	ldr	r3, [r3, #16]
 8012198:	f003 0301 	and.w	r3, r3, #1
 801219c:	2b01      	cmp	r3, #1
 801219e:	d0f0      	beq.n	8012182 <USB_CoreReset+0x36>

  return HAL_OK;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3714      	adds	r7, #20
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr
	...

080121b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80121b4:	4904      	ldr	r1, [pc, #16]	@ (80121c8 <MX_FATFS_Init+0x18>)
 80121b6:	4805      	ldr	r0, [pc, #20]	@ (80121cc <MX_FATFS_Init+0x1c>)
 80121b8:	f008 feac 	bl	801af14 <FATFS_LinkDriver>
 80121bc:	4603      	mov	r3, r0
 80121be:	461a      	mov	r2, r3
 80121c0:	4b03      	ldr	r3, [pc, #12]	@ (80121d0 <MX_FATFS_Init+0x20>)
 80121c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80121c4:	bf00      	nop
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	240084b4 	.word	0x240084b4
 80121cc:	0801dc24 	.word	0x0801dc24
 80121d0:	240084b0 	.word	0x240084b0

080121d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80121d4:	b480      	push	{r7}
 80121d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80121d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80121da:	4618      	mov	r0, r3
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80121ea:	2300      	movs	r3, #0
 80121ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80121ee:	f000 f879 	bl	80122e4 <BSP_SD_IsDetected>
 80121f2:	4603      	mov	r3, r0
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d001      	beq.n	80121fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80121f8:	2302      	movs	r3, #2
 80121fa:	e012      	b.n	8012222 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80121fc:	480b      	ldr	r0, [pc, #44]	@ (801222c <BSP_SD_Init+0x48>)
 80121fe:	f7fa f90b 	bl	800c418 <HAL_SD_Init>
 8012202:	4603      	mov	r3, r0
 8012204:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012206:	79fb      	ldrb	r3, [r7, #7]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d109      	bne.n	8012220 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801220c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8012210:	4806      	ldr	r0, [pc, #24]	@ (801222c <BSP_SD_Init+0x48>)
 8012212:	f7fa ffc7 	bl	800d1a4 <HAL_SD_ConfigWideBusOperation>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d001      	beq.n	8012220 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801221c:	2301      	movs	r3, #1
 801221e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012220:	79fb      	ldrb	r3, [r7, #7]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop
 801222c:	24000324 	.word	0x24000324

08012230 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b088      	sub	sp, #32
 8012234:	af02      	add	r7, sp, #8
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	607a      	str	r2, [r7, #4]
 801223c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801223e:	2300      	movs	r3, #0
 8012240:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	68f9      	ldr	r1, [r7, #12]
 801224c:	4806      	ldr	r0, [pc, #24]	@ (8012268 <BSP_SD_ReadBlocks+0x38>)
 801224e:	f7fa fa03 	bl	800c658 <HAL_SD_ReadBlocks>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d001      	beq.n	801225c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012258:	2301      	movs	r3, #1
 801225a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801225c:	7dfb      	ldrb	r3, [r7, #23]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	24000324 	.word	0x24000324

0801226c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af02      	add	r7, sp, #8
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
 8012278:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	68ba      	ldr	r2, [r7, #8]
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	4806      	ldr	r0, [pc, #24]	@ (80122a4 <BSP_SD_WriteBlocks+0x38>)
 801228a:	f7fa fb6f 	bl	800c96c <HAL_SD_WriteBlocks>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d001      	beq.n	8012298 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012294:	2301      	movs	r3, #1
 8012296:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012298:	7dfb      	ldrb	r3, [r7, #23]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	24000324 	.word	0x24000324

080122a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80122ac:	4805      	ldr	r0, [pc, #20]	@ (80122c4 <BSP_SD_GetCardState+0x1c>)
 80122ae:	f7fb f88b 	bl	800d3c8 <HAL_SD_GetCardState>
 80122b2:	4603      	mov	r3, r0
 80122b4:	2b04      	cmp	r3, #4
 80122b6:	bf14      	ite	ne
 80122b8:	2301      	movne	r3, #1
 80122ba:	2300      	moveq	r3, #0
 80122bc:	b2db      	uxtb	r3, r3
}
 80122be:	4618      	mov	r0, r3
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	24000324 	.word	0x24000324

080122c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80122d0:	6879      	ldr	r1, [r7, #4]
 80122d2:	4803      	ldr	r0, [pc, #12]	@ (80122e0 <BSP_SD_GetCardInfo+0x18>)
 80122d4:	f7fa ff3a 	bl	800d14c <HAL_SD_GetCardInfo>
}
 80122d8:	bf00      	nop
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	24000324 	.word	0x24000324

080122e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b083      	sub	sp, #12
 80122e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80122ea:	2301      	movs	r3, #1
 80122ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80122ee:	79fb      	ldrb	r3, [r7, #7]
 80122f0:	b2db      	uxtb	r3, r3
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	370c      	adds	r7, #12
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
	...

08012300 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801230a:	4b0b      	ldr	r3, [pc, #44]	@ (8012338 <SD_CheckStatus+0x38>)
 801230c:	2201      	movs	r2, #1
 801230e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012310:	f7ff ffca 	bl	80122a8 <BSP_SD_GetCardState>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d107      	bne.n	801232a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801231a:	4b07      	ldr	r3, [pc, #28]	@ (8012338 <SD_CheckStatus+0x38>)
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	b2db      	uxtb	r3, r3
 8012320:	f023 0301 	bic.w	r3, r3, #1
 8012324:	b2da      	uxtb	r2, r3
 8012326:	4b04      	ldr	r3, [pc, #16]	@ (8012338 <SD_CheckStatus+0x38>)
 8012328:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801232a:	4b03      	ldr	r3, [pc, #12]	@ (8012338 <SD_CheckStatus+0x38>)
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	b2db      	uxtb	r3, r3
}
 8012330:	4618      	mov	r0, r3
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	2400000d 	.word	0x2400000d

0801233c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	4603      	mov	r3, r0
 8012344:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012346:	4b0b      	ldr	r3, [pc, #44]	@ (8012374 <SD_initialize+0x38>)
 8012348:	2201      	movs	r2, #1
 801234a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801234c:	f7ff ff4a 	bl	80121e4 <BSP_SD_Init>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d107      	bne.n	8012366 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8012356:	79fb      	ldrb	r3, [r7, #7]
 8012358:	4618      	mov	r0, r3
 801235a:	f7ff ffd1 	bl	8012300 <SD_CheckStatus>
 801235e:	4603      	mov	r3, r0
 8012360:	461a      	mov	r2, r3
 8012362:	4b04      	ldr	r3, [pc, #16]	@ (8012374 <SD_initialize+0x38>)
 8012364:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012366:	4b03      	ldr	r3, [pc, #12]	@ (8012374 <SD_initialize+0x38>)
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	b2db      	uxtb	r3, r3
}
 801236c:	4618      	mov	r0, r3
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	2400000d 	.word	0x2400000d

08012378 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	4603      	mov	r3, r0
 8012380:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012382:	79fb      	ldrb	r3, [r7, #7]
 8012384:	4618      	mov	r0, r3
 8012386:	f7ff ffbb 	bl	8012300 <SD_CheckStatus>
 801238a:	4603      	mov	r3, r0
}
 801238c:	4618      	mov	r0, r3
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b086      	sub	sp, #24
 8012398:	af00      	add	r7, sp, #0
 801239a:	60b9      	str	r1, [r7, #8]
 801239c:	607a      	str	r2, [r7, #4]
 801239e:	603b      	str	r3, [r7, #0]
 80123a0:	4603      	mov	r3, r0
 80123a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80123a4:	2301      	movs	r3, #1
 80123a6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80123a8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ac:	683a      	ldr	r2, [r7, #0]
 80123ae:	6879      	ldr	r1, [r7, #4]
 80123b0:	68b8      	ldr	r0, [r7, #8]
 80123b2:	f7ff ff3d 	bl	8012230 <BSP_SD_ReadBlocks>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d107      	bne.n	80123cc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80123bc:	bf00      	nop
 80123be:	f7ff ff73 	bl	80122a8 <BSP_SD_GetCardState>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1fa      	bne.n	80123be <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3718      	adds	r7, #24
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b086      	sub	sp, #24
 80123da:	af00      	add	r7, sp, #0
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
 80123e0:	603b      	str	r3, [r7, #0]
 80123e2:	4603      	mov	r3, r0
 80123e4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80123e6:	2301      	movs	r3, #1
 80123e8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80123ea:	f04f 33ff 	mov.w	r3, #4294967295
 80123ee:	683a      	ldr	r2, [r7, #0]
 80123f0:	6879      	ldr	r1, [r7, #4]
 80123f2:	68b8      	ldr	r0, [r7, #8]
 80123f4:	f7ff ff3a 	bl	801226c <BSP_SD_WriteBlocks>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d107      	bne.n	801240e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80123fe:	bf00      	nop
 8012400:	f7ff ff52 	bl	80122a8 <BSP_SD_GetCardState>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1fa      	bne.n	8012400 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801240a:	2300      	movs	r3, #0
 801240c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801240e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012410:	4618      	mov	r0, r3
 8012412:	3718      	adds	r7, #24
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b08c      	sub	sp, #48	@ 0x30
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	603a      	str	r2, [r7, #0]
 8012422:	71fb      	strb	r3, [r7, #7]
 8012424:	460b      	mov	r3, r1
 8012426:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012428:	2301      	movs	r3, #1
 801242a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801242e:	4b25      	ldr	r3, [pc, #148]	@ (80124c4 <SD_ioctl+0xac>)
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	f003 0301 	and.w	r3, r3, #1
 8012438:	2b00      	cmp	r3, #0
 801243a:	d001      	beq.n	8012440 <SD_ioctl+0x28>
 801243c:	2303      	movs	r3, #3
 801243e:	e03c      	b.n	80124ba <SD_ioctl+0xa2>

  switch (cmd)
 8012440:	79bb      	ldrb	r3, [r7, #6]
 8012442:	2b03      	cmp	r3, #3
 8012444:	d834      	bhi.n	80124b0 <SD_ioctl+0x98>
 8012446:	a201      	add	r2, pc, #4	@ (adr r2, 801244c <SD_ioctl+0x34>)
 8012448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801244c:	0801245d 	.word	0x0801245d
 8012450:	08012465 	.word	0x08012465
 8012454:	0801247d 	.word	0x0801247d
 8012458:	08012497 	.word	0x08012497
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801245c:	2300      	movs	r3, #0
 801245e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012462:	e028      	b.n	80124b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012464:	f107 0308 	add.w	r3, r7, #8
 8012468:	4618      	mov	r0, r3
 801246a:	f7ff ff2d 	bl	80122c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801246e:	6a3a      	ldr	r2, [r7, #32]
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012474:	2300      	movs	r3, #0
 8012476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801247a:	e01c      	b.n	80124b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801247c:	f107 0308 	add.w	r3, r7, #8
 8012480:	4618      	mov	r0, r3
 8012482:	f7ff ff21 	bl	80122c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012488:	b29a      	uxth	r2, r3
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801248e:	2300      	movs	r3, #0
 8012490:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012494:	e00f      	b.n	80124b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012496:	f107 0308 	add.w	r3, r7, #8
 801249a:	4618      	mov	r0, r3
 801249c:	f7ff ff14 	bl	80122c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80124a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124a2:	0a5a      	lsrs	r2, r3, #9
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80124ae:	e002      	b.n	80124b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80124b0:	2304      	movs	r3, #4
 80124b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80124b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3730      	adds	r7, #48	@ 0x30
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop
 80124c4:	2400000d 	.word	0x2400000d

080124c8 <arm_abs_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_abs_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b08b      	sub	sp, #44	@ 0x2c
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80124d8:	e01e      	b.n	8012518 <arm_abs_q15+0x50>
  {
    /* C = |A| */

    /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination buffer. */
    in = *pSrc++;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	1c9a      	adds	r2, r3, #2
 80124de:	60fa      	str	r2, [r7, #12]
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	847b      	strh	r3, [r7, #34]	@ 0x22
#if defined (ARM_MATH_DSP)
    *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 80124e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	dc0c      	bgt.n	8012506 <arm_abs_q15+0x3e>
 80124ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80124f0:	2200      	movs	r2, #0
 80124f2:	61fa      	str	r2, [r7, #28]
 80124f4:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	69ba      	ldr	r2, [r7, #24]
 80124fa:	fad3 f312 	qsub16	r3, r3, r2
 80124fe:	617b      	str	r3, [r7, #20]
  return(result);
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	b21a      	sxth	r2, r3
 8012504:	e001      	b.n	801250a <arm_abs_q15+0x42>
 8012506:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	1c99      	adds	r1, r3, #2
 801250e:	60b9      	str	r1, [r7, #8]
 8012510:	801a      	strh	r2, [r3, #0]
#else
    *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
#endif

    /* Decrement loop counter */
    blkCnt--;
 8012512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012514:	3b01      	subs	r3, #1
 8012516:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8012518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801251a:	2b00      	cmp	r3, #0
 801251c:	d1dd      	bne.n	80124da <arm_abs_q15+0x12>
  }

}
 801251e:	bf00      	nop
 8012520:	bf00      	nop
 8012522:	372c      	adds	r7, #44	@ 0x2c
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <arm_dot_prod_q15>:
ARM_DSP_ATTRIBUTE void arm_dot_prod_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        uint32_t blockSize,
        q63_t * result)
{
 801252c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8012530:	b089      	sub	sp, #36	@ 0x24
 8012532:	af00      	add	r7, sp, #0
 8012534:	60f8      	str	r0, [r7, #12]
 8012536:	60b9      	str	r1, [r7, #8]
 8012538:	607a      	str	r2, [r7, #4]
 801253a:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        q63_t sum = 0;                                 /* Temporary return variable */
 801253c:	f04f 0200 	mov.w	r2, #0
 8012540:	f04f 0300 	mov.w	r3, #0
 8012544:	e9c7 2304 	strd	r2, r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801254c:	e01a      	b.n	8012584 <arm_dot_prod_q15+0x58>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	1c9a      	adds	r2, r3, #2
 8012552:	60fa      	str	r2, [r7, #12]
 8012554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012558:	4619      	mov	r1, r3
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	1c9a      	adds	r2, r3, #2
 801255e:	60ba      	str	r2, [r7, #8]
 8012560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012564:	fb01 f303 	mul.w	r3, r1, r3
 8012568:	17da      	asrs	r2, r3, #31
 801256a:	461c      	mov	r4, r3
 801256c:	4615      	mov	r5, r2
 801256e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012572:	eb12 0804 	adds.w	r8, r2, r4
 8012576:	eb43 0905 	adc.w	r9, r3, r5
 801257a:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 801257e:	69fb      	ldr	r3, [r7, #28]
 8012580:	3b01      	subs	r3, #1
 8012582:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1e1      	bne.n	801254e <arm_dot_prod_q15+0x22>
  }

  /* Store result in destination buffer in 34.30 format */
  *result = sum;
 801258a:	6839      	ldr	r1, [r7, #0]
 801258c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012590:	e9c1 2300 	strd	r2, r3, [r1]
}
 8012594:	bf00      	nop
 8012596:	3724      	adds	r7, #36	@ 0x24
 8012598:	46bd      	mov	sp, r7
 801259a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801259e:	4770      	bx	lr

080125a0 <arm_mult_q15>:
ARM_DSP_ATTRIBUTE void arm_mult_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        q15_t * pDst,
        uint32_t blockSize)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b089      	sub	sp, #36	@ 0x24
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	607a      	str	r2, [r7, #4]
 80125ac:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80125b2:	e01b      	b.n	80125ec <arm_mult_q15+0x4c>
  {
    /* C = A * B */

    /* Multiply inputs and store result in destination buffer. */
    *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	1c9a      	adds	r2, r3, #2
 80125b8:	60fa      	str	r2, [r7, #12]
 80125ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125be:	4619      	mov	r1, r3
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	1c9a      	adds	r2, r3, #2
 80125c4:	60ba      	str	r2, [r7, #8]
 80125c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125ca:	fb01 f303 	mul.w	r3, r1, r3
 80125ce:	13db      	asrs	r3, r3, #15
 80125d0:	61bb      	str	r3, [r7, #24]
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	f303 030f 	ssat	r3, #16, r3
 80125d8:	617b      	str	r3, [r7, #20]
 80125da:	6979      	ldr	r1, [r7, #20]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	1c9a      	adds	r2, r3, #2
 80125e0:	607a      	str	r2, [r7, #4]
 80125e2:	b20a      	sxth	r2, r1
 80125e4:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	3b01      	subs	r3, #1
 80125ea:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d1e0      	bne.n	80125b4 <arm_mult_q15+0x14>
  }

}
 80125f2:	bf00      	nop
 80125f4:	bf00      	nop
 80125f6:	3724      	adds	r7, #36	@ 0x24
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <arm_offset_q31>:
ARM_DSP_ATTRIBUTE void arm_offset_q31(
  const q31_t * pSrc,
        q31_t offset,
        q31_t * pDst,
        uint32_t blockSize)
{
 8012600:	b480      	push	{r7}
 8012602:	b089      	sub	sp, #36	@ 0x24
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012612:	e013      	b.n	801263c <arm_offset_q31+0x3c>
  {
    /* C = A + offset */

    /* Add offset and store result in destination buffer. */
#if defined (ARM_MATH_DSP)
    *pDst++ = __QADD(*pSrc++, offset);
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	1d1a      	adds	r2, r3, #4
 8012618:	60fa      	str	r2, [r7, #12]
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	1d19      	adds	r1, r3, #4
 8012620:	6079      	str	r1, [r7, #4]
 8012622:	61ba      	str	r2, [r7, #24]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	617a      	str	r2, [r7, #20]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012628:	69ba      	ldr	r2, [r7, #24]
 801262a:	6979      	ldr	r1, [r7, #20]
 801262c:	fa81 f282 	qadd	r2, r2, r1
 8012630:	613a      	str	r2, [r7, #16]
  return(result);
 8012632:	693a      	ldr	r2, [r7, #16]
 8012634:	601a      	str	r2, [r3, #0]
#else
    *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
#endif

    /* Decrement loop counter */
    blkCnt--;
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	3b01      	subs	r3, #1
 801263a:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d1e8      	bne.n	8012614 <arm_offset_q31+0x14>
  }

}
 8012642:	bf00      	nop
 8012644:	bf00      	nop
 8012646:	3724      	adds	r7, #36	@ 0x24
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <arm_scale_q15>:
  const q15_t *pSrc,
        q15_t scaleFract,
        int8_t shift,
        q15_t *pDst,
        uint32_t blockSize)
{
 8012650:	b480      	push	{r7}
 8012652:	b089      	sub	sp, #36	@ 0x24
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	607b      	str	r3, [r7, #4]
 801265a:	460b      	mov	r3, r1
 801265c:	817b      	strh	r3, [r7, #10]
 801265e:	4613      	mov	r3, r2
 8012660:	727b      	strb	r3, [r7, #9]
        uint32_t blkCnt;                               /* Loop counter */
        int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
 8012662:	7a7b      	ldrb	r3, [r7, #9]
 8012664:	f1c3 030f 	rsb	r3, r3, #15
 8012668:	b2db      	uxtb	r3, r3
 801266a:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801266e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012670:	e01b      	b.n	80126aa <arm_scale_q15+0x5a>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	1c9a      	adds	r2, r3, #2
 8012676:	60fa      	str	r2, [r7, #12]
 8012678:	f9b3 3000 	ldrsh.w	r3, [r3]
 801267c:	461a      	mov	r2, r3
 801267e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012682:	fb03 f202 	mul.w	r2, r3, r2
 8012686:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801268a:	fa42 f303 	asr.w	r3, r2, r3
 801268e:	617b      	str	r3, [r7, #20]
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	f303 030f 	ssat	r3, #16, r3
 8012696:	613b      	str	r3, [r7, #16]
 8012698:	6939      	ldr	r1, [r7, #16]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	1c9a      	adds	r2, r3, #2
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	b20a      	sxth	r2, r1
 80126a2:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	3b01      	subs	r3, #1
 80126a8:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1e0      	bne.n	8012672 <arm_scale_q15+0x22>
  }

}
 80126b0:	bf00      	nop
 80126b2:	bf00      	nop
 80126b4:	3724      	adds	r7, #36	@ 0x24
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr

080126be <arm_scale_q31>:
  const q31_t *pSrc,
        q31_t scaleFract,
        int8_t shift,
        q31_t *pDst,
        uint32_t blockSize)
{
 80126be:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80126c2:	b08f      	sub	sp, #60	@ 0x3c
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6278      	str	r0, [r7, #36]	@ 0x24
 80126c8:	6239      	str	r1, [r7, #32]
 80126ca:	61bb      	str	r3, [r7, #24]
 80126cc:	4613      	mov	r3, r2
 80126ce:	77fb      	strb	r3, [r7, #31]
        uint32_t blkCnt;                               /* Loop counter */
        q31_t in, out;                                 /* Temporary variables */
        int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
 80126d0:	7ffb      	ldrb	r3, [r7, #31]
 80126d2:	3301      	adds	r3, #1
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        int8_t sign = (kShift & 0x80);
 80126da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80126e2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80126e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80126e8:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  if (sign == 0U)
 80126ea:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d17b      	bne.n	80127ea <arm_scale_q31+0x12c>
  {
    while (blkCnt > 0U)
 80126f2:	e044      	b.n	801277e <arm_scale_q31+0xc0>
    {
      /* C = A * scale */

      /* Scale input and store result in destination buffer. */
      in = *pSrc++;
 80126f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f6:	1d1a      	adds	r2, r3, #4
 80126f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 80126fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012700:	17da      	asrs	r2, r3, #31
 8012702:	613b      	str	r3, [r7, #16]
 8012704:	617a      	str	r2, [r7, #20]
 8012706:	6a3b      	ldr	r3, [r7, #32]
 8012708:	17da      	asrs	r2, r3, #31
 801270a:	60bb      	str	r3, [r7, #8]
 801270c:	60fa      	str	r2, [r7, #12]
 801270e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8012712:	462b      	mov	r3, r5
 8012714:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8012718:	4652      	mov	r2, sl
 801271a:	fb02 f203 	mul.w	r2, r2, r3
 801271e:	465b      	mov	r3, fp
 8012720:	4621      	mov	r1, r4
 8012722:	fb01 f303 	mul.w	r3, r1, r3
 8012726:	4413      	add	r3, r2
 8012728:	4622      	mov	r2, r4
 801272a:	4651      	mov	r1, sl
 801272c:	fba2 8901 	umull	r8, r9, r2, r1
 8012730:	444b      	add	r3, r9
 8012732:	4699      	mov	r9, r3
 8012734:	f04f 0200 	mov.w	r2, #0
 8012738:	f04f 0300 	mov.w	r3, #0
 801273c:	464a      	mov	r2, r9
 801273e:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8012742:	4613      	mov	r3, r2
 8012744:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in << kShift;
 8012746:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801274a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801274c:	fa02 f303 	lsl.w	r3, r2, r3
 8012750:	633b      	str	r3, [r7, #48]	@ 0x30
      if (in != (out >> kShift))
 8012752:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8012756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012758:	fa42 f303 	asr.w	r3, r2, r3
 801275c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801275e:	429a      	cmp	r2, r3
 8012760:	d005      	beq.n	801276e <arm_scale_q31+0xb0>
          out = 0x7FFFFFFF ^ (in >> 31);
 8012762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012764:	17da      	asrs	r2, r3, #31
 8012766:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801276a:	4053      	eors	r3, r2
 801276c:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 801276e:	69bb      	ldr	r3, [r7, #24]
 8012770:	1d1a      	adds	r2, r3, #4
 8012772:	61ba      	str	r2, [r7, #24]
 8012774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012776:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 8012778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801277a:	3b01      	subs	r3, #1
 801277c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 801277e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012780:	2b00      	cmp	r3, #0
 8012782:	d1b7      	bne.n	80126f4 <arm_scale_q31+0x36>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8012784:	e034      	b.n	80127f0 <arm_scale_q31+0x132>
      in = *pSrc++;
 8012786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012788:	1d1a      	adds	r2, r3, #4
 801278a:	627a      	str	r2, [r7, #36]	@ 0x24
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 8012790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012792:	17da      	asrs	r2, r3, #31
 8012794:	469a      	mov	sl, r3
 8012796:	4693      	mov	fp, r2
 8012798:	6a3b      	ldr	r3, [r7, #32]
 801279a:	17da      	asrs	r2, r3, #31
 801279c:	603b      	str	r3, [r7, #0]
 801279e:	607a      	str	r2, [r7, #4]
 80127a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80127a4:	4603      	mov	r3, r0
 80127a6:	fb03 f20b 	mul.w	r2, r3, fp
 80127aa:	460b      	mov	r3, r1
 80127ac:	fb0a f303 	mul.w	r3, sl, r3
 80127b0:	4413      	add	r3, r2
 80127b2:	4602      	mov	r2, r0
 80127b4:	fbaa 4502 	umull	r4, r5, sl, r2
 80127b8:	442b      	add	r3, r5
 80127ba:	461d      	mov	r5, r3
 80127bc:	f04f 0200 	mov.w	r2, #0
 80127c0:	f04f 0300 	mov.w	r3, #0
 80127c4:	002a      	movs	r2, r5
 80127c6:	17eb      	asrs	r3, r5, #31
 80127c8:	4613      	mov	r3, r2
 80127ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in >> -kShift;
 80127cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80127d0:	425b      	negs	r3, r3
 80127d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127d4:	fa42 f303 	asr.w	r3, r2, r3
 80127d8:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	1d1a      	adds	r2, r3, #4
 80127de:	61ba      	str	r2, [r7, #24]
 80127e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127e2:	601a      	str	r2, [r3, #0]
      blkCnt--;
 80127e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127e6:	3b01      	subs	r3, #1
 80127e8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 80127ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d1ca      	bne.n	8012786 <arm_scale_q31+0xc8>
}
 80127f0:	bf00      	nop
 80127f2:	373c      	adds	r7, #60	@ 0x3c
 80127f4:	46bd      	mov	sp, r7
 80127f6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80127fa:	4770      	bx	lr

080127fc <arm_shift_q15>:
ARM_DSP_ATTRIBUTE void arm_shift_q15(
  const q15_t * pSrc,
        int8_t shiftBits,
        q15_t * pDst,
        uint32_t blockSize)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b089      	sub	sp, #36	@ 0x24
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	607a      	str	r2, [r7, #4]
 8012806:	603b      	str	r3, [r7, #0]
 8012808:	460b      	mov	r3, r1
 801280a:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 801280c:	7afb      	ldrb	r3, [r7, #11]
 801280e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012812:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8012818:	7efb      	ldrb	r3, [r7, #27]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d12f      	bne.n	801287e <arm_shift_q15+0x82>
  {
    while (blkCnt > 0U)
 801281e:	e017      	b.n	8012850 <arm_shift_q15+0x54>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	1c9a      	adds	r2, r3, #2
 8012824:	60fa      	str	r2, [r7, #12]
 8012826:	f9b3 3000 	ldrsh.w	r3, [r3]
 801282a:	461a      	mov	r2, r3
 801282c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012830:	fa02 f303 	lsl.w	r3, r2, r3
 8012834:	617b      	str	r3, [r7, #20]
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	f303 030f 	ssat	r3, #16, r3
 801283c:	613b      	str	r3, [r7, #16]
 801283e:	6939      	ldr	r1, [r7, #16]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	1c9a      	adds	r2, r3, #2
 8012844:	607a      	str	r2, [r7, #4]
 8012846:	b20a      	sxth	r2, r1
 8012848:	801a      	strh	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	3b01      	subs	r3, #1
 801284e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1e4      	bne.n	8012820 <arm_shift_q15+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8012856:	e015      	b.n	8012884 <arm_shift_q15+0x88>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	1c9a      	adds	r2, r3, #2
 801285c:	60fa      	str	r2, [r7, #12]
 801285e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012862:	461a      	mov	r2, r3
 8012864:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012868:	425b      	negs	r3, r3
 801286a:	fa42 f103 	asr.w	r1, r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	1c9a      	adds	r2, r3, #2
 8012872:	607a      	str	r2, [r7, #4]
 8012874:	b20a      	sxth	r2, r1
 8012876:	801a      	strh	r2, [r3, #0]
      blkCnt--;
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	3b01      	subs	r3, #1
 801287c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1e9      	bne.n	8012858 <arm_shift_q15+0x5c>
}
 8012884:	bf00      	nop
 8012886:	3724      	adds	r7, #36	@ 0x24
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr

08012890 <arm_shift_q31>:
ARM_DSP_ATTRIBUTE void arm_shift_q31(
  const q31_t * pSrc,
        int8_t shiftBits,
        q31_t * pDst,
        uint32_t blockSize)
{
 8012890:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8012894:	b088      	sub	sp, #32
 8012896:	af00      	add	r7, sp, #0
 8012898:	60f8      	str	r0, [r7, #12]
 801289a:	607a      	str	r2, [r7, #4]
 801289c:	603b      	str	r3, [r7, #0]
 801289e:	460b      	mov	r3, r1
 80128a0:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 80128a2:	7afb      	ldrb	r3, [r7, #11]
 80128a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80128a8:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 80128ae:	7efb      	ldrb	r3, [r7, #27]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d14d      	bne.n	8012950 <arm_shift_q31+0xc0>
  {
    while (blkCnt > 0U)
 80128b4:	e038      	b.n	8012928 <arm_shift_q31+0x98>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	1d1a      	adds	r2, r3, #4
 80128ba:	60fa      	str	r2, [r7, #12]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	17da      	asrs	r2, r3, #31
 80128c0:	4698      	mov	r8, r3
 80128c2:	4691      	mov	r9, r2
 80128c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80128c8:	f1a3 0120 	sub.w	r1, r3, #32
 80128cc:	f1c3 0220 	rsb	r2, r3, #32
 80128d0:	fa09 f503 	lsl.w	r5, r9, r3
 80128d4:	fa08 f101 	lsl.w	r1, r8, r1
 80128d8:	430d      	orrs	r5, r1
 80128da:	fa28 f202 	lsr.w	r2, r8, r2
 80128de:	4315      	orrs	r5, r2
 80128e0:	fa08 f403 	lsl.w	r4, r8, r3
 80128e4:	687e      	ldr	r6, [r7, #4]
 80128e6:	1d33      	adds	r3, r6, #4
 80128e8:	607b      	str	r3, [r7, #4]
 80128ea:	e9c7 4504 	strd	r4, r5, [r7, #16]
   * @brief Clips Q63 to Q31 values.
   */
  __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 80128ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80128f2:	f04f 0200 	mov.w	r2, #0
 80128f6:	f04f 0300 	mov.w	r3, #0
 80128fa:	000a      	movs	r2, r1
 80128fc:	17cb      	asrs	r3, r1, #31
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	17db      	asrs	r3, r3, #31
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 8012902:	429a      	cmp	r2, r3
 8012904:	d00b      	beq.n	801291e <arm_shift_q31+0x8e>
 8012906:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801290a:	f04f 0200 	mov.w	r2, #0
 801290e:	f04f 0300 	mov.w	r3, #0
 8012912:	17ca      	asrs	r2, r1, #31
 8012914:	17cb      	asrs	r3, r1, #31
 8012916:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801291a:	4053      	eors	r3, r2
 801291c:	e000      	b.n	8012920 <arm_shift_q31+0x90>
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	6033      	str	r3, [r6, #0]

      /* Decrement loop counter */
      blkCnt--;
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	3b01      	subs	r3, #1
 8012926:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1c3      	bne.n	80128b6 <arm_shift_q31+0x26>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 801292e:	e012      	b.n	8012956 <arm_shift_q31+0xc6>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	1d1a      	adds	r2, r3, #4
 8012934:	60fa      	str	r2, [r7, #12]
 8012936:	6819      	ldr	r1, [r3, #0]
 8012938:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801293c:	425a      	negs	r2, r3
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	1d18      	adds	r0, r3, #4
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	fa41 f202 	asr.w	r2, r1, r2
 8012948:	601a      	str	r2, [r3, #0]
      blkCnt--;
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	3b01      	subs	r3, #1
 801294e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1ec      	bne.n	8012930 <arm_shift_q31+0xa0>
}
 8012956:	bf00      	nop
 8012958:	3720      	adds	r7, #32
 801295a:	46bd      	mov	sp, r7
 801295c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8012960:	4770      	bx	lr

08012962 <arm_cmplx_mag_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t numSamples)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b08e      	sub	sp, #56	@ 0x38
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012972:	e028      	b.n	80129c6 <arm_cmplx_mag_q15+0x64>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

#if defined (ARM_MATH_DSP)
    in = read_q15x2_ia (&pSrc);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	3304      	adds	r3, #4
 8012978:	60fb      	str	r3, [r7, #12]
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	3b04      	subs	r3, #4
 801297e:	61fb      	str	r3, [r7, #28]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	617b      	str	r3, [r7, #20]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	633b      	str	r3, [r7, #48]	@ 0x30
    acc0 = __SMUAD(in, in);
 801298a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801298e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012990:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012996:	fb23 f302 	smuad	r3, r3, r2
 801299a:	623b      	str	r3, [r7, #32]
  return(result);
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* store result in 2.14 format in destination buffer. */
    arm_sqrt_q31((uint32_t)acc0  >> 1 , &res);
 80129a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129a2:	085b      	lsrs	r3, r3, #1
 80129a4:	461a      	mov	r2, r3
 80129a6:	f107 0318 	add.w	r3, r7, #24
 80129aa:	4619      	mov	r1, r3
 80129ac:	4610      	mov	r0, r2
 80129ae:	f000 f883 	bl	8012ab8 <arm_sqrt_q31>
    *pDst++ = res >> 16;
 80129b2:	69bb      	ldr	r3, [r7, #24]
 80129b4:	1419      	asrs	r1, r3, #16
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	1c9a      	adds	r2, r3, #2
 80129ba:	60ba      	str	r2, [r7, #8]
 80129bc:	b20a      	sxth	r2, r1
 80129be:	801a      	strh	r2, [r3, #0]
    *pDst++ = res >> 16;
 
#endif

    /* Decrement loop counter */
    blkCnt--;
 80129c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129c2:	3b01      	subs	r3, #1
 80129c4:	637b      	str	r3, [r7, #52]	@ 0x34
  while (blkCnt > 0U)
 80129c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1d3      	bne.n	8012974 <arm_cmplx_mag_q15+0x12>
  }

}
 80129cc:	bf00      	nop
 80129ce:	bf00      	nop
 80129d0:	3738      	adds	r7, #56	@ 0x38
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <arm_divide_q15>:

ARM_DSP_ATTRIBUTE arm_status arm_divide_q15(q15_t numerator,
  q15_t denominator,
  q15_t *quotient,
  int16_t *shift)
{
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b088      	sub	sp, #32
 80129da:	af00      	add	r7, sp, #0
 80129dc:	60ba      	str	r2, [r7, #8]
 80129de:	607b      	str	r3, [r7, #4]
 80129e0:	4603      	mov	r3, r0
 80129e2:	81fb      	strh	r3, [r7, #14]
 80129e4:	460b      	mov	r3, r1
 80129e6:	81bb      	strh	r3, [r7, #12]
  int16_t sign=0;
 80129e8:	2300      	movs	r3, #0
 80129ea:	837b      	strh	r3, [r7, #26]
  q31_t temp;
  int16_t shiftForNormalizing;

  *shift = 0;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	801a      	strh	r2, [r3, #0]

  sign = (numerator<0) ^ (denominator<0);
 80129f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80129f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80129fa:	4053      	eors	r3, r2
 80129fc:	b21b      	sxth	r3, r3
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	0bdb      	lsrs	r3, r3, #15
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	837b      	strh	r3, [r7, #26]

  if (denominator == 0)
 8012a06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10f      	bne.n	8012a2e <arm_divide_q15+0x58>
  {
     if (sign)
 8012a0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d004      	beq.n	8012a20 <arm_divide_q15+0x4a>
     {
        *quotient = -32768;
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8012a1c:	801a      	strh	r2, [r3, #0]
 8012a1e:	e003      	b.n	8012a28 <arm_divide_q15+0x52>
     }
     else
     {
        *quotient = 32767;
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012a26:	801a      	strh	r2, [r3, #0]
     }
     return(ARM_MATH_NANINF);
 8012a28:	f06f 0303 	mvn.w	r3, #3
 8012a2c:	e03f      	b.n	8012aae <arm_divide_q15+0xd8>
  }

  arm_abs_q15(&numerator,&numerator,1);
 8012a2e:	f107 010e 	add.w	r1, r7, #14
 8012a32:	f107 030e 	add.w	r3, r7, #14
 8012a36:	2201      	movs	r2, #1
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7ff fd45 	bl	80124c8 <arm_abs_q15>
  arm_abs_q15(&denominator,&denominator,1);
 8012a3e:	f107 010c 	add.w	r1, r7, #12
 8012a42:	f107 030c 	add.w	r3, r7, #12
 8012a46:	2201      	movs	r2, #1
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7ff fd3d 	bl	80124c8 <arm_abs_q15>
  
  temp = ((q31_t)numerator << 15) / ((q31_t)denominator);
 8012a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a52:	03db      	lsls	r3, r3, #15
 8012a54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a5c:	61fb      	str	r3, [r7, #28]

  shiftForNormalizing= 17 - __CLZ(temp);
 8012a5e:	69fb      	ldr	r3, [r7, #28]
 8012a60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d101      	bne.n	8012a6c <arm_divide_q15+0x96>
    return 32U;
 8012a68:	2320      	movs	r3, #32
 8012a6a:	e003      	b.n	8012a74 <arm_divide_q15+0x9e>
  return __builtin_clz(value);
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	fab3 f383 	clz	r3, r3
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	f1c3 0311 	rsb	r3, r3, #17
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	833b      	strh	r3, [r7, #24]
  if (shiftForNormalizing > 0)
 8012a7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	dd08      	ble.n	8012a96 <arm_divide_q15+0xc0>
  {
     *shift = shiftForNormalizing;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	8b3a      	ldrh	r2, [r7, #24]
 8012a88:	801a      	strh	r2, [r3, #0]
     temp = temp >> shiftForNormalizing;
 8012a8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012a8e:	69fa      	ldr	r2, [r7, #28]
 8012a90:	fa42 f303 	asr.w	r3, r2, r3
 8012a94:	61fb      	str	r3, [r7, #28]
  }

  if (sign)
 8012a96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <arm_divide_q15+0xce>
  {
    temp = -temp;
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	425b      	negs	r3, r3
 8012aa2:	61fb      	str	r3, [r7, #28]
  }

  *quotient=temp;
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	b21a      	sxth	r2, r3
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	801a      	strh	r2, [r3, #0]

  return(ARM_MATH_SUCCESS);
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3720      	adds	r7, #32
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
	...

08012ab8 <arm_sqrt_q31>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut)
{
 8012ab8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012abc:	b0bf      	sub	sp, #252	@ 0xfc
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 8012ac4:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  q31_t number, var1, signBits1 ,temp;
 
  number = in;
 8012ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012acc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 8012ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	f340 8270 	ble.w	8012fba <arm_sqrt_q31+0x502>
  {
    signBits1 = __CLZ(number) - 1;
 8012ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (value == 0U)
 8012ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d101      	bne.n	8012aee <arm_sqrt_q31+0x36>
    return 32U;
 8012aea:	2320      	movs	r3, #32
 8012aec:	e004      	b.n	8012af8 <arm_sqrt_q31+0x40>
  return __builtin_clz(value);
 8012aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012af2:	fab3 f383 	clz	r3, r3
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	3b01      	subs	r3, #1
 8012afa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 8012afe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012b02:	f003 0301 	and.w	r3, r3, #1
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d108      	bne.n	8012b1c <arm_sqrt_q31+0x64>
    {
      number = number << signBits1;
 8012b0a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8012b0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012b12:	fa02 f303 	lsl.w	r3, r2, r3
 8012b16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012b1a:	e007      	b.n	8012b2c <arm_sqrt_q31+0x74>
    }
    else
    {
      number = number << (signBits1 - 1);
 8012b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012b20:	1e5a      	subs	r2, r3, #1
 8012b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012b26:	4093      	lsls	r3, r2
 8012b28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    }

    /* Start value for 1/sqrt(x) for the Newton iteration */
    var1 = sqrt_initial_lut_q31[(number>> 26) - (Q28QUARTER >> 26)];
 8012b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012b30:	169b      	asrs	r3, r3, #26
 8012b32:	f1a3 0208 	sub.w	r2, r3, #8
 8012b36:	4bf0      	ldr	r3, [pc, #960]	@ (8012ef8 <arm_sqrt_q31+0x440>)
 8012b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 0.5 var1 * (3 - number * var1 * var1) */

    /* 1st iteration */

    temp = ((q63_t) var1 * var1) >> 28;
 8012b40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012b44:	17da      	asrs	r2, r3, #31
 8012b46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012b4a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8012b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012b52:	17da      	asrs	r2, r3, #31
 8012b54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012b58:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8012b5c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8012b60:	460b      	mov	r3, r1
 8012b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8012b66:	fb02 f203 	mul.w	r2, r2, r3
 8012b6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012b6e:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0
 8012b72:	4601      	mov	r1, r0
 8012b74:	fb01 f303 	mul.w	r3, r1, r3
 8012b78:	4413      	add	r3, r2
 8012b7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012b7e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8012b82:	fba2 4501 	umull	r4, r5, r2, r1
 8012b86:	442b      	add	r3, r5
 8012b88:	461d      	mov	r5, r3
 8012b8a:	f04f 0200 	mov.w	r2, #0
 8012b8e:	f04f 0300 	mov.w	r3, #0
 8012b92:	0f22      	lsrs	r2, r4, #28
 8012b94:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8012b98:	172b      	asrs	r3, r5, #28
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8012ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ba4:	17da      	asrs	r2, r3, #31
 8012ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012baa:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012bae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012bb2:	17da      	asrs	r2, r3, #31
 8012bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8012bbc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8012bc6:	4622      	mov	r2, r4
 8012bc8:	fb02 f203 	mul.w	r2, r2, r3
 8012bcc:	e9c7 4530 	strd	r4, r5, [r7, #192]	@ 0xc0
 8012bd0:	462b      	mov	r3, r5
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	460d      	mov	r5, r1
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	fb01 f303 	mul.w	r3, r1, r3
 8012bdc:	4413      	add	r3, r2
 8012bde:	4622      	mov	r2, r4
 8012be0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8012be4:	fba2 8901 	umull	r8, r9, r2, r1
 8012be8:	444b      	add	r3, r9
 8012bea:	4699      	mov	r9, r3
 8012bec:	f04f 0200 	mov.w	r2, #0
 8012bf0:	f04f 0300 	mov.w	r3, #0
 8012bf4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8012bf8:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8012bfc:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8012c00:	4613      	mov	r3, r2
 8012c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8012c06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012c0a:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8012c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8012c12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012c16:	17da      	asrs	r2, r3, #31
 8012c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012c20:	17da      	asrs	r2, r3, #31
 8012c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c24:	677a      	str	r2, [r7, #116]	@ 0x74
 8012c26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012c30:	4642      	mov	r2, r8
 8012c32:	fb02 f203 	mul.w	r2, r2, r3
 8012c36:	464b      	mov	r3, r9
 8012c38:	4621      	mov	r1, r4
 8012c3a:	fb01 f303 	mul.w	r3, r1, r3
 8012c3e:	4413      	add	r3, r2
 8012c40:	4622      	mov	r2, r4
 8012c42:	4641      	mov	r1, r8
 8012c44:	fba2 ab01 	umull	sl, fp, r2, r1
 8012c48:	445b      	add	r3, fp
 8012c4a:	469b      	mov	fp, r3
 8012c4c:	f04f 0200 	mov.w	r2, #0
 8012c50:	f04f 0300 	mov.w	r3, #0
 8012c54:	ea4f 725a 	mov.w	r2, sl, lsr #29
 8012c58:	ea42 02cb 	orr.w	r2, r2, fp, lsl #3
 8012c5c:	ea4f 736b 	mov.w	r3, fp, asr #29
 8012c60:	4613      	mov	r3, r2
 8012c62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    
    /* 2nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8012c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012c6a:	17da      	asrs	r2, r3, #31
 8012c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012c74:	17da      	asrs	r2, r3, #31
 8012c76:	663b      	str	r3, [r7, #96]	@ 0x60
 8012c78:	667a      	str	r2, [r7, #100]	@ 0x64
 8012c7a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8012c7e:	462b      	mov	r3, r5
 8012c80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8012c84:	4642      	mov	r2, r8
 8012c86:	fb02 f203 	mul.w	r2, r2, r3
 8012c8a:	464b      	mov	r3, r9
 8012c8c:	4621      	mov	r1, r4
 8012c8e:	fb01 f303 	mul.w	r3, r1, r3
 8012c92:	4413      	add	r3, r2
 8012c94:	4622      	mov	r2, r4
 8012c96:	4641      	mov	r1, r8
 8012c98:	fba2 1201 	umull	r1, r2, r2, r1
 8012c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8012ca0:	460a      	mov	r2, r1
 8012ca2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8012ca6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012caa:	4413      	add	r3, r2
 8012cac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012cb0:	f04f 0200 	mov.w	r2, #0
 8012cb4:	f04f 0300 	mov.w	r3, #0
 8012cb8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8012cbc:	4621      	mov	r1, r4
 8012cbe:	0f0a      	lsrs	r2, r1, #28
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	170b      	asrs	r3, r1, #28
 8012cca:	4613      	mov	r3, r2
 8012ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8012cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012cd4:	17da      	asrs	r2, r3, #31
 8012cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012cd8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8012cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012cde:	17da      	asrs	r2, r3, #31
 8012ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012ce2:	657a      	str	r2, [r7, #84]	@ 0x54
 8012ce4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8012ce8:	462b      	mov	r3, r5
 8012cea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8012cee:	4642      	mov	r2, r8
 8012cf0:	fb02 f203 	mul.w	r2, r2, r3
 8012cf4:	464b      	mov	r3, r9
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	fb01 f303 	mul.w	r3, r1, r3
 8012cfc:	4413      	add	r3, r2
 8012cfe:	4622      	mov	r2, r4
 8012d00:	4641      	mov	r1, r8
 8012d02:	fba2 1201 	umull	r1, r2, r2, r1
 8012d06:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8012d0a:	460a      	mov	r2, r1
 8012d0c:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8012d10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012d14:	4413      	add	r3, r2
 8012d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012d1a:	f04f 0200 	mov.w	r2, #0
 8012d1e:	f04f 0300 	mov.w	r3, #0
 8012d22:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8012d26:	4621      	mov	r1, r4
 8012d28:	0fca      	lsrs	r2, r1, #31
 8012d2a:	4629      	mov	r1, r5
 8012d2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8012d30:	4629      	mov	r1, r5
 8012d32:	17cb      	asrs	r3, r1, #31
 8012d34:	4613      	mov	r3, r2
 8012d36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8012d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012d3e:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8012d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8012d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d4a:	17da      	asrs	r2, r3, #31
 8012d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012d4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8012d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012d54:	17da      	asrs	r2, r3, #31
 8012d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d58:	647a      	str	r2, [r7, #68]	@ 0x44
 8012d5a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8012d5e:	462b      	mov	r3, r5
 8012d60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8012d64:	4642      	mov	r2, r8
 8012d66:	fb02 f203 	mul.w	r2, r2, r3
 8012d6a:	464b      	mov	r3, r9
 8012d6c:	4621      	mov	r1, r4
 8012d6e:	fb01 f303 	mul.w	r3, r1, r3
 8012d72:	4413      	add	r3, r2
 8012d74:	4622      	mov	r2, r4
 8012d76:	4641      	mov	r1, r8
 8012d78:	fba2 1201 	umull	r1, r2, r2, r1
 8012d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012d80:	460a      	mov	r2, r1
 8012d82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012d86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012d8a:	4413      	add	r3, r2
 8012d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012d90:	f04f 0200 	mov.w	r2, #0
 8012d94:	f04f 0300 	mov.w	r3, #0
 8012d98:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	0f4a      	lsrs	r2, r1, #29
 8012da0:	4629      	mov	r1, r5
 8012da2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8012da6:	4629      	mov	r1, r5
 8012da8:	174b      	asrs	r3, r1, #29
 8012daa:	4613      	mov	r3, r2
 8012dac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 3rd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8012db0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012db4:	17da      	asrs	r2, r3, #31
 8012db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012dba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012dbe:	17da      	asrs	r2, r3, #31
 8012dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8012dc2:	637a      	str	r2, [r7, #52]	@ 0x34
 8012dc4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8012dc8:	462b      	mov	r3, r5
 8012dca:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8012dce:	4642      	mov	r2, r8
 8012dd0:	fb02 f203 	mul.w	r2, r2, r3
 8012dd4:	464b      	mov	r3, r9
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	fb01 f303 	mul.w	r3, r1, r3
 8012ddc:	4413      	add	r3, r2
 8012dde:	4622      	mov	r2, r4
 8012de0:	4641      	mov	r1, r8
 8012de2:	fba2 1201 	umull	r1, r2, r2, r1
 8012de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012dea:	460a      	mov	r2, r1
 8012dec:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8012df0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012df4:	4413      	add	r3, r2
 8012df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012dfa:	f04f 0200 	mov.w	r2, #0
 8012dfe:	f04f 0300 	mov.w	r3, #0
 8012e02:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8012e06:	4621      	mov	r1, r4
 8012e08:	0f0a      	lsrs	r2, r1, #28
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8012e10:	4629      	mov	r1, r5
 8012e12:	170b      	asrs	r3, r1, #28
 8012e14:	4613      	mov	r3, r2
 8012e16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8012e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012e1e:	17da      	asrs	r2, r3, #31
 8012e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012e28:	17da      	asrs	r2, r3, #31
 8012e2a:	623b      	str	r3, [r7, #32]
 8012e2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e2e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8012e32:	462b      	mov	r3, r5
 8012e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012e38:	4642      	mov	r2, r8
 8012e3a:	fb02 f203 	mul.w	r2, r2, r3
 8012e3e:	464b      	mov	r3, r9
 8012e40:	4621      	mov	r1, r4
 8012e42:	fb01 f303 	mul.w	r3, r1, r3
 8012e46:	4413      	add	r3, r2
 8012e48:	4622      	mov	r2, r4
 8012e4a:	4641      	mov	r1, r8
 8012e4c:	fba2 1201 	umull	r1, r2, r2, r1
 8012e50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8012e54:	460a      	mov	r2, r1
 8012e56:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8012e5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012e5e:	4413      	add	r3, r2
 8012e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012e64:	f04f 0200 	mov.w	r2, #0
 8012e68:	f04f 0300 	mov.w	r3, #0
 8012e6c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8012e70:	4621      	mov	r1, r4
 8012e72:	0fca      	lsrs	r2, r1, #31
 8012e74:	4629      	mov	r1, r5
 8012e76:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	17cb      	asrs	r3, r1, #31
 8012e7e:	4613      	mov	r3, r2
 8012e80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8012e84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012e88:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8012e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8012e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012e94:	17da      	asrs	r2, r3, #31
 8012e96:	61bb      	str	r3, [r7, #24]
 8012e98:	61fa      	str	r2, [r7, #28]
 8012e9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012e9e:	17da      	asrs	r2, r3, #31
 8012ea0:	613b      	str	r3, [r7, #16]
 8012ea2:	617a      	str	r2, [r7, #20]
 8012ea4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8012ea8:	462b      	mov	r3, r5
 8012eaa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8012eae:	4642      	mov	r2, r8
 8012eb0:	fb02 f203 	mul.w	r2, r2, r3
 8012eb4:	464b      	mov	r3, r9
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	fb01 f303 	mul.w	r3, r1, r3
 8012ebc:	4413      	add	r3, r2
 8012ebe:	4622      	mov	r2, r4
 8012ec0:	4641      	mov	r1, r8
 8012ec2:	fba2 1201 	umull	r1, r2, r2, r1
 8012ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012eca:	460a      	mov	r2, r1
 8012ecc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012ed0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012ed4:	4413      	add	r3, r2
 8012ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012eda:	f04f 0200 	mov.w	r2, #0
 8012ede:	f04f 0300 	mov.w	r3, #0
 8012ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	0f4a      	lsrs	r2, r1, #29
 8012eea:	4629      	mov	r1, r5
 8012eec:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	174b      	asrs	r3, r1, #29
 8012ef4:	e002      	b.n	8012efc <arm_sqrt_q31+0x444>
 8012ef6:	bf00      	nop
 8012ef8:	0802fa00 	.word	0x0802fa00
 8012efc:	4613      	mov	r3, r2
 8012efe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Multiply the inverse square root with the original value */
    var1 = ((q31_t) (((q63_t) number * var1) >> 28));
 8012f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012f06:	17da      	asrs	r2, r3, #31
 8012f08:	60bb      	str	r3, [r7, #8]
 8012f0a:	60fa      	str	r2, [r7, #12]
 8012f0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012f10:	17da      	asrs	r2, r3, #31
 8012f12:	603b      	str	r3, [r7, #0]
 8012f14:	607a      	str	r2, [r7, #4]
 8012f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012f1a:	462b      	mov	r3, r5
 8012f1c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8012f20:	4642      	mov	r2, r8
 8012f22:	fb02 f203 	mul.w	r2, r2, r3
 8012f26:	464b      	mov	r3, r9
 8012f28:	4621      	mov	r1, r4
 8012f2a:	fb01 f303 	mul.w	r3, r1, r3
 8012f2e:	4413      	add	r3, r2
 8012f30:	4622      	mov	r2, r4
 8012f32:	4641      	mov	r1, r8
 8012f34:	fba2 1201 	umull	r1, r2, r2, r1
 8012f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012f3c:	460a      	mov	r2, r1
 8012f3e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8012f42:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8012f46:	4413      	add	r3, r2
 8012f48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012f4c:	f04f 0200 	mov.w	r2, #0
 8012f50:	f04f 0300 	mov.w	r3, #0
 8012f54:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8012f58:	4621      	mov	r1, r4
 8012f5a:	0f0a      	lsrs	r2, r1, #28
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8012f62:	4629      	mov	r1, r5
 8012f64:	170b      	asrs	r3, r1, #28
 8012f66:	4613      	mov	r3, r2
 8012f68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 8012f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012f70:	f003 0301 	and.w	r3, r3, #1
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10c      	bne.n	8012f92 <arm_sqrt_q31+0x4da>
    {
      var1 = var1 >> (signBits1 / 2);
 8012f78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	da00      	bge.n	8012f82 <arm_sqrt_q31+0x4ca>
 8012f80:	3301      	adds	r3, #1
 8012f82:	105b      	asrs	r3, r3, #1
 8012f84:	461a      	mov	r2, r3
 8012f86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012f8a:	4113      	asrs	r3, r2
 8012f8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012f90:	e00c      	b.n	8012fac <arm_sqrt_q31+0x4f4>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 8012f92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012f96:	3b01      	subs	r3, #1
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	da00      	bge.n	8012f9e <arm_sqrt_q31+0x4e6>
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	105b      	asrs	r3, r3, #1
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012fa6:	4113      	asrs	r3, r2
 8012fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }
    *pOut = var1;
 8012fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012fb0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8012fb4:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e00b      	b.n	8012fd2 <arm_sqrt_q31+0x51a>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 8012fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	601a      	str	r2, [r3, #0]

    if (number==0)
 8012fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d101      	bne.n	8012fce <arm_sqrt_q31+0x516>
    {
       return (ARM_MATH_SUCCESS);
 8012fca:	2300      	movs	r3, #0
 8012fcc:	e001      	b.n	8012fd2 <arm_sqrt_q31+0x51a>
    }
    else
    {
       return (ARM_MATH_ARGUMENT_ERROR);
 8012fce:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	37fc      	adds	r7, #252	@ 0xfc
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop

08012fe0 <arm_scalar_log_q31>:
/* 1.0 / Log2[Exp[1]] in Q31 */
#define LOG_Q31_INVLOG2EXP 0x58b90bfbuL

/* Clay Turner algorithm */
static uint32_t arm_scalar_log_q31(uint32_t src)
{
 8012fe0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012fe4:	b08d      	sub	sp, #52	@ 0x34
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	60f8      	str	r0, [r7, #12]
 8012fea:	68f9      	ldr	r1, [r7, #12]
 8012fec:	6139      	str	r1, [r7, #16]
  if (value == 0U)
 8012fee:	6939      	ldr	r1, [r7, #16]
 8012ff0:	2900      	cmp	r1, #0
 8012ff2:	d101      	bne.n	8012ff8 <arm_scalar_log_q31+0x18>
    return 32U;
 8012ff4:	2120      	movs	r1, #32
 8012ff6:	e003      	b.n	8013000 <arm_scalar_log_q31+0x20>
  return __builtin_clz(value);
 8012ff8:	6939      	ldr	r1, [r7, #16]
 8012ffa:	fab1 f181 	clz	r1, r1
 8012ffe:	b2c9      	uxtb	r1, r1
   int32_t i;

   int32_t c = __CLZ(src);
 8013000:	61f9      	str	r1, [r7, #28]
   int32_t normalization=0;
 8013002:	2100      	movs	r1, #0
 8013004:	61b9      	str	r1, [r7, #24]

   /* 0.5 in q26 */
   uint32_t inc = LOQ_Q31_Q32_HALF >> (LOG_Q31_INTEGER_PART + 1);
 8013006:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 801300a:	62b9      	str	r1, [r7, #40]	@ 0x28

   /* Will compute y = log2(x) for 1 <= x < 2.0 */
   uint32_t x;

   /* q26 */
   uint32_t y=0;
 801300c:	2100      	movs	r1, #0
 801300e:	6239      	str	r1, [r7, #32]
   /* q26 */
   int32_t tmp;


   /* Normalize and convert to q30 format */
   x = src;
 8013010:	68f9      	ldr	r1, [r7, #12]
 8013012:	6279      	str	r1, [r7, #36]	@ 0x24
   if ((c-1) < 0)
 8013014:	69f9      	ldr	r1, [r7, #28]
 8013016:	2900      	cmp	r1, #0
 8013018:	dc07      	bgt.n	801302a <arm_scalar_log_q31+0x4a>
   {
     x = x >> (1-c);
 801301a:	69f9      	ldr	r1, [r7, #28]
 801301c:	f1c1 0101 	rsb	r1, r1, #1
 8013020:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013022:	fa20 f101 	lsr.w	r1, r0, r1
 8013026:	6279      	str	r1, [r7, #36]	@ 0x24
 8013028:	e005      	b.n	8013036 <arm_scalar_log_q31+0x56>
   }
   else
   {
     x = x << (c-1);
 801302a:	69f9      	ldr	r1, [r7, #28]
 801302c:	3901      	subs	r1, #1
 801302e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013030:	fa00 f101 	lsl.w	r1, r0, r1
 8013034:	6279      	str	r1, [r7, #36]	@ 0x24
   }
   normalization = c;
 8013036:	69f9      	ldr	r1, [r7, #28]
 8013038:	61b9      	str	r1, [r7, #24]
   /* Compute the Log2. Result is in q26
      because we know 0 <= y < 1.0 but
      do not want to use q32 to allow
      following computation with less instructions.
   */
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 801303a:	2100      	movs	r1, #0
 801303c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801303e:	e02d      	b.n	801309c <arm_scalar_log_q31+0xbc>
   {
      x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 8013040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013042:	2000      	movs	r0, #0
 8013044:	468a      	mov	sl, r1
 8013046:	4683      	mov	fp, r0
 8013048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801304a:	2000      	movs	r0, #0
 801304c:	6039      	str	r1, [r7, #0]
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	6839      	ldr	r1, [r7, #0]
 8013052:	fb01 f00b 	mul.w	r0, r1, fp
 8013056:	6879      	ldr	r1, [r7, #4]
 8013058:	fb0a f101 	mul.w	r1, sl, r1
 801305c:	4401      	add	r1, r0
 801305e:	6838      	ldr	r0, [r7, #0]
 8013060:	fbaa 4500 	umull	r4, r5, sl, r0
 8013064:	4429      	add	r1, r5
 8013066:	460d      	mov	r5, r1
 8013068:	f04f 0000 	mov.w	r0, #0
 801306c:	f04f 0100 	mov.w	r1, #0
 8013070:	0fa0      	lsrs	r0, r4, #30
 8013072:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
 8013076:	17a9      	asrs	r1, r5, #30
 8013078:	4601      	mov	r1, r0
 801307a:	6279      	str	r1, [r7, #36]	@ 0x24

      if (x >= LOQ_Q31_THRESHOLD)
 801307c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801307e:	2900      	cmp	r1, #0
 8013080:	da06      	bge.n	8013090 <arm_scalar_log_q31+0xb0>
      {
         y += inc ;
 8013082:	6a38      	ldr	r0, [r7, #32]
 8013084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013086:	4401      	add	r1, r0
 8013088:	6239      	str	r1, [r7, #32]
         x = x >> 1;
 801308a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801308c:	0849      	lsrs	r1, r1, #1
 801308e:	6279      	str	r1, [r7, #36]	@ 0x24
      }
      inc = inc >> 1;
 8013090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013092:	0849      	lsrs	r1, r1, #1
 8013094:	62b9      	str	r1, [r7, #40]	@ 0x28
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8013096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013098:	3101      	adds	r1, #1
 801309a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801309c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801309e:	291e      	cmp	r1, #30
 80130a0:	ddce      	ble.n	8013040 <arm_scalar_log_q31+0x60>
      We compute (y - normalisation) * (1 / Log2[e]).

   */

   /* q26 */
   tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 80130a2:	6a38      	ldr	r0, [r7, #32]
 80130a4:	69b9      	ldr	r1, [r7, #24]
 80130a6:	0689      	lsls	r1, r1, #26
 80130a8:	1a41      	subs	r1, r0, r1
 80130aa:	6179      	str	r1, [r7, #20]


   /* q5.26 */
   y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 80130ac:	6979      	ldr	r1, [r7, #20]
 80130ae:	17c8      	asrs	r0, r1, #31
 80130b0:	4688      	mov	r8, r1
 80130b2:	4681      	mov	r9, r0
 80130b4:	490e      	ldr	r1, [pc, #56]	@ (80130f0 <arm_scalar_log_q31+0x110>)
 80130b6:	fb01 f009 	mul.w	r0, r1, r9
 80130ba:	2100      	movs	r1, #0
 80130bc:	fb01 f108 	mul.w	r1, r1, r8
 80130c0:	4401      	add	r1, r0
 80130c2:	480b      	ldr	r0, [pc, #44]	@ (80130f0 <arm_scalar_log_q31+0x110>)
 80130c4:	fba8 2300 	umull	r2, r3, r8, r0
 80130c8:	4419      	add	r1, r3
 80130ca:	460b      	mov	r3, r1
 80130cc:	f04f 0000 	mov.w	r0, #0
 80130d0:	f04f 0100 	mov.w	r1, #0
 80130d4:	0fd0      	lsrs	r0, r2, #31
 80130d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80130da:	17d9      	asrs	r1, r3, #31
 80130dc:	4603      	mov	r3, r0
 80130de:	623b      	str	r3, [r7, #32]



   return(y);
 80130e0:	6a3b      	ldr	r3, [r7, #32]

}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3734      	adds	r7, #52	@ 0x34
 80130e6:	46bd      	mov	sp, r7
 80130e8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop
 80130f0:	58b90bfb 	.word	0x58b90bfb

080130f4 <arm_vlog_q31>:
 */
ARM_DSP_ATTRIBUTE void arm_vlog_q31(
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b086      	sub	sp, #24
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
      blkCnt--;
  }

  blkCnt = blockSize & 3;
  #else
  blkCnt = blockSize;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	617b      	str	r3, [r7, #20]
  #endif

  while (blkCnt > 0U)
 8013104:	e00f      	b.n	8013126 <arm_vlog_q31+0x32>
  {
     *pDst++=arm_scalar_log_q31(*pSrc++);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	1d1a      	adds	r2, r3, #4
 801310a:	60fa      	str	r2, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff ff66 	bl	8012fe0 <arm_scalar_log_q31>
 8013114:	4601      	mov	r1, r0
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	1d1a      	adds	r2, r3, #4
 801311a:	60ba      	str	r2, [r7, #8]
 801311c:	460a      	mov	r2, r1
 801311e:	601a      	str	r2, [r3, #0]

     blkCnt--;
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	3b01      	subs	r3, #1
 8013124:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d1ec      	bne.n	8013106 <arm_vlog_q31+0x12>
  }

}
 801312c:	bf00      	nop
 801312e:	bf00      	nop
 8013130:	3718      	adds	r7, #24
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <arm_mat_vec_mult_q15>:
    }
}

#else
ARM_DSP_ATTRIBUTE void arm_mat_vec_mult_q15(const arm_matrix_instance_q15 *pSrcMat, const q15_t *pVec, q15_t *pDst)
{
 8013136:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801313a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 801313e:	af00      	add	r7, sp, #0
 8013140:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013144:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013148:	6018      	str	r0, [r3, #0]
 801314a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801314e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013152:	6019      	str	r1, [r3, #0]
 8013154:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013158:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801315c:	601a      	str	r2, [r3, #0]
    uint32_t numRows = pSrcMat->numRows;
 801315e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013162:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	881b      	ldrh	r3, [r3, #0]
 801316a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    uint32_t numCols = pSrcMat->numCols;
 801316e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013172:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	885b      	ldrh	r3, [r3, #2]
 801317a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    const q15_t *pSrcA = pSrcMat->pData;
 801317e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013182:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    uint16_t i, row, colCnt; /* loop counters */
    q31_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 801318e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8013192:	089b      	lsrs	r3, r3, #2
 8013194:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    i = 0u;
 8013198:	2300      	movs	r3, #0
 801319a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    px = pDst;
 801319e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80131a2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    /* The following loop performs the dot-product of each row in pSrcA with the vector */
    /* row loop */
    while (row > 0) {
 80131ac:	e34b      	b.n	8013846 <arm_mat_vec_mult_q15+0x710>
        /* Initialize accumulators */
        q63_t sum1 = 0;
 80131ae:	f04f 0200 	mov.w	r2, #0
 80131b2:	f04f 0300 	mov.w	r3, #0
 80131b6:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
        q63_t sum2 = 0;
 80131ba:	f04f 0200 	mov.w	r2, #0
 80131be:	f04f 0300 	mov.w	r3, #0
 80131c2:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
        q63_t sum3 = 0;
 80131c6:	f04f 0200 	mov.w	r2, #0
 80131ca:	f04f 0300 	mov.w	r3, #0
 80131ce:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
        q63_t sum4 = 0;
 80131d2:	f04f 0200 	mov.w	r2, #0
 80131d6:	f04f 0300 	mov.w	r3, #0
 80131da:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

        /* For every row wise process, the pInVec pointer is set
         ** to the starting address of the vector */
        pInVec = pVec;
 80131de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80131e2:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80131e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80131ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6013      	str	r3, [r2, #0]

        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols >> 1;
 80131f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80131f6:	085b      	lsrs	r3, r3, #1
 80131f8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
 80131fc:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8013200:	005a      	lsls	r2, r3, #1
 8013202:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8013206:	441a      	add	r2, r3
 8013208:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801320c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013210:	601a      	str	r2, [r3, #0]
        pInA2 = pInA1 + numCols;
 8013212:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013216:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8013220:	005b      	lsls	r3, r3, #1
 8013222:	441a      	add	r2, r3
 8013224:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013228:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801322c:	601a      	str	r2, [r3, #0]
        pInA3 = pInA2 + numCols;
 801322e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013232:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801323c:	005b      	lsls	r3, r3, #1
 801323e:	441a      	add	r2, r3
 8013240:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013244:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013248:	601a      	str	r2, [r3, #0]
        pInA4 = pInA3 + numCols;
 801324a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801324e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8013258:	005b      	lsls	r3, r3, #1
 801325a:	441a      	add	r2, r3
 801325c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013260:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013264:	601a      	str	r2, [r3, #0]

        // Main loop: matrix-vector multiplication
        while (colCnt > 0u) {
 8013266:	e16b      	b.n	8013540 <arm_mat_vec_mult_q15+0x40a>
            // Read 2 values from vector
            vecData = read_q15x2_ia (&pInVec);
 8013268:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801326c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	1d1a      	adds	r2, r3, #4
 8013274:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013278:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801327c:	601a      	str	r2, [r3, #0]
 801327e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013282:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	3b04      	subs	r3, #4
 801328a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  memcpy (&val, pQ15, 4);
 801328e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	461a      	mov	r2, r3
 8013296:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801329a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801329e:	601a      	str	r2, [r3, #0]
  return (val);
 80132a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80132a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

            // Read 8 values from the matrix - 2 values from each of 4 rows, and do multiply accumulate
            matData =  read_q15x2_ia (&pInA1);
 80132ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80132b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	1d1a      	adds	r2, r3, #4
 80132ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80132be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80132c2:	601a      	str	r2, [r3, #0]
 80132c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80132c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	3b04      	subs	r3, #4
 80132d0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  memcpy (&val, pQ15, 4);
 80132d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	461a      	mov	r2, r3
 80132dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80132e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80132e4:	601a      	str	r2, [r3, #0]
  return (val);
 80132e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80132ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum1 = __SMLALD(matData, vecData, sum1);
 80132f4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80132f8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80132fc:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8013300:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
 8013304:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8013308:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
  llr.w64 = acc;
 801330c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8013310:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8013314:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013318:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801331c:	6819      	ldr	r1, [r3, #0]
 801331e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013322:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013326:	685a      	ldr	r2, [r3, #4]
 8013328:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 801332c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8013330:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8013334:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013338:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801333c:	6019      	str	r1, [r3, #0]
 801333e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013342:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013346:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8013348:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 801334c:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            matData = read_q15x2_ia (&pInA2);
 8013350:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013354:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	1d1a      	adds	r2, r3, #4
 801335c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013360:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013364:	601a      	str	r2, [r3, #0]
 8013366:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801336a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	3b04      	subs	r3, #4
 8013372:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  memcpy (&val, pQ15, 4);
 8013376:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	461a      	mov	r2, r3
 801337e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013382:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013386:	601a      	str	r2, [r3, #0]
  return (val);
 8013388:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801338c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum2 = __SMLALD(matData, vecData, sum2);
 8013396:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 801339a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801339e:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80133a2:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
 80133a6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 80133aa:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
  llr.w64 = acc;
 80133ae:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80133b2:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80133b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80133ba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80133be:	6819      	ldr	r1, [r3, #0]
 80133c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80133c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80133c8:	685a      	ldr	r2, [r3, #4]
 80133ca:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 80133ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80133d2:	fbc0 12c3 	smlald	r1, r2, r0, r3
 80133d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80133da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80133de:	6019      	str	r1, [r3, #0]
 80133e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80133e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80133e8:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80133ea:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80133ee:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            matData = read_q15x2_ia (&pInA3);
 80133f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80133f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	1d1a      	adds	r2, r3, #4
 80133fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013402:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013406:	601a      	str	r2, [r3, #0]
 8013408:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801340c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	3b04      	subs	r3, #4
 8013414:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  memcpy (&val, pQ15, 4);
 8013418:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	461a      	mov	r2, r3
 8013420:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013424:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8013428:	601a      	str	r2, [r3, #0]
  return (val);
 801342a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801342e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum3 = __SMLALD(matData, vecData, sum3);
 8013438:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 801343c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8013440:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8013444:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
 8013448:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 801344c:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
  llr.w64 = acc;
 8013450:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8013454:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8013458:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801345c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013460:	6819      	ldr	r1, [r3, #0]
 8013462:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013466:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8013470:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8013474:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8013478:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801347c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013480:	6019      	str	r1, [r3, #0]
 8013482:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013486:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801348a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 801348c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8013490:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            matData = read_q15x2_ia (&pInA4);
 8013494:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013498:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	1d1a      	adds	r2, r3, #4
 80134a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80134a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80134a8:	601a      	str	r2, [r3, #0]
 80134aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80134ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	3b04      	subs	r3, #4
 80134b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  memcpy (&val, pQ15, 4);
 80134ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	461a      	mov	r2, r3
 80134c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80134c6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80134ca:	601a      	str	r2, [r3, #0]
  return (val);
 80134cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80134d0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum4 = __SMLALD(matData, vecData, sum4);
 80134da:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80134de:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80134e2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80134e6:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
 80134ea:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 80134ee:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
  llr.w64 = acc;
 80134f2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80134f6:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80134fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80134fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8013502:	6819      	ldr	r1, [r3, #0]
 8013504:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013508:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801350c:	685a      	ldr	r2, [r3, #4]
 801350e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8013512:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8013516:	fbc0 12c3 	smlald	r1, r2, r0, r3
 801351a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801351e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8013522:	6019      	str	r1, [r3, #0]
 8013524:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013528:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801352c:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 801352e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8013532:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

            // Decrement the loop counter
            colCnt--;
 8013536:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801353a:	3b01      	subs	r3, #1
 801353c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0u) {
 8013540:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013544:	2b00      	cmp	r3, #0
 8013546:	f47f ae8f 	bne.w	8013268 <arm_mat_vec_mult_q15+0x132>
        }

        /* process any remaining columns */
        colCnt = numCols & 1u;
 801354a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801354e:	b29b      	uxth	r3, r3
 8013550:	f003 0301 	and.w	r3, r3, #1
 8013554:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        if (numCols & 1u) {
 8013558:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801355c:	f003 0301 	and.w	r3, r3, #1
 8013560:	2b00      	cmp	r3, #0
 8013562:	f000 80f1 	beq.w	8013748 <arm_mat_vec_mult_q15+0x612>
            vecData = *pInVec++;
 8013566:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801356a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801356e:	6819      	ldr	r1, [r3, #0]
 8013570:	1c8a      	adds	r2, r1, #2
 8013572:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013576:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801357a:	601a      	str	r2, [r3, #0]
 801357c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013580:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            sum1 += (q63_t)*pInA1++ * vecData;
 8013584:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013588:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801358c:	6819      	ldr	r1, [r3, #0]
 801358e:	1c8a      	adds	r2, r1, #2
 8013590:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013594:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013598:	601a      	str	r2, [r3, #0]
 801359a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801359e:	b21b      	sxth	r3, r3
 80135a0:	17da      	asrs	r2, r3, #31
 80135a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80135a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80135a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80135aa:	17da      	asrs	r2, r3, #31
 80135ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80135ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80135b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80135b4:	460b      	mov	r3, r1
 80135b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80135b8:	fb02 f203 	mul.w	r2, r2, r3
 80135bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80135be:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 80135c2:	4601      	mov	r1, r0
 80135c4:	fb01 f303 	mul.w	r3, r1, r3
 80135c8:	4413      	add	r3, r2
 80135ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80135cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80135ce:	fba2 1201 	umull	r1, r2, r2, r1
 80135d2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80135d6:	460a      	mov	r2, r1
 80135d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80135dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80135e0:	4413      	add	r3, r2
 80135e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80135e6:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80135ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80135ee:	1851      	adds	r1, r2, r1
 80135f0:	6239      	str	r1, [r7, #32]
 80135f2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80135f6:	414b      	adcs	r3, r1
 80135f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80135fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80135fe:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            sum2 += (q63_t)*pInA2++ * vecData;
 8013602:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013606:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801360a:	6819      	ldr	r1, [r3, #0]
 801360c:	1c8a      	adds	r2, r1, #2
 801360e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013612:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013616:	601a      	str	r2, [r3, #0]
 8013618:	f9b1 3000 	ldrsh.w	r3, [r1]
 801361c:	b21b      	sxth	r3, r3
 801361e:	17da      	asrs	r2, r3, #31
 8013620:	663b      	str	r3, [r7, #96]	@ 0x60
 8013622:	667a      	str	r2, [r7, #100]	@ 0x64
 8013624:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8013628:	17da      	asrs	r2, r3, #31
 801362a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801362c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801362e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8013632:	460b      	mov	r3, r1
 8013634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013636:	fb02 f203 	mul.w	r2, r2, r3
 801363a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801363c:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8013640:	4601      	mov	r1, r0
 8013642:	fb01 f303 	mul.w	r3, r1, r3
 8013646:	4413      	add	r3, r2
 8013648:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801364a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801364c:	fba2 1201 	umull	r1, r2, r2, r1
 8013650:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013652:	460a      	mov	r2, r1
 8013654:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013656:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013658:	4413      	add	r3, r2
 801365a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801365c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8013660:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013662:	1851      	adds	r1, r2, r1
 8013664:	61b9      	str	r1, [r7, #24]
 8013666:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013668:	414b      	adcs	r3, r1
 801366a:	61fb      	str	r3, [r7, #28]
 801366c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013670:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            sum3 += (q63_t)*pInA3++ * vecData;
 8013674:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013678:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801367c:	6819      	ldr	r1, [r3, #0]
 801367e:	1c8a      	adds	r2, r1, #2
 8013680:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013684:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801368e:	b21b      	sxth	r3, r3
 8013690:	17da      	asrs	r2, r3, #31
 8013692:	653b      	str	r3, [r7, #80]	@ 0x50
 8013694:	657a      	str	r2, [r7, #84]	@ 0x54
 8013696:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801369a:	17da      	asrs	r2, r3, #31
 801369c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801369e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80136a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80136a4:	460b      	mov	r3, r1
 80136a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80136a8:	fb02 f203 	mul.w	r2, r2, r3
 80136ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136ae:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 80136b2:	4601      	mov	r1, r0
 80136b4:	fb01 f303 	mul.w	r3, r1, r3
 80136b8:	4413      	add	r3, r2
 80136ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80136bc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80136be:	fba2 ab01 	umull	sl, fp, r2, r1
 80136c2:	445b      	add	r3, fp
 80136c4:	469b      	mov	fp, r3
 80136c6:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80136ca:	eb12 010a 	adds.w	r1, r2, sl
 80136ce:	6139      	str	r1, [r7, #16]
 80136d0:	eb43 030b 	adc.w	r3, r3, fp
 80136d4:	617b      	str	r3, [r7, #20]
 80136d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80136da:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            sum4 += (q63_t)*pInA4++ * vecData;
 80136de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80136e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80136e6:	6819      	ldr	r1, [r3, #0]
 80136e8:	1c8a      	adds	r2, r1, #2
 80136ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80136ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80136f2:	601a      	str	r2, [r3, #0]
 80136f4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80136f8:	b21b      	sxth	r3, r3
 80136fa:	17da      	asrs	r2, r3, #31
 80136fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80136fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8013700:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8013704:	17da      	asrs	r2, r3, #31
 8013706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013708:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801370a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801370e:	460b      	mov	r3, r1
 8013710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013712:	fb02 f203 	mul.w	r2, r2, r3
 8013716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013718:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 801371c:	4601      	mov	r1, r0
 801371e:	fb01 f303 	mul.w	r3, r1, r3
 8013722:	4413      	add	r3, r2
 8013724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013726:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013728:	fba2 8901 	umull	r8, r9, r2, r1
 801372c:	444b      	add	r3, r9
 801372e:	4699      	mov	r9, r3
 8013730:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8013734:	eb12 0108 	adds.w	r1, r2, r8
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	eb43 0309 	adc.w	r3, r3, r9
 801373e:	60fb      	str	r3, [r7, #12]
 8013740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013744:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
        }

        /* Saturate and store the result in the destination buffer */
        *px++ = (q15_t)(__SSAT((sum1 >> 15), 16));
 8013748:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 801374c:	f04f 0000 	mov.w	r0, #0
 8013750:	f04f 0100 	mov.w	r1, #0
 8013754:	0bd0      	lsrs	r0, r2, #15
 8013756:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 801375a:	13d9      	asrs	r1, r3, #15
 801375c:	4603      	mov	r3, r0
 801375e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8013762:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8013766:	f303 030f 	ssat	r3, #16, r3
 801376a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 801376e:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8013772:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8013776:	1c93      	adds	r3, r2, #2
 8013778:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801377c:	b20b      	sxth	r3, r1
 801377e:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum2 >> 15), 16));
 8013780:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8013784:	f04f 0000 	mov.w	r0, #0
 8013788:	f04f 0100 	mov.w	r1, #0
 801378c:	0bd0      	lsrs	r0, r2, #15
 801378e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8013792:	13d9      	asrs	r1, r3, #15
 8013794:	4603      	mov	r3, r0
 8013796:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801379a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801379e:	f303 030f 	ssat	r3, #16, r3
 80137a2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80137a6:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 80137aa:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80137ae:	1c93      	adds	r3, r2, #2
 80137b0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80137b4:	b20b      	sxth	r3, r1
 80137b6:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum3 >> 15), 16));
 80137b8:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80137bc:	f04f 0000 	mov.w	r0, #0
 80137c0:	f04f 0100 	mov.w	r1, #0
 80137c4:	0bd0      	lsrs	r0, r2, #15
 80137c6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80137ca:	13d9      	asrs	r1, r3, #15
 80137cc:	4603      	mov	r3, r0
 80137ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80137d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80137d6:	f303 030f 	ssat	r3, #16, r3
 80137da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80137de:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80137e2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80137e6:	1c93      	adds	r3, r2, #2
 80137e8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80137ec:	b20b      	sxth	r3, r1
 80137ee:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum4 >> 15), 16));
 80137f0:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80137f4:	f04f 0000 	mov.w	r0, #0
 80137f8:	f04f 0100 	mov.w	r1, #0
 80137fc:	0bd0      	lsrs	r0, r2, #15
 80137fe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8013802:	13d9      	asrs	r1, r3, #15
 8013804:	4603      	mov	r3, r0
 8013806:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801380a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801380e:	f303 030f 	ssat	r3, #16, r3
 8013812:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8013816:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 801381a:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801381e:	1c93      	adds	r3, r2, #2
 8013820:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8013824:	b20b      	sxth	r3, r1
 8013826:	8013      	strh	r3, [r2, #0]

        i = i + numCols * 4;
 8013828:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801382c:	b29b      	uxth	r3, r3
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	b29a      	uxth	r2, r3
 8013832:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8013836:	4413      	add	r3, r2
 8013838:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a

        /* Decrement the row loop counter */
        row--;
 801383c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8013840:	3b01      	subs	r3, #1
 8013842:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 8013846:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 801384a:	2b00      	cmp	r3, #0
 801384c:	f47f acaf 	bne.w	80131ae <arm_mat_vec_mult_q15+0x78>
    }

    /* process any remaining rows */
    row = numRows & 3u;
 8013850:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8013854:	b29b      	uxth	r3, r3
 8013856:	f003 0303 	and.w	r3, r3, #3
 801385a:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 801385e:	e1a3      	b.n	8013ba8 <arm_mat_vec_mult_q15+0xa72>

        q63_t sum = 0;
 8013860:	f04f 0200 	mov.w	r2, #0
 8013864:	f04f 0300 	mov.w	r3, #0
 8013868:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        pInVec = pVec;
 801386c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013870:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013874:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8013878:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 801387c:	6812      	ldr	r2, [r2, #0]
 801387e:	601a      	str	r2, [r3, #0]
        pInA1 = pSrcA + i;
 8013880:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8013884:	005b      	lsls	r3, r3, #1
 8013886:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 801388a:	441a      	add	r2, r3
 801388c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013890:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013894:	601a      	str	r2, [r3, #0]

        // loop unrolling - process 4 elements at a time
        colCnt = numCols >> 2;
 8013896:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801389a:	089b      	lsrs	r3, r3, #2
 801389c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        while (colCnt > 0) {
 80138a0:	e104      	b.n	8013aac <arm_mat_vec_mult_q15+0x976>
            vecData = read_q15x2_ia (&pInVec);
 80138a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	1d1a      	adds	r2, r3, #4
 80138ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80138b6:	601a      	str	r2, [r3, #0]
 80138b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	1f1a      	subs	r2, r3, #4
 80138c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80138cc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80138ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	461a      	mov	r2, r3
 80138dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80138e4:	601a      	str	r2, [r3, #0]
  return (val);
 80138e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            vecData2 = read_q15x2_ia (&pInVec);
 80138f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80138f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	1d1a      	adds	r2, r3, #4
 8013900:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013904:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801390e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	1f1a      	subs	r2, r3, #4
 8013916:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801391a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801391e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013920:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013924:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	461a      	mov	r2, r3
 801392e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013932:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8013936:	601a      	str	r2, [r3, #0]
  return (val);
 8013938:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801393c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
            matData = read_q15x2_ia (&pInA1);
 8013946:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801394a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	1d1a      	adds	r2, r3, #4
 8013952:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013956:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801395a:	601a      	str	r2, [r3, #0]
 801395c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013960:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	1f1a      	subs	r2, r3, #4
 8013968:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801396c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013970:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013972:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	461a      	mov	r2, r3
 8013980:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013984:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013988:	601a      	str	r2, [r3, #0]
  return (val);
 801398a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801398e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            matData2 = read_q15x2_ia (&pInA1);
 8013998:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801399c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	1d1a      	adds	r2, r3, #4
 80139a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80139a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80139ac:	601a      	str	r2, [r3, #0]
 80139ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80139b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	1f1a      	subs	r2, r3, #4
 80139ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80139be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80139c2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80139c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80139c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	461a      	mov	r2, r3
 80139d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80139d6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80139da:	601a      	str	r2, [r3, #0]
  return (val);
 80139dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80139e0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            sum = __SMLALD(matData, vecData, sum);
 80139ea:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80139ee:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80139f2:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80139f6:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80139fa:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 80139fe:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  llr.w64 = acc;
 8013a02:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8013a06:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8013a0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013a0e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013a18:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8013a22:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8013a26:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8013a2a:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8013a2e:	f5a1 71c0 	sub.w	r1, r1, #384	@ 0x180
 8013a32:	600a      	str	r2, [r1, #0]
 8013a34:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8013a38:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8013a3c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8013a3e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8013a42:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            sum = __SMLALD(matData2, vecData2, sum);
 8013a46:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8013a4a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8013a4e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8013a52:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 8013a56:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8013a5a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
  llr.w64 = acc;
 8013a5e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8013a62:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8013a66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013a6a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013a74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8013a7e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8013a82:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8013a86:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8013a8a:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8013a8e:	600a      	str	r2, [r1, #0]
 8013a90:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8013a94:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8013a98:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8013a9a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8013a9e:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 8013aa2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013aa6:	3b01      	subs	r3, #1
 8013aa8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8013aac:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	f47f aef6 	bne.w	80138a2 <arm_mat_vec_mult_q15+0x76c>
        }

        // process remainder of row
        colCnt = numCols & 3u;
 8013ab6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	f003 0303 	and.w	r3, r3, #3
 8013ac0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8013ac4:	e043      	b.n	8013b4e <arm_mat_vec_mult_q15+0xa18>
            sum += (q63_t)*pInA1++ * *pInVec++;
 8013ac6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013aca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	1c99      	adds	r1, r3, #2
 8013ad2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8013ad6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8013ada:	6011      	str	r1, [r2, #0]
 8013adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ae0:	b21b      	sxth	r3, r3
 8013ae2:	17da      	asrs	r2, r3, #31
 8013ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ae6:	637a      	str	r2, [r7, #52]	@ 0x34
 8013ae8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8013aec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	1c99      	adds	r1, r3, #2
 8013af4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8013af8:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8013afc:	6011      	str	r1, [r2, #0]
 8013afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b02:	b21b      	sxth	r3, r3
 8013b04:	17da      	asrs	r2, r3, #31
 8013b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013b0a:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8013b0e:	464b      	mov	r3, r9
 8013b10:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8013b14:	4652      	mov	r2, sl
 8013b16:	fb02 f203 	mul.w	r2, r2, r3
 8013b1a:	465b      	mov	r3, fp
 8013b1c:	4641      	mov	r1, r8
 8013b1e:	fb01 f303 	mul.w	r3, r1, r3
 8013b22:	4413      	add	r3, r2
 8013b24:	4642      	mov	r2, r8
 8013b26:	4651      	mov	r1, sl
 8013b28:	fba2 4501 	umull	r4, r5, r2, r1
 8013b2c:	442b      	add	r3, r5
 8013b2e:	461d      	mov	r5, r3
 8013b30:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8013b34:	1911      	adds	r1, r2, r4
 8013b36:	6039      	str	r1, [r7, #0]
 8013b38:	416b      	adcs	r3, r5
 8013b3a:	607b      	str	r3, [r7, #4]
 8013b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b40:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 8013b44:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b48:	3b01      	subs	r3, #1
 8013b4a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8013b4e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1b7      	bne.n	8013ac6 <arm_mat_vec_mult_q15+0x990>
        }
        *px++ = (q15_t)(__SSAT((sum >> 15), 16));
 8013b56:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8013b5a:	f04f 0200 	mov.w	r2, #0
 8013b5e:	f04f 0300 	mov.w	r3, #0
 8013b62:	0bc2      	lsrs	r2, r0, #15
 8013b64:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8013b68:	13cb      	asrs	r3, r1, #15
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8013b70:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8013b74:	f303 030f 	ssat	r3, #16, r3
 8013b78:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8013b7c:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 8013b80:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8013b84:	1c9a      	adds	r2, r3, #2
 8013b86:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8013b8a:	b20a      	sxth	r2, r1
 8013b8c:	801a      	strh	r2, [r3, #0]
        i = i + numCols;
 8013b8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8013b92:	b29a      	uxth	r2, r3
 8013b94:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8013b98:	4413      	add	r3, r2
 8013b9a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
        row--;
 8013b9e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8013ba2:	3b01      	subs	r3, #1
 8013ba4:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 8013ba8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f47f ae57 	bne.w	8013860 <arm_mat_vec_mult_q15+0x72a>
    }
}
 8013bb2:	bf00      	nop
 8013bb4:	bf00      	nop
 8013bb6:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8013bc0:	4770      	bx	lr

08013bc2 <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8013bc2:	b480      	push	{r7}
 8013bc4:	b09d      	sub	sp, #116	@ 0x74
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	60f8      	str	r0, [r7, #12]
 8013bca:	60b9      	str	r1, [r7, #8]
 8013bcc:	607a      	str	r2, [r7, #4]
 8013bce:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	1c9a      	adds	r2, r3, #2
 8013bd8:	60fa      	str	r2, [r7, #12]
 8013bda:	881b      	ldrh	r3, [r3, #0]
 8013bdc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8013be0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	dc0c      	bgt.n	8013c02 <arm_absmax_q15+0x40>
 8013be8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013bec:	2200      	movs	r2, #0
 8013bee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8013bf0:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013bf6:	fad3 f312 	qsub16	r3, r3, r2
 8013bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8013bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bfe:	b21b      	sxth	r3, r3
 8013c00:	e001      	b.n	8013c06 <arm_absmax_q15+0x44>
 8013c02:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013c06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	089b      	lsrs	r3, r3, #2
 8013c14:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8013c16:	e0a5      	b.n	8013d64 <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	1c9a      	adds	r2, r3, #2
 8013c1c:	60fa      	str	r2, [r7, #12]
 8013c1e:	881b      	ldrh	r3, [r3, #0]
 8013c20:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8013c24:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	dc0c      	bgt.n	8013c46 <arm_absmax_q15+0x84>
 8013c2c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013c30:	2200      	movs	r2, #0
 8013c32:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013c3a:	fad3 f312 	qsub16	r3, r3, r2
 8013c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8013c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c42:	b21b      	sxth	r3, r3
 8013c44:	e001      	b.n	8013c4a <arm_absmax_q15+0x88>
 8013c46:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013c4a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8013c4e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8013c52:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013c56:	429a      	cmp	r2, r3
 8013c58:	dd06      	ble.n	8013c68 <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8013c5a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8013c5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 8013c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013c64:	3301      	adds	r3, #1
 8013c66:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	1c9a      	adds	r2, r3, #2
 8013c6c:	60fa      	str	r2, [r7, #12]
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8013c74:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	dc0c      	bgt.n	8013c96 <arm_absmax_q15+0xd4>
 8013c7c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013c80:	2200      	movs	r2, #0
 8013c82:	643a      	str	r2, [r7, #64]	@ 0x40
 8013c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013c8a:	fad3 f312 	qsub16	r3, r3, r2
 8013c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8013c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c92:	b21b      	sxth	r3, r3
 8013c94:	e001      	b.n	8013c9a <arm_absmax_q15+0xd8>
 8013c96:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013c9a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 8013c9e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8013ca2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	dd06      	ble.n	8013cb8 <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8013caa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8013cae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 8013cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013cb4:	3302      	adds	r3, #2
 8013cb6:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	1c9a      	adds	r2, r3, #2
 8013cbc:	60fa      	str	r2, [r7, #12]
 8013cbe:	881b      	ldrh	r3, [r3, #0]
 8013cc0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8013cc4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	dc0c      	bgt.n	8013ce6 <arm_absmax_q15+0x124>
 8013ccc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	637a      	str	r2, [r7, #52]	@ 0x34
 8013cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cda:	fad3 f312 	qsub16	r3, r3, r2
 8013cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8013ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce2:	b21b      	sxth	r3, r3
 8013ce4:	e001      	b.n	8013cea <arm_absmax_q15+0x128>
 8013ce6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013cea:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8013cee:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8013cf2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	dd06      	ble.n	8013d08 <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8013cfa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8013cfe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 8013d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d04:	3303      	adds	r3, #3
 8013d06:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	1c9a      	adds	r2, r3, #2
 8013d0c:	60fa      	str	r2, [r7, #12]
 8013d0e:	881b      	ldrh	r3, [r3, #0]
 8013d10:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8013d14:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	dc0c      	bgt.n	8013d36 <arm_absmax_q15+0x174>
 8013d1c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013d20:	2200      	movs	r2, #0
 8013d22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013d24:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d2a:	fad3 f312 	qsub16	r3, r3, r2
 8013d2e:	623b      	str	r3, [r7, #32]
  return(result);
 8013d30:	6a3b      	ldr	r3, [r7, #32]
 8013d32:	b21b      	sxth	r3, r3
 8013d34:	e001      	b.n	8013d3a <arm_absmax_q15+0x178>
 8013d36:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013d3a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8013d3e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8013d42:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013d46:	429a      	cmp	r2, r3
 8013d48:	dd06      	ble.n	8013d58 <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8013d4a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8013d4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 8013d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d54:	3304      	adds	r3, #4
 8013d56:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 8013d58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d5a:	3304      	adds	r3, #4
 8013d5c:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8013d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d60:	3b01      	subs	r3, #1
 8013d62:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8013d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f47f af56 	bne.w	8013c18 <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	3b01      	subs	r3, #1
 8013d70:	f003 0303 	and.w	r3, r3, #3
 8013d74:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8013d76:	e02b      	b.n	8013dd0 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	1c9a      	adds	r2, r3, #2
 8013d7c:	60fa      	str	r2, [r7, #12]
 8013d7e:	881b      	ldrh	r3, [r3, #0]
 8013d80:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8013d84:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	dc0c      	bgt.n	8013da6 <arm_absmax_q15+0x1e4>
 8013d8c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013d90:	2200      	movs	r2, #0
 8013d92:	61fa      	str	r2, [r7, #28]
 8013d94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d96:	69fb      	ldr	r3, [r7, #28]
 8013d98:	69ba      	ldr	r2, [r7, #24]
 8013d9a:	fad3 f312 	qsub16	r3, r3, r2
 8013d9e:	617b      	str	r3, [r7, #20]
  return(result);
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	b21b      	sxth	r3, r3
 8013da4:	e001      	b.n	8013daa <arm_absmax_q15+0x1e8>
 8013da6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8013daa:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 8013dae:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8013db2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8013db6:	429a      	cmp	r2, r3
 8013db8:	dd07      	ble.n	8013dca <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8013dba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8013dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 8013dc2:	68ba      	ldr	r2, [r7, #8]
 8013dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8013dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013dcc:	3b01      	subs	r3, #1
 8013dce:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8013dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d1d0      	bne.n	8013d78 <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8013ddc:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013de2:	601a      	str	r2, [r3, #0]
}
 8013de4:	bf00      	nop
 8013de6:	3774      	adds	r7, #116	@ 0x74
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr

08013df0 <arm_copy_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_copy_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8013df0:	b480      	push	{r7}
 8013df2:	b087      	sub	sp, #28
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013e00:	e00b      	b.n	8013e1a <arm_copy_q15+0x2a>
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 8013e02:	68fa      	ldr	r2, [r7, #12]
 8013e04:	1c93      	adds	r3, r2, #2
 8013e06:	60fb      	str	r3, [r7, #12]
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	1c99      	adds	r1, r3, #2
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013e12:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	3b01      	subs	r3, #1
 8013e18:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d1f0      	bne.n	8013e02 <arm_copy_q15+0x12>
  }
}
 8013e20:	bf00      	nop
 8013e22:	bf00      	nop
 8013e24:	371c      	adds	r7, #28
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr

08013e2e <arm_bitreversal_16>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_16(
        uint16_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8013e2e:	b480      	push	{r7}
 8013e30:	b089      	sub	sp, #36	@ 0x24
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	60f8      	str	r0, [r7, #12]
 8013e36:	460b      	mov	r3, r1
 8013e38:	607a      	str	r2, [r7, #4]
 8013e3a:	817b      	strh	r3, [r7, #10]
  uint16_t a, b, tmp;
  uint32_t i;

  for (i = 0; i < bitRevLen; )
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	61fb      	str	r3, [r7, #28]
 8013e40:	e041      	b.n	8013ec6 <arm_bitreversal_16+0x98>
  {
     a = pBitRevTab[i    ] >> 2;
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	005b      	lsls	r3, r3, #1
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	4413      	add	r3, r2
 8013e4a:	881b      	ldrh	r3, [r3, #0]
 8013e4c:	089b      	lsrs	r3, r3, #2
 8013e4e:	837b      	strh	r3, [r7, #26]
     b = pBitRevTab[i + 1] >> 2;
 8013e50:	69fb      	ldr	r3, [r7, #28]
 8013e52:	3301      	adds	r3, #1
 8013e54:	005b      	lsls	r3, r3, #1
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	4413      	add	r3, r2
 8013e5a:	881b      	ldrh	r3, [r3, #0]
 8013e5c:	089b      	lsrs	r3, r3, #2
 8013e5e:	833b      	strh	r3, [r7, #24]

     //real
     tmp = pSrc[a];
 8013e60:	8b7b      	ldrh	r3, [r7, #26]
 8013e62:	005b      	lsls	r3, r3, #1
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	4413      	add	r3, r2
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	82fb      	strh	r3, [r7, #22]
     pSrc[a] = pSrc[b];
 8013e6c:	8b3b      	ldrh	r3, [r7, #24]
 8013e6e:	005b      	lsls	r3, r3, #1
 8013e70:	68fa      	ldr	r2, [r7, #12]
 8013e72:	441a      	add	r2, r3
 8013e74:	8b7b      	ldrh	r3, [r7, #26]
 8013e76:	005b      	lsls	r3, r3, #1
 8013e78:	68f9      	ldr	r1, [r7, #12]
 8013e7a:	440b      	add	r3, r1
 8013e7c:	8812      	ldrh	r2, [r2, #0]
 8013e7e:	801a      	strh	r2, [r3, #0]
     pSrc[b] = tmp;
 8013e80:	8b3b      	ldrh	r3, [r7, #24]
 8013e82:	005b      	lsls	r3, r3, #1
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	4413      	add	r3, r2
 8013e88:	8afa      	ldrh	r2, [r7, #22]
 8013e8a:	801a      	strh	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8013e8c:	8b7b      	ldrh	r3, [r7, #26]
 8013e8e:	3301      	adds	r3, #1
 8013e90:	005b      	lsls	r3, r3, #1
 8013e92:	68fa      	ldr	r2, [r7, #12]
 8013e94:	4413      	add	r3, r2
 8013e96:	881b      	ldrh	r3, [r3, #0]
 8013e98:	82fb      	strh	r3, [r7, #22]
     pSrc[a+1] = pSrc[b+1];
 8013e9a:	8b3b      	ldrh	r3, [r7, #24]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	68fa      	ldr	r2, [r7, #12]
 8013ea2:	441a      	add	r2, r3
 8013ea4:	8b7b      	ldrh	r3, [r7, #26]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	005b      	lsls	r3, r3, #1
 8013eaa:	68f9      	ldr	r1, [r7, #12]
 8013eac:	440b      	add	r3, r1
 8013eae:	8812      	ldrh	r2, [r2, #0]
 8013eb0:	801a      	strh	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8013eb2:	8b3b      	ldrh	r3, [r7, #24]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	005b      	lsls	r3, r3, #1
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	4413      	add	r3, r2
 8013ebc:	8afa      	ldrh	r2, [r7, #22]
 8013ebe:	801a      	strh	r2, [r3, #0]

    i += 2;
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	3302      	adds	r3, #2
 8013ec4:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8013ec6:	897b      	ldrh	r3, [r7, #10]
 8013ec8:	69fa      	ldr	r2, [r7, #28]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d3b9      	bcc.n	8013e42 <arm_bitreversal_16+0x14>
  }
}
 8013ece:	bf00      	nop
 8013ed0:	bf00      	nop
 8013ed2:	3724      	adds	r7, #36	@ 0x24
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <arm_cfft_q15>:
ARM_DSP_ATTRIBUTE void arm_cfft_q15(
  const arm_cfft_instance_q15 * S,
        q15_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b086      	sub	sp, #24
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	461a      	mov	r2, r3
 8013eea:	460b      	mov	r3, r1
 8013eec:	71fb      	strb	r3, [r7, #7]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	71bb      	strb	r3, [r7, #6]
  uint32_t L = S->fftLen;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	881b      	ldrh	r3, [r3, #0]
 8013ef6:	617b      	str	r3, [r7, #20]

  if (ifftFlag == 1U)
 8013ef8:	79fb      	ldrb	r3, [r7, #7]
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d14c      	bne.n	8013f98 <arm_cfft_q15+0xbc>
  {
     switch (L)
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013f04:	d038      	beq.n	8013f78 <arm_cfft_q15+0x9c>
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013f0c:	f200 808f 	bhi.w	801402e <arm_cfft_q15+0x152>
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013f16:	d037      	beq.n	8013f88 <arm_cfft_q15+0xac>
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013f1e:	f200 8086 	bhi.w	801402e <arm_cfft_q15+0x152>
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013f28:	d026      	beq.n	8013f78 <arm_cfft_q15+0x9c>
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013f30:	d87d      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013f38:	d026      	beq.n	8013f88 <arm_cfft_q15+0xac>
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013f40:	d875      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013f48:	d016      	beq.n	8013f78 <arm_cfft_q15+0x9c>
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013f50:	d86d      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	2b80      	cmp	r3, #128	@ 0x80
 8013f56:	d017      	beq.n	8013f88 <arm_cfft_q15+0xac>
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	2b80      	cmp	r3, #128	@ 0x80
 8013f5c:	d867      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	2b40      	cmp	r3, #64	@ 0x40
 8013f62:	d009      	beq.n	8013f78 <arm_cfft_q15+0x9c>
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	2b40      	cmp	r3, #64	@ 0x40
 8013f68:	d861      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	2b10      	cmp	r3, #16
 8013f6e:	d003      	beq.n	8013f78 <arm_cfft_q15+0x9c>
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	2b20      	cmp	r3, #32
 8013f74:	d008      	beq.n	8013f88 <arm_cfft_q15+0xac>
 8013f76:	e05a      	b.n	801402e <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_inverse_q15 ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	685a      	ldr	r2, [r3, #4]
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	6979      	ldr	r1, [r7, #20]
 8013f80:	68b8      	ldr	r0, [r7, #8]
 8013f82:	f001 ffdf 	bl	8015f44 <arm_radix4_butterfly_inverse_q15>
       break;
 8013f86:	e052      	b.n	801402e <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_inverse_q15 ( p1, L, S->pTwiddle );
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	685b      	ldr	r3, [r3, #4]
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	6979      	ldr	r1, [r7, #20]
 8013f90:	68b8      	ldr	r0, [r7, #8]
 8013f92:	f000 f9a7 	bl	80142e4 <arm_cfft_radix4by2_inverse_q15>
       break;
 8013f96:	e04a      	b.n	801402e <arm_cfft_q15+0x152>
     }
  }
  else
  {
     switch (L)
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013f9e:	d036      	beq.n	801400e <arm_cfft_q15+0x132>
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013fa6:	d842      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013fae:	d036      	beq.n	801401e <arm_cfft_q15+0x142>
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013fb6:	d83a      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013fbe:	d026      	beq.n	801400e <arm_cfft_q15+0x132>
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013fc6:	d832      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013fce:	d026      	beq.n	801401e <arm_cfft_q15+0x142>
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013fd6:	d82a      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013fde:	d016      	beq.n	801400e <arm_cfft_q15+0x132>
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013fe6:	d822      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	2b80      	cmp	r3, #128	@ 0x80
 8013fec:	d017      	beq.n	801401e <arm_cfft_q15+0x142>
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	2b80      	cmp	r3, #128	@ 0x80
 8013ff2:	d81c      	bhi.n	801402e <arm_cfft_q15+0x152>
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	2b40      	cmp	r3, #64	@ 0x40
 8013ff8:	d009      	beq.n	801400e <arm_cfft_q15+0x132>
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	2b40      	cmp	r3, #64	@ 0x40
 8013ffe:	d816      	bhi.n	801402e <arm_cfft_q15+0x152>
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	2b10      	cmp	r3, #16
 8014004:	d003      	beq.n	801400e <arm_cfft_q15+0x132>
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	2b20      	cmp	r3, #32
 801400a:	d008      	beq.n	801401e <arm_cfft_q15+0x142>
 801400c:	e00f      	b.n	801402e <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	685a      	ldr	r2, [r3, #4]
 8014012:	2301      	movs	r3, #1
 8014014:	6979      	ldr	r1, [r7, #20]
 8014016:	68b8      	ldr	r0, [r7, #8]
 8014018:	f000 fab0 	bl	801457c <arm_radix4_butterfly_q15>
       break;
 801401c:	e007      	b.n	801402e <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	461a      	mov	r2, r3
 8014024:	6979      	ldr	r1, [r7, #20]
 8014026:	68b8      	ldr	r0, [r7, #8]
 8014028:	f000 f810 	bl	801404c <arm_cfft_radix4by2_q15>
       break;
 801402c:	bf00      	nop
     }
  }

  if ( bitReverseFlag )
 801402e:	79bb      	ldrb	r3, [r7, #6]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d007      	beq.n	8014044 <arm_cfft_q15+0x168>
    arm_bitreversal_16 ((uint16_t*) p1, S->bitRevLength, S->pBitRevTable);
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	8999      	ldrh	r1, [r3, #12]
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	689b      	ldr	r3, [r3, #8]
 801403c:	461a      	mov	r2, r3
 801403e:	68b8      	ldr	r0, [r7, #8]
 8014040:	f7ff fef5 	bl	8013e2e <arm_bitreversal_16>
}
 8014044:	bf00      	nop
 8014046:	3718      	adds	r7, #24
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <arm_cfft_radix4by2_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b0b0      	sub	sp, #192	@ 0xc0
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	005b      	lsls	r3, r3, #1
 8014064:	68fa      	ldr	r2, [r7, #12]
 8014066:	4413      	add	r3, r2
 8014068:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	085b      	lsrs	r3, r3, #1
 801406e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8014072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801407a:	e0a9      	b.n	80141d0 <arm_cfft_radix4by2_q15+0x184>
  {
      coeff = read_q15x2_ia (&pC);
 801407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801407e:	3304      	adds	r3, #4
 8014080:	633b      	str	r3, [r7, #48]	@ 0x30
 8014082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014084:	3b04      	subs	r3, #4
 8014086:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8014088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 801408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      T = read_q15x2 (pSi);
 8014094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014096:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8014098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	623b      	str	r3, [r7, #32]
  return (val);
 801409e:	6a3b      	ldr	r3, [r7, #32]
 80140a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80140a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80140a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80140aa:	2300      	movs	r3, #0
 80140ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80140ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80140b2:	fa93 f322 	shadd16	r3, r3, r2
 80140b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80140b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      S = read_q15x2 (pSl);
 80140be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 80140c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	61fb      	str	r3, [r7, #28]
  return (val);
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80140ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80140d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80140d4:	2300      	movs	r3, #0
 80140d6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80140d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80140dc:	fa93 f322 	shadd16	r3, r3, r2
 80140e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 80140e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      R = __QSUB16(T, S);
 80140e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80140ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80140f0:	663a      	str	r2, [r7, #96]	@ 0x60
 80140f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80140f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80140f8:	fad3 f312 	qsub16	r3, r3, r2
 80140fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 80140fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014100:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      write_q15x2_ia (&pSi, __SHADD16(T, S));
 8014104:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014108:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801410c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801410e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014112:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014114:	fa93 f322 	shadd16	r3, r3, r2
 8014118:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 801411a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801411c:	461a      	mov	r2, r3
 801411e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014122:	677b      	str	r3, [r7, #116]	@ 0x74
 8014124:	673a      	str	r2, [r7, #112]	@ 0x70
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8014126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014128:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 801412a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	69ba      	ldr	r2, [r7, #24]
 8014130:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8014132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	1d1a      	adds	r2, r3, #4
 8014138:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801413a:	601a      	str	r2, [r3, #0]
}
 801413c:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
      out1 = __SMUAD(coeff, R) >> 16U;
 801413e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801414a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801414c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014150:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014152:	fb23 f302 	smuad	r3, r3, r2
 8014156:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8014158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801415a:	0c1b      	lsrs	r3, r3, #16
 801415c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      out2 = __SMUSDX(coeff, R);
 8014160:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014168:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801416c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014174:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014178:	fb43 f312 	smusdx	r3, r3, r2
 801417c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8014180:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
      out1 = __SMUSDX(R, coeff) >> 16U;
      out2 = __SMUAD(coeff, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ) );
 8014188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801418c:	b29a      	uxth	r2, r3
 801418e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8014192:	4b53      	ldr	r3, [pc, #332]	@ (80142e0 <arm_cfft_radix4by2_q15+0x294>)
 8014194:	400b      	ands	r3, r1
 8014196:	4313      	orrs	r3, r2
 8014198:	461a      	mov	r2, r3
 801419a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801419e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80141a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 80141a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80141aa:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 80141ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	697a      	ldr	r2, [r7, #20]
 80141b4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80141b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	1d1a      	adds	r2, r3, #4
 80141be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80141c2:	601a      	str	r2, [r3, #0]
}
 80141c4:	bf00      	nop
  for (i = n2; i > 0; i--)
 80141c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80141ca:	3b01      	subs	r3, #1
 80141cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80141d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f47f af51 	bne.w	801407c <arm_cfft_radix4by2_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 80141da:	2302      	movs	r3, #2
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80141e2:	68f8      	ldr	r0, [r7, #12]
 80141e4:	f000 f9ca 	bl	801457c <arm_radix4_butterfly_q15>

  /* second col */
  arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	005b      	lsls	r3, r3, #1
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	18d0      	adds	r0, r2, r3
 80141f0:	2302      	movs	r3, #2
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80141f8:	f000 f9c0 	bl	801457c <arm_radix4_butterfly_q15>

  n2 = fftLen >> 1U;
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	085b      	lsrs	r3, r3, #1
 8014200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8014204:	2300      	movs	r3, #0
 8014206:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801420a:	e05e      	b.n	80142ca <arm_cfft_radix4by2_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 801420c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014210:	00db      	lsls	r3, r3, #3
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	4413      	add	r3, r2
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 801421c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	3302      	adds	r3, #2
 8014224:	68fa      	ldr	r2, [r7, #12]
 8014226:	4413      	add	r3, r2
 8014228:	881b      	ldrh	r3, [r3, #0]
 801422a:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 801422e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014232:	00db      	lsls	r3, r3, #3
 8014234:	3304      	adds	r3, #4
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	4413      	add	r3, r2
 801423a:	881b      	ldrh	r3, [r3, #0]
 801423c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8014240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014244:	00db      	lsls	r3, r3, #3
 8014246:	3306      	adds	r3, #6
 8014248:	68fa      	ldr	r2, [r7, #12]
 801424a:	4413      	add	r3, r2
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8014252:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8014256:	005b      	lsls	r3, r3, #1
 8014258:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 801425c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8014260:	005b      	lsls	r3, r3, #1
 8014262:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8014266:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801426a:	005b      	lsls	r3, r3, #1
 801426c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8014270:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8014274:	005b      	lsls	r3, r3, #1
 8014276:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 801427a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801427e:	00db      	lsls	r3, r3, #3
 8014280:	68fa      	ldr	r2, [r7, #12]
 8014282:	4413      	add	r3, r2
 8014284:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8014288:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 801428a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801428e:	00db      	lsls	r3, r3, #3
 8014290:	3302      	adds	r3, #2
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	4413      	add	r3, r2
 8014296:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 801429a:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 801429c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	3304      	adds	r3, #4
 80142a4:	68fa      	ldr	r2, [r7, #12]
 80142a6:	4413      	add	r3, r2
 80142a8:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 80142ac:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 80142ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	3306      	adds	r3, #6
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	4413      	add	r3, r2
 80142ba:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 80142be:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 80142c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80142c4:	3301      	adds	r3, #1
 80142c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80142ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80142ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d39a      	bcc.n	801420c <arm_cfft_radix4by2_q15+0x1c0>
  }

}
 80142d6:	bf00      	nop
 80142d8:	bf00      	nop
 80142da:	37c0      	adds	r7, #192	@ 0xc0
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	ffff0000 	.word	0xffff0000

080142e4 <arm_cfft_radix4by2_inverse_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_inverse_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b0b0      	sub	sp, #192	@ 0xc0
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60f8      	str	r0, [r7, #12]
 80142ec:	60b9      	str	r1, [r7, #8]
 80142ee:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	68fa      	ldr	r2, [r7, #12]
 80142fe:	4413      	add	r3, r2
 8014300:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	085b      	lsrs	r3, r3, #1
 8014306:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 801430a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801430e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014312:	e0a9      	b.n	8014468 <arm_cfft_radix4by2_inverse_q15+0x184>
  {
     coeff = read_q15x2_ia (&pC);
 8014314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014316:	3304      	adds	r3, #4
 8014318:	633b      	str	r3, [r7, #48]	@ 0x30
 801431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801431c:	3b04      	subs	r3, #4
 801431e:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8014320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8014326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

     T = read_q15x2 (pSi);
 801432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801432e:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8014330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	623b      	str	r3, [r7, #32]
  return (val);
 8014336:	6a3b      	ldr	r3, [r7, #32]
 8014338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
     T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 801433c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014340:	647b      	str	r3, [r7, #68]	@ 0x44
 8014342:	2300      	movs	r3, #0
 8014344:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014348:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801434a:	fa93 f322 	shadd16	r3, r3, r2
 801434e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8014350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

     S = read_q15x2 (pSl);
 8014356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014358:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 801435a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	61fb      	str	r3, [r7, #28]
  return (val);
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
     S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8014366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801436a:	657b      	str	r3, [r7, #84]	@ 0x54
 801436c:	2300      	movs	r3, #0
 801436e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014372:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014374:	fa93 f322 	shadd16	r3, r3, r2
 8014378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 801437a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801437c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

     R = __QSUB16(T, S);
 8014380:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014388:	663a      	str	r2, [r7, #96]	@ 0x60
 801438a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801438c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801438e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014390:	fad3 f312 	qsub16	r3, r3, r2
 8014394:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8014396:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014398:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

     write_q15x2_ia (&pSi, __SHADD16(T, S));
 801439c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80143a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80143a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80143a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80143a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80143aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80143ac:	fa93 f322 	shadd16	r3, r3, r2
 80143b0:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 80143b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80143b4:	461a      	mov	r2, r3
 80143b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80143ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80143bc:	673a      	str	r2, [r7, #112]	@ 0x70
  q31_t val = value;
 80143be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80143c0:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ15, &val, 4);
 80143c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	69ba      	ldr	r2, [r7, #24]
 80143c8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80143ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	1d1a      	adds	r2, r3, #4
 80143d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143d2:	601a      	str	r2, [r3, #0]
}
 80143d4:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
     out1 = __SMUSD(coeff, R) >> 16U;
 80143d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80143da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80143e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80143e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80143ea:	fb43 f302 	smusd	r3, r3, r2
 80143ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 80143f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80143f2:	0c1b      	lsrs	r3, r3, #16
 80143f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
     out2 = __SMUADX(coeff, R);
 80143f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80143fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014400:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801440c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014410:	fb23 f312 	smuadx	r3, r3, r2
 8014414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8014418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801441c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
     out1 = __SMUADX(R, coeff) >> 16U;
     out2 = __SMUSD(__QSUB(0, coeff), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

     write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ));
 8014420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014424:	b29a      	uxth	r2, r3
 8014426:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801442a:	4b53      	ldr	r3, [pc, #332]	@ (8014578 <arm_cfft_radix4by2_inverse_q15+0x294>)
 801442c:	400b      	ands	r3, r1
 801442e:	4313      	orrs	r3, r2
 8014430:	461a      	mov	r2, r3
 8014432:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801443a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 801443e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014442:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8014444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	697a      	ldr	r2, [r7, #20]
 801444c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801444e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	1d1a      	adds	r2, r3, #4
 8014456:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801445a:	601a      	str	r2, [r3, #0]
}
 801445c:	bf00      	nop
  for (i = n2; i > 0; i--)
 801445e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014462:	3b01      	subs	r3, #1
 8014464:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801446c:	2b00      	cmp	r3, #0
 801446e:	f47f af51 	bne.w	8014314 <arm_cfft_radix4by2_inverse_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_inverse_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8014472:	2302      	movs	r3, #2
 8014474:	687a      	ldr	r2, [r7, #4]
 8014476:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 801447a:	68f8      	ldr	r0, [r7, #12]
 801447c:	f001 fd62 	bl	8015f44 <arm_radix4_butterfly_inverse_q15>

  /* second col */
  arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	005b      	lsls	r3, r3, #1
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	18d0      	adds	r0, r2, r3
 8014488:	2302      	movs	r3, #2
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8014490:	f001 fd58 	bl	8015f44 <arm_radix4_butterfly_inverse_q15>

  n2 = fftLen >> 1U;
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	085b      	lsrs	r3, r3, #1
 8014498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 801449c:	2300      	movs	r3, #0
 801449e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80144a2:	e05e      	b.n	8014562 <arm_cfft_radix4by2_inverse_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 80144a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80144a8:	00db      	lsls	r3, r3, #3
 80144aa:	68fa      	ldr	r2, [r7, #12]
 80144ac:	4413      	add	r3, r2
 80144ae:	881b      	ldrh	r3, [r3, #0]
 80144b0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 80144b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80144b8:	00db      	lsls	r3, r3, #3
 80144ba:	3302      	adds	r3, #2
 80144bc:	68fa      	ldr	r2, [r7, #12]
 80144be:	4413      	add	r3, r2
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 80144c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80144ca:	00db      	lsls	r3, r3, #3
 80144cc:	3304      	adds	r3, #4
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	4413      	add	r3, r2
 80144d2:	881b      	ldrh	r3, [r3, #0]
 80144d4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 80144d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80144dc:	00db      	lsls	r3, r3, #3
 80144de:	3306      	adds	r3, #6
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	4413      	add	r3, r2
 80144e4:	881b      	ldrh	r3, [r3, #0]
 80144e6:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 80144ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 80144f4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 80144fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8014502:	005b      	lsls	r3, r3, #1
 8014504:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8014508:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 8014512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014516:	00db      	lsls	r3, r3, #3
 8014518:	68fa      	ldr	r2, [r7, #12]
 801451a:	4413      	add	r3, r2
 801451c:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8014520:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 8014522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014526:	00db      	lsls	r3, r3, #3
 8014528:	3302      	adds	r3, #2
 801452a:	68fa      	ldr	r2, [r7, #12]
 801452c:	4413      	add	r3, r2
 801452e:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8014532:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 8014534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014538:	00db      	lsls	r3, r3, #3
 801453a:	3304      	adds	r3, #4
 801453c:	68fa      	ldr	r2, [r7, #12]
 801453e:	4413      	add	r3, r2
 8014540:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8014544:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8014546:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801454a:	00db      	lsls	r3, r3, #3
 801454c:	3306      	adds	r3, #6
 801454e:	68fa      	ldr	r2, [r7, #12]
 8014550:	4413      	add	r3, r2
 8014552:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8014556:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8014558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801455c:	3301      	adds	r3, #1
 801455e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8014566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801456a:	429a      	cmp	r2, r3
 801456c:	d39a      	bcc.n	80144a4 <arm_cfft_radix4by2_inverse_q15+0x1c0>
  }
}
 801456e:	bf00      	nop
 8014570:	bf00      	nop
 8014572:	37c0      	adds	r7, #192	@ 0xc0
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}
 8014578:	ffff0000 	.word	0xffff0000

0801457c <arm_radix4_butterfly_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 801457c:	b490      	push	{r4, r7}
 801457e:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8014582:	af00      	add	r7, sp, #0
 8014584:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 8014588:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 801458c:	6020      	str	r0, [r4, #0]
 801458e:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8014592:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8014596:	6001      	str	r1, [r0, #0]
 8014598:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 801459c:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 80145a0:	600a      	str	r2, [r1, #0]
 80145a2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80145a6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80145aa:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 80145ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145b0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 80145ba:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80145be:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 80145c2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80145c6:	089b      	lsrs	r3, r3, #2
 80145c8:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 80145cc:	2300      	movs	r3, #0
 80145ce:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 80145d2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80145d6:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 80145da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145de:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80145e2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80145e6:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80145ea:	6812      	ldr	r2, [r2, #0]
 80145ec:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 80145ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145f2:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	441a      	add	r2, r3
 8014600:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014604:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014608:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 801460a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801460e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	441a      	add	r2, r3
 801461c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014620:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014624:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8014626:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801462a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	441a      	add	r2, r3
 8014638:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801463c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014640:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /* Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 8014642:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014646:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014650:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014654:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014656:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801465a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	461a      	mov	r2, r3
 8014664:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014668:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 801466c:	601a      	str	r2, [r3, #0]
  return (val);
 801466e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014672:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 801467c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014680:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014684:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014688:	601a      	str	r2, [r3, #0]
 801468a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801468e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8014692:	2200      	movs	r2, #0
 8014694:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014696:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801469a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80146a4:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 80146a8:	6812      	ldr	r2, [r2, #0]
 80146aa:	fa93 f222 	shadd16	r2, r3, r2
 80146ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80146b6:	601a      	str	r2, [r3, #0]
  return(result);
 80146b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* it turns out doing this twice is 2 cycles, the alternative takes 3 cycles */
 80146c6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80146ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80146d2:	601a      	str	r2, [r3, #0]
 80146d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80146dc:	2200      	movs	r2, #0
 80146de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146e4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80146ee:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 80146f2:	6812      	ldr	r2, [r2, #0]
 80146f4:	fa93 f222 	shadd16	r2, r3, r2
 80146f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014700:	601a      	str	r2, [r3, #0]
  return(result);
 8014702:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014706:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
     T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);
*/

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8014710:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014714:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801471e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014722:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014724:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014728:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	461a      	mov	r2, r3
 8014732:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014736:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 801473a:	601a      	str	r2, [r3, #0]
  return (val);
 801473c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014740:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 801474a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801474e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014752:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014756:	601a      	str	r2, [r3, #0]
 8014758:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801475c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8014760:	2200      	movs	r2, #0
 8014762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014764:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014768:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014772:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8014776:	6812      	ldr	r2, [r2, #0]
 8014778:	fa93 f222 	shadd16	r2, r3, r2
 801477c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014780:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014784:	601a      	str	r2, [r3, #0]
  return(result);
 8014786:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801478a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014794:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014798:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801479c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80147aa:	2200      	movs	r2, #0
 80147ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147b2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147bc:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 80147c0:	6812      	ldr	r2, [r2, #0]
 80147c2:	fa93 f222 	shadd16	r2, r3, r2
 80147c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80147ce:	601a      	str	r2, [r3, #0]
  return(result);
 80147d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 80147de:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80147e2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80147e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80147ee:	6019      	str	r1, [r3, #0]
 80147f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80147f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014808:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 801480c:	6812      	ldr	r2, [r2, #0]
 801480e:	fa93 f212 	qadd16	r2, r3, r2
 8014812:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014816:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801481a:	601a      	str	r2, [r3, #0]
  return(result);
 801481c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014820:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 801482a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801482e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014832:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014836:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801483a:	6019      	str	r1, [r3, #0]
 801483c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014840:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8014844:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014846:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801484a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014854:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8014858:	6812      	ldr	r2, [r2, #0]
 801485a:	fad3 f212 	qsub16	r2, r3, r2
 801485e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014862:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014866:	601a      	str	r2, [r3, #0]
  return(result);
 8014868:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801486c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8014876:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801487a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801487e:	681a      	ldr	r2, [r3, #0]
 8014880:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014884:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014888:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801488a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801488e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	461a      	mov	r2, r3
 8014898:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801489c:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80148a0:	601a      	str	r2, [r3, #0]
  return (val);
 80148a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148a6:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80148b0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80148b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148b8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80148bc:	601a      	str	r2, [r3, #0]
 80148be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80148c6:	2200      	movs	r2, #0
 80148c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80148ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148ce:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80148d8:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 80148dc:	6812      	ldr	r2, [r2, #0]
 80148de:	fa93 f222 	shadd16	r2, r3, r2
 80148e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80148ea:	601a      	str	r2, [r3, #0]
  return(result);
 80148ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80148fa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80148fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014902:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014906:	601a      	str	r2, [r3, #0]
 8014908:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801490c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8014910:	2200      	movs	r2, #0
 8014912:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014914:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014918:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014922:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8014926:	6812      	ldr	r2, [r2, #0]
 8014928:	fa93 f222 	shadd16	r2, r3, r2
 801492c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014930:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014934:	601a      	str	r2, [r3, #0]
  return(result);
 8014936:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801493a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8014944:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014948:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014952:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014956:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014958:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801495c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	461a      	mov	r2, r3
 8014966:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801496a:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 801496e:	601a      	str	r2, [r3, #0]
  return (val);
 8014970:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014974:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801497e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014982:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014986:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801498a:	601a      	str	r2, [r3, #0]
 801498c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014990:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014994:	2200      	movs	r2, #0
 8014996:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014998:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801499c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149a6:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80149aa:	6812      	ldr	r2, [r2, #0]
 80149ac:	fa93 f222 	shadd16	r2, r3, r2
 80149b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149b4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80149b8:	601a      	str	r2, [r3, #0]
  return(result);
 80149ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149be:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80149c8:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80149cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80149d4:	601a      	str	r2, [r3, #0]
 80149d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80149de:	2200      	movs	r2, #0
 80149e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80149e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149f0:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80149f4:	6812      	ldr	r2, [r2, #0]
 80149f6:	fa93 f222 	shadd16	r2, r3, r2
 80149fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014a02:	601a      	str	r2, [r3, #0]
  return(result);
 8014a04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8014a12:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014a16:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014a1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014a22:	6019      	str	r1, [r3, #0]
 8014a24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014a2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a3c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8014a40:	6812      	ldr	r2, [r2, #0]
 8014a42:	fa93 f212 	qadd16	r2, r3, r2
 8014a46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a4a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014a4e:	601a      	str	r2, [r3, #0]
  return(result);
 8014a50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 8014a5e:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014a62:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014a66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a6e:	6019      	str	r1, [r3, #0]
 8014a70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a74:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a88:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014a8c:	6812      	ldr	r2, [r2, #0]
 8014a8e:	fa93 f222 	shadd16	r2, r3, r2
 8014a92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a9a:	601a      	str	r2, [r3, #0]
  return(result);
 8014a9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aa0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014ab0:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8014ab4:	601a      	str	r2, [r3, #0]
 8014ab6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014abe:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014ac0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ac4:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8014ac8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014acc:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8014ad0:	6812      	ldr	r2, [r2, #0]
 8014ad2:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014ad4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ad8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ae4:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8014ae8:	6812      	ldr	r2, [r2, #0]
 8014aea:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014aec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014af0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	1d1a      	adds	r2, r3, #4
 8014afa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014afe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	601a      	str	r2, [r3, #0]
}
 8014b06:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8014b08:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014b0c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014b10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014b18:	6019      	str	r1, [r3, #0]
 8014b1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014b24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b32:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8014b36:	6812      	ldr	r2, [r2, #0]
 8014b38:	fad3 f212 	qsub16	r2, r3, r2
 8014b3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b40:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014b44:	601a      	str	r2, [r3, #0]
  return(result);
 8014b46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8014b54:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b5e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8014b62:	6812      	ldr	r2, [r2, #0]
 8014b64:	441a      	add	r2, r3
 8014b66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014b6e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014b70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b82:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8014b86:	601a      	str	r2, [r3, #0]
  return (val);
 8014b88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b8c:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 8014b96:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8014b9a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014b9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014ba6:	6019      	str	r1, [r3, #0]
 8014ba8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bc0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8014bc4:	6812      	ldr	r2, [r2, #0]
 8014bc6:	fb23 f202 	smuad	r2, r3, r2
 8014bca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014bd2:	601a      	str	r2, [r3, #0]
  return(result);
 8014bd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	0c1b      	lsrs	r3, r3, #16
 8014be0:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 8014be4:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8014be8:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014bec:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8014bf0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bf4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bfa:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8014bfe:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c02:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8014c06:	6812      	ldr	r2, [r2, #0]
 8014c08:	fb43 f212 	smusdx	r2, r3, r2
 8014c0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014c14:	601a      	str	r2, [r3, #0]
  return(result);
 8014c16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8014c24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c28:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 8014c32:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	461a      	mov	r2, r3
 8014c3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c3e:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8014c42:	601a      	str	r2, [r3, #0]
  return (val);
 8014c44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c48:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014c52:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8014c56:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c60:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8014c64:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8014c68:	fa93 f322 	shadd16	r3, r3, r2
 8014c6c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 8014c70:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8014c74:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014c78:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8014c7c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8014c80:	2300      	movs	r3, #0
 8014c82:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c86:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8014c8a:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8014c8e:	fa93 f322 	shadd16	r3, r3, r2
 8014c92:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 8014c96:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8014c9a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 8014c9e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8014ca2:	b29a      	uxth	r2, r3
 8014ca4:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8014ca8:	4bd7      	ldr	r3, [pc, #860]	@ (8015008 <arm_radix4_butterfly_q15+0xa8c>)
 8014caa:	400b      	ands	r3, r1
 8014cac:	4313      	orrs	r3, r2
 8014cae:	461a      	mov	r2, r3
 8014cb0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8014cb4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8014cb8:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 8014cbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cc0:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 8014cc4:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8014cc8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014cca:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014cd4:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 8014cd8:	6812      	ldr	r2, [r2, #0]
 8014cda:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014cdc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	1d1a      	adds	r2, r3, #4
 8014ce4:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8014ce8:	601a      	str	r2, [r3, #0]
}
 8014cea:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8014cec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cf0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 8014cfa:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	461a      	mov	r2, r3
 8014d02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d06:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8014d0a:	601a      	str	r2, [r3, #0]
  return (val);
 8014d0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d10:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014d1a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8014d1e:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8014d22:	2300      	movs	r3, #0
 8014d24:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d28:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8014d2c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8014d30:	fa93 f322 	shadd16	r3, r3, r2
 8014d34:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8014d38:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8014d3c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014d40:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8014d44:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8014d48:	2300      	movs	r3, #0
 8014d4a:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d4e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8014d52:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8014d56:	fa93 f322 	shadd16	r3, r3, r2
 8014d5a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 8014d5e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8014d62:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8014d66:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014d6a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8014d6e:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8014d72:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d76:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8014d7a:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8014d7e:	fad3 f312 	qsub16	r3, r3, r2
 8014d82:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 8014d86:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8014d8a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 8014d8e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014d92:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8014d96:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8014d9a:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d9e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8014da2:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8014da6:	faa3 f312 	qasx	r3, r3, r2
 8014daa:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 8014dae:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8014db2:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 8014db6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014dba:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8014dbe:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8014dc2:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014dc6:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8014dca:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8014dce:	fae3 f312 	qsax	r3, r3, r2
 8014dd2:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 8014dd6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8014dda:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QASX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8014dde:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8014de2:	009b      	lsls	r3, r3, #2
 8014de4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014de8:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8014dec:	6812      	ldr	r2, [r2, #0]
 8014dee:	4413      	add	r3, r2
 8014df0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8014df4:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e00:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8014e04:	601a      	str	r2, [r3, #0]
  return (val);
 8014e06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e0a:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 8014e14:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8014e18:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8014e1c:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8014e20:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e24:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8014e28:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8014e2c:	fb23 f302 	smuad	r3, r3, r2
 8014e30:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8014e34:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8014e38:	0c1b      	lsrs	r3, r3, #16
 8014e3a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 8014e3e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8014e42:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8014e46:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8014e4a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e4e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8014e52:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8014e56:	fb43 f312 	smusdx	r3, r3, r2
 8014e5a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 8014e5e:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8014e62:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8014e66:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8014e6a:	b29a      	uxth	r2, r3
 8014e6c:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8014e70:	4b65      	ldr	r3, [pc, #404]	@ (8015008 <arm_radix4_butterfly_q15+0xa8c>)
 8014e72:	400b      	ands	r3, r1
 8014e74:	4313      	orrs	r3, r2
 8014e76:	461a      	mov	r2, r3
 8014e78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8014e7c:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8014e80:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 8014e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e88:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8014e8c:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8014e90:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014e92:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e9c:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 8014ea0:	6812      	ldr	r2, [r2, #0]
 8014ea2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014ea4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	1d1a      	adds	r2, r3, #4
 8014eac:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8014eb0:	601a      	str	r2, [r3, #0]
}
 8014eb2:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8014eb4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8014eb8:	4613      	mov	r3, r2
 8014eba:	005b      	lsls	r3, r3, #1
 8014ebc:	4413      	add	r3, r2
 8014ebe:	009b      	lsls	r3, r3, #2
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ec6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4413      	add	r3, r2
 8014ece:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 8014ed2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	461a      	mov	r2, r3
 8014eda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ede:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8014ee2:	601a      	str	r2, [r3, #0]
  return (val);
 8014ee4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ee8:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 8014ef2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8014ef6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8014efa:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8014efe:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f02:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8014f06:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8014f0a:	fb23 f302 	smuad	r3, r3, r2
 8014f0e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8014f12:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8014f16:	0c1b      	lsrs	r3, r3, #16
 8014f18:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8014f1c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8014f20:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8014f24:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8014f28:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f2c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8014f30:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8014f34:	fb43 f312 	smusdx	r3, r3, r2
 8014f38:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8014f3c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8014f40:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8014f44:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8014f48:	b29a      	uxth	r2, r3
 8014f4a:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8014f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8015008 <arm_radix4_butterfly_q15+0xa8c>)
 8014f50:	400b      	ands	r3, r1
 8014f52:	4313      	orrs	r3, r2
 8014f54:	461a      	mov	r2, r3
 8014f56:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014f5a:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8014f5e:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8014f62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f66:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8014f6a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8014f6e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014f70:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f7a:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8014f7e:	6812      	ldr	r2, [r2, #0]
 8014f80:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014f82:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	1d1a      	adds	r2, r3, #4
 8014f8a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8014f8e:	601a      	str	r2, [r3, #0]
}
 8014f90:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8014f92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f96:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8014f9a:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 8014fa6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014faa:	3b01      	subs	r3, #1
 8014fac:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014fb0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f47f ab44 	bne.w	8014642 <arm_radix4_butterfly_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8014fba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fbe:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8014fc2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014fc6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8014fca:	6812      	ldr	r2, [r2, #0]
 8014fcc:	0092      	lsls	r2, r2, #2
 8014fce:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8014fd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fd4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	089b      	lsrs	r3, r3, #2
 8014fdc:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8014fe0:	f000 bcc6 	b.w	8015970 <arm_radix4_butterfly_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8014fe4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014fe8:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 8014fec:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014ff0:	089b      	lsrs	r3, r3, #2
 8014ff2:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015002:	f000 bc9d 	b.w	8015940 <arm_radix4_butterfly_q15+0x13c4>
 8015006:	bf00      	nop
 8015008:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 801500c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015016:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801501a:	6812      	ldr	r2, [r2, #0]
 801501c:	441a      	add	r2, r3
 801501e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015022:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015026:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015028:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801502c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	461a      	mov	r2, r3
 8015036:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801503a:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 801503e:	601a      	str	r2, [r3, #0]
  return (val);
 8015040:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015044:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 801504e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015052:	00db      	lsls	r3, r3, #3
 8015054:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015058:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801505c:	6812      	ldr	r2, [r2, #0]
 801505e:	441a      	add	r2, r3
 8015060:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015064:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015068:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801506a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801506e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	461a      	mov	r2, r3
 8015078:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801507c:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8015080:	601a      	str	r2, [r3, #0]
  return (val);
 8015082:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015086:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8015090:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8015094:	4613      	mov	r3, r2
 8015096:	005b      	lsls	r3, r3, #1
 8015098:	4413      	add	r3, r2
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	461a      	mov	r2, r3
 801509e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150a2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	441a      	add	r2, r3
 80150aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150ae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80150b2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80150b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150b8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	461a      	mov	r2, r3
 80150c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150c6:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80150ca:	601a      	str	r2, [r3, #0]
  return (val);
 80150cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150d0:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 80150da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150de:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80150e2:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	4413      	add	r3, r2
 80150ea:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 80150ee:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80150f8:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80150fc:	6812      	ldr	r2, [r2, #0]
 80150fe:	441a      	add	r2, r3
 8015100:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015104:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015108:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 801510a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801510e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015118:	009b      	lsls	r3, r3, #2
 801511a:	441a      	add	r2, r3
 801511c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015120:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015124:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8015126:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801512a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801512e:	681a      	ldr	r2, [r3, #0]
 8015130:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	441a      	add	r2, r3
 8015138:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801513c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015140:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8015142:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015146:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	441a      	add	r2, r3
 8015154:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015158:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801515c:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 801515e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015162:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015166:	e3dc      	b.n	8015922 <arm_radix4_butterfly_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8015168:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801516c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015170:	681a      	ldr	r2, [r3, #0]
 8015172:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015176:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 801517a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801517c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015180:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	461a      	mov	r2, r3
 801518a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801518e:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8015192:	601a      	str	r2, [r3, #0]
  return (val);
 8015194:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015198:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 80151a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151a6:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151b0:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80151b4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80151b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151ba:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	461a      	mov	r2, r3
 80151c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151c8:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80151cc:	601a      	str	r2, [r3, #0]
  return (val);
 80151ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151d2:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 80151dc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80151e0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80151e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151e8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80151ec:	6019      	str	r1, [r3, #0]
 80151ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151f2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80151f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80151f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151fc:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015206:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 801520a:	6812      	ldr	r2, [r2, #0]
 801520c:	fa93 f212 	qadd16	r2, r3, r2
 8015210:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015214:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015218:	601a      	str	r2, [r3, #0]
  return(result);
 801521a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801521e:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8015228:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801522c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015230:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015234:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8015238:	6019      	str	r1, [r3, #0]
 801523a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801523e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8015242:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015244:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015248:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015252:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8015256:	6812      	ldr	r2, [r2, #0]
 8015258:	fad3 f212 	qsub16	r2, r3, r2
 801525c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015260:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015264:	601a      	str	r2, [r3, #0]
  return(result);
 8015266:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801526a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015274:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015278:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801527c:	681a      	ldr	r2, [r3, #0]
 801527e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015282:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8015286:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015288:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801528c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	461a      	mov	r2, r3
 8015296:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801529a:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 801529e:	601a      	str	r2, [r3, #0]
  return (val);
 80152a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152a4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80152ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152b2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152bc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80152c0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80152c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152c6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	461a      	mov	r2, r3
 80152d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152d4:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80152d8:	601a      	str	r2, [r3, #0]
  return (val);
 80152da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152de:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 80152e8:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80152ec:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80152f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152f4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80152f8:	6019      	str	r1, [r3, #0]
 80152fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152fe:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8015302:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015304:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015308:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015312:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8015316:	6812      	ldr	r2, [r2, #0]
 8015318:	fa93 f212 	qadd16	r2, r3, r2
 801531c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015320:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015324:	601a      	str	r2, [r3, #0]
  return(result);
 8015326:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801532a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8015334:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015338:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801533c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015340:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015344:	6019      	str	r1, [r3, #0]
 8015346:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801534a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 801534e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015350:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015354:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801535e:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8015362:	6812      	ldr	r2, [r2, #0]
 8015364:	fa93 f222 	shadd16	r2, r3, r2
 8015368:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801536c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8015370:	601a      	str	r2, [r3, #0]
  return(result);
 8015372:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015376:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8015380:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8015384:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015388:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 801538c:	601a      	str	r2, [r3, #0]
 801538e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015392:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8015396:	2200      	movs	r2, #0
 8015398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801539a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801539e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80153a8:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 80153ac:	6812      	ldr	r2, [r2, #0]
 80153ae:	fa93 f222 	shadd16	r2, r3, r2
 80153b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153b6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80153ba:	601a      	str	r2, [r3, #0]
  return(result);
 80153bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153c0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 80153ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153ce:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153d8:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 80153dc:	601a      	str	r2, [r3, #0]
 80153de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153e2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80153e6:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80153ea:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE void write_q15x2 (
  q15_t * pQ15,
  q31_t   value)
{
  q31_t val = value;
 80153ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153f0:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 80153f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80153f8:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 80153fc:	6812      	ldr	r2, [r2, #0]
 80153fe:	601a      	str	r2, [r3, #0]

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (pQ15, &val, 4);
 8015400:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015404:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801540e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	601a      	str	r2, [r3, #0]
#else
  pQ15[0] = (q15_t)(val & 0x0FFFF);
  pQ15[1] = (q15_t)(val >> 16);
#endif
}
 8015416:	bf00      	nop
        pSi0 += 2 * n1;
 8015418:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801541c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015420:	681a      	ldr	r2, [r3, #0]
 8015422:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	441a      	add	r2, r3
 801542a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801542e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015432:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8015434:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015438:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801543c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015440:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015444:	6019      	str	r1, [r3, #0]
 8015446:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801544a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 801544e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015450:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015454:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801545e:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8015462:	6812      	ldr	r2, [r2, #0]
 8015464:	fad3 f222 	shsub16	r2, r3, r2
 8015468:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801546c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8015470:	601a      	str	r2, [r3, #0]
  return(result);
 8015472:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015476:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16U;
 8015480:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8015484:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015488:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801548c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8015490:	6019      	str	r1, [r3, #0]
 8015492:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015496:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801549a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801549c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154a0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154aa:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80154ae:	6812      	ldr	r2, [r2, #0]
 80154b0:	fb23 f202 	smuad	r2, r3, r2
 80154b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154b8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80154bc:	601a      	str	r2, [r3, #0]
  return(result);
 80154be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154c2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	0c1b      	lsrs	r3, r3, #16
 80154ca:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 80154ce:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80154d2:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80154d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154da:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80154de:	6019      	str	r1, [r3, #0]
 80154e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154e4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80154e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80154ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154f8:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80154fc:	6812      	ldr	r2, [r2, #0]
 80154fe:	fb43 f212 	smusdx	r2, r3, r2
 8015502:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015506:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 801550a:	601a      	str	r2, [r3, #0]
  return(result);
 801550c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015510:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 801551a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801551e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015528:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801552c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801552e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015532:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	461a      	mov	r2, r3
 801553c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015540:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015544:	601a      	str	r2, [r3, #0]
  return (val);
 8015546:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801554a:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8015554:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015558:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015562:	b299      	uxth	r1, r3
 8015564:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015568:	4bd9      	ldr	r3, [pc, #868]	@ (80158d0 <arm_radix4_butterfly_q15+0x1354>)
 801556a:	4003      	ands	r3, r0
 801556c:	430b      	orrs	r3, r1
 801556e:	4619      	mov	r1, r3
 8015570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015574:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015578:	601a      	str	r2, [r3, #0]
 801557a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801557e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8015582:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015584:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015588:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 801558c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015590:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8015594:	6812      	ldr	r2, [r2, #0]
 8015596:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015598:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801559c:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80155a0:	681a      	ldr	r2, [r3, #0]
 80155a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155a6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	601a      	str	r2, [r3, #0]
}
 80155ae:	bf00      	nop
        pSi1 += 2 * n1;
 80155b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155b4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	441a      	add	r2, r3
 80155c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155c6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80155ca:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80155cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155d0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155da:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80155de:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80155e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155e4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	461a      	mov	r2, r3
 80155ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155f2:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 80155f6:	601a      	str	r2, [r3, #0]
  return (val);
 80155f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155fc:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8015606:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801560a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801560e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015612:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015616:	6019      	str	r1, [r3, #0]
 8015618:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801561c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8015620:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015622:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015626:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015630:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8015634:	6812      	ldr	r2, [r2, #0]
 8015636:	fad3 f212 	qsub16	r2, r3, r2
 801563a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801563e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015642:	601a      	str	r2, [r3, #0]
  return(result);
 8015644:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015648:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 8015652:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015656:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801565a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801565e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015662:	6019      	str	r1, [r3, #0]
 8015664:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015668:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801566c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801566e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015672:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801567c:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8015680:	6812      	ldr	r2, [r2, #0]
 8015682:	faa3 f222 	shasx	r2, r3, r2
 8015686:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801568a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801568e:	601a      	str	r2, [r3, #0]
  return(result);
 8015690:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015694:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 801569e:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80156a2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80156a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156aa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80156ae:	6019      	str	r1, [r3, #0]
 80156b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80156b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80156ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156be:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80156c8:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80156cc:	6812      	ldr	r2, [r2, #0]
 80156ce:	fae3 f222 	shsax	r2, r3, r2
 80156d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156d6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156da:	601a      	str	r2, [r3, #0]
  return(result);
 80156dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16U;
 80156ea:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 80156ee:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80156f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156f6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80156fa:	6019      	str	r1, [r3, #0]
 80156fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015700:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015706:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801570a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015714:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8015718:	6812      	ldr	r2, [r2, #0]
 801571a:	fb23 f202 	smuad	r2, r3, r2
 801571e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015722:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015726:	601a      	str	r2, [r3, #0]
  return(result);
 8015728:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801572c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	0c1b      	lsrs	r3, r3, #16
 8015734:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C1, S);
 8015738:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 801573c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015740:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015744:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015748:	6019      	str	r1, [r3, #0]
 801574a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801574e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8015752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015754:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015758:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015762:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8015766:	6812      	ldr	r2, [r2, #0]
 8015768:	fb43 f212 	smusdx	r2, r3, r2
 801576c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015770:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015774:	601a      	str	r2, [r3, #0]
  return(result);
 8015776:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801577a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 8015784:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015788:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801578c:	681a      	ldr	r2, [r3, #0]
 801578e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015792:	b299      	uxth	r1, r3
 8015794:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015798:	4b4d      	ldr	r3, [pc, #308]	@ (80158d0 <arm_radix4_butterfly_q15+0x1354>)
 801579a:	4003      	ands	r3, r0
 801579c:	430b      	orrs	r3, r1
 801579e:	4619      	mov	r1, r3
 80157a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157a4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80157a8:	601a      	str	r2, [r3, #0]
 80157aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80157b2:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80157b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157b8:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80157bc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80157c0:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 80157c4:	6812      	ldr	r2, [r2, #0]
 80157c6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80157c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157cc:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80157d0:	681a      	ldr	r2, [r3, #0]
 80157d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	601a      	str	r2, [r3, #0]
}
 80157de:	bf00      	nop
        pSi2 += 2 * n1;
 80157e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157e4:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80157ee:	009b      	lsls	r3, r3, #2
 80157f0:	441a      	add	r2, r3
 80157f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157f6:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80157fa:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUAD(C3, R) >> 16U;
 80157fc:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015800:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015804:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015808:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801580c:	6019      	str	r1, [r3, #0]
 801580e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015812:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8015816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015818:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801581c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015826:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801582a:	6812      	ldr	r2, [r2, #0]
 801582c:	fb23 f202 	smuad	r2, r3, r2
 8015830:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015834:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015838:	601a      	str	r2, [r3, #0]
  return(result);
 801583a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801583e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	0c1b      	lsrs	r3, r3, #16
 8015846:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C3, R);
 801584a:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 801584e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015852:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015856:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801585a:	6019      	str	r1, [r3, #0]
 801585c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015860:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8015864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015866:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801586a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015874:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8015878:	6812      	ldr	r2, [r2, #0]
 801587a:	fb43 f212 	smusdx	r2, r3, r2
 801587e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015882:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015886:	601a      	str	r2, [r3, #0]
  return(result);
 8015888:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801588c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 8015896:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801589a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80158a4:	b299      	uxth	r1, r3
 80158a6:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80158aa:	4b09      	ldr	r3, [pc, #36]	@ (80158d0 <arm_radix4_butterfly_q15+0x1354>)
 80158ac:	4003      	ands	r3, r0
 80158ae:	430b      	orrs	r3, r1
 80158b0:	4619      	mov	r1, r3
 80158b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80158ba:	601a      	str	r2, [r3, #0]
 80158bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158c0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80158c4:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80158c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ca:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80158ce:	e001      	b.n	80158d4 <arm_radix4_butterfly_q15+0x1358>
 80158d0:	ffff0000 	.word	0xffff0000
 80158d4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80158d8:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 80158dc:	6812      	ldr	r2, [r2, #0]
 80158de:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80158e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158e4:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	601a      	str	r2, [r3, #0]
}
 80158f6:	bf00      	nop
        pSi3 += 2 * n1;
 80158f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158fc:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	441a      	add	r2, r3
 801590a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801590e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015912:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8015914:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015918:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801591c:	4413      	add	r3, r2
 801591e:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015922:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015926:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801592a:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	429a      	cmp	r2, r3
 8015932:	f4ff ac19 	bcc.w	8015168 <arm_radix4_butterfly_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 8015936:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801593a:	3301      	adds	r3, #1
 801593c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015940:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015944:	3b01      	subs	r3, #1
 8015946:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 801594a:	429a      	cmp	r2, r3
 801594c:	f67f ab5e 	bls.w	801500c <arm_radix4_butterfly_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8015950:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015954:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8015958:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801595c:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8015960:	6812      	ldr	r2, [r2, #0]
 8015962:	0092      	lsls	r2, r2, #2
 8015964:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8015966:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 801596a:	089b      	lsrs	r3, r3, #2
 801596c:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8015970:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015974:	2b04      	cmp	r3, #4
 8015976:	f63f ab35 	bhi.w	8014fe4 <arm_radix4_butterfly_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 801597a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801597e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	089b      	lsrs	r3, r3, #2
 8015986:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 801598a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801598e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015992:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015996:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 801599a:	6812      	ldr	r2, [r2, #0]
 801599c:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 801599e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159a2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	1d1a      	adds	r2, r3, #4
 80159aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ae:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159b8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	1f1a      	subs	r2, r3, #4
 80159c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159c4:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80159c8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80159ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ce:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	461a      	mov	r2, r3
 80159d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159dc:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80159e0:	601a      	str	r2, [r3, #0]
  return (val);
 80159e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159e6:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 80159f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159f4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	1d1a      	adds	r2, r3, #4
 80159fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a00:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015a04:	601a      	str	r2, [r3, #0]
 8015a06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a0a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	1f1a      	subs	r2, r3, #4
 8015a12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a16:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015a1a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015a1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a20:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	461a      	mov	r2, r3
 8015a2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a2e:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015a32:	601a      	str	r2, [r3, #0]
  return (val);
 8015a34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a38:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 8015a42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a46:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	1d1a      	adds	r2, r3, #4
 8015a4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a52:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015a56:	601a      	str	r2, [r3, #0]
 8015a58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a5c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	1f1a      	subs	r2, r3, #4
 8015a64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a68:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015a6c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015a6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a72:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a80:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015a84:	601a      	str	r2, [r3, #0]
  return (val);
 8015a86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a8a:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 8015a94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a98:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	1d1a      	adds	r2, r3, #4
 8015aa0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aa4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015aa8:	601a      	str	r2, [r3, #0]
 8015aaa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aae:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	1f1a      	subs	r2, r3, #4
 8015ab6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aba:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015abe:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015ac0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ac4:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	461a      	mov	r2, r3
 8015ace:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ad2:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8015ad6:	601a      	str	r2, [r3, #0]
  return (val);
 8015ad8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015adc:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8015ae6:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8015aea:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8015aee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015af2:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8015af6:	6019      	str	r1, [r3, #0]
 8015af8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015afc:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8015b00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b06:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b10:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8015b14:	6812      	ldr	r2, [r2, #0]
 8015b16:	fa93 f212 	qadd16	r2, r3, r2
 8015b1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b1e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8015b22:	601a      	str	r2, [r3, #0]
  return(result);
 8015b24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b28:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8015b32:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8015b36:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8015b3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b3e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8015b42:	6019      	str	r1, [r3, #0]
 8015b44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b48:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8015b4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b52:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b5c:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8015b60:	6812      	ldr	r2, [r2, #0]
 8015b62:	fa93 f212 	qadd16	r2, r3, r2
 8015b66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b6a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8015b6e:	601a      	str	r2, [r3, #0]
  return(result);
 8015b70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b74:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 8015b7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b82:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f1a3 0210 	sub.w	r2, r3, #16
 8015b8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b90:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015b94:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 8015b96:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015b9a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015b9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ba2:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8015ba6:	6019      	str	r1, [r3, #0]
 8015ba8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bac:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8015bb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015bb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bb6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015bc0:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8015bc4:	6812      	ldr	r2, [r2, #0]
 8015bc6:	fa93 f222 	shadd16	r2, r3, r2
 8015bca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bce:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8015bd2:	601a      	str	r2, [r3, #0]
  return(result);
 8015bd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bd8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4619      	mov	r1, r3
 8015be0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015be4:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8015be8:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8015bec:	601a      	str	r2, [r3, #0]
 8015bee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bf2:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8015bf6:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015bf8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bfc:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8015c00:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c04:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8015c08:	6812      	ldr	r2, [r2, #0]
 8015c0a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015c0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c10:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c1c:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8015c20:	6812      	ldr	r2, [r2, #0]
 8015c22:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015c24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c28:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	1d1a      	adds	r2, r3, #4
 8015c32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c36:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	601a      	str	r2, [r3, #0]
}
 8015c3e:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8015c40:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8015c44:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8015c48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c4c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8015c50:	6019      	str	r1, [r3, #0]
 8015c52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c56:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8015c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c60:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c6a:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8015c6e:	6812      	ldr	r2, [r2, #0]
 8015c70:	fa93 f212 	qadd16	r2, r3, r2
 8015c74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c78:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8015c7c:	601a      	str	r2, [r3, #0]
  return(result);
 8015c7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c82:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 8015c8c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015c90:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015c94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c98:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8015c9c:	6019      	str	r1, [r3, #0]
 8015c9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ca2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8015ca6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015ca8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cac:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015cb6:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8015cba:	6812      	ldr	r2, [r2, #0]
 8015cbc:	fad3 f222 	shsub16	r2, r3, r2
 8015cc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cc4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8015cc8:	601a      	str	r2, [r3, #0]
  return(result);
 8015cca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cce:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	4619      	mov	r1, r3
 8015cd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cda:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8015cde:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8015ce2:	601a      	str	r2, [r3, #0]
 8015ce4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ce8:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8015cec:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015cee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cf2:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8015cf6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015cfa:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 8015cfe:	6812      	ldr	r2, [r2, #0]
 8015d00:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015d02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d06:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d12:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8015d16:	6812      	ldr	r2, [r2, #0]
 8015d18:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015d1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d1e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	1d1a      	adds	r2, r3, #4
 8015d28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d2c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	601a      	str	r2, [r3, #0]
}
 8015d34:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8015d36:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8015d3a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8015d3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d42:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8015d46:	6019      	str	r1, [r3, #0]
 8015d48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d4c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8015d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d56:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d60:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8015d64:	6812      	ldr	r2, [r2, #0]
 8015d66:	fad3 f212 	qsub16	r2, r3, r2
 8015d6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d6e:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8015d72:	601a      	str	r2, [r3, #0]
  return(result);
 8015d74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d78:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 8015d82:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8015d86:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8015d8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d8e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8015d92:	6019      	str	r1, [r3, #0]
 8015d94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d98:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8015d9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015da2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015dac:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 8015db0:	6812      	ldr	r2, [r2, #0]
 8015db2:	fad3 f212 	qsub16	r2, r3, r2
 8015db6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dba:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8015dbe:	601a      	str	r2, [r3, #0]
  return(result);
 8015dc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dc4:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8015dce:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015dd2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015dd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dda:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015dde:	6019      	str	r1, [r3, #0]
 8015de0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015de4:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8015de8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015dea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dee:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015df8:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 8015dfc:	6812      	ldr	r2, [r2, #0]
 8015dfe:	fae3 f222 	shsax	r2, r3, r2
 8015e02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e06:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8015e0a:	601a      	str	r2, [r3, #0]
  return(result);
 8015e0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e10:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	4619      	mov	r1, r3
 8015e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e1c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8015e20:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8015e24:	601a      	str	r2, [r3, #0]
 8015e26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e2a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015e2e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015e30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e34:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8015e38:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e3c:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8015e40:	6812      	ldr	r2, [r2, #0]
 8015e42:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015e44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e48:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e54:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 8015e58:	6812      	ldr	r2, [r2, #0]
 8015e5a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015e5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e60:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	1d1a      	adds	r2, r3, #4
 8015e6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e6e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	601a      	str	r2, [r3, #0]
}
 8015e76:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 8015e78:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015e7c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015e80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e84:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8015e88:	6019      	str	r1, [r3, #0]
 8015e8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e8e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8015e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015e94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e98:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ea2:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 8015ea6:	6812      	ldr	r2, [r2, #0]
 8015ea8:	faa3 f222 	shasx	r2, r3, r2
 8015eac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eb0:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8015eb4:	601a      	str	r2, [r3, #0]
  return(result);
 8015eb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eba:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ec6:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8015eca:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8015ece:	601a      	str	r2, [r3, #0]
 8015ed0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ed4:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8015ed8:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015eda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ede:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8015ee2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ee6:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 8015eea:	6812      	ldr	r2, [r2, #0]
 8015eec:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015eee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ef2:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015efe:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8015f02:	6812      	ldr	r2, [r2, #0]
 8015f04:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015f06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f0a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	1d1a      	adds	r2, r3, #4
 8015f14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f18:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	601a      	str	r2, [r3, #0]
}
 8015f20:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8015f22:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015f26:	3b01      	subs	r3, #1
 8015f28:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015f2c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	f47f ad34 	bne.w	801599e <arm_radix4_butterfly_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8015f36:	bf00      	nop
 8015f38:	bf00      	nop
 8015f3a:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bc90      	pop	{r4, r7}
 8015f42:	4770      	bx	lr

08015f44 <arm_radix4_butterfly_inverse_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_inverse_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 8015f44:	b490      	push	{r4, r7}
 8015f46:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 8015f50:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 8015f54:	6020      	str	r0, [r4, #0]
 8015f56:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8015f5a:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8015f5e:	6001      	str	r1, [r0, #0]
 8015f60:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8015f64:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8015f68:	600a      	str	r2, [r1, #0]
 8015f6a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015f6e:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8015f72:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8015f74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f78:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8015f82:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015f86:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8015f8a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015f8e:	089b      	lsrs	r3, r3, #2
 8015f90:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8015f94:	2300      	movs	r3, #0
 8015f96:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 8015f9a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015f9e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8015fa2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fa6:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015faa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015fae:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8015fb2:	6812      	ldr	r2, [r2, #0]
 8015fb4:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8015fb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fba:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015fc4:	009b      	lsls	r3, r3, #2
 8015fc6:	441a      	add	r2, r3
 8015fc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fcc:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015fd0:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8015fd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fd6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015fda:	681a      	ldr	r2, [r3, #0]
 8015fdc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	441a      	add	r2, r3
 8015fe4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fe8:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015fec:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8015fee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ff2:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015ff6:	681a      	ldr	r2, [r3, #0]
 8015ff8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015ffc:	009b      	lsls	r3, r3, #2
 8015ffe:	441a      	add	r2, r3
 8016000:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016004:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016008:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 801600a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801600e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016018:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801601c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801601e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016022:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	461a      	mov	r2, r3
 801602c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016030:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8016034:	601a      	str	r2, [r3, #0]
  return (val);
 8016036:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801603a:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8016044:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016048:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801604c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8016050:	601a      	str	r2, [r3, #0]
 8016052:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016056:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801605a:	2200      	movs	r2, #0
 801605c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801605e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016062:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801606c:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8016070:	6812      	ldr	r2, [r2, #0]
 8016072:	fa93 f222 	shadd16	r2, r3, r2
 8016076:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801607a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801607e:	601a      	str	r2, [r3, #0]
  return(result);
 8016080:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016084:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801608e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016092:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016096:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801609a:	601a      	str	r2, [r3, #0]
 801609c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160a0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80160a4:	2200      	movs	r2, #0
 80160a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80160a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80160b6:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 80160ba:	6812      	ldr	r2, [r2, #0]
 80160bc:	fa93 f222 	shadd16	r2, r3, r2
 80160c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80160c8:	601a      	str	r2, [r3, #0]
  return(result);
 80160ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ce:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 80160d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160dc:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80160ea:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80160ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160f0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	461a      	mov	r2, r3
 80160fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160fe:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8016102:	601a      	str	r2, [r3, #0]
  return (val);
 8016104:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016108:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8016112:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8016116:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801611a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801611e:	601a      	str	r2, [r3, #0]
 8016120:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016124:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8016128:	2200      	movs	r2, #0
 801612a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801612c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016130:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801613a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 801613e:	6812      	ldr	r2, [r2, #0]
 8016140:	fa93 f222 	shadd16	r2, r3, r2
 8016144:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016148:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 801614c:	601a      	str	r2, [r3, #0]
  return(result);
 801614e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016152:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 801615c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8016160:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016164:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8016168:	601a      	str	r2, [r3, #0]
 801616a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801616e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8016172:	2200      	movs	r2, #0
 8016174:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016176:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801617a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016184:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8016188:	6812      	ldr	r2, [r2, #0]
 801618a:	fa93 f222 	shadd16	r2, r3, r2
 801618e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016192:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8016196:	601a      	str	r2, [r3, #0]
  return(result);
 8016198:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801619c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 80161a6:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80161aa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80161ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80161b6:	6019      	str	r1, [r3, #0]
 80161b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80161c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80161c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80161d0:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 80161d4:	6812      	ldr	r2, [r2, #0]
 80161d6:	fa93 f212 	qadd16	r2, r3, r2
 80161da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80161e2:	601a      	str	r2, [r3, #0]
  return(result);
 80161e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 80161f2:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80161f6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80161fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8016202:	6019      	str	r1, [r3, #0]
 8016204:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016208:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801620c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801620e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016212:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801621c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8016220:	6812      	ldr	r2, [r2, #0]
 8016222:	fad3 f212 	qsub16	r2, r3, r2
 8016226:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801622a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 801622e:	601a      	str	r2, [r3, #0]
  return(result);
 8016230:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016234:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 801623e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016242:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801624c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8016250:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016252:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016256:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	461a      	mov	r2, r3
 8016260:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016264:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8016268:	601a      	str	r2, [r3, #0]
  return (val);
 801626a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801626e:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8016278:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801627c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016280:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8016284:	601a      	str	r2, [r3, #0]
 8016286:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801628a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801628e:	2200      	movs	r2, #0
 8016290:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016292:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016296:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80162a0:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 80162a4:	6812      	ldr	r2, [r2, #0]
 80162a6:	fa93 f222 	shadd16	r2, r3, r2
 80162aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ae:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80162b2:	601a      	str	r2, [r3, #0]
  return(result);
 80162b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80162c2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80162c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80162ce:	601a      	str	r2, [r3, #0]
 80162d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80162d8:	2200      	movs	r2, #0
 80162da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80162dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162e0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80162ea:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 80162ee:	6812      	ldr	r2, [r2, #0]
 80162f0:	fa93 f222 	shadd16	r2, r3, r2
 80162f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80162fc:	601a      	str	r2, [r3, #0]
  return(result);
 80162fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016302:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 801630c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016310:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801631a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801631e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016320:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016324:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	461a      	mov	r2, r3
 801632e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016332:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8016336:	601a      	str	r2, [r3, #0]
  return (val);
 8016338:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801633c:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8016346:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801634a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801634e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8016352:	601a      	str	r2, [r3, #0]
 8016354:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016358:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801635c:	2200      	movs	r2, #0
 801635e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016360:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016364:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801636e:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8016372:	6812      	ldr	r2, [r2, #0]
 8016374:	fa93 f222 	shadd16	r2, r3, r2
 8016378:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801637c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8016380:	601a      	str	r2, [r3, #0]
  return(result);
 8016382:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016386:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8016390:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8016394:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016398:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801639c:	601a      	str	r2, [r3, #0]
 801639e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80163a6:	2200      	movs	r2, #0
 80163a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80163aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80163b8:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80163bc:	6812      	ldr	r2, [r2, #0]
 80163be:	fa93 f222 	shadd16	r2, r3, r2
 80163c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80163ca:	601a      	str	r2, [r3, #0]
  return(result);
 80163cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 80163da:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 80163de:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80163e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80163ea:	6019      	str	r1, [r3, #0]
 80163ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80163f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80163f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016404:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8016408:	6812      	ldr	r2, [r2, #0]
 801640a:	fa93 f212 	qadd16	r2, r3, r2
 801640e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016412:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8016416:	601a      	str	r2, [r3, #0]
  return(result);
 8016418:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801641c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 8016426:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801642a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801642e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016432:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016436:	6019      	str	r1, [r3, #0]
 8016438:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801643c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016440:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016442:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016446:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016450:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8016454:	6812      	ldr	r2, [r2, #0]
 8016456:	fa93 f222 	shadd16	r2, r3, r2
 801645a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801645e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016462:	601a      	str	r2, [r3, #0]
  return(result);
 8016464:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016468:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	4619      	mov	r1, r3
 8016470:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016474:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016478:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801647c:	601a      	str	r2, [r3, #0]
 801647e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016482:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016486:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016488:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801648c:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8016490:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016494:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8016498:	6812      	ldr	r2, [r2, #0]
 801649a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801649c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80164ac:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 80164b0:	6812      	ldr	r2, [r2, #0]
 80164b2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80164b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	1d1a      	adds	r2, r3, #4
 80164c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	601a      	str	r2, [r3, #0]
}
 80164ce:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 80164d0:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80164d4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80164d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80164e0:	6019      	str	r1, [r3, #0]
 80164e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80164ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80164ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80164fa:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80164fe:	6812      	ldr	r2, [r2, #0]
 8016500:	fad3 f212 	qsub16	r2, r3, r2
 8016504:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016508:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801650c:	601a      	str	r2, [r3, #0]
  return(result);
 801650e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016512:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 801651c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8016520:	00db      	lsls	r3, r3, #3
 8016522:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016526:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801652a:	6812      	ldr	r2, [r2, #0]
 801652c:	441a      	add	r2, r3
 801652e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016532:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016536:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016538:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801653c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	461a      	mov	r2, r3
 8016546:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801654a:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 801654e:	601a      	str	r2, [r3, #0]
  return (val);
 8016550:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016554:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 801655e:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8016562:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8016566:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801656a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801656e:	6019      	str	r1, [r3, #0]
 8016570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016574:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801657a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016588:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 801658c:	6812      	ldr	r2, [r2, #0]
 801658e:	fb43 f202 	smusd	r2, r3, r2
 8016592:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016596:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801659a:	601a      	str	r2, [r3, #0]
  return(result);
 801659c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	0c1b      	lsrs	r3, r3, #16
 80165a8:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 80165ac:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 80165b0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80165b4:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80165b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80165c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80165c2:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80165c6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80165ca:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80165ce:	6812      	ldr	r2, [r2, #0]
 80165d0:	fb23 f212 	smuadx	r2, r3, r2
 80165d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80165dc:	601a      	str	r2, [r3, #0]
  return(result);
 80165de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 80165ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165f0:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 80165fa:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	461a      	mov	r2, r3
 8016602:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016606:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 801660a:	601a      	str	r2, [r3, #0]
  return (val);
 801660c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016610:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801661a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801661e:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8016622:	2300      	movs	r3, #0
 8016624:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016628:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801662c:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8016630:	fa93 f322 	shadd16	r3, r3, r2
 8016634:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 8016638:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801663c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8016640:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016644:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8016648:	2300      	movs	r3, #0
 801664a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801664e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8016652:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8016656:	fa93 f322 	shadd16	r3, r3, r2
 801665a:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 801665e:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8016662:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 8016666:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801666a:	b29a      	uxth	r2, r3
 801666c:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8016670:	4bd7      	ldr	r3, [pc, #860]	@ (80169d0 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8016672:	400b      	ands	r3, r1
 8016674:	4313      	orrs	r3, r2
 8016676:	461a      	mov	r2, r3
 8016678:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801667c:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8016680:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 8016684:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016688:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 801668c:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8016690:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016692:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801669c:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 80166a0:	6812      	ldr	r2, [r2, #0]
 80166a2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80166a4:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	1d1a      	adds	r2, r3, #4
 80166ac:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80166b0:	601a      	str	r2, [r3, #0]
}
 80166b2:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 80166b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166b8:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 80166c2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	461a      	mov	r2, r3
 80166ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166ce:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80166d2:	601a      	str	r2, [r3, #0]
  return (val);
 80166d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166d8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80166e2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80166e6:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 80166ea:	2300      	movs	r3, #0
 80166ec:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166f0:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80166f4:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 80166f8:	fa93 f322 	shadd16	r3, r3, r2
 80166fc:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8016700:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8016704:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8016708:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801670c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8016710:	2300      	movs	r3, #0
 8016712:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016716:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 801671a:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 801671e:	fa93 f322 	shadd16	r3, r3, r2
 8016722:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 8016726:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 801672a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 801672e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016732:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8016736:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 801673a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801673e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8016742:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8016746:	fad3 f312 	qsub16	r3, r3, r2
 801674a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 801674e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8016752:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 8016756:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801675a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801675e:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8016762:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016766:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801676a:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 801676e:	fae3 f312 	qsax	r3, r3, r2
 8016772:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 8016776:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 801677a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 801677e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8016782:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016786:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 801678a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801678e:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8016792:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8016796:	faa3 f312 	qasx	r3, r3, r2
 801679a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 801679e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80167a2:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 80167a6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80167b0:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80167b4:	6812      	ldr	r2, [r2, #0]
 80167b6:	4413      	add	r3, r2
 80167b8:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 80167bc:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	461a      	mov	r2, r3
 80167c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80167c8:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80167cc:	601a      	str	r2, [r3, #0]
  return (val);
 80167ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80167d2:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 80167dc:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 80167e0:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 80167e4:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 80167e8:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167ec:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80167f0:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 80167f4:	fb43 f302 	smusd	r3, r3, r2
 80167f8:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 80167fc:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8016800:	0c1b      	lsrs	r3, r3, #16
 8016802:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 8016806:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 801680a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 801680e:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8016812:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016816:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801681a:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 801681e:	fb23 f312 	smuadx	r3, r3, r2
 8016822:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 8016826:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801682a:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 801682e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8016832:	b29a      	uxth	r2, r3
 8016834:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8016838:	4b65      	ldr	r3, [pc, #404]	@ (80169d0 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 801683a:	400b      	ands	r3, r1
 801683c:	4313      	orrs	r3, r2
 801683e:	461a      	mov	r2, r3
 8016840:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8016844:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8016848:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 801684c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016850:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8016854:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8016858:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801685a:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016864:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 8016868:	6812      	ldr	r2, [r2, #0]
 801686a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801686c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	1d1a      	adds	r2, r3, #4
 8016874:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8016878:	601a      	str	r2, [r3, #0]
}
 801687a:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 801687c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8016880:	4613      	mov	r3, r2
 8016882:	005b      	lsls	r3, r3, #1
 8016884:	4413      	add	r3, r2
 8016886:	009b      	lsls	r3, r3, #2
 8016888:	461a      	mov	r2, r3
 801688a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801688e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	4413      	add	r3, r2
 8016896:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 801689a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	461a      	mov	r2, r3
 80168a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80168a6:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80168aa:	601a      	str	r2, [r3, #0]
  return (val);
 80168ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80168b0:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 80168ba:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80168be:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80168c2:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 80168c6:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80168ca:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80168ce:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80168d2:	fb43 f302 	smusd	r3, r3, r2
 80168d6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 80168da:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80168de:	0c1b      	lsrs	r3, r3, #16
 80168e0:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 80168e4:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80168e8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80168ec:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 80168f0:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80168f4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80168f8:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80168fc:	fb23 f312 	smuadx	r3, r3, r2
 8016900:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8016904:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8016908:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 801690c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8016910:	b29a      	uxth	r2, r3
 8016912:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8016916:	4b2e      	ldr	r3, [pc, #184]	@ (80169d0 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8016918:	400b      	ands	r3, r1
 801691a:	4313      	orrs	r3, r2
 801691c:	461a      	mov	r2, r3
 801691e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8016922:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8016926:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 801692a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801692e:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8016932:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8016936:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016938:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016942:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8016946:	6812      	ldr	r2, [r2, #0]
 8016948:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801694a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	1d1a      	adds	r2, r3, #4
 8016952:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8016956:	601a      	str	r2, [r3, #0]
}
 8016958:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 801695a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801695e:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8016962:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4413      	add	r3, r2
 801696a:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 801696e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016972:	3b01      	subs	r3, #1
 8016974:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8016978:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801697c:	2b00      	cmp	r3, #0
 801697e:	f47f ab44 	bne.w	801600a <arm_radix4_butterfly_inverse_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8016982:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016986:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 801698a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801698e:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8016992:	6812      	ldr	r2, [r2, #0]
 8016994:	0092      	lsls	r2, r2, #2
 8016996:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8016998:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801699c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	089b      	lsrs	r3, r3, #2
 80169a4:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80169a8:	f000 bcc6 	b.w	8017338 <arm_radix4_butterfly_inverse_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 80169ac:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80169b0:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 80169b4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80169b8:	089b      	lsrs	r3, r3, #2
 80169ba:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 80169be:	2300      	movs	r3, #0
 80169c0:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 80169c4:	2300      	movs	r3, #0
 80169c6:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80169ca:	f000 bc9d 	b.w	8017308 <arm_radix4_butterfly_inverse_q15+0x13c4>
 80169ce:	bf00      	nop
 80169d0:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 80169d4:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80169de:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80169e2:	6812      	ldr	r2, [r2, #0]
 80169e4:	441a      	add	r2, r3
 80169e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80169ea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80169ee:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80169f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80169f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	461a      	mov	r2, r3
 80169fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a02:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8016a06:	601a      	str	r2, [r3, #0]
  return (val);
 8016a08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a0c:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8016a16:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8016a1a:	00db      	lsls	r3, r3, #3
 8016a1c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016a20:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8016a24:	6812      	ldr	r2, [r2, #0]
 8016a26:	441a      	add	r2, r3
 8016a28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a2c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8016a30:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016a32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a36:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	461a      	mov	r2, r3
 8016a40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a44:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8016a48:	601a      	str	r2, [r3, #0]
  return (val);
 8016a4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a4e:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8016a58:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	005b      	lsls	r3, r3, #1
 8016a60:	4413      	add	r3, r2
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	461a      	mov	r2, r3
 8016a66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a6a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	441a      	add	r2, r3
 8016a72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a76:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8016a7a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016a7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a80:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	461a      	mov	r2, r3
 8016a8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a8e:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8016a92:	601a      	str	r2, [r3, #0]
  return (val);
 8016a94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016a98:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8016aa2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016aa6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8016aaa:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 8016ab6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016aba:	009b      	lsls	r3, r3, #2
 8016abc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016ac0:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8016ac4:	6812      	ldr	r2, [r2, #0]
 8016ac6:	441a      	add	r2, r3
 8016ac8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016acc:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016ad0:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8016ad2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ad6:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016ada:	681a      	ldr	r2, [r3, #0]
 8016adc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8016ae0:	009b      	lsls	r3, r3, #2
 8016ae2:	441a      	add	r2, r3
 8016ae4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ae8:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016aec:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8016aee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016af2:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8016afc:	009b      	lsls	r3, r3, #2
 8016afe:	441a      	add	r2, r3
 8016b00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b04:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8016b08:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8016b0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b0e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8016b12:	681a      	ldr	r2, [r3, #0]
 8016b14:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	441a      	add	r2, r3
 8016b1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b20:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016b24:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8016b26:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016b2a:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8016b2e:	e3dc      	b.n	80172ea <arm_radix4_butterfly_inverse_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8016b30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b34:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016b38:	681a      	ldr	r2, [r3, #0]
 8016b3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b3e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8016b42:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016b44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b48:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	461a      	mov	r2, r3
 8016b52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b56:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8016b5a:	601a      	str	r2, [r3, #0]
  return (val);
 8016b5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b60:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8016b6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b6e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8016b72:	681a      	ldr	r2, [r3, #0]
 8016b74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b78:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8016b7c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016b7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b82:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b90:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8016b94:	601a      	str	r2, [r3, #0]
  return (val);
 8016b96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016b9a:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8016ba4:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8016ba8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8016bac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016bb0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8016bb4:	6019      	str	r1, [r3, #0]
 8016bb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016bba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8016bbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016bc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016bc4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016bce:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8016bd2:	6812      	ldr	r2, [r2, #0]
 8016bd4:	fa93 f212 	qadd16	r2, r3, r2
 8016bd8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016bdc:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8016be0:	601a      	str	r2, [r3, #0]
  return(result);
 8016be2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016be6:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8016bf0:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8016bf4:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8016bf8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016bfc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8016c00:	6019      	str	r1, [r3, #0]
 8016c02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c06:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8016c0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016c0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c10:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016c1a:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8016c1e:	6812      	ldr	r2, [r2, #0]
 8016c20:	fad3 f212 	qsub16	r2, r3, r2
 8016c24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c28:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8016c2c:	601a      	str	r2, [r3, #0]
  return(result);
 8016c2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c32:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8016c3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c40:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016c44:	681a      	ldr	r2, [r3, #0]
 8016c46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c4a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8016c4e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016c50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c54:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c62:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8016c66:	601a      	str	r2, [r3, #0]
  return (val);
 8016c68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c6c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8016c76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c7a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c84:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8016c88:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016c8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c8e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	461a      	mov	r2, r3
 8016c98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016c9c:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8016ca0:	601a      	str	r2, [r3, #0]
  return (val);
 8016ca2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ca6:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8016cb0:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8016cb4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8016cb8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016cbc:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8016cc0:	6019      	str	r1, [r3, #0]
 8016cc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016cc6:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8016cca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016ccc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016cd0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016cda:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8016cde:	6812      	ldr	r2, [r2, #0]
 8016ce0:	fa93 f212 	qadd16	r2, r3, r2
 8016ce4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ce8:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8016cec:	601a      	str	r2, [r3, #0]
  return(result);
 8016cee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016cf2:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8016cfc:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8016d00:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016d04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d08:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8016d0c:	6019      	str	r1, [r3, #0]
 8016d0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d12:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8016d16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016d18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d1c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016d26:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8016d2a:	6812      	ldr	r2, [r2, #0]
 8016d2c:	fa93 f222 	shadd16	r2, r3, r2
 8016d30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d34:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8016d38:	601a      	str	r2, [r3, #0]
  return(result);
 8016d3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d3e:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8016d48:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8016d4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d50:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8016d54:	601a      	str	r2, [r3, #0]
 8016d56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d5a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8016d5e:	2200      	movs	r2, #0
 8016d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016d62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d66:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016d70:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8016d74:	6812      	ldr	r2, [r2, #0]
 8016d76:	fa93 f222 	shadd16	r2, r3, r2
 8016d7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d7e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8016d82:	601a      	str	r2, [r3, #0]
  return(result);
 8016d84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d88:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 8016d92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016d96:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016d9a:	681a      	ldr	r2, [r3, #0]
 8016d9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016da0:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8016da4:	601a      	str	r2, [r3, #0]
 8016da6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016daa:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8016dae:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8016db2:	601a      	str	r2, [r3, #0]
  q31_t val = value;
 8016db4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016db8:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8016dbc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016dc0:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8016dc4:	6812      	ldr	r2, [r2, #0]
 8016dc6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8016dc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016dcc:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8016dd0:	681a      	ldr	r2, [r3, #0]
 8016dd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016dd6:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	601a      	str	r2, [r3, #0]
}
 8016dde:	bf00      	nop
        pSi0 += 2 * n1;
 8016de0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016de4:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8016dee:	009b      	lsls	r3, r3, #2
 8016df0:	441a      	add	r2, r3
 8016df2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016df6:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8016dfa:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8016dfc:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8016e00:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016e04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e08:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8016e0c:	6019      	str	r1, [r3, #0]
 8016e0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e12:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8016e16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e1c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016e26:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8016e2a:	6812      	ldr	r2, [r2, #0]
 8016e2c:	fad3 f222 	shsub16	r2, r3, r2
 8016e30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e34:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8016e38:	601a      	str	r2, [r3, #0]
  return(result);
 8016e3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e3e:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16U;
 8016e48:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8016e4c:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8016e50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e54:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8016e58:	6019      	str	r1, [r3, #0]
 8016e5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e5e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8016e62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016e64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e68:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016e72:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8016e76:	6812      	ldr	r2, [r2, #0]
 8016e78:	fb43 f202 	smusd	r2, r3, r2
 8016e7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e80:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8016e84:	601a      	str	r2, [r3, #0]
  return(result);
 8016e86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016e8a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	0c1b      	lsrs	r3, r3, #16
 8016e92:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 8016e96:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8016e9a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8016e9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ea2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8016ea6:	6019      	str	r1, [r3, #0]
 8016ea8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016eac:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8016eb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016eb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016eb6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016ec0:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8016ec4:	6812      	ldr	r2, [r2, #0]
 8016ec6:	fb23 f212 	smuadx	r2, r3, r2
 8016eca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ece:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8016ed2:	601a      	str	r2, [r3, #0]
  return(result);
 8016ed4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ed8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8016ee2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ee6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016ef0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8016ef4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016ef6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016efa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	461a      	mov	r2, r3
 8016f04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f08:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8016f0c:	601a      	str	r2, [r3, #0]
  return (val);
 8016f0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f12:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8016f1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f20:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016f24:	681a      	ldr	r2, [r3, #0]
 8016f26:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8016f2a:	b299      	uxth	r1, r3
 8016f2c:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8016f30:	4bd9      	ldr	r3, [pc, #868]	@ (8017298 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8016f32:	4003      	ands	r3, r0
 8016f34:	430b      	orrs	r3, r1
 8016f36:	4619      	mov	r1, r3
 8016f38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f3c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8016f40:	601a      	str	r2, [r3, #0]
 8016f42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f46:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8016f4a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016f4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f50:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8016f54:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016f58:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8016f5c:	6812      	ldr	r2, [r2, #0]
 8016f5e:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8016f60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f64:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8016f68:	681a      	ldr	r2, [r3, #0]
 8016f6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f6e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	601a      	str	r2, [r3, #0]
}
 8016f76:	bf00      	nop
        pSi1 += 2 * n1;
 8016f78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f7c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8016f86:	009b      	lsls	r3, r3, #2
 8016f88:	441a      	add	r2, r3
 8016f8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f8e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8016f92:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8016f94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016f98:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fa2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8016fa6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8016fa8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fac:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fba:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8016fbe:	601a      	str	r2, [r3, #0]
  return (val);
 8016fc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fc4:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8016fce:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8016fd2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8016fd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fda:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8016fde:	6019      	str	r1, [r3, #0]
 8016fe0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fe4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8016fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016fea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016fee:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016ff8:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8016ffc:	6812      	ldr	r2, [r2, #0]
 8016ffe:	fad3 f212 	qsub16	r2, r3, r2
 8017002:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017006:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801700a:	601a      	str	r2, [r3, #0]
  return(result);
 801700c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017010:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 801701a:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801701e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8017022:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017026:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801702a:	6019      	str	r1, [r3, #0]
 801702c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017030:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8017034:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017036:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801703a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017044:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8017048:	6812      	ldr	r2, [r2, #0]
 801704a:	fae3 f222 	shsax	r2, r3, r2
 801704e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017052:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8017056:	601a      	str	r2, [r3, #0]
  return(result);
 8017058:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801705c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 8017066:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801706a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801706e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017072:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017076:	6019      	str	r1, [r3, #0]
 8017078:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801707c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8017080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017082:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017086:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017090:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8017094:	6812      	ldr	r2, [r2, #0]
 8017096:	faa3 f222 	shasx	r2, r3, r2
 801709a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801709e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80170a2:	601a      	str	r2, [r3, #0]
  return(result);
 80170a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80170a8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16U;
 80170b2:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 80170b6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80170ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80170be:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80170c2:	6019      	str	r1, [r3, #0]
 80170c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80170c8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80170cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80170ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80170d2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80170dc:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80170e0:	6812      	ldr	r2, [r2, #0]
 80170e2:	fb43 f202 	smusd	r2, r3, r2
 80170e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80170ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80170ee:	601a      	str	r2, [r3, #0]
  return(result);
 80170f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80170f4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	0c1b      	lsrs	r3, r3, #16
 80170fc:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C1, S);
 8017100:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8017104:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8017108:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801710c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8017110:	6019      	str	r1, [r3, #0]
 8017112:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 801711a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801711c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017120:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801712a:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 801712e:	6812      	ldr	r2, [r2, #0]
 8017130:	fb23 f212 	smuadx	r2, r3, r2
 8017134:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017138:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 801713c:	601a      	str	r2, [r3, #0]
  return(result);
 801713e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017142:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 801714c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017150:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801715a:	b299      	uxth	r1, r3
 801715c:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8017160:	4b4d      	ldr	r3, [pc, #308]	@ (8017298 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8017162:	4003      	ands	r3, r0
 8017164:	430b      	orrs	r3, r1
 8017166:	4619      	mov	r1, r3
 8017168:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801716c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8017170:	601a      	str	r2, [r3, #0]
 8017172:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801717a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801717c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017180:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8017184:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017188:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 801718c:	6812      	ldr	r2, [r2, #0]
 801718e:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8017190:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017194:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801719e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	601a      	str	r2, [r3, #0]
}
 80171a6:	bf00      	nop
        pSi2 += 2 * n1;
 80171a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80171ac:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80171b0:	681a      	ldr	r2, [r3, #0]
 80171b2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80171b6:	009b      	lsls	r3, r3, #2
 80171b8:	441a      	add	r2, r3
 80171ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80171be:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80171c2:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUSD(C3, R) >> 16U;
 80171c4:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 80171c8:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80171cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80171d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80171d4:	6019      	str	r1, [r3, #0]
 80171d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80171da:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80171de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80171e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80171e4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80171ee:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80171f2:	6812      	ldr	r2, [r2, #0]
 80171f4:	fb43 f202 	smusd	r2, r3, r2
 80171f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80171fc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8017200:	601a      	str	r2, [r3, #0]
  return(result);
 8017202:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017206:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	0c1b      	lsrs	r3, r3, #16
 801720e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C3, R);
 8017212:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8017216:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801721a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801721e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8017222:	6019      	str	r1, [r3, #0]
 8017224:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017228:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801722c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801722e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017232:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801723c:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8017240:	6812      	ldr	r2, [r2, #0]
 8017242:	fb23 f212 	smuadx	r2, r3, r2
 8017246:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801724a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 801724e:	601a      	str	r2, [r3, #0]
  return(result);
 8017250:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017254:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 801725e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017262:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801726c:	b299      	uxth	r1, r3
 801726e:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8017272:	4b09      	ldr	r3, [pc, #36]	@ (8017298 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8017274:	4003      	ands	r3, r0
 8017276:	430b      	orrs	r3, r1
 8017278:	4619      	mov	r1, r3
 801727a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801727e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8017282:	601a      	str	r2, [r3, #0]
 8017284:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017288:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801728c:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801728e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017292:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8017296:	e001      	b.n	801729c <arm_radix4_butterfly_inverse_q15+0x1358>
 8017298:	ffff0000 	.word	0xffff0000
 801729c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80172a0:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 80172a4:	6812      	ldr	r2, [r2, #0]
 80172a6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80172a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80172ac:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80172b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	601a      	str	r2, [r3, #0]
}
 80172be:	bf00      	nop
        pSi3 += 2 * n1;
 80172c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80172c4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80172ce:	009b      	lsls	r3, r3, #2
 80172d0:	441a      	add	r2, r3
 80172d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80172d6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80172da:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 80172dc:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 80172e0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80172e4:	4413      	add	r3, r2
 80172e6:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80172ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80172ee:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80172f2:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	429a      	cmp	r2, r3
 80172fa:	f4ff ac19 	bcc.w	8016b30 <arm_radix4_butterfly_inverse_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 80172fe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8017302:	3301      	adds	r3, #1
 8017304:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8017308:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801730c:	3b01      	subs	r3, #1
 801730e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8017312:	429a      	cmp	r2, r3
 8017314:	f67f ab5e 	bls.w	80169d4 <arm_radix4_butterfly_inverse_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8017318:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801731c:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8017320:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017324:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8017328:	6812      	ldr	r2, [r2, #0]
 801732a:	0092      	lsls	r2, r2, #2
 801732c:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 801732e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8017332:	089b      	lsrs	r3, r3, #2
 8017334:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8017338:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 801733c:	2b04      	cmp	r3, #4
 801733e:	f63f ab35 	bhi.w	80169ac <arm_radix4_butterfly_inverse_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8017342:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017346:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	089b      	lsrs	r3, r3, #2
 801734e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 8017352:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017356:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801735a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801735e:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8017362:	6812      	ldr	r2, [r2, #0]
 8017364:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 8017366:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801736a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	1d1a      	adds	r2, r3, #4
 8017372:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017376:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801737a:	601a      	str	r2, [r3, #0]
 801737c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017380:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	1f1a      	subs	r2, r3, #4
 8017388:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801738c:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8017390:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8017392:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017396:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	461a      	mov	r2, r3
 80173a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173a4:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80173a8:	601a      	str	r2, [r3, #0]
  return (val);
 80173aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173ae:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 80173b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173bc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	1d1a      	adds	r2, r3, #4
 80173c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173c8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80173cc:	601a      	str	r2, [r3, #0]
 80173ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173d2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	1f1a      	subs	r2, r3, #4
 80173da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173de:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80173e2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80173e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173e8:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	461a      	mov	r2, r3
 80173f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80173f6:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 80173fa:	601a      	str	r2, [r3, #0]
  return (val);
 80173fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017400:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 801740a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801740e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	1d1a      	adds	r2, r3, #4
 8017416:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801741a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801741e:	601a      	str	r2, [r3, #0]
 8017420:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017424:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	1f1a      	subs	r2, r3, #4
 801742c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017430:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8017434:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8017436:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801743a:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	461a      	mov	r2, r3
 8017444:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017448:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 801744c:	601a      	str	r2, [r3, #0]
  return (val);
 801744e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017452:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 801745c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017460:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	1d1a      	adds	r2, r3, #4
 8017468:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801746c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8017470:	601a      	str	r2, [r3, #0]
 8017472:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017476:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	1f1a      	subs	r2, r3, #4
 801747e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017482:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8017486:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8017488:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801748c:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	461a      	mov	r2, r3
 8017496:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801749a:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801749e:	601a      	str	r2, [r3, #0]
  return (val);
 80174a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80174a4:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 80174ae:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 80174b2:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 80174b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80174ba:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80174be:	6019      	str	r1, [r3, #0]
 80174c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80174c4:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 80174c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80174ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80174ce:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80174d8:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 80174dc:	6812      	ldr	r2, [r2, #0]
 80174de:	fa93 f212 	qadd16	r2, r3, r2
 80174e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80174e6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80174ea:	601a      	str	r2, [r3, #0]
  return(result);
 80174ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80174f0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80174fa:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80174fe:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8017502:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017506:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801750a:	6019      	str	r1, [r3, #0]
 801750c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017510:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8017514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017516:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801751a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017524:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8017528:	6812      	ldr	r2, [r2, #0]
 801752a:	fa93 f212 	qadd16	r2, r3, r2
 801752e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017532:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8017536:	601a      	str	r2, [r3, #0]
  return(result);
 8017538:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801753c:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 8017546:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801754a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f1a3 0210 	sub.w	r2, r3, #16
 8017554:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017558:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801755c:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 801755e:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8017562:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8017566:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801756a:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 801756e:	6019      	str	r1, [r3, #0]
 8017570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017574:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8017578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801757a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801757e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017588:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 801758c:	6812      	ldr	r2, [r2, #0]
 801758e:	fa93 f222 	shadd16	r2, r3, r2
 8017592:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017596:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 801759a:	601a      	str	r2, [r3, #0]
  return(result);
 801759c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175a0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	4619      	mov	r1, r3
 80175a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175ac:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80175b0:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80175b4:	601a      	str	r2, [r3, #0]
 80175b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175ba:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80175be:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80175c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175c4:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80175c8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80175cc:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 80175d0:	6812      	ldr	r2, [r2, #0]
 80175d2:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80175d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175d8:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80175e4:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 80175e8:	6812      	ldr	r2, [r2, #0]
 80175ea:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80175ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175f0:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	1d1a      	adds	r2, r3, #4
 80175fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80175fe:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	601a      	str	r2, [r3, #0]
}
 8017606:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8017608:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801760c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8017610:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017614:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8017618:	6019      	str	r1, [r3, #0]
 801761a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801761e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8017622:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017624:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017628:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017632:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8017636:	6812      	ldr	r2, [r2, #0]
 8017638:	fa93 f212 	qadd16	r2, r3, r2
 801763c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017640:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8017644:	601a      	str	r2, [r3, #0]
  return(result);
 8017646:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801764a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 8017654:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8017658:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801765c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017660:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017664:	6019      	str	r1, [r3, #0]
 8017666:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801766a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801766e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017670:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017674:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801767e:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8017682:	6812      	ldr	r2, [r2, #0]
 8017684:	fad3 f222 	shsub16	r2, r3, r2
 8017688:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801768c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8017690:	601a      	str	r2, [r3, #0]
  return(result);
 8017692:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017696:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	4619      	mov	r1, r3
 801769e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80176a2:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80176a6:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80176aa:	601a      	str	r2, [r3, #0]
 80176ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80176b0:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80176b4:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80176b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80176ba:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 80176be:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80176c2:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 80176c6:	6812      	ldr	r2, [r2, #0]
 80176c8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80176ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80176ce:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80176da:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 80176de:	6812      	ldr	r2, [r2, #0]
 80176e0:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80176e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80176e6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	1d1a      	adds	r2, r3, #4
 80176f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80176f4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	601a      	str	r2, [r3, #0]
}
 80176fc:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 80176fe:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8017702:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8017706:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801770a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801770e:	6019      	str	r1, [r3, #0]
 8017710:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017714:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8017718:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801771a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801771e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017728:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 801772c:	6812      	ldr	r2, [r2, #0]
 801772e:	fad3 f212 	qsub16	r2, r3, r2
 8017732:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017736:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 801773a:	601a      	str	r2, [r3, #0]
  return(result);
 801773c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017740:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 801774a:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801774e:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8017752:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017756:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 801775a:	6019      	str	r1, [r3, #0]
 801775c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017760:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8017764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017766:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801776a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017774:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 8017778:	6812      	ldr	r2, [r2, #0]
 801777a:	fad3 f212 	qsub16	r2, r3, r2
 801777e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017782:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8017786:	601a      	str	r2, [r3, #0]
  return(result);
 8017788:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801778c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 8017796:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801779a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801779e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177a2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80177a6:	6019      	str	r1, [r3, #0]
 80177a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177ac:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80177b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80177b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177b6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80177c0:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 80177c4:	6812      	ldr	r2, [r2, #0]
 80177c6:	faa3 f222 	shasx	r2, r3, r2
 80177ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177ce:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80177d2:	601a      	str	r2, [r3, #0]
  return(result);
 80177d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177d8:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	4619      	mov	r1, r3
 80177e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177e4:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80177e8:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80177ec:	601a      	str	r2, [r3, #0]
 80177ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177f2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80177f6:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80177f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80177fc:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8017800:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8017804:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8017808:	6812      	ldr	r2, [r2, #0]
 801780a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801780c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017810:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801781c:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 8017820:	6812      	ldr	r2, [r2, #0]
 8017822:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8017824:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017828:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	1d1a      	adds	r2, r3, #4
 8017832:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017836:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	601a      	str	r2, [r3, #0]
}
 801783e:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8017840:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8017844:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8017848:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801784c:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8017850:	6019      	str	r1, [r3, #0]
 8017852:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017856:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 801785a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801785c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017860:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801786a:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 801786e:	6812      	ldr	r2, [r2, #0]
 8017870:	fae3 f222 	shsax	r2, r3, r2
 8017874:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017878:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 801787c:	601a      	str	r2, [r3, #0]
  return(result);
 801787e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017882:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	4619      	mov	r1, r3
 801788a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801788e:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8017892:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8017896:	601a      	str	r2, [r3, #0]
 8017898:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801789c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80178a0:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80178a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80178a6:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80178aa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80178ae:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 80178b2:	6812      	ldr	r2, [r2, #0]
 80178b4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80178b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80178ba:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80178c6:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 80178ca:	6812      	ldr	r2, [r2, #0]
 80178cc:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80178ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80178d2:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	1d1a      	adds	r2, r3, #4
 80178dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80178e0:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	601a      	str	r2, [r3, #0]
}
 80178e8:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 80178ea:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80178ee:	3b01      	subs	r3, #1
 80178f0:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80178f4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	f47f ad34 	bne.w	8017366 <arm_radix4_butterfly_inverse_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 80178fe:	bf00      	nop
 8017900:	bf00      	nop
 8017902:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8017906:	46bd      	mov	sp, r7
 8017908:	bc90      	pop	{r4, r7}
 801790a:	4770      	bx	lr

0801790c <arm_mfcc_init_q15>:
  const uint32_t *filterPos,
  const uint32_t *filterLengths,
  const q15_t *filterCoefs,
  const q15_t *windowCoefs
  )
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b086      	sub	sp, #24
 8017910:	af00      	add	r7, sp, #0
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	607a      	str	r2, [r7, #4]
 8017918:	603b      	str	r3, [r7, #0]
 arm_status status;

 S->fftLen=fftLen;
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	68ba      	ldr	r2, [r7, #8]
 801791e:	615a      	str	r2, [r3, #20]
 S->nbMelFilters=nbMelFilters;
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	687a      	ldr	r2, [r7, #4]
 8017924:	619a      	str	r2, [r3, #24]
 S->nbDctOutputs=nbDctOutputs;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	683a      	ldr	r2, [r7, #0]
 801792a:	61da      	str	r2, [r3, #28]
 S->dctCoefs=dctCoefs;
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	6a3a      	ldr	r2, [r7, #32]
 8017930:	601a      	str	r2, [r3, #0]
 S->filterPos=filterPos;
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017936:	60da      	str	r2, [r3, #12]
 S->filterLengths=filterLengths;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801793c:	611a      	str	r2, [r3, #16]
 S->filterCoefs=filterCoefs;
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017942:	605a      	str	r2, [r3, #4]
 S->windowCoefs=windowCoefs;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017948:	609a      	str	r2, [r3, #8]

 #if defined(ARM_MFCC_CFFT_BASED)
 status=arm_cfft_init_q15(&(S->cfft),fftLen);
 #else
 RFFT_INIT(fftLen);
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	f103 0020 	add.w	r0, r3, #32
 8017950:	2301      	movs	r3, #1
 8017952:	2200      	movs	r2, #0
 8017954:	68b9      	ldr	r1, [r7, #8]
 8017956:	f000 fab5 	bl	8017ec4 <arm_rfft_init_q15>
 801795a:	4603      	mov	r3, r0
 801795c:	75fb      	strb	r3, [r7, #23]
 #endif
 
 return(status);
 801795e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017962:	4618      	mov	r0, r3
 8017964:	3718      	adds	r7, #24
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}
	...

0801796c <arm_mfcc_q15>:
  q15_t *pSrc,
  q15_t *pDst,
  q31_t *pTmp
  )
#endif
{
 801796c:	b5b0      	push	{r4, r5, r7, lr}
 801796e:	b09a      	sub	sp, #104	@ 0x68
 8017970:	af02      	add	r7, sp, #8
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	607a      	str	r2, [r7, #4]
 8017978:	603b      	str	r3, [r7, #0]
    q15_t m;
    uint32_t index;
    uint32_t fftShift=0;
 801797a:	2300      	movs	r3, #0
 801797c:	653b      	str	r3, [r7, #80]	@ 0x50
    q63_t result;
    arm_matrix_instance_q15 pDctMat;
    uint32_t i;
    uint32_t coefsPos;
    uint32_t filterLimit;
    q15_t *pTmp2=(q15_t*)pTmp;
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	64fb      	str	r3, [r7, #76]	@ 0x4c

    arm_status status = ARM_MATH_SUCCESS;
 8017982:	2300      	movs	r3, #0
 8017984:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    // q15
    arm_absmax_q15(pSrc,S->fftLen,&m,&index);
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	6959      	ldr	r1, [r3, #20]
 801798c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017990:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8017994:	68b8      	ldr	r0, [r7, #8]
 8017996:	f7fc f914 	bl	8013bc2 <arm_absmax_q15>

    if ((m != 0) && (m != 0x7FFF))
 801799a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d025      	beq.n	80179ee <arm_mfcc_q15+0x82>
 80179a2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80179a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80179aa:	4293      	cmp	r3, r2
 80179ac:	d01f      	beq.n	80179ee <arm_mfcc_q15+0x82>
    {
       q15_t quotient;
       int16_t shift;

       status = arm_divide_q15(0x7FFF,m,&quotient,&shift);
 80179ae:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 80179b2:	f107 0314 	add.w	r3, r7, #20
 80179b6:	f107 0216 	add.w	r2, r7, #22
 80179ba:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80179be:	f7fb f80a 	bl	80129d6 <arm_divide_q15>
 80179c2:	4603      	mov	r3, r0
 80179c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
       if (status != ARM_MATH_SUCCESS)
 80179c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d002      	beq.n	80179d6 <arm_mfcc_q15+0x6a>
       {
          return(status);
 80179d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80179d4:	e0e8      	b.n	8017ba8 <arm_mfcc_q15+0x23c>
       }
 
       arm_scale_q15(pSrc,quotient,shift,pSrc,S->fftLen);
 80179d6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80179da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80179de:	b25a      	sxtb	r2, r3
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	695b      	ldr	r3, [r3, #20]
 80179e4:	9300      	str	r3, [sp, #0]
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	68b8      	ldr	r0, [r7, #8]
 80179ea:	f7fa fe31 	bl	8012650 <arm_scale_q15>
    }


    // q15
    arm_mult_q15(pSrc,S->windowCoefs, pSrc, S->fftLen);
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	6899      	ldr	r1, [r3, #8]
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	695b      	ldr	r3, [r3, #20]
 80179f6:	68ba      	ldr	r2, [r7, #8]
 80179f8:	68b8      	ldr	r0, [r7, #8]
 80179fa:	f7fa fdd1 	bl	80125a0 <arm_mult_q15>


    /* Compute spectrum magnitude 
    */
    fftShift = 31 - __CLZ(S->fftLen);
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	695b      	ldr	r3, [r3, #20]
 8017a02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8017a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d101      	bne.n	8017a0e <arm_mfcc_q15+0xa2>
    return 32U;
 8017a0a:	2320      	movs	r3, #32
 8017a0c:	e003      	b.n	8017a16 <arm_mfcc_q15+0xaa>
  return __builtin_clz(value);
 8017a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a10:	fab3 f383 	clz	r3, r3
 8017a14:	b2db      	uxtb	r3, r3
 8017a16:	f1c3 031f 	rsb	r3, r3, #31
 8017a1a:	653b      	str	r3, [r7, #80]	@ 0x50
      pTmp2[2*i+1] = 0;
    }
    arm_cfft_q15(&(S->cfft),pTmp2,0,1);
#else
    /* Default RFFT based implementation */
    arm_rfft_q15(&(S->rfft),pSrc,pTmp2);
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	3320      	adds	r3, #32
 8017a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017a22:	68b9      	ldr	r1, [r7, #8]
 8017a24:	4618      	mov	r0, r3
 8017a26:	f000 fae4 	bl	8017ff2 <arm_rfft_q15>
#endif
#endif
    filterLimit = 1 + (S->fftLen >> 1);
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	695b      	ldr	r3, [r3, #20]
 8017a2e:	085b      	lsrs	r3, r3, #1
 8017a30:	3301      	adds	r3, #1
 8017a32:	64bb      	str	r3, [r7, #72]	@ 0x48


    // q15 - fftShift
    arm_cmplx_mag_q15(pTmp2,pSrc,filterLimit);
 8017a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017a36:	68b9      	ldr	r1, [r7, #8]
 8017a38:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017a3a:	f7fa ff92 	bl	8012962 <arm_cmplx_mag_q15>
    // q14 - fftShift

    /* Apply MEL filters */
    coefsPos = 0;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(i=0; i<S->nbMelFilters; i++)
 8017a42:	2300      	movs	r3, #0
 8017a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017a46:	e046      	b.n	8017ad6 <arm_mfcc_q15+0x16a>
    {
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	68da      	ldr	r2, [r3, #12]
 8017a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	4413      	add	r3, r2
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	005b      	lsls	r3, r3, #1
 8017a56:	68ba      	ldr	r2, [r7, #8]
 8017a58:	18d0      	adds	r0, r2, r3
        &(S->filterCoefs[coefsPos]),
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	685a      	ldr	r2, [r3, #4]
 8017a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	18d1      	adds	r1, r2, r3
        S->filterLengths[i],
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	691a      	ldr	r2, [r3, #16]
 8017a68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	4413      	add	r3, r2
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8017a6e:	681a      	ldr	r2, [r3, #0]
 8017a70:	f107 0320 	add.w	r3, r7, #32
 8017a74:	f7fa fd5a 	bl	801252c <arm_dot_prod_q15>
        &result);

      coefsPos += S->filterLengths[i];
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	691a      	ldr	r2, [r3, #16]
 8017a7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a7e:	009b      	lsls	r3, r3, #2
 8017a80:	4413      	add	r3, r2
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017a86:	4413      	add	r3, r2
 8017a88:	65bb      	str	r3, [r7, #88]	@ 0x58

      // q34.29 - fftShift
      result += MICRO_Q15;
 8017a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017a8e:	f240 2119 	movw	r1, #537	@ 0x219
 8017a92:	1854      	adds	r4, r2, r1
 8017a94:	f143 0500 	adc.w	r5, r3, #0
 8017a98:	e9c7 4508 	strd	r4, r5, [r7, #32]
      result >>= SHIFT_MELFILTER_SATURATION_Q15;
 8017a9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8017aa0:	f04f 0200 	mov.w	r2, #0
 8017aa4:	f04f 0300 	mov.w	r3, #0
 8017aa8:	0a82      	lsrs	r2, r0, #10
 8017aaa:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8017aae:	128b      	asrs	r3, r1, #10
 8017ab0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      // q34.29 - fftShift - satShift
      pTmp[i] = __SSAT(result,31) ;
 8017ab4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017ab8:	4613      	mov	r3, r2
 8017aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017abe:	f303 031e 	ssat	r3, #31, r3
 8017ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ac8:	009b      	lsls	r3, r3, #2
 8017aca:	6839      	ldr	r1, [r7, #0]
 8017acc:	440b      	add	r3, r1
 8017ace:	601a      	str	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 8017ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ad2:	3301      	adds	r3, #1
 8017ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	699b      	ldr	r3, [r3, #24]
 8017ada:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d3b3      	bcc.n	8017a48 <arm_mfcc_q15+0xdc>

    }

    if ((m != 0) && (m != 0x7FFF))
 8017ae0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d010      	beq.n	8017b0a <arm_mfcc_q15+0x19e>
 8017ae8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8017aec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017af0:	4293      	cmp	r3, r2
 8017af2:	d00a      	beq.n	8017b0a <arm_mfcc_q15+0x19e>
    {
      arm_scale_q31(pTmp,m<<16,0,pTmp,S->nbMelFilters);
 8017af4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8017af8:	0419      	lsls	r1, r3, #16
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	699b      	ldr	r3, [r3, #24]
 8017afe:	9300      	str	r3, [sp, #0]
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	2200      	movs	r2, #0
 8017b04:	6838      	ldr	r0, [r7, #0]
 8017b06:	f7fa fdda 	bl	80126be <arm_scale_q31>
    }
   
    // q34.29 - fftShift - satShift
    /* Compute the log */
    arm_vlog_q31(pTmp,pTmp,S->nbMelFilters);
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	699b      	ldr	r3, [r3, #24]
 8017b0e:	461a      	mov	r2, r3
 8017b10:	6839      	ldr	r1, [r7, #0]
 8017b12:	6838      	ldr	r0, [r7, #0]
 8017b14:	f7fb faee 	bl	80130f4 <arm_vlog_q31>


    // q5.26
   
    logExponent = fftShift + 2 + SHIFT_MELFILTER_SATURATION_Q15;
 8017b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b1a:	330c      	adds	r3, #12
 8017b1c:	647b      	str	r3, [r7, #68]	@ 0x44
    logExponent = logExponent * LOG2TOLOG_Q15;
 8017b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b20:	4a23      	ldr	r2, [pc, #140]	@ (8017bb0 <arm_mfcc_q15+0x244>)
 8017b22:	fb02 f303 	mul.w	r3, r2, r3
 8017b26:	647b      	str	r3, [r7, #68]	@ 0x44


    // q8.26
    arm_offset_q31(pTmp,logExponent,pTmp,S->nbMelFilters);
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	699b      	ldr	r3, [r3, #24]
 8017b2c:	683a      	ldr	r2, [r7, #0]
 8017b2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017b30:	6838      	ldr	r0, [r7, #0]
 8017b32:	f7fa fd65 	bl	8012600 <arm_offset_q31>
    arm_shift_q31(pTmp,-19,pTmp,S->nbMelFilters);
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	699b      	ldr	r3, [r3, #24]
 8017b3a:	683a      	ldr	r2, [r7, #0]
 8017b3c:	f06f 0112 	mvn.w	r1, #18
 8017b40:	6838      	ldr	r0, [r7, #0]
 8017b42:	f7fa fea5 	bl	8012890 <arm_shift_q31>
    for(i=0; i<S->nbMelFilters; i++)
 8017b46:	2300      	movs	r3, #0
 8017b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017b4a:	e014      	b.n	8017b76 <arm_mfcc_q15+0x20a>
    { 
      pSrc[i] = __SSAT((q15_t)pTmp[i],16);
 8017b4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	683a      	ldr	r2, [r7, #0]
 8017b52:	4413      	add	r3, r2
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	b21b      	sxth	r3, r3
 8017b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8017b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017b5c:	f303 030f 	ssat	r3, #16, r3
 8017b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017b66:	005b      	lsls	r3, r3, #1
 8017b68:	68ba      	ldr	r2, [r7, #8]
 8017b6a:	4413      	add	r3, r2
 8017b6c:	b20a      	sxth	r2, r1
 8017b6e:	801a      	strh	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 8017b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017b72:	3301      	adds	r3, #1
 8017b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	699b      	ldr	r3, [r3, #24]
 8017b7a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d3e5      	bcc.n	8017b4c <arm_mfcc_q15+0x1e0>
    }

    // q8.7

    pDctMat.numRows=S->nbDctOutputs;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	69db      	ldr	r3, [r3, #28]
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	833b      	strh	r3, [r7, #24]
    pDctMat.numCols=S->nbMelFilters;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	699b      	ldr	r3, [r3, #24]
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	837b      	strh	r3, [r7, #26]
    pDctMat.pData=(q15_t*)S->dctCoefs;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	61fb      	str	r3, [r7, #28]

    arm_mat_vec_mult_q15(&pDctMat, pSrc, pDst);
 8017b96:	f107 0318 	add.w	r3, r7, #24
 8017b9a:	687a      	ldr	r2, [r7, #4]
 8017b9c:	68b9      	ldr	r1, [r7, #8]
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7fb fac9 	bl	8013136 <arm_mat_vec_mult_q15>

    return(status);
 8017ba4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3760      	adds	r7, #96	@ 0x60
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bdb0      	pop	{r4, r5, r7, pc}
 8017bb0:	02c5c860 	.word	0x02c5c860

08017bb4 <arm_rfft_init_8192_q15>:
  @par
                   This function also initializes Twiddle factor table.

 */

RFFTINIT_Q15(8192,4096,1)
 8017bb4:	b480      	push	{r7}
 8017bb6:	b085      	sub	sp, #20
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	60f8      	str	r0, [r7, #12]
 8017bbc:	60b9      	str	r1, [r7, #8]
 8017bbe:	607a      	str	r2, [r7, #4]
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8017bc6:	601a      	str	r2, [r3, #0]
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	4a0d      	ldr	r2, [pc, #52]	@ (8017c00 <arm_rfft_init_8192_q15+0x4c>)
 8017bcc:	60da      	str	r2, [r3, #12]
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8017c04 <arm_rfft_init_8192_q15+0x50>)
 8017bd2:	611a      	str	r2, [r3, #16]
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	b2da      	uxtb	r2, r3
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	711a      	strb	r2, [r3, #4]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	b2da      	uxtb	r2, r3
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	715a      	strb	r2, [r3, #5]
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	2201      	movs	r2, #1
 8017be8:	609a      	str	r2, [r3, #8]
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	4a06      	ldr	r2, [pc, #24]	@ (8017c08 <arm_rfft_init_8192_q15+0x54>)
 8017bee:	615a      	str	r2, [r3, #20]
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3714      	adds	r7, #20
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop
 8017c00:	08027a00 	.word	0x08027a00
 8017c04:	0802ba00 	.word	0x0802ba00
 8017c08:	0802fb00 	.word	0x0802fb00

08017c0c <arm_rfft_init_4096_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(4096,2048,2)
 8017c0c:	b480      	push	{r7}
 8017c0e:	b085      	sub	sp, #20
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	60f8      	str	r0, [r7, #12]
 8017c14:	60b9      	str	r1, [r7, #8]
 8017c16:	607a      	str	r2, [r7, #4]
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017c1e:	601a      	str	r2, [r3, #0]
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	4a0d      	ldr	r2, [pc, #52]	@ (8017c58 <arm_rfft_init_4096_q15+0x4c>)
 8017c24:	60da      	str	r2, [r3, #12]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	4a0c      	ldr	r2, [pc, #48]	@ (8017c5c <arm_rfft_init_4096_q15+0x50>)
 8017c2a:	611a      	str	r2, [r3, #16]
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	b2da      	uxtb	r2, r3
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	711a      	strb	r2, [r3, #4]
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	b2da      	uxtb	r2, r3
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	715a      	strb	r2, [r3, #5]
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	2202      	movs	r2, #2
 8017c40:	609a      	str	r2, [r3, #8]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	4a06      	ldr	r2, [pc, #24]	@ (8017c60 <arm_rfft_init_4096_q15+0x54>)
 8017c46:	615a      	str	r2, [r3, #20]
 8017c48:	2300      	movs	r3, #0
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3714      	adds	r7, #20
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c54:	4770      	bx	lr
 8017c56:	bf00      	nop
 8017c58:	08027a00 	.word	0x08027a00
 8017c5c:	0802ba00 	.word	0x0802ba00
 8017c60:	0802faf0 	.word	0x0802faf0

08017c64 <arm_rfft_init_2048_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(2048,1024,4)
 8017c64:	b480      	push	{r7}
 8017c66:	b085      	sub	sp, #20
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	60f8      	str	r0, [r7, #12]
 8017c6c:	60b9      	str	r1, [r7, #8]
 8017c6e:	607a      	str	r2, [r7, #4]
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017c76:	601a      	str	r2, [r3, #0]
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8017cb0 <arm_rfft_init_2048_q15+0x4c>)
 8017c7c:	60da      	str	r2, [r3, #12]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	4a0c      	ldr	r2, [pc, #48]	@ (8017cb4 <arm_rfft_init_2048_q15+0x50>)
 8017c82:	611a      	str	r2, [r3, #16]
 8017c84:	68bb      	ldr	r3, [r7, #8]
 8017c86:	b2da      	uxtb	r2, r3
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	711a      	strb	r2, [r3, #4]
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	b2da      	uxtb	r2, r3
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	715a      	strb	r2, [r3, #5]
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	2204      	movs	r2, #4
 8017c98:	609a      	str	r2, [r3, #8]
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	4a06      	ldr	r2, [pc, #24]	@ (8017cb8 <arm_rfft_init_2048_q15+0x54>)
 8017c9e:	615a      	str	r2, [r3, #20]
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3714      	adds	r7, #20
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop
 8017cb0:	08027a00 	.word	0x08027a00
 8017cb4:	0802ba00 	.word	0x0802ba00
 8017cb8:	0802fae0 	.word	0x0802fae0

08017cbc <arm_rfft_init_1024_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(1024,512,8)
 8017cbc:	b480      	push	{r7}
 8017cbe:	b085      	sub	sp, #20
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	60f8      	str	r0, [r7, #12]
 8017cc4:	60b9      	str	r1, [r7, #8]
 8017cc6:	607a      	str	r2, [r7, #4]
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017cce:	601a      	str	r2, [r3, #0]
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8017d08 <arm_rfft_init_1024_q15+0x4c>)
 8017cd4:	60da      	str	r2, [r3, #12]
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8017d0c <arm_rfft_init_1024_q15+0x50>)
 8017cda:	611a      	str	r2, [r3, #16]
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	b2da      	uxtb	r2, r3
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	711a      	strb	r2, [r3, #4]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	b2da      	uxtb	r2, r3
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	715a      	strb	r2, [r3, #5]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	2208      	movs	r2, #8
 8017cf0:	609a      	str	r2, [r3, #8]
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	4a06      	ldr	r2, [pc, #24]	@ (8017d10 <arm_rfft_init_1024_q15+0x54>)
 8017cf6:	615a      	str	r2, [r3, #20]
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3714      	adds	r7, #20
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop
 8017d08:	08027a00 	.word	0x08027a00
 8017d0c:	0802ba00 	.word	0x0802ba00
 8017d10:	0802fad0 	.word	0x0802fad0

08017d14 <arm_rfft_init_512_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(512,256,16)
 8017d14:	b480      	push	{r7}
 8017d16:	b085      	sub	sp, #20
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	607a      	str	r2, [r7, #4]
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d26:	601a      	str	r2, [r3, #0]
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8017d60 <arm_rfft_init_512_q15+0x4c>)
 8017d2c:	60da      	str	r2, [r3, #12]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	4a0c      	ldr	r2, [pc, #48]	@ (8017d64 <arm_rfft_init_512_q15+0x50>)
 8017d32:	611a      	str	r2, [r3, #16]
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	b2da      	uxtb	r2, r3
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	711a      	strb	r2, [r3, #4]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	b2da      	uxtb	r2, r3
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	715a      	strb	r2, [r3, #5]
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	2210      	movs	r2, #16
 8017d48:	609a      	str	r2, [r3, #8]
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	4a06      	ldr	r2, [pc, #24]	@ (8017d68 <arm_rfft_init_512_q15+0x54>)
 8017d4e:	615a      	str	r2, [r3, #20]
 8017d50:	2300      	movs	r3, #0
 8017d52:	4618      	mov	r0, r3
 8017d54:	3714      	adds	r7, #20
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	08027a00 	.word	0x08027a00
 8017d64:	0802ba00 	.word	0x0802ba00
 8017d68:	0802fac0 	.word	0x0802fac0

08017d6c <arm_rfft_init_256_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(256,128,32)
 8017d6c:	b480      	push	{r7}
 8017d6e:	b085      	sub	sp, #20
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	60f8      	str	r0, [r7, #12]
 8017d74:	60b9      	str	r1, [r7, #8]
 8017d76:	607a      	str	r2, [r7, #4]
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017d7e:	601a      	str	r2, [r3, #0]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	4a0d      	ldr	r2, [pc, #52]	@ (8017db8 <arm_rfft_init_256_q15+0x4c>)
 8017d84:	60da      	str	r2, [r3, #12]
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	4a0c      	ldr	r2, [pc, #48]	@ (8017dbc <arm_rfft_init_256_q15+0x50>)
 8017d8a:	611a      	str	r2, [r3, #16]
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	b2da      	uxtb	r2, r3
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	711a      	strb	r2, [r3, #4]
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	b2da      	uxtb	r2, r3
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	715a      	strb	r2, [r3, #5]
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	2220      	movs	r2, #32
 8017da0:	609a      	str	r2, [r3, #8]
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	4a06      	ldr	r2, [pc, #24]	@ (8017dc0 <arm_rfft_init_256_q15+0x54>)
 8017da6:	615a      	str	r2, [r3, #20]
 8017da8:	2300      	movs	r3, #0
 8017daa:	4618      	mov	r0, r3
 8017dac:	3714      	adds	r7, #20
 8017dae:	46bd      	mov	sp, r7
 8017db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db4:	4770      	bx	lr
 8017db6:	bf00      	nop
 8017db8:	08027a00 	.word	0x08027a00
 8017dbc:	0802ba00 	.word	0x0802ba00
 8017dc0:	0802fab0 	.word	0x0802fab0

08017dc4 <arm_rfft_init_128_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(128,64,64)
 8017dc4:	b480      	push	{r7}
 8017dc6:	b085      	sub	sp, #20
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	607a      	str	r2, [r7, #4]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	2280      	movs	r2, #128	@ 0x80
 8017dd4:	601a      	str	r2, [r3, #0]
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8017e0c <arm_rfft_init_128_q15+0x48>)
 8017dda:	60da      	str	r2, [r3, #12]
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	4a0c      	ldr	r2, [pc, #48]	@ (8017e10 <arm_rfft_init_128_q15+0x4c>)
 8017de0:	611a      	str	r2, [r3, #16]
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	b2da      	uxtb	r2, r3
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	711a      	strb	r2, [r3, #4]
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	b2da      	uxtb	r2, r3
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	715a      	strb	r2, [r3, #5]
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	2240      	movs	r2, #64	@ 0x40
 8017df6:	609a      	str	r2, [r3, #8]
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	4a06      	ldr	r2, [pc, #24]	@ (8017e14 <arm_rfft_init_128_q15+0x50>)
 8017dfc:	615a      	str	r2, [r3, #20]
 8017dfe:	2300      	movs	r3, #0
 8017e00:	4618      	mov	r0, r3
 8017e02:	3714      	adds	r7, #20
 8017e04:	46bd      	mov	sp, r7
 8017e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0a:	4770      	bx	lr
 8017e0c:	08027a00 	.word	0x08027a00
 8017e10:	0802ba00 	.word	0x0802ba00
 8017e14:	0802faa0 	.word	0x0802faa0

08017e18 <arm_rfft_init_64_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(64,32,128)
 8017e18:	b480      	push	{r7}
 8017e1a:	b085      	sub	sp, #20
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	607a      	str	r2, [r7, #4]
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	2240      	movs	r2, #64	@ 0x40
 8017e28:	601a      	str	r2, [r3, #0]
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8017e60 <arm_rfft_init_64_q15+0x48>)
 8017e2e:	60da      	str	r2, [r3, #12]
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	4a0c      	ldr	r2, [pc, #48]	@ (8017e64 <arm_rfft_init_64_q15+0x4c>)
 8017e34:	611a      	str	r2, [r3, #16]
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	b2da      	uxtb	r2, r3
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	711a      	strb	r2, [r3, #4]
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	b2da      	uxtb	r2, r3
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	715a      	strb	r2, [r3, #5]
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	2280      	movs	r2, #128	@ 0x80
 8017e4a:	609a      	str	r2, [r3, #8]
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	4a06      	ldr	r2, [pc, #24]	@ (8017e68 <arm_rfft_init_64_q15+0x50>)
 8017e50:	615a      	str	r2, [r3, #20]
 8017e52:	2300      	movs	r3, #0
 8017e54:	4618      	mov	r0, r3
 8017e56:	3714      	adds	r7, #20
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5e:	4770      	bx	lr
 8017e60:	08027a00 	.word	0x08027a00
 8017e64:	0802ba00 	.word	0x0802ba00
 8017e68:	0802fa90 	.word	0x0802fa90

08017e6c <arm_rfft_init_32_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(32,16,256)
 8017e6c:	b480      	push	{r7}
 8017e6e:	b085      	sub	sp, #20
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	60f8      	str	r0, [r7, #12]
 8017e74:	60b9      	str	r1, [r7, #8]
 8017e76:	607a      	str	r2, [r7, #4]
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	2220      	movs	r2, #32
 8017e7c:	601a      	str	r2, [r3, #0]
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	4a0d      	ldr	r2, [pc, #52]	@ (8017eb8 <arm_rfft_init_32_q15+0x4c>)
 8017e82:	60da      	str	r2, [r3, #12]
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	4a0d      	ldr	r2, [pc, #52]	@ (8017ebc <arm_rfft_init_32_q15+0x50>)
 8017e88:	611a      	str	r2, [r3, #16]
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	b2da      	uxtb	r2, r3
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	711a      	strb	r2, [r3, #4]
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	b2da      	uxtb	r2, r3
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	715a      	strb	r2, [r3, #5]
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017ea0:	609a      	str	r2, [r3, #8]
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	4a06      	ldr	r2, [pc, #24]	@ (8017ec0 <arm_rfft_init_32_q15+0x54>)
 8017ea6:	615a      	str	r2, [r3, #20]
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	4618      	mov	r0, r3
 8017eac:	3714      	adds	r7, #20
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb4:	4770      	bx	lr
 8017eb6:	bf00      	nop
 8017eb8:	08027a00 	.word	0x08027a00
 8017ebc:	0802ba00 	.word	0x0802ba00
 8017ec0:	0802fa80 	.word	0x0802fa80

08017ec4 <arm_rfft_init_q15>:
ARM_DSP_ATTRIBUTE arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b086      	sub	sp, #24
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	60b9      	str	r1, [r7, #8]
 8017ece:	607a      	str	r2, [r7, #4]
 8017ed0:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 8017ed2:	23ff      	movs	r3, #255	@ 0xff
 8017ed4:	75fb      	strb	r3, [r7, #23]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (fftLenReal)
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017edc:	d038      	beq.n	8017f50 <arm_rfft_init_q15+0x8c>
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017ee4:	d87c      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017eec:	d038      	beq.n	8017f60 <arm_rfft_init_q15+0x9c>
 8017eee:	68bb      	ldr	r3, [r7, #8]
 8017ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017ef4:	d874      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017efc:	d038      	beq.n	8017f70 <arm_rfft_init_q15+0xac>
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017f04:	d86c      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017f06:	68bb      	ldr	r3, [r7, #8]
 8017f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017f0c:	d038      	beq.n	8017f80 <arm_rfft_init_q15+0xbc>
 8017f0e:	68bb      	ldr	r3, [r7, #8]
 8017f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017f14:	d864      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017f16:	68bb      	ldr	r3, [r7, #8]
 8017f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f1c:	d038      	beq.n	8017f90 <arm_rfft_init_q15+0xcc>
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f24:	d85c      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017f2c:	d038      	beq.n	8017fa0 <arm_rfft_init_q15+0xdc>
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017f34:	d854      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	2b80      	cmp	r3, #128	@ 0x80
 8017f3a:	d039      	beq.n	8017fb0 <arm_rfft_init_q15+0xec>
 8017f3c:	68bb      	ldr	r3, [r7, #8]
 8017f3e:	2b80      	cmp	r3, #128	@ 0x80
 8017f40:	d84e      	bhi.n	8017fe0 <arm_rfft_init_q15+0x11c>
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	2b20      	cmp	r3, #32
 8017f46:	d043      	beq.n	8017fd0 <arm_rfft_init_q15+0x10c>
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	2b40      	cmp	r3, #64	@ 0x40
 8017f4c:	d038      	beq.n	8017fc0 <arm_rfft_init_q15+0xfc>
 8017f4e:	e047      	b.n	8017fe0 <arm_rfft_init_q15+0x11c>
    {
    case 8192U:
        status = arm_rfft_init_8192_q15( S,ifftFlagR,bitReverseFlag );
 8017f50:	683a      	ldr	r2, [r7, #0]
 8017f52:	6879      	ldr	r1, [r7, #4]
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	f7ff fe2d 	bl	8017bb4 <arm_rfft_init_8192_q15>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	75fb      	strb	r3, [r7, #23]
        break;
 8017f5e:	e042      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 4096U:
        status = arm_rfft_init_4096_q15( S,ifftFlagR,bitReverseFlag );
 8017f60:	683a      	ldr	r2, [r7, #0]
 8017f62:	6879      	ldr	r1, [r7, #4]
 8017f64:	68f8      	ldr	r0, [r7, #12]
 8017f66:	f7ff fe51 	bl	8017c0c <arm_rfft_init_4096_q15>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	75fb      	strb	r3, [r7, #23]
        break;
 8017f6e:	e03a      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 2048U:
        status = arm_rfft_init_2048_q15( S,ifftFlagR,bitReverseFlag );
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	6879      	ldr	r1, [r7, #4]
 8017f74:	68f8      	ldr	r0, [r7, #12]
 8017f76:	f7ff fe75 	bl	8017c64 <arm_rfft_init_2048_q15>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	75fb      	strb	r3, [r7, #23]
        break;
 8017f7e:	e032      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 1024U:
        status = arm_rfft_init_1024_q15( S,ifftFlagR,bitReverseFlag );
 8017f80:	683a      	ldr	r2, [r7, #0]
 8017f82:	6879      	ldr	r1, [r7, #4]
 8017f84:	68f8      	ldr	r0, [r7, #12]
 8017f86:	f7ff fe99 	bl	8017cbc <arm_rfft_init_1024_q15>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	75fb      	strb	r3, [r7, #23]
        break;
 8017f8e:	e02a      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 512U:
        status = arm_rfft_init_512_q15( S,ifftFlagR,bitReverseFlag );
 8017f90:	683a      	ldr	r2, [r7, #0]
 8017f92:	6879      	ldr	r1, [r7, #4]
 8017f94:	68f8      	ldr	r0, [r7, #12]
 8017f96:	f7ff febd 	bl	8017d14 <arm_rfft_init_512_q15>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	75fb      	strb	r3, [r7, #23]
        break;
 8017f9e:	e022      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 256U:
        status = arm_rfft_init_256_q15( S,ifftFlagR,bitReverseFlag );
 8017fa0:	683a      	ldr	r2, [r7, #0]
 8017fa2:	6879      	ldr	r1, [r7, #4]
 8017fa4:	68f8      	ldr	r0, [r7, #12]
 8017fa6:	f7ff fee1 	bl	8017d6c <arm_rfft_init_256_q15>
 8017faa:	4603      	mov	r3, r0
 8017fac:	75fb      	strb	r3, [r7, #23]
        break;
 8017fae:	e01a      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 128U:
        status = arm_rfft_init_128_q15( S,ifftFlagR,bitReverseFlag );
 8017fb0:	683a      	ldr	r2, [r7, #0]
 8017fb2:	6879      	ldr	r1, [r7, #4]
 8017fb4:	68f8      	ldr	r0, [r7, #12]
 8017fb6:	f7ff ff05 	bl	8017dc4 <arm_rfft_init_128_q15>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	75fb      	strb	r3, [r7, #23]
        break;
 8017fbe:	e012      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    case 64U:
        status = arm_rfft_init_64_q15( S,ifftFlagR,bitReverseFlag );
 8017fc0:	683a      	ldr	r2, [r7, #0]
 8017fc2:	6879      	ldr	r1, [r7, #4]
 8017fc4:	68f8      	ldr	r0, [r7, #12]
 8017fc6:	f7ff ff27 	bl	8017e18 <arm_rfft_init_64_q15>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	75fb      	strb	r3, [r7, #23]
        break;
 8017fce:	e00a      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
   case 32U:
        status = arm_rfft_init_32_q15( S,ifftFlagR,bitReverseFlag );
 8017fd0:	683a      	ldr	r2, [r7, #0]
 8017fd2:	6879      	ldr	r1, [r7, #4]
 8017fd4:	68f8      	ldr	r0, [r7, #12]
 8017fd6:	f7ff ff49 	bl	8017e6c <arm_rfft_init_32_q15>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	75fb      	strb	r3, [r7, #23]
        break;
 8017fde:	e002      	b.n	8017fe6 <arm_rfft_init_q15+0x122>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8017fe0:	23ff      	movs	r3, #255	@ 0xff
 8017fe2:	75fb      	strb	r3, [r7, #23]
        break;
 8017fe4:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 8017fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	3718      	adds	r7, #24
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <arm_rfft_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
        q15_t * pSrc,
        q15_t * pDst)
{
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b088      	sub	sp, #32
 8017ff6:	af02      	add	r7, sp, #8
 8017ff8:	60f8      	str	r0, [r7, #12]
 8017ffa:	60b9      	str	r1, [r7, #8]
 8017ffc:	607a      	str	r2, [r7, #4]
#if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  const arm_cfft_instance_q15 *S_CFFT = &(S->cfftInst);
#else
  const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	695b      	ldr	r3, [r3, #20]
 8018002:	617b      	str	r3, [r7, #20]
#endif
        uint32_t L2 = S->fftLenReal >> 1U;
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	085b      	lsrs	r3, r3, #1
 801800a:	613b      	str	r3, [r7, #16]

  /* Calculation of RIFFT of input */
  if (S->ifftFlagR == 1U)
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	791b      	ldrb	r3, [r3, #4]
 8018010:	2b01      	cmp	r3, #1
 8018012:	d11d      	bne.n	8018050 <arm_rfft_q15+0x5e>
  {
     /*  Real IFFT core process */
     arm_split_rifft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	68da      	ldr	r2, [r3, #12]
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	6919      	ldr	r1, [r3, #16]
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	689b      	ldr	r3, [r3, #8]
 8018020:	9301      	str	r3, [sp, #4]
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	9300      	str	r3, [sp, #0]
 8018026:	460b      	mov	r3, r1
 8018028:	6939      	ldr	r1, [r7, #16]
 801802a:	68b8      	ldr	r0, [r7, #8]
 801802c:	f000 f951 	bl	80182d2 <arm_split_rifft_q15>

     /* Complex IFFT process */
     arm_cfft_q15 (S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	791a      	ldrb	r2, [r3, #4]
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	795b      	ldrb	r3, [r3, #5]
 8018038:	6879      	ldr	r1, [r7, #4]
 801803a:	6978      	ldr	r0, [r7, #20]
 801803c:	f7fb ff4e 	bl	8013edc <arm_cfft_q15>

     arm_shift_q15(pDst, 1, pDst, S->fftLenReal);
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	687a      	ldr	r2, [r7, #4]
 8018046:	2101      	movs	r1, #1
 8018048:	6878      	ldr	r0, [r7, #4]
 801804a:	f7fa fbd7 	bl	80127fc <arm_shift_q15>

     /*  Real FFT core process */
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 801804e:	e015      	b.n	801807c <arm_rfft_q15+0x8a>
     arm_cfft_q15 (S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	791a      	ldrb	r2, [r3, #4]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	795b      	ldrb	r3, [r3, #5]
 8018058:	68b9      	ldr	r1, [r7, #8]
 801805a:	6978      	ldr	r0, [r7, #20]
 801805c:	f7fb ff3e 	bl	8013edc <arm_cfft_q15>
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	68da      	ldr	r2, [r3, #12]
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	6919      	ldr	r1, [r3, #16]
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	689b      	ldr	r3, [r3, #8]
 801806c:	9301      	str	r3, [sp, #4]
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	460b      	mov	r3, r1
 8018074:	6939      	ldr	r1, [r7, #16]
 8018076:	68b8      	ldr	r0, [r7, #8]
 8018078:	f000 f804 	bl	8018084 <arm_split_rfft_q15>
}
 801807c:	bf00      	nop
 801807e:	3718      	adds	r7, #24
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}

08018084 <arm_split_rfft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{       
 8018084:	b480      	push	{r7}
 8018086:	b0ad      	sub	sp, #180	@ 0xb4
 8018088:	af00      	add	r7, sp, #0
 801808a:	60f8      	str	r0, [r7, #12]
 801808c:	60b9      	str	r1, [r7, #8]
 801808e:	607a      	str	r2, [r7, #4]
 8018090:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_DSP)
        q15_t *pD1, *pD2;
#endif

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2];
 8018092:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018096:	009b      	lsls	r3, r3, #2
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	4413      	add	r3, r2
 801809c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pCoefB = &pBTable[modifier * 2];
 80180a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80180a4:	009b      	lsls	r3, r3, #2
 80180a6:	683a      	ldr	r2, [r7, #0]
 80180a8:	4413      	add	r3, r2
 80180aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  pSrc1 = &pSrc[2];
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	3304      	adds	r3, #4
 80180b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pSrc2 = &pSrc[(2U * fftLen) - 2U];
 80180b4:	68ba      	ldr	r2, [r7, #8]
 80180b6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80180ba:	4413      	add	r3, r2
 80180bc:	009b      	lsls	r3, r3, #2
 80180be:	68fa      	ldr	r2, [r7, #12]
 80180c0:	4413      	add	r3, r2
 80180c2:	637b      	str	r3, [r7, #52]	@ 0x34

#if defined (ARM_MATH_DSP)

    i = 1U;
 80180c4:	2301      	movs	r3, #1
 80180c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pD1 = pDst + 2;
 80180ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80180ce:	3304      	adds	r3, #4
 80180d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    pD2 = pDst + (4U * fftLen) - 2;
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	00db      	lsls	r3, r3, #3
 80180d8:	3b04      	subs	r3, #4
 80180da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80180de:	4413      	add	r3, r2
 80180e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (i = fftLen - 1; i > 0; i--)
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	3b01      	subs	r3, #1
 80180e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80180ec:	e0ba      	b.n	8018264 <arm_split_rfft_q15+0x1e0>
         */


#ifndef ARM_MATH_BIG_ENDIAN
        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA));
 80180ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  memcpy (&val, pQ15, 4);
 80180f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 80180f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180fa:	461a      	mov	r2, r3
 80180fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8018100:	643b      	str	r3, [r7, #64]	@ 0x40
  memcpy (&val, pQ15, 4);
 8018102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8018108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801810a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801810c:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801810e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018112:	fb43 f302 	smusd	r3, r3, r2
 8018116:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8018118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801811a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        /* -(pSrc[2 * i + 1] * pATable[2 * i + 1] - pSrc[2 * i] * pATable[2 * i]) */
        outR = -(__SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] + pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(read_q15x2 (pSrc2), read_q15x2((q15_t *) pCoefB), outR) >> 16U;
 801811e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018120:	653b      	str	r3, [r7, #80]	@ 0x50
  memcpy (&val, pQ15, 4);
 8018122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8018128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801812a:	4619      	mov	r1, r3
 801812c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018130:	657b      	str	r3, [r7, #84]	@ 0x54
  memcpy (&val, pQ15, 4);
 8018132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8018138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801813a:	461a      	mov	r2, r3
 801813c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018140:	6679      	str	r1, [r7, #100]	@ 0x64
 8018142:	663a      	str	r2, [r7, #96]	@ 0x60
 8018144:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801814a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801814c:	fb23 1302 	smlad	r3, r3, r2, r1
 8018150:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8018152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018154:	0c1b      	lsrs	r3, r3, #16
 8018156:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
#ifndef ARM_MATH_BIG_ENDIAN
        outI = __SMUSDX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 801815a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801815c:	3b04      	subs	r3, #4
 801815e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018162:	3304      	adds	r3, #4
 8018164:	66bb      	str	r3, [r7, #104]	@ 0x68
  memcpy (&val, pQ15, 4);
 8018166:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	623b      	str	r3, [r7, #32]
  return (val);
 801816c:	6a3b      	ldr	r3, [r7, #32]
 801816e:	461a      	mov	r2, r3
 8018170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018174:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memcpy (&val, pQ15, 4);
 8018176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	61fb      	str	r3, [r7, #28]
  return (val);
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8018180:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018182:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018184:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8018186:	fb43 f312 	smusdx	r3, r3, r2
 801818a:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 801818c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801818e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#else
        outI = __SMUSDX(read_q15x2 ((q15_t *) pCoefB), read_q15x2_da (&pSrc2));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), outI);
 8018192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018194:	3304      	adds	r3, #4
 8018196:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801819a:	3b04      	subs	r3, #4
 801819c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memcpy (&val, pQ15, 4);
 801819e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	61bb      	str	r3, [r7, #24]
  return (val);
 80181a4:	69bb      	ldr	r3, [r7, #24]
 80181a6:	4619      	mov	r1, r3
 80181a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80181ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  memcpy (&val, pQ15, 4);
 80181b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	617b      	str	r3, [r7, #20]
  return (val);
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	461a      	mov	r2, r3
 80181bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80181c0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80181c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80181c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80181cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80181d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80181d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80181d8:	fb23 1312 	smladx	r3, r3, r2, r1
 80181dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 80181e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80181e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        /* write output */
        *pD1++ = (q15_t) outR;
 80181e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80181ec:	1c9a      	adds	r2, r3, #2
 80181ee:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80181f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80181f6:	b212      	sxth	r2, r2
 80181f8:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16U;
 80181fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80181fe:	1419      	asrs	r1, r3, #16
 8018200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018204:	1c9a      	adds	r2, r3, #2
 8018206:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801820a:	b20a      	sxth	r2, r1
 801820c:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 801820e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018212:	b21a      	sxth	r2, r3
 8018214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018218:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16U);
 801821a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801821e:	141b      	asrs	r3, r3, #16
 8018220:	b29b      	uxth	r3, r3
 8018222:	425b      	negs	r3, r3
 8018224:	b29a      	uxth	r2, r3
 8018226:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801822a:	3302      	adds	r3, #2
 801822c:	b212      	sxth	r2, r2
 801822e:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8018230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018234:	3b04      	subs	r3, #4
 8018236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 801823a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801823e:	009b      	lsls	r3, r3, #2
 8018240:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8018244:	4413      	add	r3, r2
 8018246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        pCoefA = pCoefA + (2U * modifier);
 801824a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801824e:	009b      	lsls	r3, r3, #2
 8018250:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018254:	4413      	add	r3, r2
 8018256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (i = fftLen - 1; i > 0; i--)
 801825a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801825e:	3b01      	subs	r3, #1
 8018260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018268:	2b00      	cmp	r3, #0
 801826a:	f47f af40 	bne.w	80180ee <arm_split_rfft_q15+0x6a>
    }

    pDst[2U * fftLen]      = (pSrc[0] - pSrc[1]) >> 1U;
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018274:	461a      	mov	r2, r3
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	3302      	adds	r3, #2
 801827a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801827e:	1ad3      	subs	r3, r2, r3
 8018280:	1059      	asrs	r1, r3, #1
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	009b      	lsls	r3, r3, #2
 8018286:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801828a:	4413      	add	r3, r2
 801828c:	b20a      	sxth	r2, r1
 801828e:	801a      	strh	r2, [r3, #0]
    pDst[2U * fftLen + 1U] = 0;
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	009b      	lsls	r3, r3, #2
 8018294:	3302      	adds	r3, #2
 8018296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801829a:	4413      	add	r3, r2
 801829c:	2200      	movs	r2, #0
 801829e:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1U;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182a6:	461a      	mov	r2, r3
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	3302      	adds	r3, #2
 80182ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182b0:	4413      	add	r3, r2
 80182b2:	105b      	asrs	r3, r3, #1
 80182b4:	b21a      	sxth	r2, r3
 80182b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80182ba:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 80182bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80182c0:	3302      	adds	r3, #2
 80182c2:	2200      	movs	r2, #0
 80182c4:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 80182c6:	bf00      	nop
 80182c8:	37b4      	adds	r7, #180	@ 0xb4
 80182ca:	46bd      	mov	sp, r7
 80182cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d0:	4770      	bx	lr

080182d2 <arm_split_rifft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{
 80182d2:	b480      	push	{r7}
 80182d4:	b0af      	sub	sp, #188	@ 0xbc
 80182d6:	af00      	add	r7, sp, #0
 80182d8:	60f8      	str	r0, [r7, #12]
 80182da:	60b9      	str	r1, [r7, #8]
 80182dc:	607a      	str	r2, [r7, #4]
 80182de:	603b      	str	r3, [r7, #0]
        uint32_t i;                                    /* Loop Counter */
        q31_t outR, outI;                              /* Temporary variables for output */
  const q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
        q15_t *pSrc1, *pSrc2;
        q15_t *pDst1 = &pDst[0];
 80182e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80182e4:	63bb      	str	r3, [r7, #56]	@ 0x38

  pCoefA = &pATable[0];
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pCoefB = &pBTable[0];
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  pSrc1 = &pSrc[0];
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	643b      	str	r3, [r7, #64]	@ 0x40
  pSrc2 = &pSrc[2 * fftLen];
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	009b      	lsls	r3, r3, #2
 80182fa:	68fa      	ldr	r2, [r7, #12]
 80182fc:	4413      	add	r3, r2
 80182fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  i = fftLen;
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8018306:	e0b5      	b.n	8018474 <arm_split_rifft_q15+0x1a2>

#if defined (ARM_MATH_DSP)

#ifndef ARM_MATH_BIG_ENDIAN
      /* pIn[2 * n - 2 * i] * pBTable[2 * i] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
      outR = __SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB));
 8018308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801830a:	647b      	str	r3, [r7, #68]	@ 0x44
  memcpy (&val, pQ15, 4);
 801830c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	637b      	str	r3, [r7, #52]	@ 0x34
  return (val);
 8018312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018314:	461a      	mov	r2, r3
 8018316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801831a:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 801831c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8018322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018324:	657a      	str	r2, [r7, #84]	@ 0x54
 8018326:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801832a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801832c:	fb43 f302 	smusd	r3, r3, r2
 8018330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8018332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      /* -(-pIn[2 * n - 2 * i] * pBTable[2 * i] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1])) */
      outR = -(__SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] + pIn[2 * n - 2 * i] * pBTable[2 * i] */
      outR = __SMLAD(read_q15x2(pSrc1), read_q15x2 ((q15_t *) pCoefA), outR) >> 16U;
 8018338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801833a:	65bb      	str	r3, [r7, #88]	@ 0x58
  memcpy (&val, pQ15, 4);
 801833c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8018342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018344:	4619      	mov	r1, r3
 8018346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801834a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memcpy (&val, pQ15, 4);
 801834c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8018352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018354:	461a      	mov	r2, r3
 8018356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801835a:	66f9      	str	r1, [r7, #108]	@ 0x6c
 801835c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801835e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018362:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018364:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8018366:	fb23 1302 	smlad	r3, r3, r2, r1
 801836a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801836c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801836e:	0c1b      	lsrs	r3, r3, #16
 8018370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      /* -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
      outI = __SMUADX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8018374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018376:	3b04      	subs	r3, #4
 8018378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801837a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801837c:	3304      	adds	r3, #4
 801837e:	673b      	str	r3, [r7, #112]	@ 0x70
  memcpy (&val, pQ15, 4);
 8018380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8018386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018388:	461a      	mov	r2, r3
 801838a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801838e:	677b      	str	r3, [r7, #116]	@ 0x74
  memcpy (&val, pQ15, 4);
 8018390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	623b      	str	r3, [r7, #32]
  return (val);
 8018396:	6a3b      	ldr	r3, [r7, #32]
 8018398:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801839c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801839e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80183a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80183a4:	fb23 f312 	smuadx	r3, r3, r2
 80183a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 80183aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80183ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80183b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80183b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  memcpy (&val, pQ15, 4);
 80183b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	61fb      	str	r3, [r7, #28]
  return (val);
 80183c0:	69fb      	ldr	r3, [r7, #28]

      /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */
#ifndef ARM_MATH_BIG_ENDIAN
      outI = __SMLSDX(read_q15x2 ((q15_t *) pCoefA), read_q15x2_ia (&pSrc1), -outI);
 80183c2:	4619      	mov	r1, r3
 80183c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183c6:	3304      	adds	r3, #4
 80183c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80183ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183cc:	3b04      	subs	r3, #4
 80183ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  memcpy (&val, pQ15, 4);
 80183d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	61bb      	str	r3, [r7, #24]
  return (val);
 80183da:	69bb      	ldr	r3, [r7, #24]
 80183dc:	461a      	mov	r2, r3
 80183de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80183e2:	425b      	negs	r3, r3
 80183e4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80183e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80183ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80183f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80183f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80183f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80183fc:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8018400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 8018404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      outI = __SMLSDX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), -outI);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* write output */
#ifndef ARM_MATH_BIG_ENDIAN
      write_q15x2_ia (&pDst1, __PKHBT(outR, (outI >> 16U), 16));
 801840c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8018410:	b29a      	uxth	r2, r3
 8018412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018416:	141b      	asrs	r3, r3, #16
 8018418:	041b      	lsls	r3, r3, #16
 801841a:	4313      	orrs	r3, r2
 801841c:	461a      	mov	r2, r3
 801841e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8018422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8018426:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
  q31_t val = value;
 801842a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801842e:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8018430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	697a      	ldr	r2, [r7, #20]
 8018438:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801843a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	1d1a      	adds	r2, r3, #4
 8018442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018446:	601a      	str	r2, [r3, #0]
}
 8018448:	bf00      	nop
      *pDst1++ = (q15_t) (outI >> 16);

#endif /* #if defined (ARM_MATH_DSP) */

      /* update coefficient pointer */
      pCoefB = pCoefB + (2 * modifier);
 801844a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801844e:	009b      	lsls	r3, r3, #2
 8018450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8018454:	4413      	add	r3, r2
 8018456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      pCoefA = pCoefA + (2 * modifier);
 801845a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8018464:	4413      	add	r3, r2
 8018466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

      i--;
 801846a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801846e:	3b01      	subs	r3, #1
 8018470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8018474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018478:	2b00      	cmp	r3, #0
 801847a:	f47f af45 	bne.w	8018308 <arm_split_rifft_q15+0x36>
  }

}
 801847e:	bf00      	nop
 8018480:	bf00      	nop
 8018482:	37bc      	adds	r7, #188	@ 0xbc
 8018484:	46bd      	mov	sp, r7
 8018486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848a:	4770      	bx	lr

0801848c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b084      	sub	sp, #16
 8018490:	af00      	add	r7, sp, #0
 8018492:	4603      	mov	r3, r0
 8018494:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8018496:	79fb      	ldrb	r3, [r7, #7]
 8018498:	4a08      	ldr	r2, [pc, #32]	@ (80184bc <disk_status+0x30>)
 801849a:	009b      	lsls	r3, r3, #2
 801849c:	4413      	add	r3, r2
 801849e:	685b      	ldr	r3, [r3, #4]
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	79fa      	ldrb	r2, [r7, #7]
 80184a4:	4905      	ldr	r1, [pc, #20]	@ (80184bc <disk_status+0x30>)
 80184a6:	440a      	add	r2, r1
 80184a8:	7a12      	ldrb	r2, [r2, #8]
 80184aa:	4610      	mov	r0, r2
 80184ac:	4798      	blx	r3
 80184ae:	4603      	mov	r3, r0
 80184b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80184b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}
 80184bc:	24008500 	.word	0x24008500

080184c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b084      	sub	sp, #16
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	4603      	mov	r3, r0
 80184c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80184ca:	2300      	movs	r3, #0
 80184cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80184ce:	79fb      	ldrb	r3, [r7, #7]
 80184d0:	4a0e      	ldr	r2, [pc, #56]	@ (801850c <disk_initialize+0x4c>)
 80184d2:	5cd3      	ldrb	r3, [r2, r3]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d114      	bne.n	8018502 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80184d8:	79fb      	ldrb	r3, [r7, #7]
 80184da:	4a0c      	ldr	r2, [pc, #48]	@ (801850c <disk_initialize+0x4c>)
 80184dc:	009b      	lsls	r3, r3, #2
 80184de:	4413      	add	r3, r2
 80184e0:	685b      	ldr	r3, [r3, #4]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	79fa      	ldrb	r2, [r7, #7]
 80184e6:	4909      	ldr	r1, [pc, #36]	@ (801850c <disk_initialize+0x4c>)
 80184e8:	440a      	add	r2, r1
 80184ea:	7a12      	ldrb	r2, [r2, #8]
 80184ec:	4610      	mov	r0, r2
 80184ee:	4798      	blx	r3
 80184f0:	4603      	mov	r3, r0
 80184f2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80184f4:	7bfb      	ldrb	r3, [r7, #15]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d103      	bne.n	8018502 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80184fa:	79fb      	ldrb	r3, [r7, #7]
 80184fc:	4a03      	ldr	r2, [pc, #12]	@ (801850c <disk_initialize+0x4c>)
 80184fe:	2101      	movs	r1, #1
 8018500:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8018502:	7bfb      	ldrb	r3, [r7, #15]
}
 8018504:	4618      	mov	r0, r3
 8018506:	3710      	adds	r7, #16
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}
 801850c:	24008500 	.word	0x24008500

08018510 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8018510:	b590      	push	{r4, r7, lr}
 8018512:	b087      	sub	sp, #28
 8018514:	af00      	add	r7, sp, #0
 8018516:	60b9      	str	r1, [r7, #8]
 8018518:	607a      	str	r2, [r7, #4]
 801851a:	603b      	str	r3, [r7, #0]
 801851c:	4603      	mov	r3, r0
 801851e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018520:	7bfb      	ldrb	r3, [r7, #15]
 8018522:	4a0a      	ldr	r2, [pc, #40]	@ (801854c <disk_read+0x3c>)
 8018524:	009b      	lsls	r3, r3, #2
 8018526:	4413      	add	r3, r2
 8018528:	685b      	ldr	r3, [r3, #4]
 801852a:	689c      	ldr	r4, [r3, #8]
 801852c:	7bfb      	ldrb	r3, [r7, #15]
 801852e:	4a07      	ldr	r2, [pc, #28]	@ (801854c <disk_read+0x3c>)
 8018530:	4413      	add	r3, r2
 8018532:	7a18      	ldrb	r0, [r3, #8]
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	68b9      	ldr	r1, [r7, #8]
 801853a:	47a0      	blx	r4
 801853c:	4603      	mov	r3, r0
 801853e:	75fb      	strb	r3, [r7, #23]
  return res;
 8018540:	7dfb      	ldrb	r3, [r7, #23]
}
 8018542:	4618      	mov	r0, r3
 8018544:	371c      	adds	r7, #28
 8018546:	46bd      	mov	sp, r7
 8018548:	bd90      	pop	{r4, r7, pc}
 801854a:	bf00      	nop
 801854c:	24008500 	.word	0x24008500

08018550 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8018550:	b590      	push	{r4, r7, lr}
 8018552:	b087      	sub	sp, #28
 8018554:	af00      	add	r7, sp, #0
 8018556:	60b9      	str	r1, [r7, #8]
 8018558:	607a      	str	r2, [r7, #4]
 801855a:	603b      	str	r3, [r7, #0]
 801855c:	4603      	mov	r3, r0
 801855e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018560:	7bfb      	ldrb	r3, [r7, #15]
 8018562:	4a0a      	ldr	r2, [pc, #40]	@ (801858c <disk_write+0x3c>)
 8018564:	009b      	lsls	r3, r3, #2
 8018566:	4413      	add	r3, r2
 8018568:	685b      	ldr	r3, [r3, #4]
 801856a:	68dc      	ldr	r4, [r3, #12]
 801856c:	7bfb      	ldrb	r3, [r7, #15]
 801856e:	4a07      	ldr	r2, [pc, #28]	@ (801858c <disk_write+0x3c>)
 8018570:	4413      	add	r3, r2
 8018572:	7a18      	ldrb	r0, [r3, #8]
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	687a      	ldr	r2, [r7, #4]
 8018578:	68b9      	ldr	r1, [r7, #8]
 801857a:	47a0      	blx	r4
 801857c:	4603      	mov	r3, r0
 801857e:	75fb      	strb	r3, [r7, #23]
  return res;
 8018580:	7dfb      	ldrb	r3, [r7, #23]
}
 8018582:	4618      	mov	r0, r3
 8018584:	371c      	adds	r7, #28
 8018586:	46bd      	mov	sp, r7
 8018588:	bd90      	pop	{r4, r7, pc}
 801858a:	bf00      	nop
 801858c:	24008500 	.word	0x24008500

08018590 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
 8018596:	4603      	mov	r3, r0
 8018598:	603a      	str	r2, [r7, #0]
 801859a:	71fb      	strb	r3, [r7, #7]
 801859c:	460b      	mov	r3, r1
 801859e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80185a0:	79fb      	ldrb	r3, [r7, #7]
 80185a2:	4a09      	ldr	r2, [pc, #36]	@ (80185c8 <disk_ioctl+0x38>)
 80185a4:	009b      	lsls	r3, r3, #2
 80185a6:	4413      	add	r3, r2
 80185a8:	685b      	ldr	r3, [r3, #4]
 80185aa:	691b      	ldr	r3, [r3, #16]
 80185ac:	79fa      	ldrb	r2, [r7, #7]
 80185ae:	4906      	ldr	r1, [pc, #24]	@ (80185c8 <disk_ioctl+0x38>)
 80185b0:	440a      	add	r2, r1
 80185b2:	7a10      	ldrb	r0, [r2, #8]
 80185b4:	79b9      	ldrb	r1, [r7, #6]
 80185b6:	683a      	ldr	r2, [r7, #0]
 80185b8:	4798      	blx	r3
 80185ba:	4603      	mov	r3, r0
 80185bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80185be:	7bfb      	ldrb	r3, [r7, #15]
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	3710      	adds	r7, #16
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bd80      	pop	{r7, pc}
 80185c8:	24008500 	.word	0x24008500

080185cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80185cc:	b480      	push	{r7}
 80185ce:	b085      	sub	sp, #20
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	3301      	adds	r3, #1
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80185dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80185e0:	021b      	lsls	r3, r3, #8
 80185e2:	b21a      	sxth	r2, r3
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	b21b      	sxth	r3, r3
 80185ea:	4313      	orrs	r3, r2
 80185ec:	b21b      	sxth	r3, r3
 80185ee:	81fb      	strh	r3, [r7, #14]
	return rv;
 80185f0:	89fb      	ldrh	r3, [r7, #14]
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3714      	adds	r7, #20
 80185f6:	46bd      	mov	sp, r7
 80185f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fc:	4770      	bx	lr

080185fe <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80185fe:	b480      	push	{r7}
 8018600:	b085      	sub	sp, #20
 8018602:	af00      	add	r7, sp, #0
 8018604:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	3303      	adds	r3, #3
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	021b      	lsls	r3, r3, #8
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	3202      	adds	r2, #2
 8018616:	7812      	ldrb	r2, [r2, #0]
 8018618:	4313      	orrs	r3, r2
 801861a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	021b      	lsls	r3, r3, #8
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	3201      	adds	r2, #1
 8018624:	7812      	ldrb	r2, [r2, #0]
 8018626:	4313      	orrs	r3, r2
 8018628:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	021b      	lsls	r3, r3, #8
 801862e:	687a      	ldr	r2, [r7, #4]
 8018630:	7812      	ldrb	r2, [r2, #0]
 8018632:	4313      	orrs	r3, r2
 8018634:	60fb      	str	r3, [r7, #12]
	return rv;
 8018636:	68fb      	ldr	r3, [r7, #12]
}
 8018638:	4618      	mov	r0, r3
 801863a:	3714      	adds	r7, #20
 801863c:	46bd      	mov	sp, r7
 801863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018642:	4770      	bx	lr

08018644 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8018644:	b480      	push	{r7}
 8018646:	b083      	sub	sp, #12
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	460b      	mov	r3, r1
 801864e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	1c5a      	adds	r2, r3, #1
 8018654:	607a      	str	r2, [r7, #4]
 8018656:	887a      	ldrh	r2, [r7, #2]
 8018658:	b2d2      	uxtb	r2, r2
 801865a:	701a      	strb	r2, [r3, #0]
 801865c:	887b      	ldrh	r3, [r7, #2]
 801865e:	0a1b      	lsrs	r3, r3, #8
 8018660:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	1c5a      	adds	r2, r3, #1
 8018666:	607a      	str	r2, [r7, #4]
 8018668:	887a      	ldrh	r2, [r7, #2]
 801866a:	b2d2      	uxtb	r2, r2
 801866c:	701a      	strb	r2, [r3, #0]
}
 801866e:	bf00      	nop
 8018670:	370c      	adds	r7, #12
 8018672:	46bd      	mov	sp, r7
 8018674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018678:	4770      	bx	lr

0801867a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801867a:	b480      	push	{r7}
 801867c:	b083      	sub	sp, #12
 801867e:	af00      	add	r7, sp, #0
 8018680:	6078      	str	r0, [r7, #4]
 8018682:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	1c5a      	adds	r2, r3, #1
 8018688:	607a      	str	r2, [r7, #4]
 801868a:	683a      	ldr	r2, [r7, #0]
 801868c:	b2d2      	uxtb	r2, r2
 801868e:	701a      	strb	r2, [r3, #0]
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	0a1b      	lsrs	r3, r3, #8
 8018694:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	1c5a      	adds	r2, r3, #1
 801869a:	607a      	str	r2, [r7, #4]
 801869c:	683a      	ldr	r2, [r7, #0]
 801869e:	b2d2      	uxtb	r2, r2
 80186a0:	701a      	strb	r2, [r3, #0]
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	0a1b      	lsrs	r3, r3, #8
 80186a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	1c5a      	adds	r2, r3, #1
 80186ac:	607a      	str	r2, [r7, #4]
 80186ae:	683a      	ldr	r2, [r7, #0]
 80186b0:	b2d2      	uxtb	r2, r2
 80186b2:	701a      	strb	r2, [r3, #0]
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	0a1b      	lsrs	r3, r3, #8
 80186b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	1c5a      	adds	r2, r3, #1
 80186be:	607a      	str	r2, [r7, #4]
 80186c0:	683a      	ldr	r2, [r7, #0]
 80186c2:	b2d2      	uxtb	r2, r2
 80186c4:	701a      	strb	r2, [r3, #0]
}
 80186c6:	bf00      	nop
 80186c8:	370c      	adds	r7, #12
 80186ca:	46bd      	mov	sp, r7
 80186cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d0:	4770      	bx	lr

080186d2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80186d2:	b480      	push	{r7}
 80186d4:	b087      	sub	sp, #28
 80186d6:	af00      	add	r7, sp, #0
 80186d8:	60f8      	str	r0, [r7, #12]
 80186da:	60b9      	str	r1, [r7, #8]
 80186dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d00d      	beq.n	8018708 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80186ec:	693a      	ldr	r2, [r7, #16]
 80186ee:	1c53      	adds	r3, r2, #1
 80186f0:	613b      	str	r3, [r7, #16]
 80186f2:	697b      	ldr	r3, [r7, #20]
 80186f4:	1c59      	adds	r1, r3, #1
 80186f6:	6179      	str	r1, [r7, #20]
 80186f8:	7812      	ldrb	r2, [r2, #0]
 80186fa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	3b01      	subs	r3, #1
 8018700:	607b      	str	r3, [r7, #4]
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d1f1      	bne.n	80186ec <mem_cpy+0x1a>
	}
}
 8018708:	bf00      	nop
 801870a:	371c      	adds	r7, #28
 801870c:	46bd      	mov	sp, r7
 801870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018712:	4770      	bx	lr

08018714 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8018714:	b480      	push	{r7}
 8018716:	b087      	sub	sp, #28
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	1c5a      	adds	r2, r3, #1
 8018728:	617a      	str	r2, [r7, #20]
 801872a:	68ba      	ldr	r2, [r7, #8]
 801872c:	b2d2      	uxtb	r2, r2
 801872e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	3b01      	subs	r3, #1
 8018734:	607b      	str	r3, [r7, #4]
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d1f3      	bne.n	8018724 <mem_set+0x10>
}
 801873c:	bf00      	nop
 801873e:	bf00      	nop
 8018740:	371c      	adds	r7, #28
 8018742:	46bd      	mov	sp, r7
 8018744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018748:	4770      	bx	lr

0801874a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801874a:	b480      	push	{r7}
 801874c:	b089      	sub	sp, #36	@ 0x24
 801874e:	af00      	add	r7, sp, #0
 8018750:	60f8      	str	r0, [r7, #12]
 8018752:	60b9      	str	r1, [r7, #8]
 8018754:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	61fb      	str	r3, [r7, #28]
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801875e:	2300      	movs	r3, #0
 8018760:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8018762:	69fb      	ldr	r3, [r7, #28]
 8018764:	1c5a      	adds	r2, r3, #1
 8018766:	61fa      	str	r2, [r7, #28]
 8018768:	781b      	ldrb	r3, [r3, #0]
 801876a:	4619      	mov	r1, r3
 801876c:	69bb      	ldr	r3, [r7, #24]
 801876e:	1c5a      	adds	r2, r3, #1
 8018770:	61ba      	str	r2, [r7, #24]
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	1acb      	subs	r3, r1, r3
 8018776:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	3b01      	subs	r3, #1
 801877c:	607b      	str	r3, [r7, #4]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d002      	beq.n	801878a <mem_cmp+0x40>
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d0eb      	beq.n	8018762 <mem_cmp+0x18>

	return r;
 801878a:	697b      	ldr	r3, [r7, #20]
}
 801878c:	4618      	mov	r0, r3
 801878e:	3724      	adds	r7, #36	@ 0x24
 8018790:	46bd      	mov	sp, r7
 8018792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018796:	4770      	bx	lr

08018798 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8018798:	b480      	push	{r7}
 801879a:	b083      	sub	sp, #12
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80187a2:	e002      	b.n	80187aa <chk_chr+0x12>
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	3301      	adds	r3, #1
 80187a8:	607b      	str	r3, [r7, #4]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	781b      	ldrb	r3, [r3, #0]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d005      	beq.n	80187be <chk_chr+0x26>
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	461a      	mov	r2, r3
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	4293      	cmp	r3, r2
 80187bc:	d1f2      	bne.n	80187a4 <chk_chr+0xc>
	return *str;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	781b      	ldrb	r3, [r3, #0]
}
 80187c2:	4618      	mov	r0, r3
 80187c4:	370c      	adds	r7, #12
 80187c6:	46bd      	mov	sp, r7
 80187c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187cc:	4770      	bx	lr
	...

080187d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80187d0:	b480      	push	{r7}
 80187d2:	b085      	sub	sp, #20
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
 80187d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80187da:	2300      	movs	r3, #0
 80187dc:	60bb      	str	r3, [r7, #8]
 80187de:	68bb      	ldr	r3, [r7, #8]
 80187e0:	60fb      	str	r3, [r7, #12]
 80187e2:	e029      	b.n	8018838 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80187e4:	4a27      	ldr	r2, [pc, #156]	@ (8018884 <chk_lock+0xb4>)
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	011b      	lsls	r3, r3, #4
 80187ea:	4413      	add	r3, r2
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d01d      	beq.n	801882e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80187f2:	4a24      	ldr	r2, [pc, #144]	@ (8018884 <chk_lock+0xb4>)
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	011b      	lsls	r3, r3, #4
 80187f8:	4413      	add	r3, r2
 80187fa:	681a      	ldr	r2, [r3, #0]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	429a      	cmp	r2, r3
 8018802:	d116      	bne.n	8018832 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8018804:	4a1f      	ldr	r2, [pc, #124]	@ (8018884 <chk_lock+0xb4>)
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	011b      	lsls	r3, r3, #4
 801880a:	4413      	add	r3, r2
 801880c:	3304      	adds	r3, #4
 801880e:	681a      	ldr	r2, [r3, #0]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018814:	429a      	cmp	r2, r3
 8018816:	d10c      	bne.n	8018832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018818:	4a1a      	ldr	r2, [pc, #104]	@ (8018884 <chk_lock+0xb4>)
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	011b      	lsls	r3, r3, #4
 801881e:	4413      	add	r3, r2
 8018820:	3308      	adds	r3, #8
 8018822:	681a      	ldr	r2, [r3, #0]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8018828:	429a      	cmp	r2, r3
 801882a:	d102      	bne.n	8018832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801882c:	e007      	b.n	801883e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801882e:	2301      	movs	r3, #1
 8018830:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	3301      	adds	r3, #1
 8018836:	60fb      	str	r3, [r7, #12]
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	2b03      	cmp	r3, #3
 801883c:	d9d2      	bls.n	80187e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2b04      	cmp	r3, #4
 8018842:	d109      	bne.n	8018858 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d102      	bne.n	8018850 <chk_lock+0x80>
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	2b02      	cmp	r3, #2
 801884e:	d101      	bne.n	8018854 <chk_lock+0x84>
 8018850:	2300      	movs	r3, #0
 8018852:	e010      	b.n	8018876 <chk_lock+0xa6>
 8018854:	2312      	movs	r3, #18
 8018856:	e00e      	b.n	8018876 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d108      	bne.n	8018870 <chk_lock+0xa0>
 801885e:	4a09      	ldr	r2, [pc, #36]	@ (8018884 <chk_lock+0xb4>)
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	011b      	lsls	r3, r3, #4
 8018864:	4413      	add	r3, r2
 8018866:	330c      	adds	r3, #12
 8018868:	881b      	ldrh	r3, [r3, #0]
 801886a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801886e:	d101      	bne.n	8018874 <chk_lock+0xa4>
 8018870:	2310      	movs	r3, #16
 8018872:	e000      	b.n	8018876 <chk_lock+0xa6>
 8018874:	2300      	movs	r3, #0
}
 8018876:	4618      	mov	r0, r3
 8018878:	3714      	adds	r7, #20
 801887a:	46bd      	mov	sp, r7
 801887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018880:	4770      	bx	lr
 8018882:	bf00      	nop
 8018884:	240084c0 	.word	0x240084c0

08018888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8018888:	b480      	push	{r7}
 801888a:	b083      	sub	sp, #12
 801888c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801888e:	2300      	movs	r3, #0
 8018890:	607b      	str	r3, [r7, #4]
 8018892:	e002      	b.n	801889a <enq_lock+0x12>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	3301      	adds	r3, #1
 8018898:	607b      	str	r3, [r7, #4]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2b03      	cmp	r3, #3
 801889e:	d806      	bhi.n	80188ae <enq_lock+0x26>
 80188a0:	4a09      	ldr	r2, [pc, #36]	@ (80188c8 <enq_lock+0x40>)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	011b      	lsls	r3, r3, #4
 80188a6:	4413      	add	r3, r2
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d1f2      	bne.n	8018894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2b04      	cmp	r3, #4
 80188b2:	bf14      	ite	ne
 80188b4:	2301      	movne	r3, #1
 80188b6:	2300      	moveq	r3, #0
 80188b8:	b2db      	uxtb	r3, r3
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	370c      	adds	r7, #12
 80188be:	46bd      	mov	sp, r7
 80188c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c4:	4770      	bx	lr
 80188c6:	bf00      	nop
 80188c8:	240084c0 	.word	0x240084c0

080188cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80188cc:	b480      	push	{r7}
 80188ce:	b085      	sub	sp, #20
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80188d6:	2300      	movs	r3, #0
 80188d8:	60fb      	str	r3, [r7, #12]
 80188da:	e01f      	b.n	801891c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80188dc:	4a41      	ldr	r2, [pc, #260]	@ (80189e4 <inc_lock+0x118>)
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	011b      	lsls	r3, r3, #4
 80188e2:	4413      	add	r3, r2
 80188e4:	681a      	ldr	r2, [r3, #0]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d113      	bne.n	8018916 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80188ee:	4a3d      	ldr	r2, [pc, #244]	@ (80189e4 <inc_lock+0x118>)
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	011b      	lsls	r3, r3, #4
 80188f4:	4413      	add	r3, r2
 80188f6:	3304      	adds	r3, #4
 80188f8:	681a      	ldr	r2, [r3, #0]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80188fe:	429a      	cmp	r2, r3
 8018900:	d109      	bne.n	8018916 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8018902:	4a38      	ldr	r2, [pc, #224]	@ (80189e4 <inc_lock+0x118>)
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	011b      	lsls	r3, r3, #4
 8018908:	4413      	add	r3, r2
 801890a:	3308      	adds	r3, #8
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8018912:	429a      	cmp	r2, r3
 8018914:	d006      	beq.n	8018924 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	3301      	adds	r3, #1
 801891a:	60fb      	str	r3, [r7, #12]
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	2b03      	cmp	r3, #3
 8018920:	d9dc      	bls.n	80188dc <inc_lock+0x10>
 8018922:	e000      	b.n	8018926 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8018924:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	2b04      	cmp	r3, #4
 801892a:	d132      	bne.n	8018992 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801892c:	2300      	movs	r3, #0
 801892e:	60fb      	str	r3, [r7, #12]
 8018930:	e002      	b.n	8018938 <inc_lock+0x6c>
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	3301      	adds	r3, #1
 8018936:	60fb      	str	r3, [r7, #12]
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	2b03      	cmp	r3, #3
 801893c:	d806      	bhi.n	801894c <inc_lock+0x80>
 801893e:	4a29      	ldr	r2, [pc, #164]	@ (80189e4 <inc_lock+0x118>)
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	011b      	lsls	r3, r3, #4
 8018944:	4413      	add	r3, r2
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d1f2      	bne.n	8018932 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	2b04      	cmp	r3, #4
 8018950:	d101      	bne.n	8018956 <inc_lock+0x8a>
 8018952:	2300      	movs	r3, #0
 8018954:	e040      	b.n	80189d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681a      	ldr	r2, [r3, #0]
 801895a:	4922      	ldr	r1, [pc, #136]	@ (80189e4 <inc_lock+0x118>)
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	011b      	lsls	r3, r3, #4
 8018960:	440b      	add	r3, r1
 8018962:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	689a      	ldr	r2, [r3, #8]
 8018968:	491e      	ldr	r1, [pc, #120]	@ (80189e4 <inc_lock+0x118>)
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	011b      	lsls	r3, r3, #4
 801896e:	440b      	add	r3, r1
 8018970:	3304      	adds	r3, #4
 8018972:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	695a      	ldr	r2, [r3, #20]
 8018978:	491a      	ldr	r1, [pc, #104]	@ (80189e4 <inc_lock+0x118>)
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	011b      	lsls	r3, r3, #4
 801897e:	440b      	add	r3, r1
 8018980:	3308      	adds	r3, #8
 8018982:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8018984:	4a17      	ldr	r2, [pc, #92]	@ (80189e4 <inc_lock+0x118>)
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	011b      	lsls	r3, r3, #4
 801898a:	4413      	add	r3, r2
 801898c:	330c      	adds	r3, #12
 801898e:	2200      	movs	r2, #0
 8018990:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d009      	beq.n	80189ac <inc_lock+0xe0>
 8018998:	4a12      	ldr	r2, [pc, #72]	@ (80189e4 <inc_lock+0x118>)
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	011b      	lsls	r3, r3, #4
 801899e:	4413      	add	r3, r2
 80189a0:	330c      	adds	r3, #12
 80189a2:	881b      	ldrh	r3, [r3, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d001      	beq.n	80189ac <inc_lock+0xe0>
 80189a8:	2300      	movs	r3, #0
 80189aa:	e015      	b.n	80189d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d108      	bne.n	80189c4 <inc_lock+0xf8>
 80189b2:	4a0c      	ldr	r2, [pc, #48]	@ (80189e4 <inc_lock+0x118>)
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	011b      	lsls	r3, r3, #4
 80189b8:	4413      	add	r3, r2
 80189ba:	330c      	adds	r3, #12
 80189bc:	881b      	ldrh	r3, [r3, #0]
 80189be:	3301      	adds	r3, #1
 80189c0:	b29a      	uxth	r2, r3
 80189c2:	e001      	b.n	80189c8 <inc_lock+0xfc>
 80189c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80189c8:	4906      	ldr	r1, [pc, #24]	@ (80189e4 <inc_lock+0x118>)
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	011b      	lsls	r3, r3, #4
 80189ce:	440b      	add	r3, r1
 80189d0:	330c      	adds	r3, #12
 80189d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	3301      	adds	r3, #1
}
 80189d8:	4618      	mov	r0, r3
 80189da:	3714      	adds	r7, #20
 80189dc:	46bd      	mov	sp, r7
 80189de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e2:	4770      	bx	lr
 80189e4:	240084c0 	.word	0x240084c0

080189e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80189e8:	b480      	push	{r7}
 80189ea:	b085      	sub	sp, #20
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	3b01      	subs	r3, #1
 80189f4:	607b      	str	r3, [r7, #4]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	2b03      	cmp	r3, #3
 80189fa:	d825      	bhi.n	8018a48 <dec_lock+0x60>
		n = Files[i].ctr;
 80189fc:	4a17      	ldr	r2, [pc, #92]	@ (8018a5c <dec_lock+0x74>)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	011b      	lsls	r3, r3, #4
 8018a02:	4413      	add	r3, r2
 8018a04:	330c      	adds	r3, #12
 8018a06:	881b      	ldrh	r3, [r3, #0]
 8018a08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8018a0a:	89fb      	ldrh	r3, [r7, #14]
 8018a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018a10:	d101      	bne.n	8018a16 <dec_lock+0x2e>
 8018a12:	2300      	movs	r3, #0
 8018a14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8018a16:	89fb      	ldrh	r3, [r7, #14]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d002      	beq.n	8018a22 <dec_lock+0x3a>
 8018a1c:	89fb      	ldrh	r3, [r7, #14]
 8018a1e:	3b01      	subs	r3, #1
 8018a20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8018a22:	4a0e      	ldr	r2, [pc, #56]	@ (8018a5c <dec_lock+0x74>)
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	011b      	lsls	r3, r3, #4
 8018a28:	4413      	add	r3, r2
 8018a2a:	330c      	adds	r3, #12
 8018a2c:	89fa      	ldrh	r2, [r7, #14]
 8018a2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8018a30:	89fb      	ldrh	r3, [r7, #14]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d105      	bne.n	8018a42 <dec_lock+0x5a>
 8018a36:	4a09      	ldr	r2, [pc, #36]	@ (8018a5c <dec_lock+0x74>)
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	011b      	lsls	r3, r3, #4
 8018a3c:	4413      	add	r3, r2
 8018a3e:	2200      	movs	r2, #0
 8018a40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8018a42:	2300      	movs	r3, #0
 8018a44:	737b      	strb	r3, [r7, #13]
 8018a46:	e001      	b.n	8018a4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8018a48:	2302      	movs	r3, #2
 8018a4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8018a4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3714      	adds	r7, #20
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop
 8018a5c:	240084c0 	.word	0x240084c0

08018a60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8018a60:	b480      	push	{r7}
 8018a62:	b085      	sub	sp, #20
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8018a68:	2300      	movs	r3, #0
 8018a6a:	60fb      	str	r3, [r7, #12]
 8018a6c:	e010      	b.n	8018a90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8018a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8018aa4 <clear_lock+0x44>)
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	011b      	lsls	r3, r3, #4
 8018a74:	4413      	add	r3, r2
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	687a      	ldr	r2, [r7, #4]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d105      	bne.n	8018a8a <clear_lock+0x2a>
 8018a7e:	4a09      	ldr	r2, [pc, #36]	@ (8018aa4 <clear_lock+0x44>)
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	011b      	lsls	r3, r3, #4
 8018a84:	4413      	add	r3, r2
 8018a86:	2200      	movs	r2, #0
 8018a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	3301      	adds	r3, #1
 8018a8e:	60fb      	str	r3, [r7, #12]
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2b03      	cmp	r3, #3
 8018a94:	d9eb      	bls.n	8018a6e <clear_lock+0xe>
	}
}
 8018a96:	bf00      	nop
 8018a98:	bf00      	nop
 8018a9a:	3714      	adds	r7, #20
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa2:	4770      	bx	lr
 8018aa4:	240084c0 	.word	0x240084c0

08018aa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b086      	sub	sp, #24
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	78db      	ldrb	r3, [r3, #3]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d034      	beq.n	8018b26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	7858      	ldrb	r0, [r3, #1]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018acc:	2301      	movs	r3, #1
 8018ace:	697a      	ldr	r2, [r7, #20]
 8018ad0:	f7ff fd3e 	bl	8018550 <disk_write>
 8018ad4:	4603      	mov	r3, r0
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d002      	beq.n	8018ae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8018ada:	2301      	movs	r3, #1
 8018adc:	73fb      	strb	r3, [r7, #15]
 8018ade:	e022      	b.n	8018b26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6a1b      	ldr	r3, [r3, #32]
 8018aea:	697a      	ldr	r2, [r7, #20]
 8018aec:	1ad2      	subs	r2, r2, r3
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	699b      	ldr	r3, [r3, #24]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d217      	bcs.n	8018b26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	789b      	ldrb	r3, [r3, #2]
 8018afa:	613b      	str	r3, [r7, #16]
 8018afc:	e010      	b.n	8018b20 <sync_window+0x78>
					wsect += fs->fsize;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	699b      	ldr	r3, [r3, #24]
 8018b02:	697a      	ldr	r2, [r7, #20]
 8018b04:	4413      	add	r3, r2
 8018b06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	7858      	ldrb	r0, [r3, #1]
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018b12:	2301      	movs	r3, #1
 8018b14:	697a      	ldr	r2, [r7, #20]
 8018b16:	f7ff fd1b 	bl	8018550 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	3b01      	subs	r3, #1
 8018b1e:	613b      	str	r3, [r7, #16]
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d8eb      	bhi.n	8018afe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8018b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3718      	adds	r7, #24
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b42:	683a      	ldr	r2, [r7, #0]
 8018b44:	429a      	cmp	r2, r3
 8018b46:	d01b      	beq.n	8018b80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	f7ff ffad 	bl	8018aa8 <sync_window>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8018b52:	7bfb      	ldrb	r3, [r7, #15]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d113      	bne.n	8018b80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	7858      	ldrb	r0, [r3, #1]
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018b62:	2301      	movs	r3, #1
 8018b64:	683a      	ldr	r2, [r7, #0]
 8018b66:	f7ff fcd3 	bl	8018510 <disk_read>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d004      	beq.n	8018b7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8018b70:	f04f 33ff 	mov.w	r3, #4294967295
 8018b74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8018b76:	2301      	movs	r3, #1
 8018b78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	683a      	ldr	r2, [r7, #0]
 8018b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8018b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	3710      	adds	r7, #16
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd80      	pop	{r7, pc}
	...

08018b8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b084      	sub	sp, #16
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8018b94:	6878      	ldr	r0, [r7, #4]
 8018b96:	f7ff ff87 	bl	8018aa8 <sync_window>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8018b9e:	7bfb      	ldrb	r3, [r7, #15]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d158      	bne.n	8018c56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	781b      	ldrb	r3, [r3, #0]
 8018ba8:	2b03      	cmp	r3, #3
 8018baa:	d148      	bne.n	8018c3e <sync_fs+0xb2>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	791b      	ldrb	r3, [r3, #4]
 8018bb0:	2b01      	cmp	r3, #1
 8018bb2:	d144      	bne.n	8018c3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	3330      	adds	r3, #48	@ 0x30
 8018bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018bbc:	2100      	movs	r1, #0
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	f7ff fda8 	bl	8018714 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	3330      	adds	r3, #48	@ 0x30
 8018bc8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8018bcc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	f7ff fd37 	bl	8018644 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	3330      	adds	r3, #48	@ 0x30
 8018bda:	4921      	ldr	r1, [pc, #132]	@ (8018c60 <sync_fs+0xd4>)
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7ff fd4c 	bl	801867a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	3330      	adds	r3, #48	@ 0x30
 8018be6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8018bea:	491e      	ldr	r1, [pc, #120]	@ (8018c64 <sync_fs+0xd8>)
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7ff fd44 	bl	801867a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	3330      	adds	r3, #48	@ 0x30
 8018bf6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	691b      	ldr	r3, [r3, #16]
 8018bfe:	4619      	mov	r1, r3
 8018c00:	4610      	mov	r0, r2
 8018c02:	f7ff fd3a 	bl	801867a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	3330      	adds	r3, #48	@ 0x30
 8018c0a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	68db      	ldr	r3, [r3, #12]
 8018c12:	4619      	mov	r1, r3
 8018c14:	4610      	mov	r0, r2
 8018c16:	f7ff fd30 	bl	801867a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	69db      	ldr	r3, [r3, #28]
 8018c1e:	1c5a      	adds	r2, r3, #1
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	7858      	ldrb	r0, [r3, #1]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c32:	2301      	movs	r3, #1
 8018c34:	f7ff fc8c 	bl	8018550 <disk_write>
			fs->fsi_flag = 0;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	785b      	ldrb	r3, [r3, #1]
 8018c42:	2200      	movs	r2, #0
 8018c44:	2100      	movs	r1, #0
 8018c46:	4618      	mov	r0, r3
 8018c48:	f7ff fca2 	bl	8018590 <disk_ioctl>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d001      	beq.n	8018c56 <sync_fs+0xca>
 8018c52:	2301      	movs	r3, #1
 8018c54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8018c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3710      	adds	r7, #16
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	41615252 	.word	0x41615252
 8018c64:	61417272 	.word	0x61417272

08018c68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8018c68:	b480      	push	{r7}
 8018c6a:	b083      	sub	sp, #12
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
 8018c70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	3b02      	subs	r3, #2
 8018c76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	695b      	ldr	r3, [r3, #20]
 8018c7c:	3b02      	subs	r3, #2
 8018c7e:	683a      	ldr	r2, [r7, #0]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d301      	bcc.n	8018c88 <clust2sect+0x20>
 8018c84:	2300      	movs	r3, #0
 8018c86:	e008      	b.n	8018c9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	895b      	ldrh	r3, [r3, #10]
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	fb03 f202 	mul.w	r2, r3, r2
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c98:	4413      	add	r3, r2
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	370c      	adds	r7, #12
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca4:	4770      	bx	lr

08018ca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8018ca6:	b580      	push	{r7, lr}
 8018ca8:	b086      	sub	sp, #24
 8018caa:	af00      	add	r7, sp, #0
 8018cac:	6078      	str	r0, [r7, #4]
 8018cae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	2b01      	cmp	r3, #1
 8018cba:	d904      	bls.n	8018cc6 <get_fat+0x20>
 8018cbc:	693b      	ldr	r3, [r7, #16]
 8018cbe:	695b      	ldr	r3, [r3, #20]
 8018cc0:	683a      	ldr	r2, [r7, #0]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d302      	bcc.n	8018ccc <get_fat+0x26>
		val = 1;	/* Internal error */
 8018cc6:	2301      	movs	r3, #1
 8018cc8:	617b      	str	r3, [r7, #20]
 8018cca:	e08e      	b.n	8018dea <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8018ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	781b      	ldrb	r3, [r3, #0]
 8018cd6:	2b03      	cmp	r3, #3
 8018cd8:	d061      	beq.n	8018d9e <get_fat+0xf8>
 8018cda:	2b03      	cmp	r3, #3
 8018cdc:	dc7b      	bgt.n	8018dd6 <get_fat+0x130>
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d002      	beq.n	8018ce8 <get_fat+0x42>
 8018ce2:	2b02      	cmp	r3, #2
 8018ce4:	d041      	beq.n	8018d6a <get_fat+0xc4>
 8018ce6:	e076      	b.n	8018dd6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	60fb      	str	r3, [r7, #12]
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	085b      	lsrs	r3, r3, #1
 8018cf0:	68fa      	ldr	r2, [r7, #12]
 8018cf2:	4413      	add	r3, r2
 8018cf4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018cf6:	693b      	ldr	r3, [r7, #16]
 8018cf8:	6a1a      	ldr	r2, [r3, #32]
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	0a5b      	lsrs	r3, r3, #9
 8018cfe:	4413      	add	r3, r2
 8018d00:	4619      	mov	r1, r3
 8018d02:	6938      	ldr	r0, [r7, #16]
 8018d04:	f7ff ff14 	bl	8018b30 <move_window>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d166      	bne.n	8018ddc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	1c5a      	adds	r2, r3, #1
 8018d12:	60fa      	str	r2, [r7, #12]
 8018d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d18:	693a      	ldr	r2, [r7, #16]
 8018d1a:	4413      	add	r3, r2
 8018d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018d20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018d22:	693b      	ldr	r3, [r7, #16]
 8018d24:	6a1a      	ldr	r2, [r3, #32]
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	0a5b      	lsrs	r3, r3, #9
 8018d2a:	4413      	add	r3, r2
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	6938      	ldr	r0, [r7, #16]
 8018d30:	f7ff fefe 	bl	8018b30 <move_window>
 8018d34:	4603      	mov	r3, r0
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d152      	bne.n	8018de0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d40:	693a      	ldr	r2, [r7, #16]
 8018d42:	4413      	add	r3, r2
 8018d44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018d48:	021b      	lsls	r3, r3, #8
 8018d4a:	68ba      	ldr	r2, [r7, #8]
 8018d4c:	4313      	orrs	r3, r2
 8018d4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	f003 0301 	and.w	r3, r3, #1
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d002      	beq.n	8018d60 <get_fat+0xba>
 8018d5a:	68bb      	ldr	r3, [r7, #8]
 8018d5c:	091b      	lsrs	r3, r3, #4
 8018d5e:	e002      	b.n	8018d66 <get_fat+0xc0>
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018d66:	617b      	str	r3, [r7, #20]
			break;
 8018d68:	e03f      	b.n	8018dea <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018d6a:	693b      	ldr	r3, [r7, #16]
 8018d6c:	6a1a      	ldr	r2, [r3, #32]
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	0a1b      	lsrs	r3, r3, #8
 8018d72:	4413      	add	r3, r2
 8018d74:	4619      	mov	r1, r3
 8018d76:	6938      	ldr	r0, [r7, #16]
 8018d78:	f7ff feda 	bl	8018b30 <move_window>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d130      	bne.n	8018de4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	005b      	lsls	r3, r3, #1
 8018d8c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018d90:	4413      	add	r3, r2
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7ff fc1a 	bl	80185cc <ld_word>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	617b      	str	r3, [r7, #20]
			break;
 8018d9c:	e025      	b.n	8018dea <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018d9e:	693b      	ldr	r3, [r7, #16]
 8018da0:	6a1a      	ldr	r2, [r3, #32]
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	09db      	lsrs	r3, r3, #7
 8018da6:	4413      	add	r3, r2
 8018da8:	4619      	mov	r1, r3
 8018daa:	6938      	ldr	r0, [r7, #16]
 8018dac:	f7ff fec0 	bl	8018b30 <move_window>
 8018db0:	4603      	mov	r3, r0
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d118      	bne.n	8018de8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018dbc:	683b      	ldr	r3, [r7, #0]
 8018dbe:	009b      	lsls	r3, r3, #2
 8018dc0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018dc4:	4413      	add	r3, r2
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7ff fc19 	bl	80185fe <ld_dword>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8018dd2:	617b      	str	r3, [r7, #20]
			break;
 8018dd4:	e009      	b.n	8018dea <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	617b      	str	r3, [r7, #20]
 8018dda:	e006      	b.n	8018dea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018ddc:	bf00      	nop
 8018dde:	e004      	b.n	8018dea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018de0:	bf00      	nop
 8018de2:	e002      	b.n	8018dea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018de4:	bf00      	nop
 8018de6:	e000      	b.n	8018dea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018de8:	bf00      	nop
		}
	}

	return val;
 8018dea:	697b      	ldr	r3, [r7, #20]
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3718      	adds	r7, #24
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018df4:	b590      	push	{r4, r7, lr}
 8018df6:	b089      	sub	sp, #36	@ 0x24
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	60b9      	str	r1, [r7, #8]
 8018dfe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8018e00:	2302      	movs	r3, #2
 8018e02:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018e04:	68bb      	ldr	r3, [r7, #8]
 8018e06:	2b01      	cmp	r3, #1
 8018e08:	f240 80d9 	bls.w	8018fbe <put_fat+0x1ca>
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	695b      	ldr	r3, [r3, #20]
 8018e10:	68ba      	ldr	r2, [r7, #8]
 8018e12:	429a      	cmp	r2, r3
 8018e14:	f080 80d3 	bcs.w	8018fbe <put_fat+0x1ca>
		switch (fs->fs_type) {
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	2b03      	cmp	r3, #3
 8018e1e:	f000 8096 	beq.w	8018f4e <put_fat+0x15a>
 8018e22:	2b03      	cmp	r3, #3
 8018e24:	f300 80cb 	bgt.w	8018fbe <put_fat+0x1ca>
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	d002      	beq.n	8018e32 <put_fat+0x3e>
 8018e2c:	2b02      	cmp	r3, #2
 8018e2e:	d06e      	beq.n	8018f0e <put_fat+0x11a>
 8018e30:	e0c5      	b.n	8018fbe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	61bb      	str	r3, [r7, #24]
 8018e36:	69bb      	ldr	r3, [r7, #24]
 8018e38:	085b      	lsrs	r3, r3, #1
 8018e3a:	69ba      	ldr	r2, [r7, #24]
 8018e3c:	4413      	add	r3, r2
 8018e3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	6a1a      	ldr	r2, [r3, #32]
 8018e44:	69bb      	ldr	r3, [r7, #24]
 8018e46:	0a5b      	lsrs	r3, r3, #9
 8018e48:	4413      	add	r3, r2
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	68f8      	ldr	r0, [r7, #12]
 8018e4e:	f7ff fe6f 	bl	8018b30 <move_window>
 8018e52:	4603      	mov	r3, r0
 8018e54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018e56:	7ffb      	ldrb	r3, [r7, #31]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f040 80a9 	bne.w	8018fb0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018e64:	69bb      	ldr	r3, [r7, #24]
 8018e66:	1c59      	adds	r1, r3, #1
 8018e68:	61b9      	str	r1, [r7, #24]
 8018e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018e6e:	4413      	add	r3, r2
 8018e70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	f003 0301 	and.w	r3, r3, #1
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d00d      	beq.n	8018e98 <put_fat+0xa4>
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	781b      	ldrb	r3, [r3, #0]
 8018e80:	b25b      	sxtb	r3, r3
 8018e82:	f003 030f 	and.w	r3, r3, #15
 8018e86:	b25a      	sxtb	r2, r3
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	b25b      	sxtb	r3, r3
 8018e8c:	011b      	lsls	r3, r3, #4
 8018e8e:	b25b      	sxtb	r3, r3
 8018e90:	4313      	orrs	r3, r2
 8018e92:	b25b      	sxtb	r3, r3
 8018e94:	b2db      	uxtb	r3, r3
 8018e96:	e001      	b.n	8018e9c <put_fat+0xa8>
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	697a      	ldr	r2, [r7, #20]
 8018e9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	2201      	movs	r2, #1
 8018ea4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	6a1a      	ldr	r2, [r3, #32]
 8018eaa:	69bb      	ldr	r3, [r7, #24]
 8018eac:	0a5b      	lsrs	r3, r3, #9
 8018eae:	4413      	add	r3, r2
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	68f8      	ldr	r0, [r7, #12]
 8018eb4:	f7ff fe3c 	bl	8018b30 <move_window>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018ebc:	7ffb      	ldrb	r3, [r7, #31]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d178      	bne.n	8018fb4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018ec8:	69bb      	ldr	r3, [r7, #24]
 8018eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ece:	4413      	add	r3, r2
 8018ed0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	f003 0301 	and.w	r3, r3, #1
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d003      	beq.n	8018ee4 <put_fat+0xf0>
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	091b      	lsrs	r3, r3, #4
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	e00e      	b.n	8018f02 <put_fat+0x10e>
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	781b      	ldrb	r3, [r3, #0]
 8018ee8:	b25b      	sxtb	r3, r3
 8018eea:	f023 030f 	bic.w	r3, r3, #15
 8018eee:	b25a      	sxtb	r2, r3
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	0a1b      	lsrs	r3, r3, #8
 8018ef4:	b25b      	sxtb	r3, r3
 8018ef6:	f003 030f 	and.w	r3, r3, #15
 8018efa:	b25b      	sxtb	r3, r3
 8018efc:	4313      	orrs	r3, r2
 8018efe:	b25b      	sxtb	r3, r3
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	697a      	ldr	r2, [r7, #20]
 8018f04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2201      	movs	r2, #1
 8018f0a:	70da      	strb	r2, [r3, #3]
			break;
 8018f0c:	e057      	b.n	8018fbe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	6a1a      	ldr	r2, [r3, #32]
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	0a1b      	lsrs	r3, r3, #8
 8018f16:	4413      	add	r3, r2
 8018f18:	4619      	mov	r1, r3
 8018f1a:	68f8      	ldr	r0, [r7, #12]
 8018f1c:	f7ff fe08 	bl	8018b30 <move_window>
 8018f20:	4603      	mov	r3, r0
 8018f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018f24:	7ffb      	ldrb	r3, [r7, #31]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d146      	bne.n	8018fb8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018f30:	68bb      	ldr	r3, [r7, #8]
 8018f32:	005b      	lsls	r3, r3, #1
 8018f34:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018f38:	4413      	add	r3, r2
 8018f3a:	687a      	ldr	r2, [r7, #4]
 8018f3c:	b292      	uxth	r2, r2
 8018f3e:	4611      	mov	r1, r2
 8018f40:	4618      	mov	r0, r3
 8018f42:	f7ff fb7f 	bl	8018644 <st_word>
			fs->wflag = 1;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	2201      	movs	r2, #1
 8018f4a:	70da      	strb	r2, [r3, #3]
			break;
 8018f4c:	e037      	b.n	8018fbe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	6a1a      	ldr	r2, [r3, #32]
 8018f52:	68bb      	ldr	r3, [r7, #8]
 8018f54:	09db      	lsrs	r3, r3, #7
 8018f56:	4413      	add	r3, r2
 8018f58:	4619      	mov	r1, r3
 8018f5a:	68f8      	ldr	r0, [r7, #12]
 8018f5c:	f7ff fde8 	bl	8018b30 <move_window>
 8018f60:	4603      	mov	r3, r0
 8018f62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018f64:	7ffb      	ldrb	r3, [r7, #31]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d128      	bne.n	8018fbc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018f76:	68bb      	ldr	r3, [r7, #8]
 8018f78:	009b      	lsls	r3, r3, #2
 8018f7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018f7e:	4413      	add	r3, r2
 8018f80:	4618      	mov	r0, r3
 8018f82:	f7ff fb3c 	bl	80185fe <ld_dword>
 8018f86:	4603      	mov	r3, r0
 8018f88:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8018f8c:	4323      	orrs	r3, r4
 8018f8e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	009b      	lsls	r3, r3, #2
 8018f9a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018f9e:	4413      	add	r3, r2
 8018fa0:	6879      	ldr	r1, [r7, #4]
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7ff fb69 	bl	801867a <st_dword>
			fs->wflag = 1;
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	2201      	movs	r2, #1
 8018fac:	70da      	strb	r2, [r3, #3]
			break;
 8018fae:	e006      	b.n	8018fbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018fb0:	bf00      	nop
 8018fb2:	e004      	b.n	8018fbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018fb4:	bf00      	nop
 8018fb6:	e002      	b.n	8018fbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018fb8:	bf00      	nop
 8018fba:	e000      	b.n	8018fbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018fbc:	bf00      	nop
		}
	}
	return res;
 8018fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3724      	adds	r7, #36	@ 0x24
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd90      	pop	{r4, r7, pc}

08018fc8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b088      	sub	sp, #32
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	2b01      	cmp	r3, #1
 8018fe2:	d904      	bls.n	8018fee <remove_chain+0x26>
 8018fe4:	69bb      	ldr	r3, [r7, #24]
 8018fe6:	695b      	ldr	r3, [r3, #20]
 8018fe8:	68ba      	ldr	r2, [r7, #8]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d301      	bcc.n	8018ff2 <remove_chain+0x2a>
 8018fee:	2302      	movs	r3, #2
 8018ff0:	e04b      	b.n	801908a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d00c      	beq.n	8019012 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8018ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8018ffc:	6879      	ldr	r1, [r7, #4]
 8018ffe:	69b8      	ldr	r0, [r7, #24]
 8019000:	f7ff fef8 	bl	8018df4 <put_fat>
 8019004:	4603      	mov	r3, r0
 8019006:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019008:	7ffb      	ldrb	r3, [r7, #31]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d001      	beq.n	8019012 <remove_chain+0x4a>
 801900e:	7ffb      	ldrb	r3, [r7, #31]
 8019010:	e03b      	b.n	801908a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019012:	68b9      	ldr	r1, [r7, #8]
 8019014:	68f8      	ldr	r0, [r7, #12]
 8019016:	f7ff fe46 	bl	8018ca6 <get_fat>
 801901a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d031      	beq.n	8019086 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	2b01      	cmp	r3, #1
 8019026:	d101      	bne.n	801902c <remove_chain+0x64>
 8019028:	2302      	movs	r3, #2
 801902a:	e02e      	b.n	801908a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019032:	d101      	bne.n	8019038 <remove_chain+0x70>
 8019034:	2301      	movs	r3, #1
 8019036:	e028      	b.n	801908a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019038:	2200      	movs	r2, #0
 801903a:	68b9      	ldr	r1, [r7, #8]
 801903c:	69b8      	ldr	r0, [r7, #24]
 801903e:	f7ff fed9 	bl	8018df4 <put_fat>
 8019042:	4603      	mov	r3, r0
 8019044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019046:	7ffb      	ldrb	r3, [r7, #31]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d001      	beq.n	8019050 <remove_chain+0x88>
 801904c:	7ffb      	ldrb	r3, [r7, #31]
 801904e:	e01c      	b.n	801908a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019050:	69bb      	ldr	r3, [r7, #24]
 8019052:	691a      	ldr	r2, [r3, #16]
 8019054:	69bb      	ldr	r3, [r7, #24]
 8019056:	695b      	ldr	r3, [r3, #20]
 8019058:	3b02      	subs	r3, #2
 801905a:	429a      	cmp	r2, r3
 801905c:	d20b      	bcs.n	8019076 <remove_chain+0xae>
			fs->free_clst++;
 801905e:	69bb      	ldr	r3, [r7, #24]
 8019060:	691b      	ldr	r3, [r3, #16]
 8019062:	1c5a      	adds	r2, r3, #1
 8019064:	69bb      	ldr	r3, [r7, #24]
 8019066:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8019068:	69bb      	ldr	r3, [r7, #24]
 801906a:	791b      	ldrb	r3, [r3, #4]
 801906c:	f043 0301 	orr.w	r3, r3, #1
 8019070:	b2da      	uxtb	r2, r3
 8019072:	69bb      	ldr	r3, [r7, #24]
 8019074:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801907a:	69bb      	ldr	r3, [r7, #24]
 801907c:	695b      	ldr	r3, [r3, #20]
 801907e:	68ba      	ldr	r2, [r7, #8]
 8019080:	429a      	cmp	r2, r3
 8019082:	d3c6      	bcc.n	8019012 <remove_chain+0x4a>
 8019084:	e000      	b.n	8019088 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019086:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019088:	2300      	movs	r3, #0
}
 801908a:	4618      	mov	r0, r3
 801908c:	3720      	adds	r7, #32
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}

08019092 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019092:	b580      	push	{r7, lr}
 8019094:	b088      	sub	sp, #32
 8019096:	af00      	add	r7, sp, #0
 8019098:	6078      	str	r0, [r7, #4]
 801909a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d10d      	bne.n	80190c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	68db      	ldr	r3, [r3, #12]
 80190ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80190ae:	69bb      	ldr	r3, [r7, #24]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d004      	beq.n	80190be <create_chain+0x2c>
 80190b4:	693b      	ldr	r3, [r7, #16]
 80190b6:	695b      	ldr	r3, [r3, #20]
 80190b8:	69ba      	ldr	r2, [r7, #24]
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d31b      	bcc.n	80190f6 <create_chain+0x64>
 80190be:	2301      	movs	r3, #1
 80190c0:	61bb      	str	r3, [r7, #24]
 80190c2:	e018      	b.n	80190f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80190c4:	6839      	ldr	r1, [r7, #0]
 80190c6:	6878      	ldr	r0, [r7, #4]
 80190c8:	f7ff fded 	bl	8018ca6 <get_fat>
 80190cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	2b01      	cmp	r3, #1
 80190d2:	d801      	bhi.n	80190d8 <create_chain+0x46>
 80190d4:	2301      	movs	r3, #1
 80190d6:	e070      	b.n	80191ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190de:	d101      	bne.n	80190e4 <create_chain+0x52>
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	e06a      	b.n	80191ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	695b      	ldr	r3, [r3, #20]
 80190e8:	68fa      	ldr	r2, [r7, #12]
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d201      	bcs.n	80190f2 <create_chain+0x60>
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	e063      	b.n	80191ba <create_chain+0x128>
		scl = clst;
 80190f2:	683b      	ldr	r3, [r7, #0]
 80190f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80190f6:	69bb      	ldr	r3, [r7, #24]
 80190f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80190fa:	69fb      	ldr	r3, [r7, #28]
 80190fc:	3301      	adds	r3, #1
 80190fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019100:	693b      	ldr	r3, [r7, #16]
 8019102:	695b      	ldr	r3, [r3, #20]
 8019104:	69fa      	ldr	r2, [r7, #28]
 8019106:	429a      	cmp	r2, r3
 8019108:	d307      	bcc.n	801911a <create_chain+0x88>
				ncl = 2;
 801910a:	2302      	movs	r3, #2
 801910c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801910e:	69fa      	ldr	r2, [r7, #28]
 8019110:	69bb      	ldr	r3, [r7, #24]
 8019112:	429a      	cmp	r2, r3
 8019114:	d901      	bls.n	801911a <create_chain+0x88>
 8019116:	2300      	movs	r3, #0
 8019118:	e04f      	b.n	80191ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801911a:	69f9      	ldr	r1, [r7, #28]
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f7ff fdc2 	bl	8018ca6 <get_fat>
 8019122:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d00e      	beq.n	8019148 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	2b01      	cmp	r3, #1
 801912e:	d003      	beq.n	8019138 <create_chain+0xa6>
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019136:	d101      	bne.n	801913c <create_chain+0xaa>
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	e03e      	b.n	80191ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801913c:	69fa      	ldr	r2, [r7, #28]
 801913e:	69bb      	ldr	r3, [r7, #24]
 8019140:	429a      	cmp	r2, r3
 8019142:	d1da      	bne.n	80190fa <create_chain+0x68>
 8019144:	2300      	movs	r3, #0
 8019146:	e038      	b.n	80191ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019148:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801914a:	f04f 32ff 	mov.w	r2, #4294967295
 801914e:	69f9      	ldr	r1, [r7, #28]
 8019150:	6938      	ldr	r0, [r7, #16]
 8019152:	f7ff fe4f 	bl	8018df4 <put_fat>
 8019156:	4603      	mov	r3, r0
 8019158:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801915a:	7dfb      	ldrb	r3, [r7, #23]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d109      	bne.n	8019174 <create_chain+0xe2>
 8019160:	683b      	ldr	r3, [r7, #0]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d006      	beq.n	8019174 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019166:	69fa      	ldr	r2, [r7, #28]
 8019168:	6839      	ldr	r1, [r7, #0]
 801916a:	6938      	ldr	r0, [r7, #16]
 801916c:	f7ff fe42 	bl	8018df4 <put_fat>
 8019170:	4603      	mov	r3, r0
 8019172:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019174:	7dfb      	ldrb	r3, [r7, #23]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d116      	bne.n	80191a8 <create_chain+0x116>
		fs->last_clst = ncl;
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	69fa      	ldr	r2, [r7, #28]
 801917e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	691a      	ldr	r2, [r3, #16]
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	695b      	ldr	r3, [r3, #20]
 8019188:	3b02      	subs	r3, #2
 801918a:	429a      	cmp	r2, r3
 801918c:	d804      	bhi.n	8019198 <create_chain+0x106>
 801918e:	693b      	ldr	r3, [r7, #16]
 8019190:	691b      	ldr	r3, [r3, #16]
 8019192:	1e5a      	subs	r2, r3, #1
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	791b      	ldrb	r3, [r3, #4]
 801919c:	f043 0301 	orr.w	r3, r3, #1
 80191a0:	b2da      	uxtb	r2, r3
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	711a      	strb	r2, [r3, #4]
 80191a6:	e007      	b.n	80191b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80191a8:	7dfb      	ldrb	r3, [r7, #23]
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d102      	bne.n	80191b4 <create_chain+0x122>
 80191ae:	f04f 33ff 	mov.w	r3, #4294967295
 80191b2:	e000      	b.n	80191b6 <create_chain+0x124>
 80191b4:	2301      	movs	r3, #1
 80191b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80191b8:	69fb      	ldr	r3, [r7, #28]
}
 80191ba:	4618      	mov	r0, r3
 80191bc:	3720      	adds	r7, #32
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}

080191c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80191c2:	b480      	push	{r7}
 80191c4:	b087      	sub	sp, #28
 80191c6:	af00      	add	r7, sp, #0
 80191c8:	6078      	str	r0, [r7, #4]
 80191ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80191d6:	3304      	adds	r3, #4
 80191d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	0a5b      	lsrs	r3, r3, #9
 80191de:	68fa      	ldr	r2, [r7, #12]
 80191e0:	8952      	ldrh	r2, [r2, #10]
 80191e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80191e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80191e8:	693b      	ldr	r3, [r7, #16]
 80191ea:	1d1a      	adds	r2, r3, #4
 80191ec:	613a      	str	r2, [r7, #16]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80191f2:	68bb      	ldr	r3, [r7, #8]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d101      	bne.n	80191fc <clmt_clust+0x3a>
 80191f8:	2300      	movs	r3, #0
 80191fa:	e010      	b.n	801921e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80191fc:	697a      	ldr	r2, [r7, #20]
 80191fe:	68bb      	ldr	r3, [r7, #8]
 8019200:	429a      	cmp	r2, r3
 8019202:	d307      	bcc.n	8019214 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019204:	697a      	ldr	r2, [r7, #20]
 8019206:	68bb      	ldr	r3, [r7, #8]
 8019208:	1ad3      	subs	r3, r2, r3
 801920a:	617b      	str	r3, [r7, #20]
 801920c:	693b      	ldr	r3, [r7, #16]
 801920e:	3304      	adds	r3, #4
 8019210:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019212:	e7e9      	b.n	80191e8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019214:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019216:	693b      	ldr	r3, [r7, #16]
 8019218:	681a      	ldr	r2, [r3, #0]
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	4413      	add	r3, r2
}
 801921e:	4618      	mov	r0, r3
 8019220:	371c      	adds	r7, #28
 8019222:	46bd      	mov	sp, r7
 8019224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019228:	4770      	bx	lr

0801922a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801922a:	b580      	push	{r7, lr}
 801922c:	b086      	sub	sp, #24
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
 8019232:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019240:	d204      	bcs.n	801924c <dir_sdi+0x22>
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	f003 031f 	and.w	r3, r3, #31
 8019248:	2b00      	cmp	r3, #0
 801924a:	d001      	beq.n	8019250 <dir_sdi+0x26>
		return FR_INT_ERR;
 801924c:	2302      	movs	r3, #2
 801924e:	e063      	b.n	8019318 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	683a      	ldr	r2, [r7, #0]
 8019254:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	689b      	ldr	r3, [r3, #8]
 801925a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801925c:	697b      	ldr	r3, [r7, #20]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d106      	bne.n	8019270 <dir_sdi+0x46>
 8019262:	693b      	ldr	r3, [r7, #16]
 8019264:	781b      	ldrb	r3, [r3, #0]
 8019266:	2b02      	cmp	r3, #2
 8019268:	d902      	bls.n	8019270 <dir_sdi+0x46>
		clst = fs->dirbase;
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801926e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019270:	697b      	ldr	r3, [r7, #20]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d10c      	bne.n	8019290 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	095b      	lsrs	r3, r3, #5
 801927a:	693a      	ldr	r2, [r7, #16]
 801927c:	8912      	ldrh	r2, [r2, #8]
 801927e:	4293      	cmp	r3, r2
 8019280:	d301      	bcc.n	8019286 <dir_sdi+0x5c>
 8019282:	2302      	movs	r3, #2
 8019284:	e048      	b.n	8019318 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	61da      	str	r2, [r3, #28]
 801928e:	e029      	b.n	80192e4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019290:	693b      	ldr	r3, [r7, #16]
 8019292:	895b      	ldrh	r3, [r3, #10]
 8019294:	025b      	lsls	r3, r3, #9
 8019296:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019298:	e019      	b.n	80192ce <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	6979      	ldr	r1, [r7, #20]
 801929e:	4618      	mov	r0, r3
 80192a0:	f7ff fd01 	bl	8018ca6 <get_fat>
 80192a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192ac:	d101      	bne.n	80192b2 <dir_sdi+0x88>
 80192ae:	2301      	movs	r3, #1
 80192b0:	e032      	b.n	8019318 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80192b2:	697b      	ldr	r3, [r7, #20]
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d904      	bls.n	80192c2 <dir_sdi+0x98>
 80192b8:	693b      	ldr	r3, [r7, #16]
 80192ba:	695b      	ldr	r3, [r3, #20]
 80192bc:	697a      	ldr	r2, [r7, #20]
 80192be:	429a      	cmp	r2, r3
 80192c0:	d301      	bcc.n	80192c6 <dir_sdi+0x9c>
 80192c2:	2302      	movs	r3, #2
 80192c4:	e028      	b.n	8019318 <dir_sdi+0xee>
			ofs -= csz;
 80192c6:	683a      	ldr	r2, [r7, #0]
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	1ad3      	subs	r3, r2, r3
 80192cc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80192ce:	683a      	ldr	r2, [r7, #0]
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d2e1      	bcs.n	801929a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80192d6:	6979      	ldr	r1, [r7, #20]
 80192d8:	6938      	ldr	r0, [r7, #16]
 80192da:	f7ff fcc5 	bl	8018c68 <clust2sect>
 80192de:	4602      	mov	r2, r0
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	697a      	ldr	r2, [r7, #20]
 80192e8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	69db      	ldr	r3, [r3, #28]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d101      	bne.n	80192f6 <dir_sdi+0xcc>
 80192f2:	2302      	movs	r3, #2
 80192f4:	e010      	b.n	8019318 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	69da      	ldr	r2, [r3, #28]
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	0a5b      	lsrs	r3, r3, #9
 80192fe:	441a      	add	r2, r3
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019304:	693b      	ldr	r3, [r7, #16]
 8019306:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019310:	441a      	add	r2, r3
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019316:	2300      	movs	r3, #0
}
 8019318:	4618      	mov	r0, r3
 801931a:	3718      	adds	r7, #24
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}

08019320 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b086      	sub	sp, #24
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
 8019328:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	695b      	ldr	r3, [r3, #20]
 8019334:	3320      	adds	r3, #32
 8019336:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	69db      	ldr	r3, [r3, #28]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d003      	beq.n	8019348 <dir_next+0x28>
 8019340:	68bb      	ldr	r3, [r7, #8]
 8019342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019346:	d301      	bcc.n	801934c <dir_next+0x2c>
 8019348:	2304      	movs	r3, #4
 801934a:	e0aa      	b.n	80194a2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801934c:	68bb      	ldr	r3, [r7, #8]
 801934e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019352:	2b00      	cmp	r3, #0
 8019354:	f040 8098 	bne.w	8019488 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	69db      	ldr	r3, [r3, #28]
 801935c:	1c5a      	adds	r2, r3, #1
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	699b      	ldr	r3, [r3, #24]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d10b      	bne.n	8019382 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801936a:	68bb      	ldr	r3, [r7, #8]
 801936c:	095b      	lsrs	r3, r3, #5
 801936e:	68fa      	ldr	r2, [r7, #12]
 8019370:	8912      	ldrh	r2, [r2, #8]
 8019372:	4293      	cmp	r3, r2
 8019374:	f0c0 8088 	bcc.w	8019488 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2200      	movs	r2, #0
 801937c:	61da      	str	r2, [r3, #28]
 801937e:	2304      	movs	r3, #4
 8019380:	e08f      	b.n	80194a2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	0a5b      	lsrs	r3, r3, #9
 8019386:	68fa      	ldr	r2, [r7, #12]
 8019388:	8952      	ldrh	r2, [r2, #10]
 801938a:	3a01      	subs	r2, #1
 801938c:	4013      	ands	r3, r2
 801938e:	2b00      	cmp	r3, #0
 8019390:	d17a      	bne.n	8019488 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019392:	687a      	ldr	r2, [r7, #4]
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	699b      	ldr	r3, [r3, #24]
 8019398:	4619      	mov	r1, r3
 801939a:	4610      	mov	r0, r2
 801939c:	f7ff fc83 	bl	8018ca6 <get_fat>
 80193a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80193a2:	697b      	ldr	r3, [r7, #20]
 80193a4:	2b01      	cmp	r3, #1
 80193a6:	d801      	bhi.n	80193ac <dir_next+0x8c>
 80193a8:	2302      	movs	r3, #2
 80193aa:	e07a      	b.n	80194a2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80193ac:	697b      	ldr	r3, [r7, #20]
 80193ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193b2:	d101      	bne.n	80193b8 <dir_next+0x98>
 80193b4:	2301      	movs	r3, #1
 80193b6:	e074      	b.n	80194a2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	695b      	ldr	r3, [r3, #20]
 80193bc:	697a      	ldr	r2, [r7, #20]
 80193be:	429a      	cmp	r2, r3
 80193c0:	d358      	bcc.n	8019474 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d104      	bne.n	80193d2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	2200      	movs	r2, #0
 80193cc:	61da      	str	r2, [r3, #28]
 80193ce:	2304      	movs	r3, #4
 80193d0:	e067      	b.n	80194a2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	699b      	ldr	r3, [r3, #24]
 80193d8:	4619      	mov	r1, r3
 80193da:	4610      	mov	r0, r2
 80193dc:	f7ff fe59 	bl	8019092 <create_chain>
 80193e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80193e2:	697b      	ldr	r3, [r7, #20]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d101      	bne.n	80193ec <dir_next+0xcc>
 80193e8:	2307      	movs	r3, #7
 80193ea:	e05a      	b.n	80194a2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80193ec:	697b      	ldr	r3, [r7, #20]
 80193ee:	2b01      	cmp	r3, #1
 80193f0:	d101      	bne.n	80193f6 <dir_next+0xd6>
 80193f2:	2302      	movs	r3, #2
 80193f4:	e055      	b.n	80194a2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80193f6:	697b      	ldr	r3, [r7, #20]
 80193f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193fc:	d101      	bne.n	8019402 <dir_next+0xe2>
 80193fe:	2301      	movs	r3, #1
 8019400:	e04f      	b.n	80194a2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8019402:	68f8      	ldr	r0, [r7, #12]
 8019404:	f7ff fb50 	bl	8018aa8 <sync_window>
 8019408:	4603      	mov	r3, r0
 801940a:	2b00      	cmp	r3, #0
 801940c:	d001      	beq.n	8019412 <dir_next+0xf2>
 801940e:	2301      	movs	r3, #1
 8019410:	e047      	b.n	80194a2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	3330      	adds	r3, #48	@ 0x30
 8019416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801941a:	2100      	movs	r1, #0
 801941c:	4618      	mov	r0, r3
 801941e:	f7ff f979 	bl	8018714 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019422:	2300      	movs	r3, #0
 8019424:	613b      	str	r3, [r7, #16]
 8019426:	6979      	ldr	r1, [r7, #20]
 8019428:	68f8      	ldr	r0, [r7, #12]
 801942a:	f7ff fc1d 	bl	8018c68 <clust2sect>
 801942e:	4602      	mov	r2, r0
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019434:	e012      	b.n	801945c <dir_next+0x13c>
						fs->wflag = 1;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	2201      	movs	r2, #1
 801943a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801943c:	68f8      	ldr	r0, [r7, #12]
 801943e:	f7ff fb33 	bl	8018aa8 <sync_window>
 8019442:	4603      	mov	r3, r0
 8019444:	2b00      	cmp	r3, #0
 8019446:	d001      	beq.n	801944c <dir_next+0x12c>
 8019448:	2301      	movs	r3, #1
 801944a:	e02a      	b.n	80194a2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801944c:	693b      	ldr	r3, [r7, #16]
 801944e:	3301      	adds	r3, #1
 8019450:	613b      	str	r3, [r7, #16]
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019456:	1c5a      	adds	r2, r3, #1
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	895b      	ldrh	r3, [r3, #10]
 8019460:	461a      	mov	r2, r3
 8019462:	693b      	ldr	r3, [r7, #16]
 8019464:	4293      	cmp	r3, r2
 8019466:	d3e6      	bcc.n	8019436 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	1ad2      	subs	r2, r2, r3
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	697a      	ldr	r2, [r7, #20]
 8019478:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801947a:	6979      	ldr	r1, [r7, #20]
 801947c:	68f8      	ldr	r0, [r7, #12]
 801947e:	f7ff fbf3 	bl	8018c68 <clust2sect>
 8019482:	4602      	mov	r2, r0
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	68ba      	ldr	r2, [r7, #8]
 801948c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801949a:	441a      	add	r2, r3
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80194a0:	2300      	movs	r3, #0
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	3718      	adds	r7, #24
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}

080194aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80194aa:	b580      	push	{r7, lr}
 80194ac:	b086      	sub	sp, #24
 80194ae:	af00      	add	r7, sp, #0
 80194b0:	6078      	str	r0, [r7, #4]
 80194b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80194ba:	2100      	movs	r1, #0
 80194bc:	6878      	ldr	r0, [r7, #4]
 80194be:	f7ff feb4 	bl	801922a <dir_sdi>
 80194c2:	4603      	mov	r3, r0
 80194c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80194c6:	7dfb      	ldrb	r3, [r7, #23]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d12b      	bne.n	8019524 <dir_alloc+0x7a>
		n = 0;
 80194cc:	2300      	movs	r3, #0
 80194ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	69db      	ldr	r3, [r3, #28]
 80194d4:	4619      	mov	r1, r3
 80194d6:	68f8      	ldr	r0, [r7, #12]
 80194d8:	f7ff fb2a 	bl	8018b30 <move_window>
 80194dc:	4603      	mov	r3, r0
 80194de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80194e0:	7dfb      	ldrb	r3, [r7, #23]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d11d      	bne.n	8019522 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6a1b      	ldr	r3, [r3, #32]
 80194ea:	781b      	ldrb	r3, [r3, #0]
 80194ec:	2be5      	cmp	r3, #229	@ 0xe5
 80194ee:	d004      	beq.n	80194fa <dir_alloc+0x50>
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6a1b      	ldr	r3, [r3, #32]
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d107      	bne.n	801950a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	3301      	adds	r3, #1
 80194fe:	613b      	str	r3, [r7, #16]
 8019500:	693a      	ldr	r2, [r7, #16]
 8019502:	683b      	ldr	r3, [r7, #0]
 8019504:	429a      	cmp	r2, r3
 8019506:	d102      	bne.n	801950e <dir_alloc+0x64>
 8019508:	e00c      	b.n	8019524 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801950a:	2300      	movs	r3, #0
 801950c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801950e:	2101      	movs	r1, #1
 8019510:	6878      	ldr	r0, [r7, #4]
 8019512:	f7ff ff05 	bl	8019320 <dir_next>
 8019516:	4603      	mov	r3, r0
 8019518:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801951a:	7dfb      	ldrb	r3, [r7, #23]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d0d7      	beq.n	80194d0 <dir_alloc+0x26>
 8019520:	e000      	b.n	8019524 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8019522:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019524:	7dfb      	ldrb	r3, [r7, #23]
 8019526:	2b04      	cmp	r3, #4
 8019528:	d101      	bne.n	801952e <dir_alloc+0x84>
 801952a:	2307      	movs	r3, #7
 801952c:	75fb      	strb	r3, [r7, #23]
	return res;
 801952e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019530:	4618      	mov	r0, r3
 8019532:	3718      	adds	r7, #24
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}

08019538 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b084      	sub	sp, #16
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
 8019540:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	331a      	adds	r3, #26
 8019546:	4618      	mov	r0, r3
 8019548:	f7ff f840 	bl	80185cc <ld_word>
 801954c:	4603      	mov	r3, r0
 801954e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	781b      	ldrb	r3, [r3, #0]
 8019554:	2b03      	cmp	r3, #3
 8019556:	d109      	bne.n	801956c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	3314      	adds	r3, #20
 801955c:	4618      	mov	r0, r3
 801955e:	f7ff f835 	bl	80185cc <ld_word>
 8019562:	4603      	mov	r3, r0
 8019564:	041b      	lsls	r3, r3, #16
 8019566:	68fa      	ldr	r2, [r7, #12]
 8019568:	4313      	orrs	r3, r2
 801956a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801956c:	68fb      	ldr	r3, [r7, #12]
}
 801956e:	4618      	mov	r0, r3
 8019570:	3710      	adds	r7, #16
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}

08019576 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8019576:	b580      	push	{r7, lr}
 8019578:	b084      	sub	sp, #16
 801957a:	af00      	add	r7, sp, #0
 801957c:	60f8      	str	r0, [r7, #12]
 801957e:	60b9      	str	r1, [r7, #8]
 8019580:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	331a      	adds	r3, #26
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	b292      	uxth	r2, r2
 801958a:	4611      	mov	r1, r2
 801958c:	4618      	mov	r0, r3
 801958e:	f7ff f859 	bl	8018644 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	781b      	ldrb	r3, [r3, #0]
 8019596:	2b03      	cmp	r3, #3
 8019598:	d109      	bne.n	80195ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	f103 0214 	add.w	r2, r3, #20
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	0c1b      	lsrs	r3, r3, #16
 80195a4:	b29b      	uxth	r3, r3
 80195a6:	4619      	mov	r1, r3
 80195a8:	4610      	mov	r0, r2
 80195aa:	f7ff f84b 	bl	8018644 <st_word>
	}
}
 80195ae:	bf00      	nop
 80195b0:	3710      	adds	r7, #16
 80195b2:	46bd      	mov	sp, r7
 80195b4:	bd80      	pop	{r7, pc}

080195b6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80195b6:	b580      	push	{r7, lr}
 80195b8:	b086      	sub	sp, #24
 80195ba:	af00      	add	r7, sp, #0
 80195bc:	6078      	str	r0, [r7, #4]
 80195be:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80195c0:	2304      	movs	r3, #4
 80195c2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80195ca:	e03c      	b.n	8019646 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	69db      	ldr	r3, [r3, #28]
 80195d0:	4619      	mov	r1, r3
 80195d2:	6938      	ldr	r0, [r7, #16]
 80195d4:	f7ff faac 	bl	8018b30 <move_window>
 80195d8:	4603      	mov	r3, r0
 80195da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80195dc:	7dfb      	ldrb	r3, [r7, #23]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d136      	bne.n	8019650 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6a1b      	ldr	r3, [r3, #32]
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80195ea:	7bfb      	ldrb	r3, [r7, #15]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d102      	bne.n	80195f6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80195f0:	2304      	movs	r3, #4
 80195f2:	75fb      	strb	r3, [r7, #23]
 80195f4:	e031      	b.n	801965a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	6a1b      	ldr	r3, [r3, #32]
 80195fa:	330b      	adds	r3, #11
 80195fc:	781b      	ldrb	r3, [r3, #0]
 80195fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019602:	73bb      	strb	r3, [r7, #14]
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	7bba      	ldrb	r2, [r7, #14]
 8019608:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801960a:	7bfb      	ldrb	r3, [r7, #15]
 801960c:	2be5      	cmp	r3, #229	@ 0xe5
 801960e:	d011      	beq.n	8019634 <dir_read+0x7e>
 8019610:	7bfb      	ldrb	r3, [r7, #15]
 8019612:	2b2e      	cmp	r3, #46	@ 0x2e
 8019614:	d00e      	beq.n	8019634 <dir_read+0x7e>
 8019616:	7bbb      	ldrb	r3, [r7, #14]
 8019618:	2b0f      	cmp	r3, #15
 801961a:	d00b      	beq.n	8019634 <dir_read+0x7e>
 801961c:	7bbb      	ldrb	r3, [r7, #14]
 801961e:	f023 0320 	bic.w	r3, r3, #32
 8019622:	2b08      	cmp	r3, #8
 8019624:	bf0c      	ite	eq
 8019626:	2301      	moveq	r3, #1
 8019628:	2300      	movne	r3, #0
 801962a:	b2db      	uxtb	r3, r3
 801962c:	461a      	mov	r2, r3
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	4293      	cmp	r3, r2
 8019632:	d00f      	beq.n	8019654 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8019634:	2100      	movs	r1, #0
 8019636:	6878      	ldr	r0, [r7, #4]
 8019638:	f7ff fe72 	bl	8019320 <dir_next>
 801963c:	4603      	mov	r3, r0
 801963e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019640:	7dfb      	ldrb	r3, [r7, #23]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d108      	bne.n	8019658 <dir_read+0xa2>
	while (dp->sect) {
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	69db      	ldr	r3, [r3, #28]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d1be      	bne.n	80195cc <dir_read+0x16>
 801964e:	e004      	b.n	801965a <dir_read+0xa4>
		if (res != FR_OK) break;
 8019650:	bf00      	nop
 8019652:	e002      	b.n	801965a <dir_read+0xa4>
				break;
 8019654:	bf00      	nop
 8019656:	e000      	b.n	801965a <dir_read+0xa4>
		if (res != FR_OK) break;
 8019658:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801965a:	7dfb      	ldrb	r3, [r7, #23]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d002      	beq.n	8019666 <dir_read+0xb0>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2200      	movs	r2, #0
 8019664:	61da      	str	r2, [r3, #28]
	return res;
 8019666:	7dfb      	ldrb	r3, [r7, #23]
}
 8019668:	4618      	mov	r0, r3
 801966a:	3718      	adds	r7, #24
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b086      	sub	sp, #24
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801967e:	2100      	movs	r1, #0
 8019680:	6878      	ldr	r0, [r7, #4]
 8019682:	f7ff fdd2 	bl	801922a <dir_sdi>
 8019686:	4603      	mov	r3, r0
 8019688:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801968a:	7dfb      	ldrb	r3, [r7, #23]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d001      	beq.n	8019694 <dir_find+0x24>
 8019690:	7dfb      	ldrb	r3, [r7, #23]
 8019692:	e03e      	b.n	8019712 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	69db      	ldr	r3, [r3, #28]
 8019698:	4619      	mov	r1, r3
 801969a:	6938      	ldr	r0, [r7, #16]
 801969c:	f7ff fa48 	bl	8018b30 <move_window>
 80196a0:	4603      	mov	r3, r0
 80196a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80196a4:	7dfb      	ldrb	r3, [r7, #23]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d12f      	bne.n	801970a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	6a1b      	ldr	r3, [r3, #32]
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80196b2:	7bfb      	ldrb	r3, [r7, #15]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d102      	bne.n	80196be <dir_find+0x4e>
 80196b8:	2304      	movs	r3, #4
 80196ba:	75fb      	strb	r3, [r7, #23]
 80196bc:	e028      	b.n	8019710 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	6a1b      	ldr	r3, [r3, #32]
 80196c2:	330b      	adds	r3, #11
 80196c4:	781b      	ldrb	r3, [r3, #0]
 80196c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80196ca:	b2da      	uxtb	r2, r3
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	6a1b      	ldr	r3, [r3, #32]
 80196d4:	330b      	adds	r3, #11
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	f003 0308 	and.w	r3, r3, #8
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d10a      	bne.n	80196f6 <dir_find+0x86>
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6a18      	ldr	r0, [r3, #32]
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	3324      	adds	r3, #36	@ 0x24
 80196e8:	220b      	movs	r2, #11
 80196ea:	4619      	mov	r1, r3
 80196ec:	f7ff f82d 	bl	801874a <mem_cmp>
 80196f0:	4603      	mov	r3, r0
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d00b      	beq.n	801970e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80196f6:	2100      	movs	r1, #0
 80196f8:	6878      	ldr	r0, [r7, #4]
 80196fa:	f7ff fe11 	bl	8019320 <dir_next>
 80196fe:	4603      	mov	r3, r0
 8019700:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8019702:	7dfb      	ldrb	r3, [r7, #23]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d0c5      	beq.n	8019694 <dir_find+0x24>
 8019708:	e002      	b.n	8019710 <dir_find+0xa0>
		if (res != FR_OK) break;
 801970a:	bf00      	nop
 801970c:	e000      	b.n	8019710 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801970e:	bf00      	nop

	return res;
 8019710:	7dfb      	ldrb	r3, [r7, #23]
}
 8019712:	4618      	mov	r0, r3
 8019714:	3718      	adds	r7, #24
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}

0801971a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801971a:	b580      	push	{r7, lr}
 801971c:	b084      	sub	sp, #16
 801971e:	af00      	add	r7, sp, #0
 8019720:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8019728:	2101      	movs	r1, #1
 801972a:	6878      	ldr	r0, [r7, #4]
 801972c:	f7ff febd 	bl	80194aa <dir_alloc>
 8019730:	4603      	mov	r3, r0
 8019732:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8019734:	7bfb      	ldrb	r3, [r7, #15]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d11c      	bne.n	8019774 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	69db      	ldr	r3, [r3, #28]
 801973e:	4619      	mov	r1, r3
 8019740:	68b8      	ldr	r0, [r7, #8]
 8019742:	f7ff f9f5 	bl	8018b30 <move_window>
 8019746:	4603      	mov	r3, r0
 8019748:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801974a:	7bfb      	ldrb	r3, [r7, #15]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d111      	bne.n	8019774 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6a1b      	ldr	r3, [r3, #32]
 8019754:	2220      	movs	r2, #32
 8019756:	2100      	movs	r1, #0
 8019758:	4618      	mov	r0, r3
 801975a:	f7fe ffdb 	bl	8018714 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	6a18      	ldr	r0, [r3, #32]
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	3324      	adds	r3, #36	@ 0x24
 8019766:	220b      	movs	r2, #11
 8019768:	4619      	mov	r1, r3
 801976a:	f7fe ffb2 	bl	80186d2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801976e:	68bb      	ldr	r3, [r7, #8]
 8019770:	2201      	movs	r2, #1
 8019772:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8019774:	7bfb      	ldrb	r3, [r7, #15]
}
 8019776:	4618      	mov	r0, r3
 8019778:	3710      	adds	r7, #16
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}

0801977e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801977e:	b580      	push	{r7, lr}
 8019780:	b086      	sub	sp, #24
 8019782:	af00      	add	r7, sp, #0
 8019784:	6078      	str	r0, [r7, #4]
 8019786:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	2200      	movs	r2, #0
 801978c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	69db      	ldr	r3, [r3, #28]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d04f      	beq.n	8019836 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8019796:	2300      	movs	r3, #0
 8019798:	613b      	str	r3, [r7, #16]
 801979a:	693b      	ldr	r3, [r7, #16]
 801979c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801979e:	e022      	b.n	80197e6 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6a1a      	ldr	r2, [r3, #32]
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	1c59      	adds	r1, r3, #1
 80197a8:	6179      	str	r1, [r7, #20]
 80197aa:	4413      	add	r3, r2
 80197ac:	781b      	ldrb	r3, [r3, #0]
 80197ae:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80197b0:	7bfb      	ldrb	r3, [r7, #15]
 80197b2:	2b20      	cmp	r3, #32
 80197b4:	d016      	beq.n	80197e4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80197b6:	7bfb      	ldrb	r3, [r7, #15]
 80197b8:	2b05      	cmp	r3, #5
 80197ba:	d101      	bne.n	80197c0 <get_fileinfo+0x42>
 80197bc:	23e5      	movs	r3, #229	@ 0xe5
 80197be:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80197c0:	697b      	ldr	r3, [r7, #20]
 80197c2:	2b09      	cmp	r3, #9
 80197c4:	d106      	bne.n	80197d4 <get_fileinfo+0x56>
 80197c6:	693b      	ldr	r3, [r7, #16]
 80197c8:	1c5a      	adds	r2, r3, #1
 80197ca:	613a      	str	r2, [r7, #16]
 80197cc:	683a      	ldr	r2, [r7, #0]
 80197ce:	4413      	add	r3, r2
 80197d0:	222e      	movs	r2, #46	@ 0x2e
 80197d2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80197d4:	693b      	ldr	r3, [r7, #16]
 80197d6:	1c5a      	adds	r2, r3, #1
 80197d8:	613a      	str	r2, [r7, #16]
 80197da:	683a      	ldr	r2, [r7, #0]
 80197dc:	4413      	add	r3, r2
 80197de:	7bfa      	ldrb	r2, [r7, #15]
 80197e0:	725a      	strb	r2, [r3, #9]
 80197e2:	e000      	b.n	80197e6 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80197e4:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	2b0a      	cmp	r3, #10
 80197ea:	d9d9      	bls.n	80197a0 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80197ec:	683a      	ldr	r2, [r7, #0]
 80197ee:	693b      	ldr	r3, [r7, #16]
 80197f0:	4413      	add	r3, r2
 80197f2:	3309      	adds	r3, #9
 80197f4:	2200      	movs	r2, #0
 80197f6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	6a1b      	ldr	r3, [r3, #32]
 80197fc:	7ada      	ldrb	r2, [r3, #11]
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	6a1b      	ldr	r3, [r3, #32]
 8019806:	331c      	adds	r3, #28
 8019808:	4618      	mov	r0, r3
 801980a:	f7fe fef8 	bl	80185fe <ld_dword>
 801980e:	4602      	mov	r2, r0
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6a1b      	ldr	r3, [r3, #32]
 8019818:	3316      	adds	r3, #22
 801981a:	4618      	mov	r0, r3
 801981c:	f7fe feef 	bl	80185fe <ld_dword>
 8019820:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8019822:	68bb      	ldr	r3, [r7, #8]
 8019824:	b29a      	uxth	r2, r3
 8019826:	683b      	ldr	r3, [r7, #0]
 8019828:	80da      	strh	r2, [r3, #6]
 801982a:	68bb      	ldr	r3, [r7, #8]
 801982c:	0c1b      	lsrs	r3, r3, #16
 801982e:	b29a      	uxth	r2, r3
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	809a      	strh	r2, [r3, #4]
 8019834:	e000      	b.n	8019838 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8019836:	bf00      	nop
}
 8019838:	3718      	adds	r7, #24
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
	...

08019840 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b088      	sub	sp, #32
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
 8019848:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	60fb      	str	r3, [r7, #12]
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	3324      	adds	r3, #36	@ 0x24
 8019854:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8019856:	220b      	movs	r2, #11
 8019858:	2120      	movs	r1, #32
 801985a:	68b8      	ldr	r0, [r7, #8]
 801985c:	f7fe ff5a 	bl	8018714 <mem_set>
	si = i = 0; ni = 8;
 8019860:	2300      	movs	r3, #0
 8019862:	613b      	str	r3, [r7, #16]
 8019864:	693b      	ldr	r3, [r7, #16]
 8019866:	61fb      	str	r3, [r7, #28]
 8019868:	2308      	movs	r3, #8
 801986a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801986c:	69fb      	ldr	r3, [r7, #28]
 801986e:	1c5a      	adds	r2, r3, #1
 8019870:	61fa      	str	r2, [r7, #28]
 8019872:	68fa      	ldr	r2, [r7, #12]
 8019874:	4413      	add	r3, r2
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801987a:	7efb      	ldrb	r3, [r7, #27]
 801987c:	2b20      	cmp	r3, #32
 801987e:	d94e      	bls.n	801991e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8019880:	7efb      	ldrb	r3, [r7, #27]
 8019882:	2b2f      	cmp	r3, #47	@ 0x2f
 8019884:	d006      	beq.n	8019894 <create_name+0x54>
 8019886:	7efb      	ldrb	r3, [r7, #27]
 8019888:	2b5c      	cmp	r3, #92	@ 0x5c
 801988a:	d110      	bne.n	80198ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801988c:	e002      	b.n	8019894 <create_name+0x54>
 801988e:	69fb      	ldr	r3, [r7, #28]
 8019890:	3301      	adds	r3, #1
 8019892:	61fb      	str	r3, [r7, #28]
 8019894:	68fa      	ldr	r2, [r7, #12]
 8019896:	69fb      	ldr	r3, [r7, #28]
 8019898:	4413      	add	r3, r2
 801989a:	781b      	ldrb	r3, [r3, #0]
 801989c:	2b2f      	cmp	r3, #47	@ 0x2f
 801989e:	d0f6      	beq.n	801988e <create_name+0x4e>
 80198a0:	68fa      	ldr	r2, [r7, #12]
 80198a2:	69fb      	ldr	r3, [r7, #28]
 80198a4:	4413      	add	r3, r2
 80198a6:	781b      	ldrb	r3, [r3, #0]
 80198a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80198aa:	d0f0      	beq.n	801988e <create_name+0x4e>
			break;
 80198ac:	e038      	b.n	8019920 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80198ae:	7efb      	ldrb	r3, [r7, #27]
 80198b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80198b2:	d003      	beq.n	80198bc <create_name+0x7c>
 80198b4:	693a      	ldr	r2, [r7, #16]
 80198b6:	697b      	ldr	r3, [r7, #20]
 80198b8:	429a      	cmp	r2, r3
 80198ba:	d30c      	bcc.n	80198d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	2b0b      	cmp	r3, #11
 80198c0:	d002      	beq.n	80198c8 <create_name+0x88>
 80198c2:	7efb      	ldrb	r3, [r7, #27]
 80198c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80198c6:	d001      	beq.n	80198cc <create_name+0x8c>
 80198c8:	2306      	movs	r3, #6
 80198ca:	e044      	b.n	8019956 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80198cc:	2308      	movs	r3, #8
 80198ce:	613b      	str	r3, [r7, #16]
 80198d0:	230b      	movs	r3, #11
 80198d2:	617b      	str	r3, [r7, #20]
			continue;
 80198d4:	e022      	b.n	801991c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80198d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	da04      	bge.n	80198e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80198de:	7efb      	ldrb	r3, [r7, #27]
 80198e0:	3b80      	subs	r3, #128	@ 0x80
 80198e2:	4a1f      	ldr	r2, [pc, #124]	@ (8019960 <create_name+0x120>)
 80198e4:	5cd3      	ldrb	r3, [r2, r3]
 80198e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80198e8:	7efb      	ldrb	r3, [r7, #27]
 80198ea:	4619      	mov	r1, r3
 80198ec:	481d      	ldr	r0, [pc, #116]	@ (8019964 <create_name+0x124>)
 80198ee:	f7fe ff53 	bl	8018798 <chk_chr>
 80198f2:	4603      	mov	r3, r0
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d001      	beq.n	80198fc <create_name+0xbc>
 80198f8:	2306      	movs	r3, #6
 80198fa:	e02c      	b.n	8019956 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80198fc:	7efb      	ldrb	r3, [r7, #27]
 80198fe:	2b60      	cmp	r3, #96	@ 0x60
 8019900:	d905      	bls.n	801990e <create_name+0xce>
 8019902:	7efb      	ldrb	r3, [r7, #27]
 8019904:	2b7a      	cmp	r3, #122	@ 0x7a
 8019906:	d802      	bhi.n	801990e <create_name+0xce>
 8019908:	7efb      	ldrb	r3, [r7, #27]
 801990a:	3b20      	subs	r3, #32
 801990c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801990e:	693b      	ldr	r3, [r7, #16]
 8019910:	1c5a      	adds	r2, r3, #1
 8019912:	613a      	str	r2, [r7, #16]
 8019914:	68ba      	ldr	r2, [r7, #8]
 8019916:	4413      	add	r3, r2
 8019918:	7efa      	ldrb	r2, [r7, #27]
 801991a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801991c:	e7a6      	b.n	801986c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801991e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8019920:	68fa      	ldr	r2, [r7, #12]
 8019922:	69fb      	ldr	r3, [r7, #28]
 8019924:	441a      	add	r2, r3
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d101      	bne.n	8019934 <create_name+0xf4>
 8019930:	2306      	movs	r3, #6
 8019932:	e010      	b.n	8019956 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019934:	68bb      	ldr	r3, [r7, #8]
 8019936:	781b      	ldrb	r3, [r3, #0]
 8019938:	2be5      	cmp	r3, #229	@ 0xe5
 801993a:	d102      	bne.n	8019942 <create_name+0x102>
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	2205      	movs	r2, #5
 8019940:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8019942:	7efb      	ldrb	r3, [r7, #27]
 8019944:	2b20      	cmp	r3, #32
 8019946:	d801      	bhi.n	801994c <create_name+0x10c>
 8019948:	2204      	movs	r2, #4
 801994a:	e000      	b.n	801994e <create_name+0x10e>
 801994c:	2200      	movs	r2, #0
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	330b      	adds	r3, #11
 8019952:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8019954:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8019956:	4618      	mov	r0, r3
 8019958:	3720      	adds	r7, #32
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	0802fb10 	.word	0x0802fb10
 8019964:	0801cb18 	.word	0x0801cb18

08019968 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b086      	sub	sp, #24
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8019976:	693b      	ldr	r3, [r7, #16]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801997c:	e002      	b.n	8019984 <follow_path+0x1c>
 801997e:	683b      	ldr	r3, [r7, #0]
 8019980:	3301      	adds	r3, #1
 8019982:	603b      	str	r3, [r7, #0]
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	2b2f      	cmp	r3, #47	@ 0x2f
 801998a:	d0f8      	beq.n	801997e <follow_path+0x16>
 801998c:	683b      	ldr	r3, [r7, #0]
 801998e:	781b      	ldrb	r3, [r3, #0]
 8019990:	2b5c      	cmp	r3, #92	@ 0x5c
 8019992:	d0f4      	beq.n	801997e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	2200      	movs	r2, #0
 8019998:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	781b      	ldrb	r3, [r3, #0]
 801999e:	2b1f      	cmp	r3, #31
 80199a0:	d80a      	bhi.n	80199b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2280      	movs	r2, #128	@ 0x80
 80199a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80199aa:	2100      	movs	r1, #0
 80199ac:	6878      	ldr	r0, [r7, #4]
 80199ae:	f7ff fc3c 	bl	801922a <dir_sdi>
 80199b2:	4603      	mov	r3, r0
 80199b4:	75fb      	strb	r3, [r7, #23]
 80199b6:	e043      	b.n	8019a40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80199b8:	463b      	mov	r3, r7
 80199ba:	4619      	mov	r1, r3
 80199bc:	6878      	ldr	r0, [r7, #4]
 80199be:	f7ff ff3f 	bl	8019840 <create_name>
 80199c2:	4603      	mov	r3, r0
 80199c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80199c6:	7dfb      	ldrb	r3, [r7, #23]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d134      	bne.n	8019a36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80199cc:	6878      	ldr	r0, [r7, #4]
 80199ce:	f7ff fe4f 	bl	8019670 <dir_find>
 80199d2:	4603      	mov	r3, r0
 80199d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80199dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80199de:	7dfb      	ldrb	r3, [r7, #23]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d00a      	beq.n	80199fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80199e4:	7dfb      	ldrb	r3, [r7, #23]
 80199e6:	2b04      	cmp	r3, #4
 80199e8:	d127      	bne.n	8019a3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80199ea:	7afb      	ldrb	r3, [r7, #11]
 80199ec:	f003 0304 	and.w	r3, r3, #4
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d122      	bne.n	8019a3a <follow_path+0xd2>
 80199f4:	2305      	movs	r3, #5
 80199f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80199f8:	e01f      	b.n	8019a3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80199fa:	7afb      	ldrb	r3, [r7, #11]
 80199fc:	f003 0304 	and.w	r3, r3, #4
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d11c      	bne.n	8019a3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	799b      	ldrb	r3, [r3, #6]
 8019a08:	f003 0310 	and.w	r3, r3, #16
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d102      	bne.n	8019a16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019a10:	2305      	movs	r3, #5
 8019a12:	75fb      	strb	r3, [r7, #23]
 8019a14:	e014      	b.n	8019a40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	695b      	ldr	r3, [r3, #20]
 8019a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a24:	4413      	add	r3, r2
 8019a26:	4619      	mov	r1, r3
 8019a28:	68f8      	ldr	r0, [r7, #12]
 8019a2a:	f7ff fd85 	bl	8019538 <ld_clust>
 8019a2e:	4602      	mov	r2, r0
 8019a30:	693b      	ldr	r3, [r7, #16]
 8019a32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019a34:	e7c0      	b.n	80199b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8019a36:	bf00      	nop
 8019a38:	e002      	b.n	8019a40 <follow_path+0xd8>
				break;
 8019a3a:	bf00      	nop
 8019a3c:	e000      	b.n	8019a40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019a3e:	bf00      	nop
			}
		}
	}

	return res;
 8019a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8019a42:	4618      	mov	r0, r3
 8019a44:	3718      	adds	r7, #24
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}

08019a4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019a4a:	b480      	push	{r7}
 8019a4c:	b087      	sub	sp, #28
 8019a4e:	af00      	add	r7, sp, #0
 8019a50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8019a52:	f04f 33ff 	mov.w	r3, #4294967295
 8019a56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d031      	beq.n	8019ac4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	617b      	str	r3, [r7, #20]
 8019a66:	e002      	b.n	8019a6e <get_ldnumber+0x24>
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	3301      	adds	r3, #1
 8019a6c:	617b      	str	r3, [r7, #20]
 8019a6e:	697b      	ldr	r3, [r7, #20]
 8019a70:	781b      	ldrb	r3, [r3, #0]
 8019a72:	2b20      	cmp	r3, #32
 8019a74:	d903      	bls.n	8019a7e <get_ldnumber+0x34>
 8019a76:	697b      	ldr	r3, [r7, #20]
 8019a78:	781b      	ldrb	r3, [r3, #0]
 8019a7a:	2b3a      	cmp	r3, #58	@ 0x3a
 8019a7c:	d1f4      	bne.n	8019a68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019a7e:	697b      	ldr	r3, [r7, #20]
 8019a80:	781b      	ldrb	r3, [r3, #0]
 8019a82:	2b3a      	cmp	r3, #58	@ 0x3a
 8019a84:	d11c      	bne.n	8019ac0 <get_ldnumber+0x76>
			tp = *path;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	1c5a      	adds	r2, r3, #1
 8019a90:	60fa      	str	r2, [r7, #12]
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	3b30      	subs	r3, #48	@ 0x30
 8019a96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	2b09      	cmp	r3, #9
 8019a9c:	d80e      	bhi.n	8019abc <get_ldnumber+0x72>
 8019a9e:	68fa      	ldr	r2, [r7, #12]
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d10a      	bne.n	8019abc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d107      	bne.n	8019abc <get_ldnumber+0x72>
					vol = (int)i;
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	3301      	adds	r3, #1
 8019ab4:	617b      	str	r3, [r7, #20]
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	697a      	ldr	r2, [r7, #20]
 8019aba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	e002      	b.n	8019ac6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019ac4:	693b      	ldr	r3, [r7, #16]
}
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	371c      	adds	r7, #28
 8019aca:	46bd      	mov	sp, r7
 8019acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad0:	4770      	bx	lr
	...

08019ad4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	70da      	strb	r2, [r3, #3]
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8019aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019aec:	6839      	ldr	r1, [r7, #0]
 8019aee:	6878      	ldr	r0, [r7, #4]
 8019af0:	f7ff f81e 	bl	8018b30 <move_window>
 8019af4:	4603      	mov	r3, r0
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d001      	beq.n	8019afe <check_fs+0x2a>
 8019afa:	2304      	movs	r3, #4
 8019afc:	e038      	b.n	8019b70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	3330      	adds	r3, #48	@ 0x30
 8019b02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019b06:	4618      	mov	r0, r3
 8019b08:	f7fe fd60 	bl	80185cc <ld_word>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	461a      	mov	r2, r3
 8019b10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019b14:	429a      	cmp	r2, r3
 8019b16:	d001      	beq.n	8019b1c <check_fs+0x48>
 8019b18:	2303      	movs	r3, #3
 8019b1a:	e029      	b.n	8019b70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019b22:	2be9      	cmp	r3, #233	@ 0xe9
 8019b24:	d009      	beq.n	8019b3a <check_fs+0x66>
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019b2c:	2beb      	cmp	r3, #235	@ 0xeb
 8019b2e:	d11e      	bne.n	8019b6e <check_fs+0x9a>
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019b36:	2b90      	cmp	r3, #144	@ 0x90
 8019b38:	d119      	bne.n	8019b6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	3330      	adds	r3, #48	@ 0x30
 8019b3e:	3336      	adds	r3, #54	@ 0x36
 8019b40:	4618      	mov	r0, r3
 8019b42:	f7fe fd5c 	bl	80185fe <ld_dword>
 8019b46:	4603      	mov	r3, r0
 8019b48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8019b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8019b78 <check_fs+0xa4>)
 8019b4e:	4293      	cmp	r3, r2
 8019b50:	d101      	bne.n	8019b56 <check_fs+0x82>
 8019b52:	2300      	movs	r3, #0
 8019b54:	e00c      	b.n	8019b70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	3330      	adds	r3, #48	@ 0x30
 8019b5a:	3352      	adds	r3, #82	@ 0x52
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7fe fd4e 	bl	80185fe <ld_dword>
 8019b62:	4603      	mov	r3, r0
 8019b64:	4a05      	ldr	r2, [pc, #20]	@ (8019b7c <check_fs+0xa8>)
 8019b66:	4293      	cmp	r3, r2
 8019b68:	d101      	bne.n	8019b6e <check_fs+0x9a>
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	e000      	b.n	8019b70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8019b6e:	2302      	movs	r3, #2
}
 8019b70:	4618      	mov	r0, r3
 8019b72:	3708      	adds	r7, #8
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}
 8019b78:	00544146 	.word	0x00544146
 8019b7c:	33544146 	.word	0x33544146

08019b80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b096      	sub	sp, #88	@ 0x58
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	60f8      	str	r0, [r7, #12]
 8019b88:	60b9      	str	r1, [r7, #8]
 8019b8a:	4613      	mov	r3, r2
 8019b8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	2200      	movs	r2, #0
 8019b92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019b94:	68f8      	ldr	r0, [r7, #12]
 8019b96:	f7ff ff58 	bl	8019a4a <get_ldnumber>
 8019b9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	da01      	bge.n	8019ba6 <find_volume+0x26>
 8019ba2:	230b      	movs	r3, #11
 8019ba4:	e22d      	b.n	801a002 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019ba6:	4aa1      	ldr	r2, [pc, #644]	@ (8019e2c <find_volume+0x2ac>)
 8019ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019bae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d101      	bne.n	8019bba <find_volume+0x3a>
 8019bb6:	230c      	movs	r3, #12
 8019bb8:	e223      	b.n	801a002 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019bbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019bc0:	79fb      	ldrb	r3, [r7, #7]
 8019bc2:	f023 0301 	bic.w	r3, r3, #1
 8019bc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d01a      	beq.n	8019c06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bd2:	785b      	ldrb	r3, [r3, #1]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f7fe fc59 	bl	801848c <disk_status>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019be0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019be4:	f003 0301 	and.w	r3, r3, #1
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d10c      	bne.n	8019c06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019bec:	79fb      	ldrb	r3, [r7, #7]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d007      	beq.n	8019c02 <find_volume+0x82>
 8019bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019bf6:	f003 0304 	and.w	r3, r3, #4
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d001      	beq.n	8019c02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019bfe:	230a      	movs	r3, #10
 8019c00:	e1ff      	b.n	801a002 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8019c02:	2300      	movs	r3, #0
 8019c04:	e1fd      	b.n	801a002 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8019c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c08:	2200      	movs	r2, #0
 8019c0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c0e:	b2da      	uxtb	r2, r3
 8019c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c16:	785b      	ldrb	r3, [r3, #1]
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f7fe fc51 	bl	80184c0 <disk_initialize>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019c24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019c28:	f003 0301 	and.w	r3, r3, #1
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d001      	beq.n	8019c34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019c30:	2303      	movs	r3, #3
 8019c32:	e1e6      	b.n	801a002 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019c34:	79fb      	ldrb	r3, [r7, #7]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d007      	beq.n	8019c4a <find_volume+0xca>
 8019c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019c3e:	f003 0304 	and.w	r3, r3, #4
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d001      	beq.n	8019c4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8019c46:	230a      	movs	r3, #10
 8019c48:	e1db      	b.n	801a002 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8019c4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019c50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019c52:	f7ff ff3f 	bl	8019ad4 <check_fs>
 8019c56:	4603      	mov	r3, r0
 8019c58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019c60:	2b02      	cmp	r3, #2
 8019c62:	d149      	bne.n	8019cf8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019c64:	2300      	movs	r3, #0
 8019c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c68:	e01e      	b.n	8019ca8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c72:	011b      	lsls	r3, r3, #4
 8019c74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8019c78:	4413      	add	r3, r2
 8019c7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c7e:	3304      	adds	r3, #4
 8019c80:	781b      	ldrb	r3, [r3, #0]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d006      	beq.n	8019c94 <find_volume+0x114>
 8019c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c88:	3308      	adds	r3, #8
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fe fcb7 	bl	80185fe <ld_dword>
 8019c90:	4602      	mov	r2, r0
 8019c92:	e000      	b.n	8019c96 <find_volume+0x116>
 8019c94:	2200      	movs	r2, #0
 8019c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c98:	009b      	lsls	r3, r3, #2
 8019c9a:	3358      	adds	r3, #88	@ 0x58
 8019c9c:	443b      	add	r3, r7
 8019c9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ca4:	3301      	adds	r3, #1
 8019ca6:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019caa:	2b03      	cmp	r3, #3
 8019cac:	d9dd      	bls.n	8019c6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019cae:	2300      	movs	r3, #0
 8019cb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8019cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d002      	beq.n	8019cbe <find_volume+0x13e>
 8019cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cba:	3b01      	subs	r3, #1
 8019cbc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8019cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cc0:	009b      	lsls	r3, r3, #2
 8019cc2:	3358      	adds	r3, #88	@ 0x58
 8019cc4:	443b      	add	r3, r7
 8019cc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019cca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d005      	beq.n	8019cde <find_volume+0x15e>
 8019cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019cd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019cd6:	f7ff fefd 	bl	8019ad4 <check_fs>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	e000      	b.n	8019ce0 <find_volume+0x160>
 8019cde:	2303      	movs	r3, #3
 8019ce0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019ce8:	2b01      	cmp	r3, #1
 8019cea:	d905      	bls.n	8019cf8 <find_volume+0x178>
 8019cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cee:	3301      	adds	r3, #1
 8019cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8019cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cf4:	2b03      	cmp	r3, #3
 8019cf6:	d9e2      	bls.n	8019cbe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019cfc:	2b04      	cmp	r3, #4
 8019cfe:	d101      	bne.n	8019d04 <find_volume+0x184>
 8019d00:	2301      	movs	r3, #1
 8019d02:	e17e      	b.n	801a002 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019d04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019d08:	2b01      	cmp	r3, #1
 8019d0a:	d901      	bls.n	8019d10 <find_volume+0x190>
 8019d0c:	230d      	movs	r3, #13
 8019d0e:	e178      	b.n	801a002 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8019d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d12:	3330      	adds	r3, #48	@ 0x30
 8019d14:	330b      	adds	r3, #11
 8019d16:	4618      	mov	r0, r3
 8019d18:	f7fe fc58 	bl	80185cc <ld_word>
 8019d1c:	4603      	mov	r3, r0
 8019d1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019d22:	d001      	beq.n	8019d28 <find_volume+0x1a8>
 8019d24:	230d      	movs	r3, #13
 8019d26:	e16c      	b.n	801a002 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d2a:	3330      	adds	r3, #48	@ 0x30
 8019d2c:	3316      	adds	r3, #22
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7fe fc4c 	bl	80185cc <ld_word>
 8019d34:	4603      	mov	r3, r0
 8019d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d106      	bne.n	8019d4c <find_volume+0x1cc>
 8019d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d40:	3330      	adds	r3, #48	@ 0x30
 8019d42:	3324      	adds	r3, #36	@ 0x24
 8019d44:	4618      	mov	r0, r3
 8019d46:	f7fe fc5a 	bl	80185fe <ld_dword>
 8019d4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8019d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019d50:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d54:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8019d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d5e:	789b      	ldrb	r3, [r3, #2]
 8019d60:	2b01      	cmp	r3, #1
 8019d62:	d005      	beq.n	8019d70 <find_volume+0x1f0>
 8019d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d66:	789b      	ldrb	r3, [r3, #2]
 8019d68:	2b02      	cmp	r3, #2
 8019d6a:	d001      	beq.n	8019d70 <find_volume+0x1f0>
 8019d6c:	230d      	movs	r3, #13
 8019d6e:	e148      	b.n	801a002 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d72:	789b      	ldrb	r3, [r3, #2]
 8019d74:	461a      	mov	r2, r3
 8019d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d78:	fb02 f303 	mul.w	r3, r2, r3
 8019d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019d84:	461a      	mov	r2, r3
 8019d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d8c:	895b      	ldrh	r3, [r3, #10]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d008      	beq.n	8019da4 <find_volume+0x224>
 8019d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d94:	895b      	ldrh	r3, [r3, #10]
 8019d96:	461a      	mov	r2, r3
 8019d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d9a:	895b      	ldrh	r3, [r3, #10]
 8019d9c:	3b01      	subs	r3, #1
 8019d9e:	4013      	ands	r3, r2
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d001      	beq.n	8019da8 <find_volume+0x228>
 8019da4:	230d      	movs	r3, #13
 8019da6:	e12c      	b.n	801a002 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019daa:	3330      	adds	r3, #48	@ 0x30
 8019dac:	3311      	adds	r3, #17
 8019dae:	4618      	mov	r0, r3
 8019db0:	f7fe fc0c 	bl	80185cc <ld_word>
 8019db4:	4603      	mov	r3, r0
 8019db6:	461a      	mov	r2, r3
 8019db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dbe:	891b      	ldrh	r3, [r3, #8]
 8019dc0:	f003 030f 	and.w	r3, r3, #15
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d001      	beq.n	8019dce <find_volume+0x24e>
 8019dca:	230d      	movs	r3, #13
 8019dcc:	e119      	b.n	801a002 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dd0:	3330      	adds	r3, #48	@ 0x30
 8019dd2:	3313      	adds	r3, #19
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7fe fbf9 	bl	80185cc <ld_word>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d106      	bne.n	8019df2 <find_volume+0x272>
 8019de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019de6:	3330      	adds	r3, #48	@ 0x30
 8019de8:	3320      	adds	r3, #32
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7fe fc07 	bl	80185fe <ld_dword>
 8019df0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019df4:	3330      	adds	r3, #48	@ 0x30
 8019df6:	330e      	adds	r3, #14
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7fe fbe7 	bl	80185cc <ld_word>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019e02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d101      	bne.n	8019e0c <find_volume+0x28c>
 8019e08:	230d      	movs	r3, #13
 8019e0a:	e0fa      	b.n	801a002 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8019e0c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019e10:	4413      	add	r3, r2
 8019e12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019e14:	8912      	ldrh	r2, [r2, #8]
 8019e16:	0912      	lsrs	r2, r2, #4
 8019e18:	b292      	uxth	r2, r2
 8019e1a:	4413      	add	r3, r2
 8019e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8019e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d204      	bcs.n	8019e30 <find_volume+0x2b0>
 8019e26:	230d      	movs	r3, #13
 8019e28:	e0eb      	b.n	801a002 <find_volume+0x482>
 8019e2a:	bf00      	nop
 8019e2c:	240084b8 	.word	0x240084b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e34:	1ad3      	subs	r3, r2, r3
 8019e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019e38:	8952      	ldrh	r2, [r2, #10]
 8019e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e3e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d101      	bne.n	8019e4a <find_volume+0x2ca>
 8019e46:	230d      	movs	r3, #13
 8019e48:	e0db      	b.n	801a002 <find_volume+0x482>
		fmt = FS_FAT32;
 8019e4a:	2303      	movs	r3, #3
 8019e4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e52:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019e56:	4293      	cmp	r3, r2
 8019e58:	d802      	bhi.n	8019e60 <find_volume+0x2e0>
 8019e5a:	2302      	movs	r3, #2
 8019e5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e62:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019e66:	4293      	cmp	r3, r2
 8019e68:	d802      	bhi.n	8019e70 <find_volume+0x2f0>
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e72:	1c9a      	adds	r2, r3, #2
 8019e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e76:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8019e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019e7c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019e7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e82:	441a      	add	r2, r3
 8019e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e86:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8019e88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e8c:	441a      	add	r2, r3
 8019e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e90:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8019e92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019e96:	2b03      	cmp	r3, #3
 8019e98:	d11e      	bne.n	8019ed8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e9c:	3330      	adds	r3, #48	@ 0x30
 8019e9e:	332a      	adds	r3, #42	@ 0x2a
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f7fe fb93 	bl	80185cc <ld_word>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d001      	beq.n	8019eb0 <find_volume+0x330>
 8019eac:	230d      	movs	r3, #13
 8019eae:	e0a8      	b.n	801a002 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eb2:	891b      	ldrh	r3, [r3, #8]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d001      	beq.n	8019ebc <find_volume+0x33c>
 8019eb8:	230d      	movs	r3, #13
 8019eba:	e0a2      	b.n	801a002 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ebe:	3330      	adds	r3, #48	@ 0x30
 8019ec0:	332c      	adds	r3, #44	@ 0x2c
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f7fe fb9b 	bl	80185fe <ld_dword>
 8019ec8:	4602      	mov	r2, r0
 8019eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ecc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ed0:	695b      	ldr	r3, [r3, #20]
 8019ed2:	009b      	lsls	r3, r3, #2
 8019ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8019ed6:	e01f      	b.n	8019f18 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eda:	891b      	ldrh	r3, [r3, #8]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d101      	bne.n	8019ee4 <find_volume+0x364>
 8019ee0:	230d      	movs	r3, #13
 8019ee2:	e08e      	b.n	801a002 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ee6:	6a1a      	ldr	r2, [r3, #32]
 8019ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019eea:	441a      	add	r2, r3
 8019eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019ef4:	2b02      	cmp	r3, #2
 8019ef6:	d103      	bne.n	8019f00 <find_volume+0x380>
 8019ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019efa:	695b      	ldr	r3, [r3, #20]
 8019efc:	005b      	lsls	r3, r3, #1
 8019efe:	e00a      	b.n	8019f16 <find_volume+0x396>
 8019f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f02:	695a      	ldr	r2, [r3, #20]
 8019f04:	4613      	mov	r3, r2
 8019f06:	005b      	lsls	r3, r3, #1
 8019f08:	4413      	add	r3, r2
 8019f0a:	085a      	lsrs	r2, r3, #1
 8019f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f0e:	695b      	ldr	r3, [r3, #20]
 8019f10:	f003 0301 	and.w	r3, r3, #1
 8019f14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019f16:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f1a:	699a      	ldr	r2, [r3, #24]
 8019f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f1e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8019f22:	0a5b      	lsrs	r3, r3, #9
 8019f24:	429a      	cmp	r2, r3
 8019f26:	d201      	bcs.n	8019f2c <find_volume+0x3ac>
 8019f28:	230d      	movs	r3, #13
 8019f2a:	e06a      	b.n	801a002 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8019f32:	611a      	str	r2, [r3, #16]
 8019f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f36:	691a      	ldr	r2, [r3, #16]
 8019f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f3a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8019f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f3e:	2280      	movs	r2, #128	@ 0x80
 8019f40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019f42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019f46:	2b03      	cmp	r3, #3
 8019f48:	d149      	bne.n	8019fde <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f4c:	3330      	adds	r3, #48	@ 0x30
 8019f4e:	3330      	adds	r3, #48	@ 0x30
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7fe fb3b 	bl	80185cc <ld_word>
 8019f56:	4603      	mov	r3, r0
 8019f58:	2b01      	cmp	r3, #1
 8019f5a:	d140      	bne.n	8019fde <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f5e:	3301      	adds	r3, #1
 8019f60:	4619      	mov	r1, r3
 8019f62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019f64:	f7fe fde4 	bl	8018b30 <move_window>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d137      	bne.n	8019fde <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8019f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f70:	2200      	movs	r2, #0
 8019f72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f76:	3330      	adds	r3, #48	@ 0x30
 8019f78:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f7fe fb25 	bl	80185cc <ld_word>
 8019f82:	4603      	mov	r3, r0
 8019f84:	461a      	mov	r2, r3
 8019f86:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019f8a:	429a      	cmp	r2, r3
 8019f8c:	d127      	bne.n	8019fde <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f90:	3330      	adds	r3, #48	@ 0x30
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7fe fb33 	bl	80185fe <ld_dword>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	4a1c      	ldr	r2, [pc, #112]	@ (801a00c <find_volume+0x48c>)
 8019f9c:	4293      	cmp	r3, r2
 8019f9e:	d11e      	bne.n	8019fde <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fa2:	3330      	adds	r3, #48	@ 0x30
 8019fa4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7fe fb28 	bl	80185fe <ld_dword>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	4a17      	ldr	r2, [pc, #92]	@ (801a010 <find_volume+0x490>)
 8019fb2:	4293      	cmp	r3, r2
 8019fb4:	d113      	bne.n	8019fde <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fb8:	3330      	adds	r3, #48	@ 0x30
 8019fba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7fe fb1d 	bl	80185fe <ld_dword>
 8019fc4:	4602      	mov	r2, r0
 8019fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fc8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fcc:	3330      	adds	r3, #48	@ 0x30
 8019fce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	f7fe fb13 	bl	80185fe <ld_dword>
 8019fd8:	4602      	mov	r2, r0
 8019fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fdc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fe0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019fe4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019fe6:	4b0b      	ldr	r3, [pc, #44]	@ (801a014 <find_volume+0x494>)
 8019fe8:	881b      	ldrh	r3, [r3, #0]
 8019fea:	3301      	adds	r3, #1
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	4b09      	ldr	r3, [pc, #36]	@ (801a014 <find_volume+0x494>)
 8019ff0:	801a      	strh	r2, [r3, #0]
 8019ff2:	4b08      	ldr	r3, [pc, #32]	@ (801a014 <find_volume+0x494>)
 8019ff4:	881a      	ldrh	r2, [r3, #0]
 8019ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ff8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019ffa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019ffc:	f7fe fd30 	bl	8018a60 <clear_lock>
#endif
	return FR_OK;
 801a000:	2300      	movs	r3, #0
}
 801a002:	4618      	mov	r0, r3
 801a004:	3758      	adds	r7, #88	@ 0x58
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}
 801a00a:	bf00      	nop
 801a00c:	41615252 	.word	0x41615252
 801a010:	61417272 	.word	0x61417272
 801a014:	240084bc 	.word	0x240084bc

0801a018 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	b084      	sub	sp, #16
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
 801a020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801a022:	2309      	movs	r3, #9
 801a024:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d01c      	beq.n	801a066 <validate+0x4e>
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d018      	beq.n	801a066 <validate+0x4e>
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	781b      	ldrb	r3, [r3, #0]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d013      	beq.n	801a066 <validate+0x4e>
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	889a      	ldrh	r2, [r3, #4]
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	88db      	ldrh	r3, [r3, #6]
 801a048:	429a      	cmp	r2, r3
 801a04a:	d10c      	bne.n	801a066 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	785b      	ldrb	r3, [r3, #1]
 801a052:	4618      	mov	r0, r3
 801a054:	f7fe fa1a 	bl	801848c <disk_status>
 801a058:	4603      	mov	r3, r0
 801a05a:	f003 0301 	and.w	r3, r3, #1
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d101      	bne.n	801a066 <validate+0x4e>
			res = FR_OK;
 801a062:	2300      	movs	r3, #0
 801a064:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801a066:	7bfb      	ldrb	r3, [r7, #15]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d102      	bne.n	801a072 <validate+0x5a>
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	e000      	b.n	801a074 <validate+0x5c>
 801a072:	2300      	movs	r3, #0
 801a074:	683a      	ldr	r2, [r7, #0]
 801a076:	6013      	str	r3, [r2, #0]
	return res;
 801a078:	7bfb      	ldrb	r3, [r7, #15]
}
 801a07a:	4618      	mov	r0, r3
 801a07c:	3710      	adds	r7, #16
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
	...

0801a084 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b088      	sub	sp, #32
 801a088:	af00      	add	r7, sp, #0
 801a08a:	60f8      	str	r0, [r7, #12]
 801a08c:	60b9      	str	r1, [r7, #8]
 801a08e:	4613      	mov	r3, r2
 801a090:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801a096:	f107 0310 	add.w	r3, r7, #16
 801a09a:	4618      	mov	r0, r3
 801a09c:	f7ff fcd5 	bl	8019a4a <get_ldnumber>
 801a0a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801a0a2:	69fb      	ldr	r3, [r7, #28]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	da01      	bge.n	801a0ac <f_mount+0x28>
 801a0a8:	230b      	movs	r3, #11
 801a0aa:	e02b      	b.n	801a104 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801a0ac:	4a17      	ldr	r2, [pc, #92]	@ (801a10c <f_mount+0x88>)
 801a0ae:	69fb      	ldr	r3, [r7, #28]
 801a0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a0b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801a0b6:	69bb      	ldr	r3, [r7, #24]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d005      	beq.n	801a0c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801a0bc:	69b8      	ldr	r0, [r7, #24]
 801a0be:	f7fe fccf 	bl	8018a60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801a0c2:	69bb      	ldr	r3, [r7, #24]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d002      	beq.n	801a0d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801a0d4:	68fa      	ldr	r2, [r7, #12]
 801a0d6:	490d      	ldr	r1, [pc, #52]	@ (801a10c <f_mount+0x88>)
 801a0d8:	69fb      	ldr	r3, [r7, #28]
 801a0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d002      	beq.n	801a0ea <f_mount+0x66>
 801a0e4:	79fb      	ldrb	r3, [r7, #7]
 801a0e6:	2b01      	cmp	r3, #1
 801a0e8:	d001      	beq.n	801a0ee <f_mount+0x6a>
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	e00a      	b.n	801a104 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801a0ee:	f107 010c 	add.w	r1, r7, #12
 801a0f2:	f107 0308 	add.w	r3, r7, #8
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7ff fd41 	bl	8019b80 <find_volume>
 801a0fe:	4603      	mov	r3, r0
 801a100:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801a102:	7dfb      	ldrb	r3, [r7, #23]
}
 801a104:	4618      	mov	r0, r3
 801a106:	3720      	adds	r7, #32
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}
 801a10c:	240084b8 	.word	0x240084b8

0801a110 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b098      	sub	sp, #96	@ 0x60
 801a114:	af00      	add	r7, sp, #0
 801a116:	60f8      	str	r0, [r7, #12]
 801a118:	60b9      	str	r1, [r7, #8]
 801a11a:	4613      	mov	r3, r2
 801a11c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d101      	bne.n	801a128 <f_open+0x18>
 801a124:	2309      	movs	r3, #9
 801a126:	e1a9      	b.n	801a47c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801a128:	79fb      	ldrb	r3, [r7, #7]
 801a12a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a12e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801a130:	79fa      	ldrb	r2, [r7, #7]
 801a132:	f107 0110 	add.w	r1, r7, #16
 801a136:	f107 0308 	add.w	r3, r7, #8
 801a13a:	4618      	mov	r0, r3
 801a13c:	f7ff fd20 	bl	8019b80 <find_volume>
 801a140:	4603      	mov	r3, r0
 801a142:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801a146:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	f040 818d 	bne.w	801a46a <f_open+0x35a>
		dj.obj.fs = fs;
 801a150:	693b      	ldr	r3, [r7, #16]
 801a152:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801a154:	68ba      	ldr	r2, [r7, #8]
 801a156:	f107 0314 	add.w	r3, r7, #20
 801a15a:	4611      	mov	r1, r2
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7ff fc03 	bl	8019968 <follow_path>
 801a162:	4603      	mov	r3, r0
 801a164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801a168:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d118      	bne.n	801a1a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801a170:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a174:	b25b      	sxtb	r3, r3
 801a176:	2b00      	cmp	r3, #0
 801a178:	da03      	bge.n	801a182 <f_open+0x72>
				res = FR_INVALID_NAME;
 801a17a:	2306      	movs	r3, #6
 801a17c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a180:	e00f      	b.n	801a1a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a182:	79fb      	ldrb	r3, [r7, #7]
 801a184:	2b01      	cmp	r3, #1
 801a186:	bf8c      	ite	hi
 801a188:	2301      	movhi	r3, #1
 801a18a:	2300      	movls	r3, #0
 801a18c:	b2db      	uxtb	r3, r3
 801a18e:	461a      	mov	r2, r3
 801a190:	f107 0314 	add.w	r3, r7, #20
 801a194:	4611      	mov	r1, r2
 801a196:	4618      	mov	r0, r3
 801a198:	f7fe fb1a 	bl	80187d0 <chk_lock>
 801a19c:	4603      	mov	r3, r0
 801a19e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a1a2:	79fb      	ldrb	r3, [r7, #7]
 801a1a4:	f003 031c 	and.w	r3, r3, #28
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d07f      	beq.n	801a2ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801a1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d017      	beq.n	801a1e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801a1b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a1b8:	2b04      	cmp	r3, #4
 801a1ba:	d10e      	bne.n	801a1da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801a1bc:	f7fe fb64 	bl	8018888 <enq_lock>
 801a1c0:	4603      	mov	r3, r0
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d006      	beq.n	801a1d4 <f_open+0xc4>
 801a1c6:	f107 0314 	add.w	r3, r7, #20
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7ff faa5 	bl	801971a <dir_register>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	e000      	b.n	801a1d6 <f_open+0xc6>
 801a1d4:	2312      	movs	r3, #18
 801a1d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801a1da:	79fb      	ldrb	r3, [r7, #7]
 801a1dc:	f043 0308 	orr.w	r3, r3, #8
 801a1e0:	71fb      	strb	r3, [r7, #7]
 801a1e2:	e010      	b.n	801a206 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801a1e4:	7ebb      	ldrb	r3, [r7, #26]
 801a1e6:	f003 0311 	and.w	r3, r3, #17
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d003      	beq.n	801a1f6 <f_open+0xe6>
					res = FR_DENIED;
 801a1ee:	2307      	movs	r3, #7
 801a1f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a1f4:	e007      	b.n	801a206 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801a1f6:	79fb      	ldrb	r3, [r7, #7]
 801a1f8:	f003 0304 	and.w	r3, r3, #4
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d002      	beq.n	801a206 <f_open+0xf6>
 801a200:	2308      	movs	r3, #8
 801a202:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801a206:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d168      	bne.n	801a2e0 <f_open+0x1d0>
 801a20e:	79fb      	ldrb	r3, [r7, #7]
 801a210:	f003 0308 	and.w	r3, r3, #8
 801a214:	2b00      	cmp	r3, #0
 801a216:	d063      	beq.n	801a2e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 801a218:	f7f7 ffdc 	bl	80121d4 <get_fattime>
 801a21c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801a21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a220:	330e      	adds	r3, #14
 801a222:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a224:	4618      	mov	r0, r3
 801a226:	f7fe fa28 	bl	801867a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a22c:	3316      	adds	r3, #22
 801a22e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a230:	4618      	mov	r0, r3
 801a232:	f7fe fa22 	bl	801867a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801a236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a238:	330b      	adds	r3, #11
 801a23a:	2220      	movs	r2, #32
 801a23c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801a23e:	693b      	ldr	r3, [r7, #16]
 801a240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a242:	4611      	mov	r1, r2
 801a244:	4618      	mov	r0, r3
 801a246:	f7ff f977 	bl	8019538 <ld_clust>
 801a24a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801a24c:	693b      	ldr	r3, [r7, #16]
 801a24e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a250:	2200      	movs	r2, #0
 801a252:	4618      	mov	r0, r3
 801a254:	f7ff f98f 	bl	8019576 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801a258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a25a:	331c      	adds	r3, #28
 801a25c:	2100      	movs	r1, #0
 801a25e:	4618      	mov	r0, r3
 801a260:	f7fe fa0b 	bl	801867a <st_dword>
					fs->wflag = 1;
 801a264:	693b      	ldr	r3, [r7, #16]
 801a266:	2201      	movs	r2, #1
 801a268:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801a26a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d037      	beq.n	801a2e0 <f_open+0x1d0>
						dw = fs->winsect;
 801a270:	693b      	ldr	r3, [r7, #16]
 801a272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a274:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801a276:	f107 0314 	add.w	r3, r7, #20
 801a27a:	2200      	movs	r2, #0
 801a27c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801a27e:	4618      	mov	r0, r3
 801a280:	f7fe fea2 	bl	8018fc8 <remove_chain>
 801a284:	4603      	mov	r3, r0
 801a286:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801a28a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d126      	bne.n	801a2e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 801a292:	693b      	ldr	r3, [r7, #16]
 801a294:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a296:	4618      	mov	r0, r3
 801a298:	f7fe fc4a 	bl	8018b30 <move_window>
 801a29c:	4603      	mov	r3, r0
 801a29e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801a2a2:	693b      	ldr	r3, [r7, #16]
 801a2a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a2a6:	3a01      	subs	r2, #1
 801a2a8:	60da      	str	r2, [r3, #12]
 801a2aa:	e019      	b.n	801a2e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801a2ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d115      	bne.n	801a2e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801a2b4:	7ebb      	ldrb	r3, [r7, #26]
 801a2b6:	f003 0310 	and.w	r3, r3, #16
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d003      	beq.n	801a2c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801a2be:	2304      	movs	r3, #4
 801a2c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a2c4:	e00c      	b.n	801a2e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801a2c6:	79fb      	ldrb	r3, [r7, #7]
 801a2c8:	f003 0302 	and.w	r3, r3, #2
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d007      	beq.n	801a2e0 <f_open+0x1d0>
 801a2d0:	7ebb      	ldrb	r3, [r7, #26]
 801a2d2:	f003 0301 	and.w	r3, r3, #1
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d002      	beq.n	801a2e0 <f_open+0x1d0>
						res = FR_DENIED;
 801a2da:	2307      	movs	r3, #7
 801a2dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801a2e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d126      	bne.n	801a336 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801a2e8:	79fb      	ldrb	r3, [r7, #7]
 801a2ea:	f003 0308 	and.w	r3, r3, #8
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d003      	beq.n	801a2fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801a2f2:	79fb      	ldrb	r3, [r7, #7]
 801a2f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a2f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801a302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a308:	79fb      	ldrb	r3, [r7, #7]
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	bf8c      	ite	hi
 801a30e:	2301      	movhi	r3, #1
 801a310:	2300      	movls	r3, #0
 801a312:	b2db      	uxtb	r3, r3
 801a314:	461a      	mov	r2, r3
 801a316:	f107 0314 	add.w	r3, r7, #20
 801a31a:	4611      	mov	r1, r2
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7fe fad5 	bl	80188cc <inc_lock>
 801a322:	4602      	mov	r2, r0
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	691b      	ldr	r3, [r3, #16]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d102      	bne.n	801a336 <f_open+0x226>
 801a330:	2302      	movs	r3, #2
 801a332:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801a336:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	f040 8095 	bne.w	801a46a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a344:	4611      	mov	r1, r2
 801a346:	4618      	mov	r0, r3
 801a348:	f7ff f8f6 	bl	8019538 <ld_clust>
 801a34c:	4602      	mov	r2, r0
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801a352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a354:	331c      	adds	r3, #28
 801a356:	4618      	mov	r0, r3
 801a358:	f7fe f951 	bl	80185fe <ld_dword>
 801a35c:	4602      	mov	r2, r0
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	2200      	movs	r2, #0
 801a366:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801a368:	693a      	ldr	r2, [r7, #16]
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801a36e:	693b      	ldr	r3, [r7, #16]
 801a370:	88da      	ldrh	r2, [r3, #6]
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	79fa      	ldrb	r2, [r7, #7]
 801a37a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	2200      	movs	r2, #0
 801a380:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	2200      	movs	r2, #0
 801a386:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	2200      	movs	r2, #0
 801a38c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	3330      	adds	r3, #48	@ 0x30
 801a392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a396:	2100      	movs	r1, #0
 801a398:	4618      	mov	r0, r3
 801a39a:	f7fe f9bb 	bl	8018714 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801a39e:	79fb      	ldrb	r3, [r7, #7]
 801a3a0:	f003 0320 	and.w	r3, r3, #32
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d060      	beq.n	801a46a <f_open+0x35a>
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	68db      	ldr	r3, [r3, #12]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d05c      	beq.n	801a46a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	68da      	ldr	r2, [r3, #12]
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	895b      	ldrh	r3, [r3, #10]
 801a3bc:	025b      	lsls	r3, r3, #9
 801a3be:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	689b      	ldr	r3, [r3, #8]
 801a3c4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	68db      	ldr	r3, [r3, #12]
 801a3ca:	657b      	str	r3, [r7, #84]	@ 0x54
 801a3cc:	e016      	b.n	801a3fc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f7fe fc67 	bl	8018ca6 <get_fat>
 801a3d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801a3da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3dc:	2b01      	cmp	r3, #1
 801a3de:	d802      	bhi.n	801a3e6 <f_open+0x2d6>
 801a3e0:	2302      	movs	r3, #2
 801a3e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a3e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3ec:	d102      	bne.n	801a3f4 <f_open+0x2e4>
 801a3ee:	2301      	movs	r3, #1
 801a3f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a3f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a3f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a3f8:	1ad3      	subs	r3, r2, r3
 801a3fa:	657b      	str	r3, [r7, #84]	@ 0x54
 801a3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a400:	2b00      	cmp	r3, #0
 801a402:	d103      	bne.n	801a40c <f_open+0x2fc>
 801a404:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a408:	429a      	cmp	r2, r3
 801a40a:	d8e0      	bhi.n	801a3ce <f_open+0x2be>
				}
				fp->clust = clst;
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a410:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a412:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a416:	2b00      	cmp	r3, #0
 801a418:	d127      	bne.n	801a46a <f_open+0x35a>
 801a41a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a420:	2b00      	cmp	r3, #0
 801a422:	d022      	beq.n	801a46a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a424:	693b      	ldr	r3, [r7, #16]
 801a426:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a428:	4618      	mov	r0, r3
 801a42a:	f7fe fc1d 	bl	8018c68 <clust2sect>
 801a42e:	6478      	str	r0, [r7, #68]	@ 0x44
 801a430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a432:	2b00      	cmp	r3, #0
 801a434:	d103      	bne.n	801a43e <f_open+0x32e>
						res = FR_INT_ERR;
 801a436:	2302      	movs	r3, #2
 801a438:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a43c:	e015      	b.n	801a46a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a440:	0a5a      	lsrs	r2, r3, #9
 801a442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a444:	441a      	add	r2, r3
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a44a:	693b      	ldr	r3, [r7, #16]
 801a44c:	7858      	ldrb	r0, [r3, #1]
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	6a1a      	ldr	r2, [r3, #32]
 801a458:	2301      	movs	r3, #1
 801a45a:	f7fe f859 	bl	8018510 <disk_read>
 801a45e:	4603      	mov	r3, r0
 801a460:	2b00      	cmp	r3, #0
 801a462:	d002      	beq.n	801a46a <f_open+0x35a>
 801a464:	2301      	movs	r3, #1
 801a466:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a46a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d002      	beq.n	801a478 <f_open+0x368>
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	2200      	movs	r2, #0
 801a476:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a478:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801a47c:	4618      	mov	r0, r3
 801a47e:	3760      	adds	r7, #96	@ 0x60
 801a480:	46bd      	mov	sp, r7
 801a482:	bd80      	pop	{r7, pc}

0801a484 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b08c      	sub	sp, #48	@ 0x30
 801a488:	af00      	add	r7, sp, #0
 801a48a:	60f8      	str	r0, [r7, #12]
 801a48c:	60b9      	str	r1, [r7, #8]
 801a48e:	607a      	str	r2, [r7, #4]
 801a490:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801a492:	68bb      	ldr	r3, [r7, #8]
 801a494:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801a496:	683b      	ldr	r3, [r7, #0]
 801a498:	2200      	movs	r2, #0
 801a49a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	f107 0210 	add.w	r2, r7, #16
 801a4a2:	4611      	mov	r1, r2
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f7ff fdb7 	bl	801a018 <validate>
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a4b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d107      	bne.n	801a4c8 <f_write+0x44>
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	7d5b      	ldrb	r3, [r3, #21]
 801a4bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a4c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d002      	beq.n	801a4ce <f_write+0x4a>
 801a4c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4cc:	e14b      	b.n	801a766 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	7d1b      	ldrb	r3, [r3, #20]
 801a4d2:	f003 0302 	and.w	r3, r3, #2
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d101      	bne.n	801a4de <f_write+0x5a>
 801a4da:	2307      	movs	r3, #7
 801a4dc:	e143      	b.n	801a766 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	699a      	ldr	r2, [r3, #24]
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	441a      	add	r2, r3
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	699b      	ldr	r3, [r3, #24]
 801a4ea:	429a      	cmp	r2, r3
 801a4ec:	f080 812d 	bcs.w	801a74a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	699b      	ldr	r3, [r3, #24]
 801a4f4:	43db      	mvns	r3, r3
 801a4f6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801a4f8:	e127      	b.n	801a74a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	699b      	ldr	r3, [r3, #24]
 801a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a502:	2b00      	cmp	r3, #0
 801a504:	f040 80e3 	bne.w	801a6ce <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	699b      	ldr	r3, [r3, #24]
 801a50c:	0a5b      	lsrs	r3, r3, #9
 801a50e:	693a      	ldr	r2, [r7, #16]
 801a510:	8952      	ldrh	r2, [r2, #10]
 801a512:	3a01      	subs	r2, #1
 801a514:	4013      	ands	r3, r2
 801a516:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801a518:	69bb      	ldr	r3, [r7, #24]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d143      	bne.n	801a5a6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	699b      	ldr	r3, [r3, #24]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d10c      	bne.n	801a540 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	689b      	ldr	r3, [r3, #8]
 801a52a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d11a      	bne.n	801a568 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	2100      	movs	r1, #0
 801a536:	4618      	mov	r0, r3
 801a538:	f7fe fdab 	bl	8019092 <create_chain>
 801a53c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a53e:	e013      	b.n	801a568 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a544:	2b00      	cmp	r3, #0
 801a546:	d007      	beq.n	801a558 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	699b      	ldr	r3, [r3, #24]
 801a54c:	4619      	mov	r1, r3
 801a54e:	68f8      	ldr	r0, [r7, #12]
 801a550:	f7fe fe37 	bl	80191c2 <clmt_clust>
 801a554:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a556:	e007      	b.n	801a568 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a558:	68fa      	ldr	r2, [r7, #12]
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	69db      	ldr	r3, [r3, #28]
 801a55e:	4619      	mov	r1, r3
 801a560:	4610      	mov	r0, r2
 801a562:	f7fe fd96 	bl	8019092 <create_chain>
 801a566:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	f000 80f2 	beq.w	801a754 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a572:	2b01      	cmp	r3, #1
 801a574:	d104      	bne.n	801a580 <f_write+0xfc>
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	2202      	movs	r2, #2
 801a57a:	755a      	strb	r2, [r3, #21]
 801a57c:	2302      	movs	r3, #2
 801a57e:	e0f2      	b.n	801a766 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a582:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a586:	d104      	bne.n	801a592 <f_write+0x10e>
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	2201      	movs	r2, #1
 801a58c:	755a      	strb	r2, [r3, #21]
 801a58e:	2301      	movs	r3, #1
 801a590:	e0e9      	b.n	801a766 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a596:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	689b      	ldr	r3, [r3, #8]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d102      	bne.n	801a5a6 <f_write+0x122>
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a5a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	7d1b      	ldrb	r3, [r3, #20]
 801a5aa:	b25b      	sxtb	r3, r3
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	da18      	bge.n	801a5e2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	7858      	ldrb	r0, [r3, #1]
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	6a1a      	ldr	r2, [r3, #32]
 801a5be:	2301      	movs	r3, #1
 801a5c0:	f7fd ffc6 	bl	8018550 <disk_write>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d004      	beq.n	801a5d4 <f_write+0x150>
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	2201      	movs	r2, #1
 801a5ce:	755a      	strb	r2, [r3, #21]
 801a5d0:	2301      	movs	r3, #1
 801a5d2:	e0c8      	b.n	801a766 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	7d1b      	ldrb	r3, [r3, #20]
 801a5d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a5dc:	b2da      	uxtb	r2, r3
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a5e2:	693a      	ldr	r2, [r7, #16]
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	69db      	ldr	r3, [r3, #28]
 801a5e8:	4619      	mov	r1, r3
 801a5ea:	4610      	mov	r0, r2
 801a5ec:	f7fe fb3c 	bl	8018c68 <clust2sect>
 801a5f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a5f2:	697b      	ldr	r3, [r7, #20]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d104      	bne.n	801a602 <f_write+0x17e>
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	2202      	movs	r2, #2
 801a5fc:	755a      	strb	r2, [r3, #21]
 801a5fe:	2302      	movs	r3, #2
 801a600:	e0b1      	b.n	801a766 <f_write+0x2e2>
			sect += csect;
 801a602:	697a      	ldr	r2, [r7, #20]
 801a604:	69bb      	ldr	r3, [r7, #24]
 801a606:	4413      	add	r3, r2
 801a608:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	0a5b      	lsrs	r3, r3, #9
 801a60e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a610:	6a3b      	ldr	r3, [r7, #32]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d03c      	beq.n	801a690 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a616:	69ba      	ldr	r2, [r7, #24]
 801a618:	6a3b      	ldr	r3, [r7, #32]
 801a61a:	4413      	add	r3, r2
 801a61c:	693a      	ldr	r2, [r7, #16]
 801a61e:	8952      	ldrh	r2, [r2, #10]
 801a620:	4293      	cmp	r3, r2
 801a622:	d905      	bls.n	801a630 <f_write+0x1ac>
					cc = fs->csize - csect;
 801a624:	693b      	ldr	r3, [r7, #16]
 801a626:	895b      	ldrh	r3, [r3, #10]
 801a628:	461a      	mov	r2, r3
 801a62a:	69bb      	ldr	r3, [r7, #24]
 801a62c:	1ad3      	subs	r3, r2, r3
 801a62e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a630:	693b      	ldr	r3, [r7, #16]
 801a632:	7858      	ldrb	r0, [r3, #1]
 801a634:	6a3b      	ldr	r3, [r7, #32]
 801a636:	697a      	ldr	r2, [r7, #20]
 801a638:	69f9      	ldr	r1, [r7, #28]
 801a63a:	f7fd ff89 	bl	8018550 <disk_write>
 801a63e:	4603      	mov	r3, r0
 801a640:	2b00      	cmp	r3, #0
 801a642:	d004      	beq.n	801a64e <f_write+0x1ca>
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	2201      	movs	r2, #1
 801a648:	755a      	strb	r2, [r3, #21]
 801a64a:	2301      	movs	r3, #1
 801a64c:	e08b      	b.n	801a766 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	6a1a      	ldr	r2, [r3, #32]
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	1ad3      	subs	r3, r2, r3
 801a656:	6a3a      	ldr	r2, [r7, #32]
 801a658:	429a      	cmp	r2, r3
 801a65a:	d915      	bls.n	801a688 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	6a1a      	ldr	r2, [r3, #32]
 801a666:	697b      	ldr	r3, [r7, #20]
 801a668:	1ad3      	subs	r3, r2, r3
 801a66a:	025b      	lsls	r3, r3, #9
 801a66c:	69fa      	ldr	r2, [r7, #28]
 801a66e:	4413      	add	r3, r2
 801a670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a674:	4619      	mov	r1, r3
 801a676:	f7fe f82c 	bl	80186d2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	7d1b      	ldrb	r3, [r3, #20]
 801a67e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a682:	b2da      	uxtb	r2, r3
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a688:	6a3b      	ldr	r3, [r7, #32]
 801a68a:	025b      	lsls	r3, r3, #9
 801a68c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801a68e:	e03f      	b.n	801a710 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	6a1b      	ldr	r3, [r3, #32]
 801a694:	697a      	ldr	r2, [r7, #20]
 801a696:	429a      	cmp	r2, r3
 801a698:	d016      	beq.n	801a6c8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	699a      	ldr	r2, [r3, #24]
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	d210      	bcs.n	801a6c8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a6a6:	693b      	ldr	r3, [r7, #16]
 801a6a8:	7858      	ldrb	r0, [r3, #1]
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	697a      	ldr	r2, [r7, #20]
 801a6b4:	f7fd ff2c 	bl	8018510 <disk_read>
 801a6b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d004      	beq.n	801a6c8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	2201      	movs	r2, #1
 801a6c2:	755a      	strb	r2, [r3, #21]
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	e04e      	b.n	801a766 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	697a      	ldr	r2, [r7, #20]
 801a6cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	699b      	ldr	r3, [r3, #24]
 801a6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a6d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801a6da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	429a      	cmp	r2, r3
 801a6e2:	d901      	bls.n	801a6e8 <f_write+0x264>
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	699b      	ldr	r3, [r3, #24]
 801a6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a6f6:	4413      	add	r3, r2
 801a6f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6fa:	69f9      	ldr	r1, [r7, #28]
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7fd ffe8 	bl	80186d2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	7d1b      	ldrb	r3, [r3, #20]
 801a706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a70a:	b2da      	uxtb	r2, r3
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a710:	69fa      	ldr	r2, [r7, #28]
 801a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a714:	4413      	add	r3, r2
 801a716:	61fb      	str	r3, [r7, #28]
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	699a      	ldr	r2, [r3, #24]
 801a71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71e:	441a      	add	r2, r3
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	619a      	str	r2, [r3, #24]
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	68da      	ldr	r2, [r3, #12]
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	699b      	ldr	r3, [r3, #24]
 801a72c:	429a      	cmp	r2, r3
 801a72e:	bf38      	it	cc
 801a730:	461a      	movcc	r2, r3
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	60da      	str	r2, [r3, #12]
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	681a      	ldr	r2, [r3, #0]
 801a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a73c:	441a      	add	r2, r3
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	601a      	str	r2, [r3, #0]
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a746:	1ad3      	subs	r3, r2, r3
 801a748:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	f47f aed4 	bne.w	801a4fa <f_write+0x76>
 801a752:	e000      	b.n	801a756 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a754:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	7d1b      	ldrb	r3, [r3, #20]
 801a75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a75e:	b2da      	uxtb	r2, r3
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a764:	2300      	movs	r3, #0
}
 801a766:	4618      	mov	r0, r3
 801a768:	3730      	adds	r7, #48	@ 0x30
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}

0801a76e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a76e:	b580      	push	{r7, lr}
 801a770:	b086      	sub	sp, #24
 801a772:	af00      	add	r7, sp, #0
 801a774:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	f107 0208 	add.w	r2, r7, #8
 801a77c:	4611      	mov	r1, r2
 801a77e:	4618      	mov	r0, r3
 801a780:	f7ff fc4a 	bl	801a018 <validate>
 801a784:	4603      	mov	r3, r0
 801a786:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a788:	7dfb      	ldrb	r3, [r7, #23]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d168      	bne.n	801a860 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	7d1b      	ldrb	r3, [r3, #20]
 801a792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a796:	2b00      	cmp	r3, #0
 801a798:	d062      	beq.n	801a860 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	7d1b      	ldrb	r3, [r3, #20]
 801a79e:	b25b      	sxtb	r3, r3
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	da15      	bge.n	801a7d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	7858      	ldrb	r0, [r3, #1]
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	6a1a      	ldr	r2, [r3, #32]
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	f7fd fecc 	bl	8018550 <disk_write>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d001      	beq.n	801a7c2 <f_sync+0x54>
 801a7be:	2301      	movs	r3, #1
 801a7c0:	e04f      	b.n	801a862 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	7d1b      	ldrb	r3, [r3, #20]
 801a7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a7ca:	b2da      	uxtb	r2, r3
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a7d0:	f7f7 fd00 	bl	80121d4 <get_fattime>
 801a7d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a7d6:	68ba      	ldr	r2, [r7, #8]
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7dc:	4619      	mov	r1, r3
 801a7de:	4610      	mov	r0, r2
 801a7e0:	f7fe f9a6 	bl	8018b30 <move_window>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a7e8:	7dfb      	ldrb	r3, [r7, #23]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d138      	bne.n	801a860 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	330b      	adds	r3, #11
 801a7f8:	781a      	ldrb	r2, [r3, #0]
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	330b      	adds	r3, #11
 801a7fe:	f042 0220 	orr.w	r2, r2, #32
 801a802:	b2d2      	uxtb	r2, r2
 801a804:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	6818      	ldr	r0, [r3, #0]
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	689b      	ldr	r3, [r3, #8]
 801a80e:	461a      	mov	r2, r3
 801a810:	68f9      	ldr	r1, [r7, #12]
 801a812:	f7fe feb0 	bl	8019576 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	f103 021c 	add.w	r2, r3, #28
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	68db      	ldr	r3, [r3, #12]
 801a820:	4619      	mov	r1, r3
 801a822:	4610      	mov	r0, r2
 801a824:	f7fd ff29 	bl	801867a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	3316      	adds	r3, #22
 801a82c:	6939      	ldr	r1, [r7, #16]
 801a82e:	4618      	mov	r0, r3
 801a830:	f7fd ff23 	bl	801867a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	3312      	adds	r3, #18
 801a838:	2100      	movs	r1, #0
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7fd ff02 	bl	8018644 <st_word>
					fs->wflag = 1;
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	2201      	movs	r2, #1
 801a844:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	4618      	mov	r0, r3
 801a84a:	f7fe f99f 	bl	8018b8c <sync_fs>
 801a84e:	4603      	mov	r3, r0
 801a850:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	7d1b      	ldrb	r3, [r3, #20]
 801a856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a85a:	b2da      	uxtb	r2, r3
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a860:	7dfb      	ldrb	r3, [r7, #23]
}
 801a862:	4618      	mov	r0, r3
 801a864:	3718      	adds	r7, #24
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}

0801a86a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a86a:	b580      	push	{r7, lr}
 801a86c:	b084      	sub	sp, #16
 801a86e:	af00      	add	r7, sp, #0
 801a870:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a872:	6878      	ldr	r0, [r7, #4]
 801a874:	f7ff ff7b 	bl	801a76e <f_sync>
 801a878:	4603      	mov	r3, r0
 801a87a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a87c:	7bfb      	ldrb	r3, [r7, #15]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d118      	bne.n	801a8b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	f107 0208 	add.w	r2, r7, #8
 801a888:	4611      	mov	r1, r2
 801a88a:	4618      	mov	r0, r3
 801a88c:	f7ff fbc4 	bl	801a018 <validate>
 801a890:	4603      	mov	r3, r0
 801a892:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a894:	7bfb      	ldrb	r3, [r7, #15]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d10c      	bne.n	801a8b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	691b      	ldr	r3, [r3, #16]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7fe f8a2 	bl	80189e8 <dec_lock>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a8a8:	7bfb      	ldrb	r3, [r7, #15]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d102      	bne.n	801a8b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3710      	adds	r7, #16
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}

0801a8be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801a8be:	b580      	push	{r7, lr}
 801a8c0:	b090      	sub	sp, #64	@ 0x40
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
 801a8c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f107 0208 	add.w	r2, r7, #8
 801a8ce:	4611      	mov	r1, r2
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f7ff fba1 	bl	801a018 <validate>
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801a8dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d103      	bne.n	801a8ec <f_lseek+0x2e>
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	7d5b      	ldrb	r3, [r3, #21]
 801a8e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801a8ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d002      	beq.n	801a8fa <f_lseek+0x3c>
 801a8f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a8f8:	e1e6      	b.n	801acc8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	f000 80d1 	beq.w	801aaa6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801a904:	683b      	ldr	r3, [r7, #0]
 801a906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a90a:	d15a      	bne.n	801a9c2 <f_lseek+0x104>
			tbl = fp->cltbl;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a910:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a914:	1d1a      	adds	r2, r3, #4
 801a916:	627a      	str	r2, [r7, #36]	@ 0x24
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	617b      	str	r3, [r7, #20]
 801a91c:	2302      	movs	r3, #2
 801a91e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	689b      	ldr	r3, [r3, #8]
 801a924:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801a926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d03a      	beq.n	801a9a2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a92e:	613b      	str	r3, [r7, #16]
 801a930:	2300      	movs	r3, #0
 801a932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a936:	3302      	adds	r3, #2
 801a938:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a93c:	60fb      	str	r3, [r7, #12]
 801a93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a940:	3301      	adds	r3, #1
 801a942:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a948:	4618      	mov	r0, r3
 801a94a:	f7fe f9ac 	bl	8018ca6 <get_fat>
 801a94e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801a950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a952:	2b01      	cmp	r3, #1
 801a954:	d804      	bhi.n	801a960 <f_lseek+0xa2>
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2202      	movs	r2, #2
 801a95a:	755a      	strb	r2, [r3, #21]
 801a95c:	2302      	movs	r3, #2
 801a95e:	e1b3      	b.n	801acc8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a966:	d104      	bne.n	801a972 <f_lseek+0xb4>
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2201      	movs	r2, #1
 801a96c:	755a      	strb	r2, [r3, #21]
 801a96e:	2301      	movs	r3, #1
 801a970:	e1aa      	b.n	801acc8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	3301      	adds	r3, #1
 801a976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a978:	429a      	cmp	r2, r3
 801a97a:	d0de      	beq.n	801a93a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801a97c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	429a      	cmp	r2, r3
 801a982:	d809      	bhi.n	801a998 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a986:	1d1a      	adds	r2, r3, #4
 801a988:	627a      	str	r2, [r7, #36]	@ 0x24
 801a98a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a98c:	601a      	str	r2, [r3, #0]
 801a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a990:	1d1a      	adds	r2, r3, #4
 801a992:	627a      	str	r2, [r7, #36]	@ 0x24
 801a994:	693a      	ldr	r2, [r7, #16]
 801a996:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	695b      	ldr	r3, [r3, #20]
 801a99c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a99e:	429a      	cmp	r2, r3
 801a9a0:	d3c4      	bcc.n	801a92c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a9a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801a9aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a9ac:	697b      	ldr	r3, [r7, #20]
 801a9ae:	429a      	cmp	r2, r3
 801a9b0:	d803      	bhi.n	801a9ba <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9b4:	2200      	movs	r2, #0
 801a9b6:	601a      	str	r2, [r3, #0]
 801a9b8:	e184      	b.n	801acc4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801a9ba:	2311      	movs	r3, #17
 801a9bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801a9c0:	e180      	b.n	801acc4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	683a      	ldr	r2, [r7, #0]
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	d902      	bls.n	801a9d2 <f_lseek+0x114>
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	68db      	ldr	r3, [r3, #12]
 801a9d0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	683a      	ldr	r2, [r7, #0]
 801a9d6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	f000 8172 	beq.w	801acc4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	3b01      	subs	r3, #1
 801a9e4:	4619      	mov	r1, r3
 801a9e6:	6878      	ldr	r0, [r7, #4]
 801a9e8:	f7fe fbeb 	bl	80191c2 <clmt_clust>
 801a9ec:	4602      	mov	r2, r0
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801a9f2:	68ba      	ldr	r2, [r7, #8]
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	69db      	ldr	r3, [r3, #28]
 801a9f8:	4619      	mov	r1, r3
 801a9fa:	4610      	mov	r0, r2
 801a9fc:	f7fe f934 	bl	8018c68 <clust2sect>
 801aa00:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801aa02:	69bb      	ldr	r3, [r7, #24]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d104      	bne.n	801aa12 <f_lseek+0x154>
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2202      	movs	r2, #2
 801aa0c:	755a      	strb	r2, [r3, #21]
 801aa0e:	2302      	movs	r3, #2
 801aa10:	e15a      	b.n	801acc8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	3b01      	subs	r3, #1
 801aa16:	0a5b      	lsrs	r3, r3, #9
 801aa18:	68ba      	ldr	r2, [r7, #8]
 801aa1a:	8952      	ldrh	r2, [r2, #10]
 801aa1c:	3a01      	subs	r2, #1
 801aa1e:	4013      	ands	r3, r2
 801aa20:	69ba      	ldr	r2, [r7, #24]
 801aa22:	4413      	add	r3, r2
 801aa24:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	699b      	ldr	r3, [r3, #24]
 801aa2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	f000 8148 	beq.w	801acc4 <f_lseek+0x406>
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	6a1b      	ldr	r3, [r3, #32]
 801aa38:	69ba      	ldr	r2, [r7, #24]
 801aa3a:	429a      	cmp	r2, r3
 801aa3c:	f000 8142 	beq.w	801acc4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	7d1b      	ldrb	r3, [r3, #20]
 801aa44:	b25b      	sxtb	r3, r3
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	da18      	bge.n	801aa7c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	7858      	ldrb	r0, [r3, #1]
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	6a1a      	ldr	r2, [r3, #32]
 801aa58:	2301      	movs	r3, #1
 801aa5a:	f7fd fd79 	bl	8018550 <disk_write>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d004      	beq.n	801aa6e <f_lseek+0x1b0>
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2201      	movs	r2, #1
 801aa68:	755a      	strb	r2, [r3, #21]
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	e12c      	b.n	801acc8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	7d1b      	ldrb	r3, [r3, #20]
 801aa72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aa76:	b2da      	uxtb	r2, r3
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	7858      	ldrb	r0, [r3, #1]
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801aa86:	2301      	movs	r3, #1
 801aa88:	69ba      	ldr	r2, [r7, #24]
 801aa8a:	f7fd fd41 	bl	8018510 <disk_read>
 801aa8e:	4603      	mov	r3, r0
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d004      	beq.n	801aa9e <f_lseek+0x1e0>
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	2201      	movs	r2, #1
 801aa98:	755a      	strb	r2, [r3, #21]
 801aa9a:	2301      	movs	r3, #1
 801aa9c:	e114      	b.n	801acc8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	69ba      	ldr	r2, [r7, #24]
 801aaa2:	621a      	str	r2, [r3, #32]
 801aaa4:	e10e      	b.n	801acc4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	68db      	ldr	r3, [r3, #12]
 801aaaa:	683a      	ldr	r2, [r7, #0]
 801aaac:	429a      	cmp	r2, r3
 801aaae:	d908      	bls.n	801aac2 <f_lseek+0x204>
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	7d1b      	ldrb	r3, [r3, #20]
 801aab4:	f003 0302 	and.w	r3, r3, #2
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d102      	bne.n	801aac2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	68db      	ldr	r3, [r3, #12]
 801aac0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	699b      	ldr	r3, [r3, #24]
 801aac6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801aac8:	2300      	movs	r3, #0
 801aaca:	637b      	str	r3, [r7, #52]	@ 0x34
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aad0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	f000 80a7 	beq.w	801ac28 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801aada:	68bb      	ldr	r3, [r7, #8]
 801aadc:	895b      	ldrh	r3, [r3, #10]
 801aade:	025b      	lsls	r3, r3, #9
 801aae0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801aae2:	6a3b      	ldr	r3, [r7, #32]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d01b      	beq.n	801ab20 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801aae8:	683b      	ldr	r3, [r7, #0]
 801aaea:	1e5a      	subs	r2, r3, #1
 801aaec:	69fb      	ldr	r3, [r7, #28]
 801aaee:	fbb2 f2f3 	udiv	r2, r2, r3
 801aaf2:	6a3b      	ldr	r3, [r7, #32]
 801aaf4:	1e59      	subs	r1, r3, #1
 801aaf6:	69fb      	ldr	r3, [r7, #28]
 801aaf8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d30f      	bcc.n	801ab20 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801ab00:	6a3b      	ldr	r3, [r7, #32]
 801ab02:	1e5a      	subs	r2, r3, #1
 801ab04:	69fb      	ldr	r3, [r7, #28]
 801ab06:	425b      	negs	r3, r3
 801ab08:	401a      	ands	r2, r3
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	699b      	ldr	r3, [r3, #24]
 801ab12:	683a      	ldr	r2, [r7, #0]
 801ab14:	1ad3      	subs	r3, r2, r3
 801ab16:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	69db      	ldr	r3, [r3, #28]
 801ab1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab1e:	e022      	b.n	801ab66 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	689b      	ldr	r3, [r3, #8]
 801ab24:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d119      	bne.n	801ab60 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	2100      	movs	r1, #0
 801ab30:	4618      	mov	r0, r3
 801ab32:	f7fe faae 	bl	8019092 <create_chain>
 801ab36:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab3a:	2b01      	cmp	r3, #1
 801ab3c:	d104      	bne.n	801ab48 <f_lseek+0x28a>
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	2202      	movs	r2, #2
 801ab42:	755a      	strb	r2, [r3, #21]
 801ab44:	2302      	movs	r3, #2
 801ab46:	e0bf      	b.n	801acc8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab4e:	d104      	bne.n	801ab5a <f_lseek+0x29c>
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2201      	movs	r2, #1
 801ab54:	755a      	strb	r2, [r3, #21]
 801ab56:	2301      	movs	r3, #1
 801ab58:	e0b6      	b.n	801acc8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ab5e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ab64:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801ab66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d05d      	beq.n	801ac28 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801ab6c:	e03a      	b.n	801abe4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801ab6e:	683a      	ldr	r2, [r7, #0]
 801ab70:	69fb      	ldr	r3, [r7, #28]
 801ab72:	1ad3      	subs	r3, r2, r3
 801ab74:	603b      	str	r3, [r7, #0]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	699a      	ldr	r2, [r3, #24]
 801ab7a:	69fb      	ldr	r3, [r7, #28]
 801ab7c:	441a      	add	r2, r3
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	7d1b      	ldrb	r3, [r3, #20]
 801ab86:	f003 0302 	and.w	r3, r3, #2
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d00b      	beq.n	801aba6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ab92:	4618      	mov	r0, r3
 801ab94:	f7fe fa7d 	bl	8019092 <create_chain>
 801ab98:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801ab9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d108      	bne.n	801abb2 <f_lseek+0x2f4>
							ofs = 0; break;
 801aba0:	2300      	movs	r3, #0
 801aba2:	603b      	str	r3, [r7, #0]
 801aba4:	e022      	b.n	801abec <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801abaa:	4618      	mov	r0, r3
 801abac:	f7fe f87b 	bl	8018ca6 <get_fat>
 801abb0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801abb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abb8:	d104      	bne.n	801abc4 <f_lseek+0x306>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2201      	movs	r2, #1
 801abbe:	755a      	strb	r2, [r3, #21]
 801abc0:	2301      	movs	r3, #1
 801abc2:	e081      	b.n	801acc8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abc6:	2b01      	cmp	r3, #1
 801abc8:	d904      	bls.n	801abd4 <f_lseek+0x316>
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	695b      	ldr	r3, [r3, #20]
 801abce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801abd0:	429a      	cmp	r2, r3
 801abd2:	d304      	bcc.n	801abde <f_lseek+0x320>
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	2202      	movs	r2, #2
 801abd8:	755a      	strb	r2, [r3, #21]
 801abda:	2302      	movs	r3, #2
 801abdc:	e074      	b.n	801acc8 <f_lseek+0x40a>
					fp->clust = clst;
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801abe2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801abe4:	683a      	ldr	r2, [r7, #0]
 801abe6:	69fb      	ldr	r3, [r7, #28]
 801abe8:	429a      	cmp	r2, r3
 801abea:	d8c0      	bhi.n	801ab6e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	699a      	ldr	r2, [r3, #24]
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	441a      	add	r2, r3
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801abf8:	683b      	ldr	r3, [r7, #0]
 801abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d012      	beq.n	801ac28 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801ac02:	68bb      	ldr	r3, [r7, #8]
 801ac04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ac06:	4618      	mov	r0, r3
 801ac08:	f7fe f82e 	bl	8018c68 <clust2sect>
 801ac0c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801ac0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d104      	bne.n	801ac1e <f_lseek+0x360>
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	2202      	movs	r2, #2
 801ac18:	755a      	strb	r2, [r3, #21]
 801ac1a:	2302      	movs	r3, #2
 801ac1c:	e054      	b.n	801acc8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801ac1e:	683b      	ldr	r3, [r7, #0]
 801ac20:	0a5b      	lsrs	r3, r3, #9
 801ac22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ac24:	4413      	add	r3, r2
 801ac26:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	699a      	ldr	r2, [r3, #24]
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	68db      	ldr	r3, [r3, #12]
 801ac30:	429a      	cmp	r2, r3
 801ac32:	d90a      	bls.n	801ac4a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	699a      	ldr	r2, [r3, #24]
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	7d1b      	ldrb	r3, [r3, #20]
 801ac40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac44:	b2da      	uxtb	r2, r3
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	699b      	ldr	r3, [r3, #24]
 801ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d036      	beq.n	801acc4 <f_lseek+0x406>
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	6a1b      	ldr	r3, [r3, #32]
 801ac5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	d031      	beq.n	801acc4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	7d1b      	ldrb	r3, [r3, #20]
 801ac64:	b25b      	sxtb	r3, r3
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	da18      	bge.n	801ac9c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ac6a:	68bb      	ldr	r3, [r7, #8]
 801ac6c:	7858      	ldrb	r0, [r3, #1]
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	6a1a      	ldr	r2, [r3, #32]
 801ac78:	2301      	movs	r3, #1
 801ac7a:	f7fd fc69 	bl	8018550 <disk_write>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d004      	beq.n	801ac8e <f_lseek+0x3d0>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2201      	movs	r2, #1
 801ac88:	755a      	strb	r2, [r3, #21]
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	e01c      	b.n	801acc8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	7d1b      	ldrb	r3, [r3, #20]
 801ac92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ac96:	b2da      	uxtb	r2, r3
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	7858      	ldrb	r0, [r3, #1]
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801aca6:	2301      	movs	r3, #1
 801aca8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801acaa:	f7fd fc31 	bl	8018510 <disk_read>
 801acae:	4603      	mov	r3, r0
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d004      	beq.n	801acbe <f_lseek+0x400>
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2201      	movs	r2, #1
 801acb8:	755a      	strb	r2, [r3, #21]
 801acba:	2301      	movs	r3, #1
 801acbc:	e004      	b.n	801acc8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801acc2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801acc4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801acc8:	4618      	mov	r0, r3
 801acca:	3740      	adds	r7, #64	@ 0x40
 801accc:	46bd      	mov	sp, r7
 801acce:	bd80      	pop	{r7, pc}

0801acd0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b086      	sub	sp, #24
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
 801acd8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d101      	bne.n	801ace4 <f_opendir+0x14>
 801ace0:	2309      	movs	r3, #9
 801ace2:	e064      	b.n	801adae <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801ace8:	f107 010c 	add.w	r1, r7, #12
 801acec:	463b      	mov	r3, r7
 801acee:	2200      	movs	r2, #0
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7fe ff45 	bl	8019b80 <find_volume>
 801acf6:	4603      	mov	r3, r0
 801acf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801acfa:	7dfb      	ldrb	r3, [r7, #23]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d14f      	bne.n	801ada0 <f_opendir+0xd0>
		obj->fs = fs;
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	693b      	ldr	r3, [r7, #16]
 801ad04:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	4619      	mov	r1, r3
 801ad0a:	6878      	ldr	r0, [r7, #4]
 801ad0c:	f7fe fe2c 	bl	8019968 <follow_path>
 801ad10:	4603      	mov	r3, r0
 801ad12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801ad14:	7dfb      	ldrb	r3, [r7, #23]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d13d      	bne.n	801ad96 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ad20:	b25b      	sxtb	r3, r3
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	db12      	blt.n	801ad4c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	799b      	ldrb	r3, [r3, #6]
 801ad2a:	f003 0310 	and.w	r3, r3, #16
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d00a      	beq.n	801ad48 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801ad32:	68fa      	ldr	r2, [r7, #12]
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	6a1b      	ldr	r3, [r3, #32]
 801ad38:	4619      	mov	r1, r3
 801ad3a:	4610      	mov	r0, r2
 801ad3c:	f7fe fbfc 	bl	8019538 <ld_clust>
 801ad40:	4602      	mov	r2, r0
 801ad42:	693b      	ldr	r3, [r7, #16]
 801ad44:	609a      	str	r2, [r3, #8]
 801ad46:	e001      	b.n	801ad4c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801ad48:	2305      	movs	r3, #5
 801ad4a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801ad4c:	7dfb      	ldrb	r3, [r7, #23]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d121      	bne.n	801ad96 <f_opendir+0xc6>
				obj->id = fs->id;
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	88da      	ldrh	r2, [r3, #6]
 801ad56:	693b      	ldr	r3, [r7, #16]
 801ad58:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801ad5a:	2100      	movs	r1, #0
 801ad5c:	6878      	ldr	r0, [r7, #4]
 801ad5e:	f7fe fa64 	bl	801922a <dir_sdi>
 801ad62:	4603      	mov	r3, r0
 801ad64:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801ad66:	7dfb      	ldrb	r3, [r7, #23]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d114      	bne.n	801ad96 <f_opendir+0xc6>
					if (obj->sclust) {
 801ad6c:	693b      	ldr	r3, [r7, #16]
 801ad6e:	689b      	ldr	r3, [r3, #8]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d00d      	beq.n	801ad90 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801ad74:	2100      	movs	r1, #0
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f7fd fda8 	bl	80188cc <inc_lock>
 801ad7c:	4602      	mov	r2, r0
 801ad7e:	693b      	ldr	r3, [r7, #16]
 801ad80:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801ad82:	693b      	ldr	r3, [r7, #16]
 801ad84:	691b      	ldr	r3, [r3, #16]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d105      	bne.n	801ad96 <f_opendir+0xc6>
 801ad8a:	2312      	movs	r3, #18
 801ad8c:	75fb      	strb	r3, [r7, #23]
 801ad8e:	e002      	b.n	801ad96 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801ad90:	693b      	ldr	r3, [r7, #16]
 801ad92:	2200      	movs	r2, #0
 801ad94:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801ad96:	7dfb      	ldrb	r3, [r7, #23]
 801ad98:	2b04      	cmp	r3, #4
 801ad9a:	d101      	bne.n	801ada0 <f_opendir+0xd0>
 801ad9c:	2305      	movs	r3, #5
 801ad9e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801ada0:	7dfb      	ldrb	r3, [r7, #23]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d002      	beq.n	801adac <f_opendir+0xdc>
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	2200      	movs	r2, #0
 801adaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801adac:	7dfb      	ldrb	r3, [r7, #23]
}
 801adae:	4618      	mov	r0, r3
 801adb0:	3718      	adds	r7, #24
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd80      	pop	{r7, pc}

0801adb6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801adb6:	b580      	push	{r7, lr}
 801adb8:	b084      	sub	sp, #16
 801adba:	af00      	add	r7, sp, #0
 801adbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	f107 0208 	add.w	r2, r7, #8
 801adc4:	4611      	mov	r1, r2
 801adc6:	4618      	mov	r0, r3
 801adc8:	f7ff f926 	bl	801a018 <validate>
 801adcc:	4603      	mov	r3, r0
 801adce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801add0:	7bfb      	ldrb	r3, [r7, #15]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d110      	bne.n	801adf8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	691b      	ldr	r3, [r3, #16]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d006      	beq.n	801adec <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	691b      	ldr	r3, [r3, #16]
 801ade2:	4618      	mov	r0, r3
 801ade4:	f7fd fe00 	bl	80189e8 <dec_lock>
 801ade8:	4603      	mov	r3, r0
 801adea:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801adec:	7bfb      	ldrb	r3, [r7, #15]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d102      	bne.n	801adf8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	2200      	movs	r2, #0
 801adf6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801adf8:	7bfb      	ldrb	r3, [r7, #15]
}
 801adfa:	4618      	mov	r0, r3
 801adfc:	3710      	adds	r7, #16
 801adfe:	46bd      	mov	sp, r7
 801ae00:	bd80      	pop	{r7, pc}

0801ae02 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801ae02:	b580      	push	{r7, lr}
 801ae04:	b084      	sub	sp, #16
 801ae06:	af00      	add	r7, sp, #0
 801ae08:	6078      	str	r0, [r7, #4]
 801ae0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	f107 0208 	add.w	r2, r7, #8
 801ae12:	4611      	mov	r1, r2
 801ae14:	4618      	mov	r0, r3
 801ae16:	f7ff f8ff 	bl	801a018 <validate>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ae1e:	7bfb      	ldrb	r3, [r7, #15]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d126      	bne.n	801ae72 <f_readdir+0x70>
		if (!fno) {
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d106      	bne.n	801ae38 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801ae2a:	2100      	movs	r1, #0
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f7fe f9fc 	bl	801922a <dir_sdi>
 801ae32:	4603      	mov	r3, r0
 801ae34:	73fb      	strb	r3, [r7, #15]
 801ae36:	e01c      	b.n	801ae72 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801ae38:	2100      	movs	r1, #0
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f7fe fbbb 	bl	80195b6 <dir_read>
 801ae40:	4603      	mov	r3, r0
 801ae42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801ae44:	7bfb      	ldrb	r3, [r7, #15]
 801ae46:	2b04      	cmp	r3, #4
 801ae48:	d101      	bne.n	801ae4e <f_readdir+0x4c>
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801ae4e:	7bfb      	ldrb	r3, [r7, #15]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d10e      	bne.n	801ae72 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801ae54:	6839      	ldr	r1, [r7, #0]
 801ae56:	6878      	ldr	r0, [r7, #4]
 801ae58:	f7fe fc91 	bl	801977e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801ae5c:	2100      	movs	r1, #0
 801ae5e:	6878      	ldr	r0, [r7, #4]
 801ae60:	f7fe fa5e 	bl	8019320 <dir_next>
 801ae64:	4603      	mov	r3, r0
 801ae66:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801ae68:	7bfb      	ldrb	r3, [r7, #15]
 801ae6a:	2b04      	cmp	r3, #4
 801ae6c:	d101      	bne.n	801ae72 <f_readdir+0x70>
 801ae6e:	2300      	movs	r3, #0
 801ae70:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3710      	adds	r7, #16
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}

0801ae7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	b087      	sub	sp, #28
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	60f8      	str	r0, [r7, #12]
 801ae84:	60b9      	str	r1, [r7, #8]
 801ae86:	4613      	mov	r3, r2
 801ae88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801ae8e:	2300      	movs	r3, #0
 801ae90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801ae92:	4b1f      	ldr	r3, [pc, #124]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801ae94:	7a5b      	ldrb	r3, [r3, #9]
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d131      	bne.n	801af00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801ae9c:	4b1c      	ldr	r3, [pc, #112]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801ae9e:	7a5b      	ldrb	r3, [r3, #9]
 801aea0:	b2db      	uxtb	r3, r3
 801aea2:	461a      	mov	r2, r3
 801aea4:	4b1a      	ldr	r3, [pc, #104]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aea6:	2100      	movs	r1, #0
 801aea8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801aeaa:	4b19      	ldr	r3, [pc, #100]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aeac:	7a5b      	ldrb	r3, [r3, #9]
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	4a17      	ldr	r2, [pc, #92]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	4413      	add	r3, r2
 801aeb6:	68fa      	ldr	r2, [r7, #12]
 801aeb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801aeba:	4b15      	ldr	r3, [pc, #84]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aebc:	7a5b      	ldrb	r3, [r3, #9]
 801aebe:	b2db      	uxtb	r3, r3
 801aec0:	461a      	mov	r2, r3
 801aec2:	4b13      	ldr	r3, [pc, #76]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aec4:	4413      	add	r3, r2
 801aec6:	79fa      	ldrb	r2, [r7, #7]
 801aec8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801aeca:	4b11      	ldr	r3, [pc, #68]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aecc:	7a5b      	ldrb	r3, [r3, #9]
 801aece:	b2db      	uxtb	r3, r3
 801aed0:	1c5a      	adds	r2, r3, #1
 801aed2:	b2d1      	uxtb	r1, r2
 801aed4:	4a0e      	ldr	r2, [pc, #56]	@ (801af10 <FATFS_LinkDriverEx+0x94>)
 801aed6:	7251      	strb	r1, [r2, #9]
 801aed8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801aeda:	7dbb      	ldrb	r3, [r7, #22]
 801aedc:	3330      	adds	r3, #48	@ 0x30
 801aede:	b2da      	uxtb	r2, r3
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	3301      	adds	r3, #1
 801aee8:	223a      	movs	r2, #58	@ 0x3a
 801aeea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	3302      	adds	r3, #2
 801aef0:	222f      	movs	r2, #47	@ 0x2f
 801aef2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	3303      	adds	r3, #3
 801aef8:	2200      	movs	r2, #0
 801aefa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801aefc:	2300      	movs	r3, #0
 801aefe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801af00:	7dfb      	ldrb	r3, [r7, #23]
}
 801af02:	4618      	mov	r0, r3
 801af04:	371c      	adds	r7, #28
 801af06:	46bd      	mov	sp, r7
 801af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0c:	4770      	bx	lr
 801af0e:	bf00      	nop
 801af10:	24008500 	.word	0x24008500

0801af14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
 801af1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801af1e:	2200      	movs	r2, #0
 801af20:	6839      	ldr	r1, [r7, #0]
 801af22:	6878      	ldr	r0, [r7, #4]
 801af24:	f7ff ffaa 	bl	801ae7c <FATFS_LinkDriverEx>
 801af28:	4603      	mov	r3, r0
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3708      	adds	r7, #8
 801af2e:	46bd      	mov	sp, r7
 801af30:	bd80      	pop	{r7, pc}

0801af32 <atoi>:
 801af32:	220a      	movs	r2, #10
 801af34:	2100      	movs	r1, #0
 801af36:	f000 b87b 	b.w	801b030 <strtol>
	...

0801af3c <_strtol_l.isra.0>:
 801af3c:	2b24      	cmp	r3, #36	@ 0x24
 801af3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af42:	4686      	mov	lr, r0
 801af44:	4690      	mov	r8, r2
 801af46:	d801      	bhi.n	801af4c <_strtol_l.isra.0+0x10>
 801af48:	2b01      	cmp	r3, #1
 801af4a:	d106      	bne.n	801af5a <_strtol_l.isra.0+0x1e>
 801af4c:	f000 fb7c 	bl	801b648 <__errno>
 801af50:	2316      	movs	r3, #22
 801af52:	6003      	str	r3, [r0, #0]
 801af54:	2000      	movs	r0, #0
 801af56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af5a:	4834      	ldr	r0, [pc, #208]	@ (801b02c <_strtol_l.isra.0+0xf0>)
 801af5c:	460d      	mov	r5, r1
 801af5e:	462a      	mov	r2, r5
 801af60:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af64:	5d06      	ldrb	r6, [r0, r4]
 801af66:	f016 0608 	ands.w	r6, r6, #8
 801af6a:	d1f8      	bne.n	801af5e <_strtol_l.isra.0+0x22>
 801af6c:	2c2d      	cmp	r4, #45	@ 0x2d
 801af6e:	d110      	bne.n	801af92 <_strtol_l.isra.0+0x56>
 801af70:	782c      	ldrb	r4, [r5, #0]
 801af72:	2601      	movs	r6, #1
 801af74:	1c95      	adds	r5, r2, #2
 801af76:	f033 0210 	bics.w	r2, r3, #16
 801af7a:	d115      	bne.n	801afa8 <_strtol_l.isra.0+0x6c>
 801af7c:	2c30      	cmp	r4, #48	@ 0x30
 801af7e:	d10d      	bne.n	801af9c <_strtol_l.isra.0+0x60>
 801af80:	782a      	ldrb	r2, [r5, #0]
 801af82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801af86:	2a58      	cmp	r2, #88	@ 0x58
 801af88:	d108      	bne.n	801af9c <_strtol_l.isra.0+0x60>
 801af8a:	786c      	ldrb	r4, [r5, #1]
 801af8c:	3502      	adds	r5, #2
 801af8e:	2310      	movs	r3, #16
 801af90:	e00a      	b.n	801afa8 <_strtol_l.isra.0+0x6c>
 801af92:	2c2b      	cmp	r4, #43	@ 0x2b
 801af94:	bf04      	itt	eq
 801af96:	782c      	ldrbeq	r4, [r5, #0]
 801af98:	1c95      	addeq	r5, r2, #2
 801af9a:	e7ec      	b.n	801af76 <_strtol_l.isra.0+0x3a>
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d1f6      	bne.n	801af8e <_strtol_l.isra.0+0x52>
 801afa0:	2c30      	cmp	r4, #48	@ 0x30
 801afa2:	bf14      	ite	ne
 801afa4:	230a      	movne	r3, #10
 801afa6:	2308      	moveq	r3, #8
 801afa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801afac:	f10c 3cff 	add.w	ip, ip, #4294967295
 801afb0:	2200      	movs	r2, #0
 801afb2:	fbbc f9f3 	udiv	r9, ip, r3
 801afb6:	4610      	mov	r0, r2
 801afb8:	fb03 ca19 	mls	sl, r3, r9, ip
 801afbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801afc0:	2f09      	cmp	r7, #9
 801afc2:	d80f      	bhi.n	801afe4 <_strtol_l.isra.0+0xa8>
 801afc4:	463c      	mov	r4, r7
 801afc6:	42a3      	cmp	r3, r4
 801afc8:	dd1b      	ble.n	801b002 <_strtol_l.isra.0+0xc6>
 801afca:	1c57      	adds	r7, r2, #1
 801afcc:	d007      	beq.n	801afde <_strtol_l.isra.0+0xa2>
 801afce:	4581      	cmp	r9, r0
 801afd0:	d314      	bcc.n	801affc <_strtol_l.isra.0+0xc0>
 801afd2:	d101      	bne.n	801afd8 <_strtol_l.isra.0+0x9c>
 801afd4:	45a2      	cmp	sl, r4
 801afd6:	db11      	blt.n	801affc <_strtol_l.isra.0+0xc0>
 801afd8:	fb00 4003 	mla	r0, r0, r3, r4
 801afdc:	2201      	movs	r2, #1
 801afde:	f815 4b01 	ldrb.w	r4, [r5], #1
 801afe2:	e7eb      	b.n	801afbc <_strtol_l.isra.0+0x80>
 801afe4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801afe8:	2f19      	cmp	r7, #25
 801afea:	d801      	bhi.n	801aff0 <_strtol_l.isra.0+0xb4>
 801afec:	3c37      	subs	r4, #55	@ 0x37
 801afee:	e7ea      	b.n	801afc6 <_strtol_l.isra.0+0x8a>
 801aff0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801aff4:	2f19      	cmp	r7, #25
 801aff6:	d804      	bhi.n	801b002 <_strtol_l.isra.0+0xc6>
 801aff8:	3c57      	subs	r4, #87	@ 0x57
 801affa:	e7e4      	b.n	801afc6 <_strtol_l.isra.0+0x8a>
 801affc:	f04f 32ff 	mov.w	r2, #4294967295
 801b000:	e7ed      	b.n	801afde <_strtol_l.isra.0+0xa2>
 801b002:	1c53      	adds	r3, r2, #1
 801b004:	d108      	bne.n	801b018 <_strtol_l.isra.0+0xdc>
 801b006:	2322      	movs	r3, #34	@ 0x22
 801b008:	f8ce 3000 	str.w	r3, [lr]
 801b00c:	4660      	mov	r0, ip
 801b00e:	f1b8 0f00 	cmp.w	r8, #0
 801b012:	d0a0      	beq.n	801af56 <_strtol_l.isra.0+0x1a>
 801b014:	1e69      	subs	r1, r5, #1
 801b016:	e006      	b.n	801b026 <_strtol_l.isra.0+0xea>
 801b018:	b106      	cbz	r6, 801b01c <_strtol_l.isra.0+0xe0>
 801b01a:	4240      	negs	r0, r0
 801b01c:	f1b8 0f00 	cmp.w	r8, #0
 801b020:	d099      	beq.n	801af56 <_strtol_l.isra.0+0x1a>
 801b022:	2a00      	cmp	r2, #0
 801b024:	d1f6      	bne.n	801b014 <_strtol_l.isra.0+0xd8>
 801b026:	f8c8 1000 	str.w	r1, [r8]
 801b02a:	e794      	b.n	801af56 <_strtol_l.isra.0+0x1a>
 801b02c:	0802fb91 	.word	0x0802fb91

0801b030 <strtol>:
 801b030:	4613      	mov	r3, r2
 801b032:	460a      	mov	r2, r1
 801b034:	4601      	mov	r1, r0
 801b036:	4802      	ldr	r0, [pc, #8]	@ (801b040 <strtol+0x10>)
 801b038:	6800      	ldr	r0, [r0, #0]
 801b03a:	f7ff bf7f 	b.w	801af3c <_strtol_l.isra.0>
 801b03e:	bf00      	nop
 801b040:	2400001c 	.word	0x2400001c

0801b044 <std>:
 801b044:	2300      	movs	r3, #0
 801b046:	b510      	push	{r4, lr}
 801b048:	4604      	mov	r4, r0
 801b04a:	e9c0 3300 	strd	r3, r3, [r0]
 801b04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b052:	6083      	str	r3, [r0, #8]
 801b054:	8181      	strh	r1, [r0, #12]
 801b056:	6643      	str	r3, [r0, #100]	@ 0x64
 801b058:	81c2      	strh	r2, [r0, #14]
 801b05a:	6183      	str	r3, [r0, #24]
 801b05c:	4619      	mov	r1, r3
 801b05e:	2208      	movs	r2, #8
 801b060:	305c      	adds	r0, #92	@ 0x5c
 801b062:	f000 fa8d 	bl	801b580 <memset>
 801b066:	4b0d      	ldr	r3, [pc, #52]	@ (801b09c <std+0x58>)
 801b068:	6263      	str	r3, [r4, #36]	@ 0x24
 801b06a:	4b0d      	ldr	r3, [pc, #52]	@ (801b0a0 <std+0x5c>)
 801b06c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b06e:	4b0d      	ldr	r3, [pc, #52]	@ (801b0a4 <std+0x60>)
 801b070:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b072:	4b0d      	ldr	r3, [pc, #52]	@ (801b0a8 <std+0x64>)
 801b074:	6323      	str	r3, [r4, #48]	@ 0x30
 801b076:	4b0d      	ldr	r3, [pc, #52]	@ (801b0ac <std+0x68>)
 801b078:	6224      	str	r4, [r4, #32]
 801b07a:	429c      	cmp	r4, r3
 801b07c:	d006      	beq.n	801b08c <std+0x48>
 801b07e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b082:	4294      	cmp	r4, r2
 801b084:	d002      	beq.n	801b08c <std+0x48>
 801b086:	33d0      	adds	r3, #208	@ 0xd0
 801b088:	429c      	cmp	r4, r3
 801b08a:	d105      	bne.n	801b098 <std+0x54>
 801b08c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b094:	f000 bb02 	b.w	801b69c <__retarget_lock_init_recursive>
 801b098:	bd10      	pop	{r4, pc}
 801b09a:	bf00      	nop
 801b09c:	0801b359 	.word	0x0801b359
 801b0a0:	0801b37b 	.word	0x0801b37b
 801b0a4:	0801b3b3 	.word	0x0801b3b3
 801b0a8:	0801b3d7 	.word	0x0801b3d7
 801b0ac:	2400850c 	.word	0x2400850c

0801b0b0 <stdio_exit_handler>:
 801b0b0:	4a02      	ldr	r2, [pc, #8]	@ (801b0bc <stdio_exit_handler+0xc>)
 801b0b2:	4903      	ldr	r1, [pc, #12]	@ (801b0c0 <stdio_exit_handler+0x10>)
 801b0b4:	4803      	ldr	r0, [pc, #12]	@ (801b0c4 <stdio_exit_handler+0x14>)
 801b0b6:	f000 b869 	b.w	801b18c <_fwalk_sglue>
 801b0ba:	bf00      	nop
 801b0bc:	24000010 	.word	0x24000010
 801b0c0:	0801c205 	.word	0x0801c205
 801b0c4:	24000020 	.word	0x24000020

0801b0c8 <cleanup_stdio>:
 801b0c8:	6841      	ldr	r1, [r0, #4]
 801b0ca:	4b0c      	ldr	r3, [pc, #48]	@ (801b0fc <cleanup_stdio+0x34>)
 801b0cc:	4299      	cmp	r1, r3
 801b0ce:	b510      	push	{r4, lr}
 801b0d0:	4604      	mov	r4, r0
 801b0d2:	d001      	beq.n	801b0d8 <cleanup_stdio+0x10>
 801b0d4:	f001 f896 	bl	801c204 <_fflush_r>
 801b0d8:	68a1      	ldr	r1, [r4, #8]
 801b0da:	4b09      	ldr	r3, [pc, #36]	@ (801b100 <cleanup_stdio+0x38>)
 801b0dc:	4299      	cmp	r1, r3
 801b0de:	d002      	beq.n	801b0e6 <cleanup_stdio+0x1e>
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	f001 f88f 	bl	801c204 <_fflush_r>
 801b0e6:	68e1      	ldr	r1, [r4, #12]
 801b0e8:	4b06      	ldr	r3, [pc, #24]	@ (801b104 <cleanup_stdio+0x3c>)
 801b0ea:	4299      	cmp	r1, r3
 801b0ec:	d004      	beq.n	801b0f8 <cleanup_stdio+0x30>
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0f4:	f001 b886 	b.w	801c204 <_fflush_r>
 801b0f8:	bd10      	pop	{r4, pc}
 801b0fa:	bf00      	nop
 801b0fc:	2400850c 	.word	0x2400850c
 801b100:	24008574 	.word	0x24008574
 801b104:	240085dc 	.word	0x240085dc

0801b108 <global_stdio_init.part.0>:
 801b108:	b510      	push	{r4, lr}
 801b10a:	4b0b      	ldr	r3, [pc, #44]	@ (801b138 <global_stdio_init.part.0+0x30>)
 801b10c:	4c0b      	ldr	r4, [pc, #44]	@ (801b13c <global_stdio_init.part.0+0x34>)
 801b10e:	4a0c      	ldr	r2, [pc, #48]	@ (801b140 <global_stdio_init.part.0+0x38>)
 801b110:	601a      	str	r2, [r3, #0]
 801b112:	4620      	mov	r0, r4
 801b114:	2200      	movs	r2, #0
 801b116:	2104      	movs	r1, #4
 801b118:	f7ff ff94 	bl	801b044 <std>
 801b11c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b120:	2201      	movs	r2, #1
 801b122:	2109      	movs	r1, #9
 801b124:	f7ff ff8e 	bl	801b044 <std>
 801b128:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b12c:	2202      	movs	r2, #2
 801b12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b132:	2112      	movs	r1, #18
 801b134:	f7ff bf86 	b.w	801b044 <std>
 801b138:	24008644 	.word	0x24008644
 801b13c:	2400850c 	.word	0x2400850c
 801b140:	0801b0b1 	.word	0x0801b0b1

0801b144 <__sfp_lock_acquire>:
 801b144:	4801      	ldr	r0, [pc, #4]	@ (801b14c <__sfp_lock_acquire+0x8>)
 801b146:	f000 baaa 	b.w	801b69e <__retarget_lock_acquire_recursive>
 801b14a:	bf00      	nop
 801b14c:	2400864d 	.word	0x2400864d

0801b150 <__sfp_lock_release>:
 801b150:	4801      	ldr	r0, [pc, #4]	@ (801b158 <__sfp_lock_release+0x8>)
 801b152:	f000 baa5 	b.w	801b6a0 <__retarget_lock_release_recursive>
 801b156:	bf00      	nop
 801b158:	2400864d 	.word	0x2400864d

0801b15c <__sinit>:
 801b15c:	b510      	push	{r4, lr}
 801b15e:	4604      	mov	r4, r0
 801b160:	f7ff fff0 	bl	801b144 <__sfp_lock_acquire>
 801b164:	6a23      	ldr	r3, [r4, #32]
 801b166:	b11b      	cbz	r3, 801b170 <__sinit+0x14>
 801b168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b16c:	f7ff bff0 	b.w	801b150 <__sfp_lock_release>
 801b170:	4b04      	ldr	r3, [pc, #16]	@ (801b184 <__sinit+0x28>)
 801b172:	6223      	str	r3, [r4, #32]
 801b174:	4b04      	ldr	r3, [pc, #16]	@ (801b188 <__sinit+0x2c>)
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d1f5      	bne.n	801b168 <__sinit+0xc>
 801b17c:	f7ff ffc4 	bl	801b108 <global_stdio_init.part.0>
 801b180:	e7f2      	b.n	801b168 <__sinit+0xc>
 801b182:	bf00      	nop
 801b184:	0801b0c9 	.word	0x0801b0c9
 801b188:	24008644 	.word	0x24008644

0801b18c <_fwalk_sglue>:
 801b18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b190:	4607      	mov	r7, r0
 801b192:	4688      	mov	r8, r1
 801b194:	4614      	mov	r4, r2
 801b196:	2600      	movs	r6, #0
 801b198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b19c:	f1b9 0901 	subs.w	r9, r9, #1
 801b1a0:	d505      	bpl.n	801b1ae <_fwalk_sglue+0x22>
 801b1a2:	6824      	ldr	r4, [r4, #0]
 801b1a4:	2c00      	cmp	r4, #0
 801b1a6:	d1f7      	bne.n	801b198 <_fwalk_sglue+0xc>
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1ae:	89ab      	ldrh	r3, [r5, #12]
 801b1b0:	2b01      	cmp	r3, #1
 801b1b2:	d907      	bls.n	801b1c4 <_fwalk_sglue+0x38>
 801b1b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1b8:	3301      	adds	r3, #1
 801b1ba:	d003      	beq.n	801b1c4 <_fwalk_sglue+0x38>
 801b1bc:	4629      	mov	r1, r5
 801b1be:	4638      	mov	r0, r7
 801b1c0:	47c0      	blx	r8
 801b1c2:	4306      	orrs	r6, r0
 801b1c4:	3568      	adds	r5, #104	@ 0x68
 801b1c6:	e7e9      	b.n	801b19c <_fwalk_sglue+0x10>

0801b1c8 <iprintf>:
 801b1c8:	b40f      	push	{r0, r1, r2, r3}
 801b1ca:	b507      	push	{r0, r1, r2, lr}
 801b1cc:	4906      	ldr	r1, [pc, #24]	@ (801b1e8 <iprintf+0x20>)
 801b1ce:	ab04      	add	r3, sp, #16
 801b1d0:	6808      	ldr	r0, [r1, #0]
 801b1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1d6:	6881      	ldr	r1, [r0, #8]
 801b1d8:	9301      	str	r3, [sp, #4]
 801b1da:	f000 fceb 	bl	801bbb4 <_vfiprintf_r>
 801b1de:	b003      	add	sp, #12
 801b1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1e4:	b004      	add	sp, #16
 801b1e6:	4770      	bx	lr
 801b1e8:	2400001c 	.word	0x2400001c

0801b1ec <_puts_r>:
 801b1ec:	6a03      	ldr	r3, [r0, #32]
 801b1ee:	b570      	push	{r4, r5, r6, lr}
 801b1f0:	6884      	ldr	r4, [r0, #8]
 801b1f2:	4605      	mov	r5, r0
 801b1f4:	460e      	mov	r6, r1
 801b1f6:	b90b      	cbnz	r3, 801b1fc <_puts_r+0x10>
 801b1f8:	f7ff ffb0 	bl	801b15c <__sinit>
 801b1fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1fe:	07db      	lsls	r3, r3, #31
 801b200:	d405      	bmi.n	801b20e <_puts_r+0x22>
 801b202:	89a3      	ldrh	r3, [r4, #12]
 801b204:	0598      	lsls	r0, r3, #22
 801b206:	d402      	bmi.n	801b20e <_puts_r+0x22>
 801b208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b20a:	f000 fa48 	bl	801b69e <__retarget_lock_acquire_recursive>
 801b20e:	89a3      	ldrh	r3, [r4, #12]
 801b210:	0719      	lsls	r1, r3, #28
 801b212:	d502      	bpl.n	801b21a <_puts_r+0x2e>
 801b214:	6923      	ldr	r3, [r4, #16]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d135      	bne.n	801b286 <_puts_r+0x9a>
 801b21a:	4621      	mov	r1, r4
 801b21c:	4628      	mov	r0, r5
 801b21e:	f000 f959 	bl	801b4d4 <__swsetup_r>
 801b222:	b380      	cbz	r0, 801b286 <_puts_r+0x9a>
 801b224:	f04f 35ff 	mov.w	r5, #4294967295
 801b228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b22a:	07da      	lsls	r2, r3, #31
 801b22c:	d405      	bmi.n	801b23a <_puts_r+0x4e>
 801b22e:	89a3      	ldrh	r3, [r4, #12]
 801b230:	059b      	lsls	r3, r3, #22
 801b232:	d402      	bmi.n	801b23a <_puts_r+0x4e>
 801b234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b236:	f000 fa33 	bl	801b6a0 <__retarget_lock_release_recursive>
 801b23a:	4628      	mov	r0, r5
 801b23c:	bd70      	pop	{r4, r5, r6, pc}
 801b23e:	2b00      	cmp	r3, #0
 801b240:	da04      	bge.n	801b24c <_puts_r+0x60>
 801b242:	69a2      	ldr	r2, [r4, #24]
 801b244:	429a      	cmp	r2, r3
 801b246:	dc17      	bgt.n	801b278 <_puts_r+0x8c>
 801b248:	290a      	cmp	r1, #10
 801b24a:	d015      	beq.n	801b278 <_puts_r+0x8c>
 801b24c:	6823      	ldr	r3, [r4, #0]
 801b24e:	1c5a      	adds	r2, r3, #1
 801b250:	6022      	str	r2, [r4, #0]
 801b252:	7019      	strb	r1, [r3, #0]
 801b254:	68a3      	ldr	r3, [r4, #8]
 801b256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b25a:	3b01      	subs	r3, #1
 801b25c:	60a3      	str	r3, [r4, #8]
 801b25e:	2900      	cmp	r1, #0
 801b260:	d1ed      	bne.n	801b23e <_puts_r+0x52>
 801b262:	2b00      	cmp	r3, #0
 801b264:	da11      	bge.n	801b28a <_puts_r+0x9e>
 801b266:	4622      	mov	r2, r4
 801b268:	210a      	movs	r1, #10
 801b26a:	4628      	mov	r0, r5
 801b26c:	f000 f8f4 	bl	801b458 <__swbuf_r>
 801b270:	3001      	adds	r0, #1
 801b272:	d0d7      	beq.n	801b224 <_puts_r+0x38>
 801b274:	250a      	movs	r5, #10
 801b276:	e7d7      	b.n	801b228 <_puts_r+0x3c>
 801b278:	4622      	mov	r2, r4
 801b27a:	4628      	mov	r0, r5
 801b27c:	f000 f8ec 	bl	801b458 <__swbuf_r>
 801b280:	3001      	adds	r0, #1
 801b282:	d1e7      	bne.n	801b254 <_puts_r+0x68>
 801b284:	e7ce      	b.n	801b224 <_puts_r+0x38>
 801b286:	3e01      	subs	r6, #1
 801b288:	e7e4      	b.n	801b254 <_puts_r+0x68>
 801b28a:	6823      	ldr	r3, [r4, #0]
 801b28c:	1c5a      	adds	r2, r3, #1
 801b28e:	6022      	str	r2, [r4, #0]
 801b290:	220a      	movs	r2, #10
 801b292:	701a      	strb	r2, [r3, #0]
 801b294:	e7ee      	b.n	801b274 <_puts_r+0x88>
	...

0801b298 <puts>:
 801b298:	4b02      	ldr	r3, [pc, #8]	@ (801b2a4 <puts+0xc>)
 801b29a:	4601      	mov	r1, r0
 801b29c:	6818      	ldr	r0, [r3, #0]
 801b29e:	f7ff bfa5 	b.w	801b1ec <_puts_r>
 801b2a2:	bf00      	nop
 801b2a4:	2400001c 	.word	0x2400001c

0801b2a8 <sniprintf>:
 801b2a8:	b40c      	push	{r2, r3}
 801b2aa:	b530      	push	{r4, r5, lr}
 801b2ac:	4b18      	ldr	r3, [pc, #96]	@ (801b310 <sniprintf+0x68>)
 801b2ae:	1e0c      	subs	r4, r1, #0
 801b2b0:	681d      	ldr	r5, [r3, #0]
 801b2b2:	b09d      	sub	sp, #116	@ 0x74
 801b2b4:	da08      	bge.n	801b2c8 <sniprintf+0x20>
 801b2b6:	238b      	movs	r3, #139	@ 0x8b
 801b2b8:	602b      	str	r3, [r5, #0]
 801b2ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b2be:	b01d      	add	sp, #116	@ 0x74
 801b2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b2c4:	b002      	add	sp, #8
 801b2c6:	4770      	bx	lr
 801b2c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b2cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b2d0:	f04f 0300 	mov.w	r3, #0
 801b2d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b2d6:	bf14      	ite	ne
 801b2d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b2dc:	4623      	moveq	r3, r4
 801b2de:	9304      	str	r3, [sp, #16]
 801b2e0:	9307      	str	r3, [sp, #28]
 801b2e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b2e6:	9002      	str	r0, [sp, #8]
 801b2e8:	9006      	str	r0, [sp, #24]
 801b2ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b2ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b2f0:	ab21      	add	r3, sp, #132	@ 0x84
 801b2f2:	a902      	add	r1, sp, #8
 801b2f4:	4628      	mov	r0, r5
 801b2f6:	9301      	str	r3, [sp, #4]
 801b2f8:	f000 fb36 	bl	801b968 <_svfiprintf_r>
 801b2fc:	1c43      	adds	r3, r0, #1
 801b2fe:	bfbc      	itt	lt
 801b300:	238b      	movlt	r3, #139	@ 0x8b
 801b302:	602b      	strlt	r3, [r5, #0]
 801b304:	2c00      	cmp	r4, #0
 801b306:	d0da      	beq.n	801b2be <sniprintf+0x16>
 801b308:	9b02      	ldr	r3, [sp, #8]
 801b30a:	2200      	movs	r2, #0
 801b30c:	701a      	strb	r2, [r3, #0]
 801b30e:	e7d6      	b.n	801b2be <sniprintf+0x16>
 801b310:	2400001c 	.word	0x2400001c

0801b314 <siprintf>:
 801b314:	b40e      	push	{r1, r2, r3}
 801b316:	b510      	push	{r4, lr}
 801b318:	b09d      	sub	sp, #116	@ 0x74
 801b31a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b31c:	9002      	str	r0, [sp, #8]
 801b31e:	9006      	str	r0, [sp, #24]
 801b320:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b324:	480a      	ldr	r0, [pc, #40]	@ (801b350 <siprintf+0x3c>)
 801b326:	9107      	str	r1, [sp, #28]
 801b328:	9104      	str	r1, [sp, #16]
 801b32a:	490a      	ldr	r1, [pc, #40]	@ (801b354 <siprintf+0x40>)
 801b32c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b330:	9105      	str	r1, [sp, #20]
 801b332:	2400      	movs	r4, #0
 801b334:	a902      	add	r1, sp, #8
 801b336:	6800      	ldr	r0, [r0, #0]
 801b338:	9301      	str	r3, [sp, #4]
 801b33a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b33c:	f000 fb14 	bl	801b968 <_svfiprintf_r>
 801b340:	9b02      	ldr	r3, [sp, #8]
 801b342:	701c      	strb	r4, [r3, #0]
 801b344:	b01d      	add	sp, #116	@ 0x74
 801b346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b34a:	b003      	add	sp, #12
 801b34c:	4770      	bx	lr
 801b34e:	bf00      	nop
 801b350:	2400001c 	.word	0x2400001c
 801b354:	ffff0208 	.word	0xffff0208

0801b358 <__sread>:
 801b358:	b510      	push	{r4, lr}
 801b35a:	460c      	mov	r4, r1
 801b35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b360:	f000 f94e 	bl	801b600 <_read_r>
 801b364:	2800      	cmp	r0, #0
 801b366:	bfab      	itete	ge
 801b368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b36a:	89a3      	ldrhlt	r3, [r4, #12]
 801b36c:	181b      	addge	r3, r3, r0
 801b36e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b372:	bfac      	ite	ge
 801b374:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b376:	81a3      	strhlt	r3, [r4, #12]
 801b378:	bd10      	pop	{r4, pc}

0801b37a <__swrite>:
 801b37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b37e:	461f      	mov	r7, r3
 801b380:	898b      	ldrh	r3, [r1, #12]
 801b382:	05db      	lsls	r3, r3, #23
 801b384:	4605      	mov	r5, r0
 801b386:	460c      	mov	r4, r1
 801b388:	4616      	mov	r6, r2
 801b38a:	d505      	bpl.n	801b398 <__swrite+0x1e>
 801b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b390:	2302      	movs	r3, #2
 801b392:	2200      	movs	r2, #0
 801b394:	f000 f922 	bl	801b5dc <_lseek_r>
 801b398:	89a3      	ldrh	r3, [r4, #12]
 801b39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b39e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b3a2:	81a3      	strh	r3, [r4, #12]
 801b3a4:	4632      	mov	r2, r6
 801b3a6:	463b      	mov	r3, r7
 801b3a8:	4628      	mov	r0, r5
 801b3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3ae:	f000 b939 	b.w	801b624 <_write_r>

0801b3b2 <__sseek>:
 801b3b2:	b510      	push	{r4, lr}
 801b3b4:	460c      	mov	r4, r1
 801b3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3ba:	f000 f90f 	bl	801b5dc <_lseek_r>
 801b3be:	1c43      	adds	r3, r0, #1
 801b3c0:	89a3      	ldrh	r3, [r4, #12]
 801b3c2:	bf15      	itete	ne
 801b3c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b3c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b3ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b3ce:	81a3      	strheq	r3, [r4, #12]
 801b3d0:	bf18      	it	ne
 801b3d2:	81a3      	strhne	r3, [r4, #12]
 801b3d4:	bd10      	pop	{r4, pc}

0801b3d6 <__sclose>:
 801b3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3da:	f000 b8ef 	b.w	801b5bc <_close_r>

0801b3de <_vsniprintf_r>:
 801b3de:	b530      	push	{r4, r5, lr}
 801b3e0:	4614      	mov	r4, r2
 801b3e2:	2c00      	cmp	r4, #0
 801b3e4:	b09b      	sub	sp, #108	@ 0x6c
 801b3e6:	4605      	mov	r5, r0
 801b3e8:	461a      	mov	r2, r3
 801b3ea:	da05      	bge.n	801b3f8 <_vsniprintf_r+0x1a>
 801b3ec:	238b      	movs	r3, #139	@ 0x8b
 801b3ee:	6003      	str	r3, [r0, #0]
 801b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3f4:	b01b      	add	sp, #108	@ 0x6c
 801b3f6:	bd30      	pop	{r4, r5, pc}
 801b3f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b3fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b400:	f04f 0300 	mov.w	r3, #0
 801b404:	9319      	str	r3, [sp, #100]	@ 0x64
 801b406:	bf14      	ite	ne
 801b408:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b40c:	4623      	moveq	r3, r4
 801b40e:	9302      	str	r3, [sp, #8]
 801b410:	9305      	str	r3, [sp, #20]
 801b412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b416:	9100      	str	r1, [sp, #0]
 801b418:	9104      	str	r1, [sp, #16]
 801b41a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b41e:	4669      	mov	r1, sp
 801b420:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b422:	f000 faa1 	bl	801b968 <_svfiprintf_r>
 801b426:	1c43      	adds	r3, r0, #1
 801b428:	bfbc      	itt	lt
 801b42a:	238b      	movlt	r3, #139	@ 0x8b
 801b42c:	602b      	strlt	r3, [r5, #0]
 801b42e:	2c00      	cmp	r4, #0
 801b430:	d0e0      	beq.n	801b3f4 <_vsniprintf_r+0x16>
 801b432:	9b00      	ldr	r3, [sp, #0]
 801b434:	2200      	movs	r2, #0
 801b436:	701a      	strb	r2, [r3, #0]
 801b438:	e7dc      	b.n	801b3f4 <_vsniprintf_r+0x16>
	...

0801b43c <vsniprintf>:
 801b43c:	b507      	push	{r0, r1, r2, lr}
 801b43e:	9300      	str	r3, [sp, #0]
 801b440:	4613      	mov	r3, r2
 801b442:	460a      	mov	r2, r1
 801b444:	4601      	mov	r1, r0
 801b446:	4803      	ldr	r0, [pc, #12]	@ (801b454 <vsniprintf+0x18>)
 801b448:	6800      	ldr	r0, [r0, #0]
 801b44a:	f7ff ffc8 	bl	801b3de <_vsniprintf_r>
 801b44e:	b003      	add	sp, #12
 801b450:	f85d fb04 	ldr.w	pc, [sp], #4
 801b454:	2400001c 	.word	0x2400001c

0801b458 <__swbuf_r>:
 801b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b45a:	460e      	mov	r6, r1
 801b45c:	4614      	mov	r4, r2
 801b45e:	4605      	mov	r5, r0
 801b460:	b118      	cbz	r0, 801b46a <__swbuf_r+0x12>
 801b462:	6a03      	ldr	r3, [r0, #32]
 801b464:	b90b      	cbnz	r3, 801b46a <__swbuf_r+0x12>
 801b466:	f7ff fe79 	bl	801b15c <__sinit>
 801b46a:	69a3      	ldr	r3, [r4, #24]
 801b46c:	60a3      	str	r3, [r4, #8]
 801b46e:	89a3      	ldrh	r3, [r4, #12]
 801b470:	071a      	lsls	r2, r3, #28
 801b472:	d501      	bpl.n	801b478 <__swbuf_r+0x20>
 801b474:	6923      	ldr	r3, [r4, #16]
 801b476:	b943      	cbnz	r3, 801b48a <__swbuf_r+0x32>
 801b478:	4621      	mov	r1, r4
 801b47a:	4628      	mov	r0, r5
 801b47c:	f000 f82a 	bl	801b4d4 <__swsetup_r>
 801b480:	b118      	cbz	r0, 801b48a <__swbuf_r+0x32>
 801b482:	f04f 37ff 	mov.w	r7, #4294967295
 801b486:	4638      	mov	r0, r7
 801b488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b48a:	6823      	ldr	r3, [r4, #0]
 801b48c:	6922      	ldr	r2, [r4, #16]
 801b48e:	1a98      	subs	r0, r3, r2
 801b490:	6963      	ldr	r3, [r4, #20]
 801b492:	b2f6      	uxtb	r6, r6
 801b494:	4283      	cmp	r3, r0
 801b496:	4637      	mov	r7, r6
 801b498:	dc05      	bgt.n	801b4a6 <__swbuf_r+0x4e>
 801b49a:	4621      	mov	r1, r4
 801b49c:	4628      	mov	r0, r5
 801b49e:	f000 feb1 	bl	801c204 <_fflush_r>
 801b4a2:	2800      	cmp	r0, #0
 801b4a4:	d1ed      	bne.n	801b482 <__swbuf_r+0x2a>
 801b4a6:	68a3      	ldr	r3, [r4, #8]
 801b4a8:	3b01      	subs	r3, #1
 801b4aa:	60a3      	str	r3, [r4, #8]
 801b4ac:	6823      	ldr	r3, [r4, #0]
 801b4ae:	1c5a      	adds	r2, r3, #1
 801b4b0:	6022      	str	r2, [r4, #0]
 801b4b2:	701e      	strb	r6, [r3, #0]
 801b4b4:	6962      	ldr	r2, [r4, #20]
 801b4b6:	1c43      	adds	r3, r0, #1
 801b4b8:	429a      	cmp	r2, r3
 801b4ba:	d004      	beq.n	801b4c6 <__swbuf_r+0x6e>
 801b4bc:	89a3      	ldrh	r3, [r4, #12]
 801b4be:	07db      	lsls	r3, r3, #31
 801b4c0:	d5e1      	bpl.n	801b486 <__swbuf_r+0x2e>
 801b4c2:	2e0a      	cmp	r6, #10
 801b4c4:	d1df      	bne.n	801b486 <__swbuf_r+0x2e>
 801b4c6:	4621      	mov	r1, r4
 801b4c8:	4628      	mov	r0, r5
 801b4ca:	f000 fe9b 	bl	801c204 <_fflush_r>
 801b4ce:	2800      	cmp	r0, #0
 801b4d0:	d0d9      	beq.n	801b486 <__swbuf_r+0x2e>
 801b4d2:	e7d6      	b.n	801b482 <__swbuf_r+0x2a>

0801b4d4 <__swsetup_r>:
 801b4d4:	b538      	push	{r3, r4, r5, lr}
 801b4d6:	4b29      	ldr	r3, [pc, #164]	@ (801b57c <__swsetup_r+0xa8>)
 801b4d8:	4605      	mov	r5, r0
 801b4da:	6818      	ldr	r0, [r3, #0]
 801b4dc:	460c      	mov	r4, r1
 801b4de:	b118      	cbz	r0, 801b4e8 <__swsetup_r+0x14>
 801b4e0:	6a03      	ldr	r3, [r0, #32]
 801b4e2:	b90b      	cbnz	r3, 801b4e8 <__swsetup_r+0x14>
 801b4e4:	f7ff fe3a 	bl	801b15c <__sinit>
 801b4e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4ec:	0719      	lsls	r1, r3, #28
 801b4ee:	d422      	bmi.n	801b536 <__swsetup_r+0x62>
 801b4f0:	06da      	lsls	r2, r3, #27
 801b4f2:	d407      	bmi.n	801b504 <__swsetup_r+0x30>
 801b4f4:	2209      	movs	r2, #9
 801b4f6:	602a      	str	r2, [r5, #0]
 801b4f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4fc:	81a3      	strh	r3, [r4, #12]
 801b4fe:	f04f 30ff 	mov.w	r0, #4294967295
 801b502:	e033      	b.n	801b56c <__swsetup_r+0x98>
 801b504:	0758      	lsls	r0, r3, #29
 801b506:	d512      	bpl.n	801b52e <__swsetup_r+0x5a>
 801b508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b50a:	b141      	cbz	r1, 801b51e <__swsetup_r+0x4a>
 801b50c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b510:	4299      	cmp	r1, r3
 801b512:	d002      	beq.n	801b51a <__swsetup_r+0x46>
 801b514:	4628      	mov	r0, r5
 801b516:	f000 f8d3 	bl	801b6c0 <_free_r>
 801b51a:	2300      	movs	r3, #0
 801b51c:	6363      	str	r3, [r4, #52]	@ 0x34
 801b51e:	89a3      	ldrh	r3, [r4, #12]
 801b520:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b524:	81a3      	strh	r3, [r4, #12]
 801b526:	2300      	movs	r3, #0
 801b528:	6063      	str	r3, [r4, #4]
 801b52a:	6923      	ldr	r3, [r4, #16]
 801b52c:	6023      	str	r3, [r4, #0]
 801b52e:	89a3      	ldrh	r3, [r4, #12]
 801b530:	f043 0308 	orr.w	r3, r3, #8
 801b534:	81a3      	strh	r3, [r4, #12]
 801b536:	6923      	ldr	r3, [r4, #16]
 801b538:	b94b      	cbnz	r3, 801b54e <__swsetup_r+0x7a>
 801b53a:	89a3      	ldrh	r3, [r4, #12]
 801b53c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b544:	d003      	beq.n	801b54e <__swsetup_r+0x7a>
 801b546:	4621      	mov	r1, r4
 801b548:	4628      	mov	r0, r5
 801b54a:	f000 fea9 	bl	801c2a0 <__smakebuf_r>
 801b54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b552:	f013 0201 	ands.w	r2, r3, #1
 801b556:	d00a      	beq.n	801b56e <__swsetup_r+0x9a>
 801b558:	2200      	movs	r2, #0
 801b55a:	60a2      	str	r2, [r4, #8]
 801b55c:	6962      	ldr	r2, [r4, #20]
 801b55e:	4252      	negs	r2, r2
 801b560:	61a2      	str	r2, [r4, #24]
 801b562:	6922      	ldr	r2, [r4, #16]
 801b564:	b942      	cbnz	r2, 801b578 <__swsetup_r+0xa4>
 801b566:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b56a:	d1c5      	bne.n	801b4f8 <__swsetup_r+0x24>
 801b56c:	bd38      	pop	{r3, r4, r5, pc}
 801b56e:	0799      	lsls	r1, r3, #30
 801b570:	bf58      	it	pl
 801b572:	6962      	ldrpl	r2, [r4, #20]
 801b574:	60a2      	str	r2, [r4, #8]
 801b576:	e7f4      	b.n	801b562 <__swsetup_r+0x8e>
 801b578:	2000      	movs	r0, #0
 801b57a:	e7f7      	b.n	801b56c <__swsetup_r+0x98>
 801b57c:	2400001c 	.word	0x2400001c

0801b580 <memset>:
 801b580:	4402      	add	r2, r0
 801b582:	4603      	mov	r3, r0
 801b584:	4293      	cmp	r3, r2
 801b586:	d100      	bne.n	801b58a <memset+0xa>
 801b588:	4770      	bx	lr
 801b58a:	f803 1b01 	strb.w	r1, [r3], #1
 801b58e:	e7f9      	b.n	801b584 <memset+0x4>

0801b590 <strstr>:
 801b590:	780a      	ldrb	r2, [r1, #0]
 801b592:	b570      	push	{r4, r5, r6, lr}
 801b594:	b96a      	cbnz	r2, 801b5b2 <strstr+0x22>
 801b596:	bd70      	pop	{r4, r5, r6, pc}
 801b598:	429a      	cmp	r2, r3
 801b59a:	d109      	bne.n	801b5b0 <strstr+0x20>
 801b59c:	460c      	mov	r4, r1
 801b59e:	4605      	mov	r5, r0
 801b5a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d0f6      	beq.n	801b596 <strstr+0x6>
 801b5a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b5ac:	429e      	cmp	r6, r3
 801b5ae:	d0f7      	beq.n	801b5a0 <strstr+0x10>
 801b5b0:	3001      	adds	r0, #1
 801b5b2:	7803      	ldrb	r3, [r0, #0]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d1ef      	bne.n	801b598 <strstr+0x8>
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	e7ec      	b.n	801b596 <strstr+0x6>

0801b5bc <_close_r>:
 801b5bc:	b538      	push	{r3, r4, r5, lr}
 801b5be:	4d06      	ldr	r5, [pc, #24]	@ (801b5d8 <_close_r+0x1c>)
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	4604      	mov	r4, r0
 801b5c4:	4608      	mov	r0, r1
 801b5c6:	602b      	str	r3, [r5, #0]
 801b5c8:	f7e6 febb 	bl	8002342 <_close>
 801b5cc:	1c43      	adds	r3, r0, #1
 801b5ce:	d102      	bne.n	801b5d6 <_close_r+0x1a>
 801b5d0:	682b      	ldr	r3, [r5, #0]
 801b5d2:	b103      	cbz	r3, 801b5d6 <_close_r+0x1a>
 801b5d4:	6023      	str	r3, [r4, #0]
 801b5d6:	bd38      	pop	{r3, r4, r5, pc}
 801b5d8:	24008648 	.word	0x24008648

0801b5dc <_lseek_r>:
 801b5dc:	b538      	push	{r3, r4, r5, lr}
 801b5de:	4d07      	ldr	r5, [pc, #28]	@ (801b5fc <_lseek_r+0x20>)
 801b5e0:	4604      	mov	r4, r0
 801b5e2:	4608      	mov	r0, r1
 801b5e4:	4611      	mov	r1, r2
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	602a      	str	r2, [r5, #0]
 801b5ea:	461a      	mov	r2, r3
 801b5ec:	f7e6 fed0 	bl	8002390 <_lseek>
 801b5f0:	1c43      	adds	r3, r0, #1
 801b5f2:	d102      	bne.n	801b5fa <_lseek_r+0x1e>
 801b5f4:	682b      	ldr	r3, [r5, #0]
 801b5f6:	b103      	cbz	r3, 801b5fa <_lseek_r+0x1e>
 801b5f8:	6023      	str	r3, [r4, #0]
 801b5fa:	bd38      	pop	{r3, r4, r5, pc}
 801b5fc:	24008648 	.word	0x24008648

0801b600 <_read_r>:
 801b600:	b538      	push	{r3, r4, r5, lr}
 801b602:	4d07      	ldr	r5, [pc, #28]	@ (801b620 <_read_r+0x20>)
 801b604:	4604      	mov	r4, r0
 801b606:	4608      	mov	r0, r1
 801b608:	4611      	mov	r1, r2
 801b60a:	2200      	movs	r2, #0
 801b60c:	602a      	str	r2, [r5, #0]
 801b60e:	461a      	mov	r2, r3
 801b610:	f7e6 fe5e 	bl	80022d0 <_read>
 801b614:	1c43      	adds	r3, r0, #1
 801b616:	d102      	bne.n	801b61e <_read_r+0x1e>
 801b618:	682b      	ldr	r3, [r5, #0]
 801b61a:	b103      	cbz	r3, 801b61e <_read_r+0x1e>
 801b61c:	6023      	str	r3, [r4, #0]
 801b61e:	bd38      	pop	{r3, r4, r5, pc}
 801b620:	24008648 	.word	0x24008648

0801b624 <_write_r>:
 801b624:	b538      	push	{r3, r4, r5, lr}
 801b626:	4d07      	ldr	r5, [pc, #28]	@ (801b644 <_write_r+0x20>)
 801b628:	4604      	mov	r4, r0
 801b62a:	4608      	mov	r0, r1
 801b62c:	4611      	mov	r1, r2
 801b62e:	2200      	movs	r2, #0
 801b630:	602a      	str	r2, [r5, #0]
 801b632:	461a      	mov	r2, r3
 801b634:	f7e6 fe69 	bl	800230a <_write>
 801b638:	1c43      	adds	r3, r0, #1
 801b63a:	d102      	bne.n	801b642 <_write_r+0x1e>
 801b63c:	682b      	ldr	r3, [r5, #0]
 801b63e:	b103      	cbz	r3, 801b642 <_write_r+0x1e>
 801b640:	6023      	str	r3, [r4, #0]
 801b642:	bd38      	pop	{r3, r4, r5, pc}
 801b644:	24008648 	.word	0x24008648

0801b648 <__errno>:
 801b648:	4b01      	ldr	r3, [pc, #4]	@ (801b650 <__errno+0x8>)
 801b64a:	6818      	ldr	r0, [r3, #0]
 801b64c:	4770      	bx	lr
 801b64e:	bf00      	nop
 801b650:	2400001c 	.word	0x2400001c

0801b654 <__libc_init_array>:
 801b654:	b570      	push	{r4, r5, r6, lr}
 801b656:	4d0d      	ldr	r5, [pc, #52]	@ (801b68c <__libc_init_array+0x38>)
 801b658:	4c0d      	ldr	r4, [pc, #52]	@ (801b690 <__libc_init_array+0x3c>)
 801b65a:	1b64      	subs	r4, r4, r5
 801b65c:	10a4      	asrs	r4, r4, #2
 801b65e:	2600      	movs	r6, #0
 801b660:	42a6      	cmp	r6, r4
 801b662:	d109      	bne.n	801b678 <__libc_init_array+0x24>
 801b664:	4d0b      	ldr	r5, [pc, #44]	@ (801b694 <__libc_init_array+0x40>)
 801b666:	4c0c      	ldr	r4, [pc, #48]	@ (801b698 <__libc_init_array+0x44>)
 801b668:	f000 fed8 	bl	801c41c <_init>
 801b66c:	1b64      	subs	r4, r4, r5
 801b66e:	10a4      	asrs	r4, r4, #2
 801b670:	2600      	movs	r6, #0
 801b672:	42a6      	cmp	r6, r4
 801b674:	d105      	bne.n	801b682 <__libc_init_array+0x2e>
 801b676:	bd70      	pop	{r4, r5, r6, pc}
 801b678:	f855 3b04 	ldr.w	r3, [r5], #4
 801b67c:	4798      	blx	r3
 801b67e:	3601      	adds	r6, #1
 801b680:	e7ee      	b.n	801b660 <__libc_init_array+0xc>
 801b682:	f855 3b04 	ldr.w	r3, [r5], #4
 801b686:	4798      	blx	r3
 801b688:	3601      	adds	r6, #1
 801b68a:	e7f2      	b.n	801b672 <__libc_init_array+0x1e>
 801b68c:	0802fccc 	.word	0x0802fccc
 801b690:	0802fccc 	.word	0x0802fccc
 801b694:	0802fccc 	.word	0x0802fccc
 801b698:	0802fcd0 	.word	0x0802fcd0

0801b69c <__retarget_lock_init_recursive>:
 801b69c:	4770      	bx	lr

0801b69e <__retarget_lock_acquire_recursive>:
 801b69e:	4770      	bx	lr

0801b6a0 <__retarget_lock_release_recursive>:
 801b6a0:	4770      	bx	lr

0801b6a2 <memcpy>:
 801b6a2:	440a      	add	r2, r1
 801b6a4:	4291      	cmp	r1, r2
 801b6a6:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6aa:	d100      	bne.n	801b6ae <memcpy+0xc>
 801b6ac:	4770      	bx	lr
 801b6ae:	b510      	push	{r4, lr}
 801b6b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6b8:	4291      	cmp	r1, r2
 801b6ba:	d1f9      	bne.n	801b6b0 <memcpy+0xe>
 801b6bc:	bd10      	pop	{r4, pc}
	...

0801b6c0 <_free_r>:
 801b6c0:	b538      	push	{r3, r4, r5, lr}
 801b6c2:	4605      	mov	r5, r0
 801b6c4:	2900      	cmp	r1, #0
 801b6c6:	d041      	beq.n	801b74c <_free_r+0x8c>
 801b6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6cc:	1f0c      	subs	r4, r1, #4
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	bfb8      	it	lt
 801b6d2:	18e4      	addlt	r4, r4, r3
 801b6d4:	f000 f8e0 	bl	801b898 <__malloc_lock>
 801b6d8:	4a1d      	ldr	r2, [pc, #116]	@ (801b750 <_free_r+0x90>)
 801b6da:	6813      	ldr	r3, [r2, #0]
 801b6dc:	b933      	cbnz	r3, 801b6ec <_free_r+0x2c>
 801b6de:	6063      	str	r3, [r4, #4]
 801b6e0:	6014      	str	r4, [r2, #0]
 801b6e2:	4628      	mov	r0, r5
 801b6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b6e8:	f000 b8dc 	b.w	801b8a4 <__malloc_unlock>
 801b6ec:	42a3      	cmp	r3, r4
 801b6ee:	d908      	bls.n	801b702 <_free_r+0x42>
 801b6f0:	6820      	ldr	r0, [r4, #0]
 801b6f2:	1821      	adds	r1, r4, r0
 801b6f4:	428b      	cmp	r3, r1
 801b6f6:	bf01      	itttt	eq
 801b6f8:	6819      	ldreq	r1, [r3, #0]
 801b6fa:	685b      	ldreq	r3, [r3, #4]
 801b6fc:	1809      	addeq	r1, r1, r0
 801b6fe:	6021      	streq	r1, [r4, #0]
 801b700:	e7ed      	b.n	801b6de <_free_r+0x1e>
 801b702:	461a      	mov	r2, r3
 801b704:	685b      	ldr	r3, [r3, #4]
 801b706:	b10b      	cbz	r3, 801b70c <_free_r+0x4c>
 801b708:	42a3      	cmp	r3, r4
 801b70a:	d9fa      	bls.n	801b702 <_free_r+0x42>
 801b70c:	6811      	ldr	r1, [r2, #0]
 801b70e:	1850      	adds	r0, r2, r1
 801b710:	42a0      	cmp	r0, r4
 801b712:	d10b      	bne.n	801b72c <_free_r+0x6c>
 801b714:	6820      	ldr	r0, [r4, #0]
 801b716:	4401      	add	r1, r0
 801b718:	1850      	adds	r0, r2, r1
 801b71a:	4283      	cmp	r3, r0
 801b71c:	6011      	str	r1, [r2, #0]
 801b71e:	d1e0      	bne.n	801b6e2 <_free_r+0x22>
 801b720:	6818      	ldr	r0, [r3, #0]
 801b722:	685b      	ldr	r3, [r3, #4]
 801b724:	6053      	str	r3, [r2, #4]
 801b726:	4408      	add	r0, r1
 801b728:	6010      	str	r0, [r2, #0]
 801b72a:	e7da      	b.n	801b6e2 <_free_r+0x22>
 801b72c:	d902      	bls.n	801b734 <_free_r+0x74>
 801b72e:	230c      	movs	r3, #12
 801b730:	602b      	str	r3, [r5, #0]
 801b732:	e7d6      	b.n	801b6e2 <_free_r+0x22>
 801b734:	6820      	ldr	r0, [r4, #0]
 801b736:	1821      	adds	r1, r4, r0
 801b738:	428b      	cmp	r3, r1
 801b73a:	bf04      	itt	eq
 801b73c:	6819      	ldreq	r1, [r3, #0]
 801b73e:	685b      	ldreq	r3, [r3, #4]
 801b740:	6063      	str	r3, [r4, #4]
 801b742:	bf04      	itt	eq
 801b744:	1809      	addeq	r1, r1, r0
 801b746:	6021      	streq	r1, [r4, #0]
 801b748:	6054      	str	r4, [r2, #4]
 801b74a:	e7ca      	b.n	801b6e2 <_free_r+0x22>
 801b74c:	bd38      	pop	{r3, r4, r5, pc}
 801b74e:	bf00      	nop
 801b750:	24008654 	.word	0x24008654

0801b754 <sbrk_aligned>:
 801b754:	b570      	push	{r4, r5, r6, lr}
 801b756:	4e0f      	ldr	r6, [pc, #60]	@ (801b794 <sbrk_aligned+0x40>)
 801b758:	460c      	mov	r4, r1
 801b75a:	6831      	ldr	r1, [r6, #0]
 801b75c:	4605      	mov	r5, r0
 801b75e:	b911      	cbnz	r1, 801b766 <sbrk_aligned+0x12>
 801b760:	f000 fe16 	bl	801c390 <_sbrk_r>
 801b764:	6030      	str	r0, [r6, #0]
 801b766:	4621      	mov	r1, r4
 801b768:	4628      	mov	r0, r5
 801b76a:	f000 fe11 	bl	801c390 <_sbrk_r>
 801b76e:	1c43      	adds	r3, r0, #1
 801b770:	d103      	bne.n	801b77a <sbrk_aligned+0x26>
 801b772:	f04f 34ff 	mov.w	r4, #4294967295
 801b776:	4620      	mov	r0, r4
 801b778:	bd70      	pop	{r4, r5, r6, pc}
 801b77a:	1cc4      	adds	r4, r0, #3
 801b77c:	f024 0403 	bic.w	r4, r4, #3
 801b780:	42a0      	cmp	r0, r4
 801b782:	d0f8      	beq.n	801b776 <sbrk_aligned+0x22>
 801b784:	1a21      	subs	r1, r4, r0
 801b786:	4628      	mov	r0, r5
 801b788:	f000 fe02 	bl	801c390 <_sbrk_r>
 801b78c:	3001      	adds	r0, #1
 801b78e:	d1f2      	bne.n	801b776 <sbrk_aligned+0x22>
 801b790:	e7ef      	b.n	801b772 <sbrk_aligned+0x1e>
 801b792:	bf00      	nop
 801b794:	24008650 	.word	0x24008650

0801b798 <_malloc_r>:
 801b798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b79c:	1ccd      	adds	r5, r1, #3
 801b79e:	f025 0503 	bic.w	r5, r5, #3
 801b7a2:	3508      	adds	r5, #8
 801b7a4:	2d0c      	cmp	r5, #12
 801b7a6:	bf38      	it	cc
 801b7a8:	250c      	movcc	r5, #12
 801b7aa:	2d00      	cmp	r5, #0
 801b7ac:	4606      	mov	r6, r0
 801b7ae:	db01      	blt.n	801b7b4 <_malloc_r+0x1c>
 801b7b0:	42a9      	cmp	r1, r5
 801b7b2:	d904      	bls.n	801b7be <_malloc_r+0x26>
 801b7b4:	230c      	movs	r3, #12
 801b7b6:	6033      	str	r3, [r6, #0]
 801b7b8:	2000      	movs	r0, #0
 801b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b894 <_malloc_r+0xfc>
 801b7c2:	f000 f869 	bl	801b898 <__malloc_lock>
 801b7c6:	f8d8 3000 	ldr.w	r3, [r8]
 801b7ca:	461c      	mov	r4, r3
 801b7cc:	bb44      	cbnz	r4, 801b820 <_malloc_r+0x88>
 801b7ce:	4629      	mov	r1, r5
 801b7d0:	4630      	mov	r0, r6
 801b7d2:	f7ff ffbf 	bl	801b754 <sbrk_aligned>
 801b7d6:	1c43      	adds	r3, r0, #1
 801b7d8:	4604      	mov	r4, r0
 801b7da:	d158      	bne.n	801b88e <_malloc_r+0xf6>
 801b7dc:	f8d8 4000 	ldr.w	r4, [r8]
 801b7e0:	4627      	mov	r7, r4
 801b7e2:	2f00      	cmp	r7, #0
 801b7e4:	d143      	bne.n	801b86e <_malloc_r+0xd6>
 801b7e6:	2c00      	cmp	r4, #0
 801b7e8:	d04b      	beq.n	801b882 <_malloc_r+0xea>
 801b7ea:	6823      	ldr	r3, [r4, #0]
 801b7ec:	4639      	mov	r1, r7
 801b7ee:	4630      	mov	r0, r6
 801b7f0:	eb04 0903 	add.w	r9, r4, r3
 801b7f4:	f000 fdcc 	bl	801c390 <_sbrk_r>
 801b7f8:	4581      	cmp	r9, r0
 801b7fa:	d142      	bne.n	801b882 <_malloc_r+0xea>
 801b7fc:	6821      	ldr	r1, [r4, #0]
 801b7fe:	1a6d      	subs	r5, r5, r1
 801b800:	4629      	mov	r1, r5
 801b802:	4630      	mov	r0, r6
 801b804:	f7ff ffa6 	bl	801b754 <sbrk_aligned>
 801b808:	3001      	adds	r0, #1
 801b80a:	d03a      	beq.n	801b882 <_malloc_r+0xea>
 801b80c:	6823      	ldr	r3, [r4, #0]
 801b80e:	442b      	add	r3, r5
 801b810:	6023      	str	r3, [r4, #0]
 801b812:	f8d8 3000 	ldr.w	r3, [r8]
 801b816:	685a      	ldr	r2, [r3, #4]
 801b818:	bb62      	cbnz	r2, 801b874 <_malloc_r+0xdc>
 801b81a:	f8c8 7000 	str.w	r7, [r8]
 801b81e:	e00f      	b.n	801b840 <_malloc_r+0xa8>
 801b820:	6822      	ldr	r2, [r4, #0]
 801b822:	1b52      	subs	r2, r2, r5
 801b824:	d420      	bmi.n	801b868 <_malloc_r+0xd0>
 801b826:	2a0b      	cmp	r2, #11
 801b828:	d917      	bls.n	801b85a <_malloc_r+0xc2>
 801b82a:	1961      	adds	r1, r4, r5
 801b82c:	42a3      	cmp	r3, r4
 801b82e:	6025      	str	r5, [r4, #0]
 801b830:	bf18      	it	ne
 801b832:	6059      	strne	r1, [r3, #4]
 801b834:	6863      	ldr	r3, [r4, #4]
 801b836:	bf08      	it	eq
 801b838:	f8c8 1000 	streq.w	r1, [r8]
 801b83c:	5162      	str	r2, [r4, r5]
 801b83e:	604b      	str	r3, [r1, #4]
 801b840:	4630      	mov	r0, r6
 801b842:	f000 f82f 	bl	801b8a4 <__malloc_unlock>
 801b846:	f104 000b 	add.w	r0, r4, #11
 801b84a:	1d23      	adds	r3, r4, #4
 801b84c:	f020 0007 	bic.w	r0, r0, #7
 801b850:	1ac2      	subs	r2, r0, r3
 801b852:	bf1c      	itt	ne
 801b854:	1a1b      	subne	r3, r3, r0
 801b856:	50a3      	strne	r3, [r4, r2]
 801b858:	e7af      	b.n	801b7ba <_malloc_r+0x22>
 801b85a:	6862      	ldr	r2, [r4, #4]
 801b85c:	42a3      	cmp	r3, r4
 801b85e:	bf0c      	ite	eq
 801b860:	f8c8 2000 	streq.w	r2, [r8]
 801b864:	605a      	strne	r2, [r3, #4]
 801b866:	e7eb      	b.n	801b840 <_malloc_r+0xa8>
 801b868:	4623      	mov	r3, r4
 801b86a:	6864      	ldr	r4, [r4, #4]
 801b86c:	e7ae      	b.n	801b7cc <_malloc_r+0x34>
 801b86e:	463c      	mov	r4, r7
 801b870:	687f      	ldr	r7, [r7, #4]
 801b872:	e7b6      	b.n	801b7e2 <_malloc_r+0x4a>
 801b874:	461a      	mov	r2, r3
 801b876:	685b      	ldr	r3, [r3, #4]
 801b878:	42a3      	cmp	r3, r4
 801b87a:	d1fb      	bne.n	801b874 <_malloc_r+0xdc>
 801b87c:	2300      	movs	r3, #0
 801b87e:	6053      	str	r3, [r2, #4]
 801b880:	e7de      	b.n	801b840 <_malloc_r+0xa8>
 801b882:	230c      	movs	r3, #12
 801b884:	6033      	str	r3, [r6, #0]
 801b886:	4630      	mov	r0, r6
 801b888:	f000 f80c 	bl	801b8a4 <__malloc_unlock>
 801b88c:	e794      	b.n	801b7b8 <_malloc_r+0x20>
 801b88e:	6005      	str	r5, [r0, #0]
 801b890:	e7d6      	b.n	801b840 <_malloc_r+0xa8>
 801b892:	bf00      	nop
 801b894:	24008654 	.word	0x24008654

0801b898 <__malloc_lock>:
 801b898:	4801      	ldr	r0, [pc, #4]	@ (801b8a0 <__malloc_lock+0x8>)
 801b89a:	f7ff bf00 	b.w	801b69e <__retarget_lock_acquire_recursive>
 801b89e:	bf00      	nop
 801b8a0:	2400864c 	.word	0x2400864c

0801b8a4 <__malloc_unlock>:
 801b8a4:	4801      	ldr	r0, [pc, #4]	@ (801b8ac <__malloc_unlock+0x8>)
 801b8a6:	f7ff befb 	b.w	801b6a0 <__retarget_lock_release_recursive>
 801b8aa:	bf00      	nop
 801b8ac:	2400864c 	.word	0x2400864c

0801b8b0 <__ssputs_r>:
 801b8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8b4:	688e      	ldr	r6, [r1, #8]
 801b8b6:	461f      	mov	r7, r3
 801b8b8:	42be      	cmp	r6, r7
 801b8ba:	680b      	ldr	r3, [r1, #0]
 801b8bc:	4682      	mov	sl, r0
 801b8be:	460c      	mov	r4, r1
 801b8c0:	4690      	mov	r8, r2
 801b8c2:	d82d      	bhi.n	801b920 <__ssputs_r+0x70>
 801b8c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b8c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b8cc:	d026      	beq.n	801b91c <__ssputs_r+0x6c>
 801b8ce:	6965      	ldr	r5, [r4, #20]
 801b8d0:	6909      	ldr	r1, [r1, #16]
 801b8d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8d6:	eba3 0901 	sub.w	r9, r3, r1
 801b8da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b8de:	1c7b      	adds	r3, r7, #1
 801b8e0:	444b      	add	r3, r9
 801b8e2:	106d      	asrs	r5, r5, #1
 801b8e4:	429d      	cmp	r5, r3
 801b8e6:	bf38      	it	cc
 801b8e8:	461d      	movcc	r5, r3
 801b8ea:	0553      	lsls	r3, r2, #21
 801b8ec:	d527      	bpl.n	801b93e <__ssputs_r+0x8e>
 801b8ee:	4629      	mov	r1, r5
 801b8f0:	f7ff ff52 	bl	801b798 <_malloc_r>
 801b8f4:	4606      	mov	r6, r0
 801b8f6:	b360      	cbz	r0, 801b952 <__ssputs_r+0xa2>
 801b8f8:	6921      	ldr	r1, [r4, #16]
 801b8fa:	464a      	mov	r2, r9
 801b8fc:	f7ff fed1 	bl	801b6a2 <memcpy>
 801b900:	89a3      	ldrh	r3, [r4, #12]
 801b902:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b90a:	81a3      	strh	r3, [r4, #12]
 801b90c:	6126      	str	r6, [r4, #16]
 801b90e:	6165      	str	r5, [r4, #20]
 801b910:	444e      	add	r6, r9
 801b912:	eba5 0509 	sub.w	r5, r5, r9
 801b916:	6026      	str	r6, [r4, #0]
 801b918:	60a5      	str	r5, [r4, #8]
 801b91a:	463e      	mov	r6, r7
 801b91c:	42be      	cmp	r6, r7
 801b91e:	d900      	bls.n	801b922 <__ssputs_r+0x72>
 801b920:	463e      	mov	r6, r7
 801b922:	6820      	ldr	r0, [r4, #0]
 801b924:	4632      	mov	r2, r6
 801b926:	4641      	mov	r1, r8
 801b928:	f000 fcf6 	bl	801c318 <memmove>
 801b92c:	68a3      	ldr	r3, [r4, #8]
 801b92e:	1b9b      	subs	r3, r3, r6
 801b930:	60a3      	str	r3, [r4, #8]
 801b932:	6823      	ldr	r3, [r4, #0]
 801b934:	4433      	add	r3, r6
 801b936:	6023      	str	r3, [r4, #0]
 801b938:	2000      	movs	r0, #0
 801b93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b93e:	462a      	mov	r2, r5
 801b940:	f000 fd36 	bl	801c3b0 <_realloc_r>
 801b944:	4606      	mov	r6, r0
 801b946:	2800      	cmp	r0, #0
 801b948:	d1e0      	bne.n	801b90c <__ssputs_r+0x5c>
 801b94a:	6921      	ldr	r1, [r4, #16]
 801b94c:	4650      	mov	r0, sl
 801b94e:	f7ff feb7 	bl	801b6c0 <_free_r>
 801b952:	230c      	movs	r3, #12
 801b954:	f8ca 3000 	str.w	r3, [sl]
 801b958:	89a3      	ldrh	r3, [r4, #12]
 801b95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b95e:	81a3      	strh	r3, [r4, #12]
 801b960:	f04f 30ff 	mov.w	r0, #4294967295
 801b964:	e7e9      	b.n	801b93a <__ssputs_r+0x8a>
	...

0801b968 <_svfiprintf_r>:
 801b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96c:	4698      	mov	r8, r3
 801b96e:	898b      	ldrh	r3, [r1, #12]
 801b970:	061b      	lsls	r3, r3, #24
 801b972:	b09d      	sub	sp, #116	@ 0x74
 801b974:	4607      	mov	r7, r0
 801b976:	460d      	mov	r5, r1
 801b978:	4614      	mov	r4, r2
 801b97a:	d510      	bpl.n	801b99e <_svfiprintf_r+0x36>
 801b97c:	690b      	ldr	r3, [r1, #16]
 801b97e:	b973      	cbnz	r3, 801b99e <_svfiprintf_r+0x36>
 801b980:	2140      	movs	r1, #64	@ 0x40
 801b982:	f7ff ff09 	bl	801b798 <_malloc_r>
 801b986:	6028      	str	r0, [r5, #0]
 801b988:	6128      	str	r0, [r5, #16]
 801b98a:	b930      	cbnz	r0, 801b99a <_svfiprintf_r+0x32>
 801b98c:	230c      	movs	r3, #12
 801b98e:	603b      	str	r3, [r7, #0]
 801b990:	f04f 30ff 	mov.w	r0, #4294967295
 801b994:	b01d      	add	sp, #116	@ 0x74
 801b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b99a:	2340      	movs	r3, #64	@ 0x40
 801b99c:	616b      	str	r3, [r5, #20]
 801b99e:	2300      	movs	r3, #0
 801b9a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9a2:	2320      	movs	r3, #32
 801b9a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b9a8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b9ac:	2330      	movs	r3, #48	@ 0x30
 801b9ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bb4c <_svfiprintf_r+0x1e4>
 801b9b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b9b6:	f04f 0901 	mov.w	r9, #1
 801b9ba:	4623      	mov	r3, r4
 801b9bc:	469a      	mov	sl, r3
 801b9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9c2:	b10a      	cbz	r2, 801b9c8 <_svfiprintf_r+0x60>
 801b9c4:	2a25      	cmp	r2, #37	@ 0x25
 801b9c6:	d1f9      	bne.n	801b9bc <_svfiprintf_r+0x54>
 801b9c8:	ebba 0b04 	subs.w	fp, sl, r4
 801b9cc:	d00b      	beq.n	801b9e6 <_svfiprintf_r+0x7e>
 801b9ce:	465b      	mov	r3, fp
 801b9d0:	4622      	mov	r2, r4
 801b9d2:	4629      	mov	r1, r5
 801b9d4:	4638      	mov	r0, r7
 801b9d6:	f7ff ff6b 	bl	801b8b0 <__ssputs_r>
 801b9da:	3001      	adds	r0, #1
 801b9dc:	f000 80a7 	beq.w	801bb2e <_svfiprintf_r+0x1c6>
 801b9e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9e2:	445a      	add	r2, fp
 801b9e4:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9e6:	f89a 3000 	ldrb.w	r3, [sl]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	f000 809f 	beq.w	801bb2e <_svfiprintf_r+0x1c6>
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	f04f 32ff 	mov.w	r2, #4294967295
 801b9f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9fa:	f10a 0a01 	add.w	sl, sl, #1
 801b9fe:	9304      	str	r3, [sp, #16]
 801ba00:	9307      	str	r3, [sp, #28]
 801ba02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ba06:	931a      	str	r3, [sp, #104]	@ 0x68
 801ba08:	4654      	mov	r4, sl
 801ba0a:	2205      	movs	r2, #5
 801ba0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba10:	484e      	ldr	r0, [pc, #312]	@ (801bb4c <_svfiprintf_r+0x1e4>)
 801ba12:	f7e4 fc85 	bl	8000320 <memchr>
 801ba16:	9a04      	ldr	r2, [sp, #16]
 801ba18:	b9d8      	cbnz	r0, 801ba52 <_svfiprintf_r+0xea>
 801ba1a:	06d0      	lsls	r0, r2, #27
 801ba1c:	bf44      	itt	mi
 801ba1e:	2320      	movmi	r3, #32
 801ba20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba24:	0711      	lsls	r1, r2, #28
 801ba26:	bf44      	itt	mi
 801ba28:	232b      	movmi	r3, #43	@ 0x2b
 801ba2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba2e:	f89a 3000 	ldrb.w	r3, [sl]
 801ba32:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba34:	d015      	beq.n	801ba62 <_svfiprintf_r+0xfa>
 801ba36:	9a07      	ldr	r2, [sp, #28]
 801ba38:	4654      	mov	r4, sl
 801ba3a:	2000      	movs	r0, #0
 801ba3c:	f04f 0c0a 	mov.w	ip, #10
 801ba40:	4621      	mov	r1, r4
 801ba42:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba46:	3b30      	subs	r3, #48	@ 0x30
 801ba48:	2b09      	cmp	r3, #9
 801ba4a:	d94b      	bls.n	801bae4 <_svfiprintf_r+0x17c>
 801ba4c:	b1b0      	cbz	r0, 801ba7c <_svfiprintf_r+0x114>
 801ba4e:	9207      	str	r2, [sp, #28]
 801ba50:	e014      	b.n	801ba7c <_svfiprintf_r+0x114>
 801ba52:	eba0 0308 	sub.w	r3, r0, r8
 801ba56:	fa09 f303 	lsl.w	r3, r9, r3
 801ba5a:	4313      	orrs	r3, r2
 801ba5c:	9304      	str	r3, [sp, #16]
 801ba5e:	46a2      	mov	sl, r4
 801ba60:	e7d2      	b.n	801ba08 <_svfiprintf_r+0xa0>
 801ba62:	9b03      	ldr	r3, [sp, #12]
 801ba64:	1d19      	adds	r1, r3, #4
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	9103      	str	r1, [sp, #12]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	bfbb      	ittet	lt
 801ba6e:	425b      	neglt	r3, r3
 801ba70:	f042 0202 	orrlt.w	r2, r2, #2
 801ba74:	9307      	strge	r3, [sp, #28]
 801ba76:	9307      	strlt	r3, [sp, #28]
 801ba78:	bfb8      	it	lt
 801ba7a:	9204      	strlt	r2, [sp, #16]
 801ba7c:	7823      	ldrb	r3, [r4, #0]
 801ba7e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba80:	d10a      	bne.n	801ba98 <_svfiprintf_r+0x130>
 801ba82:	7863      	ldrb	r3, [r4, #1]
 801ba84:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba86:	d132      	bne.n	801baee <_svfiprintf_r+0x186>
 801ba88:	9b03      	ldr	r3, [sp, #12]
 801ba8a:	1d1a      	adds	r2, r3, #4
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	9203      	str	r2, [sp, #12]
 801ba90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba94:	3402      	adds	r4, #2
 801ba96:	9305      	str	r3, [sp, #20]
 801ba98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bb5c <_svfiprintf_r+0x1f4>
 801ba9c:	7821      	ldrb	r1, [r4, #0]
 801ba9e:	2203      	movs	r2, #3
 801baa0:	4650      	mov	r0, sl
 801baa2:	f7e4 fc3d 	bl	8000320 <memchr>
 801baa6:	b138      	cbz	r0, 801bab8 <_svfiprintf_r+0x150>
 801baa8:	9b04      	ldr	r3, [sp, #16]
 801baaa:	eba0 000a 	sub.w	r0, r0, sl
 801baae:	2240      	movs	r2, #64	@ 0x40
 801bab0:	4082      	lsls	r2, r0
 801bab2:	4313      	orrs	r3, r2
 801bab4:	3401      	adds	r4, #1
 801bab6:	9304      	str	r3, [sp, #16]
 801bab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801babc:	4824      	ldr	r0, [pc, #144]	@ (801bb50 <_svfiprintf_r+0x1e8>)
 801babe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bac2:	2206      	movs	r2, #6
 801bac4:	f7e4 fc2c 	bl	8000320 <memchr>
 801bac8:	2800      	cmp	r0, #0
 801baca:	d036      	beq.n	801bb3a <_svfiprintf_r+0x1d2>
 801bacc:	4b21      	ldr	r3, [pc, #132]	@ (801bb54 <_svfiprintf_r+0x1ec>)
 801bace:	bb1b      	cbnz	r3, 801bb18 <_svfiprintf_r+0x1b0>
 801bad0:	9b03      	ldr	r3, [sp, #12]
 801bad2:	3307      	adds	r3, #7
 801bad4:	f023 0307 	bic.w	r3, r3, #7
 801bad8:	3308      	adds	r3, #8
 801bada:	9303      	str	r3, [sp, #12]
 801badc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bade:	4433      	add	r3, r6
 801bae0:	9309      	str	r3, [sp, #36]	@ 0x24
 801bae2:	e76a      	b.n	801b9ba <_svfiprintf_r+0x52>
 801bae4:	fb0c 3202 	mla	r2, ip, r2, r3
 801bae8:	460c      	mov	r4, r1
 801baea:	2001      	movs	r0, #1
 801baec:	e7a8      	b.n	801ba40 <_svfiprintf_r+0xd8>
 801baee:	2300      	movs	r3, #0
 801baf0:	3401      	adds	r4, #1
 801baf2:	9305      	str	r3, [sp, #20]
 801baf4:	4619      	mov	r1, r3
 801baf6:	f04f 0c0a 	mov.w	ip, #10
 801bafa:	4620      	mov	r0, r4
 801bafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bb00:	3a30      	subs	r2, #48	@ 0x30
 801bb02:	2a09      	cmp	r2, #9
 801bb04:	d903      	bls.n	801bb0e <_svfiprintf_r+0x1a6>
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d0c6      	beq.n	801ba98 <_svfiprintf_r+0x130>
 801bb0a:	9105      	str	r1, [sp, #20]
 801bb0c:	e7c4      	b.n	801ba98 <_svfiprintf_r+0x130>
 801bb0e:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb12:	4604      	mov	r4, r0
 801bb14:	2301      	movs	r3, #1
 801bb16:	e7f0      	b.n	801bafa <_svfiprintf_r+0x192>
 801bb18:	ab03      	add	r3, sp, #12
 801bb1a:	9300      	str	r3, [sp, #0]
 801bb1c:	462a      	mov	r2, r5
 801bb1e:	4b0e      	ldr	r3, [pc, #56]	@ (801bb58 <_svfiprintf_r+0x1f0>)
 801bb20:	a904      	add	r1, sp, #16
 801bb22:	4638      	mov	r0, r7
 801bb24:	f3af 8000 	nop.w
 801bb28:	1c42      	adds	r2, r0, #1
 801bb2a:	4606      	mov	r6, r0
 801bb2c:	d1d6      	bne.n	801badc <_svfiprintf_r+0x174>
 801bb2e:	89ab      	ldrh	r3, [r5, #12]
 801bb30:	065b      	lsls	r3, r3, #25
 801bb32:	f53f af2d 	bmi.w	801b990 <_svfiprintf_r+0x28>
 801bb36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb38:	e72c      	b.n	801b994 <_svfiprintf_r+0x2c>
 801bb3a:	ab03      	add	r3, sp, #12
 801bb3c:	9300      	str	r3, [sp, #0]
 801bb3e:	462a      	mov	r2, r5
 801bb40:	4b05      	ldr	r3, [pc, #20]	@ (801bb58 <_svfiprintf_r+0x1f0>)
 801bb42:	a904      	add	r1, sp, #16
 801bb44:	4638      	mov	r0, r7
 801bb46:	f000 f9bb 	bl	801bec0 <_printf_i>
 801bb4a:	e7ed      	b.n	801bb28 <_svfiprintf_r+0x1c0>
 801bb4c:	0802fc91 	.word	0x0802fc91
 801bb50:	0802fc9b 	.word	0x0802fc9b
 801bb54:	00000000 	.word	0x00000000
 801bb58:	0801b8b1 	.word	0x0801b8b1
 801bb5c:	0802fc97 	.word	0x0802fc97

0801bb60 <__sfputc_r>:
 801bb60:	6893      	ldr	r3, [r2, #8]
 801bb62:	3b01      	subs	r3, #1
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	b410      	push	{r4}
 801bb68:	6093      	str	r3, [r2, #8]
 801bb6a:	da08      	bge.n	801bb7e <__sfputc_r+0x1e>
 801bb6c:	6994      	ldr	r4, [r2, #24]
 801bb6e:	42a3      	cmp	r3, r4
 801bb70:	db01      	blt.n	801bb76 <__sfputc_r+0x16>
 801bb72:	290a      	cmp	r1, #10
 801bb74:	d103      	bne.n	801bb7e <__sfputc_r+0x1e>
 801bb76:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb7a:	f7ff bc6d 	b.w	801b458 <__swbuf_r>
 801bb7e:	6813      	ldr	r3, [r2, #0]
 801bb80:	1c58      	adds	r0, r3, #1
 801bb82:	6010      	str	r0, [r2, #0]
 801bb84:	7019      	strb	r1, [r3, #0]
 801bb86:	4608      	mov	r0, r1
 801bb88:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb8c:	4770      	bx	lr

0801bb8e <__sfputs_r>:
 801bb8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb90:	4606      	mov	r6, r0
 801bb92:	460f      	mov	r7, r1
 801bb94:	4614      	mov	r4, r2
 801bb96:	18d5      	adds	r5, r2, r3
 801bb98:	42ac      	cmp	r4, r5
 801bb9a:	d101      	bne.n	801bba0 <__sfputs_r+0x12>
 801bb9c:	2000      	movs	r0, #0
 801bb9e:	e007      	b.n	801bbb0 <__sfputs_r+0x22>
 801bba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bba4:	463a      	mov	r2, r7
 801bba6:	4630      	mov	r0, r6
 801bba8:	f7ff ffda 	bl	801bb60 <__sfputc_r>
 801bbac:	1c43      	adds	r3, r0, #1
 801bbae:	d1f3      	bne.n	801bb98 <__sfputs_r+0xa>
 801bbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bbb4 <_vfiprintf_r>:
 801bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbb8:	460d      	mov	r5, r1
 801bbba:	b09d      	sub	sp, #116	@ 0x74
 801bbbc:	4614      	mov	r4, r2
 801bbbe:	4698      	mov	r8, r3
 801bbc0:	4606      	mov	r6, r0
 801bbc2:	b118      	cbz	r0, 801bbcc <_vfiprintf_r+0x18>
 801bbc4:	6a03      	ldr	r3, [r0, #32]
 801bbc6:	b90b      	cbnz	r3, 801bbcc <_vfiprintf_r+0x18>
 801bbc8:	f7ff fac8 	bl	801b15c <__sinit>
 801bbcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bbce:	07d9      	lsls	r1, r3, #31
 801bbd0:	d405      	bmi.n	801bbde <_vfiprintf_r+0x2a>
 801bbd2:	89ab      	ldrh	r3, [r5, #12]
 801bbd4:	059a      	lsls	r2, r3, #22
 801bbd6:	d402      	bmi.n	801bbde <_vfiprintf_r+0x2a>
 801bbd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bbda:	f7ff fd60 	bl	801b69e <__retarget_lock_acquire_recursive>
 801bbde:	89ab      	ldrh	r3, [r5, #12]
 801bbe0:	071b      	lsls	r3, r3, #28
 801bbe2:	d501      	bpl.n	801bbe8 <_vfiprintf_r+0x34>
 801bbe4:	692b      	ldr	r3, [r5, #16]
 801bbe6:	b99b      	cbnz	r3, 801bc10 <_vfiprintf_r+0x5c>
 801bbe8:	4629      	mov	r1, r5
 801bbea:	4630      	mov	r0, r6
 801bbec:	f7ff fc72 	bl	801b4d4 <__swsetup_r>
 801bbf0:	b170      	cbz	r0, 801bc10 <_vfiprintf_r+0x5c>
 801bbf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bbf4:	07dc      	lsls	r4, r3, #31
 801bbf6:	d504      	bpl.n	801bc02 <_vfiprintf_r+0x4e>
 801bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbfc:	b01d      	add	sp, #116	@ 0x74
 801bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc02:	89ab      	ldrh	r3, [r5, #12]
 801bc04:	0598      	lsls	r0, r3, #22
 801bc06:	d4f7      	bmi.n	801bbf8 <_vfiprintf_r+0x44>
 801bc08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc0a:	f7ff fd49 	bl	801b6a0 <__retarget_lock_release_recursive>
 801bc0e:	e7f3      	b.n	801bbf8 <_vfiprintf_r+0x44>
 801bc10:	2300      	movs	r3, #0
 801bc12:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc14:	2320      	movs	r3, #32
 801bc16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bc1a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc1e:	2330      	movs	r3, #48	@ 0x30
 801bc20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bdd0 <_vfiprintf_r+0x21c>
 801bc24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bc28:	f04f 0901 	mov.w	r9, #1
 801bc2c:	4623      	mov	r3, r4
 801bc2e:	469a      	mov	sl, r3
 801bc30:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc34:	b10a      	cbz	r2, 801bc3a <_vfiprintf_r+0x86>
 801bc36:	2a25      	cmp	r2, #37	@ 0x25
 801bc38:	d1f9      	bne.n	801bc2e <_vfiprintf_r+0x7a>
 801bc3a:	ebba 0b04 	subs.w	fp, sl, r4
 801bc3e:	d00b      	beq.n	801bc58 <_vfiprintf_r+0xa4>
 801bc40:	465b      	mov	r3, fp
 801bc42:	4622      	mov	r2, r4
 801bc44:	4629      	mov	r1, r5
 801bc46:	4630      	mov	r0, r6
 801bc48:	f7ff ffa1 	bl	801bb8e <__sfputs_r>
 801bc4c:	3001      	adds	r0, #1
 801bc4e:	f000 80a7 	beq.w	801bda0 <_vfiprintf_r+0x1ec>
 801bc52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bc54:	445a      	add	r2, fp
 801bc56:	9209      	str	r2, [sp, #36]	@ 0x24
 801bc58:	f89a 3000 	ldrb.w	r3, [sl]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	f000 809f 	beq.w	801bda0 <_vfiprintf_r+0x1ec>
 801bc62:	2300      	movs	r3, #0
 801bc64:	f04f 32ff 	mov.w	r2, #4294967295
 801bc68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc6c:	f10a 0a01 	add.w	sl, sl, #1
 801bc70:	9304      	str	r3, [sp, #16]
 801bc72:	9307      	str	r3, [sp, #28]
 801bc74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bc78:	931a      	str	r3, [sp, #104]	@ 0x68
 801bc7a:	4654      	mov	r4, sl
 801bc7c:	2205      	movs	r2, #5
 801bc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc82:	4853      	ldr	r0, [pc, #332]	@ (801bdd0 <_vfiprintf_r+0x21c>)
 801bc84:	f7e4 fb4c 	bl	8000320 <memchr>
 801bc88:	9a04      	ldr	r2, [sp, #16]
 801bc8a:	b9d8      	cbnz	r0, 801bcc4 <_vfiprintf_r+0x110>
 801bc8c:	06d1      	lsls	r1, r2, #27
 801bc8e:	bf44      	itt	mi
 801bc90:	2320      	movmi	r3, #32
 801bc92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc96:	0713      	lsls	r3, r2, #28
 801bc98:	bf44      	itt	mi
 801bc9a:	232b      	movmi	r3, #43	@ 0x2b
 801bc9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bca0:	f89a 3000 	ldrb.w	r3, [sl]
 801bca4:	2b2a      	cmp	r3, #42	@ 0x2a
 801bca6:	d015      	beq.n	801bcd4 <_vfiprintf_r+0x120>
 801bca8:	9a07      	ldr	r2, [sp, #28]
 801bcaa:	4654      	mov	r4, sl
 801bcac:	2000      	movs	r0, #0
 801bcae:	f04f 0c0a 	mov.w	ip, #10
 801bcb2:	4621      	mov	r1, r4
 801bcb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bcb8:	3b30      	subs	r3, #48	@ 0x30
 801bcba:	2b09      	cmp	r3, #9
 801bcbc:	d94b      	bls.n	801bd56 <_vfiprintf_r+0x1a2>
 801bcbe:	b1b0      	cbz	r0, 801bcee <_vfiprintf_r+0x13a>
 801bcc0:	9207      	str	r2, [sp, #28]
 801bcc2:	e014      	b.n	801bcee <_vfiprintf_r+0x13a>
 801bcc4:	eba0 0308 	sub.w	r3, r0, r8
 801bcc8:	fa09 f303 	lsl.w	r3, r9, r3
 801bccc:	4313      	orrs	r3, r2
 801bcce:	9304      	str	r3, [sp, #16]
 801bcd0:	46a2      	mov	sl, r4
 801bcd2:	e7d2      	b.n	801bc7a <_vfiprintf_r+0xc6>
 801bcd4:	9b03      	ldr	r3, [sp, #12]
 801bcd6:	1d19      	adds	r1, r3, #4
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	9103      	str	r1, [sp, #12]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	bfbb      	ittet	lt
 801bce0:	425b      	neglt	r3, r3
 801bce2:	f042 0202 	orrlt.w	r2, r2, #2
 801bce6:	9307      	strge	r3, [sp, #28]
 801bce8:	9307      	strlt	r3, [sp, #28]
 801bcea:	bfb8      	it	lt
 801bcec:	9204      	strlt	r2, [sp, #16]
 801bcee:	7823      	ldrb	r3, [r4, #0]
 801bcf0:	2b2e      	cmp	r3, #46	@ 0x2e
 801bcf2:	d10a      	bne.n	801bd0a <_vfiprintf_r+0x156>
 801bcf4:	7863      	ldrb	r3, [r4, #1]
 801bcf6:	2b2a      	cmp	r3, #42	@ 0x2a
 801bcf8:	d132      	bne.n	801bd60 <_vfiprintf_r+0x1ac>
 801bcfa:	9b03      	ldr	r3, [sp, #12]
 801bcfc:	1d1a      	adds	r2, r3, #4
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	9203      	str	r2, [sp, #12]
 801bd02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bd06:	3402      	adds	r4, #2
 801bd08:	9305      	str	r3, [sp, #20]
 801bd0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bde0 <_vfiprintf_r+0x22c>
 801bd0e:	7821      	ldrb	r1, [r4, #0]
 801bd10:	2203      	movs	r2, #3
 801bd12:	4650      	mov	r0, sl
 801bd14:	f7e4 fb04 	bl	8000320 <memchr>
 801bd18:	b138      	cbz	r0, 801bd2a <_vfiprintf_r+0x176>
 801bd1a:	9b04      	ldr	r3, [sp, #16]
 801bd1c:	eba0 000a 	sub.w	r0, r0, sl
 801bd20:	2240      	movs	r2, #64	@ 0x40
 801bd22:	4082      	lsls	r2, r0
 801bd24:	4313      	orrs	r3, r2
 801bd26:	3401      	adds	r4, #1
 801bd28:	9304      	str	r3, [sp, #16]
 801bd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd2e:	4829      	ldr	r0, [pc, #164]	@ (801bdd4 <_vfiprintf_r+0x220>)
 801bd30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bd34:	2206      	movs	r2, #6
 801bd36:	f7e4 faf3 	bl	8000320 <memchr>
 801bd3a:	2800      	cmp	r0, #0
 801bd3c:	d03f      	beq.n	801bdbe <_vfiprintf_r+0x20a>
 801bd3e:	4b26      	ldr	r3, [pc, #152]	@ (801bdd8 <_vfiprintf_r+0x224>)
 801bd40:	bb1b      	cbnz	r3, 801bd8a <_vfiprintf_r+0x1d6>
 801bd42:	9b03      	ldr	r3, [sp, #12]
 801bd44:	3307      	adds	r3, #7
 801bd46:	f023 0307 	bic.w	r3, r3, #7
 801bd4a:	3308      	adds	r3, #8
 801bd4c:	9303      	str	r3, [sp, #12]
 801bd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd50:	443b      	add	r3, r7
 801bd52:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd54:	e76a      	b.n	801bc2c <_vfiprintf_r+0x78>
 801bd56:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd5a:	460c      	mov	r4, r1
 801bd5c:	2001      	movs	r0, #1
 801bd5e:	e7a8      	b.n	801bcb2 <_vfiprintf_r+0xfe>
 801bd60:	2300      	movs	r3, #0
 801bd62:	3401      	adds	r4, #1
 801bd64:	9305      	str	r3, [sp, #20]
 801bd66:	4619      	mov	r1, r3
 801bd68:	f04f 0c0a 	mov.w	ip, #10
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd72:	3a30      	subs	r2, #48	@ 0x30
 801bd74:	2a09      	cmp	r2, #9
 801bd76:	d903      	bls.n	801bd80 <_vfiprintf_r+0x1cc>
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d0c6      	beq.n	801bd0a <_vfiprintf_r+0x156>
 801bd7c:	9105      	str	r1, [sp, #20]
 801bd7e:	e7c4      	b.n	801bd0a <_vfiprintf_r+0x156>
 801bd80:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd84:	4604      	mov	r4, r0
 801bd86:	2301      	movs	r3, #1
 801bd88:	e7f0      	b.n	801bd6c <_vfiprintf_r+0x1b8>
 801bd8a:	ab03      	add	r3, sp, #12
 801bd8c:	9300      	str	r3, [sp, #0]
 801bd8e:	462a      	mov	r2, r5
 801bd90:	4b12      	ldr	r3, [pc, #72]	@ (801bddc <_vfiprintf_r+0x228>)
 801bd92:	a904      	add	r1, sp, #16
 801bd94:	4630      	mov	r0, r6
 801bd96:	f3af 8000 	nop.w
 801bd9a:	4607      	mov	r7, r0
 801bd9c:	1c78      	adds	r0, r7, #1
 801bd9e:	d1d6      	bne.n	801bd4e <_vfiprintf_r+0x19a>
 801bda0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bda2:	07d9      	lsls	r1, r3, #31
 801bda4:	d405      	bmi.n	801bdb2 <_vfiprintf_r+0x1fe>
 801bda6:	89ab      	ldrh	r3, [r5, #12]
 801bda8:	059a      	lsls	r2, r3, #22
 801bdaa:	d402      	bmi.n	801bdb2 <_vfiprintf_r+0x1fe>
 801bdac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bdae:	f7ff fc77 	bl	801b6a0 <__retarget_lock_release_recursive>
 801bdb2:	89ab      	ldrh	r3, [r5, #12]
 801bdb4:	065b      	lsls	r3, r3, #25
 801bdb6:	f53f af1f 	bmi.w	801bbf8 <_vfiprintf_r+0x44>
 801bdba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdbc:	e71e      	b.n	801bbfc <_vfiprintf_r+0x48>
 801bdbe:	ab03      	add	r3, sp, #12
 801bdc0:	9300      	str	r3, [sp, #0]
 801bdc2:	462a      	mov	r2, r5
 801bdc4:	4b05      	ldr	r3, [pc, #20]	@ (801bddc <_vfiprintf_r+0x228>)
 801bdc6:	a904      	add	r1, sp, #16
 801bdc8:	4630      	mov	r0, r6
 801bdca:	f000 f879 	bl	801bec0 <_printf_i>
 801bdce:	e7e4      	b.n	801bd9a <_vfiprintf_r+0x1e6>
 801bdd0:	0802fc91 	.word	0x0802fc91
 801bdd4:	0802fc9b 	.word	0x0802fc9b
 801bdd8:	00000000 	.word	0x00000000
 801bddc:	0801bb8f 	.word	0x0801bb8f
 801bde0:	0802fc97 	.word	0x0802fc97

0801bde4 <_printf_common>:
 801bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bde8:	4616      	mov	r6, r2
 801bdea:	4698      	mov	r8, r3
 801bdec:	688a      	ldr	r2, [r1, #8]
 801bdee:	690b      	ldr	r3, [r1, #16]
 801bdf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bdf4:	4293      	cmp	r3, r2
 801bdf6:	bfb8      	it	lt
 801bdf8:	4613      	movlt	r3, r2
 801bdfa:	6033      	str	r3, [r6, #0]
 801bdfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801be00:	4607      	mov	r7, r0
 801be02:	460c      	mov	r4, r1
 801be04:	b10a      	cbz	r2, 801be0a <_printf_common+0x26>
 801be06:	3301      	adds	r3, #1
 801be08:	6033      	str	r3, [r6, #0]
 801be0a:	6823      	ldr	r3, [r4, #0]
 801be0c:	0699      	lsls	r1, r3, #26
 801be0e:	bf42      	ittt	mi
 801be10:	6833      	ldrmi	r3, [r6, #0]
 801be12:	3302      	addmi	r3, #2
 801be14:	6033      	strmi	r3, [r6, #0]
 801be16:	6825      	ldr	r5, [r4, #0]
 801be18:	f015 0506 	ands.w	r5, r5, #6
 801be1c:	d106      	bne.n	801be2c <_printf_common+0x48>
 801be1e:	f104 0a19 	add.w	sl, r4, #25
 801be22:	68e3      	ldr	r3, [r4, #12]
 801be24:	6832      	ldr	r2, [r6, #0]
 801be26:	1a9b      	subs	r3, r3, r2
 801be28:	42ab      	cmp	r3, r5
 801be2a:	dc26      	bgt.n	801be7a <_printf_common+0x96>
 801be2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801be30:	6822      	ldr	r2, [r4, #0]
 801be32:	3b00      	subs	r3, #0
 801be34:	bf18      	it	ne
 801be36:	2301      	movne	r3, #1
 801be38:	0692      	lsls	r2, r2, #26
 801be3a:	d42b      	bmi.n	801be94 <_printf_common+0xb0>
 801be3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801be40:	4641      	mov	r1, r8
 801be42:	4638      	mov	r0, r7
 801be44:	47c8      	blx	r9
 801be46:	3001      	adds	r0, #1
 801be48:	d01e      	beq.n	801be88 <_printf_common+0xa4>
 801be4a:	6823      	ldr	r3, [r4, #0]
 801be4c:	6922      	ldr	r2, [r4, #16]
 801be4e:	f003 0306 	and.w	r3, r3, #6
 801be52:	2b04      	cmp	r3, #4
 801be54:	bf02      	ittt	eq
 801be56:	68e5      	ldreq	r5, [r4, #12]
 801be58:	6833      	ldreq	r3, [r6, #0]
 801be5a:	1aed      	subeq	r5, r5, r3
 801be5c:	68a3      	ldr	r3, [r4, #8]
 801be5e:	bf0c      	ite	eq
 801be60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801be64:	2500      	movne	r5, #0
 801be66:	4293      	cmp	r3, r2
 801be68:	bfc4      	itt	gt
 801be6a:	1a9b      	subgt	r3, r3, r2
 801be6c:	18ed      	addgt	r5, r5, r3
 801be6e:	2600      	movs	r6, #0
 801be70:	341a      	adds	r4, #26
 801be72:	42b5      	cmp	r5, r6
 801be74:	d11a      	bne.n	801beac <_printf_common+0xc8>
 801be76:	2000      	movs	r0, #0
 801be78:	e008      	b.n	801be8c <_printf_common+0xa8>
 801be7a:	2301      	movs	r3, #1
 801be7c:	4652      	mov	r2, sl
 801be7e:	4641      	mov	r1, r8
 801be80:	4638      	mov	r0, r7
 801be82:	47c8      	blx	r9
 801be84:	3001      	adds	r0, #1
 801be86:	d103      	bne.n	801be90 <_printf_common+0xac>
 801be88:	f04f 30ff 	mov.w	r0, #4294967295
 801be8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be90:	3501      	adds	r5, #1
 801be92:	e7c6      	b.n	801be22 <_printf_common+0x3e>
 801be94:	18e1      	adds	r1, r4, r3
 801be96:	1c5a      	adds	r2, r3, #1
 801be98:	2030      	movs	r0, #48	@ 0x30
 801be9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801be9e:	4422      	add	r2, r4
 801bea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bea8:	3302      	adds	r3, #2
 801beaa:	e7c7      	b.n	801be3c <_printf_common+0x58>
 801beac:	2301      	movs	r3, #1
 801beae:	4622      	mov	r2, r4
 801beb0:	4641      	mov	r1, r8
 801beb2:	4638      	mov	r0, r7
 801beb4:	47c8      	blx	r9
 801beb6:	3001      	adds	r0, #1
 801beb8:	d0e6      	beq.n	801be88 <_printf_common+0xa4>
 801beba:	3601      	adds	r6, #1
 801bebc:	e7d9      	b.n	801be72 <_printf_common+0x8e>
	...

0801bec0 <_printf_i>:
 801bec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bec4:	7e0f      	ldrb	r7, [r1, #24]
 801bec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bec8:	2f78      	cmp	r7, #120	@ 0x78
 801beca:	4691      	mov	r9, r2
 801becc:	4680      	mov	r8, r0
 801bece:	460c      	mov	r4, r1
 801bed0:	469a      	mov	sl, r3
 801bed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bed6:	d807      	bhi.n	801bee8 <_printf_i+0x28>
 801bed8:	2f62      	cmp	r7, #98	@ 0x62
 801beda:	d80a      	bhi.n	801bef2 <_printf_i+0x32>
 801bedc:	2f00      	cmp	r7, #0
 801bede:	f000 80d1 	beq.w	801c084 <_printf_i+0x1c4>
 801bee2:	2f58      	cmp	r7, #88	@ 0x58
 801bee4:	f000 80b8 	beq.w	801c058 <_printf_i+0x198>
 801bee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801beec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bef0:	e03a      	b.n	801bf68 <_printf_i+0xa8>
 801bef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bef6:	2b15      	cmp	r3, #21
 801bef8:	d8f6      	bhi.n	801bee8 <_printf_i+0x28>
 801befa:	a101      	add	r1, pc, #4	@ (adr r1, 801bf00 <_printf_i+0x40>)
 801befc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bf00:	0801bf59 	.word	0x0801bf59
 801bf04:	0801bf6d 	.word	0x0801bf6d
 801bf08:	0801bee9 	.word	0x0801bee9
 801bf0c:	0801bee9 	.word	0x0801bee9
 801bf10:	0801bee9 	.word	0x0801bee9
 801bf14:	0801bee9 	.word	0x0801bee9
 801bf18:	0801bf6d 	.word	0x0801bf6d
 801bf1c:	0801bee9 	.word	0x0801bee9
 801bf20:	0801bee9 	.word	0x0801bee9
 801bf24:	0801bee9 	.word	0x0801bee9
 801bf28:	0801bee9 	.word	0x0801bee9
 801bf2c:	0801c06b 	.word	0x0801c06b
 801bf30:	0801bf97 	.word	0x0801bf97
 801bf34:	0801c025 	.word	0x0801c025
 801bf38:	0801bee9 	.word	0x0801bee9
 801bf3c:	0801bee9 	.word	0x0801bee9
 801bf40:	0801c08d 	.word	0x0801c08d
 801bf44:	0801bee9 	.word	0x0801bee9
 801bf48:	0801bf97 	.word	0x0801bf97
 801bf4c:	0801bee9 	.word	0x0801bee9
 801bf50:	0801bee9 	.word	0x0801bee9
 801bf54:	0801c02d 	.word	0x0801c02d
 801bf58:	6833      	ldr	r3, [r6, #0]
 801bf5a:	1d1a      	adds	r2, r3, #4
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	6032      	str	r2, [r6, #0]
 801bf60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bf64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bf68:	2301      	movs	r3, #1
 801bf6a:	e09c      	b.n	801c0a6 <_printf_i+0x1e6>
 801bf6c:	6833      	ldr	r3, [r6, #0]
 801bf6e:	6820      	ldr	r0, [r4, #0]
 801bf70:	1d19      	adds	r1, r3, #4
 801bf72:	6031      	str	r1, [r6, #0]
 801bf74:	0606      	lsls	r6, r0, #24
 801bf76:	d501      	bpl.n	801bf7c <_printf_i+0xbc>
 801bf78:	681d      	ldr	r5, [r3, #0]
 801bf7a:	e003      	b.n	801bf84 <_printf_i+0xc4>
 801bf7c:	0645      	lsls	r5, r0, #25
 801bf7e:	d5fb      	bpl.n	801bf78 <_printf_i+0xb8>
 801bf80:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bf84:	2d00      	cmp	r5, #0
 801bf86:	da03      	bge.n	801bf90 <_printf_i+0xd0>
 801bf88:	232d      	movs	r3, #45	@ 0x2d
 801bf8a:	426d      	negs	r5, r5
 801bf8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf90:	4858      	ldr	r0, [pc, #352]	@ (801c0f4 <_printf_i+0x234>)
 801bf92:	230a      	movs	r3, #10
 801bf94:	e011      	b.n	801bfba <_printf_i+0xfa>
 801bf96:	6821      	ldr	r1, [r4, #0]
 801bf98:	6833      	ldr	r3, [r6, #0]
 801bf9a:	0608      	lsls	r0, r1, #24
 801bf9c:	f853 5b04 	ldr.w	r5, [r3], #4
 801bfa0:	d402      	bmi.n	801bfa8 <_printf_i+0xe8>
 801bfa2:	0649      	lsls	r1, r1, #25
 801bfa4:	bf48      	it	mi
 801bfa6:	b2ad      	uxthmi	r5, r5
 801bfa8:	2f6f      	cmp	r7, #111	@ 0x6f
 801bfaa:	4852      	ldr	r0, [pc, #328]	@ (801c0f4 <_printf_i+0x234>)
 801bfac:	6033      	str	r3, [r6, #0]
 801bfae:	bf14      	ite	ne
 801bfb0:	230a      	movne	r3, #10
 801bfb2:	2308      	moveq	r3, #8
 801bfb4:	2100      	movs	r1, #0
 801bfb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bfba:	6866      	ldr	r6, [r4, #4]
 801bfbc:	60a6      	str	r6, [r4, #8]
 801bfbe:	2e00      	cmp	r6, #0
 801bfc0:	db05      	blt.n	801bfce <_printf_i+0x10e>
 801bfc2:	6821      	ldr	r1, [r4, #0]
 801bfc4:	432e      	orrs	r6, r5
 801bfc6:	f021 0104 	bic.w	r1, r1, #4
 801bfca:	6021      	str	r1, [r4, #0]
 801bfcc:	d04b      	beq.n	801c066 <_printf_i+0x1a6>
 801bfce:	4616      	mov	r6, r2
 801bfd0:	fbb5 f1f3 	udiv	r1, r5, r3
 801bfd4:	fb03 5711 	mls	r7, r3, r1, r5
 801bfd8:	5dc7      	ldrb	r7, [r0, r7]
 801bfda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bfde:	462f      	mov	r7, r5
 801bfe0:	42bb      	cmp	r3, r7
 801bfe2:	460d      	mov	r5, r1
 801bfe4:	d9f4      	bls.n	801bfd0 <_printf_i+0x110>
 801bfe6:	2b08      	cmp	r3, #8
 801bfe8:	d10b      	bne.n	801c002 <_printf_i+0x142>
 801bfea:	6823      	ldr	r3, [r4, #0]
 801bfec:	07df      	lsls	r7, r3, #31
 801bfee:	d508      	bpl.n	801c002 <_printf_i+0x142>
 801bff0:	6923      	ldr	r3, [r4, #16]
 801bff2:	6861      	ldr	r1, [r4, #4]
 801bff4:	4299      	cmp	r1, r3
 801bff6:	bfde      	ittt	le
 801bff8:	2330      	movle	r3, #48	@ 0x30
 801bffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bffe:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c002:	1b92      	subs	r2, r2, r6
 801c004:	6122      	str	r2, [r4, #16]
 801c006:	f8cd a000 	str.w	sl, [sp]
 801c00a:	464b      	mov	r3, r9
 801c00c:	aa03      	add	r2, sp, #12
 801c00e:	4621      	mov	r1, r4
 801c010:	4640      	mov	r0, r8
 801c012:	f7ff fee7 	bl	801bde4 <_printf_common>
 801c016:	3001      	adds	r0, #1
 801c018:	d14a      	bne.n	801c0b0 <_printf_i+0x1f0>
 801c01a:	f04f 30ff 	mov.w	r0, #4294967295
 801c01e:	b004      	add	sp, #16
 801c020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c024:	6823      	ldr	r3, [r4, #0]
 801c026:	f043 0320 	orr.w	r3, r3, #32
 801c02a:	6023      	str	r3, [r4, #0]
 801c02c:	4832      	ldr	r0, [pc, #200]	@ (801c0f8 <_printf_i+0x238>)
 801c02e:	2778      	movs	r7, #120	@ 0x78
 801c030:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c034:	6823      	ldr	r3, [r4, #0]
 801c036:	6831      	ldr	r1, [r6, #0]
 801c038:	061f      	lsls	r7, r3, #24
 801c03a:	f851 5b04 	ldr.w	r5, [r1], #4
 801c03e:	d402      	bmi.n	801c046 <_printf_i+0x186>
 801c040:	065f      	lsls	r7, r3, #25
 801c042:	bf48      	it	mi
 801c044:	b2ad      	uxthmi	r5, r5
 801c046:	6031      	str	r1, [r6, #0]
 801c048:	07d9      	lsls	r1, r3, #31
 801c04a:	bf44      	itt	mi
 801c04c:	f043 0320 	orrmi.w	r3, r3, #32
 801c050:	6023      	strmi	r3, [r4, #0]
 801c052:	b11d      	cbz	r5, 801c05c <_printf_i+0x19c>
 801c054:	2310      	movs	r3, #16
 801c056:	e7ad      	b.n	801bfb4 <_printf_i+0xf4>
 801c058:	4826      	ldr	r0, [pc, #152]	@ (801c0f4 <_printf_i+0x234>)
 801c05a:	e7e9      	b.n	801c030 <_printf_i+0x170>
 801c05c:	6823      	ldr	r3, [r4, #0]
 801c05e:	f023 0320 	bic.w	r3, r3, #32
 801c062:	6023      	str	r3, [r4, #0]
 801c064:	e7f6      	b.n	801c054 <_printf_i+0x194>
 801c066:	4616      	mov	r6, r2
 801c068:	e7bd      	b.n	801bfe6 <_printf_i+0x126>
 801c06a:	6833      	ldr	r3, [r6, #0]
 801c06c:	6825      	ldr	r5, [r4, #0]
 801c06e:	6961      	ldr	r1, [r4, #20]
 801c070:	1d18      	adds	r0, r3, #4
 801c072:	6030      	str	r0, [r6, #0]
 801c074:	062e      	lsls	r6, r5, #24
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	d501      	bpl.n	801c07e <_printf_i+0x1be>
 801c07a:	6019      	str	r1, [r3, #0]
 801c07c:	e002      	b.n	801c084 <_printf_i+0x1c4>
 801c07e:	0668      	lsls	r0, r5, #25
 801c080:	d5fb      	bpl.n	801c07a <_printf_i+0x1ba>
 801c082:	8019      	strh	r1, [r3, #0]
 801c084:	2300      	movs	r3, #0
 801c086:	6123      	str	r3, [r4, #16]
 801c088:	4616      	mov	r6, r2
 801c08a:	e7bc      	b.n	801c006 <_printf_i+0x146>
 801c08c:	6833      	ldr	r3, [r6, #0]
 801c08e:	1d1a      	adds	r2, r3, #4
 801c090:	6032      	str	r2, [r6, #0]
 801c092:	681e      	ldr	r6, [r3, #0]
 801c094:	6862      	ldr	r2, [r4, #4]
 801c096:	2100      	movs	r1, #0
 801c098:	4630      	mov	r0, r6
 801c09a:	f7e4 f941 	bl	8000320 <memchr>
 801c09e:	b108      	cbz	r0, 801c0a4 <_printf_i+0x1e4>
 801c0a0:	1b80      	subs	r0, r0, r6
 801c0a2:	6060      	str	r0, [r4, #4]
 801c0a4:	6863      	ldr	r3, [r4, #4]
 801c0a6:	6123      	str	r3, [r4, #16]
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c0ae:	e7aa      	b.n	801c006 <_printf_i+0x146>
 801c0b0:	6923      	ldr	r3, [r4, #16]
 801c0b2:	4632      	mov	r2, r6
 801c0b4:	4649      	mov	r1, r9
 801c0b6:	4640      	mov	r0, r8
 801c0b8:	47d0      	blx	sl
 801c0ba:	3001      	adds	r0, #1
 801c0bc:	d0ad      	beq.n	801c01a <_printf_i+0x15a>
 801c0be:	6823      	ldr	r3, [r4, #0]
 801c0c0:	079b      	lsls	r3, r3, #30
 801c0c2:	d413      	bmi.n	801c0ec <_printf_i+0x22c>
 801c0c4:	68e0      	ldr	r0, [r4, #12]
 801c0c6:	9b03      	ldr	r3, [sp, #12]
 801c0c8:	4298      	cmp	r0, r3
 801c0ca:	bfb8      	it	lt
 801c0cc:	4618      	movlt	r0, r3
 801c0ce:	e7a6      	b.n	801c01e <_printf_i+0x15e>
 801c0d0:	2301      	movs	r3, #1
 801c0d2:	4632      	mov	r2, r6
 801c0d4:	4649      	mov	r1, r9
 801c0d6:	4640      	mov	r0, r8
 801c0d8:	47d0      	blx	sl
 801c0da:	3001      	adds	r0, #1
 801c0dc:	d09d      	beq.n	801c01a <_printf_i+0x15a>
 801c0de:	3501      	adds	r5, #1
 801c0e0:	68e3      	ldr	r3, [r4, #12]
 801c0e2:	9903      	ldr	r1, [sp, #12]
 801c0e4:	1a5b      	subs	r3, r3, r1
 801c0e6:	42ab      	cmp	r3, r5
 801c0e8:	dcf2      	bgt.n	801c0d0 <_printf_i+0x210>
 801c0ea:	e7eb      	b.n	801c0c4 <_printf_i+0x204>
 801c0ec:	2500      	movs	r5, #0
 801c0ee:	f104 0619 	add.w	r6, r4, #25
 801c0f2:	e7f5      	b.n	801c0e0 <_printf_i+0x220>
 801c0f4:	0802fca2 	.word	0x0802fca2
 801c0f8:	0802fcb3 	.word	0x0802fcb3

0801c0fc <__sflush_r>:
 801c0fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c104:	0716      	lsls	r6, r2, #28
 801c106:	4605      	mov	r5, r0
 801c108:	460c      	mov	r4, r1
 801c10a:	d454      	bmi.n	801c1b6 <__sflush_r+0xba>
 801c10c:	684b      	ldr	r3, [r1, #4]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	dc02      	bgt.n	801c118 <__sflush_r+0x1c>
 801c112:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c114:	2b00      	cmp	r3, #0
 801c116:	dd48      	ble.n	801c1aa <__sflush_r+0xae>
 801c118:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c11a:	2e00      	cmp	r6, #0
 801c11c:	d045      	beq.n	801c1aa <__sflush_r+0xae>
 801c11e:	2300      	movs	r3, #0
 801c120:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c124:	682f      	ldr	r7, [r5, #0]
 801c126:	6a21      	ldr	r1, [r4, #32]
 801c128:	602b      	str	r3, [r5, #0]
 801c12a:	d030      	beq.n	801c18e <__sflush_r+0x92>
 801c12c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c12e:	89a3      	ldrh	r3, [r4, #12]
 801c130:	0759      	lsls	r1, r3, #29
 801c132:	d505      	bpl.n	801c140 <__sflush_r+0x44>
 801c134:	6863      	ldr	r3, [r4, #4]
 801c136:	1ad2      	subs	r2, r2, r3
 801c138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c13a:	b10b      	cbz	r3, 801c140 <__sflush_r+0x44>
 801c13c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c13e:	1ad2      	subs	r2, r2, r3
 801c140:	2300      	movs	r3, #0
 801c142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c144:	6a21      	ldr	r1, [r4, #32]
 801c146:	4628      	mov	r0, r5
 801c148:	47b0      	blx	r6
 801c14a:	1c43      	adds	r3, r0, #1
 801c14c:	89a3      	ldrh	r3, [r4, #12]
 801c14e:	d106      	bne.n	801c15e <__sflush_r+0x62>
 801c150:	6829      	ldr	r1, [r5, #0]
 801c152:	291d      	cmp	r1, #29
 801c154:	d82b      	bhi.n	801c1ae <__sflush_r+0xb2>
 801c156:	4a2a      	ldr	r2, [pc, #168]	@ (801c200 <__sflush_r+0x104>)
 801c158:	40ca      	lsrs	r2, r1
 801c15a:	07d6      	lsls	r6, r2, #31
 801c15c:	d527      	bpl.n	801c1ae <__sflush_r+0xb2>
 801c15e:	2200      	movs	r2, #0
 801c160:	6062      	str	r2, [r4, #4]
 801c162:	04d9      	lsls	r1, r3, #19
 801c164:	6922      	ldr	r2, [r4, #16]
 801c166:	6022      	str	r2, [r4, #0]
 801c168:	d504      	bpl.n	801c174 <__sflush_r+0x78>
 801c16a:	1c42      	adds	r2, r0, #1
 801c16c:	d101      	bne.n	801c172 <__sflush_r+0x76>
 801c16e:	682b      	ldr	r3, [r5, #0]
 801c170:	b903      	cbnz	r3, 801c174 <__sflush_r+0x78>
 801c172:	6560      	str	r0, [r4, #84]	@ 0x54
 801c174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c176:	602f      	str	r7, [r5, #0]
 801c178:	b1b9      	cbz	r1, 801c1aa <__sflush_r+0xae>
 801c17a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c17e:	4299      	cmp	r1, r3
 801c180:	d002      	beq.n	801c188 <__sflush_r+0x8c>
 801c182:	4628      	mov	r0, r5
 801c184:	f7ff fa9c 	bl	801b6c0 <_free_r>
 801c188:	2300      	movs	r3, #0
 801c18a:	6363      	str	r3, [r4, #52]	@ 0x34
 801c18c:	e00d      	b.n	801c1aa <__sflush_r+0xae>
 801c18e:	2301      	movs	r3, #1
 801c190:	4628      	mov	r0, r5
 801c192:	47b0      	blx	r6
 801c194:	4602      	mov	r2, r0
 801c196:	1c50      	adds	r0, r2, #1
 801c198:	d1c9      	bne.n	801c12e <__sflush_r+0x32>
 801c19a:	682b      	ldr	r3, [r5, #0]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d0c6      	beq.n	801c12e <__sflush_r+0x32>
 801c1a0:	2b1d      	cmp	r3, #29
 801c1a2:	d001      	beq.n	801c1a8 <__sflush_r+0xac>
 801c1a4:	2b16      	cmp	r3, #22
 801c1a6:	d11e      	bne.n	801c1e6 <__sflush_r+0xea>
 801c1a8:	602f      	str	r7, [r5, #0]
 801c1aa:	2000      	movs	r0, #0
 801c1ac:	e022      	b.n	801c1f4 <__sflush_r+0xf8>
 801c1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c1b2:	b21b      	sxth	r3, r3
 801c1b4:	e01b      	b.n	801c1ee <__sflush_r+0xf2>
 801c1b6:	690f      	ldr	r7, [r1, #16]
 801c1b8:	2f00      	cmp	r7, #0
 801c1ba:	d0f6      	beq.n	801c1aa <__sflush_r+0xae>
 801c1bc:	0793      	lsls	r3, r2, #30
 801c1be:	680e      	ldr	r6, [r1, #0]
 801c1c0:	bf08      	it	eq
 801c1c2:	694b      	ldreq	r3, [r1, #20]
 801c1c4:	600f      	str	r7, [r1, #0]
 801c1c6:	bf18      	it	ne
 801c1c8:	2300      	movne	r3, #0
 801c1ca:	eba6 0807 	sub.w	r8, r6, r7
 801c1ce:	608b      	str	r3, [r1, #8]
 801c1d0:	f1b8 0f00 	cmp.w	r8, #0
 801c1d4:	dde9      	ble.n	801c1aa <__sflush_r+0xae>
 801c1d6:	6a21      	ldr	r1, [r4, #32]
 801c1d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c1da:	4643      	mov	r3, r8
 801c1dc:	463a      	mov	r2, r7
 801c1de:	4628      	mov	r0, r5
 801c1e0:	47b0      	blx	r6
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	dc08      	bgt.n	801c1f8 <__sflush_r+0xfc>
 801c1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c1ee:	81a3      	strh	r3, [r4, #12]
 801c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1f8:	4407      	add	r7, r0
 801c1fa:	eba8 0800 	sub.w	r8, r8, r0
 801c1fe:	e7e7      	b.n	801c1d0 <__sflush_r+0xd4>
 801c200:	20400001 	.word	0x20400001

0801c204 <_fflush_r>:
 801c204:	b538      	push	{r3, r4, r5, lr}
 801c206:	690b      	ldr	r3, [r1, #16]
 801c208:	4605      	mov	r5, r0
 801c20a:	460c      	mov	r4, r1
 801c20c:	b913      	cbnz	r3, 801c214 <_fflush_r+0x10>
 801c20e:	2500      	movs	r5, #0
 801c210:	4628      	mov	r0, r5
 801c212:	bd38      	pop	{r3, r4, r5, pc}
 801c214:	b118      	cbz	r0, 801c21e <_fflush_r+0x1a>
 801c216:	6a03      	ldr	r3, [r0, #32]
 801c218:	b90b      	cbnz	r3, 801c21e <_fflush_r+0x1a>
 801c21a:	f7fe ff9f 	bl	801b15c <__sinit>
 801c21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d0f3      	beq.n	801c20e <_fflush_r+0xa>
 801c226:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c228:	07d0      	lsls	r0, r2, #31
 801c22a:	d404      	bmi.n	801c236 <_fflush_r+0x32>
 801c22c:	0599      	lsls	r1, r3, #22
 801c22e:	d402      	bmi.n	801c236 <_fflush_r+0x32>
 801c230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c232:	f7ff fa34 	bl	801b69e <__retarget_lock_acquire_recursive>
 801c236:	4628      	mov	r0, r5
 801c238:	4621      	mov	r1, r4
 801c23a:	f7ff ff5f 	bl	801c0fc <__sflush_r>
 801c23e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c240:	07da      	lsls	r2, r3, #31
 801c242:	4605      	mov	r5, r0
 801c244:	d4e4      	bmi.n	801c210 <_fflush_r+0xc>
 801c246:	89a3      	ldrh	r3, [r4, #12]
 801c248:	059b      	lsls	r3, r3, #22
 801c24a:	d4e1      	bmi.n	801c210 <_fflush_r+0xc>
 801c24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c24e:	f7ff fa27 	bl	801b6a0 <__retarget_lock_release_recursive>
 801c252:	e7dd      	b.n	801c210 <_fflush_r+0xc>

0801c254 <__swhatbuf_r>:
 801c254:	b570      	push	{r4, r5, r6, lr}
 801c256:	460c      	mov	r4, r1
 801c258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c25c:	2900      	cmp	r1, #0
 801c25e:	b096      	sub	sp, #88	@ 0x58
 801c260:	4615      	mov	r5, r2
 801c262:	461e      	mov	r6, r3
 801c264:	da0d      	bge.n	801c282 <__swhatbuf_r+0x2e>
 801c266:	89a3      	ldrh	r3, [r4, #12]
 801c268:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c26c:	f04f 0100 	mov.w	r1, #0
 801c270:	bf14      	ite	ne
 801c272:	2340      	movne	r3, #64	@ 0x40
 801c274:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c278:	2000      	movs	r0, #0
 801c27a:	6031      	str	r1, [r6, #0]
 801c27c:	602b      	str	r3, [r5, #0]
 801c27e:	b016      	add	sp, #88	@ 0x58
 801c280:	bd70      	pop	{r4, r5, r6, pc}
 801c282:	466a      	mov	r2, sp
 801c284:	f000 f862 	bl	801c34c <_fstat_r>
 801c288:	2800      	cmp	r0, #0
 801c28a:	dbec      	blt.n	801c266 <__swhatbuf_r+0x12>
 801c28c:	9901      	ldr	r1, [sp, #4]
 801c28e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c292:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c296:	4259      	negs	r1, r3
 801c298:	4159      	adcs	r1, r3
 801c29a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c29e:	e7eb      	b.n	801c278 <__swhatbuf_r+0x24>

0801c2a0 <__smakebuf_r>:
 801c2a0:	898b      	ldrh	r3, [r1, #12]
 801c2a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c2a4:	079d      	lsls	r5, r3, #30
 801c2a6:	4606      	mov	r6, r0
 801c2a8:	460c      	mov	r4, r1
 801c2aa:	d507      	bpl.n	801c2bc <__smakebuf_r+0x1c>
 801c2ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c2b0:	6023      	str	r3, [r4, #0]
 801c2b2:	6123      	str	r3, [r4, #16]
 801c2b4:	2301      	movs	r3, #1
 801c2b6:	6163      	str	r3, [r4, #20]
 801c2b8:	b003      	add	sp, #12
 801c2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2bc:	ab01      	add	r3, sp, #4
 801c2be:	466a      	mov	r2, sp
 801c2c0:	f7ff ffc8 	bl	801c254 <__swhatbuf_r>
 801c2c4:	9f00      	ldr	r7, [sp, #0]
 801c2c6:	4605      	mov	r5, r0
 801c2c8:	4639      	mov	r1, r7
 801c2ca:	4630      	mov	r0, r6
 801c2cc:	f7ff fa64 	bl	801b798 <_malloc_r>
 801c2d0:	b948      	cbnz	r0, 801c2e6 <__smakebuf_r+0x46>
 801c2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2d6:	059a      	lsls	r2, r3, #22
 801c2d8:	d4ee      	bmi.n	801c2b8 <__smakebuf_r+0x18>
 801c2da:	f023 0303 	bic.w	r3, r3, #3
 801c2de:	f043 0302 	orr.w	r3, r3, #2
 801c2e2:	81a3      	strh	r3, [r4, #12]
 801c2e4:	e7e2      	b.n	801c2ac <__smakebuf_r+0xc>
 801c2e6:	89a3      	ldrh	r3, [r4, #12]
 801c2e8:	6020      	str	r0, [r4, #0]
 801c2ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c2ee:	81a3      	strh	r3, [r4, #12]
 801c2f0:	9b01      	ldr	r3, [sp, #4]
 801c2f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c2f6:	b15b      	cbz	r3, 801c310 <__smakebuf_r+0x70>
 801c2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2fc:	4630      	mov	r0, r6
 801c2fe:	f000 f837 	bl	801c370 <_isatty_r>
 801c302:	b128      	cbz	r0, 801c310 <__smakebuf_r+0x70>
 801c304:	89a3      	ldrh	r3, [r4, #12]
 801c306:	f023 0303 	bic.w	r3, r3, #3
 801c30a:	f043 0301 	orr.w	r3, r3, #1
 801c30e:	81a3      	strh	r3, [r4, #12]
 801c310:	89a3      	ldrh	r3, [r4, #12]
 801c312:	431d      	orrs	r5, r3
 801c314:	81a5      	strh	r5, [r4, #12]
 801c316:	e7cf      	b.n	801c2b8 <__smakebuf_r+0x18>

0801c318 <memmove>:
 801c318:	4288      	cmp	r0, r1
 801c31a:	b510      	push	{r4, lr}
 801c31c:	eb01 0402 	add.w	r4, r1, r2
 801c320:	d902      	bls.n	801c328 <memmove+0x10>
 801c322:	4284      	cmp	r4, r0
 801c324:	4623      	mov	r3, r4
 801c326:	d807      	bhi.n	801c338 <memmove+0x20>
 801c328:	1e43      	subs	r3, r0, #1
 801c32a:	42a1      	cmp	r1, r4
 801c32c:	d008      	beq.n	801c340 <memmove+0x28>
 801c32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c332:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c336:	e7f8      	b.n	801c32a <memmove+0x12>
 801c338:	4402      	add	r2, r0
 801c33a:	4601      	mov	r1, r0
 801c33c:	428a      	cmp	r2, r1
 801c33e:	d100      	bne.n	801c342 <memmove+0x2a>
 801c340:	bd10      	pop	{r4, pc}
 801c342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c34a:	e7f7      	b.n	801c33c <memmove+0x24>

0801c34c <_fstat_r>:
 801c34c:	b538      	push	{r3, r4, r5, lr}
 801c34e:	4d07      	ldr	r5, [pc, #28]	@ (801c36c <_fstat_r+0x20>)
 801c350:	2300      	movs	r3, #0
 801c352:	4604      	mov	r4, r0
 801c354:	4608      	mov	r0, r1
 801c356:	4611      	mov	r1, r2
 801c358:	602b      	str	r3, [r5, #0]
 801c35a:	f7e5 fffe 	bl	800235a <_fstat>
 801c35e:	1c43      	adds	r3, r0, #1
 801c360:	d102      	bne.n	801c368 <_fstat_r+0x1c>
 801c362:	682b      	ldr	r3, [r5, #0]
 801c364:	b103      	cbz	r3, 801c368 <_fstat_r+0x1c>
 801c366:	6023      	str	r3, [r4, #0]
 801c368:	bd38      	pop	{r3, r4, r5, pc}
 801c36a:	bf00      	nop
 801c36c:	24008648 	.word	0x24008648

0801c370 <_isatty_r>:
 801c370:	b538      	push	{r3, r4, r5, lr}
 801c372:	4d06      	ldr	r5, [pc, #24]	@ (801c38c <_isatty_r+0x1c>)
 801c374:	2300      	movs	r3, #0
 801c376:	4604      	mov	r4, r0
 801c378:	4608      	mov	r0, r1
 801c37a:	602b      	str	r3, [r5, #0]
 801c37c:	f7e5 fffd 	bl	800237a <_isatty>
 801c380:	1c43      	adds	r3, r0, #1
 801c382:	d102      	bne.n	801c38a <_isatty_r+0x1a>
 801c384:	682b      	ldr	r3, [r5, #0]
 801c386:	b103      	cbz	r3, 801c38a <_isatty_r+0x1a>
 801c388:	6023      	str	r3, [r4, #0]
 801c38a:	bd38      	pop	{r3, r4, r5, pc}
 801c38c:	24008648 	.word	0x24008648

0801c390 <_sbrk_r>:
 801c390:	b538      	push	{r3, r4, r5, lr}
 801c392:	4d06      	ldr	r5, [pc, #24]	@ (801c3ac <_sbrk_r+0x1c>)
 801c394:	2300      	movs	r3, #0
 801c396:	4604      	mov	r4, r0
 801c398:	4608      	mov	r0, r1
 801c39a:	602b      	str	r3, [r5, #0]
 801c39c:	f7e6 f806 	bl	80023ac <_sbrk>
 801c3a0:	1c43      	adds	r3, r0, #1
 801c3a2:	d102      	bne.n	801c3aa <_sbrk_r+0x1a>
 801c3a4:	682b      	ldr	r3, [r5, #0]
 801c3a6:	b103      	cbz	r3, 801c3aa <_sbrk_r+0x1a>
 801c3a8:	6023      	str	r3, [r4, #0]
 801c3aa:	bd38      	pop	{r3, r4, r5, pc}
 801c3ac:	24008648 	.word	0x24008648

0801c3b0 <_realloc_r>:
 801c3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3b4:	4607      	mov	r7, r0
 801c3b6:	4614      	mov	r4, r2
 801c3b8:	460d      	mov	r5, r1
 801c3ba:	b921      	cbnz	r1, 801c3c6 <_realloc_r+0x16>
 801c3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c3c0:	4611      	mov	r1, r2
 801c3c2:	f7ff b9e9 	b.w	801b798 <_malloc_r>
 801c3c6:	b92a      	cbnz	r2, 801c3d4 <_realloc_r+0x24>
 801c3c8:	f7ff f97a 	bl	801b6c0 <_free_r>
 801c3cc:	4625      	mov	r5, r4
 801c3ce:	4628      	mov	r0, r5
 801c3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3d4:	f000 f81a 	bl	801c40c <_malloc_usable_size_r>
 801c3d8:	4284      	cmp	r4, r0
 801c3da:	4606      	mov	r6, r0
 801c3dc:	d802      	bhi.n	801c3e4 <_realloc_r+0x34>
 801c3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c3e2:	d8f4      	bhi.n	801c3ce <_realloc_r+0x1e>
 801c3e4:	4621      	mov	r1, r4
 801c3e6:	4638      	mov	r0, r7
 801c3e8:	f7ff f9d6 	bl	801b798 <_malloc_r>
 801c3ec:	4680      	mov	r8, r0
 801c3ee:	b908      	cbnz	r0, 801c3f4 <_realloc_r+0x44>
 801c3f0:	4645      	mov	r5, r8
 801c3f2:	e7ec      	b.n	801c3ce <_realloc_r+0x1e>
 801c3f4:	42b4      	cmp	r4, r6
 801c3f6:	4622      	mov	r2, r4
 801c3f8:	4629      	mov	r1, r5
 801c3fa:	bf28      	it	cs
 801c3fc:	4632      	movcs	r2, r6
 801c3fe:	f7ff f950 	bl	801b6a2 <memcpy>
 801c402:	4629      	mov	r1, r5
 801c404:	4638      	mov	r0, r7
 801c406:	f7ff f95b 	bl	801b6c0 <_free_r>
 801c40a:	e7f1      	b.n	801c3f0 <_realloc_r+0x40>

0801c40c <_malloc_usable_size_r>:
 801c40c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c410:	1f18      	subs	r0, r3, #4
 801c412:	2b00      	cmp	r3, #0
 801c414:	bfbc      	itt	lt
 801c416:	580b      	ldrlt	r3, [r1, r0]
 801c418:	18c0      	addlt	r0, r0, r3
 801c41a:	4770      	bx	lr

0801c41c <_init>:
 801c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c41e:	bf00      	nop
 801c420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c422:	bc08      	pop	{r3}
 801c424:	469e      	mov	lr, r3
 801c426:	4770      	bx	lr

0801c428 <_fini>:
 801c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c42a:	bf00      	nop
 801c42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c42e:	bc08      	pop	{r3}
 801c430:	469e      	mov	lr, r3
 801c432:	4770      	bx	lr
